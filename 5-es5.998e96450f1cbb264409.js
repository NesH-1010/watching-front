(function(){function _defineProperty(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function _get(e,t,r){return(_get="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,r){var a=_superPropBase(e,t);if(a){var n=Object.getOwnPropertyDescriptor(a,t);return n.get?n.get.call(r):n.value}})(e,t,r||e)}function _superPropBase(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=_getPrototypeOf(e)););return e}function _wrapNativeSuper(e){var t="function"==typeof Map?new Map:void 0;return(_wrapNativeSuper=function(e){if(null===e||!_isNativeFunction(e))return e;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return _construct(e,arguments,_getPrototypeOf(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),_setPrototypeOf(r,e)})(e)}function _construct(e,t,r){return(_construct=_isNativeReflectConstruct()?Reflect.construct:function(e,t,r){var a=[null];a.push.apply(a,t);var n=new(Function.bind.apply(e,a));return r&&_setPrototypeOf(n,r.prototype),n}).apply(null,arguments)}function _isNativeFunction(e){return-1!==Function.toString.call(e).indexOf("[native code]")}function _createForOfIteratorHelper(e,t){var r;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(r=_unsupportedIterableToArray(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var a=0,n=function(){};return{s:n,n:function(){return a>=e.length?{done:!0}:{done:!1,value:e[a++]}},e:function(e){throw e},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,o=!0,s=!1;return{s:function(){r=e[Symbol.iterator]()},n:function(){var e=r.next();return o=e.done,e},e:function(e){s=!0,i=e},f:function(){try{o||null==r.return||r.return()}finally{if(s)throw i}}}}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var r,a=_getPrototypeOf(e);if(t){var n=_getPrototypeOf(this).constructor;r=Reflect.construct(a,arguments,n)}else r=a.apply(this,arguments);return _possibleConstructorReturn(this,r)}}function _possibleConstructorReturn(e,t){return!t||"object"!=typeof t&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _toConsumableArray(e){return _arrayWithoutHoles(e)||_iterableToArray(e)||_unsupportedIterableToArray(e)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _iterableToArray(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}function _arrayWithoutHoles(e){if(Array.isArray(e))return _arrayLikeToArray(e)}function _slicedToArray(e,t){return _arrayWithHoles(e)||_iterableToArrayLimit(e,t)||_unsupportedIterableToArray(e,t)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return _arrayLikeToArray(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?_arrayLikeToArray(e,t):void 0}}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,a=new Array(t);r<t;r++)a[r]=e[r];return a}function _iterableToArrayLimit(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var r=[],a=!0,n=!1,i=void 0;try{for(var o,s=e[Symbol.iterator]();!(a=(o=s.next()).done)&&(r.push(o.value),!t||r.length!==t);a=!0);}catch(l){n=!0,i=l}finally{try{a||null==s.return||s.return()}finally{if(n)throw i}}return r}}function _arrayWithHoles(e){if(Array.isArray(e))return e}function asyncGeneratorStep(e,t,r,a,n,i,o){try{var s=e[i](o),l=s.value}catch(u){return void r(u)}s.done?t(l):Promise.resolve(l).then(a,n)}function _asyncToGenerator(e){return function(){var t=this,r=arguments;return new Promise((function(a,n){var i=e.apply(t,r);function o(e){asyncGeneratorStep(i,a,n,o,s,"next",e)}function s(e){asyncGeneratorStep(i,a,n,o,s,"throw",e)}o(void 0)}))}}function _objectDestructuringEmpty(e){if(null==e)throw new TypeError("Cannot destructure undefined")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var r=0;r<t.length;r++){var a=t[r];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function _createClass(e,t,r){return t&&_defineProperties(e.prototype,t),r&&_defineProperties(e,r),e}(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{"3UD+":function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},4:function(e,t){},5:function(e,t){},6:function(e,t){},7:function(e,t){},8:function(e,t){},B9Yq:function(e,t){e.exports=function(){throw new Error("define cannot be used indirect")}},EhIR:function(e,t,r){(function(e){var a;!function(e,n,i){function o(e){var t,r=this,a=(t=4022871197,function(e){e=e.toString();for(var r=0;r<e.length;r++){var a=.02519603282416938*(t+=e.charCodeAt(r));a-=t=a>>>0,t=(a*=t)>>>0,t+=4294967296*(a-=t)}return 2.3283064365386963e-10*(t>>>0)});r.next=function(){var e=2091639*r.s0+2.3283064365386963e-10*r.c;return r.s0=r.s1,r.s1=r.s2,r.s2=e-(r.c=0|e)},r.c=1,r.s0=a(" "),r.s1=a(" "),r.s2=a(" "),r.s0-=a(e),r.s0<0&&(r.s0+=1),r.s1-=a(e),r.s1<0&&(r.s1+=1),r.s2-=a(e),r.s2<0&&(r.s2+=1),a=null}function s(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function l(e,t){var r=new o(e),a=t&&t.state,n=r.next;return n.int32=function(){return 4294967296*r.next()|0},n.double=function(){return n()+11102230246251565e-32*(2097152*n()|0)},n.quick=n,a&&("object"==typeof a&&s(a,r),n.state=function(){return s(r,{})}),n}n&&n.exports?n.exports=l:r("B9Yq")&&r("PDX0")?void 0===(a=(function(){return l}).call(t,r,t,n))||(n.exports=a):this.alea=l}(0,e,r("B9Yq"))}).call(this,r("YuTi")(e))},IqXj:function(e,t,r){"use strict";r.r(t),r.d(t,"AdminLayoutModule",(function(){return uE}));var a={};r.r(a),r.d(a,"shuffle",(function(){return me})),r.d(a,"clamp",(function(){return ye})),r.d(a,"nearestLargerEven",(function(){return be})),r.d(a,"sum",(function(){return xe})),r.d(a,"randUniform",(function(){return ke})),r.d(a,"distSquared",(function(){return we})),r.d(a,"assert",(function(){return Ce})),r.d(a,"assertShapesMatch",(function(){return Te})),r.d(a,"assertNonNull",(function(){return Se})),r.d(a,"flatten",(function(){return Ie})),r.d(a,"sizeFromShape",(function(){return Ae})),r.d(a,"isScalarShape",(function(){return Re})),r.d(a,"arraysEqual",(function(){return Ne})),r.d(a,"isInt",(function(){return Ee})),r.d(a,"tanh",(function(){return Fe})),r.d(a,"sizeToSquarishShape",(function(){return Me})),r.d(a,"createShuffledIndices",(function(){return De})),r.d(a,"rightPad",(function(){return Oe})),r.d(a,"repeatedTry",(function(){return Le})),r.d(a,"inferFromImplicitShape",(function(){return ze})),r.d(a,"parseAxisParam",(function(){return Be})),r.d(a,"squeezeShape",(function(){return Pe})),r.d(a,"getTypedArrayFromDType",(function(){return Ve})),r.d(a,"getArrayFromDType",(function(){return Ue})),r.d(a,"checkConversionForErrors",(function(){return We})),r.d(a,"isValidDtype",(function(){return Ge})),r.d(a,"hasEncodingLoss",(function(){return He})),r.d(a,"isTypedArray",(function(){return je})),r.d(a,"bytesPerElement",(function(){return qe})),r.d(a,"bytesFromStringArray",(function(){return Xe})),r.d(a,"isString",(function(){return Ke})),r.d(a,"isBoolean",(function(){return Qe})),r.d(a,"isNumber",(function(){return Ye})),r.d(a,"inferDtype",(function(){return Je})),r.d(a,"isFunction",(function(){return Ze})),r.d(a,"nearestDivisor",(function(){return $e})),r.d(a,"computeStrides",(function(){return et})),r.d(a,"toNestedArray",(function(){return tt})),r.d(a,"makeOnesTypedArray",(function(){return rt})),r.d(a,"makeZerosTypedArray",(function(){return at})),r.d(a,"makeZerosNestedTypedArray",(function(){return nt})),r.d(a,"assertNonNegativeIntegerDimensions",(function(){return it})),r.d(a,"locToIndex",(function(){return ot})),r.d(a,"indexToLoc",(function(){return st})),r.d(a,"isPromise",(function(){return lt})),r.d(a,"createScalarValue",(function(){return bn})),r.d(a,"toTypedArray",(function(){return xn})),r.d(a,"now",(function(){return kn})),r.d(a,"fetch",(function(){return wn})),r.d(a,"encodeString",(function(){return Cn})),r.d(a,"decodeString",(function(){return Tn}));var n={};r.r(n),r.d(n,"makeTypesMatch",(function(){return Pn})),r.d(n,"assertTypesMatch",(function(){return Vn})),r.d(n,"isTensorInList",(function(){return Un})),r.d(n,"getTensorsInContainer",(function(){return Wn}));var i={};r.r(i),r.d(i,"isMobile",(function(){return Kn})),r.d(i,"isBrowser",(function(){return Qn}));var o={};r.r(o),r.d(o,"copyModel",(function(){return qi})),r.d(o,"listModels",(function(){return Wi})),r.d(o,"moveModel",(function(){return Ki})),r.d(o,"removeModel",(function(){return Hi})),r.d(o,"browserFiles",(function(){return io})),r.d(o,"browserHTTPRequest",(function(){return _o})),r.d(o,"concatenateArrayBuffers",(function(){return di})),r.d(o,"decodeWeights",(function(){return ui})),r.d(o,"encodeWeights",(function(){return si})),r.d(o,"fromMemory",(function(){return bo})),r.d(o,"getLoadHandlers",(function(){return xi})),r.d(o,"getModelArtifactsInfoForJSON",(function(){return pi})),r.d(o,"getSaveHandlers",(function(){return bi})),r.d(o,"http",(function(){return go})),r.d(o,"isHTTPScheme",(function(){return vo})),r.d(o,"loadWeights",(function(){return uo})),r.d(o,"registerLoadRouter",(function(){return yi})),r.d(o,"registerSaveRouter",(function(){return mi})),r.d(o,"weightsLoaderFactory",(function(){return co})),r.d(o,"withSaveHandler",(function(){return xo}));var s={};r.r(s),r.d(s,"confusionMatrix",(function(){return Io}));var l={};r.r(l),r.d(l,"toPixels",(function(){return Ro})),r.d(l,"fromPixels",(function(){return Eo}));var u={};r.r(u),r.d(u,"prepareAndValidate",(function(){return Fo}));var h={};r.r(h),r.d(h,"validateUpdateShape",(function(){return Mo})),r.d(h,"validateInput",(function(){return Do})),r.d(h,"calculateShapes",(function(){return Oo}));var c={};r.r(c),r.d(c,"assertParamsValid",(function(){return Lo})),r.d(c,"maskToAxes",(function(){return zo})),r.d(c,"computeOutShape",(function(){return Bo})),r.d(c,"stridesWithElidedDims",(function(){return Po})),r.d(c,"getNormalizedAxes",(function(){return Wo})),r.d(c,"startIndicesWithElidedDims",(function(){return Go})),r.d(c,"stopIndicesWithElidedDims",(function(){return Ho})),r.d(c,"stridesForAxis",(function(){return jo})),r.d(c,"startForAxis",(function(){return qo})),r.d(c,"stopForAxis",(function(){return Xo})),r.d(c,"isSliceContinous",(function(){return Ko})),r.d(c,"computeFlatOffset",(function(){return Qo})),r.d(c,"parseSliceParams",(function(){return Yo}));var f={};r.r(f),r.d(f,"Serializable",(function(){return Jo})),r.d(f,"SerializationMap",(function(){return Zo})),r.d(f,"registerClass",(function(){return $o}));var d={};r.r(d),r.d(d,"TEST_EPSILON_FLOAT16",(function(){return es})),r.d(d,"expectArraysClose",(function(){return ts})),r.d(d,"testEpsilon",(function(){return rs})),r.d(d,"expectPromiseToFail",(function(){return ns})),r.d(d,"expectArraysEqual",(function(){return is})),r.d(d,"expectNumbersClose",(function(){return os})),r.d(d,"expectValuesInRange",(function(){return ls})),r.d(d,"expectArrayBuffersEqual",(function(){return us}));var v={};r.r(v),r.d(v,"segOpComputeOptimalWindowSize",(function(){return Bu})),r.d(v,"computeOutShape",(function(){return Pu})),r.d(v,"collectGatherOpShapeInfo",(function(){return Vu}));var p={};r.r(p),r.d(p,"conv2d",(function(){return gf})),r.d(p,"depthwiseConv2d",(function(){return yf})),r.d(p,"matMul",(function(){return bf}));var g={};r.r(g),r.d(g,"axesAreInnerMostDims",(function(){return fl})),r.d(g,"combineLocations",(function(){return dl})),r.d(g,"computeOutAndReduceShapes",(function(){return vl})),r.d(g,"expandShapeToKeepDim",(function(){return pl})),r.d(g,"assertAxesAreInnerMostDims",(function(){return gl})),r.d(g,"getAxesPermutation",(function(){return _l})),r.d(g,"getUndoAxesPermutation",(function(){return ml})),r.d(g,"getInnerMostAxes",(function(){return yl})),r.d(g,"getBroadcastDims",(function(){return tl})),r.d(g,"getReductionAxes",(function(){return rl})),r.d(g,"assertAndGetBroadcastShape",(function(){return al})),r.d(g,"assertParamsConsistent",(function(){return Hl})),r.d(g,"computeOutShape",(function(){return jl})),r.d(g,"computeDilation2DInfo",(function(){return Rl})),r.d(g,"computePool2DInfo",(function(){return Nl})),r.d(g,"computePool3DInfo",(function(){return El})),r.d(g,"computeConv2DInfo",(function(){return Fl})),r.d(g,"computeConv3DInfo",(function(){return Ml})),r.d(g,"computeDefaultPad",(function(){return Dl})),r.d(g,"tupleValuesAreOne",(function(){return Pl})),r.d(g,"eitherStridesOrDilationsAreOne",(function(){return Vl})),r.d(g,"convertConv2DDataFormat",(function(){return Ul})),r.d(g,"getFusedDyActivation",(function(){return ff})),r.d(g,"getFusedBiasGradient",(function(){return df})),r.d(g,"applyActivation",(function(){return vf})),r.d(g,"shouldFuse",(function(){return pf})),r.d(g,"PARALLELIZE_THRESHOLD",(function(){return Lu})),r.d(g,"computeOptimalWindowSize",(function(){return zu})),r.d(g,"slice_util",(function(){return c})),r.d(g,"upcastType",(function(){return zn})),r.d(g,"getImageCenter",(function(){return pd})),r.d(g,"getReshaped",(function(){return gd})),r.d(g,"getPermuted",(function(){return _d})),r.d(g,"getReshapedPermuted",(function(){return md})),r.d(g,"getSliceBeginCoords",(function(){return yd})),r.d(g,"getSliceSize",(function(){return bd})),r.d(g,"prepareAndValidate",(function(){return Fo})),r.d(g,"validateUpdateShape",(function(){return Mo})),r.d(g,"validateInput",(function(){return Do})),r.d(g,"calculateShapes",(function(){return Oo})),r.d(g,"SELU_SCALEALPHA",(function(){return xd})),r.d(g,"SELU_SCALE",(function(){return kd})),r.d(g,"ERF_P",(function(){return wd})),r.d(g,"ERF_A1",(function(){return Cd})),r.d(g,"ERF_A2",(function(){return Td})),r.d(g,"ERF_A3",(function(){return Sd})),r.d(g,"ERF_A4",(function(){return Id})),r.d(g,"ERF_A5",(function(){return Ad})),r.d(g,"warn",(function(){return Rd})),r.d(g,"log",(function(){return Nd})),r.d(g,"mergeRealAndImagArrays",(function(){return Ed})),r.d(g,"splitRealAndImagArrays",(function(){return Fd})),r.d(g,"complexWithEvenIndex",(function(){return Md})),r.d(g,"complexWithOddIndex",(function(){return Dd})),r.d(g,"getComplexWithIndex",(function(){return Od})),r.d(g,"assignToTypedArray",(function(){return Ld})),r.d(g,"exponents",(function(){return zd})),r.d(g,"exponent",(function(){return Bd})),r.d(g,"prepareSplitSize",(function(){return mc})),r.d(g,"segment_util",(function(){return v})),r.d(g,"castTensor",(function(){return Pd})),r.d(g,"reshapeTensor",(function(){return Vd})),r.d(g,"linspaceImpl",(function(){return Ud}));var _={};r.r(_),r.d(_,"nonMaxSuppressionV3Impl",(function(){return Ff})),r.d(_,"nonMaxSuppressionV4Impl",(function(){return Mf})),r.d(_,"nonMaxSuppressionV5Impl",(function(){return Df})),r.d(_,"split",(function(){return Wd})),r.d(_,"tile",(function(){return Gd})),r.d(_,"topkImpl",(function(){return Hd})),r.d(_,"whereImpl",(function(){return zc}));var m={};r.r(m),r.d(m,"AdadeltaOptimizer",(function(){return Ks})),r.d(m,"AdagradOptimizer",(function(){return Ys})),r.d(m,"AdamOptimizer",(function(){return $s})),r.d(m,"AdamaxOptimizer",(function(){return il})),r.d(m,"MomentumOptimizer",(function(){return sl})),r.d(m,"Optimizer",(function(){return Xs})),r.d(m,"RMSPropOptimizer",(function(){return ll})),r.d(m,"SGDOptimizer",(function(){return ol})),r.d(m,"Tensor",(function(){return Rn})),r.d(m,"TensorBuffer",(function(){return Sn})),r.d(m,"Variable",(function(){return On})),r.d(m,"Rank",(function(){return Nn})),r.d(m,"sumOutType",(function(){return Bn})),r.d(m,"upcastType",(function(){return zn})),r.d(m,"abs",(function(){return el})),r.d(m,"acos",(function(){return ul})),r.d(m,"acosh",(function(){return hl})),r.d(m,"add",(function(){return Fs})),r.d(m,"addN",(function(){return cl})),r.d(m,"all",(function(){return bl})),r.d(m,"any",(function(){return xl})),r.d(m,"argMax",(function(){return kl})),r.d(m,"argMin",(function(){return wl})),r.d(m,"asin",(function(){return Cl})),r.d(m,"asinh",(function(){return Tl})),r.d(m,"atan",(function(){return Sl})),r.d(m,"atan2",(function(){return Il})),r.d(m,"atanh",(function(){return Al})),r.d(m,"avgPool",(function(){return Wl})),r.d(m,"avgPool3d",(function(){return Gl})),r.d(m,"basicLSTMCell",(function(){return Yl})),r.d(m,"batchToSpaceND",(function(){return Jl})),r.d(m,"batchNorm",(function(){return $l})),r.d(m,"batchNorm2d",(function(){return eu})),r.d(m,"batchNorm3d",(function(){return tu})),r.d(m,"batchNorm4d",(function(){return ru})),r.d(m,"broadcastTo",(function(){return au})),r.d(m,"buffer",(function(){return Zi})),r.d(m,"cast",(function(){return $i})),r.d(m,"ceil",(function(){return nu})),r.d(m,"clipByValue",(function(){return iu})),r.d(m,"clone",(function(){return eo})),r.d(m,"complex",(function(){return ai})),r.d(m,"concat",(function(){return ql})),r.d(m,"concat1d",(function(){return ou})),r.d(m,"concat2d",(function(){return su})),r.d(m,"concat3d",(function(){return lu})),r.d(m,"concat4d",(function(){return uu})),r.d(m,"conv1d",(function(){return cu})),r.d(m,"conv2d",(function(){return hu})),r.d(m,"conv2dTranspose",(function(){return du})),r.d(m,"conv3d",(function(){return vu})),r.d(m,"conv3dTranspose",(function(){return gu})),r.d(m,"cos",(function(){return _u})),r.d(m,"cosh",(function(){return mu})),r.d(m,"cumsum",(function(){return yu})),r.d(m,"depthToSpace",(function(){return bu})),r.d(m,"depthwiseConv2d",(function(){return xu})),r.d(m,"diag",(function(){return ku})),r.d(m,"dilation2d",(function(){return wu})),r.d(m,"div",(function(){return Ds})),r.d(m,"divNoNan",(function(){return Su})),r.d(m,"dot",(function(){return Iu})),r.d(m,"elu",(function(){return Au})),r.d(m,"equal",(function(){return Cu})),r.d(m,"erf",(function(){return Ru})),r.d(m,"exp",(function(){return Nu})),r.d(m,"expandDims",(function(){return Eu})),r.d(m,"expm1",(function(){return Fu})),r.d(m,"eye",(function(){return Du})),r.d(m,"fill",(function(){return Qs})),r.d(m,"floor",(function(){return Ou})),r.d(m,"floorDiv",(function(){return Ms})),r.d(m,"gather",(function(){return Uu})),r.d(m,"greater",(function(){return Wu})),r.d(m,"greaterEqual",(function(){return Gu})),r.d(m,"imag",(function(){return Hu})),r.d(m,"isFinite",(function(){return ju})),r.d(m,"isInf",(function(){return qu})),r.d(m,"isNaN",(function(){return Xu})),r.d(m,"leakyRelu",(function(){return Ku})),r.d(m,"less",(function(){return Qu})),r.d(m,"lessEqual",(function(){return Yu})),r.d(m,"linspace",(function(){return Ju})),r.d(m,"localResponseNormalization",(function(){return Zu})),r.d(m,"log",(function(){return $u})),r.d(m,"log1p",(function(){return eh})),r.d(m,"logSigmoid",(function(){return ah})),r.d(m,"logSoftmax",(function(){return oh})),r.d(m,"logSumExp",(function(){return sh})),r.d(m,"logicalAnd",(function(){return lh})),r.d(m,"logicalNot",(function(){return uh})),r.d(m,"logicalOr",(function(){return hh})),r.d(m,"logicalXor",(function(){return ch})),r.d(m,"matMul",(function(){return Co})),r.d(m,"max",(function(){return nh})),r.d(m,"maxPool",(function(){return fh})),r.d(m,"maxPool3d",(function(){return dh})),r.d(m,"maxPoolWithArgmax",(function(){return vh})),r.d(m,"maximum",(function(){return nl})),r.d(m,"mean",(function(){return _h})),r.d(m,"min",(function(){return mh})),r.d(m,"minimum",(function(){return yh})),r.d(m,"mirrorPad",(function(){return bh})),r.d(m,"mod",(function(){return xh})),r.d(m,"moments",(function(){return kh})),r.d(m,"mul",(function(){return Os})),r.d(m,"multiRNNCell",(function(){return wh})),r.d(m,"multinomial",(function(){return Ch})),r.d(m,"neg",(function(){return th})),r.d(m,"notEqual",(function(){return Th})),r.d(m,"oneHot",(function(){return To})),r.d(m,"ones",(function(){return gh})),r.d(m,"onesLike",(function(){return Ih})),r.d(m,"outerProduct",(function(){return Ah})),r.d(m,"pad",(function(){return Rh})),r.d(m,"pad1d",(function(){return Nh})),r.d(m,"pad2d",(function(){return Eh})),r.d(m,"pad3d",(function(){return Fh})),r.d(m,"pad4d",(function(){return Mh})),r.d(m,"pool",(function(){return Oh})),r.d(m,"pow",(function(){return Js})),r.d(m,"prelu",(function(){return Lh})),r.d(m,"print",(function(){return to})),r.d(m,"prod",(function(){return zh})),r.d(m,"rand",(function(){return Bh})),r.d(m,"randomGamma",(function(){return Gh})),r.d(m,"randomNormal",(function(){return Hh})),r.d(m,"randomUniform",(function(){return jh})),r.d(m,"range",(function(){return Xh})),r.d(m,"real",(function(){return Sh})),r.d(m,"reciprocal",(function(){return Kh})),r.d(m,"relu",(function(){return Qh})),r.d(m,"relu6",(function(){return Yh})),r.d(m,"reshape",(function(){return wo})),r.d(m,"reverse",(function(){return Jh})),r.d(m,"reverse1d",(function(){return Zh})),r.d(m,"reverse2d",(function(){return $h})),r.d(m,"reverse3d",(function(){return ec})),r.d(m,"reverse4d",(function(){return tc})),r.d(m,"round",(function(){return rc})),r.d(m,"rsqrt",(function(){return ac})),r.d(m,"scalar",(function(){return qs})),r.d(m,"selu",(function(){return nc})),r.d(m,"separableConv2d",(function(){return ic})),r.d(m,"setdiff1dAsync",(function(){return oc})),r.d(m,"sigmoid",(function(){return Xl})),r.d(m,"sign",(function(){return sc})),r.d(m,"sin",(function(){return lc})),r.d(m,"sinh",(function(){return uc})),r.d(m,"slice",(function(){return Kl})),r.d(m,"slice1d",(function(){return hc})),r.d(m,"slice2d",(function(){return cc})),r.d(m,"slice3d",(function(){return fc})),r.d(m,"slice4d",(function(){return dc})),r.d(m,"softmax",(function(){return vc})),r.d(m,"softplus",(function(){return rh})),r.d(m,"spaceToBatchND",(function(){return Dh})),r.d(m,"fft",(function(){return pc})),r.d(m,"ifft",(function(){return gc})),r.d(m,"irfft",(function(){return _c})),r.d(m,"rfft",(function(){return bc})),r.d(m,"split",(function(){return yc})),r.d(m,"sqrt",(function(){return Ls})),r.d(m,"square",(function(){return zs})),r.d(m,"squaredDifference",(function(){return xc})),r.d(m,"squeeze",(function(){return kc})),r.d(m,"stack",(function(){return wc})),r.d(m,"step",(function(){return Cc})),r.d(m,"stridedSlice",(function(){return Tc})),r.d(m,"sub",(function(){return Zs})),r.d(m,"sum",(function(){return ih})),r.d(m,"tan",(function(){return Sc})),r.d(m,"tanh",(function(){return Ql})),r.d(m,"tensor",(function(){return ii})),r.d(m,"tensor1d",(function(){return qh})),r.d(m,"tensor2d",(function(){return Ic})),r.d(m,"tensor3d",(function(){return Ao})),r.d(m,"tensor4d",(function(){return Ac})),r.d(m,"tensor5d",(function(){return Rc})),r.d(m,"tensor6d",(function(){return Nc})),r.d(m,"tile",(function(){return Mu})),r.d(m,"topk",(function(){return Ec})),r.d(m,"truncatedNormal",(function(){return Fc})),r.d(m,"unique",(function(){return Mc})),r.d(m,"unsortedSegmentSum",(function(){return Dc})),r.d(m,"unstack",(function(){return Oc})),r.d(m,"variable",(function(){return Lc})),r.d(m,"where",(function(){return Tu})),r.d(m,"whereAsync",(function(){return Bc})),r.d(m,"zeros",(function(){return ph})),r.d(m,"zerosLike",(function(){return Bs})),r.d(m,"booleanMaskAsync",(function(){return Pc})),r.d(m,"equalStrict",(function(){return Vc})),r.d(m,"greaterEqualStrict",(function(){return Uc})),r.d(m,"greaterStrict",(function(){return Wc})),r.d(m,"lessEqualStrict",(function(){return Gc})),r.d(m,"lessStrict",(function(){return Hc})),r.d(m,"notEqualStrict",(function(){return jc})),r.d(m,"addStrict",(function(){return qc})),r.d(m,"divStrict",(function(){return Xc})),r.d(m,"maximumStrict",(function(){return Kc})),r.d(m,"minimumStrict",(function(){return Qc})),r.d(m,"modStrict",(function(){return Yc})),r.d(m,"mulStrict",(function(){return Jc})),r.d(m,"powStrict",(function(){return Zc})),r.d(m,"squaredDifferenceStrict",(function(){return $c})),r.d(m,"subStrict",(function(){return ef})),r.d(m,"transpose",(function(){return So})),r.d(m,"norm",(function(){return tf})),r.d(m,"movingAverage",(function(){return rf})),r.d(m,"scatterND",(function(){return af})),r.d(m,"sparseToDense",(function(){return nf})),r.d(m,"gatherND",(function(){return of})),r.d(m,"dropout",(function(){return sf})),r.d(m,"enclosingPowerOfTwo",(function(){return lf})),r.d(m,"cosineWindow",(function(){return uf})),r.d(m,"inTopKAsync",(function(){return hf})),r.d(m,"op",(function(){return ri})),r.d(m,"OP_SCOPE_SUFFIX",(function(){return ti})),r.d(m,"image",(function(){return ld})),r.d(m,"linalg",(function(){return ud})),r.d(m,"losses",(function(){return hd})),r.d(m,"spectral",(function(){return od})),r.d(m,"fused",(function(){return p})),r.d(m,"signal",(function(){return sd})),r.d(m,"Reduction",(function(){return qf})),r.d(m,"train",(function(){return fd})),r.d(m,"enableProdMode",(function(){return cs})),r.d(m,"enableDebugMode",(function(){return fs})),r.d(m,"disableDeprecationWarnings",(function(){return ds})),r.d(m,"deprecationWarn",(function(){return vs})),r.d(m,"disposeVariables",(function(){return ps})),r.d(m,"engine",(function(){return gs})),r.d(m,"memory",(function(){return _s})),r.d(m,"profile",(function(){return ms})),r.d(m,"tidy",(function(){return ys})),r.d(m,"dispose",(function(){return bs})),r.d(m,"keep",(function(){return xs})),r.d(m,"time",(function(){return ks})),r.d(m,"setBackend",(function(){return ws})),r.d(m,"ready",(function(){return Cs})),r.d(m,"getBackend",(function(){return Ts})),r.d(m,"removeBackend",(function(){return Ss})),r.d(m,"findBackend",(function(){return Is})),r.d(m,"findBackendFactory",(function(){return As})),r.d(m,"registerBackend",(function(){return Rs})),r.d(m,"backend",(function(){return Ns})),r.d(m,"setPlatform",(function(){return Es})),r.d(m,"getKernel",(function(){return on})),r.d(m,"getGradient",(function(){return sn})),r.d(m,"getKernelsForBackend",(function(){return ln})),r.d(m,"registerKernel",(function(){return un})),r.d(m,"registerGradient",(function(){return hn})),r.d(m,"unregisterKernel",(function(){return cn})),r.d(m,"unregisterGradient",(function(){return fn})),r.d(m,"copyRegisteredKernels",(function(){return dn})),r.d(m,"customGrad",(function(){return Hs})),r.d(m,"grad",(function(){return Ps})),r.d(m,"grads",(function(){return Vs})),r.d(m,"valueAndGrad",(function(){return Us})),r.d(m,"valueAndGrads",(function(){return Ws})),r.d(m,"variableGrads",(function(){return Gs})),r.d(m,"Environment",(function(){return ut})),r.d(m,"env",(function(){return ht})),r.d(m,"ENV",(function(){return ft})),r.d(m,"version_core",(function(){return hs})),r.d(m,"nextFrame",(function(){return vd})),r.d(m,"browser",(function(){return l})),r.d(m,"io",(function(){return o})),r.d(m,"math",(function(){return s})),r.d(m,"serialization",(function(){return f})),r.d(m,"test_util",(function(){return d})),r.d(m,"util",(function(){return a})),r.d(m,"backend_util",(function(){return g})),r.d(m,"tensor_util",(function(){return n})),r.d(m,"slice_util",(function(){return c})),r.d(m,"gather_util",(function(){return u})),r.d(m,"scatter_util",(function(){return h})),r.d(m,"device_util",(function(){return i})),r.d(m,"kernel_impls",(function(){return _})),r.d(m,"KernelBackend",(function(){return ge})),r.d(m,"DataStorage",(function(){return pe})),r.d(m,"Abs",(function(){return pt})),r.d(m,"Acos",(function(){return gt})),r.d(m,"Acosh",(function(){return _t})),r.d(m,"Add",(function(){return mt})),r.d(m,"AddN",(function(){return yt})),r.d(m,"All",(function(){return bt})),r.d(m,"Any",(function(){return xt})),r.d(m,"ArgMax",(function(){return kt})),r.d(m,"ArgMin",(function(){return wt})),r.d(m,"Asin",(function(){return Ct})),r.d(m,"Asinh",(function(){return Tt})),r.d(m,"Atan",(function(){return St})),r.d(m,"Atanh",(function(){return It})),r.d(m,"Atan2",(function(){return At})),r.d(m,"AvgPool",(function(){return Rt})),r.d(m,"AvgPoolBackprop",(function(){return Nt})),r.d(m,"AvgPool3D",(function(){return Et})),r.d(m,"AvgPool3DBackprop",(function(){return Ft})),r.d(m,"BatchMatMul",(function(){return Mt})),r.d(m,"BatchToSpaceND",(function(){return Dt})),r.d(m,"BroadcastTo",(function(){return Ot})),r.d(m,"Cast",(function(){return Lt})),r.d(m,"Ceil",(function(){return zt})),r.d(m,"ClipByValue",(function(){return Bt})),r.d(m,"Complex",(function(){return Pt})),r.d(m,"Concat",(function(){return Vt})),r.d(m,"Conv2D",(function(){return Ut})),r.d(m,"Conv2DBackpropFilter",(function(){return Wt})),r.d(m,"Conv2DBackpropInput",(function(){return Gt})),r.d(m,"Conv3D",(function(){return Ht})),r.d(m,"Conv3DBackpropFilterV2",(function(){return jt})),r.d(m,"Conv3DBackpropInputV2",(function(){return qt})),r.d(m,"Cos",(function(){return Xt})),r.d(m,"Cosh",(function(){return Kt})),r.d(m,"Cumsum",(function(){return Qt})),r.d(m,"CropAndResize",(function(){return Yt})),r.d(m,"DepthToSpace",(function(){return Jt})),r.d(m,"DepthwiseConv2dNative",(function(){return Zt})),r.d(m,"DepthwiseConv2dNativeBackpropFilter",(function(){return $t})),r.d(m,"DepthwiseConv2dNativeBackpropInput",(function(){return er})),r.d(m,"Diag",(function(){return tr})),r.d(m,"Dilation2D",(function(){return rr})),r.d(m,"Dilation2DBackpropInput",(function(){return ar})),r.d(m,"Dilation2DBackpropFilter",(function(){return nr})),r.d(m,"Div",(function(){return ir})),r.d(m,"Elu",(function(){return or})),r.d(m,"EluGrad",(function(){return sr})),r.d(m,"Erf",(function(){return lr})),r.d(m,"Equal",(function(){return ur})),r.d(m,"Exp",(function(){return hr})),r.d(m,"Expm1",(function(){return cr})),r.d(m,"FFT",(function(){return fr})),r.d(m,"Fill",(function(){return dr})),r.d(m,"FlipLeftRight",(function(){return vr})),r.d(m,"Floor",(function(){return pr})),r.d(m,"FloorDiv",(function(){return gr})),r.d(m,"FusedBatchNorm",(function(){return _r})),r.d(m,"GatherV2",(function(){return mr})),r.d(m,"GatherNd",(function(){return yr})),r.d(m,"Greater",(function(){return br})),r.d(m,"GreaterEqual",(function(){return xr})),r.d(m,"Identity",(function(){return kr})),r.d(m,"IFFT",(function(){return wr})),r.d(m,"Imag",(function(){return Cr})),r.d(m,"IsFinite",(function(){return Tr})),r.d(m,"IsInf",(function(){return Sr})),r.d(m,"IsNan",(function(){return Ir})),r.d(m,"Less",(function(){return Ar})),r.d(m,"LessEqual",(function(){return Rr})),r.d(m,"LinSpace",(function(){return Nr})),r.d(m,"Log",(function(){return Er})),r.d(m,"Log1p",(function(){return Fr})),r.d(m,"LogicalAnd",(function(){return Mr})),r.d(m,"LogicalNot",(function(){return Dr})),r.d(m,"LogicalOr",(function(){return Or})),r.d(m,"LogSoftmax",(function(){return Lr})),r.d(m,"LRN",(function(){return zr})),r.d(m,"LRNBackprop",(function(){return Br})),r.d(m,"Max",(function(){return Pr})),r.d(m,"Maximum",(function(){return Vr})),r.d(m,"MaxPool",(function(){return Ur})),r.d(m,"MaxPoolBackprop",(function(){return Wr})),r.d(m,"MaxPool3D",(function(){return Gr})),r.d(m,"MaxPool3DBackprop",(function(){return Hr})),r.d(m,"MaxPoolWithArgmax",(function(){return jr})),r.d(m,"Mean",(function(){return qr})),r.d(m,"Min",(function(){return Xr})),r.d(m,"Minimum",(function(){return Kr})),r.d(m,"MirrorPad",(function(){return Qr})),r.d(m,"Mod",(function(){return Yr})),r.d(m,"Multiply",(function(){return Jr})),r.d(m,"Negate",(function(){return Zr})),r.d(m,"NotEqual",(function(){return $r})),r.d(m,"NonMaxSuppressionV3",(function(){return ea})),r.d(m,"NonMaxSuppressionV4",(function(){return ta})),r.d(m,"NonMaxSuppressionV5",(function(){return ra})),r.d(m,"OnesLike",(function(){return aa})),r.d(m,"OneHot",(function(){return na})),r.d(m,"PadV2",(function(){return ia})),r.d(m,"Pool",(function(){return oa})),r.d(m,"Pow",(function(){return sa})),r.d(m,"Prelu",(function(){return la})),r.d(m,"Prod",(function(){return ua})),r.d(m,"Range",(function(){return ha})),r.d(m,"Real",(function(){return ca})),r.d(m,"Reciprocal",(function(){return fa})),r.d(m,"Relu",(function(){return da})),r.d(m,"Reshape",(function(){return va})),r.d(m,"ResizeNearestNeighbor",(function(){return pa})),r.d(m,"ResizeNearestNeighborGrad",(function(){return ga})),r.d(m,"ResizeBilinear",(function(){return _a})),r.d(m,"ResizeBilinearGrad",(function(){return ma})),r.d(m,"Relu6",(function(){return ya})),r.d(m,"Reverse",(function(){return ba})),r.d(m,"Round",(function(){return xa})),r.d(m,"Rsqrt",(function(){return ka})),r.d(m,"ScatterNd",(function(){return wa})),r.d(m,"SelectV2",(function(){return Ca})),r.d(m,"Selu",(function(){return Ta})),r.d(m,"Slice",(function(){return Sa})),r.d(m,"Sin",(function(){return Ia})),r.d(m,"Sinh",(function(){return Aa})),r.d(m,"Sign",(function(){return Ra})),r.d(m,"Sigmoid",(function(){return Na})),r.d(m,"Softplus",(function(){return Ea})),r.d(m,"Sqrt",(function(){return Fa})),r.d(m,"Sum",(function(){return Ma})),r.d(m,"SpaceToBatchND",(function(){return Da})),r.d(m,"SplitV",(function(){return Oa})),r.d(m,"Softmax",(function(){return La})),r.d(m,"SquaredDifference",(function(){return za})),r.d(m,"Square",(function(){return Ba})),r.d(m,"Sub",(function(){return Pa})),r.d(m,"SparseToDense",(function(){return Va})),r.d(m,"StridedSlice",(function(){return Ua})),r.d(m,"Tan",(function(){return Wa})),r.d(m,"Tanh",(function(){return Ga})),r.d(m,"Tile",(function(){return Ha})),r.d(m,"TopK",(function(){return ja})),r.d(m,"Transpose",(function(){return qa})),r.d(m,"Unique",(function(){return Xa})),r.d(m,"Unpack",(function(){return Ka})),r.d(m,"UnsortedSegmentSum",(function(){return Qa})),r.d(m,"ZerosLike",(function(){return Ya})),r.d(m,"Step",(function(){return Ja})),r.d(m,"FromPixels",(function(){return Za})),r.d(m,"RotateWithOffset",(function(){return $a})),r.d(m,"_FusedMatMul",(function(){return en})),r.d(m,"FusedConv2D",(function(){return tn})),r.d(m,"FusedDepthwiseConv2D",(function(){return rn}));var y={};r.r(y),r.d(y,"json",(function(){return fp}));var b={};r.r(b),r.d(b,"json",(function(){return dp}));var x={};r.r(x),r.d(x,"json",(function(){return vp}));var k={};r.r(k),r.d(k,"json",(function(){return pp}));var w={};r.r(w),r.d(w,"json",(function(){return gp}));var C={};r.r(C),r.d(C,"json",(function(){return _p}));var T={};r.r(T),r.d(T,"json",(function(){return mp}));var S={};r.r(S),r.d(S,"json",(function(){return yp}));var I={};r.r(I),r.d(I,"json",(function(){return bp}));var A={};r.r(A),r.d(A,"json",(function(){return xp}));var R={};r.r(R),r.d(R,"json",(function(){return kp}));var N={};r.r(N),r.d(N,"json",(function(){return wp}));var E={};r.r(E),r.d(E,"json",(function(){return Cp}));var F={};r.r(F),r.d(F,"json",(function(){return Tp}));var M={};r.r(M),r.d(M,"json",(function(){return Sp}));var D={};r.r(D),r.d(D,"json",(function(){return Ip}));var O={};r.r(O),r.d(O,"json",(function(){return Ap}));var L={};r.r(L),r.d(L,"simpleAbsImpl",(function(){return Rw})),r.d(L,"addImpl",(function(){return bw})),r.d(L,"ceilImpl",(function(){return Qw})),r.d(L,"expImpl",(function(){return MC})),r.d(L,"expm1Impl",(function(){return LC})),r.d(L,"floorImpl",(function(){return tT})),r.d(L,"logImpl",(function(){return dT})),r.d(L,"maxImpl",(function(){return bT})),r.d(L,"multiplyImpl",(function(){return PC})),r.d(L,"notEqualImpl",(function(){return ET})),r.d(L,"rsqrtImpl",(function(){return VT})),r.d(L,"sliceImpl",(function(){return GC})),r.d(L,"squaredDifferenceImpl",(function(){return hS})),r.d(L,"subImpl",(function(){return qC})),r.d(L,"transposeImpl",(function(){return xT})),r.d(L,"uniqueImpl",(function(){return mS}));var z,B,P=r("tyNb"),V=r("3Pt+"),U=r("VQPA"),W=r("IPfh"),G=r("fXoL"),H=((z=function(){function e(t,r,a,n){_classCallCheck(this,e),this.teacherService=t,this.fb=r,this.router=a,this.modalService=n,this.teacher={teacherId:"",examToken:"",examID:"",examStartTime:"",examEndTime:"",message:""},this.openExamForm=this.fb.group({examName:["",V.m.required],examStartTime:["",V.m.required],examEndTime:["",V.m.required],examCount:["",V.m.required]})}return _createClass(e,[{key:"ngOnInit",value:function(){}},{key:"openExam",value:function(){var e=this;this.teacherService.openExam({examName:this.f.examName.value,examStartTime:this.f.examStartTime.value,examEndTime:this.f.examEndTime.value,examCount:this.f.examCount.value}).subscribe((function(t){localStorage.setItem("examId",t.message.examID),localStorage.setItem("examCount",t.message.examCount),localStorage.setItem("examName",t.message.examName),localStorage.setItem("examStartTime",t.message.examStartTime),localStorage.setItem("examEndTime",t.message.examEndTime),e.openMessageModal("".concat(t.message.message,"\uff0c\n          \u4f60\u7684\u8003\u5834ID\u662f").concat(t.message.examID,"\uff0c\u8003\u8a66\u6642\u9593\u70ba").concat(t.message.examStartTime,"~").concat(t.message.examEndTime)),setTimeout((function(){e.router.navigate(["teacherExamScreen"])}),500)}))}},{key:"openMessageModal",value:function(e){this.modalService.open({icon:"icon",message:e})}},{key:"f",get:function(){return this.openExamForm.controls}}]),e}()).\u0275fac=function(e){return new(e||z)(G.Mb(W.a),G.Mb(V.b),G.Mb(P.a),G.Mb(U.a))},z.\u0275cmp=G.Gb({type:z,selectors:[["app-openexam"]],decls:29,vars:2,consts:[[1,"row"],[1,"col-md-12"],[1,"card"],[1,"card-header"],[1,"card-title"],[1,"card-body"],[3,"formGroup","ngSubmit"],[1,"position-relative","row","form-group"],["for","examName",1,"col-sm-12","col-form-label"],[1,"col-sm-12"],["formControlName","examName","id","examName","placeholder","\u8acb\u8f38\u5165\u8003\u5834\u540d\u7a31","type","text",1,"form-control"],["for","examTime",1,"col-sm-12","col-form-label"],[1,"col-sm-6"],["formControlName","examStartTime","id","examStartTime","placeholder","\u8acb\u9078\u64c7\u958b\u59cb\u6642\u9593","type","time",1,"form-control"],["formControlName","examEndTime","id","examEndTime","placeholder","\u8acb\u9078\u64c7\u7d50\u675f\u6642\u9593","type","time",1,"form-control"],["for","examCount",1,"col-sm-12","col-form-label"],["formControlName","examCount","id","examCount","placeholder","\u8acb\u8f38\u5165\u8003\u5834\u4eba\u6578","type","text",1,"form-control"],[1,"update","ml-auto","mr-auto"],["type","submit",1,"btn","btn-primary","btn-round",3,"disabled"]],template:function(e,t){1&e&&(G.Rb(0,"div",0),G.Rb(1,"div",1),G.Rb(2,"div",2),G.Rb(3,"div",3),G.Rb(4,"h4",4),G.Bc(5,"\u958b\u555f\u8003\u5834"),G.Qb(),G.Qb(),G.Rb(6,"div",5),G.Rb(7,"form",6),G.cc("ngSubmit",(function(){return t.openExam()})),G.Rb(8,"div",7),G.Rb(9,"label",8),G.Bc(10,"\u8003\u5834\u540d\u7a31"),G.Qb(),G.Rb(11,"div",9),G.Nb(12,"input",10),G.Qb(),G.Qb(),G.Rb(13,"div",7),G.Rb(14,"label",11),G.Bc(15,"\u8003\u8a66\u6642\u9593"),G.Qb(),G.Rb(16,"div",12),G.Nb(17,"input",13),G.Qb(),G.Rb(18,"div",12),G.Nb(19,"input",14),G.Qb(),G.Qb(),G.Rb(20,"div",7),G.Rb(21,"label",15),G.Bc(22,"\u8003\u5834\u4eba\u6578"),G.Qb(),G.Rb(23,"div",9),G.Nb(24,"input",16),G.Qb(),G.Qb(),G.Rb(25,"div",0),G.Rb(26,"div",17),G.Rb(27,"button",18),G.Bc(28,"\u958b\u555f\u8003\u5834"),G.Qb(),G.Qb(),G.Qb(),G.Qb(),G.Qb(),G.Qb(),G.Qb(),G.Qb()),2&e&&(G.zb(7),G.jc("formGroup",t.openExamForm),G.zb(20),G.jc("disabled",t.openExamForm.invalid))},directives:[V.o,V.i,V.d,V.a,V.h,V.c],encapsulation:2}),z),j=r("JmRu"),q=r("cxbk"),X=((B=function(){function e(t,r,a,n){_classCallCheck(this,e),this.studentService=t,this.fb=r,this.router=a,this.modalService=n,this.student={studentId:"",examToken:""},this.enterExamForm=this.fb.group({studentName:["",V.m.required],studentId:["",V.m.required],teacherIP:["",V.m.required]})}return _createClass(e,[{key:"ngOnInit",value:function(){}},{key:"enterExam",value:function(){var e=this;this.studentService.enterExam({studentName:this.f.studentName.value,studentId:this.f.studentId.value,teacherIP:this.f.teacherIP.value}).subscribe((function(t){e.student.examToken=t,localStorage.setItem(""+q.a.keyOfExamToken,e.student.examToken),localStorage.setItem("examId",t.examID),localStorage.setItem("examName",t.examName),localStorage.setItem("examStartTime",t.examStartTime),localStorage.setItem("examEndTime",t.examEndTime),localStorage.setItem("teacherIp",e.f.teacherIP.value),e.openMessageModal("\u6210\u529f\u9032\u5165\u8003\u5834\uff0c\u8003\u8a66\u6642\u9593\u70ba".concat(t.examStartTime," ~ ").concat(t.examEndTime)),setTimeout((function(){e.router.navigate(["studentExamScreen"])}),500)}))}},{key:"openMessageModal",value:function(e){this.modalService.open({icon:"icon",message:e})}},{key:"f",get:function(){return this.enterExamForm.controls}}]),e}()).\u0275fac=function(e){return new(e||B)(G.Mb(j.a),G.Mb(V.b),G.Mb(P.a),G.Mb(U.a))},B.\u0275cmp=G.Gb({type:B,selectors:[["app-enterexam"]],decls:27,vars:2,consts:[[1,"row"],[1,"col-md-12"],[1,"card"],[1,"card-header"],[1,"card-title"],[1,"card-body"],[3,"formGroup","ngSubmit"],[1,"position-relative","row","form-group"],["for","studentName",1,"col-sm-12","col-form-label"],[1,"col-sm-12"],["formControlName","studentName","id","studentName","placeholder","\u8acb\u8f38\u5165\u8003\u751f\u59d3\u540d","type","text",1,"form-control"],["for","studentId",1,"col-sm-12","col-form-label"],["formControlName","studentId","id","studentId","placeholder","\u8acb\u8f38\u5165\u8003\u751f\u5b78\u865f","type","text",1,"form-control"],["for","teacherIP",1,"col-sm-12","col-form-label"],["formControlName","teacherIP","id","teacherIP","placeholder","\u8acb\u8f38\u5165\u6559\u5e2b\u6a5fIP","type","text",1,"form-control"],[1,"update","ml-auto","mr-auto"],["type","submit",1,"btn","btn-primary","btn-round",3,"disabled"]],template:function(e,t){1&e&&(G.Rb(0,"div",0),G.Rb(1,"div",1),G.Rb(2,"div",2),G.Rb(3,"div",3),G.Rb(4,"h4",4),G.Bc(5,"\u9032\u5165\u8003\u5834"),G.Qb(),G.Qb(),G.Rb(6,"div",5),G.Rb(7,"form",6),G.cc("ngSubmit",(function(){return t.enterExam()})),G.Rb(8,"div",7),G.Rb(9,"label",8),G.Bc(10,"\u8003\u751f\u59d3\u540d"),G.Qb(),G.Rb(11,"div",9),G.Nb(12,"input",10),G.Qb(),G.Qb(),G.Rb(13,"div",7),G.Rb(14,"label",11),G.Bc(15,"\u8003\u751f\u5b78\u865f"),G.Qb(),G.Rb(16,"div",9),G.Nb(17,"input",12),G.Qb(),G.Qb(),G.Rb(18,"div",7),G.Rb(19,"label",13),G.Bc(20,"\u6559\u5e2b\u6a5fIP"),G.Qb(),G.Rb(21,"div",9),G.Nb(22,"input",14),G.Qb(),G.Qb(),G.Rb(23,"div",0),G.Rb(24,"div",15),G.Rb(25,"button",16),G.Bc(26,"\u9032\u5165\u8003\u5834"),G.Qb(),G.Qb(),G.Qb(),G.Qb(),G.Qb(),G.Qb(),G.Qb(),G.Qb()),2&e&&(G.zb(7),G.jc("formGroup",t.enterExamForm),G.zb(18),G.jc("disabled",t.enterExamForm.invalid))},directives:[V.o,V.i,V.d,V.a,V.h,V.c],encapsulation:2}),B),K=r("eIep"),Q=r("HDdC"),Y=r("D0XW"),J=r("Y7HM");function Z(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Y.a;return(!Object(J.a)(e)||e<0)&&(e=0),t&&"function"==typeof t.schedule||(t=Y.a),new Q.a((function(r){return r.add(t.schedule(ee,e,{subscriber:r,counter:0,period:e})),r}))}function ee(e){var t=e.subscriber,r=e.counter,a=e.period;t.next(r),this.schedule({subscriber:t,counter:r+1,period:a},a)}var te=r("XNiG"),re=r("ofXK");function ae(e,t){if(1&e){var r=G.Sb();G.Rb(0,"tr"),G.Rb(1,"td"),G.Bc(2),G.Qb(),G.Rb(3,"td"),G.Bc(4),G.Qb(),G.Rb(5,"td"),G.Bc(6),G.fc(7,"date"),G.Qb(),G.Rb(8,"td"),G.Bc(9),G.Qb(),G.Rb(10,"td"),G.Rb(11,"button",53),G.cc("click",(function(){G.rc(r);var e=t.index;return G.ec().showModal(e)})),G.Nb(12,"i",54),G.Qb(),G.Qb(),G.Qb()}if(2&e){var a=t.$implicit;G.zb(2),G.Cc(a.studentId),G.zb(2),G.Cc(a.studentName),G.zb(2),G.Cc(G.gc(7,4,a.time,"HH:mm:ss")),G.zb(3),G.Cc(a.probability)}}function ne(e,t){if(1&e&&(G.Rb(0,"div",55),G.Nb(1,"img",56),G.Qb()),2&e){var r=t.$implicit;G.Eb("active",t.first),G.zb(1),G.kc("src",r,G.tc)}}function ie(e,t){if(1&e&&(G.Rb(0,"tr"),G.Rb(1,"td"),G.Bc(2),G.Qb(),G.Rb(3,"td"),G.Bc(4),G.Qb(),G.Rb(5,"td"),G.Bc(6),G.Qb(),G.Qb()),2&e){var r=t.$implicit;G.zb(2),G.Cc(r.studentIP),G.zb(2),G.Cc(r.studentId),G.zb(2),G.Cc(r.studentName)}}var oe,se=((oe=function(){function e(t,r,a,n){_classCallCheck(this,e),this.teacherService=t,this.fb=r,this.modalService=a,this.router=n,this.intervallTimer=Z(5e3),this.destroy$=new te.a,this.destroyLog$=new te.a,this.extendExamForm=this.fb.group({examEndTime:["",V.m.required]})}return _createClass(e,[{key:"showModal",value:function(e){this.imgArr=this.LogList[e].cheatImages,$("#showImg").modal("show")}},{key:"ngOnInit",value:function(){var e=this;this.tableData={headerRow:["\u9023\u7dda\u72c0\u614b","IP\u4f4d\u5740","\u5b78\u751f\u59d3\u540d","\u5b78\u751f\u5b78\u865f","\u64f7\u53d6\u6642\u9593","\u4f5c\u5f0a\u6a5f\u7387","\u64cd\u4f5c"],dataRows:[{connectionStatus:"\u826f\u597d",ip:"192.168.1.21",studentName:"\u738b\u5c0f\u660e",studentId:"12345678",timestamp:"2020/06/06 20:15",probability:"30%"},{connectionStatus:"\u826f\u597d",ip:"192.168.1.1",studentName:"\u9673\u5c0f\u51e1",studentId:"87654321",timestamp:"2020/06/06 10:51",probability:"50%"},{connectionStatus:"\u826f\u597d",ip:"192.168.1.36",studentName:"\u674e\u5c0f\u4e09",studentId:"14725836",timestamp:"2020/06/06 13:37",probability:"30%"}]},this.examData={examName:localStorage.getItem("examName"),examStartTime:localStorage.getItem("examStartTime"),examEndTime:localStorage.getItem("examEndTime"),examCount:localStorage.getItem("examCount")},this.studentList=Z(1e3).pipe(Object(K.a)((function(t){return e.teacherService.examStudentList()}))).subscribe((function(t){e.studentList=t}),(function(e){return console.log(e)})),this.LogList=Z(1e3).pipe(Object(K.a)((function(t){return e.teacherService.examLog()}))).subscribe((function(t){e.LogList=t}),(function(e){return console.log(e)})),this.isEndTime=Z(1e3).pipe(Object(K.a)((function(t){return e.teacherService.isExamFinish()}))).subscribe((function(t){!0===t.message&&(e.studentList.unsubscribe(),e.LogList.unsubscribe(),e.isEndTime.unsubscribe(),e.openMessageModal("\u8003\u8a66\u6642\u9593\u7d50\u675f!"))}),(function(e){return console.log(e)}))}},{key:"ngOnDestroy",value:function(){this.destroy$.next(!0),this.destroy$.unsubscribe(),this.destroyLog$.next(!0),this.destroyLog$.unsubscribe()}},{key:"extendExam",value:function(){var e=this,t={examId:localStorage.getItem(""+q.a.examId),examEndTime:this.ef.examEndTime.value};this.teacherService.extendExam(t).subscribe((function(t){localStorage.setItem("examEndTime",e.ef.examEndTime.value),e.openMessageModal("".concat(t.message.message,"\uff0c\n          \u8003\u8a66\u6642\u9593\u8b8a\u66f4\u70ba").concat(localStorage.getItem("examStartTime"),"~").concat(localStorage.getItem("examEndTime")))}))}},{key:"closeExam",value:function(){var e=this,t=new Date,r={examId:localStorage.getItem(""+q.a.examId),examEndTime:t.getHours().toString()+":"+t.getMinutes().toString()};console.log(r.examEndTime),this.teacherService.closeExam(r).subscribe((function(r){localStorage.setItem("examEndTime",t.getHours().toString()+":"+t.getMinutes().toString()),e.openMessageModal(""+r.message.message)}))}},{key:"openMessageModal",value:function(e){this.modalService.open({icon:"icon",message:e})}},{key:"ef",get:function(){return this.extendExamForm.controls}}]),e}()).\u0275fac=function(e){return new(e||oe)(G.Mb(W.a),G.Mb(V.b),G.Mb(U.a),G.Mb(P.a))},oe.\u0275cmp=G.Gb({type:oe,selectors:[["app-teacherExamScreen"]],decls:120,vars:8,consts:[[1,"row"],[1,"col-md-12"],[1,"card"],[1,"card-header"],[1,"card-title"],[1,"col-4"],[1,"col-5"],[1,"col-3"],[1,"float-md-right"],["data-toggle","modal","data-target","#stundentList",1,"btn","btn-outline-primary"],["data-toggle","modal","data-target","#extendModal",1,"btn","btn-outline-primary"],["data-toggle","modal","data-target","#closeModal",1,"btn","btn-outline-primary"],[1,"card-body"],[1,"table-responsive"],[1,"table"],[1,"text-primary"],[4,"ngFor","ngForOf"],["id","showImg","tabindex","-1","role","dialog","aria-labelledby","showImgTitle","aria-hidden","true",1,"modal","fade"],["role","document",1,"modal-dialog","modal-dialog-centered"],[1,"modal-content"],[1,"modal-header"],["id","exampleModalLongTitle",1,"modal-title"],["type","button","data-dismiss","modal","aria-label","Close",1,"close"],["aria-hidden","true"],[1,"modal-body"],["id","carouselExampleCaptions","data-ride","carousel","data-interval","2000",1,"carousel","slide"],[1,"carousel-indicators"],["data-target","#carouselExampleCaptions","data-slide-to","0",1,"active"],["data-target","#carouselExampleCaptions","data-slide-to","1"],["data-target","#carouselExampleCaptions","data-slide-to","2"],[1,"carousel-inner"],["class","carousel-item active",3,"active",4,"ngFor","ngForOf"],["href","#carouselExampleCaptions","role","button","data-slide","prev",1,"carousel-control-prev"],["aria-hidden","true",1,"carousel-control-prev-icon"],[1,"sr-only"],["href","#carouselExampleCaptions","role","button","data-slide","next",1,"carousel-control-next"],["aria-hidden","true",1,"carousel-control-next-icon"],[1,"modal-footer"],["type","button","data-dismiss","modal",1,"btn","btn-secondary"],["id","closeModal","tabindex","-1","role","dialog","aria-labelledby","closeModalLabel","aria-hidden","true",1,"modal","fade"],["role","document",1,"modal-dialog"],["id","exampleModalLabel",1,"modal-title"],["type","submit",1,"btn","btn-primary",3,"click"],["id","extendModal","tabindex","-1","role","dialog","aria-labelledby","extendModalLabel","aria-hidden","true",1,"modal","fade"],[3,"formGroup","ngSubmit"],[1,"position-relative","row","form-group"],["for","studentName",1,"col-sm-12","col-form-label"],[1,"col-sm-6"],["formControlName","examEndTime","id","examEndTime","placeholder","\u8acb\u9078\u64c7\u7d50\u675f\u6642\u9593","type","time",1,"form-control"],["type","submit",1,"btn","btn-primary"],["id","stundentList","tabindex","-1","role","dialog","aria-labelledby","stundentListLabel","aria-hidden","true",1,"modal","fade"],[1,"modal-content",2,"height","500px"],["type","submit","data-dismiss","modal","aria-label","Close",1,"btn","btn-primary"],[1,"btn","btn-primary","btn-fab","btn-icon","btn-round",3,"click"],[1,"fa","fa-eye"],[1,"carousel-item","active"],["alt","...",1,"d-block","w-100",3,"src"]],template:function(e,t){1&e&&(G.Rb(0,"div",0),G.Rb(1,"div",1),G.Rb(2,"div",2),G.Rb(3,"div",3),G.Rb(4,"div",4),G.Rb(5,"div",0),G.Rb(6,"div",5),G.Bc(7),G.Qb(),G.Rb(8,"div",6),G.Bc(9),G.Qb(),G.Rb(10,"div",7),G.Bc(11),G.Qb(),G.Qb(),G.Qb(),G.Rb(12,"div",8),G.Rb(13,"button",9),G.Bc(14,"\u5b78\u751f\u540d\u55ae"),G.Qb(),G.Rb(15,"button",10),G.Bc(16,"\u5ef6\u9577\u8003\u8a66"),G.Qb(),G.Rb(17,"button",11),G.Bc(18,"\u95dc\u9589\u8003\u5834"),G.Qb(),G.Qb(),G.Qb(),G.Rb(19,"div",12),G.Rb(20,"div",13),G.Rb(21,"table",14),G.Rb(22,"thead",15),G.Rb(23,"th"),G.Bc(24,"\u5b78\u751f\u5b78\u865f"),G.Qb(),G.Rb(25,"th"),G.Bc(26,"\u5b78\u751f\u59d3\u540d"),G.Qb(),G.Rb(27,"th"),G.Bc(28,"\u4f5c\u5f0a\u6642\u9593"),G.Qb(),G.Rb(29,"th"),G.Bc(30,"\u4f5c\u5f0a\u6a5f\u7387"),G.Qb(),G.Rb(31,"th"),G.Bc(32,"\u67e5\u770b\u7167\u7247"),G.Qb(),G.Qb(),G.Rb(33,"tbody"),G.zc(34,ae,13,7,"tr",16),G.Qb(),G.Qb(),G.Qb(),G.Qb(),G.Qb(),G.Qb(),G.Qb(),G.Rb(35,"div",17),G.Rb(36,"div",18),G.Rb(37,"div",19),G.Rb(38,"div",20),G.Rb(39,"h5",21),G.Bc(40,"Modal title"),G.Qb(),G.Rb(41,"button",22),G.Rb(42,"span",23),G.Bc(43,"\xd7"),G.Qb(),G.Qb(),G.Qb(),G.Rb(44,"div",24),G.Rb(45,"div",25),G.Rb(46,"ol",26),G.Nb(47,"li",27),G.Nb(48,"li",28),G.Nb(49,"li",29),G.Qb(),G.Rb(50,"div",30),G.zc(51,ne,2,3,"div",31),G.Qb(),G.Rb(52,"a",32),G.Nb(53,"span",33),G.Rb(54,"span",34),G.Bc(55,"Previous"),G.Qb(),G.Qb(),G.Rb(56,"a",35),G.Nb(57,"span",36),G.Rb(58,"span",34),G.Bc(59,"Next"),G.Qb(),G.Qb(),G.Qb(),G.Rb(60,"div",37),G.Rb(61,"button",38),G.Bc(62,"Close"),G.Qb(),G.Qb(),G.Qb(),G.Qb(),G.Qb(),G.Qb(),G.Rb(63,"div",39),G.Rb(64,"div",40),G.Rb(65,"div",19),G.Rb(66,"div",20),G.Rb(67,"h5",41),G.Bc(68,"\u7d50\u675f\u8003\u8a66"),G.Qb(),G.Rb(69,"button",22),G.Rb(70,"span",23),G.Bc(71,"\xd7"),G.Qb(),G.Qb(),G.Qb(),G.Rb(72,"div",24),G.Bc(73," \u78ba\u5b9a\u8981\u73fe\u5728\u5c31\u7d50\u675f\u8003\u8a66\u55ce? "),G.Qb(),G.Rb(74,"div",37),G.Rb(75,"button",42),G.cc("click",(function(){return t.closeExam()})),G.Bc(76,"\u78ba\u5b9a\u7d50\u675f"),G.Qb(),G.Qb(),G.Qb(),G.Qb(),G.Qb(),G.Rb(77,"div",43),G.Rb(78,"div",40),G.Rb(79,"div",19),G.Rb(80,"div",20),G.Rb(81,"h5",41),G.Bc(82,"\u5ef6\u9577\u8003\u8a66"),G.Qb(),G.Rb(83,"button",22),G.Rb(84,"span",23),G.Bc(85,"\xd7"),G.Qb(),G.Qb(),G.Qb(),G.Rb(86,"form",44),G.cc("ngSubmit",(function(){return t.extendExam()})),G.Rb(87,"div",24),G.Rb(88,"div",45),G.Rb(89,"label",46),G.Bc(90,"\u5ef6\u9577\u8003\u8a66\u7d50\u675f\u6642\u9593"),G.Qb(),G.Rb(91,"div",47),G.Nb(92,"input",48),G.Qb(),G.Qb(),G.Qb(),G.Rb(93,"div",37),G.Rb(94,"button",49),G.Bc(95,"\u5ef6\u9577\u8003\u8a66"),G.Qb(),G.Qb(),G.Qb(),G.Qb(),G.Qb(),G.Qb(),G.Rb(96,"div",50),G.Rb(97,"div",40),G.Rb(98,"div",51),G.Rb(99,"div",20),G.Rb(100,"h5",41),G.Bc(101,"\u5b78\u751f\u540d\u55ae"),G.Qb(),G.Rb(102,"button",22),G.Rb(103,"span",23),G.Bc(104,"\xd7"),G.Qb(),G.Qb(),G.Qb(),G.Rb(105,"div",24),G.Rb(106,"div",13),G.Rb(107,"table",14),G.Rb(108,"thead",15),G.Rb(109,"th"),G.Bc(110,"\u5b78\u751fIP"),G.Qb(),G.Rb(111,"th"),G.Bc(112,"\u5b78\u751f\u5b78\u865f"),G.Qb(),G.Rb(113,"th"),G.Bc(114,"\u5b78\u751f\u59d3\u540d"),G.Qb(),G.Qb(),G.Rb(115,"tbody"),G.zc(116,ie,7,3,"tr",16),G.Qb(),G.Qb(),G.Qb(),G.Qb(),G.Rb(117,"div",37),G.Rb(118,"button",52),G.Bc(119,"\u95dc\u9589"),G.Qb(),G.Qb(),G.Qb(),G.Qb(),G.Qb()),2&e&&(G.zb(7),G.Dc("\u8003\u5834\u540d\u7a31: ",t.examData.examName,""),G.zb(2),G.Ec("\u8003\u8a66\u6642\u9593: ",t.examData.examStartTime,"~",t.examData.examEndTime,""),G.zb(2),G.Dc("\u61c9\u8003\u4eba\u6578: ",t.examData.examCount,""),G.zb(23),G.jc("ngForOf",t.LogList),G.zb(17),G.jc("ngForOf",t.imgArr),G.zb(35),G.jc("formGroup",t.extendExamForm),G.zb(30),G.jc("ngForOf",t.studentList))},directives:[re.k,V.o,V.i,V.d,V.a,V.h,V.c],pipes:[re.d],encapsulation:2}),oe);function le(e,t){if(1&e&&(G.Rb(0,"tr"),G.Rb(1,"td"),G.Bc(2),G.Qb(),G.Rb(3,"td"),G.Bc(4),G.Qb(),G.Rb(5,"td"),G.Bc(6),G.Qb(),G.Rb(7,"td"),G.Bc(8),G.Qb(),G.Rb(9,"td"),G.Rb(10,"button",10),G.Nb(11,"i",11),G.Qb(),G.Bc(12,"\xa0\xa0 "),G.Qb(),G.Qb()),2&e){var r=t.$implicit;G.zb(2),G.Cc(r.examId),G.zb(2),G.Cc(r.examTeacher),G.zb(2),G.Cc(r.examName),G.zb(2),G.Cc(r.examTime)}}var ue,he=((ue=function(){function e(t,r){_classCallCheck(this,e),this.studentService=t,this.teacherService=r}return _createClass(e,[{key:"ngOnInit",value:function(){this.studentGetRecordList()}},{key:"studentGetRecordList",value:function(){}}]),e}()).\u0275fac=function(e){return new(e||ue)(G.Mb(j.a),G.Mb(W.a))},ue.\u0275cmp=G.Gb({type:ue,selectors:[["app-student-record"]],decls:22,vars:1,consts:[[1,"row"],[1,"col-md-12"],[1,"card"],[1,"card-header"],[1,"card-title"],[1,"card-body"],[1,"table-responsive"],[1,"table"],[1,"text-primary"],[4,"ngFor","ngForOf"],["data-toggle","tooltip",1,"btn","btn-primary","btn-fab","btn-icon","btn-round"],[1,"fa","fa-download"]],template:function(e,t){1&e&&(G.Rb(0,"div",0),G.Rb(1,"div",1),G.Rb(2,"div",2),G.Rb(3,"div",3),G.Rb(4,"h4",4),G.Bc(5,"\u8003\u8a66\u7d00\u9304"),G.Qb(),G.Qb(),G.Rb(6,"div",5),G.Rb(7,"div",6),G.Rb(8,"table",7),G.Rb(9,"thead",8),G.Rb(10,"th"),G.Bc(11,"\u8003\u8a66\u4ee3\u78bc"),G.Qb(),G.Rb(12,"th"),G.Bc(13,"\u8003\u5834\u8001\u5e2b"),G.Qb(),G.Rb(14,"th"),G.Bc(15,"\u8003\u5834\u540d\u7a31"),G.Qb(),G.Rb(16,"th"),G.Bc(17,"\u8003\u8a66\u6642\u9593"),G.Qb(),G.Rb(18,"th"),G.Bc(19,"\u64cd\u4f5c"),G.Qb(),G.Qb(),G.Rb(20,"tbody"),G.zc(21,le,13,4,"tr",9),G.Qb(),G.Qb(),G.Qb(),G.Qb(),G.Qb(),G.Qb(),G.Qb()),2&e&&(G.zb(21),G.jc("ngForOf",t.records))},directives:[re.k],encapsulation:2}),ue);function ce(e,t){if(1&e&&(G.Rb(0,"tr"),G.Rb(1,"td"),G.Bc(2),G.Qb(),G.Rb(3,"td"),G.Bc(4),G.Qb(),G.Rb(5,"td"),G.Bc(6),G.Qb(),G.Rb(7,"td"),G.Bc(8),G.Qb(),G.Rb(9,"td"),G.Rb(10,"button",10),G.Nb(11,"i",11),G.Qb(),G.Bc(12,"\xa0\xa0 "),G.Qb(),G.Qb()),2&e){var r=t.$implicit;G.zb(2),G.Cc(r.examId),G.zb(2),G.Cc(r.studentId),G.zb(2),G.Cc(r.examName),G.zb(2),G.Cc(r.examTime)}}var fe,de=((fe=function(){function e(t,r){_classCallCheck(this,e),this.studentService=t,this.teacherService=r}return _createClass(e,[{key:"ngOnInit",value:function(){this.teacherGetRecordList()}},{key:"teacherGetRecordList",value:function(){var e=this;this.teacherService.recordList().subscribe((function(t){e.records=t}))}}]),e}()).\u0275fac=function(e){return new(e||fe)(G.Mb(j.a),G.Mb(W.a))},fe.\u0275cmp=G.Gb({type:fe,selectors:[["app-teacher-record"]],decls:22,vars:1,consts:[[1,"row"],[1,"col-md-12"],[1,"card"],[1,"card-header"],[1,"card-title"],[1,"card-body"],[1,"table-responsive"],[1,"table"],[1,"text-primary"],[4,"ngFor","ngForOf"],["data-toggle","tooltip",1,"btn","btn-primary","btn-fab","btn-icon","btn-round"],[1,"fa","fa-download"]],template:function(e,t){1&e&&(G.Rb(0,"div",0),G.Rb(1,"div",1),G.Rb(2,"div",2),G.Rb(3,"div",3),G.Rb(4,"h4",4),G.Bc(5,"\u8003\u8a66\u7d00\u9304"),G.Qb(),G.Qb(),G.Rb(6,"div",5),G.Rb(7,"div",6),G.Rb(8,"table",7),G.Rb(9,"thead",8),G.Rb(10,"th"),G.Bc(11,"\u8003\u8a66\u4ee3\u78bc"),G.Qb(),G.Rb(12,"th"),G.Bc(13,"\u5b78\u751f\u5b78\u865f"),G.Qb(),G.Rb(14,"th"),G.Bc(15,"\u8003\u5834\u540d\u7a31"),G.Qb(),G.Rb(16,"th"),G.Bc(17,"\u8003\u8a66\u6642\u9593"),G.Qb(),G.Rb(18,"th"),G.Bc(19,"\u64cd\u4f5c"),G.Qb(),G.Qb(),G.Rb(20,"tbody"),G.zc(21,ce,13,4,"tr",9),G.Qb(),G.Qb(),G.Qb(),G.Qb(),G.Qb(),G.Qb(),G.Qb()),2&e&&(G.zb(21),G.jc("ngForOf",t.records))},directives:[re.k],encapsulation:2}),fe),ve=r("mrSG"),pe=function(){function e(t,r){_classCallCheck(this,e),this.backend=t,this.dataMover=r,this.data=new WeakMap,this.dataIdsCount=0}return _createClass(e,[{key:"get",value:function(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}},{key:"set",value:function(e,t){this.dataIdsCount++,this.data.set(e,t)}},{key:"has",value:function(e){return this.data.has(e)}},{key:"delete",value:function(e){return this.dataIdsCount--,this.data.delete(e)}},{key:"numDataIds",value:function(){return this.dataIdsCount}}]),e}(),ge=function(){function e(){_classCallCheck(this,e)}return _createClass(e,[{key:"time",value:function(e){return _e("time")}},{key:"read",value:function(e){return _e("read")}},{key:"readSync",value:function(e){return _e("readSync")}},{key:"numDataIds",value:function(){return _e("numDataIds")}},{key:"disposeData",value:function(e){return _e("disposeData")}},{key:"write",value:function(e,t,r){return _e("write")}},{key:"move",value:function(e,t,r,a){return _e("move")}},{key:"memory",value:function(){return _e("memory")}},{key:"floatPrecision",value:function(){return _e("floatPrecision")}},{key:"epsilon",value:function(){return 32===this.floatPrecision()?1e-7:1e-4}},{key:"batchMatMul",value:function(e,t,r,a){return _e("batchMatMul")}},{key:"fusedBatchMatMul",value:function(e){return _objectDestructuringEmpty(e),_e("fusedBatchMatMul")}},{key:"slice",value:function(e,t,r){return _e("slice")}},{key:"stridedSlice",value:function(e,t,r,a){return _e("stridedSlice")}},{key:"unstack",value:function(e,t){return _e("unstack")}},{key:"reverse",value:function(e,t){return _e("reverse")}},{key:"concat",value:function(e,t){return _e("concat")}},{key:"neg",value:function(e){return _e("neg")}},{key:"add",value:function(e,t){return _e("add")}},{key:"addN",value:function(e){return _e("addN")}},{key:"subtract",value:function(e,t){return _e("subtract")}},{key:"multiply",value:function(e,t){return _e("multiply")}},{key:"realDivide",value:function(e,t){return _e("realDivide")}},{key:"floorDiv",value:function(e,t){return _e("floorDiv")}},{key:"sum",value:function(e,t){return _e("sum")}},{key:"prod",value:function(e,t){return _e("prod")}},{key:"unsortedSegmentSum",value:function(e,t,r){return _e("unsortedSegmentSum")}},{key:"argMin",value:function(e,t){return _e("argMin")}},{key:"argMax",value:function(e,t){return _e("argMax")}},{key:"equal",value:function(e,t){return _e("equal")}},{key:"notEqual",value:function(e,t){return _e("notEqual")}},{key:"less",value:function(e,t){return _e("less")}},{key:"lessEqual",value:function(e,t){return _e("lessEqual")}},{key:"greater",value:function(e,t){return _e("greater")}},{key:"greaterEqual",value:function(e,t){return _e("greaterEqual")}},{key:"logicalNot",value:function(e){return _e("logicalNot")}},{key:"logicalAnd",value:function(e,t){return _e("logicalAnd")}},{key:"logicalOr",value:function(e,t){return _e("logicalOr")}},{key:"where",value:function(e){return _e("where")}},{key:"select",value:function(e,t,r){return _e("select")}},{key:"topk",value:function(e,t,r){return _e("topk")}},{key:"min",value:function(e,t){return _e("min")}},{key:"minimum",value:function(e,t){return _e("minimum")}},{key:"mod",value:function(e,t){return _e("mod")}},{key:"max",value:function(e,t){return _e("max")}},{key:"maximum",value:function(e,t){return _e("maximum")}},{key:"all",value:function(e,t){return _e("all")}},{key:"any",value:function(e,t){return _e("any")}},{key:"squaredDifference",value:function(e,t){return _e("squaredDifference")}},{key:"ceil",value:function(e){return _e("ceil")}},{key:"floor",value:function(e){return _e("floor")}},{key:"round",value:function(e){return _e("round")}},{key:"sign",value:function(e){return _e("sign")}},{key:"isNaN",value:function(e){return _e("isNaN")}},{key:"isInf",value:function(e){return _e("isInf")}},{key:"isFinite",value:function(e){return _e("isFinite")}},{key:"pow",value:function(e,t){return _e("pow")}},{key:"exp",value:function(e){return _e("exp")}},{key:"expm1",value:function(e){return _e("expm1")}},{key:"softmax",value:function(e,t){return _e("softmax")}},{key:"log",value:function(e){return _e("log")}},{key:"log1p",value:function(e){return _e("log1p")}},{key:"sqrt",value:function(e){return _e("sqrt")}},{key:"rsqrt",value:function(e){return _e("rsqrt")}},{key:"square",value:function(e){return _e("square")}},{key:"reciprocal",value:function(e){return _e("reciprocal")}},{key:"relu",value:function(e){return _e("relu")}},{key:"relu6",value:function(e){return _e("relu6")}},{key:"prelu",value:function(e,t){return _e("prelu")}},{key:"elu",value:function(e){return _e("elu")}},{key:"eluDer",value:function(e,t){return _e("eluDer")}},{key:"selu",value:function(e){return _e("selu")}},{key:"int",value:function(e){return _e("int")}},{key:"clip",value:function(e,t,r){return _e("clip")}},{key:"abs",value:function(e){return _e("abs")}},{key:"complexAbs",value:function(e){return _e("complexAbs")}},{key:"sigmoid",value:function(e){return _e("sigmoid")}},{key:"softplus",value:function(e){return _e("softplus")}},{key:"sin",value:function(e){return _e("sin")}},{key:"cos",value:function(e){return _e("cos")}},{key:"tan",value:function(e){return _e("tan")}},{key:"asin",value:function(e){return _e("asin")}},{key:"acos",value:function(e){return _e("acos")}},{key:"atan",value:function(e){return _e("atan")}},{key:"atan2",value:function(e,t){return _e("atan2")}},{key:"sinh",value:function(e){return _e("sinh")}},{key:"cosh",value:function(e){return _e("cosh")}},{key:"tanh",value:function(e){return _e("tanh")}},{key:"asinh",value:function(e){return _e("asinh")}},{key:"acosh",value:function(e){return _e("acosh")}},{key:"atanh",value:function(e){return _e("atanh")}},{key:"erf",value:function(e){return _e("erf")}},{key:"step",value:function(e,t){return _e("step")}},{key:"fusedConv2d",value:function(e){return _objectDestructuringEmpty(e),_e("fusedConv2d")}},{key:"conv2d",value:function(e,t,r){return _e("conv2d")}},{key:"conv2dDerInput",value:function(e,t,r){return _e("conv2dDerInput")}},{key:"conv2dDerFilter",value:function(e,t,r){return _e("conv2dDerFilter")}},{key:"fusedDepthwiseConv2D",value:function(e){return _objectDestructuringEmpty(e),_e("fusedDepthwiseConv2D")}},{key:"depthwiseConv2D",value:function(e,t,r){return _e("depthwiseConv2D")}},{key:"depthwiseConv2DDerInput",value:function(e,t,r){return _e("depthwiseConv2DDerInput")}},{key:"depthwiseConv2DDerFilter",value:function(e,t,r){return _e("depthwiseConv2DDerFilter")}},{key:"conv3d",value:function(e,t,r){return _e("conv3d")}},{key:"conv3dDerInput",value:function(e,t,r){return _e("conv3dDerInput")}},{key:"conv3dDerFilter",value:function(e,t,r){return _e("conv3dDerFilter")}},{key:"maxPool",value:function(e,t){return _e("maxPool")}},{key:"maxPoolBackprop",value:function(e,t,r,a){return _e("maxPoolBackprop")}},{key:"avgPool",value:function(e,t){return _e("avgPool")}},{key:"avgPoolBackprop",value:function(e,t,r){return _e("avgPoolBackprop")}},{key:"avgPool3d",value:function(e,t){return _e("avgPool3d")}},{key:"avgPool3dBackprop",value:function(e,t,r){return _e("avgPool3dBackprop")}},{key:"maxPool3d",value:function(e,t){return _e("maxPool3d")}},{key:"maxPool3dBackprop",value:function(e,t,r,a){return _e("maxPool3dBackprop")}},{key:"reshape",value:function(e,t){return _e("reshape")}},{key:"cast",value:function(e,t){return _e("cast")}},{key:"tile",value:function(e,t){return _e("tile")}},{key:"pad",value:function(e,t,r){return _e("pad")}},{key:"transpose",value:function(e,t){return _e("transpose")}},{key:"gather",value:function(e,t,r){return _e("gather")}},{key:"gatherND",value:function(e,t){return _e("gatherND")}},{key:"scatterND",value:function(e,t,r){return _e("scatterND")}},{key:"batchToSpaceND",value:function(e,t,r){return _e("batchToSpaceND")}},{key:"spaceToBatchND",value:function(e,t,r){return _e("spaceToBatchND")}},{key:"resizeBilinear",value:function(e,t,r,a){return _e("resizeBilinear")}},{key:"resizeBilinearBackprop",value:function(e,t,r){return _e("resizeBilinearBackprop")}},{key:"resizeNearestNeighbor",value:function(e,t,r,a){return _e("resizeNearestNeighbor")}},{key:"resizeNearestNeighborBackprop",value:function(e,t,r){return _e("resizeNearestNeighborBackprop")}},{key:"batchNorm",value:function(e,t,r,a,n,i){return _e("batchNorm")}},{key:"localResponseNormalization4D",value:function(e,t,r,a,n){return _e("localResponseNormalization4D")}},{key:"LRNGrad",value:function(e,t,r,a,n,i,o){return _e("LRNGrad")}},{key:"multinomial",value:function(e,t,r,a){return _e("multinomial")}},{key:"oneHot",value:function(e,t,r,a){return _e("oneHot")}},{key:"cumsum",value:function(e,t,r,a){return _e("cumsum")}},{key:"nonMaxSuppression",value:function(e,t,r,a,n){return _e("nonMaxSuppression")}},{key:"fft",value:function(e){return _e("fft")}},{key:"ifft",value:function(e){return _e("ifft")}},{key:"complex",value:function(e,t){return _e("complex")}},{key:"real",value:function(e){return _e("real")}},{key:"imag",value:function(e){return _e("imag")}},{key:"cropAndResize",value:function(e,t,r,a,n,i){return _e("cropAndResize")}},{key:"depthToSpace",value:function(e,t,r){return _e("depthToSpace")}},{key:"split",value:function(e,t,r){return _e("split")}},{key:"sparseToDense",value:function(e,t,r,a){return _e("sparseToDense")}},{key:"diag",value:function(e){return _e("diag")}},{key:"fill",value:function(e,t,r){return _e("fill")}},{key:"onesLike",value:function(e){return _e("onesLike")}},{key:"zerosLike",value:function(e){return _e("zerosLike")}},{key:"linspace",value:function(e,t,r){return _e("linspace")}},{key:"dispose",value:function(){return _e("dispose")}}]),e}();function _e(e){throw new Error("'".concat(e,"' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen"))}function me(e){for(var t=e.length,r=0,a=0;t>0;)a=Math.random()*t|0,r=e[--t],e[t]=e[a],e[a]=r}function ye(e,t,r){return Math.max(e,Math.min(t,r))}function be(e){return e%2==0?e:e+1}function xe(e){for(var t=0,r=0;r<e.length;r++)t+=e[r];return t}function ke(e,t){var r=Math.random();return t*r+(1-r)*e}function we(e,t){for(var r=0,a=0;a<e.length;a++){var n=Number(e[a])-Number(t[a]);r+=n*n}return r}function Ce(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function Te(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";Ce(Ne(e,t),(function(){return r+" Shapes ".concat(e," and ").concat(t," must match")}))}function Se(e){Ce(null!=e,(function(){return"The input to the tensor constructor must be a non-null value."}))}function Ie(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],r=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(null==t&&(t=[]),Array.isArray(e)||je(e)&&!r)for(var a=0;a<e.length;++a)Ie(e[a],t,r);else t.push(e);return t}function Ae(e){if(0===e.length)return 1;for(var t=e[0],r=1;r<e.length;r++)t*=e[r];return t}function Re(e){return 0===e.length}function Ne(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(var r=0;r<e.length;r++)if(e[r]!==t[r])return!1;return!0}function Ee(e){return e%1==0}function Fe(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;if(e===-1/0)return-1;var t=Math.exp(2*e);return(t-1)/(t+1)}function Me(e){var t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function De(e){for(var t=new Uint32Array(e),r=0;r<e;++r)t[r]=r;return me(t),t}function Oe(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function Le(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(e){return 0},r=arguments.length>2?arguments[2]:void 0;return new Promise((function(a,n){var i=0;!function o(){if(e())a();else{i++;var s=t(i);null!=r&&i>=r?n():setTimeout(o,s)}}()}))}function ze(e,t){for(var r=1,a=-1,n=0;n<e.length;++n)if(e[n]>=0)r*=e[n];else if(-1===e[n]){if(-1!==a)throw Error("Shapes can only have 1 implicit size. Found -1 at dim ".concat(a," and dim ").concat(n));a=n}else if(e[n]<0)throw Error("Shapes can not be < 0. Found ".concat(e[n]," at dim ").concat(n));if(-1===a){if(t>0&&t!==r)throw Error("Size(".concat(t,") must match the product of shape ").concat(e));return e}if(0===r)throw Error("Cannot infer the missing size in [".concat(e,"] when there are 0 elements"));if(t%r!=0)throw Error("The implicit shape can't be a fractional number. Got ".concat(t," / ").concat(r));var i=e.slice();return i[a]=t/r,i}function Be(e,t){var r=t.length;return Ce((e=null==e?t.map((function(e,t){return t})):[].concat(e)).every((function(e){return e>=-r&&e<r})),(function(){return"All values in axis param must be in range [-".concat(r,", ").concat(r,") but got axis ")+e})),Ce(e.every((function(e){return Ee(e)})),(function(){return"All values in axis param must be integers but got axis "+e})),e.map((function(e){return e<0?r+e:e}))}function Pe(e,t){for(var r=[],a=[],n=null!=t&&Array.isArray(t)&&0===t.length,i=null==t||n?null:Be(t,e).sort(),o=0,s=0;s<e.length;++s){if(null!=i){if(i[o]===s&&1!==e[s])throw new Error("Can't squeeze axis ".concat(s," since its dim '").concat(e[s],"' is not 1"));(null==i[o]||i[o]>s)&&1===e[s]&&(r.push(e[s]),a.push(s)),i[o]<=s&&o++}1!==e[s]&&(r.push(e[s]),a.push(s))}return{newShape:r,keptDims:a}}function Ve(e,t){var r=null;if(null==e||"float32"===e)r=new Float32Array(t);else if("int32"===e)r=new Int32Array(t);else{if("bool"!==e)throw new Error("Unknown data type "+e);r=new Uint8Array(t)}return r}function Ue(e,t){var r=null;if(null==e||"float32"===e)r=new Float32Array(t);else if("int32"===e)r=new Int32Array(t);else if("bool"===e)r=new Uint8Array(t);else{if("string"!==e)throw new Error("Unknown data type "+e);r=new Array(t)}return r}function We(e,t){for(var r=0;r<e.length;r++){var a=e[r];if(isNaN(a)||!isFinite(a))throw Error("A tensor of type ".concat(t," being uploaded contains ").concat(a,"."))}}function Ge(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function He(e,t){return!("complex64"===t||"float32"===t&&"complex64"!==e||"int32"===t&&"float32"!==e&&"complex64"!==e||"bool"===t&&"bool"===e)}function je(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array}function qe(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error("Unknown dtype "+e)}function Xe(e){if(null==e)return 0;var t=0;return e.forEach((function(e){return t+=e.length})),t}function Ke(e){return"string"==typeof e||e instanceof String}function Qe(e){return"boolean"==typeof e}function Ye(e){return"number"==typeof e}function Je(e){return Array.isArray(e)?Je(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array?"int32":Ye(e)?"float32":Ke(e)?"string":Qe(e)?"bool":"float32"}function Ze(e){return!!(e&&e.constructor&&e.call&&e.apply)}function $e(e,t){for(var r=t;r<e;++r)if(e%r==0)return r;return e}function et(e){var t=e.length;if(t<2)return[];var r=new Array(t-1);r[t-2]=e[t-1];for(var a=t-3;a>=0;--a)r[a]=r[a+1]*e[a+1];return r}function tt(e,t){if(0===e.length)return t[0];var r=e.reduce((function(e,t){return e*t}));if(0===r)return[];if(r!==t.length)throw new Error("[".concat(e,"] does not match the input size ").concat(t.length,"."));return function e(t,r,a){var n=new Array;if(1===r.length)for(var i=r[0],o=0;o<i;o++)n[o]=a[t+o];else for(var s=r[0],l=r.slice(1),u=l.reduce((function(e,t){return e*t})),h=0;h<s;h++)n[h]=e(t+h*u,l,a);return n}(0,e,t)}function rt(e,t){for(var r=at(e,t),a=0;a<r.length;a++)r[a]=1;return r}function at(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error("Unknown data type "+t)}function nt(e,t){var r=e.reduce((function(e,t){return e*t}),1);if(null==t||"float32"===t)return tt(e,new Float32Array(r));if("int32"===t)return tt(e,new Int32Array(r));if("bool"===t)return tt(e,new Uint8Array(r));throw new Error("Unknown data type "+t)}function it(e){e.forEach((function(t){Ce(Number.isInteger(t)&&t>=0,(function(){return"Tensor must have a shape comprised of positive integers but got shape [".concat(e,"].")}))}))}function ot(e,t,r){if(0===t)return 0;if(1===t)return e[0];for(var a=e[e.length-1],n=0;n<e.length-1;++n)a+=r[n]*e[n];return a}function st(e,t,r){if(0===t)return[];if(1===t)return[e];for(var a=new Array(t),n=0;n<a.length-1;++n)a[n]=Math.floor(e/r[n]),e-=a[n]*r[n];return a[a.length-1]=e,a}function lt(e){return e&&e.then&&"function"==typeof e.then}var ut=function(){function e(t){_classCallCheck(this,e),this.global=t,this.flags={},this.flagRegistry={},this.urlFlags={},this.populateURLFlags()}var t;return _createClass(e,[{key:"setPlatform",value:function(e,t){null!=this.platform&&console.warn("Platform ".concat(this.platformName," has already been set. Overwriting the platform with ").concat(t,".")),this.platformName=e,this.platform=t}},{key:"registerFlag",value:function(e,t,r){if(this.flagRegistry[e]={evaluationFn:t,setHook:r},null!=this.urlFlags[e]){var a=this.urlFlags[e];console.warn("Setting feature override from URL ".concat(e,": ").concat(a,".")),this.set(e,a)}}},{key:"getAsync",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(e.t0=t in this.flags,e.t0){e.next=5;break}return e.next=4,this.evaluateFlag(t);case 4:this.flags[t]=e.sent;case 5:return e.abrupt("return",this.flags[t]);case 6:case"end":return e.stop()}}),e,this)}))),function(e){return t.apply(this,arguments)})},{key:"get",value:function(e){if(e in this.flags)return this.flags[e];var t=this.evaluateFlag(e);if(lt(t))throw new Error("Flag ".concat(e," cannot be synchronously evaluated. Please use getAsync() instead."));return this.flags[e]=t,this.flags[e]}},{key:"getNumber",value:function(e){return this.get(e)}},{key:"getBool",value:function(e){return this.get(e)}},{key:"getFlags",value:function(){return this.flags}},{key:"set",value:function(e,t){if(null==this.flagRegistry[e])throw new Error("Cannot set flag ".concat(e," as it has not been registered."));this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}},{key:"evaluateFlag",value:function(e){if(null==this.flagRegistry[e])throw new Error("Cannot evaluate flag '".concat(e,"': no evaluation function found."));return this.flagRegistry[e].evaluationFn()}},{key:"setFlags",value:function(e){this.flags=Object.assign({},e)}},{key:"reset",value:function(){this.flags={},this.urlFlags={},this.populateURLFlags()}},{key:"populateURLFlags",value:function(){var e=this;if(void 0!==this.global&&void 0!==this.global.location&&void 0!==this.global.location.search){var t,r,a=(t=this.global.location.search,r={},t.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(function(e){for(var t=arguments.length,a=new Array(t>1?t-1:0),n=1;n<t;n++)a[n-1]=arguments[n];return function(e,t,r){e[decodeURIComponent(t)]=decodeURIComponent(r||"")}(r,a[0],a[1]),a.join("=")})),r);"tfjsflags"in a&&a.tfjsflags.split(",").forEach((function(t){var r=_slicedToArray(t.split(":"),2),a=r[0],n=r[1];e.urlFlags[a]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error("Could not parse value flag value ".concat(t," for flag ").concat(e,"."))}(a,n)}))}}},{key:"features",get:function(){return this.flags}}]),e}();function ht(){return ft}var ct,ft=null;function dt(){if(null==ct){var e;if("undefined"!=typeof window)e=window;else if("undefined"!=typeof global)e=global;else if("undefined"!=typeof process)e=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}ct=e}return ct}function vt(e,t){var r,a=(null==(r=dt())._tfGlobals&&(r._tfGlobals=new Map),r._tfGlobals);if(a.has(e))return a.get(e);var n=t();return a.set(e,n),a.get(e)}var pt="Abs",gt="Acos",_t="Acosh",mt="Add",yt="AddN",bt="All",xt="Any",kt="ArgMax",wt="ArgMin",Ct="Asin",Tt="Asinh",St="Atan",It="Atanh",At="Atan2",Rt="AvgPool",Nt="AvgPoolBackprop",Et="AvgPool3D",Ft="AvgPool3DBackprop",Mt="BatchMatMul",Dt="BatchToSpaceND",Ot="BroadcastTo",Lt="Cast",zt="Ceil",Bt="ClipByValue",Pt="Complex",Vt="Concat",Ut="Conv2D",Wt="Conv2DBackpropFilter",Gt="Conv2DBackpropInput",Ht="Conv3D",jt="Conv3DBackpropFilterV2",qt="Conv3DBackpropInputV2",Xt="Cos",Kt="Cosh",Qt="Cumsum",Yt="CropAndResize",Jt="DepthToSpace",Zt="DepthwiseConv2dNative",$t="DepthwiseConv2dNativeBackpropFilter",er="DepthwiseConv2dNativeBackpropInput",tr="Diag",rr="Dilation2D",ar="Dilation2DBackpropInput",nr="Dilation2DBackpropFilter",ir="Div",or="Elu",sr="EluGrad",lr="Erf",ur="Equal",hr="Exp",cr="Expm1",fr="FFT",dr="Fill",vr="FlipLeftRight",pr="Floor",gr="FloorDiv",_r="FusedBatchNorm",mr="GatherV2",yr="GatherNd",br="Greater",xr="GreaterEqual",kr="Identity",wr="IFFT",Cr="Imag",Tr="IsFinite",Sr="IsInf",Ir="IsNan",Ar="Less",Rr="LessEqual",Nr="LinSpace",Er="Log",Fr="Log1p",Mr="LogicalAnd",Dr="LogicalNot",Or="LogicalOr",Lr="LogSoftmax",zr="LRN",Br="LRNBackprop",Pr="Max",Vr="Maximum",Ur="MaxPool",Wr="MaxPoolBackprop",Gr="MaxPool3D",Hr="MaxPool3DBackprop",jr="MaxPoolWithArgmax",qr="Mean",Xr="Min",Kr="Minimum",Qr="MirrorPad",Yr="Mod",Jr="Multiply",Zr="Negate",$r="NotEqual",ea="NonMaxSuppressionV3",ta="NonMaxSuppressionV4",ra="NonMaxSuppressionV5",aa="OnesLike",na="OneHot",ia="PadV2",oa="Pool",sa="Pow",la="Prelu",ua="Prod",ha="Range",ca="Real",fa="Reciprocal",da="Relu",va="Reshape",pa="ResizeNearestNeighbor",ga="ResizeNearestNeighborGrad",_a="ResizeBilinear",ma="ResizeBilinearGrad",ya="Relu6",ba="Reverse",xa="Round",ka="Rsqrt",wa="ScatterNd",Ca="SelectV2",Ta="Selu",Sa="Slice",Ia="Sin",Aa="Sinh",Ra="Sign",Na="Sigmoid",Ea="Softplus",Fa="Sqrt",Ma="Sum",Da="SpaceToBatchND",Oa="SplitV",La="Softmax",za="SquaredDifference",Ba="Square",Pa="Sub",Va="SparseToDense",Ua="StridedSlice",Wa="Tan",Ga="Tanh",Ha="Tile",ja="TopK",qa="Transpose",Xa="Unique",Ka="Unpack",Qa="UnsortedSegmentSum",Ya="ZerosLike",Ja="Step",Za="FromPixels",$a="RotateWithOffset",en="_FusedMatMul",tn="FusedConv2D",rn="FusedDepthwiseConv2D",an=vt("kernelRegistry",(function(){return new Map})),nn=vt("gradRegistry",(function(){return new Map}));function on(e,t){var r=vn(e,t);return an.get(r)}function sn(e){return nn.get(e)}function ln(e){for(var t=an.entries(),r=[];;){var a=t.next(),n=a.done,i=a.value;if(n)break;var o=_slicedToArray(i,2),s=o[0],l=o[1];_slicedToArray(s.split("_"),1)[0]===e&&r.push(l)}return r}function un(e){var t=e.kernelName,r=e.backendName,a=vn(t,r);an.has(a)&&console.warn("The kernel '".concat(t,"' for backend '").concat(r,"' is already registered")),an.set(a,e)}function hn(e){var t=e.kernelName;nn.has(t)&&ht().getBool("DEBUG")&&console.warn("Overriding the gradient for '".concat(t,"'")),nn.set(t,e)}function cn(e,t){var r=vn(e,t);if(!an.has(r))throw new Error("The kernel '".concat(e,"' for backend '").concat(t,"' is not registered"));an.delete(r)}function fn(e){if(!nn.has(e))throw new Error("The gradient '".concat(e,"' for backend is not registered"));nn.delete(e)}function dn(e,t){ln(e).forEach((function(e){un(Object.assign({},e,{backendName:t}))}))}function vn(e,t){return"".concat(t,"_").concat(e)}var pn=function(){function e(t,r){_classCallCheck(this,e),this.backendTimer=t,this.logger=r,null==r&&(this.logger=new gn)}return _createClass(e,[{key:"profileKernel",value:function(e,t,r){for(var a,n=this.backendTimer.time((function(){a=r()})),i=function(t){var r=a[t];r.data().then((function(t){!function(e,t,r){if("float32"!==t)return!1;for(var a=0;a<e.length;a++){var n=e[a];if(isNaN(n)||!isFinite(n))return console.warn("Found ".concat(n," in the result of '").concat(r,"'")),!0}}(t,r.dtype,e)}))},o=0;o<a.length;o++)i(o);return{kernelName:e,outputs:a,inputs:t,timeMs:n.then((function(e){return e.kernelMs})),extraInfo:n.then((function(e){return null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""}))}}},{key:"logKernelProfile",value:function(e){var t=this,r=e.kernelName,a=e.outputs,n=e.timeMs,i=e.inputs,o=e.extraInfo;a.forEach((function(e){Promise.all([e.data(),n,o]).then((function(a){t.logger.logKernelProfile(r,e,a[0],a[1],i,a[2])}))}))}}]),e}();var gn=function(){function e(){_classCallCheck(this,e)}return _createClass(e,[{key:"logKernelProfile",value:function(e,t,r,a,n,i){var o="number"==typeof a?Oe(a+"ms",9):a.error,s=Oe(e,25),l=t.rank,u=t.size,h=Oe(t.shape.toString(),14),c="";for(var f in n){var d=n[f];if(null!=d){var v=d.shape||t.shape,p=v.length;c+="".concat(f,": ").concat(p,"D ").concat(p>0?v:""," ")}}console.log("%c".concat(s,"\t%c").concat(o,"\t%c").concat(l,"D ").concat(h,"\t%c").concat(u,"\t%c").concat(c,"\t%c").concat(i),"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}]),e}();function _n(e,t,r){return Oe(Array.isArray(e)?parseFloat(e[0].toFixed(7))+" + "+parseFloat(e[1].toFixed(7))+"j":Ke(e)?"'".concat(e,"'"):"bool"===r?mn(e):parseFloat(e.toFixed(7)).toString(),t)}function mn(e){return 0===e?"false":"true"}function yn(e){for(var t=[],r=0;r<e.length;r+=2)t.push([e[r],e[r+1]]);return t}function bn(e,t){return"string"===t?Cn(e):xn([e],t)}function xn(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=Ie(e)),ht().getBool("DEBUG")&&We(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){for(var r=new Uint8Array(e.length),a=0;a<r.length;++a)0!==Math.round(e[a])&&(r[a]=1);return r}throw new Error("Unknown data type "+t)}function kn(){return ht().platform.now()}function wn(e,t){return ht().platform.fetch(e,t)}function Cn(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"utf-8";return t=t||"utf-8",ht().platform.encode(e,t)}function Tn(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"utf-8";return t=t||"utf-8",ht().platform.decode(e,t)}var Sn=function(){function e(t,r,a){var n=this;if(_classCallCheck(this,e),this.dtype=r,this.shape=t.slice(),this.size=Ae(t),null!=a){var i=a.length;Ce(i===this.size,(function(){return"Length of values '".concat(i,"' does not match the size inferred by the shape '").concat(n.size,"'.")}))}if("complex64"===r)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=a||Ue(r,this.size),this.strides=et(t)}return _createClass(e,[{key:"set",value:function(e){for(var t=this,r=arguments.length,a=new Array(r>1?r-1:0),n=1;n<r;n++)a[n-1]=arguments[n];0===a.length&&(a=[0]),Ce(a.length===this.rank,(function(){return"The number of provided coordinates (".concat(a.length,") must match the rank (").concat(t.rank,")")}));var i=this.locToIndex(a);this.values[i]=e}},{key:"get",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];0===t.length&&(t=[0]);for(var a=0,n=0,i=t;n<i.length;n++){var o=i[n];if(o<0||o>=this.shape[a])throw new Error("Requested out of range element at ".concat(t,".   Buffer shape=")+this.shape);a++}for(var s=t[t.length-1],l=0;l<t.length-1;++l)s+=this.strides[l]*t[l];return this.values[s]}},{key:"locToIndex",value:function(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];for(var t=e[e.length-1],r=0;r<e.length-1;++r)t+=this.strides[r]*e[r];return t}},{key:"indexToLoc",value:function(e){if(0===this.rank)return[];if(1===this.rank)return[e];for(var t=new Array(this.shape.length),r=0;r<t.length-1;++r)t[r]=Math.floor(e/this.strides[r]),e-=t[r]*this.strides[r];return t[t.length-1]=e,t}},{key:"toTensor",value:function(){return In().makeTensor(this.values,this.shape,this.dtype)}},{key:"rank",get:function(){return this.shape.length}}]),e}(),In=null,An=null,Rn=function(){function e(t,r,a,n){_classCallCheck(this,e),this.kept=!1,this.isDisposedInternal=!1,this.shape=t.slice(),this.dtype=r||"float32",this.size=Ae(t),this.strides=et(t),this.dataId=a,this.id=n,this.rankType=this.rank<5?this.rank.toString():"higher"}var t,r,a,n;return _createClass(e,[{key:"buffer",value:(n=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.data();case 2:return t=e.sent,e.abrupt("return",An.buffer(this.shape,this.dtype,t));case 4:case"end":return e.stop()}}),e,this)}))),function(){return n.apply(this,arguments)})},{key:"bufferSync",value:function(){return An.buffer(this.shape,this.dtype,this.dataSync())}},{key:"array",value:(a=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.data();case 2:return t=e.sent,e.abrupt("return",tt(this.shape,t));case 4:case"end":return e.stop()}}),e,this)}))),function(){return a.apply(this,arguments)})},{key:"arraySync",value:function(){return tt(this.shape,this.dataSync())}},{key:"data",value:(r=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t,r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(this.throwIfDisposed(),t=In().read(this.dataId),"string"!==this.dtype){e.next=13;break}return e.next=5,t;case 5:return r=e.sent,e.prev=6,e.abrupt("return",r.map((function(e){return Tn(e)})));case 10:throw e.prev=10,e.t0=e.catch(6),new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().");case 13:return e.abrupt("return",t);case 14:case"end":return e.stop()}}),e,this,[[6,10]])}))),function(){return r.apply(this,arguments)})},{key:"dataSync",value:function(){this.throwIfDisposed();var e=In().readSync(this.dataId);if("string"===this.dtype)try{return e.map((function(e){return Tn(e)}))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}},{key:"bytes",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return this.throwIfDisposed(),e.next=3,In().read(this.dataId);case 3:return t=e.sent,e.abrupt("return","string"===this.dtype?t:new Uint8Array(t.buffer));case 5:case"end":return e.stop()}}),e,this)}))),function(){return t.apply(this,arguments)})},{key:"dispose",value:function(){this.isDisposed||(In().disposeTensor(this),this.isDisposedInternal=!0)}},{key:"throwIfDisposed",value:function(){if(this.isDisposed)throw new Error("Tensor is disposed.")}},{key:"print",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return An.print(this,e)}},{key:"clone",value:function(){return this.throwIfDisposed(),An.clone(this)}},{key:"toString",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return function(e,t,r,a){var n=et(t),i=function(e,t,r,a){var n=Ae(t),i=a[a.length-1],o=new Array(i).fill(0),s=t.length,l="complex64"===r?yn(e):e;if(s>1)for(var u=0;u<n/i;u++)for(var h=u*i,c=0;c<i;c++)o[c]=Math.max(o[c],_n(l[h+c],0,r).length);return o}(e,t,r,n),o=t.length,s=function e(t,r,a,n,i){var o=!(arguments.length>5&&void 0!==arguments[5])||arguments[5],s="complex64"===a?2:1,l=r[0],u=r.length;if(0===u)return"complex64"===a?[_n(yn(t)[0],0,a)]:"bool"===a?[mn(t[0])]:[t[0].toString()];if(1===u){if(l>20){var h=Array.from(t.slice(0,3*s)),c=Array.from(t.slice((l-3)*s,l*s));return"complex64"===a&&(h=yn(h),c=yn(c)),["["+h.map((function(e,t){return _n(e,i[t],a)})).join(", ")+", ..., "+c.map((function(e,t){return _n(e,i[l-3+t],a)})).join(", ")+"]"]}return["["+("complex64"===a?yn(t):Array.from(t)).map((function(e,t){return _n(e,i[t],a)})).join(", ")+"]"]}var f=r.slice(1),d=n.slice(1),v=n[0]*s,p=[];if(l>20){for(var g=0;g<3;g++){var _=g*v;p.push.apply(p,_toConsumableArray(e(t.slice(_,_+v),f,a,d,i,!1)))}p.push("...");for(var m=l-3;m<l;m++){var y=m*v;p.push.apply(p,_toConsumableArray(e(t.slice(y,y+v),f,a,d,i,m===l-1)))}}else for(var b=0;b<l;b++){var x=b*v;p.push.apply(p,_toConsumableArray(e(t.slice(x,x+v),f,a,d,i,b===l-1)))}var k=2===u?",":"";p[0]="["+p[0]+k;for(var w=1;w<p.length-1;w++)p[w]=" "+p[w]+k;for(var C=",\n",T=2;T<u;T++)C+="\n";return p[p.length-1]=" "+p[p.length-1]+"]"+(o?"":C),p}(e,t,r,n,i),l=["Tensor"];return a&&(l.push("  dtype: "+r),l.push("  rank: "+o),l.push("  shape: [".concat(t,"]")),l.push("  values:")),l.push(s.map((function(e){return"    "+e})).join("\n")),l.join("\n")}(this.dataSync(),this.shape,this.dtype,e)}},{key:"cast",value:function(e){return this.throwIfDisposed(),An.cast(this,e)}},{key:"variable",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],t=arguments.length>1?arguments[1]:void 0,r=arguments.length>2?arguments[2]:void 0;return this.throwIfDisposed(),In().makeVariable(this,e,t,r)}},{key:"rank",get:function(){return this.shape.length}},{key:"isDisposed",get:function(){return this.isDisposedInternal}}]),e}();Object.defineProperty(Rn,Symbol.hasInstance,{value:function(e){return!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}});var Nn,En,Fn,Mn,Dn,On=function(e){_inherits(r,e);var t=_createSuper(r);function r(e,a,n,i){var o;return _classCallCheck(this,r),(o=t.call(this,e.shape,e.dtype,e.dataId,i)).trainable=a,o.name=n,o}return _createClass(r,[{key:"assign",value:function(e){if(e.dtype!==this.dtype)throw new Error("dtype of the new value (".concat(e.dtype,") and previous value (").concat(this.dtype,") must match"));if(!Ne(e.shape,this.shape))throw new Error("shape of the new value (".concat(e.shape,") and previous value (").concat(this.shape,") must match"));In().disposeTensor(this),this.dataId=e.dataId,In().incRef(this,null)}},{key:"dispose",value:function(){In().disposeVariable(this),this.isDisposedInternal=!0}}]),r}(Rn);Object.defineProperty(On,Symbol.hasInstance,{value:function(e){return e instanceof Rn&&null!=e.assign&&e.assign instanceof Function}}),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(Nn||(Nn={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(En||(En={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(Fn||(Fn={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(Mn||(Mn={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(Dn||(Dn={}));var Ln={float32:Mn,int32:En,bool:Fn,complex64:Dn};function zn(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error("Can not upcast ".concat(e," with ").concat(t))}return Ln[e][t]}function Bn(e){return zn(e,"int32")}function Pn(e,t){if(e.dtype===t.dtype)return[e,t];var r=zn(e.dtype,t.dtype);return[e.cast(r),t.cast(r)]}function Vn(e,t){Ce(e.dtype===t.dtype,(function(){return"The dtypes of the first(".concat(e.dtype,") and second(").concat(t.dtype,") input must match")}))}function Un(e,t){return t.some((function(t){return t.id===e.id}))}function Wn(e){var t=[];return function e(t,r,a){if(null!=t)if(t instanceof Rn)r.push(t);else if(n=t,Array.isArray(n)||"object"==typeof n){var n,i=t;for(var o in i){var s=i[o];a.has(s)||(a.add(s),e(s,r,a))}}}(e,t,new Set),t}var Gn=function(){function e(){_classCallCheck(this,e),this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null}}return _createClass(e,[{key:"dispose",value:function(){for(var e in this.registeredVariables)this.registeredVariables[e].dispose()}}]),e}(),Hn=function(){function e(t){_classCallCheck(this,e),this.ENV=t,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new Gn}var t,r,a,n;return _createClass(e,[{key:"ready",value:(n=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t,r,a;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(null==this.pendingBackendInit){e.next=2;break}return e.abrupt("return",this.pendingBackendInit.then((function(){})));case 2:if(null==this.backendInstance){e.next=4;break}return e.abrupt("return");case 4:t=this.getSortedBackends(),r=0;case 6:if(!(r<t.length)){e.next=17;break}return a=t[r],e.next=10,this.initializeBackend(a).success;case 10:if(!e.sent){e.next=14;break}return e.next=13,this.setBackend(a);case 13:return e.abrupt("return",void e.sent);case 14:r++,e.next=6;break;case 17:throw new Error("Could not initialize any backends, all backend initializations failed.");case 18:case"end":return e.stop()}}),e,this)}))),function(){return n.apply(this,arguments)})},{key:"backendNames",value:function(){return Object.keys(this.registryFactory)}},{key:"findBackend",value:function(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;if(this.initializeBackend(e).asyncInit)return null}return this.registry[e]}},{key:"findBackendFactory",value:function(e){return e in this.registryFactory?this.registryFactory[e].factory:null}},{key:"registerBackend",value:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return e in this.registryFactory?(console.warn(e+" backend was already registered. Reusing existing backend factory."),!1):(this.registryFactory[e]={factory:t,priority:r},!0)}},{key:"setBackend",value:(a=_asyncToGenerator(regeneratorRuntime.mark((function e(t){var r,a;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(null!=this.registryFactory[t]){e.next=2;break}throw new Error("Backend name '".concat(t,"' not found in registry"));case 2:if(this.backendName=t,null!=this.registry[t]){e.next=14;break}if(this.backendInstance=null,r=this.initializeBackend(t),a=r.success,!r.asyncInit){e.next=11;break}return e.next=8,a;case 8:e.t0=e.sent,e.next=12;break;case 11:e.t0=a;case 12:if(e.t0){e.next=14;break}return e.abrupt("return",!1);case 14:return e.abrupt("return",(this.backendInstance=this.registry[t],this.setupRegisteredKernels(),this.profiler=new pn(this.backendInstance),!0));case 15:case"end":return e.stop()}}),e,this)}))),function(e){return a.apply(this,arguments)})},{key:"setupRegisteredKernels",value:function(){var e=this;ln(this.backendName).forEach((function(t){null!=t.setupFunc&&t.setupFunc(e.backendInstance)}))}},{key:"disposeRegisteredKernels",value:function(e){var t=this;ln(e).forEach((function(r){null!=r.disposeFunc&&r.disposeFunc(t.registry[e])}))}},{key:"initializeBackend",value:function(e){var t=this,r=this.registryFactory[e];if(null==r)throw new Error("Cannot initialize backend ".concat(e,", no registration found."));try{var a=r.factory();if(!a||a instanceof ge||"function"!=typeof a.then)return this.registry[e]=a,{success:!0,asyncInit:!1};var n=++this.pendingBackendInitId,i=a.then((function(r){return!(n<t.pendingBackendInitId||(t.registry[e]=r,t.pendingBackendInit=null,0))})).catch((function(r){return n<t.pendingBackendInitId||(t.pendingBackendInit=null,console.warn("Initialization of backend ".concat(e," failed")),console.warn(r.stack||r.message)),!1}));return this.pendingBackendInit=i,{success:i,asyncInit:!0}}catch(o){return console.warn("Initialization of backend ".concat(e," failed")),console.warn(o.stack||o.message),{success:!1,asyncInit:!1}}}},{key:"removeBackend",value:function(e){if(!(e in this.registryFactory))throw new Error(e+" backend not found in registry");this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}},{key:"getSortedBackends",value:function(){var e=this;if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((function(t,r){return e.registryFactory[r].priority-e.registryFactory[t].priority}))}},{key:"initializeBackendsAndReturnBest",value:function(){for(var e=this.getSortedBackends(),t=0;t<e.length;t++){var r=e[t],a=this.initializeBackend(r),n=a.success,i=a.asyncInit;if(i||n)return{name:r,asyncInit:i}}throw new Error("Could not initialize any backends, all backend initializations failed.")}},{key:"moveData",value:function(e,t){var r=this.state.tensorInfo.get(t),a=r.backend,n=this.readSync(t);a.disposeData(t),r.backend=e,e.move(t,n,r.shape,r.dtype),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}},{key:"tidy",value:function(e,t){var r,a=this,n=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");n=e}return this.scopedRun((function(){return a.startScope(n)}),(function(){return a.endScope(r)}),(function(){return(r=t())instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),r}))}},{key:"scopedRun",value:function(e,t,r){e();try{var a=r();return t(),a}catch(n){throw t(),n}}},{key:"nextTensorId",value:function(){return e.nextTensorId++}},{key:"nextVariableId",value:function(){return e.nextVariableId++}},{key:"clone",value:function(e){var t=this.makeTensorFromDataId(e.dataId,e.shape,e.dtype);return this.addTapeNode(this.state.activeScope.name,{x:e},[t],(function(e){return{x:function(){return qn.runKernelFunc((function(t){return t.cast(e,"float32")}),{x:e},null,Lt,{dtype:"float32"})}}}),[],{}),t}},{key:"runKernel",value:function(e,t,r,a,n){return this.runKernelFunc(null,t,null,e,r,a,n)}},{key:"shouldCheckForMemLeaks",value:function(){return this.ENV.getBool("IS_TEST")}},{key:"checkKernelForMemLeak",value:function(e,t,r){var a=this.backend.numDataIds(),n=0;r.forEach((function(e){n+="complex64"===e.dtype?3:1}));var i=a-t-n-this.state.numDataMovesStack[this.state.numDataMovesStack.length-1];if(i>0)throw new Error("Backend '".concat(this.backendName,"' has an internal memory leak (").concat(i," data ids) after running '").concat(e,"'"))}},{key:"runKernelFunc",value:function(e,t,r,a,n,i,o){var s,l=this,u=[],h=this.isTapeOn();null==a&&(a=null!=this.state.activeScope?this.state.activeScope.name:"");var c,f=this.state.numBytes,d=this.state.numTensors;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);var v,p,g=on(a,this.backendName);if(null!=g)c=function(){var e=l.backend.numDataIds();v=g.kernelFunc({inputs:t,attrs:n,backend:l.backend});var r=Array.isArray(v)?v:[v];l.shouldCheckForMemLeaks()&&l.checkKernelForMemLeak(a,e,r);var s=r.map((function(e){var t=e.dataId,r=e.shape,a=e.dtype;return l.makeTensorFromDataId(t,r,a)}));if(h){var c=l.getTensorsForGradient(a,t,s);if(null==c){null==o&&(o=[]);var f=s.filter((function(e,t){return o[t]}));c=(i||[]).slice().concat(f)}u=l.saveTensorsForBackwardMode(c)}return s};else{var _=function(e){h&&(u=e.map((function(e){return l.keep(l.clone(e))})))};c=function(){var t=l.backend.numDataIds();v=l.tidy((function(){return e(l.backend,_)}));var r=Array.isArray(v)?v:[v];return l.shouldCheckForMemLeaks()&&l.checkKernelForMemLeak(a,t,r),r}}return this.scopedRun((function(){return l.state.kernelDepth++}),(function(){return l.state.kernelDepth--}),(function(){l.ENV.getBool("DEBUG")||l.state.profiling?(p=l.profiler.profileKernel(a,t,(function(){return c()})),l.ENV.getBool("DEBUG")&&l.profiler.logKernelProfile(p),s=p.outputs):s=c()})),h&&this.addTapeNode(a,t,s,r,u,n),this.state.profiling&&this.state.activeProfile.kernels.push({name:a,bytesAdded:this.state.numBytes-f,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-d,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(t).map((function(e){return null!=t[e]?t[e].shape:null})),outputShapes:s.map((function(e){return e.shape})),kernelTimeMs:p.timeMs,extraInfo:p.extraInfo}),Array.isArray(v)?s:s[0]}},{key:"saveTensorsForBackwardMode",value:function(e){var t=this;return e.map((function(e){return t.keep(t.clone(e))}))}},{key:"getTensorsForGradient",value:function(e,t,r){var a=sn(e);if(null!=a){var n,i=a.inputsToSave||[],o=a.outputsToSave||[];a.saveAllInputs?(Ce(Array.isArray(t),(function(){return"saveAllInputs is true, expected inputs to be an array."})),n=Object.keys(t).map((function(e){return t[e]}))):n=i.map((function(e){return t[e]}));var s=r.filter((function(e,t){return o[t]}));return n.concat(s)}return null}},{key:"makeTensor",value:function(e,t,r,a){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");a=a||this.backend;var n=e;"string"===(r=r||"float32")&&Ke(e[0])&&(n=e.map((function(e){return Cn(e)})));var i=a.write(n,t,r),o=new Rn(t,r,i,this.nextTensorId());if(this.incRef(o,a),"string"===r){var s=this.state.tensorInfo.get(i),l=Xe(n);this.state.numBytes+=l-s.bytes,s.bytes=l}return o}},{key:"makeTensorFromDataId",value:function(e,t,r,a){var n=new Rn(t,r=r||"float32",e,this.nextTensorId());return this.incRef(n,a),n}},{key:"makeVariable",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],r=arguments.length>2?arguments[2]:void 0,a=arguments.length>3?arguments[3]:void 0;r=r||this.nextVariableId().toString(),null!=a&&a!==e.dtype&&(e=e.cast(a));var n=new On(e,t,r,this.nextTensorId());if(null!=this.state.registeredVariables[n.name])throw new Error("Variable with name ".concat(n.name," was already registered"));return this.state.registeredVariables[n.name]=n,this.incRef(n,this.backend),n}},{key:"incRef",value:function(e,t){var r=this.state.tensorInfo.has(e.dataId)?this.state.tensorInfo.get(e.dataId).refCount:0;if(this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++,0===r){this.state.numDataBuffers++;var a=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(a=e.size*qe(e.dtype)),this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:a,refCount:0}),this.state.numBytes+=a}this.state.tensorInfo.get(e.dataId).refCount++,e instanceof On||this.track(e)}},{key:"disposeTensor",value:function(e){if(this.state.tensorInfo.has(e.dataId)){this.state.numTensors--,"string"===e.dtype&&this.state.numStringTensors--;var t=this.state.tensorInfo.get(e.dataId);t.refCount<=1?("complex64"!==e.dtype&&(this.state.numBytes-=t.bytes),this.state.numDataBuffers--,t.backend.disposeData(e.dataId),this.state.tensorInfo.delete(e.dataId)):this.state.tensorInfo.get(e.dataId).refCount--}}},{key:"disposeVariables",value:function(){for(var e in this.state.registeredVariables)this.disposeVariable(this.state.registeredVariables[e])}},{key:"disposeVariable",value:function(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}},{key:"memory",value:function(){var e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}},{key:"profile",value:(r=_asyncToGenerator(regeneratorRuntime.mark((function e(t){var r,a,n,i,o;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return this.state.profiling=!0,r=this.state.numBytes,a=this.state.numTensors,this.state.activeProfile.kernels=[],e.next=5,t();case 5:this.state.activeProfile.result=e.sent,this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max.apply(Math,_toConsumableArray(this.state.activeProfile.kernels.map((function(e){return e.totalBytesSnapshot})))),this.state.activeProfile.newBytes=this.state.numBytes-r,this.state.activeProfile.newTensors=this.state.numTensors-a,n=_createForOfIteratorHelper(this.state.activeProfile.kernels),e.prev=11,n.s();case 13:if((i=n.n()).done){e.next=23;break}return o=i.value,e.next=17,o.kernelTimeMs;case 17:return o.kernelTimeMs=e.sent,e.next=20,o.extraInfo;case 20:o.extraInfo=e.sent;case 21:e.next=13;break;case 23:e.next=28;break;case 25:e.prev=25,e.t0=e.catch(11),n.e(e.t0);case 28:return e.prev=28,n.f(),e.finish(28);case 31:return e.abrupt("return",this.state.activeProfile);case 32:case"end":return e.stop()}}),e,this,[[11,25,28,31]])}))),function(e){return r.apply(this,arguments)})},{key:"isTapeOn",value:function(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}},{key:"addTapeNode",value:function(e,t,r,a,n,i){var o=this,s={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:r,saved:n},l=sn(e);null!=l&&(a=l.gradFunc),null!=a&&(s.gradient=function(e){return e=e.map((function(e,t){if(null==e){var a=r[t],n=at(a.size,a.dtype);return o.makeTensor(n,a.shape,a.dtype)}return e})),a(e.length>1?e:e[0],n,i)}),this.state.activeTape.push(s)}},{key:"keep",value:function(e){return e.kept=!0,e}},{key:"startTape",value:function(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}},{key:"endTape",value:function(){this.state.gradientDepth--}},{key:"startScope",value:function(e){var t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}},{key:"endScope",value:function(e){for(var t=this,r=Wn(e),a=new Set(r.map((function(e){return e.id}))),n=0;n<this.state.activeScope.track.length;n++){var i=this.state.activeScope.track[n];i.kept||a.has(i.id)||i.dispose()}var o=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],r.forEach((function(e){e.kept||e.scopeId!==o.id||t.track(e)}))}},{key:"gradients",value:function(e,t,r){var a=this,n=arguments.length>3&&void 0!==arguments[3]&&arguments[3];if(Ce(t.length>0,(function(){return"gradients() received an empty list of xs."})),null!=r&&"float32"!==r.dtype)throw new Error("dy must have 'float32' dtype, but has '".concat(r.dtype,"'"));var i=this.scopedRun((function(){return a.startTape()}),(function(){return a.endTape()}),(function(){return a.tidy("forward",e)}));Ce(i instanceof Rn,(function(){return"The result y returned by f() must be a tensor."}));var o=function(e,t,r){for(var a={},n={},i=0;i<t.length;i++)a[t[i].id]=!0;for(var o=0;o<e.length;o++){var s=e[o],l=s.inputs;for(var u in l){for(var h=l[u],c=!1,f=0;f<t.length;f++)if(a[h.id]){s.outputs.forEach((function(e){return a[e.id]=!0})),c=!0,n[s.id]=!0;break}if(c)break}}var d={};d[r.id]=!0;for(var v={},p=e.length-1;p>=0;p--)for(var g=e[p],_=g.inputs,m=0;m<g.outputs.length;m++)if(d[g.outputs[m].id]){for(var y in _)d[_[y].id]=!0,v[g.id]=!0;break}for(var b=[],x=0;x<e.length;x++){var k=e[x];if(n[k.id]&&v[k.id]){var w={};for(var C in k.inputs){var T=k.inputs[C];a[T.id]&&(w[C]=T)}var S=Object.assign({},k);S.inputs=w,S.outputs=k.outputs,b.push(S)}}return b}(this.state.activeTape,t,i);if(!n&&0===o.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(function(){var e,n,s={};s[i.id]=null==r?(e=i.shape,n=rt(Ae(e),"float32"),qn.makeTensor(n,e,"float32")):r,function(e,t,r,n){for(var i=function(r){var i=t[r],o=[];if(i.outputs.forEach((function(t){var r=e[t.id];o.push(null!=r?r:null)})),null==i.gradient)throw new Error("Cannot compute gradient: gradient function not found for ".concat(i.kernelName,"."));var s=i.gradient(o),l=function(t){if(!(t in s))throw new Error("Cannot backprop through input ".concat(t,". Available gradients found: ").concat(Object.keys(s),"."));var r=function(e){return a.tidy(e)}((function(){return s[t]()}));if("float32"!==r.dtype)throw new Error("Error in gradient for op ".concat(i.kernelName,". The gradient of input ").concat(t," must have 'float32' dtype, but has '").concat(r.dtype,"'"));var o=i.inputs[t];if(!Ne(r.shape,o.shape))throw new Error("Error in gradient for op ".concat(i.kernelName,". The gradient of input '").concat(t,"' has shape '").concat(r.shape,"', which does not match the shape of the input '").concat(o.shape,"'"));if(null==e[o.id])e[o.id]=r;else{var l=e[o.id];e[o.id]=n(l,r),l.dispose()}};for(var u in i.inputs)l(u)},o=t.length-1;o>=0;o--)i(o)}(s,o,0,Xn);var l=t.map((function(e){return s[e.id]}));return 0===a.state.gradientDepth&&(a.state.activeTape.forEach((function(e){var t,r=_createForOfIteratorHelper(e.saved);try{for(r.s();!(t=r.n()).done;){t.value.dispose()}}catch(a){r.e(a)}finally{r.f()}})),a.state.activeTape=null),{value:i,grads:l}}))}},{key:"customGrad",value:function(e){var t=this;return Ce(Ze(e),(function(){return"The f passed in customGrad(f) must be a function."})),function(){for(var r=arguments.length,a=new Array(r),n=0;n<r;n++)a[n]=arguments[n];var i;Ce(a.every((function(e){return e instanceof Rn})),(function(){return"The args passed in customGrad(f)(x1, x2,...) must all be tensors"}));var o={};return a.forEach((function(e,t){o[t]=e})),t.runKernelFunc((function(t,r){return Ce((i=e.apply(void 0,a.concat([r]))).value instanceof Rn,(function(){return"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"})),Ce(Ze(i.gradFunc),(function(){return"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."})),i.value}),o,(function(e,t){var r=i.gradFunc(e,t),n=Array.isArray(r)?r:[r];Ce(n.length===a.length,(function(){return"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."})),Ce(n.every((function(e){return e instanceof Rn})),(function(){return"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."}));var o={};return n.forEach((function(e,t){o[t]=function(){return e}})),o}))}}},{key:"readSync",value:function(e){return this.state.tensorInfo.get(e).backend.readSync(e)}},{key:"read",value:function(e){return this.state.tensorInfo.get(e).backend.read(e)}},{key:"time",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(t){var r,a;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=kn(),e.next=3,this.backend.time(t);case 3:return a=e.sent,e.abrupt("return",(a.wallMs=kn()-r,a));case 5:case"end":return e.stop()}}),e,this)}))),function(e){return t.apply(this,arguments)})},{key:"track",value:function(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}},{key:"reset",value:function(){for(var e in this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new Gn,this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}},{key:"backend",get:function(){if(null!=this.pendingBackendInit)throw new Error("Backend '".concat(this.backendName,"' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods"));if(null==this.backendInstance){var e=this.initializeBackendsAndReturnBest(),t=e.name;if(e.asyncInit)throw new Error("The highest priority backend '".concat(t,"' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods"));this.setBackend(t)}return this.backendInstance}},{key:"registeredVariables",get:function(){return this.state.registeredVariables}}]),e}();function jn(){var e=dt();if(null==e._tfengine){var t=new ut(e);e._tfengine=new Hn(t)}return ft=e._tfengine.ENV,In=function(){return e._tfengine},e._tfengine}Hn.nextTensorId=0,Hn.nextVariableId=0;var qn=jn();function Xn(e,t){return qn.runKernelFunc((function(r,a){var n=r.add(e,t);return a([e,t]),n}),{a:e,b:t},null,mt)}function Kn(){if("undefined"!=typeof navigator&&null!=navigator){var e=navigator.userAgent||navigator.vendor||window.opera;return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(e)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(e.substr(0,4))}return!1}function Qn(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}var Yn=ht();function Jn(e,t){var r=e;if(je(e))return"string"===t?[]:[e.length];if(!Array.isArray(e))return[];for(var a=[];Array.isArray(r)||je(r)&&"string"!==t;)a.push(r.length),r=r[0];return Array.isArray(e)&&ht().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&function e(t,r,a){if(a=a||[],Array.isArray(t)||je(t)){Ce(r.length>0,(function(){return"Element arr[".concat(a.join("]["),"] should be a primitive, but is an array of ").concat(t.length," elements")})),Ce(t.length===r[0],(function(){return"Element arr[".concat(a.join("]["),"] should have ").concat(r[0]," elements, but has ").concat(t.length," elements")}));for(var n=r.slice(1),i=0;i<t.length;++i)e(t[i],n,a.concat(i))}else Ce(0===r.length,(function(){return"Element arr[".concat(a.join("]["),"] is a primitive, but should be an array/TypedArray of ").concat(r[0]," elements")}))}(e,a,[]),a}function Zn(e,t,r,a){if(null!=e&&("numeric"!==e&&e!==t||"numeric"===e&&"string"===t))throw new Error("Argument '".concat(r,"' passed to '").concat(a,"' must be ").concat(e," tensor, but got ").concat(t," tensor"))}function $n(e,t,r){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"numeric";if(e instanceof Rn)return Zn(a,e.dtype,t,r),e;var n=Je(e);if("string"!==n&&["bool","int32","float32"].indexOf(a)>=0&&(n=a),Zn(a,n,t,r),null==e||!je(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("Argument '".concat(t,"' passed to '").concat(r,"' must be a Tensor or TensorLike, but got '").concat(null==e?"null":e.constructor.name,"'"));var i=Jn(e,n);je(e)||Array.isArray(e)||(e=[e]);var o="string"!==n?xn(e,n):Ie(e,[],!0);return qn.makeTensor(o,i,n)}function ei(e,t,r){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"numeric";if(!Array.isArray(e))throw new Error("Argument ".concat(t," passed to ").concat(r," must be a `Tensor[]` or `TensorLike[]`"));return e.map((function(e,a){return $n(e,"".concat(t,"[").concat(a,"]"),r)}),a)}Yn.registerFlag("DEBUG",(function(){return!1}),(function(e){e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),Yn.registerFlag("IS_BROWSER",(function(){return Qn()})),Yn.registerFlag("IS_NODE",(function(){return"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node})),Yn.registerFlag("IS_CHROME",(function(){return"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)})),Yn.registerFlag("PROD",(function(){return!1})),Yn.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(function(){return Yn.getBool("DEBUG")})),Yn.registerFlag("DEPRECATION_WARNINGS_ENABLED",(function(){return!0})),Yn.registerFlag("IS_TEST",(function(){return!1}));var ti="__op";function ri(e){var t=Object.keys(e);if(1!==t.length)throw new Error("Please provide an object with a single key (operation name) mapping to a function. Got an object with "+t.length+" keys.");var r=t[0],a=e[r];r.endsWith("_")&&(r=r.substring(0,r.length-1)),r+=ti;var n=function(){qn.startScope(r);try{var e=a.apply(void 0,arguments);return lt(e)&&console.error("Cannot return a Promise inside of tidy."),qn.endScope(e),e}catch(t){throw qn.endScope(null),t}};return Object.defineProperty(n,"name",{value:r,configurable:!0}),n}var ai=ri({complex_:function(e,t){var r=$n(e,"real","complex"),a=$n(t,"imag","complex");return Te(r.shape,a.shape,"real and imag shapes, ".concat(r.shape," and ").concat(a.shape,", must match in call to tf.complex().")),qn.runKernelFunc((function(e){return e.complex(r,a)}),{real:r,imag:a},null,Pt)}});function ni(e,t,r,a){if(null==a&&(a=Je(e)),"complex64"===a)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!je(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){it(t);var n=Ae(t),i=Ae(r);Ce(n===i,(function(){return"Based on the provided shape, [".concat(t,"], the tensor should have ").concat(n," values but has ").concat(i)}));for(var o=0;o<r.length;++o){var s=r[o],l=o!==r.length-1||s!==Ae(t.slice(o));Ce(r[o]===t[o]||!l,(function(){return"Error creating a new Tensor. Inferred shape (".concat(r,") does not match the provided shape (").concat(t,"). ")}))}}return je(e)||Array.isArray(e)||(e=[e]),t=t||r,e="string"!==a?xn(e,a):Ie(e,[],!0),qn.makeTensor(e,t,a)}function ii(e,t,r){return ni(e,t,Jn(e,r),r)}var oi={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};function si(e,t){return li.apply(this,arguments)}function li(){return(li=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){var a,n,i,o,s;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:for(a=[],n=[],i=Array.isArray(t)?t.map((function(e){return e.name})):Object.keys(t),o=function(e){var o=i[e],s=Array.isArray(t)?t[e].tensor:t[o];if("float32"!==s.dtype&&"int32"!==s.dtype&&"bool"!==s.dtype&&"string"!==s.dtype&&"complex64"!==s.dtype)throw new Error("Unsupported dtype in weight '".concat(o,"': ").concat(s.dtype));var l={name:o,shape:s.shape,dtype:s.dtype};if("string"===s.dtype){var u=new Promise(function(){var e=_asyncToGenerator(regeneratorRuntime.mark((function e(t){var r,a,n,i,o,l,u;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,s.bytes();case 2:for(r=e.sent,a=r.reduce((function(e,t){return e+t.length}),0)+4*r.length,n=new Uint8Array(a),i=0,o=0;o<r.length;o++)l=r[o],u=new Uint8Array(new Uint32Array([l.length]).buffer),n.set(u,i),i+=4,n.set(l,i),i+=l.length;t(n);case 8:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}());n.push(u)}else n.push(s.data());null!=r&&(l.group=r),a.push(l)},s=0;s<i.length;++s)o(s);return e.t0=hi,e.next=6,Promise.all(n);case 6:return e.t1=e.sent,e.t2=(0,e.t0)(e.t1),e.t3=a,e.abrupt("return",{data:e.t2,specs:e.t3});case 10:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function ui(e,t){var r,a,n={},i=0,o=_createForOfIteratorHelper(t);try{for(o.s();!(a=o.n()).done;){var s=a.value,l=s.name,u=s.dtype,h=s.shape,c=Ae(h),f=void 0;if("quantization"in s){var d=s.quantization;if("uint8"===d.dtype||"uint16"===d.dtype){if(!("min"in d)||!("scale"in d))throw new Error("Weight ".concat(s.name," with quantization ").concat(d.dtype," doesn't have corresponding metadata min and scale."))}else{if("float16"!==d.dtype)throw new Error("Weight ".concat(s.name," has unknown quantization dtype ").concat(d.dtype,". Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'."));if("float32"!==u)throw new Error("Weight ".concat(s.name," is quantized with ").concat(d.dtype," which only supports weights of type float32 not ").concat(u,"."))}var v=oi[d.dtype],p=e.slice(i,i+c*v),g="uint8"===d.dtype?new Uint8Array(p):new Uint16Array(p);if("float32"===u)if("uint8"===d.dtype||"uint16"===d.dtype){f=new Float32Array(g.length);for(var _=0;_<g.length;_++)f[_]=g[_]*d.scale+d.min}else{if("float16"!==d.dtype)throw new Error("Unsupported quantization type ".concat(d.dtype," for weight type float32."));void 0===r&&(r=gi()),f=r(g)}else{if("int32"!==u)throw new Error("Unsupported dtype in weight '".concat(l,"': ").concat(u));if("uint8"!==d.dtype&&"uint16"!==d.dtype)throw new Error("Unsupported quantization type ".concat(d.dtype," for weight type int32."));f=new Int32Array(g.length);for(var m=0;m<g.length;m++)f[m]=Math.round(g[m]*d.scale+d.min)}i+=c*v}else if("string"===u){var y=Ae(s.shape);f=[];for(var b=0;b<y;b++){var x=new Uint32Array(e.slice(i,i+4))[0];i+=4;var k=new Uint8Array(e.slice(i,i+x));f.push(k),i+=x}}else{var w=oi[u],C=e.slice(i,i+c*w);if("float32"===u)f=new Float32Array(C);else if("int32"===u)f=new Int32Array(C);else if("bool"===u)f=new Uint8Array(C);else{if("complex64"!==u)throw new Error("Unsupported dtype in weight '".concat(l,"': ").concat(u));f=new Float32Array(C);for(var T=new Float32Array(f.length/2),S=new Float32Array(f.length/2),I=0;I<T.length;I++)T[I]=f[2*I],S[I]=f[2*I+1];var A=ii(T,h,"float32"),R=ii(S,h,"float32");n[l]=ai(A,R),A.dispose(),R.dispose()}i+=c*w}"complex64"!==u&&(n[l]=ii(f,h,u))}}catch(N){o.e(N)}finally{o.f()}return n}function hi(e){if(null===e)throw new Error("Invalid input value: "+JSON.stringify(e));var t=0,r=[];e.forEach((function(e){if(t+=e.byteLength,r.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error("Unsupported TypedArray subtype: "+e.constructor.name)}));var a=new Uint8Array(t),n=0;return r.forEach((function(e){a.set(new Uint8Array(e.buffer),n),n+=e.byteLength})),a.buffer}var ci="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function fi(e){return ci?Buffer.byteLength(e):new Blob([e]).size}function di(e){if(1===e.length)return e[0];var t=0;e.forEach((function(e){t+=e.byteLength}));var r=new Uint8Array(t),a=0;return e.forEach((function(e){r.set(new Uint8Array(e),a),a+=e.byteLength})),r.buffer}function vi(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);var t=e.split("/");return t[t.length-1]}function pi(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:fi(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:fi(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function gi(){var e=function(){var e=function(e){for(var t=e<<13,r=0;0==(8388608&t);)r-=8388608,t<<=1;return(t&=-8388609)|(r+=947912704)},t=new Uint32Array(2048);t[0]=0;for(var r=1;r<1024;r++)t[r]=e(r);for(var a=1024;a<2048;a++)t[a]=939524096+(a-1024<<13);return t}(),t=function(){var e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(var t=1;t<31;t++)e[t]=t<<23;for(var r=33;r<63;r++)e[r]=2147483648+(r-32<<23);return e}(),r=function(){for(var e=new Uint32Array(64),t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return function(a){for(var n=new ArrayBuffer(4*a.length),i=new Uint32Array(n),o=0;o<a.length;o++){var s=a[o];i[o]=e[r[s>>10]+(1023&s)]+t[s>>10]}return new Float32Array(n)}}var _i=function(){function e(){_classCallCheck(this,e),this.saveRouters=[],this.loadRouters=[]}return _createClass(e,null,[{key:"getInstance",value:function(){return null==e.instance&&(e.instance=new e),e.instance}},{key:"registerSaveRouter",value:function(t){e.getInstance().saveRouters.push(t)}},{key:"registerLoadRouter",value:function(t){e.getInstance().loadRouters.push(t)}},{key:"getSaveHandlers",value:function(t){return e.getHandlers(t,"save")}},{key:"getLoadHandlers",value:function(t,r){return e.getHandlers(t,"load",r)}},{key:"getHandlers",value:function(t,r,a){var n=[];return("load"===r?e.getInstance().loadRouters:e.getInstance().saveRouters).forEach((function(e){var r=e(t,a);null!==r&&n.push(r)})),n}}]),e}(),mi=function(e){return _i.registerSaveRouter(e)},yi=function(e){return _i.registerLoadRouter(e)},bi=function(e){return _i.getSaveHandlers(e)},xi=function(e,t){return _i.getLoadHandlers(e,t)};function ki(){if(!ht().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");var e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function wi(e){var t=e.result;t.createObjectStore("models_store",{keyPath:"modelPath"}),t.createObjectStore("model_info_store",{keyPath:"modelPath"})}var Ci=function(){function e(t){if(_classCallCheck(this,e),this.indexedDB=ki(),null==t||!t)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=t}var t,r;return _createClass(e,[{key:"save",value:(r=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!(t.modelTopology instanceof ArrayBuffer)){e.next=2;break}throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");case 2:return e.abrupt("return",this.databaseAction(this.modelPath,t));case 3:case"end":return e.stop()}}),e,this)}))),function(e){return r.apply(this,arguments)})},{key:"load",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.databaseAction(this.modelPath));case 1:case"end":return e.stop()}}),e,this)}))),function(){return t.apply(this,arguments)})},{key:"databaseAction",value:function(e,t){var r=this;return new Promise((function(e,a){var n=r.indexedDB.open("tensorflowjs",1);n.onupgradeneeded=function(){return wi(n)},n.onsuccess=function(){var i=n.result;if(null==t){var o=i.transaction("models_store","readonly"),s=o.objectStore("models_store").get(r.modelPath);s.onsuccess=function(){if(null==s.result)return i.close(),a(new Error("Cannot find model with path '".concat(r.modelPath,"' in IndexedDB.")));e(s.result.modelArtifacts)},s.onerror=function(e){return i.close(),a(s.error)},o.oncomplete=function(){return i.close()}}else{var l,u=pi(t),h=i.transaction("model_info_store","readwrite"),c=h.objectStore("model_info_store"),f=c.put({modelPath:r.modelPath,modelArtifactsInfo:u});f.onsuccess=function(){var n=(l=i.transaction("models_store","readwrite")).objectStore("models_store").put({modelPath:r.modelPath,modelArtifacts:t,modelArtifactsInfo:u});n.onsuccess=function(){return e({modelArtifactsInfo:u})},n.onerror=function(e){var t=(c=h.objectStore("model_info_store")).delete(r.modelPath);t.onsuccess=function(){return i.close(),a(n.error)},t.onerror=function(e){return i.close(),a(n.error)}}},f.onerror=function(e){return i.close(),a(f.error)},h.oncomplete=function(){null==l?i.close():l.oncomplete=function(){return i.close()}}}},n.onerror=function(e){return a(n.error)}}))}}]),e}();Ci.URL_SCHEME="indexeddb://";var Ti=function(e){return ht().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Ci.URL_SCHEME)?(t=e.slice(Ci.URL_SCHEME.length),new Ci(t)):null;var t};_i.registerSaveRouter(Ti),_i.registerLoadRouter(Ti);var Si=function(){function e(){_classCallCheck(this,e),this.indexedDB=ki()}var t,r;return _createClass(e,[{key:"listModels",value:(r=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t=this;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",new Promise((function(e,r){var a=t.indexedDB.open("tensorflowjs",1);a.onupgradeneeded=function(){return wi(a)},a.onsuccess=function(){var t=a.result,n=t.transaction("model_info_store","readonly"),i=n.objectStore("model_info_store").getAll();i.onsuccess=function(){var t,r={},a=_createForOfIteratorHelper(i.result);try{for(a.s();!(t=a.n()).done;){var n=t.value;r[n.modelPath]=n.modelArtifactsInfo}}catch(o){a.e(o)}finally{a.f()}e(r)},i.onerror=function(e){return t.close(),r(i.error)},n.oncomplete=function(){return t.close()}},a.onerror=function(e){return r(a.error)}})));case 1:case"end":return e.stop()}}),e)}))),function(){return r.apply(this,arguments)})},{key:"removeModel",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(t){var r,a=this;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",(t=(r=t).startsWith(Ci.URL_SCHEME)?r.slice(Ci.URL_SCHEME.length):r,new Promise((function(e,r){var n=a.indexedDB.open("tensorflowjs",1);n.onupgradeneeded=function(){return wi(n)},n.onsuccess=function(){var a,i=n.result,o=i.transaction("model_info_store","readwrite"),s=o.objectStore("model_info_store"),l=s.get(t);l.onsuccess=function(){if(null==l.result)return i.close(),r(new Error("Cannot find model with path '".concat(t,"' in IndexedDB.")));var n=s.delete(t),o=function(){var n=(a=i.transaction("models_store","readwrite")).objectStore("models_store").delete(t);n.onsuccess=function(){return e(l.result.modelArtifactsInfo)},n.onerror=function(e){return r(l.error)}};n.onsuccess=o,n.onerror=function(e){return o(),i.close(),r(l.error)}},l.onerror=function(e){return i.close(),r(l.error)},o.oncomplete=function(){null==a?i.close():a.oncomplete=function(){return i.close()}}},n.onerror=function(e){return r(n.error)}}))));case 1:case"end":return e.stop()}}),e)}))),function(e){return t.apply(this,arguments)})}]),e}(),Ii="tensorflowjs_models",Ai="info",Ri="model_topology",Ni="weight_specs",Ei="weight_data",Fi="model_metadata";function Mi(e){return{info:[Ii,e,Ai].join("/"),topology:[Ii,e,Ri].join("/"),weightSpecs:[Ii,e,Ni].join("/"),weightData:[Ii,e,Ei].join("/"),modelMetadata:[Ii,e,Fi].join("/")}}function Di(e){var t=e.split("/");if(t.length<3)throw new Error("Invalid key format: "+e);return t.slice(1,t.length-1).join("/")}var Oi=function(){function e(t){if(_classCallCheck(this,e),!ht().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==t||!t)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=t,this.keys=Mi(this.modelPath)}var t,r;return _createClass(e,[{key:"save",value:(r=_asyncToGenerator(regeneratorRuntime.mark((function e(t){var r,a,n;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!(t.modelTopology instanceof ArrayBuffer)){e.next=2;break}throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");case 2:return r=JSON.stringify(t.modelTopology),a=JSON.stringify(t.weightSpecs),n=pi(t),e.prev=3,e.abrupt("return",(this.LS.setItem(this.keys.info,JSON.stringify(n)),this.LS.setItem(this.keys.topology,r),this.LS.setItem(this.keys.weightSpecs,a),this.LS.setItem(this.keys.weightData,function(e){if(ci)return Buffer.from(e).toString("base64");for(var t=new Uint8Array(e),r="",a=0,n=t.length;a<n;a++)r+=String.fromCharCode(t[a]);return btoa(r)}(t.weightData)),this.LS.setItem(this.keys.modelMetadata,JSON.stringify({format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,userDefinedMetadata:t.userDefinedMetadata})),{modelArtifactsInfo:n}));case 7:throw e.prev=7,e.t0=e.catch(3),this.LS.removeItem(this.keys.info),this.LS.removeItem(this.keys.topology),this.LS.removeItem(this.keys.weightSpecs),this.LS.removeItem(this.keys.weightData),this.LS.removeItem(this.keys.modelMetadata),new Error("Failed to save model '".concat(this.modelPath,"' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=").concat(n.modelTopologyBytes,", weightSpecsBytes=").concat(n.weightSpecsBytes,", weightDataBytes=").concat(n.weightDataBytes,"."));case 10:case"end":return e.stop()}}),e,this,[[3,7]])}))),function(e){return r.apply(this,arguments)})},{key:"load",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t,r,a,n,i,o,s;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(null!=(t=JSON.parse(this.LS.getItem(this.keys.info)))){e.next=3;break}throw new Error("In local storage, there is no model with name '".concat(this.modelPath,"'"));case 3:if("JSON"===t.modelTopologyType){e.next=5;break}throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");case 5:if(r={},null!=(a=JSON.parse(this.LS.getItem(this.keys.topology)))){e.next=8;break}throw new Error("In local storage, the topology of model '".concat(this.modelPath,"' is missing."));case 8:if(r.modelTopology=a,null!=(n=JSON.parse(this.LS.getItem(this.keys.weightSpecs)))){e.next=12;break}throw new Error("In local storage, the weight specs of model '".concat(this.modelPath,"' are missing."));case 12:if(r.weightSpecs=n,null!=(i=this.LS.getItem(this.keys.modelMetadata))&&(o=JSON.parse(i),r.format=o.format,r.generatedBy=o.generatedBy,r.convertedBy=o.convertedBy,r.userDefinedMetadata=o.userDefinedMetadata),null!=(s=this.LS.getItem(this.keys.weightData))){e.next=18;break}throw new Error("In local storage, the binary weight values of model '".concat(this.modelPath,"' are missing."));case 18:return e.abrupt("return",(r.weightData=function(e){if(ci){var t=Buffer.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}for(var r=atob(e),a=new Uint8Array(r.length),n=0;n<r.length;++n)a.set([r.charCodeAt(n)],n);return a.buffer}(s),r));case 19:case"end":return e.stop()}}),e,this)}))),function(){return t.apply(this,arguments)})}]),e}();Oi.URL_SCHEME="localstorage://";var Li=function(e){return ht().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Oi.URL_SCHEME)?(t=e.slice(Oi.URL_SCHEME.length),new Oi(t)):null;var t};_i.registerSaveRouter(Li),_i.registerLoadRouter(Li);var zi=function(){function e(){_classCallCheck(this,e),Ce(ht().getBool("IS_BROWSER"),(function(){return"Current environment is not a web browser"})),Ce("undefined"==typeof window||void 0!==window.localStorage,(function(){return"Current browser does not appear to support localStorage"})),this.LS=window.localStorage}var t,r;return _createClass(e,[{key:"listModels",value:(r=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t,r,a,n,i;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:for(t={},r=Ii+"/",a="/"+Ai,n=0;n<this.LS.length;++n)(i=this.LS.key(n)).startsWith(r)&&i.endsWith(a)&&(t[Di(i)]=JSON.parse(this.LS.getItem(i)));return e.abrupt("return",t);case 3:case"end":return e.stop()}}),e,this)}))),function(){return r.apply(this,arguments)})},{key:"removeModel",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(t){var r,a,n;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(a=Mi(t=(r=t).startsWith(Oi.URL_SCHEME)?r.slice(Oi.URL_SCHEME.length):r),null!=this.LS.getItem(a.info)){e.next=3;break}throw new Error("Cannot find model at path '".concat(t,"'"));case 3:return n=JSON.parse(this.LS.getItem(a.info)),e.abrupt("return",(this.LS.removeItem(a.info),this.LS.removeItem(a.topology),this.LS.removeItem(a.weightSpecs),this.LS.removeItem(a.weightData),n));case 5:case"end":return e.stop()}}),e,this)}))),function(e){return t.apply(this,arguments)})}]),e}(),Bi=function(){function e(){_classCallCheck(this,e),this.managers={}}return _createClass(e,null,[{key:"getInstance",value:function(){return null==e.instance&&(e.instance=new e),e.instance}},{key:"registerManager",value:function(t,r){Ce(null!=t,(function(){return"scheme must not be undefined or null."})),t.endsWith("://")&&(t=t.slice(0,t.indexOf("://"))),Ce(t.length>0,(function(){return"scheme must not be an empty string."}));var a=e.getInstance();Ce(null==a.managers[t],(function(){return"A model store manager is already registered for scheme '".concat(t,"'.")})),a.managers[t]=r}},{key:"getManager",value:function(e){var t=this.getInstance().managers[e];if(null==t)throw new Error("Cannot find model manager for scheme '".concat(e,"'"));return t}},{key:"getSchemes",value:function(){return Object.keys(this.getInstance().managers)}}]),e}();function Pi(e){if(-1===e.indexOf("://"))throw new Error("The url string provided does not contain a scheme. Supported schemes are: "+Bi.getSchemes().join(","));return{scheme:e.split("://")[0],path:e.split("://")[1]}}function Vi(e,t){return Ui.apply(this,arguments)}function Ui(){return(Ui=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){var a,n,i,o,s,l,u,h,c,f,d=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return a=d.length>2&&void 0!==d[2]&&d[2],Ce(t!==r,(function(){return"Old path and new path are the same: '".concat(t,"'")})),Ce((n=_i.getLoadHandlers(t)).length>0,(function(){return"Copying failed because no load handler is found for source URL ".concat(t,".")})),Ce(n.length<2,(function(){return"Copying failed because more than one (".concat(n.length,") load handlers for source URL ").concat(t,".")})),i=n[0],Ce((o=_i.getSaveHandlers(r)).length>0,(function(){return"Copying failed because no save handler is found for destination URL ".concat(r,".")})),Ce(o.length<2,(function(){return"Copying failed because more than one (".concat(n.length,") save handlers for destination URL ").concat(r,".")})),s=o[0],l=Pi(t).scheme,u=Pi(t).path,h=l===Pi(t).scheme,e.next=12,i.load();case 12:if(c=e.sent,e.t0=a&&h,!e.t0){e.next=17;break}return e.next=17,Bi.getManager(l).removeModel(u);case 17:return e.next=19,s.save(c);case 19:if(f=e.sent,e.t1=a&&!h,!e.t1){e.next=24;break}return e.next=24,Bi.getManager(l).removeModel(u);case 24:return e.abrupt("return",f.modelArtifactsInfo);case 25:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function Wi(){return Gi.apply(this,arguments)}function Gi(){return(Gi=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t,r,a,n,i,o,s;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=Bi.getSchemes(),r={},a=_createForOfIteratorHelper(t),e.prev=2,a.s();case 4:if((n=a.n()).done){e.next=12;break}return i=n.value,e.next=8,Bi.getManager(i).listModels();case 8:for(s in o=e.sent)r[i+"://"+s]=o[s];case 10:e.next=4;break;case 12:e.next=17;break;case 14:e.prev=14,e.t0=e.catch(2),a.e(e.t0);case 17:return e.prev=17,a.f(),e.finish(17);case 20:return e.abrupt("return",r);case 21:case"end":return e.stop()}}),e,null,[[2,14,17,20]])})))).apply(this,arguments)}function Hi(e){return ji.apply(this,arguments)}function ji(){return(ji=_asyncToGenerator(regeneratorRuntime.mark((function e(t){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=Pi(t),e.abrupt("return",Bi.getManager(r.scheme).removeModel(r.path));case 2:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function qi(e,t){return Xi.apply(this,arguments)}function Xi(){return(Xi=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",Vi(t,r,!1));case 1:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function Ki(e,t){return Qi.apply(this,arguments)}function Qi(){return(Qi=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",Vi(t,r,!0));case 1:case"end":return e.stop()}}),e)})))).apply(this,arguments)}var Yi,Ji=function(){function e(){_classCallCheck(this,e)}return _createClass(e,[{key:"fetch",value:function(e){function t(t,r){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}((function(e,t){return fetch(e,t)}))},{key:"now",value:function(){return performance.now()}},{key:"encode",value:function(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error("Browser's encoder only supports utf-8, but got "+t);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}},{key:"decode",value:function(e,t){return new TextDecoder(t).decode(e)}}]),e}();if(ht().get("IS_BROWSER")){ht().setPlatform("browser",new Ji);try{Bi.registerManager(Oi.URL_SCHEME,new zi)}catch(hE){}try{Bi.registerManager(Ci.URL_SCHEME,new Si)}catch(hE){}}function Zi(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"float32",r=arguments.length>2?arguments[2]:void 0;return t=t||"float32",it(e),new Sn(e,t,r)}ht().get("IS_NODE")&&ht().setPlatform("node",new(function(){function e(){_classCallCheck(this,e),this.util=r(5),this.textEncoder=new this.util.TextEncoder}return _createClass(e,[{key:"fetch",value:function(e,t){return null!=ht().global.fetch?ht().global.fetch(e,t):(null==Yi&&(Yi=r(4)),Yi(e,t))}},{key:"now",value:function(){var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}},{key:"encode",value:function(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error("Node built-in encoder only supports utf-8, but got "+t);return this.textEncoder.encode(e)}},{key:"decode",value:function(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}}]),e}()));var $i=ri({cast_:function(e,t){var r=$n(e,"x","cast");if(!Ge(t))throw new Error("Failed to cast to unknown dtype "+t);if("string"===t&&"string"!==r.dtype||"string"!==t&&"string"===r.dtype)throw new Error("Only strings can be casted to strings");return qn.runKernelFunc((function(e){return e.cast(r,t)}),{x:r},null,Lt,{dtype:t})}}),eo=ri({clone_:function(e){var t=$n(e,"x","clone",null);return qn.runKernelFunc((function(){return qn.makeTensorFromDataId(t.dataId,t.shape,t.dtype)}),{x:t},null,kr)}});function to(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];console.log(e.toString(t))}function ro(e){return new Promise((function(e){return setTimeout(e)})).then(e)}jn(),An={buffer:Zi,cast:$i,clone:eo,print:to};var ao=function(){function e(t){if(_classCallCheck(this,e),!ht().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");t.startsWith(e.URL_SCHEME)&&(t=t.slice(e.URL_SCHEME.length)),null!=t&&0!==t.length||(t="model"),this.modelTopologyFileName=t+".json",this.weightDataFileName=t+".weights.bin"}var t;return _createClass(e,[{key:"save",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(t){var r,a,n,i;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if("undefined"!=typeof document){e.next=2;break}throw new Error("Browser downloads are not supported in this environment since `document` is not present");case 2:if(r=window.URL.createObjectURL(new Blob([t.weightData],{type:"application/octet-stream"})),!(t.modelTopology instanceof ArrayBuffer)){e.next=5;break}throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");case 5:return a=window.URL.createObjectURL(new Blob([JSON.stringify({modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,weightsManifest:[{paths:["./"+this.weightDataFileName],weights:t.weightSpecs}]})],{type:"application/json"})),(n=null==this.jsonAnchor?document.createElement("a"):this.jsonAnchor).download=this.modelTopologyFileName,n.href=a,e.next=10,ro((function(){return n.dispatchEvent(new MouseEvent("click"))}));case 10:if(null==t.weightData){e.next=16;break}return(i=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor).download=this.weightDataFileName,i.href=r,e.next=16,ro((function(){return i.dispatchEvent(new MouseEvent("click"))}));case 16:return e.abrupt("return",{modelArtifactsInfo:pi(t)});case 17:case"end":return e.stop()}}),e,this)}))),function(e){return t.apply(this,arguments)})}]),e}();ao.URL_SCHEME="downloads://";var no=function(){function e(t){if(_classCallCheck(this,e),null==t||t.length<1)throw new Error("When calling browserFiles, at least 1 file is required, but received "+t);this.files=t}var t;return _createClass(e,[{key:"load",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t,r,a=this;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=this.files[0],r=this.files.slice(1),e.abrupt("return",new Promise((function(e,n){var i=new FileReader;i.onload=function(i){var o=JSON.parse(i.target.result),s=o.modelTopology;if(null!=s){0===r.length&&e({modelTopology:s});var l=o.weightsManifest;if(null!=l){var u;try{u=a.checkManifestAndWeightFiles(l,r)}catch(hE){return void n(hE)}var h=[],c=[],f=[];l.forEach((function(e){e.paths.forEach((function(e){c.push(e),f.push(null)})),h.push.apply(h,_toConsumableArray(e.weights))})),l.forEach((function(t){t.paths.forEach((function(t){var r=new FileReader;r.onload=function(r){var a=r.target.result,n=c.indexOf(t);f[n]=a,-1===f.indexOf(null)&&e({modelTopology:s,weightSpecs:h,weightData:di(f),format:o.format,generatedBy:o.generatedBy,convertedBy:o.convertedBy,userDefinedMetadata:o.userDefinedMetadata})},r.onerror=function(e){return n("Failed to weights data from file of path '".concat(t,"'."))},r.readAsArrayBuffer(u[t])}))}))}else n(new Error("weightManifest field is missing from file "+t.name))}else n(new Error("modelTopology field is missing from file "+t.name))},i.onerror=function(e){return n("Failed to read model topology and weights manifest JSON from file '".concat(t.name,"'. BrowserFiles supports loading Keras-style tf.Model artifacts only."))},i.readAsText(t)})));case 2:case"end":return e.stop()}}),e,this)}))),function(){return t.apply(this,arguments)})},{key:"checkManifestAndWeightFiles",value:function(e,t){var r,a=[],n=t.map((function(e){return vi(e.name)})),i={},o=_createForOfIteratorHelper(e);try{for(o.s();!(r=o.n()).done;){r.value.paths.forEach((function(e){var r=vi(e);if(-1!==a.indexOf(r))throw new Error("Duplicate file basename found in weights manifest: '".concat(r,"'"));if(a.push(r),-1===n.indexOf(r))throw new Error("Weight file with basename '".concat(r,"' is not provided."));i[e]=t[n.indexOf(r)]}))}}catch(hE){o.e(hE)}finally{o.f()}if(a.length!==t.length)throw new Error("Mismatch in the number of files in weights manifest (".concat(a.length,") and the number of weight files provided (").concat(t.length,")."));return i}}]),e}();function io(e){return new no(e)}function oo(e,t,r,a){!function(e){Ce(null!=e&&Array.isArray(e)&&e.length>0,(function(){return"promises must be a none empty array"}))}(e),function(e,t){Ce(e>=0&&e<=1,(function(){return"Progress fraction must be in range [0, 1], but got startFraction "+e})),Ce(t>=0&&t<=1,(function(){return"Progress fraction must be in range [0, 1], but got endFraction "+t})),Ce(t>=e,(function(){return"startFraction must be no more than endFraction, but got startFraction ".concat(e," and endFraction ")+t}))}(r=null==r?0:r,a=null==a?1:a);var n=0;return Promise.all(e.map((function(i){return i.then((function(i){var o=r+ ++n/e.length*(a-r);return t(o),i})),i})))}function so(e,t){return lo.apply(this,arguments)}function lo(){return(lo=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){var a,n,i;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(null==r&&(r={}),a=null==r.fetchFunc?ht().platform.fetch:r.fetchFunc,n=t.map((function(e){return a(e,r.requestInit,{isBinary:!0})})),null!=r.onProgress){e.next=9;break}return e.next=6,Promise.all(n);case 6:e.t0=e.sent,e.next=12;break;case 9:return e.next=11,oo(n,r.onProgress,0,.5);case 11:e.t0=e.sent;case 12:if(i=e.t0.map((function(e){return e.arrayBuffer()})),null!=r.onProgress){e.next=19;break}return e.next=16,Promise.all(i);case 16:e.t1=e.sent,e.next=22;break;case 19:return e.next=21,oo(i,r.onProgress,.5,1);case 21:e.t1=e.sent;case 22:return e.abrupt("return",e.t1);case 23:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function uo(e){return ho.apply(this,arguments)}function ho(){return(ho=_asyncToGenerator(regeneratorRuntime.mark((function e(t){var r,a,n,i=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=i.length>1&&void 0!==i[1]?i[1]:"",a=i.length>2?i[2]:void 0,n=i.length>3?i[3]:void 0,e.abrupt("return",co((function(e){return so(e,{requestInit:n})}))(t,r,a));case 4:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function co(e){return function(){var t=_asyncToGenerator(regeneratorRuntime.mark((function t(r){var a,n,i,o,s,l,u,h,c,f,d,v,p=arguments;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(a=p.length>1&&void 0!==p[1]?p[1]:"",n=p.length>2?p[2]:void 0,i=r.map((function(){return!1})),o={},s=null!=n?n.map((function(){return!1})):[],l=[],r.forEach((function(e,t){var r=0;e.weights.forEach((function(e){var a=oi["quantization"in e?e.quantization.dtype:e.dtype]*Ae(e.shape),u=function(){i[t]=!0,null==o[t]&&(o[t]=[]),o[t].push({manifestEntry:e,groupOffset:r,sizeBytes:a})};null!=n?n.forEach((function(t,r){t===e.name&&(u(),s[r]=!0)})):u(),l.push(e.name),r+=a}))})),s.every((function(e){return e}))){t.next=6;break}throw u=n.filter((function(e,t){return!s[t]})),new Error("Could not find weights in manifest with names: "+u.join(", ")+". \nManifest JSON has weights with names: "+l.join(", ")+".");case 6:return h=i.reduce((function(e,t,r){return t&&e.push(r),e}),[]),c=[],h.forEach((function(e){r[e].paths.forEach((function(e){var t=a+(a.endsWith("/")?"":"/")+e;c.push(t)}))})),t.next=10,e(c);case 10:return f=t.sent,d={},v=0,t.abrupt("return",(h.forEach((function(e){for(var t=r[e].paths.length,a=0,n=0;n<t;n++)a+=f[v+n].byteLength;for(var i=new ArrayBuffer(a),s=new Uint8Array(i),l=0,u=0;u<t;u++){var h=new Uint8Array(f[v+u]);s.set(h,l),l+=h.byteLength}o[e].forEach((function(e){var t=ui(i.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(var r in t)d[r]=t[r]})),v+=t})),d));case 14:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()}_i.registerSaveRouter((function(e){return ht().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(ao.URL_SCHEME)?function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"model";return new ao(e)}(e.slice(ao.URL_SCHEME.length)):null}));var fo=function(){function e(t,r){if(_classCallCheck(this,e),this.DEFAULT_METHOD="POST",null==r&&(r={}),this.weightPathPrefix=r.weightPathPrefix,this.onProgress=r.onProgress,this.weightUrlConverter=r.weightUrlConverter,null!=r.fetchFunc?(Ce("function"==typeof r.fetchFunc,(function(){return"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"})),this.fetch=r.fetchFunc):this.fetch=ht().platform.fetch,Ce(null!=t&&t.length>0,(function(){return"URL path for http must not be null, undefined or empty."})),Array.isArray(t)&&Ce(2===t.length,(function(){return"URL paths for http must have a length of 2, (actual length is ".concat(t.length,").")})),this.path=t,null!=r.requestInit&&null!=r.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=r.requestInit||{}}var t,r,a;return _createClass(e,[{key:"save",value:(a=_asyncToGenerator(regeneratorRuntime.mark((function e(t){var r,a;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!(t.modelTopology instanceof ArrayBuffer)){e.next=2;break}throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");case 2:return(r=Object.assign({method:this.DEFAULT_METHOD},this.requestInit)).body=new FormData,r.body.append("model.json",new Blob([JSON.stringify({modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,userDefinedMetadata:t.userDefinedMetadata,weightsManifest:[{paths:["./model.weights.bin"],weights:t.weightSpecs}]})],{type:"application/json"}),"model.json"),null!=t.weightData&&r.body.append("model.weights.bin",new Blob([t.weightData],{type:"application/octet-stream"}),"model.weights.bin"),e.next=6,this.fetch(this.path,r);case 6:if(!(a=e.sent).ok){e.next=9;break}return e.abrupt("return",{modelArtifactsInfo:pi(t),responses:[a]});case 9:throw new Error("BrowserHTTPRequest.save() failed due to HTTP response status "+a.status+".");case 10:case"end":return e.stop()}}),e,this)}))),function(e){return a.apply(this,arguments)})},{key:"load",value:(r=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t,r,a,n,i,o,s,l,u,h,c,f,d,v,p;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.fetch(this.path,this.requestInit);case 2:if((t=e.sent).ok){e.next=5;break}throw new Error("Request to ".concat(this.path," failed with status code ")+t.status+". Please verify this URL points to the model JSON of the model to load.");case 5:return e.prev=5,e.next=8,t.json();case 8:r=e.sent,e.next=15;break;case 11:throw e.prev=11,e.t0=e.catch(5),a="Failed to parse model JSON of response from ".concat(this.path,"."),this.path.endsWith(".pb")?a+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":a+=" Please make sure the server is serving valid JSON for this request.",new Error(a);case 15:if(n=r.modelTopology,i=r.weightsManifest,o=r.generatedBy,s=r.convertedBy,l=r.format,u=r.userDefinedMetadata,null!=n||null!=i){e.next=18;break}throw new Error("The JSON from HTTP path ".concat(this.path," contains neither model topology or manifest for weights."));case 18:if(null==i){e.next=25;break}return e.next=21,this.loadWeights(i);case 21:f=e.sent,d=_slicedToArray(f,2),h=d[0],c=d[1];case 25:return v={modelTopology:n,weightSpecs:h,weightData:c,userDefinedMetadata:u,generatedBy:o,convertedBy:s,format:l},p=r.modelInitializer,e.abrupt("return",(p&&(v.modelInitializer=p),v));case 27:case"end":return e.stop()}}),e,this,[[5,11]])}))),function(){return r.apply(this,arguments)})},{key:"loadWeights",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(t){var r,a,n,i,o,s,l,u,h,c,f,d,v,p,g,_,m,y;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:r=Array.isArray(this.path)?this.path[1]:this.path,x=void 0,k=void 0,x=(b=r).lastIndexOf("/"),k=b.lastIndexOf("?"),a=[b.substring(0,x)+"/",k>x?b.substring(k):""],n=_slicedToArray(a,2),i=n[0],o=n[1],s=this.weightPathPrefix||i,l=[],u=_createForOfIteratorHelper(t);try{for(u.s();!(h=u.n()).done;)c=h.value,l.push.apply(l,_toConsumableArray(c.weights))}catch(hE){u.e(hE)}finally{u.f()}f=[],d=[],v=_createForOfIteratorHelper(t);try{for(v.s();!(p=v.n()).done;){g=p.value,_=_createForOfIteratorHelper(g.paths);try{for(_.s();!(m=_.n()).done;)y=m.value,null!=this.weightUrlConverter?d.push(this.weightUrlConverter(y)):f.push(s+y+o)}catch(hE){_.e(hE)}finally{_.f()}}}catch(hE){v.e(hE)}finally{v.f()}if(e.t0=this.weightUrlConverter,!e.t0){e.next=16;break}return e.t1=f.push,e.t2=f,e.t3=_toConsumableArray,e.next=13,Promise.all(d);case 13:e.t4=e.sent,e.t5=(0,e.t3)(e.t4),e.t1.apply.call(e.t1,e.t2,e.t5);case 16:return e.t6=l,e.t7=di,e.next=20,so(f,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress});case 20:return e.t8=e.sent,e.t9=(0,e.t7)(e.t8),e.abrupt("return",[e.t6,e.t9]);case 23:case"end":return e.stop()}var b,x,k}),e,this)}))),function(e){return t.apply(this,arguments)})}]),e}();function vo(e){return null!=e.match(fo.URL_SCHEME_REGEX)}fo.URL_SCHEME_REGEX=/^https?:\/\//;var po=function(e,t){if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;return(Array.isArray(e)?e.every((function(e){return vo(e)})):vo(e))?go(e,t):null};function go(e,t){return new fo(e,t)}function _o(e,t){return go(e,t)}_i.registerSaveRouter(po),_i.registerLoadRouter(po);var mo=function(){function e(t){_classCallCheck(this,e),this.modelArtifacts=t}var t;return _createClass(e,[{key:"load",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.modelArtifacts);case 1:case"end":return e.stop()}}),e,this)}))),function(){return t.apply(this,arguments)})}]),e}(),yo=function(){function e(t){_classCallCheck(this,e),this.saveHandler=t}var t;return _createClass(e,[{key:"save",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.saveHandler(t));case 1:case"end":return e.stop()}}),e,this)}))),function(e){return t.apply(this,arguments)})}]),e}();function bo(e,t,r,a){return 1===arguments.length?null!=e.modelTopology||null!=e.weightSpecs?new mo(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new mo({modelTopology:e})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new mo({modelTopology:e,weightSpecs:t,weightData:r,trainingConfig:a}))}function xo(e){return new yo(e)}var ko,wo=ri({reshape_:function(e,t){var r=$n(e,"x","reshape",null);return qn.runKernelFunc((function(e,a){return t=ze(t,r.size),Ce(r.size===Ae(t),(function(){return"new shape and old shape must have the same number of elements."})),a([r]),e.reshape(r,t)}),{x:r},null,va,{shape:t})}}),Co=ri({matMul_:function(e,t){var r,a=arguments.length>2&&void 0!==arguments[2]&&arguments[2],n=arguments.length>3&&void 0!==arguments[3]&&arguments[3],i=$n(e,"a","matMul"),o=$n(t,"b","matMul");return r=_slicedToArray(Pn(i,o),2),i=r[0],o=r[1],qn.runKernelFunc((function(e,t){t([i,o]);var r=a?i.shape[i.rank-2]:i.shape[i.rank-1],s=n?o.shape[o.rank-1]:o.shape[o.rank-2],l=a?i.shape[i.rank-1]:i.shape[i.rank-2],u=n?o.shape[o.rank-2]:o.shape[o.rank-1],h=i.shape.slice(0,-2),c=o.shape.slice(0,-2),f=Ae(h),d=Ae(c);Ce(i.rank>=2&&o.rank>=2&&(f===d||1===f||1===d),(function(){return"Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (".concat(h,") and (").concat(c,").")})),Ce(r===s,(function(){return"Error in matMul: inner shapes (".concat(r,") and (").concat(s,") of Tensors with shapes ").concat(i.shape," and ").concat(o.shape," and transposeA=").concat(a," and transposeB=").concat(n," must match.")}));var v=(f>d?h:c).concat([l,u]),p=wo(i,a?[f,r,l]:[f,l,r]),g=wo(o,n?[d,u,s]:[d,s,u]),_=e.batchMatMul(p,g,a,n);return wo(_,v)}),{a:i,b:o},null,Mt,{transposeA:a,transposeB:n})}}),To=ri({oneHot_:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;if(t<2)throw new Error("Error in oneHot: depth must be >=2, but it is "+t);var n=$n(e,"indices","oneHot","int32"),i=[].concat(_toConsumableArray(n.shape),[t]);return qn.runKernelFunc((function(e,o){return o([n]),wo(e.oneHot(wo(n,[n.size]),t,r,a),i)}),{indices:n},null,na,{depth:t,onValue:r,offValue:a})}}),So=ri({transpose_:function(e,t){var r=$n(e,"x","transpose");return null==t&&(t=r.shape.map((function(e,t){return t})).reverse()),Ce(r.rank===t.length,(function(){return"Error in transpose: rank of input ".concat(r.rank," must match length of perm ").concat(t,".")})),t.forEach((function(e){Ce(e>=0&&e<r.rank,(function(){return"All entries in 'perm' must be between 0 and "+(r.rank-1)+" but got "+t}))})),r.rank<=1?r.clone():qn.runKernelFunc((function(e){return e.transpose(r,t)}),{x:r},null,qa,{perm:t})}}),Io=ri({confusionMatrix_:function(e,t,r){var a=$n(e,"labels","confusionMatrix"),n=$n(t,"predictions","confusionMatrix");Ce(null==r||r>0&&Number.isInteger(r),(function(){return"If provided, numClasses must be a positive integer, but got "+r})),Ce(1===a.rank,(function(){return"Expected the rank of labels to be 1, but got "+a.rank})),Ce(1===n.rank,(function(){return"Expected the rank of predictions to be 1, but got "+n.rank})),Ce(a.shape[0]===n.shape[0],(function(){return"Mismatch in the number of examples: ".concat(a.shape[0]," vs. ").concat(n.shape[0],". Labels and predictions should have the same number of elements.")})),Ce(r>0&&Number.isInteger(r),(function(){return"numClasses is required to be a positive integer, but got "+r}));var i=To($i(a,"int32"),r),o=To($i(n,"int32"),r),s=So(i),l=Co(s,o);return $i(l,"int32")}});function Ao(e,t,r){if(Se(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");var a=Jn(e,r);if(3!==a.length&&1!==a.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===a.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return ni(e,t,a,r)}function Ro(e,t){return No.apply(this,arguments)}function No(){return(No=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){var a,n,i,o,s,l,u,h,c,f,d,v,p,g,_,m,y;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(a=$n(t,"img","toPixels"),t instanceof Rn||(a=$i(n=a,"int32"),n.dispose()),2===a.rank||3===a.rank){e.next=4;break}throw new Error("toPixels only supports rank 2 or 3 tensors, got rank ".concat(a.rank,"."));case 4:if(i=a.shape.slice(0,2),o=_slicedToArray(i,2),s=o[0],l=o[1],!((u=2===a.rank?1:a.shape[2])>4||2===u)){e.next=7;break}throw new Error("toPixels only supports depth of size 1, 3 or 4 but got "+u);case 7:if("float32"===a.dtype||"int32"===a.dtype){e.next=9;break}throw new Error("Unsupported type for toPixels: ".concat(a.dtype,". Please use float32 or int32 tensors."));case 9:return e.next=11,a.data();case 11:h=e.sent,c="float32"===a.dtype?255:1,f=new Uint8ClampedArray(l*s*4),d=0;case 15:if(!(d<s*l)){e.next=36;break}v=[0,0,0,255],p=0;case 18:if(!(p<u)){e.next=31;break}if(g=h[d*u+p],"float32"!==a.dtype){e.next=25;break}if(!(g<0||g>1)){e.next=23;break}throw new Error("Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ".concat(g,"."));case 23:e.next=27;break;case 25:if("int32"!==a.dtype||!(g<0||g>255)){e.next=27;break}throw new Error("Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ".concat(g,"."));case 27:1===u?(v[0]=g*c,v[1]=g*c,v[2]=g*c):v[p]=g*c;case 28:p++,e.next=18;break;case 31:f[(_=4*d)+0]=Math.round(v[0]),f[_+1]=Math.round(v[1]),f[_+2]=Math.round(v[2]),f[_+3]=Math.round(v[3]);case 33:++d,e.next=15;break;case 36:return null!=r&&(r.width=l,r.height=s,m=r.getContext("2d"),y=new ImageData(f,l,s),m.putImageData(y,0,0)),e.abrupt("return",(a!==t&&a.dispose(),f));case 38:case"end":return e.stop()}}),e)})))).apply(this,arguments)}var Eo=ri({fromPixels_:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:3;if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");var r=!1,a=!1,n=!1,i=!1,o=!1;if(e.data instanceof Uint8Array)r=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)a=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)n=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)i=!0;else{if(null==e.getContext)throw new Error("pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was "+e.constructor.name);o=!0}if(n){var s=2;if(n&&e.readyState<s)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.")}if(null!=on(Za,qn.backendName))return qn.runKernel(Za,{pixels:e},{numChannels:t});var l,u,h=n?[e.videoWidth,e.videoHeight]:[e.width,e.height],c=_slicedToArray(h,2),f=c[0],d=c[1];if(o?l=e.getContext("2d").getImageData(0,0,f,d).data:a||r?l=e.data:(i||n)&&(null==ko&&(ko=document.createElement("canvas").getContext("2d")),ko.canvas.width=f,ko.canvas.height=d,ko.drawImage(e,0,0,f,d),l=ko.getImageData(0,0,f,d).data),4===t)u=new Int32Array(l);else{var v=f*d;u=new Int32Array(v*t);for(var p=0;p<v;p++)for(var g=0;g<t;++g)u[p*t+g]=l[4*p+g]}return Ao(u,[d,f,t],"int32")}});function Fo(e,t){if(e.rank<1)throw new Error("tf.gatherND() expects the input to be rank 1 or higher, but the rank was ".concat(e.rank,"."));if(t.rank<1)throw new Error("tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ".concat(t.rank,"."));if("int32"!==t.dtype)throw new Error("tf.gatherND() expects the indices to be int32 type, but the dtype was ".concat(t.dtype,"."));if(t.shape[t.rank-1]>e.rank)throw new Error("index innermost dimension length must be <= tensor rank; saw: ".concat(t.shape[t.rank-1]," vs. ").concat(e.rank));if(0===e.size)throw new Error("Requested more than 0 entries, but input is empty. Input shape: ".concat(e.shape,"."));for(var r=t.shape,a=r[r.length-1],n=1,i=0;i<r.length-1;++i)n*=r[i];var o=e.shape,s=r.slice();s.pop();for(var l=1,u=a;u<e.rank;++u)l*=o[u],s.push(o[u]);var h=[].concat(_toConsumableArray(et(e.shape).map((function(e){return e/l}))),[1]).slice(0,a);return[s,n,l,h]}function Mo(e,t,r){var a=t.rank>1?t.shape[t.rank-1]:1,n=t.rank>1?t.rank-1:1,i="Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: "+r.shape+", indices.shape: ".concat(t.shape,", shape: ").concat(e)+", sliceDim: ".concat(a,", and batchDim: ").concat(n,".");if(r.rank<n)throw new Error(i+" update.rank < ".concat(n,". "));if(e.length<a+(r.rank-n))throw new Error(i+" Output shape length < "+(a+(r.rank-n)));if(r.rank!==n+e.length-a)throw new Error(i+" update.rank != "+(n+e.length-a));for(var o=0;o<n;++o)if(r.shape[o]!==t.shape[o])throw new Error(i+" updates.shape[".concat(o,"] (").concat(r.shape[o],") != indices.shape[").concat(o,"] (").concat(t.shape[o],")."));for(var s=0;s<r.rank-n;++s)if(r.shape[s+n]!==e[s+a])throw new Error(i+" updates.shape[".concat(s+n,"] (").concat(r.shape[s+n],") != shape[").concat(s+n,"] (").concat(e[s+n],")"))}function Do(e,t,r){if(t.rank<1)throw new Error("tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ".concat(t.rank,"."));if(e.rank<1)throw new Error("tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ".concat(e.rank,"."));if("int32"!==t.dtype)throw new Error("The dtype of 'indices' should be int32, but got dtype: "+t.dtype);if(r.length<1)throw new Error("Output rank must be greater or equal to 1, but got shape: "+r);if(0===r.length){if(0===t.size)throw new Error("Indices specified for empty output. indices shape: "+t.shape);if(0===e.size)throw new Error("Updates specified for empty output. updates shape: "+e.shape)}Mo(r,t,e)}function Oo(e,t,r){for(var a=t.shape.length,n=a>1?t.shape[a-1]:1,i=r.length,o=1,s=n;s<i;++s)o*=r[s];var l=n<1?1:n;return{sliceRank:n,numUpdates:Ae(t.shape)/l,sliceSize:o,strides:[].concat(_toConsumableArray(et(r.slice(0,n))),[1]),outputSize:Ae(r)}}function Lo(e,t,r){var a=e.shape.length;Ce(a===t.length,(function(){return"Error in slice".concat(a,"D: Length of begin ").concat(t," must match the rank of the array (").concat(a,").")})),Ce(a===r.length,(function(){return"Error in slice".concat(a,"D: Length of size ").concat(r," must match the rank of the array (").concat(a,").")}));for(var n=function(n){Ce(t[n]+r[n]<=e.shape[n],(function(){return"Error in slice".concat(a,"D: begin[").concat(n,"] + size[").concat(n,"] (").concat(t[n]+r[n],") would overflow input.shape[").concat(n,"] (").concat(e.shape[n],")")}))},i=0;i<a;++i)n(i)}function zo(e){for(var t=[],r=0;e>0;)1&e&&t.push(r),e/=2,r++;return t}function Bo(e,t,r){for(var a=[],n=0;n<e.length;n++)a[n]=Math.ceil((t[n]-e[n])/r[n]);return a}function Po(e,t,r,a){for(var n=_toConsumableArray(e),i=n.length;i<a.length;i++)n.push(1);for(var o=0;o<r;o++)0===o?n[t]=1:(n.splice(t,0,1),n.pop());return n}function Vo(e,t,r){return r<=e?r:r-(t-1)}function Uo(e,t){for(var r=[],a=0;a<e;a++)r.push(t+a);return r}function Wo(e,t,r,a,n,i,o,s,l){var u=e.length,h=new Array(u),c=new Array(u),f=new Array(u);if(t.length&&r>0){var d=t[0],v=r+1;h=Go(o,d,v,a,e),c=Ho(s,d,v,n,e),f=Po(i,d,v,e)}else for(var p=0;p<u;p++)h[p]=qo(o,a,i,e,p,l),c[p]=Xo(s,n,i,e,p,l),f[p]=jo(i,p,l);return{begin:h,end:c,strides:f}}function Go(e,t,r,a,n){for(var i=_toConsumableArray(n),o=Uo(r,t),s=0;s<i.length;s++)if(o.indexOf(s)>-1)i[s]=0;else{var l=Vo(t,r,s),u=a[l];e&1<<l&&(u=0),i[s]=u}return i}function Ho(e,t,r,a,n){for(var i=_toConsumableArray(n),o=Uo(r,t),s=0;s<i.length;s++)if(o.indexOf(s)>-1)i[s]=Number.MAX_SAFE_INTEGER;else{var l=Vo(t,r,s),u=a[l];e&1<<l&&(u=Number.MAX_SAFE_INTEGER),i[s]=u}for(var h=0;h<i.length;h++){var c=n[h];i[h]<0&&(i[h]+=c),i[h]=ye(0,i[h],n[h])}return i}function jo(e,t,r){var a=e[t];return(r&1<<t||null==a)&&(a=1),a}function qo(e,t,r,a,n,i){var o=t[n];(e&1<<n||i&1<<n||null==o)&&(o=(r[n]||1)>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);var s=a[n];return o<0&&(o+=s),o=ye(0,o,s-1)}function Xo(e,t,r,a,n,i){var o=t[n],s=r[n]||1;(e&1<<n||i&1<<n||null==o)&&(o=s>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);var l=a[n];return o<0&&(o+=l),o=s>0?ye(0,o,l):ye(-1,o,l-1)}function Ko(e,t,r){for(var a=r.length,n=0;n<r.length;n++)if(r[n]>1){a=n;break}for(var i=a+1;i<r.length;i++)if(t[i]>0||r[i]!==e[i])return!1;return!0}function Qo(e,t){for(var r=e.length>0?e[e.length-1]:1,a=0;a<e.length-1;a++)r+=e[a]*t[a];return r}function Yo(e,t,r){var a,n,i=e.shape.length;return(a="number"==typeof t?[t].concat(_toConsumableArray(new Array(i-1).fill(0))):t.length<i?t.concat(new Array(i-t.length).fill(0)):t.slice()).forEach((function(e){Ce(-1!==e,(function(){return"slice() does not support negative begin indexing."}))})),n=(n=null==r?new Array(i).fill(-1):"number"==typeof r?[r].concat(_toConsumableArray(new Array(i-1).fill(-1))):r.length<i?r.concat(new Array(i-r.length).fill(-1)):r).map((function(t,r){return t>=0?t:(Ce(-1===t,(function(){return"Negative size values should be exactly -1 but got ".concat(t," for the slice() size at index ").concat(r,".")})),e.shape[r]-a[r])})),[a,n]}var Jo=function(){function e(){_classCallCheck(this,e)}return _createClass(e,[{key:"getClassName",value:function(){return this.constructor.className}}],[{key:"fromConfig",value:function(e,t){return new e(t)}}]),e}(),Zo=function(){function e(){_classCallCheck(this,e),this.classNameMap={}}return _createClass(e,null,[{key:"getMap",value:function(){return null==e.instance&&(e.instance=new e),e.instance}},{key:"register",value:function(t){e.getMap().classNameMap[t.className]=[t,t.fromConfig]}}]),e}();function $o(e){Ce(null!=e.className,(function(){return"Class being registered does not have the static className property defined."})),Ce("string"==typeof e.className,(function(){return"className is required to be a string, but got type "+typeof e.className})),Ce(e.className.length>0,(function(){return"Class being registered has an empty-string as its className, which is disallowed."})),Zo.register(e)}var es=.1;function ts(e,t,r){return null==r&&(r=rs()),as(e,t,(function(e,t){return ss(e,t,r)}))}function rs(){return 32===qn.backend.floatPrecision()?.001:es}function as(e,t,r){var a=!0;if((je(e)||je(t))&&(a=!1),je(e)&&je(t)&&(a=!0),a){var n=e.constructor.name,i=t.constructor.name;if(n!==i)throw new Error("Arrays are of different type. Actual: ".concat(n,". Expected: ")+i)}if(Array.isArray(e)&&Array.isArray(t)){var o=Jn(e),s=Jn(t);if(!Ne(o,s))throw new Error("Arrays have different shapes. Actual: [".concat(o,"]. Expected: [").concat(s,"]"))}var l=je(e)?e:Ie(e),u=je(t)?t:Ie(t);if(l.length!==u.length)throw new Error("Arrays have different lengths actual: ".concat(l.length," vs expected: ").concat(u.length,".\nActual:   ").concat(l,".\nExpected: ").concat(u,"."));for(var h=0;h<u.length;++h){var c=l[h],f=u[h];if(!r(c,f))throw new Error("Arrays differ: actual[".concat(h,"] = ").concat(c,", expected[").concat(h,"] = ").concat(f,".\nActual:   ").concat(l,".\nExpected: ").concat(u,"."))}}function ns(e,t){e().then((function(){return t.fail()}),(function(){return t()}))}function is(e,t){var r="string"==typeof t||"number"==typeof t||"boolean"==typeof t?[t]:t;return Ke(e)||Ke(e[0])||Ke(t)||Ke(t[0])?as(e,r,(function(e,t){return e==t})):as(e,t,(function(e,t){return ss(e,t,0)}))}function os(e,t,r){if(null==r&&(r=rs()),!ss(e,t,r))throw new Error("Numbers differ: actual === ".concat(e,", expected === ").concat(t))}function ss(e,t,r){return!isFinite(e)&&!isFinite(t)||!(isNaN(e)||isNaN(t)||Math.abs(e-t)>r)}function ls(e,t,r){for(var a=0;a<e.length;a++)if(e[a]<t||e[a]>r)throw new Error("Value out of range:".concat(e[a]," low: ").concat(t,", high: ").concat(r))}function us(e,t){expect(new Float32Array(e)).toEqual(new Float32Array(t))}var hs="2.7.0";function cs(){ht().set("PROD",!0)}function fs(){ht().set("DEBUG",!0)}function ds(){ht().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")}function vs(e){ht().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function ps(){qn.disposeVariables()}function gs(){return qn}function _s(){return qn.memory()}function ms(e){return qn.profile(e)}function ys(e,t){return qn.tidy(e,t)}function bs(e){Wn(e).forEach((function(e){return e.dispose()}))}function xs(e){return qn.keep(e)}function ks(e){return qn.time(e)}function ws(e){return qn.setBackend(e)}function Cs(){return qn.ready()}function Ts(){return qn.backendName}function Ss(e){qn.removeBackend(e)}function Is(e){return qn.findBackend(e)}function As(e){return qn.findBackendFactory(e)}function Rs(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return qn.registerBackend(e,t,r)}function Ns(){return qn.backend}function Es(e,t){ht().setPlatform(e,t)}var Fs=ri({add_:function(e,t){var r,a=$n(e,"a","add"),n=$n(t,"b","add");return r=_slicedToArray(Pn(a,n),2),a=r[0],n=r[1],qn.runKernelFunc((function(e,t){var r=e.add(a,n);return t([a,n]),r}),{a:a,b:n},null,mt)}}),Ms=ri({floorDiv_:function(e,t){var r,a=$n(e,"a","floorDiv"),n=$n(t,"b","floorDiv");return r=_slicedToArray(Pn(a,n),2),a=r[0],n=r[1],qn.runKernelFunc((function(e,t){var r=e.floorDiv(a,n);return t([a,n]),r}),{a:a,b:n},null,gr)}}),Ds=ri({div_:function(e,t){var r,a=$n(e,"a","div"),n=$n(t,"b","div");return r=_slicedToArray(Pn(a,n),2),a=r[0],n=r[1],"int32"===a.dtype&&"int32"===n.dtype?Ms(a,n):qn.runKernelFunc((function(e,t){var r=e.realDivide(a,n);return t([a,n]),r}),{a:a,b:n},null,ir,{})}}),Os=ri({mul_:function(e,t){var r,a=$n(e,"a","mul"),n=$n(t,"b","mul");return r=_slicedToArray(Pn(a,n),2),a=r[0],n=r[1],qn.runKernelFunc((function(e,t){var r=e.multiply(a,n);return t([a,n]),r}),{a:a,b:n},null,Jr)}}),Ls=ri({sqrt_:function(e){var t=$n(e,"x","sqrt");return qn.runKernelFunc((function(e,r){var a=e.sqrt(t);return r([t]),a}),{x:t},null,Fa)}}),zs=ri({square_:function(e){var t=$n(e,"x","square");return qn.runKernelFunc((function(e,r){return r([t]),e.square(t)}),{x:t},null,"Square",{},[t],[])}}),Bs=ri({zerosLike_:function(e){var t=$n(e,"x","zerosLike");return qn.runKernelFunc((function(e){return e.zerosLike(t)}),{x:t},null,Ya)}});function Ps(e){return Ce(Ze(e),(function(){return"The f passed in grad(f) must be a function"})),function(t,r){var a=$n(t,"x","tf.grad",null),n=null!=r?$n(r,"dy","tf.grad"):null;return qn.tidy((function(){var t=qn.gradients((function(){return e(a)}),[a],n),r=t.value,i=t.grads;return null!=n&&Te(r.shape,n.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),js(i),i[0]}))}}function Vs(e){return Ce(Ze(e),(function(){return"The f passed in grads(f) must be a function"})),function(t,r){Ce(Array.isArray(t),(function(){return"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s"}));var a=ei(t,"args","tf.grads",null),n=null!=r?$n(r,"dy","tf.grads"):null;return qn.tidy((function(){var t=qn.gradients((function(){return e.apply(void 0,_toConsumableArray(a))}),a,n),r=t.value,i=t.grads;return null!=n&&Te(r.shape,n.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),js(i),i}))}}function Us(e){return Ce(Ze(e),(function(){return"The f passed in valueAndGrad(f) must be a function"})),function(t,r){Ce(t instanceof Rn,(function(){return"The x passed in valueAndGrad(f)(x) must be a tensor"})),Ce(null==r||r instanceof Rn,(function(){return"The dy passed in valueAndGrad(f)(x, dy) must be a tensor"}));var a=qn.gradients((function(){return e(t)}),[t],r),n=a.grads,i=a.value;return js(n),{grad:n[0],value:i}}}function Ws(e){return Ce(Ze(e),(function(){return"The f passed in valueAndGrads(f) must be a function"})),function(t,r){Ce(Array.isArray(t)&&t.every((function(e){return e instanceof Rn})),(function(){return"The args passed in valueAndGrads(f)(args) must be array of tensors"})),Ce(null==r||r instanceof Rn,(function(){return"The dy passed in valueAndGrads(f)(args, dy) must be a tensor"}));var a=qn.gradients((function(){return e.apply(void 0,_toConsumableArray(t))}),t,r);return null!=r&&Te(a.value.shape,r.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),js(a.grads),a}}function Gs(e,t){Ce(Ze(e),(function(){return"The f passed in variableGrads(f) must be a function"})),Ce(null==t||Array.isArray(t)&&t.every((function(e){return e instanceof On})),(function(){return"The varList passed in variableGrads(f, varList) must be an array of variables"}));var r=null!=t;if(!r)for(var a in t=[],qn.registeredVariables)t.push(qn.registeredVariables[a]);var n=r?t.filter((function(e){return!e.trainable})):null,i=t.length;Ce((t=t.filter((function(e){return e.trainable}))).length>0,(function(){return"variableGrads() expects at least one of the input variables to be trainable, but none of the ".concat(i," variables is trainable.")}));var o=qn.gradients(e,t,null,!0),s=o.value,l=o.grads;Ce(l.some((function(e){return null!=e})),(function(){return"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."})),Ce(0===s.rank,(function(){return"The f passed in variableGrads(f) must return a scalar, but it returned a rank-".concat(s.rank," tensor")}));var u={};return t.forEach((function(e,t){null!=l[t]&&(u[e.name]=l[t])})),null!=n&&n.forEach((function(e){return u[e.name]=null})),{value:s,grads:u}}function Hs(e){return qn.customGrad(e)}function js(e){if(e.filter((function(e){return null==e})).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}function qs(e,t){if((je(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&je(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return ni(e,[],[],t)}var Xs=function(e){_inherits(o,e);var t,r,a,n,i=_createSuper(o);function o(){return _classCallCheck(this,o),i.apply(this,arguments)}return _createClass(o,[{key:"minimize",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=arguments.length>2?arguments[2]:void 0,a=this.computeGradients(e,r),n=a.value,i=a.grads;if(null!=r){var o=r.map((function(e){return{name:e.name,tensor:i[e.name]}}));this.applyGradients(o)}else this.applyGradients(i);return bs(i),t?n:(n.dispose(),null)}},{key:"incrementIterations",value:function(){this.iterations_=this.iterations+1}},{key:"computeGradients",value:function(e,t){return Gs(e,t)}},{key:"dispose",value:function(){null!=this.iterations_&&bs(this.iterations_)}},{key:"saveIterations",value:(n=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",(null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:qs(this.iterations_,"int32")}));case 1:case"end":return e.stop()}}),e,this)}))),function(){return n.apply(this,arguments)})},{key:"getWeights",value:(a=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:throw new Error("getWeights() is not implemented for this optimizer yet.");case 1:case"end":return e.stop()}}),e)}))),function(){return a.apply(this,arguments)})},{key:"setWeights",value:(r=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:throw new Error("setWeights() is not implemented for this optimizer class "+this.getClassName());case 1:case"end":return e.stop()}}),e,this)}))),function(e){return r.apply(this,arguments)})},{key:"extractIterations",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t[0].tensor.data();case 2:return this.iterations_=e.sent[0],e.abrupt("return",t.slice(1));case 4:case"end":return e.stop()}}),e,this)}))),function(e){return t.apply(this,arguments)})},{key:"iterations",get:function(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}}]),o}(Jo);Object.defineProperty(Xs,Symbol.hasInstance,{value:function(e){return null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients}});var Ks=function(e){_inherits(n,e);var t,r,a=_createSuper(n);function n(e,t){var r,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;return _classCallCheck(this,n),(r=a.call(this)).learningRate=e,r.rho=t,r.epsilon=i,r.accumulatedGrads=[],r.accumulatedUpdates=[],null==i&&(r.epsilon=qn.backend.epsilon()),r}return _createClass(n,[{key:"applyGradients",value:function(e){var t=this;(Array.isArray(e)?e.map((function(e){return e.name})):Object.keys(e)).forEach((function(r,a){var n=qn.registeredVariables[r];null==t.accumulatedGrads[a]&&(t.accumulatedGrads[a]={originalName:r+"/accum_grad",variable:ys((function(){return Bs(n).variable(!1)}))}),null==t.accumulatedUpdates[a]&&(t.accumulatedUpdates[a]={originalName:r+"/accum_var",variable:ys((function(){return Bs(n).variable(!1)}))});var i=Array.isArray(e)?e[a].tensor:e[r];if(null!=i){var o=t.accumulatedGrads[a].variable,s=t.accumulatedUpdates[a].variable;ys((function(){var e=Fs(Os(o,t.rho),Os(zs(i),1-t.rho)),r=Os(Ds(Ls(Fs(s,t.epsilon)),Ls(Fs(o,t.epsilon))),i),a=Fs(Os(s,t.rho),Os(zs(r),1-t.rho));o.assign(e),s.assign(a);var l=Fs(Os(r,-t.learningRate),n);n.assign(l)}))}})),this.incrementIterations()}},{key:"dispose",value:function(){null!=this.accumulatedUpdates&&(bs(this.accumulatedGrads.map((function(e){return e.variable}))),bs(this.accumulatedUpdates.map((function(e){return e.variable}))))}},{key:"getWeights",value:(r=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=[].concat(_toConsumableArray(this.accumulatedGrads),_toConsumableArray(this.accumulatedUpdates)),e.next=3,this.saveIterations();case 3:return e.t0=e.sent,e.abrupt("return",[e.t0].concat(t.map((function(e){return{name:e.originalName,tensor:e.variable}}))));case 5:case"end":return e.stop()}}),e,this)}))),function(){return r.apply(this,arguments)})},{key:"setWeights",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(t){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.extractIterations(t);case 2:e.t0=(t=e.sent).length,r=e.t0/2,this.accumulatedGrads=t.slice(0,r).map((function(e){return{originalName:e.name,variable:e.tensor.variable(!1)}})),this.accumulatedUpdates=t.slice(r,2*r).map((function(e){return{originalName:e.name,variable:e.tensor.variable(!1)}}));case 5:case"end":return e.stop()}}),e,this)}))),function(e){return t.apply(this,arguments)})},{key:"getConfig",value:function(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}}],[{key:"fromConfig",value:function(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}]),n}(Xs);function Qs(e,t,r){return qn.runKernelFunc((function(a){return a.fill(e,t,r)}),{},null,dr,{shape:e,value:t,dtype:r})}Ks.className="Adadelta",$o(Ks);var Ys=function(e){_inherits(n,e);var t,r,a=_createSuper(n);function n(e){var t,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.1;return _classCallCheck(this,n),(t=a.call(this)).learningRate=e,t.initialAccumulatorValue=r,t.accumulatedGrads=[],t}return _createClass(n,[{key:"applyGradients",value:function(e){var t=this;(Array.isArray(e)?e.map((function(e){return e.name})):Object.keys(e)).forEach((function(r,a){var n=qn.registeredVariables[r];if(null==t.accumulatedGrads[a]){t.accumulatedGrads[a]={originalName:r+"/accumulator",variable:ys((function(){return Qs(n.shape,t.initialAccumulatorValue).variable(false)}))}}var i=Array.isArray(e)?e[a].tensor:e[r];if(null!=i){var o=t.accumulatedGrads[a].variable;ys((function(){var e=Fs(o,zs(i));o.assign(e);var r=Fs(Os(Ds(i,Ls(Fs(e,qn.backend.epsilon()))),-t.learningRate),n);n.assign(r)}))}})),this.incrementIterations()}},{key:"dispose",value:function(){null!=this.accumulatedGrads&&bs(this.accumulatedGrads.map((function(e){return e.variable})))}},{key:"getWeights",value:(r=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.saveIterations();case 2:return e.t0=e.sent,e.abrupt("return",[e.t0].concat(this.accumulatedGrads.map((function(e){return{name:e.originalName,tensor:e.variable}}))));case 4:case"end":return e.stop()}}),e,this)}))),function(){return r.apply(this,arguments)})},{key:"setWeights",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.extractIterations(t);case 2:t=e.sent,this.accumulatedGrads=t.map((function(e){return{originalName:e.name,variable:e.tensor.variable(!1)}}));case 4:case"end":return e.stop()}}),e,this)}))),function(e){return t.apply(this,arguments)})},{key:"getConfig",value:function(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}}],[{key:"fromConfig",value:function(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}]),n}(Xs);Ys.className="Adagrad",$o(Ys);var Js=ri({pow_:function(e,t){var r,a=$n(e,"base","pow"),n=$n(t,"exp","pow");return r=_slicedToArray(Pn(a,n),2),a=r[0],n=r[1],qn.runKernelFunc((function(e,t){var r=e.pow(a,n);return t([a,n,r]),r}),{a:a,b:n},null,sa)}}),Zs=ri({sub_:function(e,t){var r,a=$n(e,"a","sub"),n=$n(t,"b","sub");return r=_slicedToArray(Pn(a,n),2),a=r[0],n=r[1],qn.runKernelFunc((function(e,t){var r=e.subtract(a,n);return t([a,n]),r}),{a:a,b:n},null,Pa)}}),$s=function(e){_inherits(n,e);var t,r,a=_createSuper(n);function n(e,t,r){var i,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return _classCallCheck(this,n),(i=a.call(this)).learningRate=e,i.beta1=t,i.beta2=r,i.epsilon=o,i.accumulatedFirstMoment=[],i.accumulatedSecondMoment=[],ys((function(){i.accBeta1=qs(t).variable(),i.accBeta2=qs(r).variable()})),null==o&&(i.epsilon=qn.backend.epsilon()),i}return _createClass(n,[{key:"applyGradients",value:function(e){var t=this,r=Array.isArray(e)?e.map((function(e){return e.name})):Object.keys(e);ys((function(){var a=Zs(1,t.accBeta1),n=Zs(1,t.accBeta2);r.forEach((function(r,i){var o=qn.registeredVariables[r];null==t.accumulatedFirstMoment[i]&&(t.accumulatedFirstMoment[i]={originalName:r+"/m",variable:ys((function(){return Bs(o).variable(!1)}))}),null==t.accumulatedSecondMoment[i]&&(t.accumulatedSecondMoment[i]={originalName:r+"/v",variable:ys((function(){return Bs(o).variable(!1)}))});var s=Array.isArray(e)?e[i].tensor:e[r];if(null!=s){var l=t.accumulatedFirstMoment[i].variable,u=t.accumulatedSecondMoment[i].variable,h=Fs(Os(l,t.beta1),Os(s,1-t.beta1)),c=Fs(Os(u,t.beta2),Os(zs(s),1-t.beta2)),f=Ds(h,a),d=Ds(c,n);l.assign(h),u.assign(c);var v=Fs(Os(Ds(f,Fs(Ls(d),t.epsilon)),-t.learningRate),o);o.assign(v)}})),t.accBeta1.assign(Os(t.accBeta1,t.beta1)),t.accBeta2.assign(Os(t.accBeta2,t.beta2))})),this.incrementIterations()}},{key:"dispose",value:function(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&bs(this.accumulatedFirstMoment.map((function(e){return e.variable}))),null!=this.accumulatedSecondMoment&&bs(this.accumulatedSecondMoment.map((function(e){return e.variable})))}},{key:"getWeights",value:(r=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=[].concat(_toConsumableArray(this.accumulatedFirstMoment),_toConsumableArray(this.accumulatedSecondMoment)),e.next=3,this.saveIterations();case 3:return e.t0=e.sent,e.abrupt("return",[e.t0].concat(t.map((function(e){return{name:e.originalName,tensor:e.variable}}))));case 5:case"end":return e.stop()}}),e,this)}))),function(){return r.apply(this,arguments)})},{key:"setWeights",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(t){var r,a=this;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.extractIterations(t);case 2:t=e.sent,ys((function(){a.accBeta1.assign(Js(a.beta1,a.iterations_+1)),a.accBeta2.assign(Js(a.beta2,a.iterations_+1))})),r=t.length/2,this.accumulatedFirstMoment=t.slice(0,r).map((function(e){return{originalName:e.name,variable:e.tensor.variable(!1)}})),this.accumulatedSecondMoment=t.slice(r,2*r).map((function(e){return{originalName:e.name,variable:e.tensor.variable(!1)}}));case 6:case"end":return e.stop()}}),e,this)}))),function(e){return t.apply(this,arguments)})},{key:"getConfig",value:function(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}}],[{key:"fromConfig",value:function(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}]),n}(Xs);$s.className="Adam",$o($s);var el=ri({abs_:function(e){var t=$n(e,"x","abs");return qn.runKernelFunc((function(e,r){return r([t]),"complex64"===t.dtype?e.complexAbs(t):e.abs(t)}),{x:t},null,pt)}});function tl(e,t){for(var r=e.length,a=[],n=0;n<r;n++){var i=r-1-n,o=e[i]||1;(t[t.length-1-n]||1)>1&&1===o&&a.unshift(i)}return a}function rl(e,t){for(var r=[],a=0;a<t.length;a++){var n=e[e.length-a-1],i=t.length-a-1,o=t[i];(null==n||1===n&&o>1)&&r.unshift(i)}return r}function al(e,t){for(var r=[],a=Math.max(e.length,t.length),n=0;n<a;n++){var i=e[e.length-n-1];null==i&&(i=1);var o=t[t.length-n-1];if(null==o&&(o=1),1===i)r.unshift(o);else if(1===o)r.unshift(i);else{if(i!==o)throw Error("Operands could not be broadcast together with shapes ".concat(e," and ").concat(t,"."));r.unshift(i)}}return r}var nl=ri({maximum_:function(e,t){var r,a=$n(e,"a","maximum"),n=$n(t,"b","maximum");return r=_slicedToArray(Pn(a,n),2),a=r[0],n=r[1],"bool"===a.dtype&&(a=$i(a,"int32"),n=$i(n,"int32")),al(a.shape,n.shape),qn.runKernelFunc((function(e,t){var r=e.maximum(a,n);return t([a,n]),r}),{a:a,b:n},null,Vr)}}),il=function(e){_inherits(n,e);var t,r,a=_createSuper(n);function n(e,t,r){var i,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0;return _classCallCheck(this,n),(i=a.call(this)).learningRate=e,i.beta1=t,i.beta2=r,i.epsilon=o,i.decay=s,i.accumulatedFirstMoment=[],i.accumulatedWeightedInfNorm=[],ys((function(){i.iteration=qs(0).variable(),i.accBeta1=qs(t).variable()})),null==o&&(i.epsilon=qn.backend.epsilon()),i}return _createClass(n,[{key:"applyGradients",value:function(e){var t=this,r=Array.isArray(e)?e.map((function(e){return e.name})):Object.keys(e);ys((function(){var a=Zs(1,t.accBeta1),n=Ds(-t.learningRate,Fs(Os(t.iteration,t.decay),1));r.forEach((function(r,i){var o=qn.registeredVariables[r];null==t.accumulatedFirstMoment[i]&&(t.accumulatedFirstMoment[i]={originalName:r+"/m",variable:Bs(o).variable(!1)}),null==t.accumulatedWeightedInfNorm[i]&&(t.accumulatedWeightedInfNorm[i]={originalName:r+"/v",variable:Bs(o).variable(!1)});var s=Array.isArray(e)?e[i].tensor:e[r];if(null!=s){var l=t.accumulatedFirstMoment[i].variable,u=t.accumulatedWeightedInfNorm[i].variable,h=Fs(Os(l,t.beta1),Os(s,1-t.beta1)),c=Os(u,t.beta2),f=el(s),d=nl(c,f);l.assign(h),u.assign(d);var v=Fs(Os(Ds(n,a),Ds(h,Fs(d,t.epsilon))),o);o.assign(v)}})),t.iteration.assign(Fs(t.iteration,1)),t.accBeta1.assign(Os(t.accBeta1,t.beta1))})),this.incrementIterations()}},{key:"dispose",value:function(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&bs(this.accumulatedFirstMoment.map((function(e){return e.variable}))),null!=this.accumulatedWeightedInfNorm&&bs(this.accumulatedWeightedInfNorm.map((function(e){return e.variable})))}},{key:"getWeights",value:(r=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:throw new Error("getWeights() is not implemented for Adamax yet.");case 1:case"end":return e.stop()}}),e)}))),function(){return r.apply(this,arguments)})},{key:"setWeights",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:throw new Error("setWeights() is not implemented for Adamax yet.");case 1:case"end":return e.stop()}}),e)}))),function(e){return t.apply(this,arguments)})},{key:"getConfig",value:function(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}}],[{key:"fromConfig",value:function(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}]),n}(Xs);il.className="Adamax",$o(il);var ol=function(e){_inherits(n,e);var t,r,a=_createSuper(n);function n(e){var t;return _classCallCheck(this,n),(t=a.call(this)).learningRate=e,t.setLearningRate(e),t}return _createClass(n,[{key:"applyGradients",value:function(e){var t=this;(Array.isArray(e)?e.map((function(e){return e.name})):Object.keys(e)).forEach((function(r,a){var n=Array.isArray(e)?e[a].tensor:e[r];if(null!=n){var i=qn.registeredVariables[r];ys((function(){var e=Fs(Os(t.c,n),i);i.assign(e)}))}})),this.incrementIterations()}},{key:"setLearningRate",value:function(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=xs(qs(-e))}},{key:"dispose",value:function(){this.c.dispose()}},{key:"getWeights",value:(r=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.saveIterations();case 2:return e.t0=e.sent,e.abrupt("return",[e.t0]);case 4:case"end":return e.stop()}}),e,this)}))),function(){return r.apply(this,arguments)})},{key:"setWeights",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.extractIterations(t);case 2:if(e.t0=(t=e.sent).length,0===e.t0){e.next=5;break}throw new Error("SGD optimizer does not have settable weights.");case 5:case"end":return e.stop()}}),e,this)}))),function(e){return t.apply(this,arguments)})},{key:"getConfig",value:function(){return{learningRate:this.learningRate}}}],[{key:"fromConfig",value:function(e,t){return new e(t.learningRate)}}]),n}(Xs);ol.className="SGD",$o(ol);var sl=function(e){_inherits(n,e);var t,r,a=_createSuper(n);function n(e,t){var r,i=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return _classCallCheck(this,n),(r=a.call(this,e)).learningRate=e,r.momentum=t,r.useNesterov=i,r.accumulations=[],r.m=qs(r.momentum),r}return _createClass(n,[{key:"applyGradients",value:function(e){var t=this;(Array.isArray(e)?e.map((function(e){return e.name})):Object.keys(e)).forEach((function(r,a){var n=qn.registeredVariables[r];if(null==t.accumulations[a]){t.accumulations[a]={originalName:r+"/momentum",variable:ys((function(){return Bs(n).variable(false)}))}}var i=t.accumulations[a].variable,o=Array.isArray(e)?e[a].tensor:e[r];null!=o&&ys((function(){var e,r=Fs(Os(t.m,i),o);e=Fs(Os(t.c,t.useNesterov?Fs(o,Os(r,t.m)):r),n),i.assign(r),n.assign(e)}))})),this.incrementIterations()}},{key:"dispose",value:function(){this.m.dispose(),null!=this.accumulations&&bs(this.accumulations.map((function(e){return e.variable})))}},{key:"setMomentum",value:function(e){this.momentum=e}},{key:"getWeights",value:(r=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.saveIterations();case 2:return e.t0=e.sent,e.abrupt("return",[e.t0].concat(this.accumulations.map((function(e){return{name:e.originalName,tensor:e.variable}}))));case 4:case"end":return e.stop()}}),e,this)}))),function(){return r.apply(this,arguments)})},{key:"setWeights",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.extractIterations(t);case 2:t=e.sent,this.accumulations=t.map((function(e){return{originalName:e.name,variable:e.tensor.variable(!1)}}));case 4:case"end":return e.stop()}}),e,this)}))),function(e){return t.apply(this,arguments)})},{key:"getConfig",value:function(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}}],[{key:"fromConfig",value:function(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}]),n}(ol);sl.className="Momentum",$o(sl);var ll=function(e){_inherits(n,e);var t,r,a=_createSuper(n);function n(e){var t,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.9,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,s=arguments.length>4&&void 0!==arguments[4]&&arguments[4];if(_classCallCheck(this,n),(t=a.call(this)).learningRate=e,t.decay=r,t.momentum=i,t.epsilon=o,t.accumulatedMeanSquares=[],t.accumulatedMoments=[],t.accumulatedMeanGrads=[],t.centered=s,null==o&&(t.epsilon=qn.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.");return _possibleConstructorReturn(t)}return _createClass(n,[{key:"applyGradients",value:function(e){var t=this;(Array.isArray(e)?e.map((function(e){return e.name})):Object.keys(e)).forEach((function(r,a){var n=qn.registeredVariables[r];null==t.accumulatedMeanSquares[a]&&(t.accumulatedMeanSquares[a]={originalName:r+"/rms",variable:ys((function(){return Bs(n).variable(!1)}))}),null==t.accumulatedMoments[a]&&(t.accumulatedMoments[a]={originalName:r+"/momentum",variable:ys((function(){return Bs(n).variable(!1)}))}),null==t.accumulatedMeanGrads[a]&&t.centered&&(t.accumulatedMeanGrads[a]={originalName:r+"/mg",variable:ys((function(){return Bs(n).variable(!1)}))});var i=Array.isArray(e)?e[a].tensor:e[r];if(null!=i){var o=t.accumulatedMeanSquares[a].variable,s=t.accumulatedMoments[a].variable;ys((function(){var e=Fs(Os(o,t.decay),Os(zs(i),1-t.decay));if(t.centered){var r=t.accumulatedMeanGrads[a].variable,l=Fs(Os(r,t.decay),Os(i,1-t.decay)),u=Ds(Os(i,t.learningRate),Ls(Zs(e,Fs(zs(l),t.epsilon)))),h=Fs(Os(s,t.momentum),u);o.assign(e),r.assign(l),s.assign(h);var c=Zs(n,h);n.assign(c)}else{var f=Fs(Os(o,t.decay),Os(zs(i),1-t.decay)),d=Fs(Os(s,t.momentum),Ds(Os(i,t.learningRate),Ls(Fs(f,t.epsilon))));o.assign(f),s.assign(d);var v=Zs(n,d);n.assign(v)}}))}})),this.incrementIterations()}},{key:"dispose",value:function(){null!=this.accumulatedMeanSquares&&bs(this.accumulatedMeanSquares.map((function(e){return e.variable}))),null!=this.accumulatedMeanGrads&&this.centered&&bs(this.accumulatedMeanGrads.map((function(e){return e.variable}))),null!=this.accumulatedMoments&&bs(this.accumulatedMoments.map((function(e){return e.variable})))}},{key:"getWeights",value:(r=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=[].concat(_toConsumableArray(this.accumulatedMeanSquares),_toConsumableArray(this.accumulatedMoments)),this.centered&&t.push.apply(t,_toConsumableArray(this.accumulatedMeanGrads)),e.next=4,this.saveIterations();case 4:return e.t0=e.sent,e.abrupt("return",[e.t0].concat(t.map((function(e){return{name:e.originalName,tensor:e.variable}}))));case 6:case"end":return e.stop()}}),e,this)}))),function(){return r.apply(this,arguments)})},{key:"setWeights",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(t){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.extractIterations(t);case 2:t=e.sent,r=this.centered?t.length/3:t.length/2,this.accumulatedMeanSquares=t.slice(0,r).map((function(e){return{originalName:e.name,variable:e.tensor.variable(!1)}})),this.accumulatedMoments=t.slice(r,2*r).map((function(e){return{originalName:e.name,variable:e.tensor.variable(!1)}})),this.centered&&(this.accumulatedMeanGrads=t.slice(2*r,3*r).map((function(e){return{originalName:e.name,variable:e.tensor.variable(!1)}})));case 5:case"end":return e.stop()}}),e,this)}))),function(e){return t.apply(this,arguments)})},{key:"getConfig",value:function(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}}],[{key:"fromConfig",value:function(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}]),n}(Xs);ll.className="RMSProp",$o(ll);var ul=ri({acos_:function(e){var t=$n(e,"x","acos");return qn.runKernelFunc((function(e,r){var a=e.acos(t);return r([t]),a}),{x:t},null,gt)}}),hl=ri({acosh_:function(e){var t=$n(e,"x","acosh");return qn.runKernelFunc((function(e,r){var a=e.acosh(t);return r([t]),a}),{x:t},null,_t)}}),cl=ri({addN_:function(e){Ce(Array.isArray(e),(function(){return"The argument passed to tf.addN() must be a list of tensors"})),Ce(e.length>=1,(function(){return"Must pass at least one tensor to tf.addN(), but got "+e.length}));var t=e.map((function(e,t){return $n(e,"tensors"+t,"addN")})),r=t[0];return t.forEach((function(e){if(e.dtype!==r.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),t.forEach((function(e){if(!Ne(e.shape,r.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")})),qn.runKernelFunc((function(e,r){var a=e.addN(t);return r(t),a}),t,null,yt)}});function fl(e,t){for(var r=0;r<e.length;++r)if(e[e.length-r-1]!==t-1-r)return!1;return!0}function dl(e,t,r){for(var a=e.length+t.length,n=[],i=0,o=0,s=0;s<a;s++)-1===r.indexOf(s)?n.push(e[i++]):n.push(t[o++]);return n}function vl(e,t){for(var r=[],a=e.length,n=0;n<a;n++)-1===t.indexOf(n)&&r.push(e[n]);return[r,t.map((function(t){return e[t]}))]}function pl(e,t){return dl(e,t.map((function(e){return 1})),t)}function gl(e,t,r){Ce(fl(t,r),(function(){return e+" supports only inner-most axes for now. "+"Got axes ".concat(t," and rank-").concat(r," input.")}))}function _l(e,t){if(fl(e,t))return null;for(var r=[],a=0;a<t;++a)-1===e.indexOf(a)&&r.push(a);return e.forEach((function(e){return r.push(e)})),r}function ml(e){return e.map((function(e,t){return[t,e]})).sort((function(e,t){return e[1]-t[1]})).map((function(e){return e[0]}))}function yl(e,t){for(var r=[],a=t-e;a<t;++a)r.push(a);return r}var bl=ri({all_:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=$n(e,"x","all","bool");return qn.runKernelFunc((function(e){var n=Be(t,a.shape),i=n,o=_l(i,a.rank);null!=o&&(a=So(a,o),i=yl(i.length,a.rank));var s=e.all(a,i);if(r){var l=pl(s.shape,n);return wo(s,l)}return s}),{x:a},null,bt,{axis:t,keepDims:r})}}),xl=ri({any_:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=$n(e,"x","any","bool");return qn.runKernelFunc((function(e){var n=Be(t,a.shape),i=n,o=_l(i,a.rank);null!=o&&(a=So(a,o),i=yl(i.length,a.rank));var s=e.any(a,i);if(r){var l=pl(s.shape,n);return wo(s,l)}return s}),{x:a},null,xt,{axis:t,keepDims:r})}}),kl=ri({argMax_:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=$n(e,"x","argMax");return qn.runKernelFunc((function(e,a){a([r]);var n=Be(t,r.shape),i=_l(n,r.rank);return null!=i&&(r=So(r,i),n=yl(n.length,r.rank)),e.argMax(r,n[0])}),{x:r},null,kt,{axis:t})}}),wl=ri({argMin_:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=$n(e,"x","argMin");return qn.runKernelFunc((function(e,a){a([r]),null==t&&(t=0);var n=Be(t,r.shape),i=_l(n,r.rank);return null!=i&&(r=So(r,i),n=yl(n.length,r.rank)),e.argMin(r,n[0])}),{x:r},null,wt,{axis:t})}}),Cl=ri({asin_:function(e){var t=$n(e,"x","asin");return qn.runKernelFunc((function(e,r){var a=e.asin(t);return r([t]),a}),{x:t},null,Ct)}}),Tl=ri({asinh_:function(e){var t=$n(e,"x","asinh");return qn.runKernelFunc((function(e,r){var a=e.asinh(t);return r([t]),a}),{x:t},null,Tt)}}),Sl=ri({atan_:function(e){var t=$n(e,"x","atan");return qn.runKernelFunc((function(e,r){var a=e.atan(t);return r([t]),a}),{x:t},null,St)}}),Il=ri({atan2_:function(e,t){var r,a=$n(e,"a","atan2"),n=$n(t,"b","atan2");return r=_slicedToArray(Pn(a,n),2),a=r[0],n=r[1],qn.runKernelFunc((function(e,t){var r=e.atan2(a,n);return t([a,n]),r}),{a:a,b:n},null,At)}}),Al=ri({atanh_:function(e){var t=$n(e,"x","atanh");return qn.runKernelFunc((function(e,r){var a=e.atanh(t);return r([t]),a}),{x:t},null,It)}});function Rl(e,t,r,a){var n=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"NHWC",i=arguments.length>5?arguments[5]:void 0;return Fl(e,[].concat(_toConsumableArray(t),[e[3]]),r,i,a,null,null,Ul(n))}function Nl(e,t,r,a,n,i){var o,s=arguments.length>6&&void 0!==arguments[6]?arguments[6]:"channelsLast",l=Ol(t),u=_slicedToArray(l,2),h=u[0],c=u[1];if("channelsLast"===s)o=[h,c,e[3],e[3]];else{if("channelsFirst"!==s)throw new Error("Unknown dataFormat "+s);o=[h,c,e[1],e[1]]}return Fl(e,o,r,a,n,i,!1,s)}function El(e,t,r,a,n,i){var o,s,l=arguments.length>6&&void 0!==arguments[6]?arguments[6]:"NDHWC",u=Ll(t),h=_slicedToArray(u,3),c=h[0],f=h[1],d=h[2];if("NDHWC"===l)s="channelsLast",o=[c,f,d,e[4],e[4]];else{if("NCDHW"!==l)throw new Error("Unknown dataFormat "+l);s="channelsFirst",o=[c,f,d,e[1],e[1]]}return Ml(e,o,r,a,n,!1,s,i)}function Fl(e,t,r,a,n,i){var o=arguments.length>6&&void 0!==arguments[6]&&arguments[6],s=arguments.length>7&&void 0!==arguments[7]?arguments[7]:"channelsLast",l=-1,u=-1,h=-1,c=-1;if("channelsLast"===s){var f=_slicedToArray(e,4);l=f[0],u=f[1],h=f[2],c=f[3]}else{if("channelsFirst"!==s)throw new Error("Unknown dataFormat "+s);var d=_slicedToArray(e,4);l=d[0],c=d[1],u=d[2],h=d[3]}var v,p=_slicedToArray(t,4),g=p[0],_=p[1],m=p[3],y=Ol(r),b=_slicedToArray(y,2),x=b[0],k=b[1],w=Ol(a),C=_slicedToArray(w,2),T=C[0],S=C[1],I=zl(g,T),A=zl(_,S),R=function(e,t,r,a,n,i,o,s,l){var u,h,c;if("number"==typeof e){u={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};var f=function(e,t,r,a,n){null==a&&(a=Dl(e,t,r));var i=e[1],o=Bl((e[0]-t+2*a)/r+1,n);Ce(Ee(o),(function(){return"The output # of rows (".concat(o,") must be an integer. Change the stride and/or zero pad parameters")}));var s=Bl((i-t+2*a)/r+1,n);return Ce(Ee(s),(function(){return"The output # of columns (".concat(s,") must be an integer. Change the stride and/or zero pad parameters")})),[o,s]}([t,r],i,a,e,s);h=f[0],c=f[1]}else if("same"===e){h=Math.ceil(t/a),c=Math.ceil(r/n);var d=Math.max(0,(h-1)*a+i-t),v=Math.max(0,(c-1)*n+o-r),p=Math.floor(d/2),g=d-p,_=Math.floor(v/2);u={top:p,bottom:g,left:_,right:v-_,type:"SAME"}}else if("valid"===e)u={top:0,bottom:0,left:0,right:0,type:"VALID"},h=Math.ceil((t-i+1)/a),c=Math.ceil((r-o+1)/n);else{if("object"!=typeof e)throw Error("Unknown padding parameter: "+e);var m="channelsLast"===l?e[1][0]:e[2][0],y="channelsLast"===l?e[1][1]:e[2][1],b="channelsLast"===l?e[2][0]:e[3][0],x="channelsLast"===l?e[2][1]:e[3][1];u={top:m,bottom:y,left:b,right:x,type:0===m&&0===y&&0===b&&0===x?"VALID":"EXPLICIT"},h=Bl((t-i+m+y)/a+1,s),c=Bl((r-o+b+x)/n+1,s)}return{padInfo:u,outHeight:h,outWidth:c}}(n,u,h,x,k,I,A,i,s),N=R.padInfo,E=R.outHeight,F=R.outWidth,M=o?m*c:m;return"channelsFirst"===s?v=[l,M,E,F]:"channelsLast"===s&&(v=[l,E,F,M]),{batchSize:l,dataFormat:s,inHeight:u,inWidth:h,inChannels:c,outHeight:E,outWidth:F,outChannels:M,padInfo:N,strideHeight:x,strideWidth:k,filterHeight:g,filterWidth:_,effectiveFilterHeight:I,effectiveFilterWidth:A,dilationHeight:T,dilationWidth:S,inShape:e,outShape:v,filterShape:t}}function Ml(e,t,r,a,n){var i=arguments.length>5&&void 0!==arguments[5]&&arguments[5],o=arguments.length>6&&void 0!==arguments[6]?arguments[6]:"channelsLast",s=arguments.length>7?arguments[7]:void 0,l=-1,u=-1,h=-1,c=-1,f=-1;if("channelsLast"===o){var d=_slicedToArray(e,5);l=d[0],u=d[1],h=d[2],c=d[3],f=d[4]}else{if("channelsFirst"!==o)throw new Error("Unknown dataFormat "+o);var v=_slicedToArray(e,5);l=v[0],f=v[1],u=v[2],h=v[3],c=v[4]}var p,g=_slicedToArray(t,5),_=g[0],m=g[1],y=g[2],b=g[4],x=Ll(r),k=_slicedToArray(x,3),w=k[0],C=k[1],T=k[2],S=Ll(a),I=_slicedToArray(S,3),A=I[0],R=I[1],N=I[2],E=zl(_,A),F=zl(m,R),M=zl(y,N),D=function(e,t,r,a,n,i,o,s,l,u,h){var c,f,d,v;if("number"==typeof e){c={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};var p=function(e,t,r,a,n,i){null==n&&(n=Dl(e,t,a));var o=e[1],s=e[2],l=Bl((e[0]-t+2*n)/a+1,i);Ce(Ee(l),(function(){return"The output # of depths (".concat(l,") must be an integer. Change the stride and/or zero pad parameters")}));var u=Bl((o-t+2*n)/a+1,i);Ce(Ee(u),(function(){return"The output # of rows (".concat(u,") must be an integer. Change the stride and/or zero pad parameters")}));var h=Bl((s-t+2*n)/a+1,i);return Ce(Ee(h),(function(){return"The output # of columns (".concat(h,") must be an integer. Change the stride and/or zero pad parameters")})),[l,u,h,1]}([t,r,a,1],s,0,n,e,h);f=p[0],d=p[1],v=p[2]}else if("same"===e){var g=((f=Math.ceil(t/n))-1)*n+s-t,_=((d=Math.ceil(r/i))-1)*i+l-r,m=((v=Math.ceil(a/o))-1)*o+u-a,y=Math.floor(g/2),b=g-y,x=Math.floor(_/2),k=_-x,w=Math.floor(m/2);c={top:x,bottom:k,left:w,right:m-w,front:y,back:b,type:"SAME"}}else{if("valid"!==e)throw Error("Unknown padding parameter: "+e);c={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},f=Math.ceil((t-s+1)/n),d=Math.ceil((r-l+1)/i),v=Math.ceil((a-u+1)/o)}return{padInfo:c,outDepth:f,outHeight:d,outWidth:v}}(n,u,h,c,w,C,T,E,F,M,s),O=D.padInfo,L=D.outDepth,z=D.outHeight,B=D.outWidth,P=i?b*f:b;return"channelsFirst"===o?p=[l,P,L,z,B]:"channelsLast"===o&&(p=[l,L,z,B,P]),{batchSize:l,dataFormat:o,inDepth:u,inHeight:h,inWidth:c,inChannels:f,outDepth:L,outHeight:z,outWidth:B,outChannels:P,padInfo:O,strideDepth:w,strideHeight:C,strideWidth:T,filterDepth:_,filterHeight:m,filterWidth:y,effectiveFilterDepth:E,effectiveFilterHeight:F,effectiveFilterWidth:M,dilationDepth:A,dilationHeight:R,dilationWidth:N,inShape:e,outShape:p,filterShape:t}}function Dl(e,t,r){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1,n=zl(t,a);return Math.floor((e[0]*(r-1)-r+n)/2)}function Ol(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function Ll(e){return"number"==typeof e?[e,e,e]:e}function zl(e,t){return t<=1?e:e+(e-1)*(t-1)}function Bl(e,t){if(!t)return e;switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error("Unknown roundingMode "+t)}}function Pl(e){var t=_slicedToArray(Ol(e),3),r=t[0],a=t[1],n=t[2];return 1===r&&1===a&&1===n}function Vl(e,t){return Pl(e)||Pl(t)}function Ul(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error("Unknown dataFormat "+e)}var Wl=ri({avgPool_:function(e,t,r,a,n){var i=$n(e,"x","avgPool","float32");Ce(Vl(r,1),(function(){return"Error in avgPool: Either strides or dilations must be 1. Got strides ".concat(r," and dilations '1'")}));var o=i,s=!1;3===i.rank&&(s=!0,o=wo(i,[1,i.shape[0],i.shape[1],i.shape[2]])),Ce(4===o.rank,(function(){return"Error in avgPool: x must be rank 4 but got rank ".concat(o.rank,".")})),null!=n&&Ce(Ee(a),(function(){return"Error in avgPool: pad must be an integer when using, dimRoundingMode ".concat(n," but got pad ").concat(a,".")}));var l=qn.runKernelFunc((function(e,i){var s=Nl(o.shape,t,r,1,a,n);return i([o]),1===s.filterWidth&&1===s.filterHeight&&Ne(s.inShape,s.outShape)?o.clone():e.avgPool(o,s)}),{x:o},null,Rt,{filterSize:t,strides:r,pad:a,dimRoundingMode:n});return l=$i(l,i.dtype),s?wo(l,[l.shape[1],l.shape[2],l.shape[3]]):l}}),Gl=ri({avgPool3d_:function(e,t,r,a,n){var i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"NDHWC",o=arguments.length>6?arguments[6]:void 0;null==o?o=[1,1,1]:vs("dilations is deprecated, this field will be gone in v3.0.0.");var s=$n(e,"x","avgPool3d","float32"),l=s,u=!1;4===s.rank&&(u=!0,l=wo(s,[1,s.shape[0],s.shape[1],s.shape[2],s.shape[3]])),Ce(5===l.rank,(function(){return"Error in avgPool3d: x must be rank 5 but got rank ".concat(l.rank,".")})),Ce("NDHWC"===i,(function(){return"Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of "+i})),Ce(Vl(r,o),(function(){return"Error in avgPool3d: Either strides or dilations must be 1. Got strides ".concat(r," and dilations '").concat(o,"'")})),null!=n&&Ce(Ee(a),(function(){return"Error in avgPool3d: pad must be an integer when using, dimRoundingMode ".concat(n," but got pad ").concat(a,".")}));var h=qn.runKernelFunc((function(e,s){null==o&&(o=[1,1,1]);var u=El(l.shape,t,r,o,a,n,i);return s([l]),e.avgPool3d(l,u)}),{x:l},null,Et,{filterSize:t,strides:r,pad:a,dimRoundingMode:n,dataFormat:i,dilations:o});return h=$i(h,l.dtype),u?wo(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});function Hl(e,t){var r=e[0].length;e.forEach((function(e,t){Ce(e.length===r,(function(){return"Error in concat".concat(r,"D: rank of tensors[").concat(t,"] must be the same as the rank of the rest (").concat(r,")")}))})),Ce(t>=0&&t<r,(function(){return"Error in concat".concat(r,"D: axis must be between 0 and ").concat(r-1,".")}));var a=e[0];e.forEach((function(e,n){for(var i=0;i<r;i++)Ce(i===t||e[i]===a[i],(function(){return"Error in concat".concat(r,"D: Shape of tensors[").concat(n,"] (").concat(e,") does not match the shape of the rest (").concat(a,") along the non-concatenated axis ").concat(n,".")}))}))}function jl(e,t){for(var r=e[0].slice(),a=1;a<e.length;a++)r[t]+=e[a][t];return r}var ql=ri({concat_:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;Ce(e.length>=1,(function(){return"Pass at least one tensor to concat"}));var r=ei(e,"tensors","concat");return"complex64"===r[0].dtype&&r.forEach((function(e){if("complex64"!==e.dtype)throw new Error("Cannot concatenate complex64 tensors with a tensor\n          with dtype ".concat(e.dtype,". "))})),qn.runKernelFunc((function(e,a){var n=Be(t,r[0].shape)[0],i=jl(r.map((function(e){return e.shape})),n);if(0===Ae(i))return ii([],i);if(1===(r=r.filter((function(e){return e.size>0}))).length)return r[0];Hl(r.map((function(e){return e.shape})),n);var o=e.concat(r,n);return a(r),o}),r,null,Vt,{axis:t})}}),Xl=ri({sigmoid_:function(e){var t=$n(e,"x","sigmoid");return qn.runKernelFunc((function(e,r){var a=e.sigmoid(t);return r([a]),a}),{x:t},null,Na)}}),Kl=ri({slice_:function(e,t,r){var a=$n(e,"x","slice");if(0===a.rank)throw new Error("Slicing scalar is not possible");return qn.runKernelFunc((function(e,n){var i=_slicedToArray(Yo(a,t,r),2),o=i[0],s=i[1];return Lo(a,o,s),n([a]),e.slice(a,o,s)}),{x:a},null,Sa,{begin:t,size:r})}}),Ql=ri({tanh_:function(e){var t=$n(e,"x","tanh");return qn.runKernelFunc((function(e,r){var a=e.tanh(t);return r([a]),a}),{x:t},null,Ga)}}),Yl=ri({basicLSTMCell_:function(e,t,r,a,n,i){var o=$n(e,"forgetBias","basicLSTMCell"),s=$n(t,"lstmKernel","basicLSTMCell"),l=$n(r,"lstmBias","basicLSTMCell"),u=$n(a,"data","basicLSTMCell"),h=$n(n,"c","basicLSTMCell"),c=$n(i,"h","basicLSTMCell"),f=ql([u,c],1),d=Co(f,s),v=Fs(d,l),p=v.shape[1]/4,g=[v.shape[0],p],_=Kl(v,[0,0],g),m=Kl(v,[0,p],g),y=Kl(v,[0,2*p],g),b=Kl(v,[0,3*p],g),x=Fs(Os(Xl(_),Ql(m)),Os(h,Xl(Fs(o,y))));return[x,Os(Ql(x),Xl(b))]}}),Jl=ri({batchToSpaceND_:function(e,t,r){var a=$n(e,"x","batchToSpaceND"),n=t.reduce((function(e,t){return e*t}));return Ce(a.rank>=1+t.length,(function(){return"input rank is ".concat(a.rank," but should be > than blockShape.length ").concat(t.length)})),Ce(r.length===t.length,(function(){return"crops.length is ".concat(r.length," but should be equal to blockShape.length  ").concat(t.length)})),Ce(a.shape[0]%n==0,(function(){return"input tensor batch is ".concat(a.shape[0]," but is not divisible by the product of the elements of blockShape ").concat(t.join(" * ")," === ").concat(n)})),qn.runKernelFunc((function(e){return e.batchToSpaceND(a,t,r)}),{x:a},null,Dt,{blockShape:t,crops:r})}});function Zl(e){return null==e?null:0===e.rank?wo(e,[e.size]):1===e.rank?e:2===e.rank?wo(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?wo(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e}var $l=ri({batchNorm_:function(e,t,r,a,n,i){null==i&&(i=.001);var o,s,l=$n(e,"x","batchNorm"),u=$n(t,"mean","batchNorm"),h=$n(r,"variance","batchNorm");null!=n&&(o=$n(n,"scale","batchNorm")),null!=a&&(s=$n(a,"offset","batchNorm")),Ce(u.rank===h.rank,(function(){return"Batch normalization gradient requires mean and variance to have equal ranks."})),Ce(null==s||u.rank===s.rank,(function(){return"Batch normalization gradient requires mean and offset to have equal ranks."})),Ce(null==o||u.rank===o.rank,(function(){return"Batch normalization gradient requires mean and scale to have equal ranks."}));var c=function(e){return 0===e.rank||1===e.rank?wo(e,[1,1,1,e.size]):2===e.rank?wo(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?wo(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e}(l),f=qn.runKernelFunc((function(e,t){return t([c,u,h,o]),e.batchNorm(c,Zl(u),Zl(h),Zl(s),Zl(o),i)}),{x:c,scale:o,offset:s,mean:u,variance:h},null,_r,{varianceEpsilon:i});return wo(f,l.shape)}}),eu=ri({batchNorm2d_:function(e,t,r,a,n,i){var o,s,l=$n(e,"x","batchNorm"),u=$n(t,"mean","batchNorm"),h=$n(r,"variance","batchNorm");return null!=n&&(o=$n(n,"scale","batchNorm")),null!=a&&(s=$n(a,"offset","batchNorm")),Ce(2===l.rank,(function(){return"Error in batchNorm2D: x must be rank 2 but got rank "+l.rank+"."})),Ce(2===u.rank||1===u.rank,(function(){return"Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ".concat(u.rank,".")})),Ce(2===h.rank||1===h.rank,(function(){return"Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ".concat(h.rank,".")})),null!=o&&Ce(2===o.rank||1===o.rank,(function(){return"Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ".concat(o.rank,".")})),null!=s&&Ce(2===s.rank||1===s.rank,(function(){return"Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ".concat(s.rank,".")})),$l(l,u,h,s,o,i)}}),tu=ri({batchNorm3d_:function(e,t,r,a,n,i){var o,s,l=$n(e,"x","batchNorm"),u=$n(t,"mean","batchNorm"),h=$n(r,"variance","batchNorm");return null!=n&&(o=$n(n,"scale","batchNorm")),null!=a&&(s=$n(a,"offset","batchNorm")),Ce(3===l.rank,(function(){return"Error in batchNorm3D: x must be rank 3 but got rank "+l.rank+"."})),Ce(3===u.rank||1===u.rank,(function(){return"Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ".concat(u.rank,".")})),Ce(3===h.rank||1===h.rank,(function(){return"Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ".concat(h.rank,".")})),null!=o&&Ce(3===o.rank||1===o.rank,(function(){return"Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ".concat(o.rank,".")})),null!=s&&Ce(3===s.rank||1===s.rank,(function(){return"Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ".concat(s.rank,".")})),$l(l,u,h,s,o,i)}}),ru=ri({batchNorm4d_:function(e,t,r,a,n,i){var o,s,l=$n(e,"x","batchNorm"),u=$n(t,"mean","batchNorm"),h=$n(r,"variance","batchNorm");return null!=n&&(o=$n(n,"scale","batchNorm")),null!=a&&(s=$n(a,"offset","batchNorm")),Ce(4===l.rank,(function(){return"Error in batchNorm4D: x must be rank 4 but got rank "+l.rank+"."})),Ce(4===u.rank||1===u.rank,(function(){return"Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ".concat(u.rank,".")})),Ce(4===h.rank||1===h.rank,(function(){return"Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ".concat(h.rank,".")})),null!=o&&Ce(4===o.rank||1===o.rank,(function(){return"Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ".concat(o.rank,".")})),null!=s&&Ce(4===s.rank||1===s.rank,(function(){return"Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ".concat(s.rank,".")})),$l(l,u,h,s,o,i)}}),au=ri({broadcastTo_:function(e,t){var r=$n(e,"broadcastTo","x"),a=r.shape;if(t.some((function(e){return!(e>0)||e%1!=0})))throw new Error("broadcastTo(): Invalid broadcast shape [".concat(t,"]."));if(t.length<r.rank)throw new Error("broadcastTo(): shape.length=".concat(t.length," < input.rank=").concat(r.rank,"."));if(t.length>r.rank){for(var n=r.shape.slice();n.length<t.length;)n.unshift(1);r=wo(r,n)}for(var i=r.shape,o=Array.from(t),s=t.length-1;s>=0;s--)if(i[s]===t[s])o[s]=1;else if(1!==r.shape[s])throw new Error("broadcastTo(): [".concat(a,"] cannot be broadcast to [").concat(t,"]."));return 0===o.map((function(e,t){return e>1?t:-1})).filter((function(e){return e>=0})).length?eo(r):qn.runKernelFunc((function(e){return e.tile(r,o)}),{x:r},null,Ot,{shape:t,inputShape:i})}}),nu=ri({ceil_:function(e){var t=$n(e,"x","ceil");return qn.runKernelFunc((function(e){return e.ceil(t)}),{x:t},null,zt)}}),iu=ri({clipByValue_:function(e,t,r){var a=$n(e,"x","clipByValue");return Ce(t<=r,(function(){return"Error in clip: min (".concat(t,") must be less than or equal to max (").concat(r,").")})),qn.runKernelFunc((function(e,n){var i=e.clip(a,t,r);return n([a]),i}),{x:a},null,Bt,{clipValueMin:t,clipValueMax:r})}}),ou=ri({concat1d_:function(e){return ql(e,0)}}),su=ri({concat2d_:function(e,t){return ql(e,t)}}),lu=ri({concat3d_:function(e,t){return ql(e,t)}}),uu=ri({concat4d_:function(e,t){return ql(e,t)}}),hu=ri({conv2d_:function(e,t,r,a){var n=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"NHWC",i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:[1,1],o=arguments.length>6?arguments[6]:void 0,s=$n(e,"x","conv2d"),l=$n(t,"filter","conv2d"),u=s,h=!1;3===s.rank&&(h=!0,u=wo(s,[1,s.shape[0],s.shape[1],s.shape[2]])),Ce(4===u.rank,(function(){return"Error in conv2d: input must be rank 4, but got rank ".concat(u.rank,".")})),Ce(4===l.rank,(function(){return"Error in conv2d: filter must be rank 4, but got rank "+l.rank+"."})),null!=o&&Ce(Ee(a),(function(){return"Error in conv2d: pad must be an integer when using, dimRoundingMode ".concat(o," but got pad ").concat(a,".")}));var c="NHWC"===n?u.shape[3]:u.shape[1];Ce(c===l.shape[2],(function(){return"Error in conv2d: depth of input (".concat(c,") must match input depth for filter ").concat(l.shape[2],".")})),Ce(Vl(r,i),(function(){return"Error in conv2D: Either strides or dilations must be 1. Got strides ".concat(r," and dilations '").concat(i,"'")}));var f=qn.runKernelFunc((function(e,t){var s=Ul(n),h=Fl(u.shape,l.shape,r,i,a,o,!1,s),c=e.conv2d(u,l,h);return t([u,l]),c}),{x:u,filter:l},null,Ut,{strides:r,pad:a,dataFormat:n,dilations:i,dimRoundingMode:o});return h?wo(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),cu=ri({conv1d_:function(e,t,r,a){var n=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"NWC",i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1,o=arguments.length>6?arguments[6]:void 0,s=$n(e,"x","conv1d"),l=$n(t,"filter","conv1d"),u=s,h=!1;2===s.rank&&(h=!0,u=wo(s,[1,s.shape[0],s.shape[1]])),Ce(3===u.rank,(function(){return"Error in conv1d: input must be rank 3, but got rank ".concat(u.rank,".")})),Ce(3===l.rank,(function(){return"Error in conv1d: filter must be rank 3, but got rank "+l.rank+"."})),null!=o&&Ce(Ee(a),(function(){return"Error in conv1d: pad must be an integer when using, dimRoundingMode ".concat(o," but got pad ").concat(a,".")})),Ce(u.shape[2]===l.shape[1],(function(){return"Error in conv1d: depth of input (".concat(u.shape[2],") must match input depth for filter ").concat(l.shape[1],".")})),Ce(Vl(r,i),(function(){return"Error in conv1D: Either stride or dilation must be 1. Got stride ".concat(r," and dilation '").concat(i,"'")})),Ce("NWC"===n,(function(){return"Error in conv1d: got dataFormat of ".concat(n," but only NWC is currently supported.")}));var c=wo(l,[1,l.shape[0],l.shape[1],l.shape[2]]),f=wo(u,[u.shape[0],1,u.shape[1],u.shape[2]]),d=hu(f,c,[1,r],a,"NHWC",[1,i],o);return wo(d,h?[d.shape[2],d.shape[3]]:[d.shape[0],d.shape[2],d.shape[3]])}}),fu=ri({conv2DBackpropInput_:function(e,t,r,a,n){var i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"NHWC",o=arguments.length>6?arguments[6]:void 0;Ce(e.length===t.rank,(function(){return"Length of inShape (".concat(e.length,") and rank of dy (").concat(t.rank,") must match")}));var s=e,l=t,u=!1;3===t.rank&&(u=!0,l=wo(t,[1,t.shape[0],t.shape[1],t.shape[2]]),s=[1,e[0],e[1],e[2]]),Ce(4===s.length,(function(){return"Error in conv2dDerInput: inShape must be length 4, but got length "+s.length+"."})),Ce(4===l.rank,(function(){return"Error in conv2dDerInput: dy must be rank 4, but got rank "+l.rank})),Ce(4===r.rank,(function(){return"Error in conv2dDerInput: filter must be rank 4, but got rank "+r.rank}));var h="NHWC"===i?s[3]:s[1],c="NHWC"===i?l.shape[3]:l.shape[1];Ce(h===r.shape[2],(function(){return"Error in conv2dDerInput: depth of input (".concat(h,") must match input depth for filter ").concat(r.shape[2],".")})),Ce(c===r.shape[3],(function(){return"Error in conv2dDerInput: depth of output (".concat(c,") must match output depth for filter ").concat(r.shape[3],".")})),null!=o&&Ce(Ee(n),(function(){return"Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode ".concat(o," but got pad ").concat(n,".")}));var f=qn.runKernelFunc((function(e,t){var u=Ul(i),h=Fl(s,r.shape,a,1,n,o,!1,u),c=e.conv2dDerInput(l,r,h);return t([l,r]),c}),{dy:l,filter:r},null,Gt,{strides:a,pad:n,dataFormat:i,dimRoundingMode:o,inputShape:s});return u?wo(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),du=ri({conv2dTranspose_:function(e,t,r,a,n,i){var o=$n(e,"x","conv2dTranspose"),s=$n(t,"filter","conv2dTranspose");return fu(r,o,s,a,n,"NHWC",i)}}),vu=ri({conv3d_:function(e,t,r,a){var n=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"NDHWC",i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:[1,1,1],o=$n(e,"x","conv3d"),s=$n(t,"filter","conv3d"),l=o,u=!1;4===o.rank&&(u=!0,l=wo(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),Ce(5===l.rank,(function(){return"Error in conv3d: input must be rank 5, but got rank ".concat(l.rank,".")})),Ce(5===s.rank,(function(){return"Error in conv3d: filter must be rank 5, but got rank "+s.rank+"."})),Ce(l.shape[4]===s.shape[3],(function(){return"Error in conv3d: depth of input (".concat(l.shape[4],") must match input depth for filter ").concat(s.shape[3],".")})),Ce(Vl(r,i),(function(){return"Error in conv3D: Either strides or dilations must be 1. Got strides ".concat(r," and dilations '").concat(i,"'")})),Ce("NDHWC"===n,(function(){return"Error in conv3d: got dataFormat of ".concat(n," but only NDHWC is currently supported.")}));var h=qn.runKernelFunc((function(e,t){var n=Ml(l.shape,s.shape,r,i,a),o=e.conv3d(l,s,n);return t([l,s]),o}),{x:l,filter:s},null,Ht,{strides:r,pad:a,dataFormat:n,dilations:i});return u?wo(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),pu=ri({conv3DBackpropInput_:function(e,t,r,a,n){Ce(e.length===t.rank,(function(){return"Length of inShape (".concat(e.length,") and rank of dy (").concat(t.rank,") must match")}));var i=e,o=t,s=!1;4===t.rank&&(s=!0,o=wo(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),i=[1,e[0],e[1],e[2],e[3]]);var l=i[4],u=o.shape[4];Ce(5===i.length,(function(){return"Error in conv3dDerInput: inShape must be length 5, but got length "+i.length+"."})),Ce(5===o.rank,(function(){return"Error in conv3dDerInput: dy must be rank 5, but got rank "+o.rank})),Ce(5===r.rank,(function(){return"Error in conv3dDerInput: filter must be rank 5, but got rank "+r.rank})),Ce(l===r.shape[3],(function(){return"Error in conv3dDerInput: depth of input (".concat(l,") must match input depth for filter ").concat(r.shape[3],".")})),Ce(u===r.shape[4],(function(){return"Error in conv3dDerInput: depth of output (".concat(u,") must match output depth for filter ").concat(r.shape[4],".")}));var h=qn.runKernelFunc((function(e){var t=Ml(i,r.shape,a,1,n);return e.conv3dDerInput(o,r,t)}),{dy:o,filter:r},null,qt,{pad:n,strides:a,inputShape:i});return s?wo(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),gu=ri({conv3dTranspose_:function(e,t,r,a,n){var i=$n(e,"x","conv3dTranspose"),o=$n(t,"filter","conv3dTranspose");return pu(r,i,o,a,n)}}),_u=ri({cos_:function(e){var t=$n(e,"x","cos");return qn.runKernelFunc((function(e,r){var a=e.cos(t);return r([t]),a}),{x:t},null,Xt)}}),mu=ri({cosh_:function(e){var t=$n(e,"x","cosh");return qn.runKernelFunc((function(e,r){var a=e.cosh(t);return r([t]),a}),{x:t},null,Kt)}}),yu=ri({cumsum_:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=arguments.length>3&&void 0!==arguments[3]&&arguments[3],n=$n(e,"x","cumsum");return qn.runKernelFunc((function(e,i){var o=_l([t],n.rank),s=n;null!=o&&(s=So(n,o));var l=yl(1,n.rank)[0],u=e.cumsum(s,l,r,a);if(i([n]),null!=o){var h=ml(o);u=So(u,h)}return u}),{x:n},null,Qt,{axis:t,exclusive:r,reverse:a})}}),bu=ri({depthToSpace_:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"NHWC",a=$n(e,"x","depthToSpace"),n="NHWC"===r?a.shape[1]:a.shape[2],i="NHWC"===r?a.shape[2]:a.shape[3],o="NHWC"===r?a.shape[3]:a.shape[1];return Ce(n*t>=0,(function(){return"Negative dimension size caused by overflow when multiplying\n    ".concat(n," and ").concat(t,"  for depthToSpace with input shape\n    ").concat(a.shape)})),Ce(i*t>=0,(function(){return"Negative dimension size caused by overflow when multiplying\n    ".concat(i," and ").concat(t," for depthToSpace with input shape\n        ").concat(a.shape)})),Ce(o%(t*t)==0,(function(){return"Dimension size must be evenly divisible by ".concat(t*t," but is ").concat(o," for depthToSpace with input shape ").concat(a.shape)})),qn.runKernelFunc((function(e){return e.depthToSpace(a,t,r)}),{x:a},null,Jt,{blockSize:t,dataFormat:r})}}),xu=ri({depthwiseConv2d_:function(e,t,r,a){var n=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"NHWC",i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:[1,1],o=arguments.length>6?arguments[6]:void 0,s=$n(e,"x","depthwiseConv2d"),l=$n(t,"filter","depthwiseConv2d"),u=s,h=!1;3===s.rank&&(h=!0,u=wo(s,[1,s.shape[0],s.shape[1],s.shape[2]])),Ce(4===u.rank,(function(){return"Error in depthwiseConv2d: input must be rank 4, but got rank ".concat(u.rank,".")})),Ce(4===l.rank,(function(){return"Error in depthwiseConv2d: filter must be rank 4, but got rank "+l.rank+"."})),Ce(u.shape[3]===l.shape[2],(function(){return"Error in depthwiseConv2d: number of input channels (".concat(u.shape[3],") must match the inChannels dimension in filter ").concat(l.shape[2],".")})),null!=o&&Ce(Ee(a),(function(){return"Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ".concat(o," but got pad ").concat(a,".")}));var c=qn.runKernelFunc((function(e,t){null==i&&(i=[1,1]),Ce(Vl(r,i),(function(){return"Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ".concat(r," and dilations '").concat(i,"'")}));var n=Fl(u.shape,l.shape,r,i,a,o,!0),s=e.depthwiseConv2D(u,l,n);return t([u,l]),s}),{x:u,filter:l},null,Zt,{strides:r,pad:a,dataFormat:n,dilations:i,dimRoundingMode:o});return h?wo(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),ku=ri({diag_:function(e){var t=$n(e,"x","diag");return qn.runKernelFunc((function(r){var a=wo(t,[t.size]),n=r.diag(a),i=[].concat(_toConsumableArray(e.shape),_toConsumableArray(e.shape));return wo(n,i)}),{x:t},null,tr)}}),wu=ri({dilation2d_:function(e,t,r,a){var n=arguments.length>4&&void 0!==arguments[4]?arguments[4]:[1,1],i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"NHWC",o=$n(e,"x","dilation2d"),s=$n(t,"filter","dilation2d");Ce(3===o.rank||4===o.rank,(function(){return"Error in dilation2d: input must be rank 3 or 4, but got rank "+o.rank+"."})),Ce(3===s.rank,(function(){return"Error in dilation2d: filter must be rank 3, but got rank "+s.rank+"."})),Ce("NHWC"===i,(function(){return"Error in dilation2d: Only NHWC is currently supported, but got dataFormat of "+i}));var l=o,u=!1;3===o.rank&&(l=wo(o,[1,o.shape[0],o.shape[1],o.shape[2]]),u=!0);var h=qn.runKernel(rr,{x:l,filter:s},{strides:r,pad:a,dilations:n});return u?wo(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),Cu=ri({equal_:function(e,t){var r,a=$n(e,"a","equal"),n=$n(t,"b","equal");return r=_slicedToArray(Pn(a,n),2),a=r[0],n=r[1],al(a.shape,n.shape),qn.runKernelFunc((function(e){return e.equal(a,n)}),{a:a,b:n},null,ur)}}),Tu=ri({where_:function(e,t,r){var a=$n(t,"a","where"),n=$n(r,"b","where"),i=$n(e,"condition","where","bool"),o=al(a.shape,n.shape),s=au(a,o),l=au(n,o);return 1===i.rank&&Ce(i.shape[0]===a.shape[0],(function(){return"The first dimension of `a` must match the size of `condition`."})),1!==i.rank&&Te(i.shape,l.shape,"Error in where: "),qn.runKernelFunc((function(e,t){var r=e.select(i,s,l);return t([i]),r}),{condition:i,t:s,e:l},null,Ca)}}),Su=ri({divNoNan_:function(e,t){var r=$n(e,"a","div"),a=$n(t,"b","div"),n=_slicedToArray(Pn(r,a),2);r=n[0],a=n[1];var i=Ds(r,a),o=Bs(i),s=Cu(a,o);return Tu(s,o,i)}}),Iu=ri({dot_:function(e,t){var r=$n(e,"t1","dot"),a=$n(t,"t2","dot");Ce(!(1!==r.rank&&2!==r.rank||1!==a.rank&&2!==a.rank),(function(){return"Error in dot: inputs must all be rank 1 or 2, but got ranks ".concat(r.rank," and ").concat(a.rank,".")}));var n=1===r.rank?r.size:r.shape[1],i=1===a.rank?a.size:a.shape[0];if(Ce(n===i,(function(){return"Error in dot: inner dimensions of inputs must match, but got ".concat(n," and ").concat(i,".")})),1===r.rank&&1===a.rank){var o=wo(r,[1,-1]),s=wo(a,[-1,1]),l=Co(o,s);return wo(l,[])}if(1===r.rank&&2===a.rank){var u=wo(r,[1,-1]),h=wo(a,[a.shape[0],a.shape[1]]),c=Co(u,h);return wo(c,[c.size])}if(2===r.rank&&1===a.rank){var f=wo(a,[-1,1]),d=Co(r,f);return wo(d,[d.size])}var v=wo(a,[a.shape[0],a.shape[1]]);return Co(r,v)}}),Au=ri({elu_:function(e){var t=$n(e,"x","elu");return qn.runKernelFunc((function(e,r){var a=e.elu(t);return r([a]),a}),{x:t},null,or)}}),Ru=ri({erf_:function(e){var t=$n(e,"x","erf");return Ce("int32"===t.dtype||"float32"===t.dtype,(function(){return"Input dtype must be `int32` or `float32`."})),"int32"===t.dtype&&(t=$i(t,"float32")),qn.runKernelFunc((function(e,r){var a=e.erf(t);return r([t]),a}),{x:t},null,lr)}}),Nu=ri({exp_:function(e){var t=$n(e,"x","exp");return qn.runKernelFunc((function(e,r){var a=e.exp(t);return r([a]),a}),{x:t},null,hr)}}),Eu=ri({expandDims_:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=$n(e,"x","expandDims",null);Ce(t<=r.rank,(function(){return"Axis must be <= rank of the tensor"}));var a=r.shape.slice();return t<0&&(Ce(-(r.rank+1)<=t,(function(){return"Axis must be in the interval [".concat(-(r.rank+1),", ").concat(r.rank,"]")})),t=r.rank+t+1),a.splice(t,0,1),wo(r,a)}}),Fu=ri({expm1_:function(e){var t=$n(e,"x","expm1");return qn.runKernelFunc((function(e,r){var a=e.expm1(t);return r([t]),a}),{x:t},null,cr)}}),Mu=ri({tile_:function(e,t){var r=$n(e,"x","tile",null);return Ce(r.rank===t.length,(function(){return"Error in transpose: rank of input ".concat(r.rank," must match length of reps ").concat(t,".")})),qn.runKernelFunc((function(e,a){var n=e.tile(r,t);return a([r]),n}),{x:r},null,Ha,{reps:t},[r])}}),Du=ri({eye_:function(e,t,r){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"float32";null==t&&(t=e);for(var n=Zi([e,t],a),i=e<=t?e:t,o=0;o<i;++o)n.set(1,o,o);var s=wo(n.toTensor(),[e,t]);if(null==r)return s;if(1===r.length)return Mu(Eu(s,0),[r[0],1,1]);if(2===r.length)return Mu(Eu(Eu(s,0),0),[r[0],r[1],1,1]);if(3===r.length)return Mu(Eu(Eu(Eu(s,0),0),0),[r[0],r[1],r[2],1,1]);throw new Error("eye() currently supports only 1D and 2D batchShapes, but received ".concat(r.length,"D."))}}),Ou=ri({floor_:function(e){var t=$n(e,"x","floor");return qn.runKernelFunc((function(e){return e.floor(t)}),{x:t},null,pr)}}),Lu=30;function zu(e){return e<=Lu?e:$e(e,Math.floor(Math.sqrt(e)))}function Bu(e,t){var r,a=!1;for(e<=Lu?(r=e,a=!0):r=$e(e,Math.floor(Math.sqrt(e)));!a;)r>t||r===e?a=!0:r=$e(e,r+1);return r}function Pu(e,t,r){for(var a=[],n=e.length,i=0;i<n;i++)a.push(i!==t?e[i]:r);return a}function Vu(e,t,r){for(var a=e.shape[r],n=[],i=1,o=1,s=0;s<r;s++)n.push(e.shape[s]),i*=e.shape[s];for(var l=0;l<t.rank;l++)n.push(t.shape[l]);for(var u=r+1;u<e.rank;u++)n.push(e.shape[u]),o*=e.shape[u];return{batchSize:i,sliceSize:o,dimSize:a,outputShape:n}}var Uu=ri({gather_:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,a=$n(e,"x","gather"),n=$n(t,"indices","gather","int32");return qn.runKernelFunc((function(e,t){var i=Be(r,a.shape)[0],o=Vu(a,n,i),s=e.gather(a,wo(n,[n.size]),i);return t([a,n]),wo(s,o.outputShape)}),{x:a,indices:n},null,mr,{axis:r})}}),Wu=ri({greater_:function(e,t){var r,a=$n(e,"a","greater"),n=$n(t,"b","greater");return r=_slicedToArray(Pn(a,n),2),a=r[0],n=r[1],al(a.shape,n.shape),qn.runKernelFunc((function(e){return e.greater(a,n)}),{a:a,b:n},null,br)}}),Gu=ri({greaterEqual_:function(e,t){var r,a=$n(e,"a","greaterEqual"),n=$n(t,"b","greaterEqual");return r=_slicedToArray(Pn(a,n),2),a=r[0],n=r[1],al(a.shape,n.shape),qn.runKernelFunc((function(e,t){var r=e.greaterEqual(a,n);return t([a,n]),r}),{a:a,b:n},null,xr)}}),Hu=ri({imag_:function(e){var t=$n(e,"input","imag");return qn.runKernelFunc((function(e){return e.imag(t)}),{input:t},null,Cr)}}),ju=ri({isFinite_:function(e){var t=$n(e,"x","isFinite");return qn.runKernelFunc((function(e){return e.isFinite(t)}),{x:t},null,Tr)}}),qu=ri({isInf_:function(e){var t=$n(e,"x","isInf");return qn.runKernelFunc((function(e){return e.isInf(t)}),{x:t},null,Sr)}}),Xu=ri({isNaN_:function(e){var t=$n(e,"x","isNaN");return qn.runKernelFunc((function(e){return e.isNaN(t)}),{x:t},null,Ir)}}),Ku=ri({leakyRelu_:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.2,r=$n(e,"x","leakyRelu");return nl(Os(qs(t),r),r)}}),Qu=ri({less_:function(e,t){var r,a=$n(e,"a","less"),n=$n(t,"b","less");return r=_slicedToArray(Pn(a,n),2),a=r[0],n=r[1],al(a.shape,n.shape),qn.runKernelFunc((function(e){return e.less(a,n)}),{a:a,b:n},null,Ar)}}),Yu=ri({lessEqual_:function(e,t){var r,a=$n(e,"a","lessEqual"),n=$n(t,"b","lessEqual");return r=_slicedToArray(Pn(a,n),2),a=r[0],n=r[1],al(a.shape,n.shape),qn.runKernelFunc((function(e,t){var r=e.lessEqual(a,n);return t([a,n]),r}),{a:a,b:n},null,Rr)}});function Ju(e,t,r){if(r<=0)throw new Error("The number of values should be positive.");return qn.runKernelFunc((function(a){return a.linspace(e,t,r)}),{},null,Nr,{start:e,stop:t,num:r})}var Zu=ri({localResponseNormalization_:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:5,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1,n=arguments.length>4&&void 0!==arguments[4]?arguments[4]:.5,i=$n(e,"x","localResponseNormalization");Ce(4===i.rank||3===i.rank,(function(){return"Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ".concat(i.rank,".")})),Ce(Ee(t),(function(){return"Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ".concat(t,".")}));var o=i,s=!1;3===i.rank&&(s=!0,o=wo(i,[1,i.shape[0],i.shape[1],i.shape[2]]));var l=qn.runKernelFunc((function(e,i){var s=e.localResponseNormalization4D(o,t,r,a,n);return i([o,s]),s}),{x:o},null,zr,{depthRadius:t,bias:r,alpha:a,beta:n});return s?wo(l,[l.shape[1],l.shape[2],l.shape[3]]):l}}),$u=ri({log_:function(e){var t=$n(e,"x","log");return qn.runKernelFunc((function(e,r){var a=e.log(t);return r([t]),a}),{x:t},null,Er)}}),eh=ri({log1p_:function(e){var t=$n(e,"x","log1p");return qn.runKernelFunc((function(e,r){var a=e.log1p(t);return r([t]),a}),{x:t},null,Fr)}}),th=ri({neg_:function(e){var t=$n(e,"x","neg");return qn.runKernelFunc((function(e){return e.neg(t)}),{x:t},null,Zr)}}),rh=ri({softplus_:function(e){var t=$n(e,"x","softplus");return qn.runKernelFunc((function(e,r){var a=e.softplus(t);return r([t]),a}),{x:t},null,Ea)}}),ah=ri({logSigmoid_:function(e){var t=$n(e,"x","logSigmoid");return Hs((function(e){return{value:th(rh(th(e))),gradFunc:function(t){return Os(t,Xl(th(e)))}}}))(t)}}),nh=ri({max_:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=$n(e,"x","max");return qn.runKernelFunc((function(e,n){var i=Be(t,a.shape),o=_l(i,a.rank),s=a;null!=o&&(s=So(a,o),i=yl(i.length,s.rank));var l=e.max(s,i);null!=o&&s.dispose();var u=l;if(r){var h=pl(u.shape,Be(t,a.shape));u=wo(u,h),l.dispose()}return n([a,u]),u}),{x:a},null,Pr,{reductionIndices:t,keepDims:r})}}),ih=ri({sum_:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=$n(e,"x","sum");return"bool"===a.dtype&&(a=$i(a,"int32")),qn.runKernelFunc((function(e,n){n([a]);var i=Be(t,a.shape),o=_l(i,a.rank),s=i,l=a;null!=o&&(l=So(a,o),s=yl(s.length,a.rank));var u=e.sum(l,s);if(r){var h=pl(u.shape,i);u=wo(u,h)}return u}),{x:a},null,Ma,{axis:t,keepDims:r})}}),oh=ri({logSoftmax_:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1,r=$n(e,"logits","logSoftmax");if(-1===t&&(t=r.rank-1),t!==r.rank-1)throw Error("Log Softmax along a non-last dimension is not yet supported. Logits was rank ".concat(r.rank," and axis was ").concat(t));return qn.runKernelFunc((function(r,a){var n=nh(e,t,!0),i=Zs(e,n),o=Zs($i(i,"float32"),$u(ih(Nu(i),t,!0)));return a([o]),o}),{logits:r},null,Lr,{axis:t})}}),sh=ri({logSumExp_:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=$n(e,"x","logSumExp"),n=Be(t,a.shape),i=nh(a,n,!0),o=Zs(a,i),s=Nu(o),l=ih(s,n),u=$u(l),h=Fs(wo(i,u.shape),u);if(r){var c=pl(h.shape,n);return wo(h,c)}return h}}),lh=ri({logicalAnd_:function(e,t){var r=$n(e,"a","logicalAnd","bool"),a=$n(t,"b","logicalAnd","bool");return al(r.shape,a.shape),qn.runKernelFunc((function(e){return e.logicalAnd(r,a)}),{a:r,b:a},null,Mr)}}),uh=ri({logicalNot_:function(e){var t=$n(e,"x","logicalNot","bool");return qn.runKernelFunc((function(e){return e.logicalNot(t)}),{x:t},null,Dr)}}),hh=ri({logicalOr_:function(e,t){var r=$n(e,"a","logicalOr","bool"),a=$n(t,"b","logicalOr","bool");return al(r.shape,a.shape),qn.runKernelFunc((function(e){return e.logicalOr(r,a)}),{a:r,b:a},null,Or)}}),ch=ri({logicalXor_:function(e,t){var r=$n(e,"a","logicalXor","bool"),a=$n(t,"b","logicalXor","bool");return al(r.shape,a.shape),lh(hh(e,t),uh(lh(e,t)))}}),fh=ri({maxPool_:function(e,t,r,a,n){var i=$n(e,"x","maxPool"),o=i,s=!1;3===i.rank&&(s=!0,o=wo(i,[1,i.shape[0],i.shape[1],i.shape[2]])),Ce(4===o.rank,(function(){return"Error in maxPool: input must be rank 4 but got rank ".concat(o.rank,".")})),Ce(Vl(r,1),(function(){return"Error in maxPool: Either strides or dilations must be 1. Got strides ".concat(r," and dilations '1'")})),null!=n&&Ce(Ee(a),(function(){return"Error in maxPool: pad must be an integer when using, dimRoundingMode ".concat(n," but got pad ").concat(a,".")}));var l=qn.runKernelFunc((function(e,i){var s,l=Nl(o.shape,t,r,1,a,n);return s=1===l.filterWidth&&1===l.filterHeight&&Ne(l.inShape,l.outShape)?o.clone():e.maxPool(o,l),i([o,s]),s}),{x:o},null,Ur,{filterSize:t,strides:r,pad:a,dimRoundingMode:n});return s?wo(l,[l.shape[1],l.shape[2],l.shape[3]]):l}}),dh=ri({maxPool3d_:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[1,1,1],r=arguments.length>2?arguments[2]:void 0,a=arguments.length>3?arguments[3]:void 0,n=arguments.length>4?arguments[4]:void 0,i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"NDHWC",o=arguments.length>6?arguments[6]:void 0;null==o?o=[1,1,1]:vs("dilations is deprecated, this field will be gone in v3.0.0.");var s=$n(e,"x","maxPool3d"),l=s,u=!1;4===s.rank&&(u=!0,l=wo(s,[1,s.shape[0],s.shape[1],s.shape[2],s.shape[3]])),Ce(5===l.rank,(function(){return"Error in maxPool3d: x must be rank 5 but got rank ".concat(l.rank,".")})),Ce("NDHWC"===i,(function(){return"Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of "+i})),Ce(Vl(r,o),(function(){return"Error in maxPool3d: Either strides or dilations must be 1. Got strides ".concat(r," and dilations '").concat(o,"'")})),null!=n&&Ce(Ee(a),(function(){return"Error in maxPool3d: pad must be an integer when using, dimRoundingMode ".concat(n," but got pad ").concat(a,".")}));var h=qn.runKernelFunc((function(e,s){null==o&&(o=[1,1,1]);var u=El(l.shape,t,r,o,a,n,i),h=e.maxPool3d(l,u);return s([l,h]),h}),{x:l},null,Gr,{filterSize:t,strides:r,pad:a,dimRoundingMode:n,dataFormat:i,dilations:o});return u?wo(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),vh=ri({maxPoolWithArgmax_:function(e,t,r,a){var n=arguments.length>4&&void 0!==arguments[4]&&arguments[4],i=$n(e,"x","maxPoolWithArgmax"),o=qn.runKernel(jr,{x:i},{filterSize:t,strides:r,pad:a,includeBatchInIndex:n});return{result:o[0],indexes:o[1]}}});function ph(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"float32";if("complex64"===t){var r=ph(e,"float32"),a=ph(e,"float32");return ai(r,a)}var n=at(Ae(e),t);return qn.makeTensor(n,e,t)}function gh(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"float32";if("complex64"===t){var r=gh(e,"float32"),a=ph(e,"float32");return ai(r,a)}var n=rt(Ae(e),t);return qn.makeTensor(n,e,t)}var _h=ri({mean_:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=$n(e,"x","mean"),n=Be(t,a.shape),i=Ae(vl(a.shape,n)[1]),o={x:a},s={axis:t,keepDims:r},l=function(){var e=qs(i),n=e.dtype===a.dtype?a:$i(a,e.dtype),o=Ds(n,e);return ih(o,t,r)};return Hs((function(e){return{value:qn.runKernelFunc(l,o,null,qr,s),gradFunc:function(t){var r=e.shape.slice();n.forEach((function(e){r[e]=1}));var a=wo(t,r);return Ds(Os(a,gh(e.shape,"float32")),i)}}}))(a)}}),mh=ri({min_:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=$n(e,"x","min");return qn.runKernelFunc((function(e,n){var i=Be(t,a.shape),o=i,s=_l(o,a.rank),l=a;null!=s&&(l=So(a,s),o=yl(o.length,a.rank));var u=e.min(l,o);null!=s&&l.dispose();var h=u;if(r){var c=pl(h.shape,i);h=wo(u,c),u.dispose()}return n([a,h]),h}),{x:a},null,Xr,{axis:t,keepDims:r})}}),yh=ri({minimum_:function(e,t){var r,a=$n(e,"a","minimum"),n=$n(t,"b","minimum");return r=_slicedToArray(Pn(a,n),2),a=r[0],n=r[1],"bool"===a.dtype&&(a=$i(a,"int32"),n=$i(n,"int32")),al(a.shape,n.shape),qn.runKernelFunc((function(e,t){var r=e.minimum(a,n);return t([a,n]),r}),{a:a,b:n},null,Kr)}}),bh=ri({mirrorPad_:function(e,t,r){Ce("reflect"===r||"symmetric"===r,(function(){return"Invalid mode. Mode must be either reflect or symmetric. Got ".concat(r,".")}));var a=$n(e,"x","mirrorPad");if(0===a.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");Ce(t.length===a.rank,(function(){return"Padding doesn't match input. Must be ".concat(a.rank,". Got ").concat(t.length,".")}));for(var n="reflect"===r?1:0,i=function(e){Ce(2===t[e].length,(function(){return"Invalid number of paddings. Must be length of 2 each."})),Ce(t[e][0]>=0&&t[e][0]<=a.shape[e]-n&&t[e][1]>=0&&t[e][1]<=a.shape[e]-n,(function(){return"Padding in dimension ".concat(e," cannot be greater than or equal to ").concat(a.shape[e]-n," or less than 0 for input of shape ")+a.shape}))},o=0;o<a.rank;o++)i(o);return qn.runKernel(Qr,{x:a},{paddings:t,mode:r})}}),xh=ri({mod_:function(e,t){var r,a=$n(e,"a","mod"),n=$n(t,"b","mod");return r=_slicedToArray(Pn(a,n),2),a=r[0],n=r[1],qn.runKernelFunc((function(e,t){var r=e.mod(a,n);return t([a,n]),r}),{a:a,b:n},null,Yr)}}),kh=ri({moments_:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=Be(t,(e=$n(e,"x","moments")).shape),n=_h(e,a,r),i=n.shape;r||(i=pl(n.shape,a));var o=zs(Zs($i(e,"float32"),wo(n,i)));return{mean:n,variance:_h(o,a,r)}}}),wh=ri({multiRNNCell_:function(e,t,r,a){for(var n=$n(t,"data","multiRNNCell"),i=ei(r,"c","multiRNNCell"),o=ei(a,"h","multiRNNCell"),s=n,l=[],u=0;u<e.length;u++){var h=e[u](s,i[u],o[u]);l.push(h[0]),l.push(h[1]),s=h[1]}for(var c=[],f=[],d=0;d<l.length;d+=2)c.push(l[d]),f.push(l[d+1]);return[c,f]}}),Ch=ri({multinomial_:function(e,t,r){var a=arguments.length>3&&void 0!==arguments[3]&&arguments[3],n=$n(e,"logits","multinomial"),i=n.size,o=n.rank;if(i<2)throw new Error("Error in multinomial: you need at least 2 outcomes, but got "+i+".");if(o>2)throw new Error("Rank of probabilities must be 1 or 2, but is "+o);r=r||Math.random();var s=1===o?wo(n,[1,-1]):n,l=qn.runKernelFunc((function(e){return e.multinomial(s,a,t,r)}),{logits2D:s});return 1===o?wo(l,[l.size]):l}}),Th=ri({notEqual_:function(e,t){var r,a=$n(e,"a","notEqual"),n=$n(t,"b","notEqual");return r=_slicedToArray(Pn(a,n),2),a=r[0],n=r[1],al(a.shape,n.shape),qn.runKernelFunc((function(e){return e.notEqual(a,n)}),{a:a,b:n},null,$r)}}),Sh=ri({real_:function(e){var t=$n(e,"input","real");return qn.runKernelFunc((function(e){return e.real(t)}),{input:t},null,ca)}}),Ih=ri({onesLike_:function(e){var t=$n(e,"x","onesLike");return qn.runKernelFunc((function(e,r){if("complex64"===t.dtype){var a=Ih(Sh(t)),n=Bs(Hu(t));return ai(a,n)}return e.onesLike(t)}),{x:t},null,aa)}}),Ah=ri({outerProduct_:function(e,t){var r=$n(e,"v1","outerProduct"),a=$n(t,"v2","outerProduct");Ce(1===r.rank&&1===a.rank,(function(){return"Error in outerProduct: inputs must be rank 1, but got ranks ".concat(r.rank," and ").concat(a.rank,".")}));var n=wo(r,[-1,1]),i=wo(a,[1,-1]);return Co(n,i)}}),Rh=ri({pad_:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,a=$n(e,"x","pad");if(0===a.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");return qn.runKernelFunc((function(e,n){return n([a]),e.pad(a,t,r)}),{x:a},null,ia,{paddings:t,constantValue:r})}}),Nh=ri({pad1d_:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return Ce(2===t.length,(function(){return"Invalid number of paddings. Must be length of 2."})),Rh(e,[t],r)}}),Eh=ri({pad2d_:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return Ce(2===t.length&&2===t[0].length&&2===t[1].length,(function(){return"Invalid number of paddings. Must be length of 2 each."})),Rh(e,t,r)}}),Fh=ri({pad3d_:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return Ce(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,(function(){return"Invalid number of paddings. Must be length of 2 each."})),Rh(e,t,r)}}),Mh=ri({pad4d_:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return Ce(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,(function(){return"Invalid number of paddings. Must be length of 2 each."})),Rh(e,t,r)}}),Dh=ri({spaceToBatchND_:function(e,t,r){var a=$n(e,"x","spaceToBatchND");return Ce(a.rank>=1+t.length,(function(){return"input rank ".concat(a.rank," should be > than [blockShape] ").concat(t.length)})),Ce(r.length===t.length,(function(){return"paddings.shape[0] ".concat(r.length," must be equal to [blockShape] ").concat(t.length)})),Ce(a.shape.reduce((function(e,a,n){return n>0&&n<=t.length?e&&(a+r[n-1][0]+r[n-1][1])%t[n-1]==0:e}),!0),(function(){return"input spatial dimensions ".concat(a.shape.slice(1)," with paddings ").concat(r.toString()," must be divisible by blockShapes ").concat(t.toString())})),qn.runKernelFunc((function(e){return e.spaceToBatchND(a,t,r)}),{x:a},null,Da,{blockShape:t,paddings:r})}}),Oh=ri({pool_:function(e,t,r,a,n,i){null==n&&(n=[1,1]),null==i&&(i=1),0===a&&(a="valid");var o=$n(e,"x","maxPool"),s=o,l=!1;3===o.rank&&(l=!0,s=wo(o,[1,o.shape[0],o.shape[1],o.shape[2]])),Ce(Vl(i,n),(function(){return"Error in pool: Either strides or dilations must be 1. Got strides ".concat(i," and dilations '").concat(n,"'")}));var u,h=Nl(s.shape,t,i,n,a),c=[h.dilationHeight,h.dilationWidth];u="same"===a?function(e,t){var r=e.map((function(e,r){return e+(e-1)*(t[r]-1)})).map((function(e){return e-1})),a=r.map((function(e){return Math.floor(e/2)})),n=r.map((function(e,t){return e-a[t]}));return r.map((function(e,t){return[a[t],n[t]]}))}([h.filterHeight,h.filterWidth],c):[[0,0],[0,0]];var f=1===c[0]&&1===c[1],d=_slicedToArray(function(e,t,r){var a=r.map((function(e){return e[0]})),n=r.map((function(e){return e[1]})),i=e.concat(a,n),o=t.map((function(e,t){return(e-i[t]%e)%e})),s=n.map((function(e,t){return e+o[t]}));return[t.map((function(e,t){return[a[t],s[t]]})),t.map((function(e,t){return[0,o[t]]}))]}([h.inHeight,h.inWidth],c,u),2),v=d[0],p=d[1],g=f?a:"valid",_=f?s:Dh(s,c,v),m=("avg"===r?function(){return Wl(_,t,i,g)}:function(){return fh(_,t,i,g)})(),y=f?m:Jl(m,c,p);return l?wo(y,[y.shape[1],y.shape[2],y.shape[3]]):y}}),Lh=ri({prelu_:function(e,t){var r=$n(e,"x","prelu"),a=$n(t,"alpha","prelu");return qn.runKernelFunc((function(e,t){var n=e.prelu(r,a);return t([r,a]),n}),{x:r,alpha:a},null,la)}}),zh=ri({prod_:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=$n(e,"x","prod");return"bool"===a.dtype&&(a=$i(a,"int32")),qn.runKernelFunc((function(e){var n=Be(t,a.shape),i=_l(n,a.rank),o=n,s=a;null!=i&&(s=So(a,i),o=yl(o.length,a.rank));var l=e.prod(s,o);if(r){var u=pl(l.shape,n);l=wo(l,u)}return l}),{x:a},null,ua,{axis:t,keepDims:r})}}),Bh=ri({rand_:function(e,t,r){var a=Ae(e),n=null;if(null==r||"float32"===r)n=new Float32Array(a);else if("int32"===r)n=new Int32Array(a);else{if("bool"!==r)throw new Error("Unknown data type "+r);n=new Uint8Array(a)}for(var i=0;i<a;i++)n[i]=t();return qn.makeTensor(n,e,r)}}),Ph=r("YSVl"),Vh=function(){function e(t,r,a,n,i){_classCallCheck(this,e),this.mean=t,this.stdDev=r,this.dtype=a,this.nextVal=NaN,this.truncated=n,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);var o=i||Math.random();this.random=Ph.alea(o.toString())}return _createClass(e,[{key:"nextValue",value:function(){if(!isNaN(this.nextVal)){var e=this.nextVal;return this.nextVal=NaN,e}for(var t,r,a=!1;!a;){var n=void 0,i=void 0,o=void 0;do{o=(n=2*this.random()-1)*n+(i=2*this.random()-1)*i}while(o>=1||0===o);var s=Math.sqrt(-2*Math.log(o)/o);t=this.mean+this.stdDev*n*s,r=this.mean+this.stdDev*i*s,this.truncated&&!this.isValidTruncated(t)||(a=!0)}return this.truncated&&!this.isValidTruncated(r)||(this.nextVal=this.convertValue(r)),this.convertValue(t)}},{key:"convertValue",value:function(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}},{key:"isValidTruncated",value:function(e){return e<=this.upper&&e>=this.lower}}]),e}(),Uh=function(){function e(t,r,a,n){_classCallCheck(this,e),this.alpha=t,this.beta=1/r,this.dtype=a;var i=n||Math.random();this.randu=Ph.alea(i.toString()),this.randn=new Vh(0,1,a,!1,this.randu()),this.d=t<1?t+2/3:t-1/3,this.c=1/Math.sqrt(9*this.d)}return _createClass(e,[{key:"nextValue",value:function(){for(var e,t,r,a,n,i;;){do{a=this.randn.nextValue(),i=1+this.c*a}while(i<=0);if(i*=i*i,t=1-.331*(e=a*a)*e,r=.5*e+this.d*(1-i+Math.log(i)),(n=this.randu())<t||Math.log(n)<r)break}return i*=1/this.beta*this.d,this.alpha<1&&(i*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(i)}},{key:"convertValue",value:function(e){return"float32"===this.dtype?e:Math.round(e)}}]),e}(),Wh=function(){function e(){var t=this,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=arguments.length>2?arguments[2]:void 0,i=arguments.length>3?arguments[3]:void 0;if(_classCallCheck(this,e),this.canReturnFloat=function(){return null==t.dtype||"float32"===t.dtype},this.min=r,this.range=a-r,this.dtype=n,null==i&&(i=Math.random()),"number"==typeof i&&(i=i.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error("The difference between ".concat(r," - ").concat(a," <= 1 and dtype is not float"));this.random=Ph.alea(i)}return _createClass(e,[{key:"convertValue",value:function(e){return this.canReturnFloat()?e:Math.round(e)}},{key:"nextValue",value:function(){return this.convertValue(this.min+this.range*this.random())}}]),e}(),Gh=ri({randomGamma_:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"float32",n=arguments.length>4?arguments[4]:void 0;if(null==r&&(r=1),null==a&&(a="float32"),"float32"!==a&&"int32"!==a)throw new Error("Unsupported data type "+a);for(var i=new Uh(t,r,a,n),o=Zi(e,a),s=0;s<o.values.length;s++)o.values[s]=i.nextValue();return o.toTensor()}}),Hh=ri({randomNormal_:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,a=arguments.length>3?arguments[3]:void 0,n=arguments.length>4?arguments[4]:void 0;if(null!=a&&"bool"===a)throw new Error("Unsupported data type "+a);for(var i=new Vh(t,r,a,!1,n),o=Zi(e,a),s=0;s<o.values.length;s++)o.values[s]=i.nextValue();return o.toTensor()}}),jh=ri({randomUniform_:function(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"float32",n=arguments.length>4?arguments[4]:void 0,i=Zi(e,a),o=new Wh(t,r,null,n),s=0;s<i.values.length;s++)i.values[s]=o.nextValue();return i.toTensor()}});function qh(e,t){Se(e);var r=Jn(e,t);if(1!==r.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return ni(e,null,r,t)}function Xh(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"float32";if(0===r)throw new Error("Cannot have a step of zero");return qn.runKernelFunc((function(){if(e===t||e<t&&r<0||t<e&&r>1)return ph([0],a);var n=at(Math.abs(Math.ceil((t-e)/r)),a);t<e&&1===r&&(r=-1),n[0]=e;for(var i=1;i<n.length;i++)n[i]=n[i-1]+r;return qh(n,a)}),{},null,ha,{start:e,stop:t,step:r,dtype:a})}var Kh=ri({reciprocal_:function(e){var t=$n(e,"x","reciprocal");return qn.runKernelFunc((function(e,r){var a=e.reciprocal(t);return r([t]),a}),{x:t},null,fa)}}),Qh=ri({relu_:function(e){var t=$n(e,"x","relu");return qn.runKernelFunc((function(e,r){return r([t]),"bool"===t.dtype?$i(t,"int32"):e.relu(t)}),{x:t},null,da)}}),Yh=ri({relu6_:function(e){var t=$n(e,"x","relu6");return qn.runKernelFunc((function(e,r){return r([t]),"bool"===t.dtype?$i(t,"int32"):e.relu6(t)}),{x:t},null,ya)}}),Jh=ri({reverse_:function(e,t){var r=$n(e,"x","reverse");return qn.runKernelFunc((function(e){var a=Be(t,r.shape);if(0===r.rank)return eo(r);var n=e.reverse(r,a);return wo(n,r.shape)}),{x:r},null,ba,{dims:t})}}),Zh=ri({reverse1d_:function(e){var t=$n(e,"x","reverse");return Ce(1===t.rank,(function(){return"Error in reverse1D: x must be rank 1 but got rank ".concat(t.rank,".")})),Jh(t,0)}}),$h=ri({reverse2d_:function(e,t){var r=$n(e,"x","reverse");return Ce(2===r.rank,(function(){return"Error in reverse2D: x must be rank 2 but got rank ".concat(r.rank,".")})),Jh(r,t)}}),ec=ri({reverse3d_:function(e,t){var r=$n(e,"x","reverse");return Ce(3===r.rank,(function(){return"Error in reverse3D: x must be rank 3 but got rank ".concat(r.rank,".")})),Jh(r,t)}}),tc=ri({reverse4d_:function(e,t){var r=$n(e,"x","reverse");return Ce(4===r.rank,(function(){return"Error in reverse4D: x must be rank 4 but got rank ".concat(r.rank,".")})),Jh(r,t)}}),rc=ri({round_:function(e){var t=$n(e,"x","round");return qn.runKernelFunc((function(e){return e.round(t)}),{x:t},null,xa)}}),ac=ri({rsqrt_:function(e){var t=$n(e,"x","rsqrt");return qn.runKernelFunc((function(e,r){var a=e.rsqrt(t);return r([t]),a}),{x:t},null,ka)}}),nc=ri({selu_:function(e){var t=$n(e,"x","selu");return qn.runKernelFunc((function(e,r){var a=e.selu(t);return r([t]),a}),{x:t},null,Ta)}}),ic=ri({separableConv2d_:function(e,t,r,a,n){var i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:[1,1],o=arguments.length>6&&void 0!==arguments[6]?arguments[6]:"NHWC",s=$n(e,"x","separableConv2d"),l=$n(t,"depthwiseFilter","separableConv2d"),u=$n(r,"pointwiseFilter","separableConv2d"),h=s,c=!1;if(3===s.rank&&(c=!0,h=wo(s,[1,s.shape[0],s.shape[1],s.shape[2]])),"NCHW"===o)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");Ce(4===h.rank,(function(){return"Error in separableConv2d: input must be rank 4, but got rank ".concat(h.rank,".")})),Ce(4===l.rank,(function(){return"Error in separableConv2d: depthwise filter must be rank 4, but got rank ".concat(l.rank,".")})),Ce(4===u.rank,(function(){return"Error in separableConv2d: pointwise filter must be rank 4, but got rank ".concat(l.rank,".")})),Ce(1===u.shape[0],(function(){return"Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ".concat(u.shape[0],".")})),Ce(1===u.shape[1],(function(){return"Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ".concat(u.shape[1],".")}));var f=l.shape[2],d=l.shape[3];Ce(u.shape[2]===f*d,(function(){return"Error in separableConv2d: the third dimension of pointwise filter must be ".concat(f*d,", but got ").concat(u.shape[2],".")}));var v=xu(h,l,a,n,o,i),p=hu(v,u,1,"valid",o);return c?wo(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),oc=function(){var e=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){var a,n,i,o,s,l,u,h,c,f,d;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return a=$n(t,"x","setdiff1d"),n=$n(r,"y","setdiff1d"),Ce(a.dtype===n.dtype,(function(){return"x and y should have the same dtype, but got x (".concat(a.dtype,") and y (").concat(n.dtype,").")})),Ce(1===a.rank,(function(){return"x should be 1D tensor, but got x (".concat(a.shape,").")})),Ce(1===n.rank,(function(){return"y should be 1D tensor, but got y (".concat(n.shape,").")})),e.next=4,a.data();case 4:return i=e.sent,e.next=7,n.data();case 7:for(o=e.sent,s=new Set(o),l=0,u=0;u<i.length;u++)s.has(i[u])||l++;for(h=new Sn([l],a.dtype),c=new Sn([l],"int32"),f=0,d=0;f<i.length;f++)s.has(i[f])||(h.values[d]=i[f],c.values[d]=f,d++);return e.abrupt("return",[h.toTensor(),c.toTensor()]);case 14:case"end":return e.stop()}}),e)})));return function(t,r){return e.apply(this,arguments)}}(),sc=ri({sign_:function(e){var t=$n(e,"x","sign");return qn.runKernelFunc((function(e){return e.sign(t)}),{x:t},null,Ra)}}),lc=ri({sin_:function(e){var t=$n(e,"x","sin");return qn.runKernelFunc((function(e,r){var a=e.sin(t);return r([t]),a}),{x:t},null,Ia)}}),uc=ri({sinh_:function(e){var t=$n(e,"x","sinh");return qn.runKernelFunc((function(e,r){var a=e.sinh(t);return r([t]),a}),{x:t},null,Aa)}}),hc=ri({slice1d_:function(e,t,r){var a=$n(e,"x","slice1d");return Ce(1===a.rank,(function(){return"slice1d expects a rank-1 tensor, but got a rank-".concat(a.rank," tensor")})),Kl(a,[t],[r])}}),cc=ri({slice2d_:function(e,t,r){var a=$n(e,"x","slice2d");return Ce(2===a.rank,(function(){return"slice2d expects a rank-2 tensor, but got a rank-".concat(a.rank," tensor")})),Kl(a,t,r)}}),fc=ri({slice3d_:function(e,t,r){var a=$n(e,"x","slice3d");return Ce(3===a.rank,(function(){return"slice3d expects a rank-3 tensor, but got a rank-".concat(a.rank," tensor")})),Kl(a,t,r)}}),dc=ri({slice4d_:function(e,t,r){var a=$n(e,"x","slice4d");return Ce(4===a.rank,(function(){return"slice4d expects a rank-4 tensor, but got a rank-".concat(a.rank," tensor")})),Kl(a,t,r)}}),vc=ri({softmax_:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1,r=$n(e,"logits","softmax","float32");if(-1===t&&(t=r.rank-1),t!==r.rank-1)throw Error("Softmax along a non-last dimension is not yet supported. Logits was rank ".concat(r.rank," and dim was ").concat(t));return qn.runKernelFunc((function(e,a){var n=e.softmax(r,t);return a([n]),n}),{logits:r},null,La,{dim:t})}}),pc=ri({fft_:function(e){return Ce("complex64"===e.dtype,(function(){return"The dtype for tf.spectral.fft() must be complex64 but got ".concat(e.dtype,".")})),qn.runKernelFunc((function(t){var r=e.shape[e.shape.length-1],a=e.as2D(e.size/r,r);return t.fft(a).reshape(e.shape)}),{input:e},null,fr)}}),gc=ri({ifft_:function(e){return Ce("complex64"===e.dtype,(function(){return"The dtype for tf.spectral.ifft() must be complex64 but got ".concat(e.dtype,".")})),qn.runKernelFunc((function(t){var r=e.shape[e.shape.length-1],a=wo(e,[e.size/r,r]),n=t.ifft(a);return wo(n,e.shape)}),{input:e},null,wr)}}),_c=ri({irfft_:function(e){var t,r=e.shape[e.shape.length-1],a=e.size/r;if(r<=2){var n=wo(e,[a,r]);t=gc(n)}else{var i=[a,2*(r-1)],o=wo(Sh(e),[a,r]),s=wo(Hu(e),[a,r]),l=Jh(Kl(o,[0,1],[a,r-2]),1),u=Os(Jh(Kl(s,[0,1],[a,r-2]),1),qs(-1)),h=ql([o,l],1),c=ql([s,u],1),f=wo(ai(h,c),[i[0],i[1]]);t=gc(f)}if(t=Sh(t),3===e.rank&&0!==e.shape[0]){var d=t,v=e.shape[0];t=wo(t,[v,t.shape[0]/v,t.shape[1]]),d.dispose()}return t}});function mc(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,a=[];if("number"==typeof t)Ce(e.shape[r]%t==0,(function(){return"Number of splits must evenly divide the axis."})),a=new Array(t).fill(e.shape[r]/t);else{Ce(t.reduce((function(e,t){return-1===t&&(e+=1),e}),0)<=1,(function(){return"There should be only one negative value in split array."}));var n=t.indexOf(-1);if(-1!==n){var i=t.reduce((function(e,t){return t>0?e+t:e}));t[n]=e.shape[r]-i}Ce(e.shape[r]===t.reduce((function(e,t){return e+t})),(function(){return"The sum of sizes must match the size of the axis dimension."})),a=t}return a}var yc=ri({split_:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,a=$n(e,"x","split");return qn.runKernelFunc((function(e,n){var i=Be(r,a.shape)[0],o=mc(a,t,i);return e.split(a,o,i)}),{x:a},null,Oa,{numOrSizeSplits:t,axis:r})}}),bc=ri({rfft_:function(e,t){Ce("float32"===e.dtype,(function(){return"The dtype for rfft() must be real value but got "+e.dtype}));var r,a=e.shape[e.shape.length-1],n=e.size/a;if(null!=t&&t<a){var i=e.shape.map((function(e){return 0})),o=e.shape.map((function(e){return e}));o[e.shape.length-1]=t,r=Kl(e,i,o),a=t}else if(null!=t&&t>a){var s=e.shape.map((function(e){return e}));s[e.shape.length-1]=t-a,r=ql([e,ph(s)],e.shape.length-1),a=t}else r=e;var l=Bs(r),u=wo(ai(r,l),[n,a]),h=pc(u),c=Math.floor(a/2)+1,f=Sh(h),d=Hu(h),v=yc(f,[c,a-c],f.shape.length-1),p=yc(d,[c,a-c],d.shape.length-1),g=r.shape.slice();return g[r.shape.length-1]=c,wo(ai(v[0],p[0]),g)}}),xc=ri({squaredDifference_:function(e,t){var r,a=$n(e,"a","squaredDifference"),n=$n(t,"b","squaredDifference");return r=_slicedToArray(Pn(a,n),2),a=r[0],n=r[1],al(a.shape,n.shape),qn.runKernelFunc((function(e,t){var r=e.squaredDifference(a,n);return t([a,n]),r}),{a:a,b:n},null,za,{})}}),kc=ri({squeeze_:function(e,t){var r=$n(e,"x","squeeze");return wo(r,Pe(r.shape,t).newShape)}}),wc=ri({stack_:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=ei(e,"tensors","stack");if(Ce(r.length>=1,(function(){return"Pass at least one tensor to tf.stack"})),1===r.length)return Eu(r[0],t);var a=r[0].shape,n=r[0].dtype;Ce(t<=r[0].rank,(function(){return"Axis must be <= rank of the tensor"})),r.forEach((function(e){Te(a,e.shape,"All tensors passed to stack must have matching shapes"),Ce(n===e.dtype,(function(){return"All tensors passed to stack must have matching dtypes"}))}));var i=r.map((function(e){return Eu(e,t)}));return ql(i,t)}}),Cc=ri({step_:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=$n(e,"x","step");return qn.runKernelFunc((function(e){return e.step(r,t)}),{x:r},null,Ja,{alpha:t})}}),Tc=ri({stridedSlice_:function(e,t,r,a){var n=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0,o=arguments.length>6&&void 0!==arguments[6]?arguments[6]:0,s=arguments.length>7&&void 0!==arguments[7]?arguments[7]:0,l=arguments.length>8&&void 0!==arguments[8]?arguments[8]:0,u=$n(e,"x","stridedSlice");return qn.runKernelFunc((function(e){null==a&&(a=new Array(t.length));var h=zo(o);if(h.length>1)throw new Error("Multiple ellipses in slice is not allowed.");if(0!==o&&0!==s)throw new Error("Using both ellipsisMask and newAxisMask is not yet supported.");if(0!==o&&0!==l)throw new Error("Using both ellipsisMask and shrinkAxisMask is not yet supported.");var c=u.rank-t.length,f=zo(s),d=u.shape.slice();f.forEach((function(e){t[e]=0,r[e]=1,d.splice(e,0,1)}));var v=Wo((u=wo(u,d)).shape,h,c,t,r,a,n,i,o),p=v.begin,g=v.end,_=v.strides;t=p,r=g,a=_;var m=zo(l);m.forEach((function(e){r[e]=t[e]+1,a[e]=1}));var y=Bo(t,r,a),b=y.filter((function(e,t){return-1===m.indexOf(t)}));if(a.every((function(e){return 1===e})))return wo(Kl(u,t,y),b);var x=e.stridedSlice(u,t,r,a);return wo(x,b)}),{x:u},null,Ua,{begin:t,end:r,strides:a,beginMask:n,endMask:i,ellipsisMask:o,newAxisMask:s,shrinkAxisMask:l})}}),Sc=ri({tan_:function(e){var t=$n(e,"x","tan");return qn.runKernelFunc((function(e,r){var a=e.tan(t);return r([t]),a}),{x:t},null,Wa)}});function Ic(e,t,r){if(Se(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");var a=Jn(e,r);if(2!==a.length&&1!==a.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===a.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return ni(e,t,a,r)}function Ac(e,t,r){if(Se(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");var a=Jn(e,r);if(4!==a.length&&1!==a.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===a.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return ni(e,t,a,r)}function Rc(e,t,r){if(Se(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");var a=Jn(e,r);if(5!==a.length&&1!==a.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===a.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return ni(e,t,a,r)}function Nc(e,t,r){if(Se(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");var a=Jn(e,r);if(6!==a.length&&1!==a.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===a.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return ni(e,t=t||a,a,r)}var Ec=ri({topk_:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,r=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],a=$n(e,"x","topk");if(0===a.rank)throw new Error("topk() expects the input to be of rank 1 or higher");var n=a.shape[a.shape.length-1];if(t>n)throw new Error("'k' passed to topk() must be <= the last dimension (".concat(n,") but got ")+t);var i={x:a},o={k:t,sorted:r},s=qn.runKernelFunc((function(e){return e.topk(a,t,r)}),i,null,ja,o),l=_slicedToArray(s,2),u=l[0],h=l[1];return{values:u,indices:h}}}),Fc=ri({truncatedNormal_:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,a=arguments.length>3?arguments[3]:void 0,n=arguments.length>4?arguments[4]:void 0;if(null!=a&&"bool"===a)throw new Error("Unsupported data type $ { dtype }");for(var i=new Vh(t,r,a,!0,n),o=Zi(e,a),s=0;s<o.values.length;s++)o.values[s]=i.nextValue();return o.toTensor()}}),Mc=ri({unique_:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=$n(e,"x","unique",null);Ce(r.rank>0,(function(){return"The input tensor must be at least 1D"}));var a={x:r},n={axis:t},i=qn.runKernel(Xa,a,n),o=_slicedToArray(i,2),s=o[0],l=o[1];return{values:s,indices:l}}}),Dc=ri({unsortedSegmentSum_:function(e,t,r){var a=$n(e,"x","unsortedSegmentSum"),n=$n(t,"segmentIds","unsortedSegmentSum","int32");return Ce(Ee(r),(function(){return"numSegments must be of dtype int"})),qn.runKernelFunc((function(e,t){var i=e.unsortedSegmentSum(a,n,r);return t([n]),i}),{x:a,segmentIds:n},null,Qa,{numSegments:r})}}),Oc=ri({unstack_:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=$n(e,"x","unstack");return Ce(t>=-r.shape.length&&t<r.shape.length,(function(){return"Axis = ".concat(t," is not in [-").concat(r.shape.length,", ").concat(r.shape.length,")")})),t<0&&(t+=r.shape.length),qn.runKernelFunc((function(e){return e.unstack(r,t)}),{value:r},null,Ka,{axis:t})}});function Lc(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],r=arguments.length>2?arguments[2]:void 0,a=arguments.length>3?arguments[3]:void 0;return qn.makeVariable(e,t,r,a)}function zc(e,t){for(var r=[],a=0;a<t.length;a++)t[a]&&r.push(a);for(var n=Zi(e,"int32"),i=Zi([r.length,e.length],"int32"),o=0;o<r.length;o++){var s=n.indexToLoc(r[o]);i.values.set(s,o*e.length)}return i.toTensor()}var Bc=function(){var e=_asyncToGenerator(regeneratorRuntime.mark((function e(t){var r,a,n;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=$n(t,"condition","whereAsync","bool"),e.next=3,r.data();case 3:return a=e.sent,n=zc(r.shape,a),e.abrupt("return",(t!==r&&r.dispose(),n));case 6:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),Pc=function(){var e=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r,a){var n,i,o,s,l,u,h,c,f,d,v,p,g;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:for(n=$n(t,"tensor","boolMask"),i=$n(r,"mask","boolMask","bool"),o=null==a?0:a,s=i.rank,l=n.shape,Ce(s>0,(function(){return"mask cannot be scalar"})),Te(l.slice(o,o+s),i.shape,"mask's shape must match the first K dimensions of tensor's shape,"),u=1,h=o;h<o+s;h++)u*=l[h];return c=l.slice(0,o).concat([u],l.slice(o+s)),f=wo(n,c),d=wo(i,[-1]),e.next=9,Bc(d);case 9:return v=e.sent,p=kc(v,[1]),g=Uu(f,p,o),e.abrupt("return",(t!==n&&n.dispose(),r!==i&&i.dispose(),p.dispose(),f.dispose(),d.dispose(),v.dispose(),g));case 13:case"end":return e.stop()}}),e)})));return function(t,r,a){return e.apply(this,arguments)}}(),Vc=ri({equalStrict_:function(e,t){vs("strict variants of ops have been deprecated and will be removed in future");var r=$n(e,"a","equalStrict"),a=$n(t,"b","equalStrict");return Te(r.shape,a.shape,"Error in equalStrict: "),Cu(r,a)}}),Uc=ri({greaterEqualStrict_:function(e,t){vs("strict variants of ops have been deprecated and will be removed in future");var r=$n(e,"a","greaterEqualStrict"),a=$n(t,"b","greaterEqualStrict");return Te(r.shape,a.shape,"Error in greaterEqualStrict: "),Gu(r,a)}}),Wc=ri({greaterStrict_:function(e,t){vs("strict variants of ops have been deprecated and will be removed in future");var r=$n(e,"a","greaterStrict"),a=$n(t,"b","greaterStrict");return Te(r.shape,a.shape,"Error in greaterStrict: "),Wu(r,a)}}),Gc=ri({lessEqualStrict_:function(e,t){vs("strict variants of ops have been deprecated and will be removed in future");var r=$n(e,"a","lessEqualStrict"),a=$n(t,"b","lessEqualStrict");return Te(r.shape,a.shape,"Error in lessEqualStrict: "),Yu(r,a)}}),Hc=ri({lessStrict_:function(e,t){vs("strict variants of ops have been deprecated and will be removed in future");var r=$n(e,"a","lessStrict"),a=$n(t,"b","lessStrict");return Te(r.shape,a.shape,"Error in lessStrict: "),Qu(r,a)}}),jc=ri({notEqualStrict_:function(e,t){vs("strict variants of ops have been deprecated and will be removed in future");var r=$n(e,"a","notEqualStrict"),a=$n(t,"b","notEqualStrict");return Te(r.shape,a.shape,"Error in notEqualStrict: "),Th(r,a)}}),qc=ri({addStrict_:function(e,t){vs("strict variants of ops have been deprecated and will be removed in future");var r=$n(e,"a","addStrict"),a=$n(t,"b","addStrict");return Te(r.shape,a.shape,"Error in addStrict: "),Fs(r,a)}}),Xc=ri({divStrict_:function(e,t){vs("strict variants of ops have been deprecated and will be removed in future");var r=$n(e,"a","div"),a=$n(t,"b","div");return Te(r.shape,a.shape,"Error in divideStrict: "),Ds(r,a)}}),Kc=ri({maximumStrict_:function(e,t){vs("strict variants of ops have been deprecated and will be removed in future");var r=$n(e,"a","maximumStrict"),a=$n(t,"b","maximumStrict");return Te(r.shape,a.shape,"Error in maximumStrict: "),nl(r,a)}}),Qc=ri({minimumStrict_:function(e,t){vs("strict variants of ops have been deprecated and will be removed in future");var r=$n(e,"a","minimumStrict"),a=$n(t,"b","minimumStrict");return Te(r.shape,a.shape,"Error in minimumStrict: "),yh(r,a)}}),Yc=ri({modStrict_:function(e,t){vs("strict variants of ops have been deprecated and will be removed in future");var r=$n(e,"a","modStrict"),a=$n(t,"b","modStrict");return Te(r.shape,a.shape,"Error in modStrict: "),xh(r,a)}}),Jc=ri({mulStrict_:function(e,t){vs("strict variants of ops have been deprecated and will be removed in future");var r=$n(e,"a","mul"),a=$n(t,"b","mul");return Te(r.shape,a.shape,"Error in multiplyStrict: "),Os(r,a)}}),Zc=ri({powStrict_:function(e,t){return vs("strict variants of ops have been deprecated and will be removed in future"),Te(e.shape,t.shape,"Error in powStrict: "),Js(e,t)}}),$c=ri({squaredDifferenceStrict_:function(e,t){vs("strict variants of ops have been deprecated and will be removed in future");var r=$n(e,"a","squaredDifferenceStrict"),a=$n(t,"b","squaredDifferenceStrict");return Te(r.shape,a.shape,"Error in squaredDifferenceStrict: "),xc(r,a)}}),ef=ri({subStrict_:function(e,t){vs("strict variants of ops have been deprecated and will be removed in future");var r=$n(e,"a","subStrict"),a=$n(t,"b","subStrict");return Te(r.shape,a.shape,"Error in subStrict: "),Zs(r,a)}}),tf=ri({norm_:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"euclidean",r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,a=arguments.length>3&&void 0!==arguments[3]&&arguments[3],n=function e(t,r){var a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;if(0===t.rank)return el(t);if(1!==t.rank&&null===a)return e(wo(t,[-1]),r,a);if(1===t.rank||"number"==typeof a||Array.isArray(a)&&1===a.length){if(1===r)return ih(el(t),a);if(r===1/0)return nh(el(t),a);if(r===-1/0)return mh(el(t),a);if("euclidean"===r||2===r)return Ls(ih(Js(el(t),qs(2,"int32")),a));throw new Error("Error in norm: invalid ord value: "+r)}if(Array.isArray(a)&&2===a.length){if(1===r)return nh(ih(el(t),a[0]),a[1]-1);if(r===1/0)return nh(ih(el(t),a[1]),a[0]);if(r===-1/0)return mh(ih(el(t),a[1]),a[0]);if("fro"===r||"euclidean"===r)return Ls(ih(zs(t),a));throw new Error("Error in norm: invalid ord value: "+r)}throw new Error("Error in norm: invalid axis: "+a)}(e=$n(e,"x","norm"),t,r),i=n.shape;if(a){var o=Be(r,e.shape);i=pl(n.shape,o)}return wo(n,i)}}),rf=ri({movingAverage_:function(e,t,r,a){var n=!(arguments.length>4&&void 0!==arguments[4])||arguments[4],i=$n(e,"v","movingAverage"),o=$n(t,"x","movingAverage"),s=$n(r,"decay","movingAverage");Vn(i,o),Ce(Ne(i.shape,o.shape),(function(){return"Shape mismatch in v and x"}));var l=qs(1),u=Zs(l,s),h=Os(Zs(o,i),u);if(n){Ce(null!=a,(function(){return"When using zeroDebias: true, step is required."}));var c=$n(a,"step","movingAverage");h=Ds(h,Zs(l,Js(s,c)))}return Fs(i,h)}}),af=ri({scatterND_:function(e,t,r){var a=$n(e,"indices","scatterND","int32"),n=$n(t,"updates","scatterND");return Do(n,a,r),qn.runKernelFunc((function(e){return e.scatterND(a,n,r)}),{indices:a,updates:n},null,wa,{shape:r})}}),nf=ri({sparseToDense_:function(e,t,r){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,n=$n(e,"sparseIndices","sparseToDense","int32"),i=$n(t,"sparseValues","sparseToDense"),o=$n(a,"defaultValue","sparseToDense",i.dtype);return function(e,t,r,a){if("int32"!==e.dtype)throw new Error("tf.sparseToDense() expects the indices to be int32 type, but the dtype was ".concat(e.dtype,"."));if(e.rank>2)throw new Error("sparseIndices should be a scalar, vector, or matrix, but got shape ".concat(e.shape,"."));var n=e.rank>0?e.shape[0]:1,i=e.rank>1?e.shape[1]:1;if(r.length!==i)throw new Error("outputShape has incorrect number of elements:, ".concat(r.length,", should be: ").concat(i,"."));if(0!==t.rank&&(1!==t.rank||t.size!==n))throw new Error("sparseValues has incorrect shape ".concat(t.shape,", should be [] or [").concat(n,"]"));if(t.dtype!==a.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(n,i,r,o),qn.runKernelFunc((function(e){return e.sparseToDense(n,i,r,o)}),{sparseIndices:n,sparseValues:i,defaultValue:o},null,Va,{outputShape:r})}}),of=ri({gatherND_:function(e,t){var r=$n(t,"indices","gatherND","int32"),a=$n(e,"x","gatherND");return qn.runKernelFunc((function(e){return e.gatherND(a,r)}),{params:a,indices:r},null,yr)}}),sf=ri({dropout_:function(e,t,r,a){var n=$n(e,"x","dropout");if(Ce("float32"===n.dtype,(function(){return"x has to be a floating point tensor since it's going to be scaled, but got a ".concat(n.dtype," tensor instead.")})),Ce(t>=0&&t<1,(function(){return"rate must be a float in the range [0, 1), but got ".concat(t,".")})),0===t)return e instanceof Rn?n.clone():n;var i=function(e,t){if(null==t)return e.shape.slice();if(Ne(e.shape,t))return t;if(e.shape.length===t.length){for(var r=[],a=0;a<e.shape.length;a++)r.push(null==t[a]&&null!=e.shape[a]?e.shape[a]:t[a]);return r}return t}(n,r),o=1-t,s=Ds(Ou(Fs(jh(i,0,1,"float32",a),o)),o);return Os(n,s)}});function lf(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function uf(e,t,r){for(var a=1-e%2,n=new Float32Array(e),i=0;i<e;++i){var o=2*Math.PI*i/(e+a-1);n[i]=t-r*Math.cos(o)}return qh(n,"float32")}var hf=function(){var e=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){var a,n,i,o,s,l,u,h,c,f,d,v,p,g,_,m=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return a=m.length>2&&void 0!==m[2]?m[2]:1,n=$n(t,"predictions","inTopK"),i=$n(r,"targets","inTopK"),Ce(n.rank>1,(function(){return"inTopK() expects the predictions to be of rank 2 or higher, but got "+n.rank})),Ce(n.rank-1===i.rank,(function(){return"predictions rank should be 1 larger than targets rank, but got predictions rank ".concat(n.rank," and targets rank ").concat(i.rank)})),Te(n.shape.slice(0,n.shape.length-1),i.shape,"predictions's shape should be align with the targets' shape, except the last dimension."),o=n.shape[n.shape.length-1],Ce(a>0&&a<=o,(function(){return"'k' passed to inTopK() must be > 0 && <= the predictions last dimension (".concat(o,"), but got ").concat(a)})),e.next=7,n.data();case 7:return s=e.sent,e.next=10,i.data();case 10:l=e.sent,u=s.length/o,h=o,c=Ve("bool",u),f=0;case 15:if(!(f<u)){e.next=30;break}for(d=f*h,v=s.subarray(d,d+h),p=[],g=0;g<v.length;g++)p.push({value:v[g],index:g});p.sort((function(e,t){return t.value-e.value})),c[f]=0,_=0;case 20:if(!(_<a)){e.next=27;break}if(p[_].index!==l[f]){e.next=24;break}return c[f]=1,e.abrupt("break",27);case 24:_++,e.next=20;break;case 27:f++,e.next=15;break;case 30:return e.abrupt("return",(t!==n&&n.dispose(),r!==i&&i.dispose(),ii(c,i.shape,"bool")));case 31:case"end":return e.stop()}}),e)})));return function(t,r){return e.apply(this,arguments)}}(),cf=ri({conv2DBackpropFilter_:function(e,t,r,a,n){var i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"NHWC",o=arguments.length>6?arguments[6]:void 0,s=e;3===e.rank&&(s=wo(e,[1,e.shape[0],e.shape[1],e.shape[2]]));var l=t;3===l.rank&&(l=wo(t,[1,t.shape[0],t.shape[1],t.shape[2]])),Ce(4===s.rank,(function(){return"Error in conv2dDerFilter: input must be rank 4, but got shape "+s.shape+"."})),Ce(4===l.rank,(function(){return"Error in conv2dDerFilter: dy must be rank 4, but got shape "+l.shape+"."})),Ce(4===r.length,(function(){return"Error in conv2dDerFilter: filterShape must be length 4, but got "+r+"."}));var u="NHWC"===i?s.shape[3]:s.shape[1],h="NHWC"===i?l.shape[3]:l.shape[1];return Ce(u===r[2],(function(){return"Error in conv2dDerFilter: depth of input ".concat(u,") must match input depth in filter (").concat(r[2],".")})),Ce(h===r[3],(function(){return"Error in conv2dDerFilter: depth of dy (".concat(h,") must match output depth for filter (").concat(r[3],").")})),null!=o&&Ce(Ee(n),(function(){return"Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode ".concat(o," but got pad ").concat(n,".")})),qn.runKernelFunc((function(e){var t=Ul(i),u=Fl(s.shape,r,a,1,n,o,!1,t);return e.conv2dDerFilter(s,l,u)}),{x:s,dy:l},null,Wt,{strides:a,pad:n,dataFormat:i,dimRoundingMode:o,filterShape:r})}});function ff(e,t,r){if(null==r||"linear"===r)return e;if("relu"===r)return Os(e,Cc(t));throw new Error("Cannot compute gradient for fused activation ".concat(r,"."))}function df(e,t){var r=t,a=rl(e.shape,t.shape);return a.length>0&&(r=ih(r,a)),wo(r,e.shape)}function vf(e,t,r){if("linear"===t)return e;if("relu"===t)return Qh(e);if("elu"===t)return Au(e);if("relu6"===t)return Yh(e);if("prelu"===t)return Lh(e,r);throw new Error("Unknown fused activation ".concat(t,"."))}var pf=function(e,t){return!(e>0)||"linear"===t},gf=ri({fusedConv2d_:function(e){var t,r=e.x,a=e.filter,n=e.strides,i=e.pad,o=e.dataFormat,s=void 0===o?"NHWC":o,l=e.dilations,u=void 0===l?[1,1]:l,h=e.dimRoundingMode,c=e.bias,f=e.activation,d=void 0===f?"linear":f,v=e.preluActivationWeights;if(!1===pf(qn.state.gradientDepth,d=d||"linear")){var p=hu(r,a,n,i,s,u,h);return null!=c&&(p=Fs(p,c)),vf(p,d,v)}var g=$n(r,"x","conv2d"),_=$n(a,"filter","conv2d"),m=g,y=!1;3===g.rank&&(y=!0,m=wo(g,[1,g.shape[0],g.shape[1],g.shape[2]])),Ce(4===m.rank,(function(){return"Error in fused conv2d: input must be rank 4, but got rank "+m.rank+"."})),Ce(4===_.rank,(function(){return"Error in fused conv2d: filter must be rank 4, but got rank "+_.rank+"."})),null!=h&&Ce(Ee(i),(function(){return"Error in fused conv2d: pad must be an integer when using, dimRoundingMode ".concat(h," but got pad ").concat(i,".")})),Ce(m.shape[3]===_.shape[2],(function(){return"Error in conv2d: depth of input (".concat(m.shape[3],") must match input depth for filter ").concat(_.shape[2],".")})),Ce(Vl(n,u),(function(){return"Error in conv2D: Either strides or dilations must be 1. Got strides ".concat(n," and dilations '").concat(u,"'")})),Ce("NHWC"===s,(function(){return"Error in conv2d: got dataFormat of ".concat(s," but only NHWC is currently supported.")}));var b,x,k=Fl(m.shape,_.shape,n,u,i,h);null!=c&&(t=_slicedToArray(Pn(b=$n(c,"bias","fused conv2d"),g),1),b=t[0],al(k.outShape,b.shape)),null!=v&&(x=$n(v,"prelu weights","fused conv2d"));var w=function(e,t){var r=_slicedToArray(t,4),a=r[0],o=r[1],s=r[2],l=r[3],h=ff(e,s,d);Ce(Pl(u),(function(){return"Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '".concat(u,"'")}));var c=[fu(o.shape,h,a,n,i),cf(o,h,a.shape,n,i)];if(null!=l){var f=df(l,h);c.push(f)}return c},C=function(e){return e.fusedConv2d({input:m,filter:_,convInfo:k,bias:b,activation:d,preluActivationWeights:x})},T={x:m,filter:_,bias:b,preluActivationWeights:x},S={strides:n,pad:i,dataFormat:s,dilations:u,dimRoundingMode:h,activation:d};return null==c?Hs((function(e,t,r){var a=qn.runKernelFunc(C,T,null,tn,S);return r([t,e,a]),y&&(a=wo(a,[a.shape[1],a.shape[2],a.shape[3]])),{value:a,gradFunc:w}}))(m,_):Hs((function(e,t,r,a){var n=qn.runKernelFunc(C,T,null,tn,S);return a([t,e,n,r]),y&&(n=wo(n,[n.shape[1],n.shape[2],n.shape[3]])),{value:n,gradFunc:w}}))(m,_,b)}}),_f=ri({depthwiseConv2dNativeBackpropFilter_:function(e,t,r,a,n){var i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:[1,1],o=arguments.length>6?arguments[6]:void 0,s=e;3===e.rank&&(s=wo(e,[1,e.shape[0],e.shape[1],e.shape[2]]));var l=t;return 3===l.rank&&(l=wo(t,[1,t.shape[0],t.shape[1],t.shape[2]])),qn.runKernelFunc((function(t){var u=Fl(e.shape,r,a,i,n,o,!0);return t.depthwiseConv2DDerFilter(s,l,u)}),{x:s,dy:l},null,$t,{strides:a,pad:n,dimRoundingMode:o,dilations:i,filterShape:r})}}),mf=ri({depthwiseConv2dNativeBackpropInput_:function(e,t,r,a,n){var i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:[1,1],o=arguments.length>6?arguments[6]:void 0,s=t,l=!1;3===t.rank&&(l=!0,s=wo(t,[1,t.shape[0],t.shape[1],t.shape[2]]));var u=qn.runKernelFunc((function(t){var l=Fl(e,r.shape,a,i,n,o,!0);return t.depthwiseConv2DDerInput(s,r,l)}),{dy:s,filter:r},null,er,{strides:a,pad:n,dimRoundingMode:o,dilations:i,inputShape:e});return l?wo(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),yf=ri({fusedDepthwiseConv2d_:function(e){var t,r=e.x,a=e.filter,n=e.strides,i=e.pad,o=e.dataFormat,s=void 0===o?"NHWC":o,l=e.dilations,u=void 0===l?[1,1]:l,h=e.dimRoundingMode,c=e.bias,f=e.activation,d=void 0===f?"linear":f,v=e.preluActivationWeights;if(!1===pf(qn.state.gradientDepth,d)){var p=xu(r,a,n,i,s,u,h);return null!=c&&(p=Fs(p,c)),vf(p,d,v)}var g=$n(r,"x","depthwiseConv2d"),_=$n(a,"filter","depthwiseConv2d"),m=g,y=!1;3===g.rank&&(y=!0,m=wo(g,[1,g.shape[0],g.shape[1],g.shape[2]])),Ce(4===m.rank,(function(){return"Error in fused depthwiseConv2d: input must be rank 4, but got rank ".concat(m.rank,".")})),Ce(4===_.rank,(function(){return"Error in fused depthwiseConv2d: filter must be rank 4, but got rank ".concat(_.rank,".")})),Ce(m.shape[3]===_.shape[2],(function(){return"Error in fused depthwiseConv2d: number of input channels (".concat(m.shape[3],") must match the inChannels dimension in filter ").concat(_.shape[2],".")})),null==u&&(u=[1,1]),Ce(Vl(n,u),(function(){return"Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ".concat(n," and dilations '").concat(u,"'")})),null!=h&&Ce(Ee(i),(function(){return"Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode ".concat(h," but got pad ").concat(i,".")}));var b,x,k=Fl(m.shape,_.shape,n,u,i,h,!0);null!=c&&(t=_slicedToArray(Pn(b=$n(c,"bias","fused conv2d"),g),1),b=t[0],al(k.outShape,b.shape)),null!=v&&(x=$n(v,"prelu weights","fused depthwiseConv2d"));var w=function(e,t){Ce(Pl(u),(function(){return"Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '".concat(u,"'")}));var r=_slicedToArray(t,4),a=r[0],o=r[1],s=r[2],l=r[3],c=ff(e,s,d),f=mf(o.shape,c,a,n,i,u,h),v=_f(o,c,a.shape,n,i,u,h);return null!=l?[f,v,df(b,c)]:[f,v]},C=function(e){return e.fusedDepthwiseConv2D({input:m,filter:_,convInfo:k,bias:b,activation:d,preluActivationWeights:x})},T={x:m,filter:_,bias:b,preluActivationWeights:x},S={strides:n,pad:i,dataFormat:s,dilations:u,dimRoundingMode:h,activation:d};return null==c?Hs((function(e,t,r){var a=qn.runKernelFunc(C,T,null,rn,S);return r([t,e,a]),y&&(a=wo(a,[a.shape[1],a.shape[2],a.shape[3]])),{value:a,gradFunc:w}}))(m,_):Hs((function(e,t,r,a){var n=qn.runKernelFunc(C,T,null,rn,S);return a([t,e,n,r]),y&&(n=wo(n,[n.shape[1],n.shape[2],n.shape[3]])),{value:n,gradFunc:w}}))(m,_,b)}}),bf=ri({fusedMatMul_:function(e){var t,r=e.a,a=e.b,n=e.transposeA,i=void 0!==n&&n,o=e.transposeB,s=void 0!==o&&o,l=e.bias,u=e.activation,h=void 0===u?"linear":u,c=e.preluActivationWeights;if(!1===pf(qn.state.gradientDepth,h)){var f=Co(r,a,i,s);return null!=l&&(f=Fs(f,l)),vf(f,h,c)}var d=$n(r,"a","fused matMul"),v=$n(a,"b","fused matMul"),p=_slicedToArray(Pn(d,v),2);d=p[0],v=p[1];var g=i?d.shape[d.rank-2]:d.shape[d.rank-1],_=s?v.shape[v.rank-1]:v.shape[v.rank-2],m=i?d.shape[d.rank-1]:d.shape[d.rank-2],y=s?v.shape[v.rank-2]:v.shape[v.rank-1],b=d.shape.slice(0,-2),x=v.shape.slice(0,-2),k=Ae(b),w=Ae(x);Ce(d.rank>=2&&v.rank>=2&&d.rank===v.rank,(function(){return"Error in fused matMul: inputs must have the same rank of at least 2, got ranks ".concat(d.rank," and ").concat(v.rank,".")})),Ce(Ne(b,x),(function(){return"Error in fused matMul: outer dimensions (".concat(b,") and (").concat(x,") of Tensors with shapes ").concat(d.shape," and ")+v.shape+" must match."})),Ce(g===_,(function(){return"Error in fused matMul: inner shapes (".concat(g,") and (").concat(_,") of Tensors with shapes ").concat(d.shape," and ").concat(v.shape," and transposeA=").concat(i," and transposeB=").concat(s," must match.")}));var C,T,S=d.shape.slice(0,-2).concat([m,y]),I=wo(d,i?[k,g,m]:[k,m,g]),A=wo(v,s?[w,y,_]:[w,_,y]);null!=l&&(t=_slicedToArray(Pn(C=$n(l,"bias","fused matMul"),d),1),C=t[0],al(S,C.shape)),null!=c&&(T=$n(c,"prelu weights","fused matMul"));var R=function(e,t){var r,a,n=_slicedToArray(t,4),o=n[0],u=n[1],c=n[2],f=n[3],d=ff(wo(e,c.shape),c,h);return i||s?!i&&s?(r=Co(d,u,!1,!1),a=Co(d,o,!0,!1)):i&&!s?(r=Co(u,d,!1,!0),a=Co(o,d,!1,!1)):(r=Co(u,d,!0,!0),a=Co(d,o,!0,!0)):(r=Co(d,u,!1,!0),a=Co(o,d,!0,!1)),null!=l?[r,a,df(f,d)]:[r,a]},N=function(e){return e.fusedBatchMatMul({a:I,b:A,transposeA:i,transposeB:s,bias:C,activation:h,preluActivationWeights:T})},E={a:I,b:A,bias:C,preluActivationWeights:T},F={transposeA:i,transposeB:s,activation:h};return null==l?Hs((function(e,t,r){var a=qn.runKernelFunc(N,E,null,en,F);return r([e,t,a]),{value:wo(a,S),gradFunc:R}}))(I,A):Hs((function(e,t,r,a){var n=qn.runKernelFunc(N,E,null,en,F);return a([e,t,n,r]),{value:wo(n,S),gradFunc:R}}))(I,A,C)}}),xf=ri({hammingWindow_:function(e){return uf(e,.54,.46)}}),kf=ri({hannWindow_:function(e){return uf(e,.5,.5)}}),wf=ri({frame_:function(e,t,r){for(var a=arguments.length>3&&void 0!==arguments[3]&&arguments[3],n=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,i=0,o=[];i+t<=e.size;)o.push(Kl(e,i,t)),i+=r;if(a)for(;i<e.size;){var s=i+t-e.size,l=ql([Kl(e,i,t-s),Qs([s],n)]);o.push(l),i+=r}return 0===o.length?Ic([],[0,t]):wo(ql(o),[o.length,t])}}),Cf=ri({stft_:function(e,t,r,a){var n=arguments.length>4&&void 0!==arguments[4]?arguments[4]:kf;null==a&&(a=lf(t));for(var i=wf(e,t,r),o=Os(i,n(t)),s=[],l=0;l<i.shape[0];l++)s.push(bc(Kl(o,[l,0],[1,t]),a));return ql(s)}}),Tf=ri({cropAndResize_:function(e,t,r,a,n,i){var o=$n(e,"image","cropAndResize"),s=$n(t,"boxes","cropAndResize","float32"),l=$n(r,"boxInd","cropAndResize","int32");n=n||"bilinear",i=i||0;var u=s.shape[0];return Ce(4===o.rank,(function(){return"Error in cropAndResize: image must be rank 4,but got rank ".concat(o.rank,".")})),Ce(2===s.rank&&4===s.shape[1],(function(){return"Error in cropAndResize: boxes must be have size [".concat(u,",4] but had shape ").concat(s.shape,".")})),Ce(1===l.rank&&l.shape[0]===u,(function(){return"Error in cropAndResize: boxInd must be have size [".concat(u,"] but had shape ").concat(s.shape,".")})),Ce(2===a.length,(function(){return"Error in cropAndResize: cropSize must be of length 2, but got length ".concat(a.length,".")})),Ce(a[0]>=1&&a[1]>=1,(function(){return"cropSize must be atleast [1,1], but was "+a})),Ce("bilinear"===n||"nearest"===n,(function(){return"method must be bilinear or nearest, but was "+n})),qn.runKernelFunc((function(e){return e.cropAndResize(o,s,l,a,n,i)}),{image:o,boxes:s,boxInd:l},null,Yt,{method:n,extrapolationValue:i,cropSize:a})}}),Sf=ri({flipLeftRight_:function(e){var t=$n(e,"image","flipLeftRight","float32");return Ce(4===t.rank,(function(){return"Error in flipLeftRight: image must be rank 4,but got rank ".concat(t.rank,".")})),qn.runKernel(vr,{image:t},{})}}),If=ri({rotateWithOffset_:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.5,n=$n(e,"image","rotateWithOffset","float32");return Ce(4===n.rank,(function(){return"Error in rotateWithOffset: image must be rank 4,but got rank ".concat(n.rank,".")})),qn.runKernel($a,{image:n},{radians:t,fillValue:r,center:a})}});function Af(e,t,r,a,n,i){null==a&&(a=.5),null==n&&(n=Number.NEGATIVE_INFINITY),null==i&&(i=0);var o=e.shape[0];return r=Math.min(r,o),Ce(0<=a&&a<=1,(function(){return"iouThreshold must be in [0, 1], but was '".concat(a,"'")})),Ce(2===e.rank,(function(){return"boxes must be a 2D tensor, but was of rank '".concat(e.rank,"'")})),Ce(4===e.shape[1],(function(){return"boxes must have 4 columns, but 2nd dimension was "+e.shape[1]})),Ce(1===t.rank,(function(){return"scores must be a 1D tensor"})),Ce(t.shape[0]===o,(function(){return"scores has incompatible shape with boxes. Expected ".concat(o,", but was ")+t.shape[0]})),Ce(0<=i&&i<=1,(function(){return"softNmsSigma must be in [0, 1], but was '".concat(i,"'")})),{maxOutputSize:r,iouThreshold:a,scoreThreshold:n,softNmsSigma:i}}var Rf=ri({nonMaxSuppression_:function(e,t,r){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.5,n=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Number.NEGATIVE_INFINITY,i=$n(e,"boxes","nonMaxSuppression"),o=$n(t,"scores","nonMaxSuppression"),s=Af(i,o,r,a,n);return qn.runKernelFunc((function(e){return e.nonMaxSuppression(i,o,r,a,n)}),{boxes:i,scores:o},null,ea,{maxOutputSize:r=s.maxOutputSize,iouThreshold:a=s.iouThreshold,scoreThreshold:n=s.scoreThreshold})}});function Nf(e,t,r){var a=function(e,t,r){return function(e,t,r){for(var a=0,n=e.length,i=0,o=!1;a<n;){var s=r(t,e[i=a+(n-a>>>1)]);s>0?a=i+1:(n=i,o=!s)}return o?a:-a-1}(e,t,r||Ef)}(e,t,r);e.splice(a<0?-(a+1):a,0,t)}function Ef(e,t){return e>t?1:e<t?-1:0}function Ff(e,t,r,a,n){return Of(e,t,r,a,n,0).selectedIndices}function Mf(e,t,r,a,n,i){return Of(e,t,r,a,n,0,!1,i,!0)}function Df(e,t,r,a,n,i){return Of(e,t,r,a,n,i,!0)}function Of(e,t,r,a,n,i){for(var o=arguments.length>6&&void 0!==arguments[6]&&arguments[6],s=arguments.length>7&&void 0!==arguments[7]&&arguments[7],l=arguments.length>8&&void 0!==arguments[8]&&arguments[8],u=[],h=0;h<t.length;h++)t[h]>n&&u.push({score:t[h],boxIndex:h,suppressBeginIndex:0});u.sort(Bf);for(var c=i>0?-.5/i:0,f=[],d=[];f.length<r&&u.length>0;){var v=u.pop(),p=v.score,g=v.boxIndex,_=v.suppressBeginIndex;if(p<n)break;for(var m=!1,y=f.length-1;y>=_;--y){var b=Lf(e,g,f[y]);if(b>=a){m=!0;break}if(v.score=v.score*zf(a,c,b),v.score<=n)break}v.suppressBeginIndex=f.length,m||(v.score===p?(f.push(g),d.push(v.score)):v.score>n&&Nf(u,v,Bf))}var x=f.length,k=r-x;s&&k>0&&(f.push.apply(f,_toConsumableArray(new Array(k).fill(0))),d.push.apply(d,_toConsumableArray(new Array(k).fill(0))));var w={selectedIndices:qh(f,"int32")};return o&&(w.selectedScores=qh(d,"float32")),l&&(w.validOutputs=qs(x,"int32")),w}function Lf(e,t,r){var a=e.subarray(4*t,4*t+4),n=e.subarray(4*r,4*r+4),i=Math.min(a[0],a[2]),o=Math.min(a[1],a[3]),s=Math.max(a[0],a[2]),l=Math.max(a[1],a[3]),u=Math.min(n[0],n[2]),h=Math.min(n[1],n[3]),c=Math.max(n[0],n[2]),f=Math.max(n[1],n[3]),d=(s-i)*(l-o),v=(c-u)*(f-h);if(d<=0||v<=0)return 0;var p=Math.max(i,u),g=Math.max(o,h),_=Math.min(s,c),m=Math.min(l,f),y=Math.max(_-p,0)*Math.max(m-g,0);return y/(d+v-y)}function zf(e,t,r){var a=Math.exp(t*r*r);return r<=e?a:0}function Bf(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}var Pf=ri({nonMaxSuppressionWithScore_:function(e,t,r){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.5,n=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Number.NEGATIVE_INFINITY,i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0,o=$n(e,"boxes","nonMaxSuppression"),s=$n(t,"scores","nonMaxSuppression"),l=Af(o,s,r,a,n,i),u=qn.runKernel(ra,{boxes:o,scores:s},{maxOutputSize:r=l.maxOutputSize,iouThreshold:a=l.iouThreshold,scoreThreshold:n=l.scoreThreshold,softNmsSigma:i=l.softNmsSigma});return{selectedIndices:u[0],selectedScores:u[1]}}}),Vf=ri({nonMaxSuppressionPadded_:function(e,t,r){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.5,n=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Number.NEGATIVE_INFINITY,i=arguments.length>5&&void 0!==arguments[5]&&arguments[5],o=$n(e,"boxes","nonMaxSuppression"),s=$n(t,"scores","nonMaxSuppression"),l=Af(o,s,r,a,n,null),u=qn.runKernel(ta,{boxes:o,scores:s},{maxOutputSize:l.maxOutputSize,iouThreshold:l.iouThreshold,scoreThreshold:l.scoreThreshold,padToMaxOutputSize:i});return{selectedIndices:u[0],validOutputs:u[1]}}}),Uf=ri({resizeBilinear_:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=$n(e,"images","resizeBilinear");Ce(3===a.rank||4===a.rank,(function(){return"Error in resizeBilinear: x must be rank 3 or 4, but got rank ".concat(a.rank,".")})),Ce(2===t.length,(function(){return"Error in resizeBilinear: new shape must 2D, but got shape "+t+"."}));var n=a,i=!1;3===a.rank&&(i=!0,n=wo(a,[1,a.shape[0],a.shape[1],a.shape[2]]));var o=_slicedToArray(t,2),s=o[0],l=o[1],u=qn.runKernelFunc((function(e,t){return t([n]),e.resizeBilinear(n,s,l,r)}),{images:n},null,_a,{alignCorners:r,size:t});return i?wo(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),Wf=ri({resizeNearestNeighbor_:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=$n(e,"images","resizeNearestNeighbor");Ce(3===a.rank||4===a.rank,(function(){return"Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ".concat(a.rank,".")})),Ce(2===t.length,(function(){return"Error in resizeNearestNeighbor: new shape must 2D, but got shape "+t+"."})),Ce("float32"===a.dtype||"int32"===a.dtype,(function(){return"`images` must have `int32` or `float32` as dtype"}));var n=a,i=!1;3===a.rank&&(i=!0,n=wo(a,[1,a.shape[0],a.shape[1],a.shape[2]]));var o=_slicedToArray(t,2),s=o[0],l=o[1],u=qn.runKernelFunc((function(e,t){return t([n]),e.resizeNearestNeighbor(n,s,l,r)}),{images:n},null,pa,{alignCorners:r,size:t});return i?wo(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),Gf=ri({bandPart_:function(e,t,r){Ce(t%1==0,(function(){return"bandPart(): numLower must be an integer, got ".concat(t,".")})),Ce(r%1==0,(function(){return"bandPart(): numUpper must be an integer, got ".concat(r,".")}));var a=$n(e,"a","bandPart");Ce(a.rank>=2,(function(){return"bandPart(): Rank must be at least 2, got ".concat(a.rank,".")}));var n=a.shape,i=_slicedToArray(a.shape.slice(-2),2),o=i[0],s=i[1];if(!(t<=o))throw new Error("bandPart(): numLower (".concat(t,") must not be greater than the number of rows (").concat(o,")."));if(!(r<=s))throw new Error("bandPart(): numUpper (".concat(r,") must not be greater than the number of columns (").concat(s,")."));t<0&&(t=o),r<0&&(r=s);var l=wo(Xh(0,o,1,"int32"),[-1,1]),u=Xh(0,s,1,"int32"),h=Zs(l,u),c=lh(Yu(h,qs(+t,"int32")),Gu(h,qs(-r,"int32"))),f=ph([o,s],a.dtype);return wo(wc(Oc(wo(a,[-1,o,s])).map((function(e){return Tu(c,e,f)}))),n)}}),Hf=ri({gramSchmidt_:function(e){var t;Array.isArray(e)?function(){t=!1,Ce(null!=e&&e.length>0,(function(){return"Gram-Schmidt process: input must not be null, undefined, or empty"}));for(var r=e[0].shape[0],a=function(t){Ce(e[t].shape[0]===r,(function(){return"Gram-Schmidt: Non-unique lengths found in the input vectors: (".concat(e[t].shape[0]," vs. ").concat(r,")")}))},n=1;n<e.length;++n)a(n)}():(t=!0,e=yc(e,e.shape[0],0).map((function(e){return kc(e,[0])}))),Ce(e.length<=e[0].shape[0],(function(){return"Gram-Schmidt: Number of vectors (".concat(e.length,") exceeds number of dimensions (").concat(e[0].shape[0],").")}));for(var r=[],a=e,n=function(e){r.push(qn.tidy((function(){var t=a[e];if(e>0)for(var n=0;n<e;++n){var i=Os(ih(Os(r[n],t)),r[n]);t=Zs(t,i)}return Ds(t,tf(t,"euclidean"))})))},i=0;i<e.length;++i)n(i);return t?wc(r,0):r}});function jf(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return qn.tidy((function(){Ce(2===e.shape.length,(function(){return"qr2d() requires a 2D Tensor, but got a ".concat(e.shape.length,"D Tensor.")}));for(var r=e.shape[0],a=e.shape[1],n=Du(r),i=eo(e),o=Ic([[1]],[1,1]),s=eo(o),l=r>=a?a:r,u=function(e){var t,l=i,u=s,h=n;t=_slicedToArray(qn.tidy((function(){var t=Kl(i,[e,e],[r-e,1]),l=tf(t),u=Kl(i,[e,e],[1,1]),h=Tu(Wu(u,0),Ic([[-1]]),Ic([[1]])),c=Zs(u,Os(h,l)),f=Ds(t,c);s=1===f.shape[0]?eo(o):ql([o,Kl(f,[1,0],[f.shape[0]-1,f.shape[1]])],0);var d=th(Ds(Co(h,c),l)),v=Kl(i,[e,0],[r-e,a]),p=Os(d,s),g=So(s);if(0===e)i=Zs(v,Co(p,Co(g,v)));else{var _=Zs(v,Co(p,Co(g,v)));i=ql([Kl(i,[0,0],[e,a]),_],0)}var m=So(p),y=Kl(n,[0,e],[r,n.shape[1]-e]);if(0===e)n=Zs(y,Co(Co(y,s),m));else{var b=Zs(y,Co(Co(y,s),m));n=ql([Kl(n,[0,0],[r,e]),b],1)}return[s,i,n]})),3),s=t[0],i=t[1],n=t[2],bs([l,u,h])},h=0;h<l;++h)u(h);return!t&&r>a&&(n=Kl(n,[0,0],[r,a]),i=Kl(i,[0,0],[a,a])),[n,i]}))}var qf,Xf=ri({qr_:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(Ce(e.rank>=2,(function(){return"qr() requires input tensor to have a rank >= 2, but got rank "+e.rank})),2===e.rank)return jf(e,t);var r=e.shape.slice(0,e.shape.length-2).reduce((function(e,t){return e*t})),a=Oc(wo(e,[r,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),n=[],i=[];return a.forEach((function(e){var r=_slicedToArray(jf(e,t),2),a=r[0],o=r[1];n.push(a),i.push(o)})),[wo(wc(n,0),e.shape),wo(wc(i,0),e.shape)]}});!function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(qf||(qf={}));var Kf,Qf,Yf,Jf=ri({computeWeightedLoss_:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:qf.SUM_BY_NONZERO_WEIGHTS,a=$n(e,"losses","computeWeightedLoss"),n=null;null!=t&&(n=$n(t,"weights","computeWeightedLoss"));var i=null==n?a:Os(a,n);if(r===qf.NONE)return i;if(r===qf.SUM)return ih(i);if(r===qf.MEAN){if(null==n)return _h(i);var o=a.size/n.size,s=Ds(ih(i),ih(n));return o>1?Ds(s,qs(o)):s}if(r===qf.SUM_BY_NONZERO_WEIGHTS){if(null==n)return Ds(ih(i),qs(a.size));var l=Os(n,gh(a.shape)),u=$i(ih(Th(l,qs(0))),"float32");return Ds(ih(i),u)}throw Error("Unknown reduction: "+r)}}),Zf=ri({absoluteDifference_:function(e,t,r){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:qf.SUM_BY_NONZERO_WEIGHTS,n=$n(e,"labels","absoluteDifference"),i=$n(t,"predictions","absoluteDifference"),o=null;null!=r&&(o=$n(r,"weights","absoluteDifference")),Te(n.shape,i.shape,"Error in absoluteDifference: ");var s=el(Zs(n,i));return Jf(s,o,a)}}),$f=ri({cosineDistance_:function(e,t,r,a){var n=arguments.length>4&&void 0!==arguments[4]?arguments[4]:qf.SUM_BY_NONZERO_WEIGHTS,i=$n(e,"labels","cosineDistance"),o=$n(t,"predictions","cosineDistance"),s=null;null!=a&&(s=$n(a,"weights","cosineDistance")),Te(i.shape,o.shape,"Error in cosineDistance: ");var l=qs(1),u=Zs(l,ih(Os(i,o),r,!0));return Jf(u,s,n)}}),ed=ri({hingeLoss_:function(e,t,r){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:qf.SUM_BY_NONZERO_WEIGHTS,n=$n(e,"labels","hingeLoss"),i=$n(t,"predictions","hingeLoss"),o=null;null!=r&&(o=$n(r,"weights","hingeLoss")),Te(n.shape,i.shape,"Error in hingeLoss: ");var s=qs(1);n=Zs(Os(qs(2),n),s);var l=Qh(Zs(s,Os(n,i)));return Jf(l,o,a)}}),td=ri({huberLoss_:function(e,t,r){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1,n=arguments.length>4&&void 0!==arguments[4]?arguments[4]:qf.SUM_BY_NONZERO_WEIGHTS,i=$n(e,"labels","huberLoss"),o=$n(t,"predictions","huberLoss"),s=null;null!=r&&(s=$n(r,"weights","huberLoss")),Te(i.shape,o.shape,"Error in huberLoss: ");var l=qs(a),u=el(Zs(o,i)),h=yh(u,l),c=Zs(u,h),f=Fs(Os(qs(.5),zs(h)),Os(l,c));return Jf(f,s,n)}}),rd=ri({logLoss_:function(e,t,r){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1e-7,n=arguments.length>4&&void 0!==arguments[4]?arguments[4]:qf.SUM_BY_NONZERO_WEIGHTS,i=$n(e,"labels","logLoss"),o=$n(t,"predictions","logLoss"),s=null;null!=r&&(s=$n(r,"weights","logLoss")),Te(i.shape,o.shape,"Error in logLoss: ");var l=qs(1),u=qs(a),h=th(Os(i,$u(Fs(o,u)))),c=Os(Zs(l,i),$u(Fs(Zs(l,o),u))),f=Zs(h,c);return Jf(f,s,n)}}),ad=ri({meanSquaredError_:function(e,t,r){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:qf.SUM_BY_NONZERO_WEIGHTS,n=$n(e,"labels","meanSquaredError"),i=$n(t,"predictions","meanSquaredError"),o=null;null!=r&&(o=$n(r,"weights","meanSquaredError")),Te(n.shape,i.shape,"Error in meanSquaredError: ");var s=xc(n,i);return Jf(s,o,a)}}),nd=ri({sigmoidCrossEntropy_:function(e,t,r){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,n=arguments.length>4&&void 0!==arguments[4]?arguments[4]:qf.SUM_BY_NONZERO_WEIGHTS,i=$n(e,"multiClassLabels","sigmoidCrossEntropy"),o=$n(t,"logits","sigmoidCrossEntropy"),s=null;if(null!=r&&(s=$n(r,"weights","sigmoidCrossEntropy")),Te(i.shape,o.shape,"Error in sigmoidCrossEntropy: "),a>0){var l=qs(a),u=qs(1),h=qs(.5);i=Fs(Os(i,Zs(u,l)),Os(h,l))}var c=function(e,t){var r=$n(e,"labels","sigmoidCrossEntropyWithLogits"),a=$n(t,"logits","sigmoidCrossEntropyWithLogits");Te(r.shape,a.shape,"Error in sigmoidCrossEntropyWithLogits: ");var n=Qh(a),i=Os(a,r),o=eh(Nu(th(el(a))));return Fs(Zs(n,i),o)}(i,o);return Jf(c,s,n)}}),id=ri({softmaxCrossEntropy_:function(e,t,r){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,n=arguments.length>4&&void 0!==arguments[4]?arguments[4]:qf.SUM_BY_NONZERO_WEIGHTS,i=$n(e,"onehotLabels","softmaxCrossEntropy"),o=$n(t,"logits","softmaxCrossEntropy"),s=null;if(null!=r&&(s=$n(r,"weights","softmaxCrossEntropy")),Te(i.shape,o.shape,"Error in softmaxCrossEntropy: "),a>0){var l=qs(a),u=qs(1),h=qs(i.shape[1]);i=Fs(Os(i,Zs(u,l)),Ds(l,h))}var c=function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:-1;if(-1===r&&(r=t.rank-1),r!==t.rank-1)throw Error("Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ".concat(t.rank," and dim was ")+r);return Hs((function(e,t,a){var n=sh(t,[r],!0),i=Zs($i(t,"float32"),n);a([e,i]);var o=th(Os(i,e));return{value:ih(o,[r]),gradFunc:function(e,t){var a=_slicedToArray(t,2),n=a[0],i=a[1],o=pl(e.shape,[r]);return[Os(wo(e,o),Zs($i(n,"float32"),Nu(i))),Os(wo(e,o),Zs(Nu(i),$i(n,"float32")))]}}}))(e,t)}(i,o);return Jf(c,s,n)}}),od={fft:pc,ifft:gc,rfft:bc,irfft:_c},sd={hammingWindow:xf,hannWindow:kf,frame:wf,stft:Cf},ld={flipLeftRight:Sf,resizeNearestNeighbor:Wf,resizeBilinear:Uf,rotateWithOffset:If,cropAndResize:Tf,nonMaxSuppression:Rf,nonMaxSuppressionAsync:(Yf=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r,a){var n,i,o,s,l,u,h,c=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=c.length>3&&void 0!==c[3]?c[3]:.5,i=c.length>4&&void 0!==c[4]?c[4]:Number.NEGATIVE_INFINITY,o=$n(t,"boxes","nonMaxSuppressionAsync"),s=$n(r,"scores","nonMaxSuppressionAsync"),l=Af(o,s,a,n,i),a=l.maxOutputSize,n=l.iouThreshold,i=l.scoreThreshold,e.next=6,Promise.all([o.data(),s.data()]);case 6:return u=e.sent,h=Ff(u[0],u[1],a,n,i),e.abrupt("return",(o!==t&&o.dispose(),s!==r&&s.dispose(),h));case 9:case"end":return e.stop()}}),e)}))),function(e,t,r){return Yf.apply(this,arguments)}),nonMaxSuppressionWithScore:Pf,nonMaxSuppressionWithScoreAsync:(Qf=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r,a){var n,i,o,s,l,u,h,c,f=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=f.length>3&&void 0!==f[3]?f[3]:.5,i=f.length>4&&void 0!==f[4]?f[4]:Number.NEGATIVE_INFINITY,o=f.length>5&&void 0!==f[5]?f[5]:0,s=$n(t,"boxes","nonMaxSuppressionAsync"),l=$n(r,"scores","nonMaxSuppressionAsync"),u=Af(s,l,a,n,i,o),a=u.maxOutputSize,n=u.iouThreshold,i=u.scoreThreshold,o=u.softNmsSigma,e.next=7,Promise.all([s.data(),l.data()]);case 7:return h=e.sent,c=Df(h[0],h[1],a,n,i,o),e.abrupt("return",(s!==t&&s.dispose(),l!==r&&l.dispose(),c));case 10:case"end":return e.stop()}}),e)}))),function(e,t,r){return Qf.apply(this,arguments)}),nonMaxSuppressionPadded:Vf,nonMaxSuppressionPaddedAsync:(Kf=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r,a){var n,i,o,s,l,u,h,c,f,d,v,p,g,_,m=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=m.length>3&&void 0!==m[3]?m[3]:.5,i=m.length>4&&void 0!==m[4]?m[4]:Number.NEGATIVE_INFINITY,o=m.length>5&&void 0!==m[5]&&m[5],s=$n(t,"boxes","nonMaxSuppressionAsync"),l=$n(r,"scores","nonMaxSuppressionAsync"),u=Af(s,l,a,n,i,null),h=u.maxOutputSize,c=u.iouThreshold,f=u.scoreThreshold,e.next=11,Promise.all([s.data(),l.data()]);case 11:return d=e.sent,v=_slicedToArray(d,2),p=v[0],g=v[1],_=Mf(p,g,h,c,f,o),e.abrupt("return",(s!==t&&s.dispose(),l!==r&&l.dispose(),_));case 17:case"end":return e.stop()}}),e)}))),function(e,t,r){return Kf.apply(this,arguments)})},ud={bandPart:Gf,gramSchmidt:Hf,qr:Xf},hd={absoluteDifference:Zf,computeWeightedLoss:Jf,cosineDistance:$f,hingeLoss:ed,huberLoss:td,logLoss:rd,meanSquaredError:ad,sigmoidCrossEntropy:nd,softmaxCrossEntropy:id},cd=function(){function e(){_classCallCheck(this,e)}return _createClass(e,null,[{key:"sgd",value:function(e){return new ol(e)}},{key:"momentum",value:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return new sl(e,t,r)}},{key:"rmsprop",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.9,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,n=arguments.length>4&&void 0!==arguments[4]&&arguments[4];return new ll(e,t,r,a,n)}},{key:"adam",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:.001,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.9,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:.999,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return new $s(e,t,r,a)}},{key:"adadelta",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:.001,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.95,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;return new Ks(e,t,r)}},{key:"adamax",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:.002,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.9,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:.999,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,n=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0;return new il(e,t,r,a,n)}},{key:"adagrad",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.1;return new Ys(e,t)}}]),e}(),fd={sgd:cd.sgd,momentum:cd.momentum,adadelta:cd.adadelta,adagrad:cd.adagrad,rmsprop:cd.rmsprop,adamax:cd.adamax,adam:cd.adam},dd="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:function(e){return e()};function vd(){return new Promise((function(e){return dd((function(){return e()}))}))}function pd(e,t,r){return[r*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}function gd(e,t,r){var a=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],n=[];if(a)(n=n.concat(t.slice(0))).push(e[0]/r),n=n.concat(e.slice(1));else{n=n.concat(e[0]);for(var i=t.length,o=0;o<i;++o)n=n.concat([e[o+1]/t[o],t[o]]);n=n.concat(e.slice(i+1))}return n}function _d(e,t){var r=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],a=[];if(r){a.push(t);for(var n=t+1;n<e;++n)n<=2*t?(a.push(n),a.push(n-(t+1))):a.push(n)}else{for(var i=[],o=[],s=1;s<e;++s)s>=2*t+1||s%2==1?o.push(s):i.push(s);a.push.apply(a,i),a.push(0),a.push.apply(a,o)}return a}function md(e,t,r){var a=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],n=[];n.push(a?e[0]/r:e[0]*r);for(var i=1;i<e.length;++i)n.push(i<=t.length?a?t[i-1]*e[i]:e[i]/t[i-1]:e[i]);return n}function yd(e,t){for(var r=[0],a=0;a<t;++a)r.push(e[a][0]);return r}function bd(e,t,r){for(var a=e.slice(0,1),n=0;n<r;++n)a.push(e[n+1]-t[n][0]-t[n][1]);return a}var xd=1.7580993408473768,kd=1.0507009873554805,wd=.3275911,Cd=.254829592,Td=-.284496736,Sd=1.421413741,Id=-1.453152027,Ad=1.061405429;function Rd(){var e;ht().getBool("IS_TEST")||(e=console).warn.apply(e,arguments)}function Nd(){var e;ht().getBool("IS_TEST")||(e=console).log.apply(e,arguments)}function Ed(e,t){if(e.length!==t.length)throw new Error("Cannot merge real and imag arrays of different lengths. real:".concat(e.length,", imag: ").concat(t.length,"."));for(var r=new Float32Array(2*e.length),a=0;a<r.length;a+=2)r[a]=e[a/2],r[a+1]=t[a/2];return r}function Fd(e){for(var t=new Float32Array(e.length/2),r=new Float32Array(e.length/2),a=0;a<e.length;a+=2)t[a/2]=e[a],r[a/2]=e[a+1];return{real:t,imag:r}}function Md(e){for(var t=Math.ceil(e.length/4),r=new Float32Array(t),a=new Float32Array(t),n=0;n<e.length;n+=4)r[Math.floor(n/4)]=e[n],a[Math.floor(n/4)]=e[n+1];return{real:r,imag:a}}function Dd(e){for(var t=Math.floor(e.length/4),r=new Float32Array(t),a=new Float32Array(t),n=2;n<e.length;n+=4)r[Math.floor(n/4)]=e[n],a[Math.floor(n/4)]=e[n+1];return{real:r,imag:a}}function Od(e,t){return{real:e[2*t],imag:e[2*t+1]}}function Ld(e,t,r,a){e[2*a]=t,e[2*a+1]=r}function zd(e,t){for(var r=new Float32Array(e/2),a=new Float32Array(e/2),n=0;n<Math.ceil(e/2);n++){var i=(t?2:-2)*Math.PI*(n/e);r[n]=Math.cos(i),a[n]=Math.sin(i)}return{real:r,imag:a}}function Bd(e,t,r){var a=(r?2:-2)*Math.PI*(e/t);return{real:Math.cos(a),imag:Math.sin(a)}}function Pd(e,t,r){if("complex64"===t){if("complex64"===e.dtype)return e.clone();var a=ph(e.shape),n=$i(e,"float32"),i=r.complex(n,a);return a.dispose(),n.dispose(),i}if(!He(e.dtype,t))return qn.makeTensorFromDataId(e.dataId,e.shape,t);if("complex64"===e.dtype){var o=r.real(e),s=$i(o,t);return o.dispose(),s}if("int32"===t)return r.int(e);if("bool"===t){var l=qs(0,e.dtype),u=r.notEqual(e,l);return l.dispose(),u}throw new Error("Error in Cast: failed to cast ".concat(e.dtype," to ").concat(t))}function Vd(e,t){return qn.makeTensorFromDataId(e.dataId,t,e.dtype)}function Ud(e,t,r){var a=(t-e)/(r-1),n=at(r,"float32");n[0]=e;for(var i=1;i<n.length;i++)n[i]=n[i-1]+a;return qh(n,"float32")}function Wd(e,t,r){var a=new Array(e.rank).fill(0),n=e.shape.slice();return t.map((function(t){var i=_toConsumableArray(n);i[r]=t;var o=Kl(e,a,i);return a[r]+=t,o}))}function Gd(e,t){for(var r=new Array(e.rank),a=0;a<r.length;a++)r[a]=e.shape[a]*t[a];for(var n=Zi(r,e.dtype),i=0;i<n.values.length;++i){for(var o=n.indexToLoc(i),s=new Array(e.rank),l=0;l<s.length;l++)s[l]=o[l]%e.shape[l];var u=e.locToIndex(s);n.values[i]=e.values[u]}return n.toTensor()}function Hd(e,t,r,a,n){for(var i=t[t.length-1],o=e.length/i,s=i,l=Ve(r,o*a),u=Ve("int32",o*a),h=0;h<o;h++){for(var c=h*s,f=e.subarray(c,c+s),d=[],v=0;v<f.length;v++)d.push({value:f[v],index:v});d.sort((function(e,t){return t.value-e.value}));for(var p=h*a,g=l.subarray(p,p+a),_=u.subarray(p,p+a),m=0;m<a;m++)g[m]=d[m].value,_[m]=d[m].index}var y=t.slice();return y[y.length-1]=a,[ii(l,y,r),ii(u,y,"int32")]}var jd={kernelName:pt,inputsToSave:["x"],gradFunc:function(e,t){var r=_slicedToArray(t,1)[0];return{x:function(){return Os(e,Cc($i(r,"float32"),-1))}}}},qd={kernelName:gt,inputsToSave:["x"],gradFunc:function(e,t){var r=_slicedToArray(t,1)[0];return{x:function(){var t=zs($i(r,"float32")),a=Ls(Zs(qs(1),t));return th(Ds(e,a))}}}},Xd={kernelName:_t,inputsToSave:["x"],gradFunc:function(e,t){var r=_slicedToArray(t,1)[0];return{x:function(){var t=Ls(Zs(zs($i(r,"float32")),1));return Ds(e,t)}}}},Kd={kernelName:mt,inputsToSave:["a","b"],gradFunc:function(e,t){var r=_slicedToArray(t,2),a=r[0],n=r[1],i=al(a.shape,n.shape);return{a:function(){var t=e,r=rl(a.shape,i);return r.length>0&&(t=ih(t,r)),wo(t,a.shape)},b:function(){var t=e,r=rl(n.shape,i);return r.length>0&&(t=ih(t,r)),wo(t,n.shape)}}}},Qd={kernelName:yt,saveAllInputs:!0,gradFunc:function(e,t){var r={};return t.forEach((function(t,a){r[a]=function(){return e.clone()}})),r}},Yd={kernelName:kt,inputsToSave:["x"],gradFunc:function(e,t){var r=_slicedToArray(t,1)[0];return{x:function(){return Bs(r)}}}},Jd={kernelName:wt,inputsToSave:["x"],gradFunc:function(e,t){var r=_slicedToArray(t,1)[0];return{x:function(){return Bs(r)}}}},Zd={kernelName:Ct,inputsToSave:["x"],gradFunc:function(e,t){var r=_slicedToArray(t,1)[0];return{x:function(){return Ds(e,Ls(Zs(qs(1),zs($i(r,"float32")))))}}}},$d={kernelName:Tt,inputsToSave:["x"],gradFunc:function(e,t){var r=_slicedToArray(t,1)[0];return{x:function(){var t=Ls(Fs(qs(1),zs($i(r,"float32"))));return Ds(e,t)}}}},ev={kernelName:At,inputsToSave:["a","b"],gradFunc:function(e,t){var r=_slicedToArray(t,2),a=r[0],n=r[1],i=al(a.shape,n.shape);return{a:function(){var t=Fs(zs(a),zs(n)),r=Os(e,Ds(n,t)),o=rl(a.shape,i);return o.length>0&&(r=ih(r,o)),wo(r,a.shape)},b:function(){var t=Fs(zs(a),zs(n)),r=th(Os(e,Ds(a,t))),o=rl(n.shape,i);return o.length>0&&(r=ih(r,o)),wo(r,n.shape)}}}},tv={kernelName:St,inputsToSave:["x"],gradFunc:function(e,t){var r=_slicedToArray(t,1)[0];return{x:function(){return Ds(e,Fs(zs($i(r,"float32")),1))}}}},rv={kernelName:It,inputsToSave:["x"],gradFunc:function(e,t){var r=_slicedToArray(t,1)[0];return{x:function(){return Ds(e,Zs(qs(1),zs($i(r,"float32"))))}}}},av=ri({avgPool3dBackprop_:function(e,t,r,a){var n=arguments.length>4&&void 0!==arguments[4]?arguments[4]:[1,1,1],i=arguments.length>5?arguments[5]:void 0,o=arguments.length>6?arguments[6]:void 0,s=$n(e,"dy","avgPool3dBackprop"),l=$n(t,"input","avgPool3dBackprop"),u=s,h=l,c=!1;4===l.rank&&(c=!0,u=wo(s,[1,s.shape[0],s.shape[1],s.shape[2],s.shape[3]]),h=wo(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]])),Ce(5===u.rank,(function(){return"Error in avgPool3dBackprop: dy must be rank 5 but got rank "+u.rank+"."})),Ce(5===h.rank,(function(){return"Error in avgPool3dBackprop: input must be rank 5 but got rank "+h.rank+"."})),Ce(Vl(a,n),(function(){return"Error in avgPool3dBackprop: Either strides or dilations must be 1. Got strides ".concat(a," and dilations '").concat(n,"'")})),null!=o&&Ce(Ee(i),(function(){return"Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode ".concat(o," but got pad ").concat(i,".")}));var f=qn.runKernelFunc((function(e){var t=El(h.shape,r,a,n,i,o);return e.avgPool3dBackprop(u,h,t)}),{dy:u,input:h},null,Ft,{filterSize:r,strides:a,dilations:n,pad:i,dimRoundingMode:o});return c?wo(f,[f.shape[1],f.shape[2],f.shape[3],f.shape[4]]):f}}),nv={kernelName:Et,inputsToSave:["x"],gradFunc:function(e,t,r){var a=_slicedToArray(t,1)[0],n=r.filterSize,i=r.strides,o=r.dilations,s=r.pad,l=r.dimRoundingMode,u=null==o?[1,1,1]:o;return{x:function(){return av(e,a,n,i,u,s,l)}}}},iv=ri({avgPoolBackprop_:function(e,t,r,a,n){var i=$n(e,"dy","avgPoolBackprop"),o=$n(t,"input","avgPoolBackprop");Ce(o.rank===i.rank,(function(){return"Rank of input (".concat(o.rank,") does not match rank of dy (").concat(i.rank,")")}));var s=o,l=i,u=!1;3===o.rank&&(u=!0,s=wo(o,[1,o.shape[0],o.shape[1],o.shape[2]]),l=wo(i,[1,i.shape[0],i.shape[1],i.shape[2]])),Ce(4===l.rank,(function(){return"Error in avgPoolBackprop: dy must be rank 4 but got rank "+l.rank+"."})),Ce(4===s.rank,(function(){return"Error in avgPoolBackprop: input must be rank 4 but got rank "+s.rank+"."}));var h=qn.runKernelFunc((function(e){var t=Nl(s.shape,r,a,1,n);return e.avgPoolBackprop(l,s,t)}),{dy:l,input:s},null,Nt,{filterSize:r,strides:a,pad:n});return u?wo(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),ov={kernelName:Rt,inputsToSave:["x"],gradFunc:function(e,t,r){var a=_slicedToArray(t,1)[0],n=r.filterSize,i=r.strides,o=r.pad;return{x:function(){return iv(e,a,n,i,o)}}}},sv={kernelName:Mt,inputsToSave:["a","b"],gradFunc:function(e,t,r){var a=_slicedToArray(t,2),n=a[0],i=a[1],o=r.transposeA,s=r.transposeB;return o||s?!o&&s?{a:function(){return Co(e,i,!1,!1)},b:function(){return Co(e,n,!0,!1)}}:o&&!s?{a:function(){return Co(i,e,!1,!0)},b:function(){return Co(n,e,!1,!1)}}:{a:function(){return Co(i,e,!0,!0)},b:function(){return Co(e,n,!0,!0)}}:{a:function(){return Co(e,i,!1,!0)},b:function(){return Co(n,e,!0,!1)}}}},lv={kernelName:Dt,gradFunc:function(e,t,r){var a=r.blockShape,n=r.crops;return{x:function(){return Dh(e,a,n)}}}},uv={kernelName:Ot,gradFunc:function(e,t,r){for(var a=r.inputShape,n=r.shape,i=Array.from(n),o=a.length-1;o>=0;o--)if(a[o]===n[o])i[o]=1;else if(1!==a[o])throw new Error("broadcastTo(): [".concat(a,"] cannot be broadcast to [").concat(n,"]."));for(var s=[],l=0;l<i.length;l++)i[l]>1&&s.push(l);return{x:function(){return ih(e,s,!0)}}}},hv={kernelName:Lt,gradFunc:function(e){return{x:function(){return e.clone()}}}},cv={kernelName:zt,gradFunc:function(e){return{x:function(){return Bs(e)}}}},fv={kernelName:Bt,inputsToSave:["x"],gradFunc:function(e,t,r){var a=_slicedToArray(t,1)[0],n=r.clipValueMin,i=r.clipValueMax;return{x:function(){return Tu(lh(Gu(a,n),Yu(a,i)),e,Bs(e))}}}},dv={kernelName:Vt,saveAllInputs:!0,gradFunc:function(e,t,r){var a=t.map((function(e){return e.shape})),n=Be(r.axis,t[0].shape)[0],i=a.map((function(e){return e[n]}));return yc(e,i,n).map((function(e){return function(){return e}}))}},vv={kernelName:Ut,inputsToSave:["x","filter"],gradFunc:function(e,t,r){var a=_slicedToArray(t,2),n=a[0],i=a[1],o=r.dilations,s=r.strides,l=r.pad,u=r.dataFormat;return Ce(Pl(o),(function(){return"Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '".concat(o,"'")})),{x:function(){return fu(n.shape,e,i,s,l,u)},filter:function(){return cf(n,e,i.shape,s,l,u)}}}},pv={kernelName:Gt,inputsToSave:["dy","filter"],gradFunc:function(e,t,r){var a=_slicedToArray(t,2),n=a[0],i=a[1],o=r.strides,s=r.pad,l=r.dataFormat,u=r.dimRoundingMode;return{dy:function(){return hu(e,i,o,s,l,1,u)},filter:function(){return cf(e,n,i.shape,o,s,l,u)}}}},gv=ri({conv3DBackpropFilter_:function(e,t,r,a,n){var i=e;4===e.rank&&(i=wo(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]));var o=t;return 4===o.rank&&(o=wo(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),Ce(5===i.rank,(function(){return"Error in conv3dDerFilter: input must be rank 5, but got shape "+i.shape+"."})),Ce(5===o.rank,(function(){return"Error in conv3dDerFilter: dy must be rank 5, but got shape "+o.shape+"."})),Ce(5===r.length,(function(){return"Error in conv3dDerFilter: filterShape must be length 5, but got "+r+"."})),Ce(i.shape[4]===r[3],(function(){return"Error in conv3dDerFilter: depth of input ".concat(i.shape[4],") must match input depth in filter (").concat(r[3],".")})),Ce(o.shape[4]===r[4],(function(){return"Error in conv3dDerFilter: depth of dy (".concat(o.shape[4],") must match output depth for filter (").concat(r[4],").")})),qn.runKernelFunc((function(e){var t=Ml(i.shape,r,a,1,n);return e.conv3dDerFilter(i,o,t)}),{x:i,dy:o},null,jt,{strides:a,pad:n,filterShape:r})}}),_v={kernelName:Ht,inputsToSave:["x","filter"],gradFunc:function(e,t,r){var a=r.dilations,n=r.strides,i=r.pad;Ce(Pl(a),(function(){return"Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '".concat(a,"'")}));var o=_slicedToArray(t,2),s=o[0],l=o[1];return{x:function(){return pu(s.shape,e,l,n,i)},filter:function(){return gv(s,e,l.shape,n,i)}}}},mv={kernelName:Xt,inputsToSave:["x"],gradFunc:function(e,t){var r=_slicedToArray(t,1)[0];return{x:function(){return Os(th(lc($i(r,"float32"))),e)}}}},yv={kernelName:Kt,inputsToSave:["x"],gradFunc:function(e,t){var r=_slicedToArray(t,1)[0];return{x:function(){return Os(uc($i(r,"float32")),e)}}}},bv={kernelName:Qt,inputsToSave:["x"],gradFunc:function(e,t,r){var a=_slicedToArray(t,1)[0],n=r.axis,i=r.exclusive,o=r.reverse;return{x:function(){var t=_l([n],a.rank),r=yu(e,n,i,!o);return null!=t&&(r=So(r,t)),r}}}},xv={kernelName:Zt,inputsToSave:["x","filter"],gradFunc:function(e,t,r){var a=r.dilations,n=r.strides,i=r.pad,o=r.dimRoundingMode,s=null==a?[1,1]:a;Ce(Pl(s),(function(){return"Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '".concat(s,"'")}));var l=_slicedToArray(t,2),u=l[0],h=l[1];return Ce(4===u.rank,(function(){return"Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ".concat(u.rank,".")})),Ce(4===h.rank,(function(){return"Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ".concat(h.rank,".")})),Ce(u.shape[3]===h.shape[2],(function(){return"Error in gradient of depthwiseConv2d: number of input channels (".concat(u.shape[3],") must match the inChannels dimension in filter ").concat(h.shape[2],".")})),Ce(Vl(n,s),(function(){return"Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ".concat(n," and dilations '").concat(s,"'.")})),null!=o&&Ce(Ee(i),(function(){return"Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ".concat(o," but got pad ").concat(i,".")})),{x:function(){return mf(u.shape,e,h,n,i,a,o)},filter:function(){return _f(u,e,h.shape,n,i,a,o)}}}},kv={kernelName:rr,inputsToSave:["x","filter"],gradFunc:function(e,t,r){var a=_slicedToArray(t,2),n=a[0],i=a[1],o={x:n,filter:i,dy:e},s={x:n,filter:i,dy:e};return{x:function(){return qn.runKernel(ar,o,r)},filter:function(){return qn.runKernel(nr,s,r)}}}},wv={kernelName:ir,inputsToSave:["a","b"],gradFunc:function(e,t){var r=_slicedToArray(t,2),a=r[0],n=r[1],i=al(a.shape,n.shape);return{a:function(){var t=Ds(e,$i(n,"float32")),r=rl(a.shape,i);return r.length>0?wo(ih(t,r),a.shape):t},b:function(){var t=Os(e,$i(a,"float32")),r=rl(n.shape,i);r.length>0&&(t=wo(ih(t,r),n.shape));var o=zs(n);return th(Ds(t,$i(o,"float32")))}}}},Cv={kernelName:or,outputsToSave:[!0],gradFunc:function(e,t){var r=_slicedToArray(t,1)[0],a=function(t){return t.eluDer(e,r)},n={dy:e,y:r};return{x:function(){return qn.runKernelFunc(a,n,null,sr)}}}},Tv={kernelName:lr,inputsToSave:["x"],gradFunc:function(e,t){var r=_slicedToArray(t,1)[0],a=Os(Nu(th(zs(r))),2/Math.sqrt(Math.PI));return{x:function(){return Os(e,a)}}}},Sv={kernelName:hr,outputsToSave:[!0],gradFunc:function(e,t){var r=_slicedToArray(t,1)[0];return{x:function(){return Os(e,r)}}}},Iv={kernelName:cr,inputsToSave:["x"],gradFunc:function(e,t){var r=_slicedToArray(t,1)[0];return{x:function(){return Os(e,Nu(r))}}}},Av={kernelName:pr,gradFunc:function(e){return{x:function(){return Bs(e)}}}},Rv={kernelName:gr,inputsToSave:["a","b"],gradFunc:function(e,t){var r=_slicedToArray(t,2),a=r[0],n=r[1],i=al(a.shape,n.shape);return{a:function(){var t=Ds(e,$i(n,"float32")),r=rl(a.shape,i);return r.length>0?wo(ih(t,r),a.shape):t},b:function(){var t=Os(e,$i(a,"float32")),r=rl(n.shape,i);r.length>0&&(t=wo(ih(t,r),n.shape));var o=zs(n);return th(Ds(t,$i(o,"float32")))}}}},Nv={kernelName:_r,inputsToSave:["x","mean","variance","scale"],gradFunc:function(e,t,r){var a=r.varianceEpsilon,n=_slicedToArray(t,4),i=n[0],o=n[1],s=n[2],l=n[3],u=null==l?qs(1):l,h=rl(o.shape,i.shape),c=[];if(1===o.rank){for(var f=0;f<i.shape.length-1;++f)c.push(i.shape[f]);c.push(1)}var d=Zs(i,o),v=Os(e,u),p=ac(Fs(s,qs(a))),g=Os(Os(Os(p,p),p),qs(-.5));return{x:function(){return wo(Os(Os(e,1===o.rank?Mu(wo(p,[1,1,1,o.shape[0]]),c):p),u),i.shape)},mean:function(){var e=Os(Os(p,qs(-1)),v);return 1===o.rank&&(e=ih(e,h)),wo(e,o.shape)},variance:function(){var e=Os(Os(g,d),v);return 1===o.rank&&(e=ih(e,h)),wo(e,o.shape)},scale:function(){var t=Os(d,p),r=Os(e,t);return 1===o.rank&&(r=ih(r,h)),wo(r,o.shape)},offset:function(){var t=e;return 1===o.rank&&(t=ih(t,h)),wo(t,o.shape)}}}},Ev={kernelName:mr,inputsToSave:["x","indices"],gradFunc:function(e,t,r){var a=_slicedToArray(t,2),n=a[0],i=a[1],o=r.axis,s=Be(o,n.shape)[0];return{x:function(){var t=n.shape,r=i.size,a=t.slice(0,s),l=a.length,u=t.slice(o,t.length).slice(1),h=u.length,c=Fv(0,l),f=Fv(l+1,l+1+h),d=Mv([a,[r],u]),v=wo(e,d),p=wo(i,[r]),g=Mv([[l],c,f]),_=So(v,g),m=Dc(_,p,n.shape[s]),y=ml(g);return m=So(m,y)},indices:function(){return i}}}};function Fv(e,t){for(var r=[],a=e;a<t;++a)r.push(a);return r}function Mv(e){for(var t=[],r=0;r<e.length;++r)for(var a=0;a<e[r].length;++a)t.push(e[r][a]);return t}var Dv={kernelName:xr,inputsToSave:["a","b"],gradFunc:function(e,t){var r=_slicedToArray(t,2),a=r[0],n=r[1];return{a:function(){return Bs(a)},b:function(){return Bs(n)}}}},Ov={kernelName:kr,gradFunc:function(e){return{x:function(){return $i(e,"float32")}}}},Lv={kernelName:Tr,gradFunc:function(e){return{x:function(){return Bs(e)}}}},zv={kernelName:Sr,gradFunc:function(e){return{x:function(){return Bs(e)}}}},Bv={kernelName:Ir,gradFunc:function(e){return{x:function(){return Bs(e)}}}},Pv={kernelName:Fr,inputsToSave:["x"],gradFunc:function(e,t){var r=_slicedToArray(t,1)[0];return{x:function(){return Ds(e,Fs(r,1))}}}},Vv={kernelName:Er,inputsToSave:["x"],gradFunc:function(e,t){var r=_slicedToArray(t,1)[0];return{x:function(){return Ds(e,$i(r,"float32"))}}}},Uv={kernelName:Lr,inputsToSave:[],outputsToSave:[!0],gradFunc:function(e,t,r){var a=_slicedToArray(t,1)[0],n=r.axis;return{logits:function(){var t=Nu(a);return Zs(e,Os(ih(e,n,!0),t))}}}},Wv=ri({localResponseNormalizationBackprop_:function(e,t,r){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:5,n=arguments.length>4&&void 0!==arguments[4]?arguments[4]:1,i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1,o=arguments.length>6&&void 0!==arguments[6]?arguments[6]:.5;return qn.runKernelFunc((function(s){return s.LRNGrad(r,e,t,a,n,i,o)}),{x:e,y:t,dy:r},null,Br,{depthRadius:a,bias:n,alpha:i,beta:o})}}),Gv={kernelName:zr,inputsToSave:["x"],outputsToSave:[!0],gradFunc:function(e,t,r){var a=_slicedToArray(t,2),n=a[0],i=a[1],o=r.depthRadius,s=r.bias,l=r.alpha,u=r.beta;return{x:function(){return Wv(n,i,e,o,s,l,u)}}}};function Hv(e,t,r,a){return t.rank<r.rank&&(t=wo(t,pl(t.shape,a))),e.rank<r.rank&&(e=wo(e,pl(e.shape,a))),{x:function(){return Os(e,$i(Cu(r,t),e.dtype))}}}for(var jv,qv,Xv={kernelName:Pr,inputsToSave:["x"],outputsToSave:[!0],gradFunc:function(e,t,r){var a=r.reductionIndices,n=t[0],i=Hv(e,t[1],n,Be(a,n.shape));return{x:function(){return i.x()}}}},Kv={kernelName:Vr,inputsToSave:["a","b"],gradFunc:function(e,t){var r=_slicedToArray(t,2),a=r[0],n=r[1];return{a:function(){return Os(e,$i(Gu(a,n),"float32"))},b:function(){return Os(e,$i(Qu(a,n),"float32"))}}}},Qv=ri({maxPool3dBackprop_:function(e,t,r,a,n){var i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:[1,1,1],o=arguments.length>6?arguments[6]:void 0,s=arguments.length>7?arguments[7]:void 0,l=$n(e,"dy","maxPool3dBackprop"),u=$n(t,"input","maxPool3dBackprop"),h=$n(r,"output","maxPool3dBackprop"),c=l,f=u,d=h,v=!1;4===u.rank&&(v=!0,c=wo(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),f=wo(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]]),d=wo(h,[1,h.shape[0],h.shape[1],h.shape[2],h.shape[3]])),Ce(5===c.rank,(function(){return"Error in maxPool3dBackprop: dy must be rank 5 but got rank "+c.rank+"."})),Ce(5===f.rank,(function(){return"Error in maxPool3dBackprop: input must be rank 5 but got rank "+f.rank+"."})),Ce(5===d.rank,(function(){return"Error in maxPool3dBackprop: output must be rank 5 but got rank "+d.rank+"."})),Ce(Vl(n,i),(function(){return"Error in maxPool3dBackprop: Either strides or dilations must be 1. Got strides ".concat(n," and dilations '").concat(i,"'")})),null!=s&&Ce(Ee(o),(function(){return"Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode ".concat(s," but got pad ").concat(o,".")}));var p=qn.runKernelFunc((function(e){var t=El(f.shape,a,n,i,o,s);return e.maxPool3dBackprop(c,f,d,t)}),{dy:c,input:f,output:d},null,Hr,{filterSize:a,strides:n,dilations:i,pad:o,dimRoundingMode:s});return v?wo(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),Yv={kernelName:Gr,inputsToSave:["x"],outputsToSave:[!0],gradFunc:function(e,t,r){var a=_slicedToArray(t,2),n=a[0],i=a[1],o=r.filterSize,s=r.strides,l=r.dilations,u=r.pad,h=r.dimRoundingMode,c=null==l?[1,1,1]:l;return{x:function(){return Qv(e,n,i,o,s,c,u,h)}}}},Jv=ri({maxPoolBackprop_:function(e,t,r,a,n,i,o){var s=$n(e,"dy","maxPoolBackprop"),l=$n(t,"input","maxPoolBackprop"),u=$n(r,"output","maxPoolBackprop");return Ce(l.rank===s.rank,(function(){return"Rank of input (".concat(l.rank,") does not match rank of dy (").concat(s.rank,")")})),Ce(4===s.rank,(function(){return"Error in maxPoolBackprop: dy must be rank 4 but got rank "+s.rank+"."})),Ce(4===l.rank,(function(){return"Error in maxPoolBackprop: input must be rank 4 but got rank "+l.rank+"."})),null!=o&&Ce(Ee(i),(function(){return"Error in maxPoolBackprop: pad must be an integer when using, dimRoundingMode ".concat(o," but got pad ").concat(i,".")})),qn.runKernelFunc((function(e){var t=Nl(l.shape,a,n,1,i,o);return e.maxPoolBackprop(s,l,u,t)}),{dy:s,input:l,output:u},null,Wr,{filterSize:a,strides:n,pad:i,dimRoundingMode:o})}}),Zv={kernelName:ia,inputsToSave:["x"],gradFunc:function(e,t,r){var a=t[0],n=r.paddings.map((function(e){return e[0]}));return{x:function(){return Kl(e,n,a.shape)}}}},$v={kernelName:Da,gradFunc:function(e,t,r){var a=r.blockShape,n=r.paddings;return{x:function(){return Jl(e,a,n)}}}},ep={kernelName:Oa,gradFunc:function(e,t,r){var a=r.axis;return{x:function(){return ql(e,a)}}}},tp=0,rp=[jd,qd,Xd,Kd,Qd,Yd,Jd,Zd,$d,ev,tv,rv,nv,ov,sv,lv,uv,hv,cv,fv,dv,pv,vv,_v,mv,yv,bv,xv,kv,wv,Cv,Tv,Sv,Iv,Rv,Av,Nv,Ev,Dv,Ov,Lv,zv,Bv,Pv,Vv,Uv,Gv,Xv,Xv,Kv,Yv,{kernelName:Ur,inputsToSave:["x"],outputsToSave:[!0],gradFunc:function(e,t,r){var a=_slicedToArray(t,2),n=a[0],i=a[1],o=r.filterSize,s=r.strides,l=r.pad;return{x:function(){return Jv(e,n,i,o,s,l)}}}},{kernelName:Xr,inputsToSave:["x"],outputsToSave:[!0],gradFunc:function(e,t,r){var a=r.axis,n=_slicedToArray(t,2),i=n[0],o=Hv(e,n[1],i,Be(a,i.shape));return{x:function(){return o.x()}}}},{kernelName:Kr,inputsToSave:["a","b"],gradFunc:function(e,t){var r=_slicedToArray(t,2),a=r[0],n=r[1];return{a:function(){return Os(e,$i(Yu(a,n),"float32"))},b:function(){return Os(e,$i(Wu(a,n),"float32"))}}}},{kernelName:Qr,inputsToSave:["x"],gradFunc:function(e,t,r){var a=t[0],n=r.paddings.map((function(e){return e[0]}));return{x:function(){return Kl(e,n,a.shape)}}}},{kernelName:Yr,inputsToSave:["a","b"],gradFunc:function(e,t){var r=_slicedToArray(t,2),a=r[0],n=r[1],i=al(a.shape,n.shape);return{a:function(){var t=rl(a.shape,i);return t.length>0?wo(ih(e,t),a.shape):e},b:function(){var t=Os(e,th(Ou(Ds(a,n)))),r=rl(n.shape,i);return r.length>0?wo(ih(t,r),n.shape):t}}}},{kernelName:Jr,inputsToSave:["a","b"],gradFunc:function(e,t){var r=_slicedToArray(t,2),a=r[0],n=r[1],i=al(a.shape,n.shape);return{a:function(){var t=Os(e,$i(n,"float32")),r=rl(a.shape,i);return r.length>0?wo(ih(t,r),a.shape):t},b:function(){var t=Os(e,$i(a,"float32")),r=rl(n.shape,i);return r.length>0?wo(ih(t,r),n.shape):t}}}},{kernelName:Zr,gradFunc:function(e){return{x:function(){return th(e)}}}},{kernelName:na,inputsToSave:["indices"],gradFunc:function(e,t){var r=t[0];return{indices:function(){return ph(r.shape,"float32")}}}},{kernelName:aa,gradFunc:function(e){return{x:function(){return Bs(e)}}}},Zv,Zv,{kernelName:sa,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:function(e,t){var r=_slicedToArray(t,3),a=r[0],n=r[1],i=r[2],o=a,s=n,l=al(o.shape,s.shape);return{a:function(){var t=$i(s,"float32"),r=Os(e,Os(t,Js(o,Zs(t,qs(1))))),a=rl(o.shape,l);return a.length>0&&(r=ih(r,a)),wo(r,o.shape)},b:function(){var t=Wu(o,0),r=Tu(t,$u(o),Bs(o)),a=Os(e,Os(i,r)),n=rl(s.shape,l);return n.length>0&&(a=ih(a,n)),wo(a,s.shape)}}}},{kernelName:la,inputsToSave:["x","alpha"],gradFunc:function(e,t){var r=_slicedToArray(t,2),a=r[0],n=r[1],i=Wu(a,0);return{x:function(){return Tu(i,e,Os(e,n))},alpha:function(){var t=Tu(i,Bs(e),Os(e,a)),r=rl(n.shape,e.shape);return r.length>0&&(t=ih(t,r)),wo(t,n.shape)}}}},{kernelName:fa,inputsToSave:["x"],gradFunc:function(e,t){var r=_slicedToArray(t,1)[0];return{x:function(){return Ds(e,th(zs(r)))}}}},{kernelName:ya,inputsToSave:["x"],gradFunc:function(e,t){var r=_slicedToArray(t,1)[0],a=Os(Yu(r,6),Cc(r));return{x:function(){return Os(e,$i(a,"float32"))}}}},{kernelName:da,inputsToSave:["x"],gradFunc:function(e,t){var r=_slicedToArray(t,1)[0];return{x:function(){return Os(e,$i(Cc(r),"float32"))}}}},{kernelName:va,inputsToSave:["x"],gradFunc:function(e,t){var r=_slicedToArray(t,1)[0];return{x:function(){return wo(e,r.shape)}}}},{kernelName:_a,inputsToSave:["images"],gradFunc:function(e,t,r){var a=_slicedToArray(t,1)[0],n=function(t){var n=r.alignCorners;return t.resizeBilinearBackprop(e,a,n)},i={images:a};return{images:function(){return qn.runKernelFunc(n,i,null,ma,r)}}}},{kernelName:pa,inputsToSave:["images"],gradFunc:function(e,t,r){var a=_slicedToArray(t,1)[0],n=function(t){var n=r.alignCorners;return t.resizeNearestNeighborBackprop(e,a,n)},i={images:a};return{images:function(){return qn.runKernelFunc(n,i,null,ga,r)}}}},{kernelName:ba,gradFunc:function(e,t,r){var a=Be(r.dims,e.shape);return{x:function(){return Jh(e,a)}}}},{kernelName:xa,gradFunc:function(e){return{x:function(){return Bs(e)}}}},{kernelName:ka,inputsToSave:["x"],gradFunc:function(e,t){var r=_slicedToArray(t,1)[0];return{x:function(){return th(Ds(e,Os(Js(r,1.5),2)))}}}},{kernelName:Ca,inputsToSave:["condition"],gradFunc:function(e,t){var r=_slicedToArray(t,1)[0];return{condition:function(){return $i(Bs(r),"float32")},t:function(){return Os(e,$i(r,e.dtype))},e:function(){return Os(e,$i(uh(r),e.dtype))}}}},{kernelName:Ta,inputsToSave:["x"],gradFunc:function(e,t){var r=_slicedToArray(t,1)[0];return{x:function(){var t=Wu(r,qs(0)),a=qs(xd),n=qs(kd),i=Os(e,n),o=Os(Os(e,a),Nu($i(r,"float32")));return Tu(t,i,o)}}}},{kernelName:Na,outputsToSave:[!0],gradFunc:function(e,t){var r=_slicedToArray(t,1)[0];return{x:function(){return Os(e,Os(r,Zs(qs(1),r)))}}}},{kernelName:Ra,gradFunc:function(e){return{x:function(){return Bs(e)}}}},{kernelName:Ia,inputsToSave:["x"],gradFunc:function(e,t){var r=_slicedToArray(t,1)[0];return{x:function(){return Os(_u($i(r,"float32")),e)}}}},{kernelName:Aa,inputsToSave:["x"],gradFunc:function(e,t){var r=_slicedToArray(t,1)[0];return{x:function(){return Os(mu($i(r,"float32")),e)}}}},{kernelName:Sa,inputsToSave:["x"],gradFunc:function(e,t,r){for(var a=_slicedToArray(t,1)[0],n=r.begin,i=r.size,o=a.shape,s=_slicedToArray(Yo(a,n,i),2),l=s[0],u=s[1],h=[],c=0;c<e.rank;c++)h.push([l[c],o[c]-l[c]-u[c]]);return{x:function(){return Rh(e,h)}}}},{kernelName:La,outputsToSave:[!0],gradFunc:function(e,t,r){var a=_slicedToArray(t,1)[0],n=r.dim,i=Os(e,a);return{logits:function(){return Zs(i,Os(ih(i,[n],!0),a))}}}},{kernelName:Ea,inputsToSave:["x"],gradFunc:function(e,t){var r=_slicedToArray(t,1)[0];return{x:function(){return Os(e,Xl(r))}}}},$v,$v,ep,ep,{kernelName:Fa,inputsToSave:["x"],gradFunc:function(e,t){var r=_slicedToArray(t,1)[0];return{x:function(){return Ds(e,Os(Ls($i(r,"float32")),2))}}}},{kernelName:za,inputsToSave:["a","b"],gradFunc:function(e,t){var r=_slicedToArray(t,2),a=r[0],n=r[1],i=qs(2);return{a:function(){return Os(e,Os(i,Zs(a,n)))},b:function(){return Os(e,Os(i,Zs(n,a)))}}}},{kernelName:Ba,inputsToSave:["x"],gradFunc:function(e,t){var r=_slicedToArray(t,1)[0];return{x:function(){return Os(e,Os($i(r,"float32"),2))}}}},{kernelName:Ja,gradFunc:function(e){return{x:function(){return Bs(e)}}}},{kernelName:Pa,inputsToSave:["a","b"],gradFunc:function(e,t){var r=_slicedToArray(t,2),a=r[0],n=r[1],i=al(a.shape,n.shape);return{a:function(){var t=e,r=rl(a.shape,i);return r.length>0&&(t=ih(t,r)),wo(t,a.shape)},b:function(){var t=e,r=rl(n.shape,i);return r.length>0&&(t=ih(t,r)),wo(th(t),n.shape)}}}},{kernelName:Ma,inputsToSave:["x"],gradFunc:function(e,t,r){var a=_slicedToArray(t,1)[0],n=a.shape.slice();Be(r.axis,a.shape).forEach((function(e){n[e]=1}));var i=wo(e,n),o=Os(i,gh(a.shape,"float32"));return{x:function(){return o}}}},{kernelName:Wa,inputsToSave:["x"],gradFunc:function(e,t){var r=_slicedToArray(t,1)[0];return{x:function(){return Ds(e,zs(_u(r)))}}}},{kernelName:Ga,outputsToSave:[!0],gradFunc:function(e,t){var r=_slicedToArray(t,1)[0];return{x:function(){return Os(Zs(qs(1),zs(r)),e)}}}},{kernelName:Ha,inputsToSave:["x"],gradFunc:function(e,t,r){var a=_slicedToArray(t,1)[0],n=r.reps;return{x:function(){var t=Bs(a);if(1===a.rank)for(var r=0;r<n[0];++r)t=Fs(t,Kl(e,[r*a.shape[0]],[a.shape[0]]));else if(2===a.rank)for(var i=0;i<n[0];++i)for(var o=0;o<n[1];++o)t=Fs(t,Kl(e,[i*a.shape[0],o*a.shape[1]],[a.shape[0],a.shape[1]]));else if(3===a.rank)for(var s=0;s<n[0];++s)for(var l=0;l<n[1];++l)for(var u=0;u<n[2];++u)t=Fs(t,Kl(e,[s*a.shape[0],l*a.shape[1],u*a.shape[2]],[a.shape[0],a.shape[1],a.shape[2]]));else{if(4!==a.rank)throw new Error("Gradient for tile operation is not implemented for rank-"+a.rank+" tensors yet.");for(var h=0;h<n[0];++h)for(var c=0;c<n[1];++c)for(var f=0;f<n[2];++f)for(var d=0;d<n[3];++d)t=Fs(t,Kl(e,[h*a.shape[0],c*a.shape[1],f*a.shape[2],d*a.shape[3]],[a.shape[0],a.shape[1],a.shape[2],a.shape[3]]))}return t}}}},{kernelName:qa,gradFunc:function(e,t,r){var a=ml(r.perm);return{x:function(){return So(e,a)}}}},{kernelName:Ka,gradFunc:function(e,t,r){var a=r.axis;return{value:function(){return wc(e,a)}}}},{kernelName:Qa,inputsToSave:["segmentIds"],gradFunc:function(e,t){var r=_slicedToArray(t,1)[0];return{x:function(){return function(e,t){for(var r=nl(t,Bs(t)),a=Uu(e,r),n=Gu(t,qs(0,"int32")),i=a.rank-n.rank,o=0;o<i;++o)n=Eu(n,o+1);n=lh(n,gh(a.shape,"bool"));var s=Bs(a);return Tu(n,a,s)}(e,r)}}}},{kernelName:Ya,gradFunc:function(e){return{x:function(){return Bs(e)}}}}];tp<rp.length;tp++){hn(rp[tp])}Rn.prototype.abs=function(){return this.throwIfDisposed(),el(this)},Rn.prototype.acos=function(){return this.throwIfDisposed(),ul(this)},Rn.prototype.acosh=function(){return this.throwIfDisposed(),hl(this)},Rn.prototype.addStrict=function(e){return this.throwIfDisposed(),qc(this,e)},Rn.prototype.add=function(e){return this.throwIfDisposed(),Fs(this,e)},Rn.prototype.all=function(e,t){return this.throwIfDisposed(),bl(this,e,t)},Rn.prototype.any=function(e,t){return this.throwIfDisposed(),xl(this,e,t)},Rn.prototype.argMax=function(e){return this.throwIfDisposed(),kl(this,e)},Rn.prototype.argMin=function(e){return this.throwIfDisposed(),wl(this,e)},Rn.prototype.asScalar=function(){return this.throwIfDisposed(),Ce(1===this.size,(function(){return"The array must have only 1 element."})),wo(this,[])},Rn.prototype.asType=function(e){return this.throwIfDisposed(),$i(this,e)},Rn.prototype.as1D=function(){return this.throwIfDisposed(),wo(this,[this.size])},Rn.prototype.as2D=function(e,t){return this.throwIfDisposed(),wo(this,[e,t])},Rn.prototype.as3D=function(e,t,r){return this.throwIfDisposed(),wo(this,[e,t,r])},Rn.prototype.as4D=function(e,t,r,a){return this.throwIfDisposed(),wo(this,[e,t,r,a])},Rn.prototype.as5D=function(e,t,r,a,n){return this.throwIfDisposed(),wo(this,[e,t,r,a,n])},Rn.prototype.asin=function(){return this.throwIfDisposed(),Cl(this)},Rn.prototype.asinh=function(){return this.throwIfDisposed(),Tl(this)},Rn.prototype.atan=function(){return this.throwIfDisposed(),Sl(this)},Rn.prototype.atan2=function(e){return this.throwIfDisposed(),Il(this,e)},Rn.prototype.atanh=function(){return this.throwIfDisposed(),Al(this)},Rn.prototype.avgPool=function(e,t,r,a){return this.throwIfDisposed(),Wl(this,e,t,r,a)},Rn.prototype.batchToSpaceND=function(e,t){return this.throwIfDisposed(),Jl(this,e,t)},Rn.prototype.batchNorm=function(e,t,r,a,n){return this.throwIfDisposed(),$l(this,e,t,r,a,n)},Rn.prototype.broadcastTo=function(e){return this.throwIfDisposed(),au(this,e)},Rn.prototype.cast=function(e){return this.throwIfDisposed(),$i(this,e)},Rn.prototype.ceil=function(){return this.throwIfDisposed(),nu(this)},Rn.prototype.clipByValue=function(e,t){return this.throwIfDisposed(),iu(this,e,t)},Rn.prototype.concat=function(e,t){return this.throwIfDisposed(),e instanceof Rn&&(e=[e]),ql([this].concat(_toConsumableArray(e)),t)},Rn.prototype.conv1d=function(e,t,r,a,n,i){return this.throwIfDisposed(),cu(this,e,t,r,a,n,i)},Rn.prototype.conv2dTranspose=function(e,t,r,a,n){return this.throwIfDisposed(),du(this,e,t,r,a,n)},Rn.prototype.conv2d=function(e,t,r,a,n,i){return this.throwIfDisposed(),hu(this,e,t,r,a,n,i)},Rn.prototype.cos=function(){return this.throwIfDisposed(),_u(this)},Rn.prototype.cosh=function(){return this.throwIfDisposed(),mu(this)},Rn.prototype.cumsum=function(e,t,r){return this.throwIfDisposed(),yu(this,e,t,r)},Rn.prototype.depthToSpace=function(e,t){return this.throwIfDisposed(),bu(this,e,t)},Rn.prototype.depthwiseConv2D=function(e,t,r,a,n,i){return vs("depthwiseConv2D is deprecated, use depthwiseConv2d instead"),this.throwIfDisposed(),xu(this,e,t,r,a,n,i)},Rn.prototype.depthwiseConv2d=function(e,t,r,a,n,i){return this.throwIfDisposed(),xu(this,e,t,r,a,n,i)},Rn.prototype.dilation2d=function(e,t,r,a,n){return this.throwIfDisposed(),wu(this,e,t,r,a,n)},Rn.prototype.divNoNan=function(e){return this.throwIfDisposed(),Su(this,e)},Rn.prototype.divStrict=function(e){return this.throwIfDisposed(),Xc(this,e)},Rn.prototype.div=function(e){return this.throwIfDisposed(),Ds(this,e)},Rn.prototype.dot=function(e){return this.throwIfDisposed(),Iu(this,e)},Rn.prototype.elu=function(){return this.throwIfDisposed(),Au(this)},Rn.prototype.equalStrict=function(e){return this.throwIfDisposed(),Vc(this,e)},Rn.prototype.equal=function(e){return this.throwIfDisposed(),Cu(this,e)},Rn.prototype.erf=function(){return this.throwIfDisposed(),Ru(this)},Rn.prototype.exp=function(){return this.throwIfDisposed(),Nu(this)},Rn.prototype.expandDims=function(e){return this.throwIfDisposed(),Eu(this,e)},Rn.prototype.expm1=function(){return this.throwIfDisposed(),Fu(this)},Rn.prototype.fft=function(){return this.throwIfDisposed(),pc(this)},Rn.prototype.flatten=function(){return this.throwIfDisposed(),wo(this,[this.size])},Rn.prototype.floor=function(){return this.throwIfDisposed(),Ou(this)},Rn.prototype.floorDiv=function(e){return this.throwIfDisposed(),Ms(this,e)},Rn.prototype.gather=function(e,t){return this.throwIfDisposed(),Uu(this,e,t)},Rn.prototype.greaterEqualStrict=function(e){return this.throwIfDisposed(),Uc(this,e)},Rn.prototype.greaterEqual=function(e){return this.throwIfDisposed(),Gu(this,e)},Rn.prototype.greaterStrict=function(e){return this.throwIfDisposed(),Wc(this,e)},Rn.prototype.greater=function(e){return this.throwIfDisposed(),Wu(this,e)},Rn.prototype.ifft=function(){return this.throwIfDisposed(),gc(this)},Rn.prototype.irfft=function(){return this.throwIfDisposed(),_c(this)},Rn.prototype.isFinite=function(){return this.throwIfDisposed(),ju(this)},Rn.prototype.isInf=function(){return this.throwIfDisposed(),qu(this)},Rn.prototype.isNaN=function(){return this.throwIfDisposed(),Xu(this)},Rn.prototype.leakyRelu=function(e){return this.throwIfDisposed(),Ku(this,e)},Rn.prototype.lessEqualStrict=function(e){return this.throwIfDisposed(),Gc(this,e)},Rn.prototype.lessEqual=function(e){return this.throwIfDisposed(),Yu(this,e)},Rn.prototype.lessStrict=function(e){return this.throwIfDisposed(),Hc(this,e)},Rn.prototype.less=function(e){return this.throwIfDisposed(),Qu(this,e)},Rn.prototype.localResponseNormalization=function(e,t,r,a){return this.throwIfDisposed(),Zu(this,e,t,r,a)},Rn.prototype.logSigmoid=function(){return this.throwIfDisposed(),ah(this)},Rn.prototype.logSoftmax=function(e){return this.throwIfDisposed(),oh(this,e)},Rn.prototype.logSumExp=function(e,t){return this.throwIfDisposed(),sh(this,e,t)},Rn.prototype.log=function(){return this.throwIfDisposed(),$u(this)},Rn.prototype.log1p=function(){return this.throwIfDisposed(),eh(this)},Rn.prototype.logicalAnd=function(e){return this.throwIfDisposed(),lh(this,e)},Rn.prototype.logicalNot=function(){return this.throwIfDisposed(),uh(this)},Rn.prototype.logicalOr=function(e){return this.throwIfDisposed(),hh(this,e)},Rn.prototype.logicalXor=function(e){return this.throwIfDisposed(),ch(this,e)},Rn.prototype.matMul=function(e,t,r){return this.throwIfDisposed(),Co(this,e,t,r)},Rn.prototype.maxPool=function(e,t,r,a){return this.throwIfDisposed(),fh(this,e,t,r,a)},Rn.prototype.max=function(e,t){return this.throwIfDisposed(),nh(this,e,t)},Rn.prototype.maximumStrict=function(e){return this.throwIfDisposed(),Kc(this,e)},Rn.prototype.maximum=function(e){return this.throwIfDisposed(),nl(this,e)},Rn.prototype.mean=function(e,t){return this.throwIfDisposed(),_h(this,e,t)},Rn.prototype.min=function(e,t){return this.throwIfDisposed(),mh(this,e,t)},Rn.prototype.minimumStrict=function(e){return this.throwIfDisposed(),Qc(this,e)},Rn.prototype.minimum=function(e){return this.throwIfDisposed(),yh(this,e)},Rn.prototype.mirrorPad=function(e,t){return this.throwIfDisposed(),bh(this,e,t)},Rn.prototype.modStrict=function(e){return this.throwIfDisposed(),Yc(this,e)},Rn.prototype.mod=function(e){return this.throwIfDisposed(),xh(this,e)},Rn.prototype.mulStrict=function(e){return this.throwIfDisposed(),Jc(this,e)},Rn.prototype.mul=function(e){return this.throwIfDisposed(),Os(this,e)},Rn.prototype.neg=function(){return this.throwIfDisposed(),th(this)},Rn.prototype.norm=function(e,t,r){return this.throwIfDisposed(),tf(this,e,t,r)},Rn.prototype.notEqualStrict=function(e){return this.throwIfDisposed(),jc(this,e)},Rn.prototype.notEqual=function(e){return this.throwIfDisposed(),Th(this,e)},Rn.prototype.oneHot=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return this.throwIfDisposed(),To(this,e,t,r)},Rn.prototype.onesLike=function(){return this.throwIfDisposed(),Ih(this)},Rn.prototype.pad=function(e,t){return this.throwIfDisposed(),Rh(this,e,t)},Rn.prototype.pool=function(e,t,r,a,n){return this.throwIfDisposed(),Oh(this,e,t,r,a,n)},Rn.prototype.powStrict=function(e){return this.throwIfDisposed(),Zc(this,e)},Rn.prototype.pow=function(e){return this.throwIfDisposed(),Js(this,e)},Rn.prototype.prelu=function(e){return this.throwIfDisposed(),Lh(this,e)},Rn.prototype.prod=function(e,t){return this.throwIfDisposed(),zh(this,e,t)},Rn.prototype.reciprocal=function(){return this.throwIfDisposed(),Kh(this)},Rn.prototype.relu=function(){return this.throwIfDisposed(),Qh(this)},Rn.prototype.relu6=function(){return this.throwIfDisposed(),Yh(this)},Rn.prototype.reshapeAs=function(e){return this.throwIfDisposed(),wo(this,e.shape)},Rn.prototype.reshape=function(e){return this.throwIfDisposed(),wo(this,e)},Rn.prototype.resizeBilinear=function(e,t){return this.throwIfDisposed(),Uf(this,e,t)},Rn.prototype.resizeNearestNeighbor=function(e,t){return this.throwIfDisposed(),Wf(this,e,t)},Rn.prototype.reverse=function(e){return this.throwIfDisposed(),Jh(this,e)},Rn.prototype.rfft=function(){return this.throwIfDisposed(),bc(this)},Rn.prototype.round=function(){return this.throwIfDisposed(),rc(this)},Rn.prototype.rsqrt=function(){return this.throwIfDisposed(),ac(this)},Rn.prototype.selu=function(){return this.throwIfDisposed(),nc(this)},Rn.prototype.separableConv2d=function(e,t,r,a,n,i){return this.throwIfDisposed(),ic(this,e,t,r,a,n,i)},Rn.prototype.sigmoid=function(){return this.throwIfDisposed(),Xl(this)},Rn.prototype.sign=function(){return this.throwIfDisposed(),sc(this)},Rn.prototype.sin=function(){return this.throwIfDisposed(),lc(this)},Rn.prototype.sinh=function(){return this.throwIfDisposed(),uc(this)},Rn.prototype.slice=function(e,t){return this.throwIfDisposed(),Kl(this,e,t)},Rn.prototype.softmax=function(e){return this.throwIfDisposed(),vc(this,e)},Rn.prototype.softplus=function(){return this.throwIfDisposed(),rh(this)},Rn.prototype.spaceToBatchND=function(e,t){return this.throwIfDisposed(),Dh(this,e,t)},Rn.prototype.split=function(e,t){return this.throwIfDisposed(),yc(this,e,t)},Rn.prototype.sqrt=function(){return this.throwIfDisposed(),Ls(this)},Rn.prototype.square=function(){return this.throwIfDisposed(),zs(this)},Rn.prototype.squaredDifference=function(e){return this.throwIfDisposed(),xc(this,e)},Rn.prototype.squaredDifferenceStrict=function(e){return this.throwIfDisposed(),$c(this,e)},Rn.prototype.squeeze=function(e){return this.throwIfDisposed(),kc(this,e)},Rn.prototype.stack=function(e,t){this.throwIfDisposed();var r=e instanceof Rn?[this,e]:[this].concat(_toConsumableArray(e));return wc(r,t)},Rn.prototype.step=function(e){return this.throwIfDisposed(),Cc(this,e)},Rn.prototype.stridedSlice=function(e,t,r,a,n,i,o,s){return this.throwIfDisposed(),Tc(this,e,t,r,a,n,i,o,s)},Rn.prototype.subStrict=function(e){return this.throwIfDisposed(),ef(this,e)},Rn.prototype.sub=function(e){return this.throwIfDisposed(),Zs(this,e)},Rn.prototype.sum=function(e,t){return this.throwIfDisposed(),ih(this,e,t)},Rn.prototype.tan=function(){return this.throwIfDisposed(),Sc(this)},Rn.prototype.tanh=function(){return this.throwIfDisposed(),Ql(this)},Rn.prototype.tile=function(e){return this.throwIfDisposed(),Mu(this,e)},Rn.prototype.toBool=function(){return this.throwIfDisposed(),$i(this,"bool")},Rn.prototype.toFloat=function(){return this.throwIfDisposed(),$i(this,"float32")},Rn.prototype.toInt=function(){return this.throwIfDisposed(),$i(this,"int32")},Rn.prototype.topk=function(e,t){return this.throwIfDisposed(),Ec(this,e,t)},Rn.prototype.transpose=function(e){return this.throwIfDisposed(),So(this,e)},Rn.prototype.unique=function(e){return this.throwIfDisposed(),Mc(this,e)},Rn.prototype.unsortedSegmentSum=function(e,t){return this.throwIfDisposed(),Dc(this,e,t)},Rn.prototype.unstack=function(e){return this.throwIfDisposed(),Oc(this,e)},Rn.prototype.where=function(e,t){return this.throwIfDisposed(),Tu(e,this,t)},Rn.prototype.zerosLike=function(){return this.throwIfDisposed(),Bs(this)},function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF"}(jv||(jv={})),function(e){!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(qv||(qv={}));var ap={};function np(e){return ap[e]}function ip(e,t,r,n,i){var o=t.inputParams[e];if(o&&void 0!==o.inputIndexStart){var s=o.inputIndexStart,l=0===o.inputIndexEnd?void 0:void 0===o.inputIndexEnd?s+1:o.inputIndexEnd;if("tensor"===o.type)return op(t.inputNames[o.inputIndexStart],r,n,i);if("tensors"===o.type)return t.inputNames.slice(s,l).map((function(e){return op(e,r,n,i)}));var u=op(t.inputNames.slice(s)[0],r,n,i),h=u.dataSync();return"number"===o.type?h[0]:a.toNestedArray(u.shape,h)}var c=t.attrParams[e];return c&&c.value}function op(e,t,r,a){var n=_slicedToArray(up(e),2),i=n[0],o=n[1];if(null!=a){var s=a.getHashTableHandleByName(i);if(null!=s)return s}var l=r.currentContextIds.find((function(e){return!!t[lp(i,e)]}));return void 0!==l?t[lp(i,l)][o]:void 0}function sp(e,t){var r=_slicedToArray(up(e),2),a=r[0],n=r[1];return[lp(a,t&&t.currentContextId),n]}function lp(e,t){return t?"".concat(e,"-").concat(t):e}function up(e){var t=e.split(":");return 1===t.length?[e,0]:[t[0],Number(t[t.length-1])]}function hp(e,t,r){var a=ip("pad",e,t,r);if("explicit"===a){a=ip("explicitPaddings",e,t,r);for(var n=[[0,0],[0,0],[0,0],[0,0]],i=0;i<4;i++)n[i][0]=a[2*i],n[i][1]=a[2*i+1];return n}return a}function cp(e){return e.kept?e:eo(e)}var fp=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],dp=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"clip_value_min",name:"clipValueMin",type:"number"},{tfName:"clip_value_max",name:"clipValueMax",type:"number"}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"clipValueMin",name:"clipValueMin",type:"number",defaultValue:0},{tfName:"clipValueMax",name:"clipValueMax",type:"number",defaultValue:6}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],vp=[{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]}],pp=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}],gp=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}],_p=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],mp=[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}],yp=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}],bp=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]}],xp=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]}],kp=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],wp=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],Cp=[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}],Tp=[{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}],Sp=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool",notSupported:!0}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}],Ip=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}],Ap=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]}],Rp=function(){function e(){var t;_classCallCheck(this,e);var r=(t=[]).concat.apply(t,_toConsumableArray([y,b,x,k,w,C,T,R,A,S,N,E,F,M,D,O,I].map((function(e){return e.json}))));this.opMappers=r.reduce((function(e,t){return e[t.tfOpName]=t,e}),{})}return _createClass(e,null,[{key:"Instance",get:function(){return this._instance||(this._instance=new this)}}]),_createClass(e,[{key:"transformGraph",value:function(e){var t=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=[],n=[],i=[],o=e.node.reduce((function(e,r){return e[r.name]=t.mapNode(r),r.op.startsWith("Placeholder")?a.push(e[r.name]):"Const"===r.op?n.push(e[r.name]):null!=r.input&&0!==r.input.length||i.push(e[r.name]),e}),{}),s=[],l=[],u={},h={};null!=r&&(u=this.mapSignatureEntries(r.inputs),h=this.mapSignatureEntries(r.outputs));var c=Object.keys(o);c.forEach((function(e){var t=o[e];t.inputNames.forEach((function(e){var r=_slicedToArray(sp(e),1)[0];t.inputs.push(o[r]),o[r].children.push(t)}))})),0===Object.keys(h).length?c.forEach((function(e){var t=o[e];0===t.children.length&&l.push(t)})):Object.keys(h).forEach((function(e){var t=_slicedToArray(sp(e),1)[0],r=o[t];null!=r&&(r.signatureKey=h[e],l.push(r))})),Object.keys(u).length>0?Object.keys(u).forEach((function(e){var t=_slicedToArray(sp(e),1)[0],r=o[t];r&&(r.signatureKey=u[e],s.push(r))})):s=a;var f={};null!=e.library&&null!=e.library.function&&(f=e.library.function.reduce((function(e,r){return e[r.signature.name]=t.mapFunction(r),e}),{}));var d={nodes:o,inputs:s,outputs:l,weights:n,placeholders:a,signature:r,functions:f};return i.length>0&&(d.initNodes=i),d}},{key:"mapSignatureEntries",value:function(e){return Object.keys(e||{}).reduce((function(t,r){return t[e[r].name]=r,t}),{})}},{key:"mapNode",value:function(e){var t=np(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});var r={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map((function(e){return e.startsWith("^")?e.substr(1):e})),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr};return null!=t.inputs&&(r.inputParams=t.inputs.reduce((function(e,t){return e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e}),{})),null!=t.attrs&&(r.attrParams=t.attrs.reduce((function(t,r){var a=r.type,n=void 0;switch(r.type){case"string":void 0===(n=Ep(e.attr,r.tfName,r.defaultValue))&&r.tfDeprecatedName&&(n=Ep(e.attr,r.tfDeprecatedName,r.defaultValue));break;case"string[]":void 0===(n=Up(e.attr,r.tfName,r.defaultValue))&&r.tfDeprecatedName&&(n=Up(e.attr,r.tfDeprecatedName,r.defaultValue));break;case"number":void 0===(n=Mp(e.attr,r.tfName,r.defaultValue||0))&&r.tfDeprecatedName&&(n=Mp(e.attr,r.tfDeprecatedName,r.defaultValue));break;case"number[]":void 0===(n=Vp(e.attr,r.tfName,r.defaultValue))&&r.tfDeprecatedName&&(n=Vp(e.attr,r.tfDeprecatedName,r.defaultValue));break;case"bool":void 0===(n=Fp(e.attr,r.tfName,r.defaultValue))&&r.tfDeprecatedName&&(n=Fp(e.attr,r.tfDeprecatedName,r.defaultValue));break;case"bool[]":void 0===(n=Gp(e.attr,r.tfName,r.defaultValue))&&r.tfDeprecatedName&&(n=Gp(e.attr,r.tfDeprecatedName,r.defaultValue));break;case"shape":void 0===(n=Pp(e.attr,r.tfName,r.defaultValue))&&r.tfDeprecatedName&&(n=Pp(e.attr,r.tfDeprecatedName,r.defaultValue));break;case"shape[]":void 0===(n=Wp(e.attr,r.tfName,r.defaultValue))&&r.tfDeprecatedName&&(n=Wp(e.attr,r.tfDeprecatedName,r.defaultValue));break;case"dtype":void 0===(n=Lp(e.attr,r.tfName,r.defaultValue))&&r.tfDeprecatedName&&(n=Lp(e.attr,r.tfDeprecatedName,r.defaultValue));break;case"dtype[]":void 0===(n=zp(e.attr,r.tfName,r.defaultValue))&&r.tfDeprecatedName&&(n=zp(e.attr,r.tfDeprecatedName,r.defaultValue));break;case"func":void 0===(n=Op(e.attr,r.tfName,r.defaultValue))&&r.tfDeprecatedName&&(n=Op(e.attr,r.tfDeprecatedName,r.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error("Unsupported param type: ".concat(r.type," for op: ").concat(e.op))}return t[r.name]={value:n,type:a},t}),{})),r}},{key:"mapFunction",value:function(e){var t=this,r=e.nodeDef,a=[],n={};null!=r&&(n=r.reduce((function(e,r){return e[r.name]=t.mapNode(r),"Const"===r.op&&a.push(e[r.name]),e}),{}));var i=[],o=[];e.signature.inputArg.forEach((function(e){var t=_slicedToArray(sp(e.name),1)[0],r={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:Dp(e.type),type:"dtype"}},children:[]};r.signatureKey=e.name,i.push(r),n[t]=r})),Object.keys(n).forEach((function(e){var t=n[e];t.inputNames.forEach((function(e){var r=_slicedToArray(sp(e),1)[0];t.inputs.push(n[r]),n[r].children.push(t)}))}));var s=e.ret;e.signature.outputArg.forEach((function(e){var t=_slicedToArray(sp(s[e.name]),2),r=t[0],a=t[1],i=n[r];null!=i&&(i.defaultOutput=a,o.push(i))}));var l=this.mapArgsToSignature(e);return{nodes:n,inputs:i,outputs:o,weights:a,placeholders:[],signature:l}}},{key:"mapArgsToSignature",value:function(e){var t=this;return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce((function(e,r){return e[r.name]=t.mapArgToTensorInfo(r),e}),{}),outputs:e.signature.outputArg.reduce((function(r,a){return r[a.name]=t.mapArgToTensorInfo(a,e.ret),r}),{})}}},{key:"mapArgToTensorInfo",value:function(e,t){var r=e.name;return null!=t&&(r=t[r]),{name:r,dtype:e.type}}}]),e}();function Np(e,t){var r=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){var t=ht().global;if(void 0!==t.atob)return t.atob(e);if("undefined"!=typeof Buffer)return new Buffer(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return t?r:r.toLowerCase()}function Ep(e,t,r){var a=arguments.length>3&&void 0!==arguments[3]&&arguments[3],n=e[t];return null!=n?Np(n.s,a):r}function Fp(e,t,r){var a=e[t];return a?a.b:r}function Mp(e,t,r){var a=e[t]||{},n=null!=a.i?a.i:null!=a.f?a.f:r;return"number"==typeof n?n:parseInt(n,10)}function Dp(e){switch("string"==typeof e&&(e=jv[e]),e){case jv.DT_FLOAT:return"float32";case jv.DT_INT32:case jv.DT_INT64:case jv.DT_INT8:case jv.DT_UINT8:return"int32";case jv.DT_BOOL:return"bool";case jv.DT_DOUBLE:return"float32";case jv.DT_STRING:return"string";default:return null}}function Op(e,t,r){var a=e[t];return a&&a.func?a.func.name:r}function Lp(e,t,r){var a=e[t];return a&&a.type?Dp(a.type):r}function zp(e,t,r){var a=e[t];return a&&a.list&&a.list.type?a.list.type.map((function(e){return Dp(e)})):r}function Bp(e){if(!e.unknownRank)return null!=e.dim?e.dim.map((function(e){return"number"==typeof e.size?e.size:parseInt(e.size,10)})):[]}function Pp(e,t,r){var a=e[t];return a&&a.shape?Bp(a.shape):r}function Vp(e,t,r){var a=e[t];return a?((a.list.f&&a.list.f.length?a.list.f:a.list.i)||[]).map((function(e){return"number"==typeof e?e:parseInt(e,10)})):r}function Up(e,t,r){var a=arguments.length>3&&void 0!==arguments[3]&&arguments[3],n=e[t];return n&&n.list&&n.list.s?n.list.s.map((function(e){return Np(e,a)})):r}function Wp(e,t,r){var a=e[t];return a&&a.list&&a.list.shape?a.list.shape.map((function(e){return Bp(e)})):r}function Gp(e,t,r){var a=e[t];return a&&a.list&&a.list.b?a.list.b:r}var Hp=function(){function e(t,r,a){var n=this;_classCallCheck(this,e),this.node=t,this.tensorMap=r,this.context=a,this.inputs=[],this.attrs={},this.inputs=t.inputNames.map((function(e){return n.getInput(e)})),null!=t.rawAttrs&&(this.attrs=Object.keys(t.rawAttrs).reduce((function(e,t){return e[t]=n.getAttr(t),e}),{}))}return _createClass(e,[{key:"getInput",value:function(e){return op(e,this.tensorMap,this.context)}},{key:"getAttr",value:function(e,t){var r=this.node.rawAttrs[e];if(null!=r.tensor)return op(e,this.tensorMap,this.context);if(null!=r.i||null!=r.f)return Mp(this.node.rawAttrs,e,t);if(null!=r.s)return Ep(this.node.rawAttrs,e,t);if(null!=r.b)return Fp(this.node.rawAttrs,e,t);if(null!=r.shape)return Pp(this.node.rawAttrs,e,t);if(null!=r.type)return Lp(this.node.rawAttrs,e,t);if(null!=r.list){if(null!=r.list.i||null!=r.list.f)return Vp(this.node.rawAttrs,e,t);if(null!=r.list.s)return Up(this.node.rawAttrs,e,t);if(null!=r.list.shape)return Wp(this.node.rawAttrs,e,t);if(null!=r.list.b)return Gp(this.node.rawAttrs,e,t);if(null!=r.list.type)return zp(this.node.rawAttrs,e,t)}return t}}]),e}();function jp(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";a.assert(function(e,t){if(e.length!==t.length)return!1;for(var r=0;r<e.length;r++)if(-1!==e[r]&&-1!==t[r]&&e[r]!==t[r])return!1;return!0}(e,t),(function(){return r+" Shapes ".concat(e," and ").concat(t," must match")}))}var qp=function(){function e(t,r,a,n,i,o,s){_classCallCheck(this,e),this.name=t,this.dtype=r,this.maxSize=a,this.elementShape=n,this.identicalElementShapes=i,this.dynamicSize=o,this.clearAfterRead=s,this.tensors=[],this.closed_=!1,this.idTensor=qs(0),xs(this.idTensor)}return _createClass(e,[{key:"clearAndClose",value:function(e){this.tensors.forEach((function(t){null!=e&&e.has(t.tensor.id)||t.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}},{key:"size",value:function(){return this.tensors.length}},{key:"read",value:function(e){if(this.closed_)throw new Error("TensorArray ".concat(this.name," has already been closed."));if(e<0||e>=this.size())throw new Error("Tried to read from index ".concat(e,", but array size is: ").concat(this.size()));var t=this.tensors[e];if(t.cleared)throw new Error("TensorArray ".concat(this.name,": Could not read index ").concat(e," twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?)."));return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}},{key:"readMany",value:function(e){var t=this;return e.map((function(e){return t.read(e)}))}},{key:"write",value:function(e,t){if(this.closed_)throw new Error("TensorArray ".concat(this.name," has already been closed."));if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error("Tried to write to index ".concat(e,", but array is not resizeable and size is: ").concat(this.maxSize));var r=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error("TensorArray ".concat(this.name,": Could not write to TensorArray index ").concat(e,",\n          because the value dtype is ").concat(t.dtype,", but TensorArray dtype is ").concat(this.dtype,"."));if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),jp(this.elementShape,t.shape,"TensorArray ".concat(this.name,": Could not write to TensorArray index ").concat(e,".")),r.read)throw new Error("TensorArray ".concat(this.name,": Could not write to TensorArray index ").concat(e,", because it has already been read."));if(r.written)throw new Error("TensorArray ".concat(this.name,": Could not write to TensorArray index ").concat(e,", because it has already been written."));r.tensor=t,xs(t),r.written=!0,this.tensors[e]=r}},{key:"writeMany",value:function(e,t){var r=this;if(e.length!==t.length)throw new Error("TensorArray ".concat(this.name,": could not write multiple tensors,because the index size: ").concat(e.length," is not the same as tensors size: ").concat(t.length,"."));e.forEach((function(e,a){return r.write(e,t[a])}))}},{key:"gather",value:function(e,t){if(t&&t!==this.dtype)throw new Error("TensorArray dtype is ".concat(this.dtype," but gather requested dtype ").concat(t));if(e)e=e.slice(0,this.size());else{e=[];for(var r=0;r<this.size();r++)e.push(r)}if(0===e.length)return ii([],[0].concat(this.elementShape));var a=this.readMany(e);return jp(this.elementShape,a[0].shape,"TensorArray shape mismatch: "),wc(a,0)}},{key:"concat",value:function(e){if(e&&e!==this.dtype)throw new Error("TensorArray dtype is ".concat(this.dtype," but concat requested dtype ").concat(e));if(0===this.size())return ii([],[0].concat(this.elementShape));for(var t=[],r=0;r<this.size();r++)t.push(r);var a=this.readMany(t);return jp(this.elementShape,a[0].shape,"TensorArray shape mismatch: tensor array shape (".concat(this.elementShape,") vs first tensor shape (").concat(a[0].shape,")")),ql(a,0)}},{key:"scatter",value:function(e,t){if(t.dtype!==this.dtype)throw new Error("TensorArray dtype is ".concat(this.dtype," but tensor has dtype ").concat(t.dtype));if(e.length!==t.shape[0])throw new Error("Expected len(indices) == tensor.shape[0], but saw: ".concat(e.length," vs. ").concat(t.shape[0]));var r=Math.max.apply(Math,_toConsumableArray(e));if(!this.dynamicSize&&r>=this.maxSize)throw new Error("Max index must be < array size (".concat(r,"  vs. ").concat(this.maxSize,")"));this.writeMany(e,Oc(t,0))}},{key:"split",value:function(e,t){var r=this;if(t.dtype!==this.dtype)throw new Error("TensorArray dtype is ".concat(this.dtype," but tensor has dtype ").concat(t.dtype));var a=0,n=e.map((function(e){return a+=e}));if(a!==t.shape[0])throw new Error("Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ".concat(a,", and tensor's shape is: ").concat(t.shape));if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error("TensorArray's size is not equal to the size of lengths (".concat(this.maxSize," vs. ").concat(e.length,"), and the TensorArray is not marked as dynamically resizeable"));var i=0===a?0:t.size/a,o=[];ys((function(){t=wo(t,[1,a,i]);for(var s=0;s<e.length;++s)o[s]=wo(Kl(t,[0,0===s?0:n[s-1],0],[1,e[s],i]),r.elementShape);return o}));for(var s=[],l=0;l<e.length;l++)s[l]=l;this.writeMany(s,o)}},{key:"id",get:function(){return this.idTensor.id}},{key:"closed",get:function(){return this.closed_}}]),e}(),Xp=function(){function e(t,r,a){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:-1;_classCallCheck(this,e),this.tensors=t,this.elementShape=r,this.elementDtype=a,null!=t&&t.forEach((function(e){if(a!==e.dtype)throw new Error("Invalid data types; op elements ".concat(a,", but list elements ").concat(e.dtype));jp(r,e.shape,"TensorList shape mismatch: "),xs(e)})),this.idTensor=qs(0),this.maxNumElements=n,xs(this.idTensor)}return _createClass(e,[{key:"copy",value:function(){return new e(_toConsumableArray(this.tensors),this.elementShape,this.elementDtype)}},{key:"clearAndClose",value:function(e){this.tensors.forEach((function(t){null!=e&&e.has(t.id)||t.dispose()})),this.tensors.length=0,this.idTensor.dispose()}},{key:"size",value:function(){return this.tensors.length}},{key:"stack",value:function(e,t){var r=this,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:-1;if(t!==this.elementDtype)throw new Error("Invalid data types; op elements ".concat(t,", but list elements ").concat(this.elementDtype));if(-1!==a&&this.tensors.length!==a)throw new Error("Operation expected a list with ".concat(a," elements but got a list with ").concat(this.tensors.length," elements."));return jp(e,this.elementShape,"TensorList shape mismatch: "),ys((function(){var t=r.tensors.map((function(t){return wo(t,e)}));return wc(t,0)}))}},{key:"popBack",value:function(e,t){if(t!==this.elementDtype)throw new Error("Invalid data types; op elements ".concat(t,", but list elements ").concat(this.elementDtype));if(0===this.size())throw new Error("Trying to pop from an empty list.");var r=this.tensors.pop();return jp(r.shape,e,"TensorList shape mismatch: "),wo(r,e)}},{key:"pushBack",value:function(e){if(e.dtype!==this.elementDtype)throw new Error("Invalid data types; op elements ".concat(e.dtype,", but list elements ").concat(this.elementDtype));if(jp(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");xs(e),this.tensors.push(e)}},{key:"resize",value:function(e){if(e<0)throw new Error("TensorListResize expects size to be non-negative. Got: "+e);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error("TensorListResize input size ".concat(e," is greater maxNumElement ").concat(this.maxNumElements,"."));this.tensors.length=e}},{key:"getItem",value:function(e,t,r){if(r!==this.elementDtype)throw new Error("Invalid data types; op elements ".concat(r,", but list elements ").concat(this.elementDtype));if(e<0||e>this.tensors.length)throw new Error("Trying to access element ".concat(e," in a list with ").concat(this.tensors.length," elements."));if(null==this.tensors[e])throw new Error("element at index ".concat(e," is null."));return jp(this.tensors[e].shape,t,"TensorList shape mismatch: "),this.tensors[e]}},{key:"setItem",value:function(e,t){if(t.dtype!==this.elementDtype)throw new Error("Invalid data types; op elements ".concat(t.dtype,", but list elements ").concat(this.elementDtype));if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error("Trying to set element ".concat(e," in a list with max ").concat(this.maxNumElements," elements."));jp(this.elementShape,t.shape,"TensorList shape mismatch: "),xs(t),this.tensors[e]=t}},{key:"gather",value:function(e,t,r){var a=this;if(t!==this.elementDtype)throw new Error("Invalid data types; op elements ".concat(t,", but list elements ").concat(this.elementDtype));return jp(this.elementShape,r,"TensorList shape mismatch: "),0===(e=e.slice(0,this.size())).length?ii([],[0].concat(this.elementShape)):ys((function(){var t=e.map((function(e){return wo(a.tensors[e],r)}));return wc(t,0)}))}},{key:"concat",value:function(e,t){var r=this;if(e&&e!==this.elementDtype)throw new Error("TensorList dtype is ".concat(this.elementDtype," but concat requested dtype ").concat(e));return jp(this.elementShape,t,"TensorList shape mismatch: "),0===this.size()?ii([],[0].concat(this.elementShape)):ys((function(){var e=r.tensors.map((function(e){return wo(e,t)}));return ql(e,0)}))}},{key:"id",get:function(){return this.idTensor.id}}]),e}();function Kp(e,t,r){var a=_slicedToArray(ip("fusedOps",e,t,r),2),n=a[0],i=a[1],o="biasadd"===n,s="prelu"===i,l="fusedbatchnorm"===n,u=ip("numArgs",e,t,r);if(o){if(s&&2!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!s&&1!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(l)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported.");var h=ip("strides",e,t,r),c=hp(e,t,r),f=ip("dataFormat",e,t,r).toUpperCase(),d=ip("dilations",e,t,r),v=_slicedToArray(ip("args",e,t,r),2);return{stride:h,pad:c,dataFormat:f,dilations:d,biasArg:v[0],preluArg:v[1],activationFunc:i}}function Qp(e,t,r){return{boxes:ip("boxes",e,t,r),scores:ip("scores",e,t,r),maxOutputSize:ip("maxOutputSize",e,t,r),iouThreshold:ip("iouThreshold",e,t,r),scoreThreshold:ip("scoreThreshold",e,t,r),softNmsSigma:ip("softNmsSigma",e,t,r)}}var Yp=function(){function e(t,r){_classCallCheck(this,e),this.keyDType=t,this.valueDType=r,this.handle=qs(0),this.tensorMap=new Map,xs(this.handle)}var t,r;return _createClass(e,[{key:"clearAndClose",value:function(){this.tensorMap.forEach((function(e){return e.dispose()})),this.tensorMap.clear(),this.handle.dispose()}},{key:"size",value:function(){return this.tensorMap.size}},{key:"import",value:(r=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){var n,i=this;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return this.checkKeyAndValueTensor(t,r),e.next=3,t.data();case 3:return n=e.sent,e.abrupt("return",(this.tensorMap.forEach((function(e){return e.dispose()})),this.tensorMap.clear(),ys((function(){var e=Oc(r),t=n.length,o=e.length;a.assert(t===o,(function(){return"The number of elements doesn't match, keys has ".concat(t," elements, the values has ").concat(o," elements.")}));for(var s=0;s<t;s++){var l=n[s],u=e[s];xs(u),i.tensorMap.set(l,u)}return i.handle}))));case 5:case"end":return e.stop()}}),e,this)}))),function(e,t){return r.apply(this,arguments)})},{key:"find",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){var a,n=this;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return this.checkKeyAndValueTensor(t,r),e.next=3,t.data();case 3:return a=e.sent,e.abrupt("return",ys((function(){for(var e=[],t=0;t<a.length;t++){var i=n.findWithDefault(a[t],r);e.push(i)}return wc(e)})));case 5:case"end":return e.stop()}}),e,this)}))),function(e,r){return t.apply(this,arguments)})},{key:"findWithDefault",value:function(e,t){var r=this.tensorMap.get(e);return null!=r?r:t}},{key:"checkKeyAndValueTensor",value:function(e,t){if(e.dtype!==this.keyDType)throw new Error("Expect key dtype ".concat(this.keyDType,", but got ")+e.dtype);if(t.dtype!==this.valueDType)throw new Error("Expect value dtype ".concat(this.valueDType,", but got ")+t.dtype)}},{key:"id",get:function(){return this.handle.id}}]),e}();function Jp(e,t,r,n){var i=function(e,t,r){switch(e.category){case"arithmetic":return ys((function(){return function(e,t,r){switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[Fs(ip("a",e,t,r),ip("b",e,t,r))];case"AddN":return[cl(ip("tensors",e,t,r))];case"FloorMod":case"Mod":return[xh(ip("a",e,t,r),ip("b",e,t,r))];case"Mul":return[Os(ip("a",e,t,r),ip("b",e,t,r))];case"RealDiv":case"Div":return[Ds(ip("a",e,t,r),ip("b",e,t,r))];case"DivNoNan":return[Su(ip("a",e,t,r),ip("b",e,t,r))];case"FloorDiv":return[Ms(ip("a",e,t,r),ip("b",e,t,r))];case"Sub":return[Zs(ip("a",e,t,r),ip("b",e,t,r))];case"Minimum":return[yh(ip("a",e,t,r),ip("b",e,t,r))];case"Maximum":return[nl(ip("a",e,t,r),ip("b",e,t,r))];case"Pow":return[Js(ip("a",e,t,r),ip("b",e,t,r))];case"SquaredDifference":return[xc(ip("a",e,t,r),ip("b",e,t,r))];default:throw TypeError("Node type ".concat(e.op," is not implemented"))}}(e,t,r)}));case"basic_math":return ys((function(){return function(e,t,r){switch(e.op){case"Abs":case"ComplexAbs":return[el(ip("x",e,t,r))];case"Acos":return[ul(ip("x",e,t,r))];case"Acosh":return[hl(ip("x",e,t,r))];case"Asin":return[Cl(ip("x",e,t,r))];case"Asinh":return[Tl(ip("x",e,t,r))];case"Atan":return[Sl(ip("x",e,t,r))];case"Atan2":return[Il(ip("x",e,t,r),ip("y",e,t,r))];case"Atanh":return[Al(ip("x",e,t,r))];case"Ceil":return[nu(ip("x",e,t,r))];case"Complex":return[ai(ip("real",e,t,r),ip("imag",e,t,r))];case"Cos":return[_u(ip("x",e,t,r))];case"Cosh":return[mu(ip("x",e,t,r))];case"Elu":return[Au(ip("x",e,t,r))];case"Erf":return[Ru(ip("x",e,t,r))];case"Exp":return[Nu(ip("x",e,t,r))];case"Expm1":return[Fu(ip("x",e,t,r))];case"Floor":return[Ou(ip("x",e,t,r))];case"Log":return[$u(ip("x",e,t,r))];case"Log1p":return[eh(ip("x",e,t,r))];case"Imag":return[Hu(ip("x",e,t,r))];case"Neg":return[th(ip("x",e,t,r))];case"Reciprocal":return[Kh(ip("x",e,t,r))];case"Real":return[Sh(ip("x",e,t,r))];case"Relu":return[Qh(ip("x",e,t,r))];case"Round":return[rc(ip("x",e,t,r))];case"Selu":return[nc(ip("x",e,t,r))];case"Sigmoid":return[Xl(ip("x",e,t,r))];case"Sin":return[lc(ip("x",e,t,r))];case"Sign":return[sc(ip("x",e,t,r))];case"Sinh":return[uc(ip("x",e,t,r))];case"Softplus":return[rh(ip("x",e,t,r))];case"Sqrt":return[Ls(ip("x",e,t,r))];case"Square":return[zs(ip("x",e,t,r))];case"Tanh":return[Ql(ip("x",e,t,r))];case"Tan":return[Sc(ip("x",e,t,r))];case"Relu6":case"ClipByValue":return[iu(ip("x",e,t,r),ip("clipValueMin",e,t,r),ip("clipValueMax",e,t,r))];case"Rsqrt":return[ac(op(e.inputNames[0],t,r))];case"Prod":return[zh(ip("x",e,t,r),ip("axes",e,t,r))];case"LeakyRelu":return[Ku(ip("x",e,t,r),ip("alpha",e,t,r))];case"Prelu":return[Lh(ip("x",e,t,r),ip("alpha",e,t,r))];default:throw TypeError("Node type ".concat(e.op," is not implemented"))}}(e,t,r)}));case"control":return(l=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r,a){var n,i,o,s,l,u,h,c,f,d,v,p,g,_,m,y,b,x,k,w,C,T,S,I,A,R,N,E,F,M,D,O,L,z,B,P,V,U,W,G,H,j,q,X,K,Q,Y,J,Z,$,ee,te,re,ae,ne,ie,oe,se,le,ue,he,ce,fe,de,ve,pe,ge,_e,me,ye,be,xe,ke,we,Ce,Te,Se,Ie,Ae;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:e.t0=t.op,e.next="If"===e.t0||"StatelessIf"===e.t0?3:"While"===e.t0||"StatelessWhile"===e.t0?12:"LoopCond"===e.t0?16:"Switch"===e.t0?17:"Merge"===e.t0?28:"Enter"===e.t0?30:"Exit"===e.t0?32:"NextIteration"===e.t0?34:"TensorArrayV3"===e.t0?36:"TensorArrayWriteV3"===e.t0?38:"TensorArrayReadV3"===e.t0?40:"TensorArrayGatherV3"===e.t0?42:"TensorArrayScatterV3"===e.t0?44:"TensorArrayConcatV3"===e.t0?46:"TensorArraySplitV3"===e.t0?48:"TensorArraySizeV3"===e.t0?50:"TensorArrayCloseV3"===e.t0?52:"TensorListSetItem"===e.t0?54:"TensorListGetItem"===e.t0?56:"TensorListScatterV2"===e.t0||"TensorListScatter"===e.t0?58:"TensorListReserve"===e.t0?60:"TensorListGather"===e.t0?62:"TensorListStack"===e.t0?64:"TensorListFromTensor"===e.t0?66:"TensorListConcat"===e.t0?68:"TensorListPushBack"===e.t0?70:"TensorListPopBack"===e.t0?72:"TensorListSplit"===e.t0?74:76;break;case 3:return n=ip("thenBranch",t,r,a),i=ip("elseBranch",t,r,a),o=ip("cond",t,r,a),s=ip("args",t,r,a),e.next=6,o.data();case 6:if(!e.sent[0]){e.next=10;break}e.t1=a.functionMap[n].executeFunctionAsync(s,a.tensorArrayMap,a.tensorListMap),e.next=11;break;case 10:e.t1=a.functionMap[i].executeFunctionAsync(s,a.tensorArrayMap,a.tensorListMap);case 11:return e.abrupt("return",e.t1);case 12:return e.delegateYield(regeneratorRuntime.mark((function e(){var n,i,o,s,l,u,h,c;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=ip("body",t,r,a),i=ip("cond",t,r,a),o=ip("args",t,r,a),e.next=5,a.functionMap[i].executeFunctionAsync(o,a.tensorArrayMap,a.tensorListMap);case 5:return s=e.sent,l=o.map((function(e){return e.id})),e.next=9,s[0].data();case 9:u=e.sent,s.forEach((function(e){e.kept||-1!==l.indexOf(e.id)||e.dispose()})),h=o,c=regeneratorRuntime.mark((function e(){var t,r,o;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=h,e.next=3,a.functionMap[n].executeFunctionAsync(h,a.tensorArrayMap,a.tensorListMap);case 3:return h=e.sent,r=h.map((function(e){return e.id})),t.forEach((function(e){e.kept||-1!==l.indexOf(e.id)||-1!==r.indexOf(e.id)||e.dispose()})),e.next=8,a.functionMap[i].executeFunctionAsync(h,a.tensorArrayMap,a.tensorListMap);case 8:return o=e.sent,e.next=11,o[0].data();case 11:u=e.sent,o.forEach((function(e){e.kept||-1!==l.indexOf(e.id)||-1!==r.indexOf(e.id)||e.dispose()}));case 13:case"end":return e.stop()}}),e)}));case 13:if(!u[0]){e.next=17;break}return e.delegateYield(c(),"t0",15);case 15:e.next=13;break;case 17:return e.abrupt("return",{v:h});case 18:case"end":return e.stop()}}),e)}))(),"t2",13);case 13:if("object"!=typeof(l=e.t2)){e.next=16;break}return e.abrupt("return",l.v);case 16:return e.abrupt("return",[cp(ip("pred",t,r,a))]);case 17:return u=ip("pred",t,r,a),(h=ip("data",t,r,a)).kept||(h=cp(h)),e.next=22,u.data();case 22:if(!e.sent[0]){e.next=26;break}e.t3=[void 0,h],e.next=27;break;case 26:e.t3=[h,void 0];case 27:return e.abrupt("return",e.t3);case 28:return c=t.inputNames.find((function(e){return void 0!==op(e,r,a)})),e.abrupt("return",c?[cp(op(c,r,a))]:void 0);case 30:return f=ip("frameName",t,r,a),d=ip("tensor",t,r,a),e.abrupt("return",(a.enterFrame(f),[cp(d)]));case 32:return v=ip("tensor",t,r,a),e.abrupt("return",(a.exitFrame(),[cp(v)]));case 34:return p=ip("tensor",t,r,a),e.abrupt("return",(a.nextIteration(),[cp(p)]));case 36:return g=ip("size",t,r,a),_=ip("dtype",t,r,a),m=ip("elementShape",t,r,a),y=ip("dynamicSize",t,r,a),b=ip("clearAfterRead",t,r,a),x=ip("identicalElementShapes",t,r,a),k=ip("name",t,r,a),w=new qp(k,_,g,m,x,y,b),e.abrupt("return",(a.addTensorArray(w),[w.idTensor,qs(1)]));case 38:return C=ip("tensorArrayId",t,r,a),T=ip("index",t,r,a),S=ip("tensor",t,r,a),I=a.getTensorArray(C.id),e.abrupt("return",(I.write(T,S),[I.idTensor]));case 40:return A=ip("tensorArrayId",t,r,a),R=ip("index",t,r,a),e.abrupt("return",[a.getTensorArray(A.id).read(R)]);case 42:return N=ip("tensorArrayId",t,r,a),E=ip("indices",t,r,a),F=ip("dtype",t,r,a),e.abrupt("return",[a.getTensorArray(N.id).gather(E,F)]);case 44:return M=ip("tensorArrayId",t,r,a),D=ip("indices",t,r,a),O=ip("tensor",t,r,a),L=a.getTensorArray(M.id),e.abrupt("return",(L.scatter(D,O),[L.idTensor]));case 46:return z=ip("tensorArrayId",t,r,a),B=a.getTensorArray(z.id),P=ip("dtype",t,r,a),e.abrupt("return",[B.concat(P)]);case 48:return V=ip("tensorArrayId",t,r,a),U=ip("tensor",t,r,a),W=ip("lengths",t,r,a),G=a.getTensorArray(V.id),e.abrupt("return",(G.split(W,U),[G.idTensor]));case 50:return H=ip("tensorArrayId",t,r,a),e.abrupt("return",[qs(a.getTensorArray(H.id).size(),"int32")]);case 52:return j=ip("tensorArrayId",t,r,a),q=a.getTensorArray(j.id),e.abrupt("return",(q.clearAndClose(),[q.idTensor]));case 54:return X=ip("tensorListId",t,r,a),K=ip("index",t,r,a),Q=ip("tensor",t,r,a),Y=a.getTensorList(X.id),e.abrupt("return",(Y.setItem(K,Q),[Y.idTensor]));case 56:return J=ip("tensorListId",t,r,a),Z=ip("index",t,r,a),$=ip("elementShape",t,r,a),ee=ip("elementDType",t,r,a),e.abrupt("return",[a.getTensorList(J.id).getItem(Z,$,ee)]);case 58:return te=ip("indices",t,r,a),re=function(e,t,r,a){if(t.length!==e.shape[0])throw new Error("Expected len(indices) == tensor.shape[0], but saw: ".concat(t.length," vs. ").concat(e.shape[0]));var n=Math.max.apply(Math,_toConsumableArray(t));if(null!=a&&-1!==a&&n>=a)throw new Error("Max index must be < array size (".concat(n,"  vs. ").concat(a,")"));var i=new Xp([],r,e.dtype,a),o=Oc(e,0);return t.forEach((function(e,t){i.setItem(e,o[t])})),i}(ip("tensor",t,r,a),te,ip("elementShape",t,r,a),ip("numElements",t,r,a)),e.abrupt("return",(a.addTensorList(re),[re.idTensor]));case 60:return Se=ip("elementShape",t,r,a),Ie=ip("elementDType",t,r,a),Ae=ip("numElements",t,r,a),ae=new Xp([],Se,Ie,Ae),e.abrupt("return",(a.addTensorList(ae),[ae.idTensor]));case 62:return ne=ip("tensorListId",t,r,a),ie=ip("indices",t,r,a),oe=ip("elementShape",t,r,a),se=ip("elementDType",t,r,a),e.abrupt("return",[a.getTensorList(ne.id).gather(ie,se,oe)]);case 64:return le=ip("tensorListId",t,r,a),ue=ip("elementShape",t,r,a),he=ip("elementDType",t,r,a),ce=ip("numElements",t,r,a),e.abrupt("return",[a.getTensorList(le.id).stack(ue,he,ce)]);case 66:return fe=function(e,t,r){var a=e.dtype;if(e.shape.length<1)throw new Error("Tensor must be at least a vector, but saw shape: "+e.shape);if(e.dtype!==r)throw new Error("Invalid data types; op elements ".concat(e.dtype,", but list elements ").concat(r));jp(e.shape.slice(1),t,"TensorList shape mismatch: ");var n=Oc(e);return new Xp(n,t,a)}(ip("tensor",t,r,a),ip("elementShape",t,r,a),ip("elementDType",t,r,a)),e.abrupt("return",(a.addTensorList(fe),[fe.idTensor]));case 68:return de=ip("tensorListId",t,r,a),ve=a.getTensorList(de.id),pe=ip("dtype",t,r,a),ge=ip("elementShape",t,r,a),e.abrupt("return",[ve.concat(pe,ge)]);case 70:return _e=ip("tensorListId",t,r,a),me=ip("tensor",t,r,a),ye=a.getTensorList(_e.id),e.abrupt("return",(ye.pushBack(me),[ye.idTensor]));case 72:return be=ip("tensorListId",t,r,a),xe=ip("elementShape",t,r,a),ke=ip("elementDType",t,r,a),e.abrupt("return",[a.getTensorList(be.id).popBack(xe,ke)]);case 74:return we=ip("tensor",t,r,a),Ce=ip("elementShape",t,r,a),Te=function(e,t,r){var a=0,n=t.map((function(e){return a+=e}));if(a!==e.shape[0])throw new Error("Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ".concat(a,", and tensor's shape is: ").concat(e.shape));for(var i=0===a?0:e.size/a,o=ys((function(){var o=[];e=wo(e,[1,a,i]);for(var s=0;s<t.length;++s)o[s]=wo(Kl(e,[0,0===s?0:n[s-1],0],[1,t[s],i]),r);return e.dispose(),o})),s=new Xp([],r,e.dtype,t.length),l=0;l<o.length;l++)s.setItem(l,o[l]);return s}(we,ip("lengths",t,r,a),Ce),e.abrupt("return",(a.addTensorList(Te),[Te.idTensor]));case 76:throw TypeError("Node type ".concat(t.op," is not implemented"));case 77:case"end":return e.stop()}}),e)}))),function(e,t,r){return l.apply(this,arguments)})(e,t,r);case"convolution":return ys((function(){return function(e,t,r){switch(e.op){case"Conv1D":var a=ip("stride",e,t,r),n=ip("pad",e,t,r),i=ip("dataFormat",e,t,r).toUpperCase(),o=ip("dilation",e,t,r);return[cu(ip("x",e,t,r),ip("filter",e,t,r),a,n,i,o)];case"Conv2D":var s=ip("strides",e,t,r),l=hp(e,t,r),u=ip("dataFormat",e,t,r).toUpperCase(),h=ip("dilations",e,t,r);return[hu(ip("x",e,t,r),ip("filter",e,t,r),[s[1],s[2]],l,u,[h[1],h[2]])];case"_FusedConv2D":var c=Kp(e,t,r),f=c.stride,d=c.pad,v=c.dataFormat,g=c.dilations,_=c.biasArg,m=c.preluArg,y=c.activationFunc;return[p.conv2d({x:ip("x",e,t,r),filter:ip("filter",e,t,r),strides:[f[1],f[2]],pad:d,dataFormat:v,dilations:[g[1],g[2]],bias:_,activation:y,preluActivationWeights:m})];case"FusedDepthwiseConv2dNative":var b=Kp(e,t,r),x=b.stride,k=b.pad,w=b.dataFormat,C=b.dilations,T=b.biasArg,S=b.preluArg,I=b.activationFunc;return[p.depthwiseConv2d({x:ip("x",e,t,r),filter:ip("filter",e,t,r),strides:[x[1],x[2]],pad:k,dataFormat:w,dilations:[C[1],C[2]],bias:T,activation:I,preluActivationWeights:S})];case"Conv2DBackpropInput":case"Conv2dTranspose":var A=ip("outputShape",e,t,r),R=ip("strides",e,t,r),N=hp(e,t,r);return[du(ip("x",e,t,r),ip("filter",e,t,r),A,[R[1],R[2]],N)];case"DepthwiseConv2dNative":case"DepthwiseConv2d":var E=ip("strides",e,t,r),F=hp(e,t,r),M=ip("dilations",e,t,r),D=ip("dataFormat",e,t,r).toUpperCase();return[xu(ip("input",e,t,r),ip("filter",e,t,r),[E[1],E[2]],F,D,[M[1],M[2]])];case"Conv3D":var O=ip("strides",e,t,r),L=ip("pad",e,t,r),z=ip("dataFormat",e,t,r).toUpperCase(),B=ip("dilations",e,t,r);return[vu(ip("x",e,t,r),ip("filter",e,t,r),[O[1],O[2],O[3]],L,z,[B[1],B[2],B[3]])];case"AvgPool":var P=ip("strides",e,t,r),V=ip("pad",e,t,r),U=ip("kernelSize",e,t,r);return[Wl(ip("x",e,t,r),[U[1],U[2]],[P[1],P[2]],V)];case"MaxPool":var W=ip("strides",e,t,r),G=ip("pad",e,t,r),H=ip("kernelSize",e,t,r);return[fh(ip("x",e,t,r),[H[1],H[2]],[W[1],W[2]],G)];case"MaxPoolWithArgmax":var j=ip("strides",e,t,r),q=ip("pad",e,t,r),X=ip("kernelSize",e,t,r),K=ip("includeBatchInIndex",e,t,r),Q=vh(ip("x",e,t,r),[X[1],X[2]],[j[1],j[2]],q,K);return[Q.result,Q.indexes];case"AvgPool3D":var Y=ip("strides",e,t,r),J=ip("pad",e,t,r),Z=ip("kernelSize",e,t,r);return[Gl(ip("x",e,t,r),[Z[1],Z[2],Z[3]],[Y[1],Y[2],Y[3]],J)];case"MaxPool3D":var $=ip("strides",e,t,r),ee=ip("pad",e,t,r),te=ip("kernelSize",e,t,r);return[dh(ip("x",e,t,r),[te[1],te[2],te[3]],[$[1],$[2],$[3]],ee)];case"Dilation2D":var re=ip("strides",e,t,r),ae=ip("pad",e,t,r),ne=ip("dilations",e,t,r),ie=re[1],oe=re[2],se=ne[1],le=ne[2];return[wu(ip("x",e,t,r),ip("filter",e,t,r),[ie,oe],ae,[se,le],"NHWC")];default:throw TypeError("Node type ".concat(e.op," is not implemented"))}}(e,t,r)}));case"creation":return ys((function(){return function(e,t,r){switch(e.op){case"Fill":var a=ip("shape",e,t,r),n=ip("dtype",e,t,r);return[Qs(a,ip("value",e,t,r),n)];case"LinSpace":return[Ju(ip("start",e,t,r),ip("stop",e,t,r),ip("num",e,t,r))];case"Multinomial":var i=ip("logits",e,t,r),o=ip("numSamples",e,t,r),s=ip("seed",e,t,r);return[Ch(i,o,s)];case"OneHot":var l=ip("indices",e,t,r),u=ip("depth",e,t,r),h=ip("onValue",e,t,r),c=ip("offValue",e,t,r);return[To(l,u,h,c)];case"Ones":return[gh(ip("shape",e,t,r),ip("dtype",e,t,r))];case"OnesLike":return[Ih(ip("x",e,t,r))];case"RandomUniform":return[jh(ip("shape",e,t,r),ip("minval",e,t,r),ip("maxval",e,t,r),ip("dtype",e,t,r))];case"Range":return[Xh(ip("start",e,t,r),ip("stop",e,t,r),ip("step",e,t,r),ip("dtype",e,t,r))];case"TruncatedNormal":var f=ip("shape",e,t,r),d=ip("mean",e,t,r),v=ip("stdDev",e,t,r),p=ip("seed",e,t,r);return[Fc(f,d,v,ip("dtype",e,t,r),p)];case"Zeros":return[ph(ip("shape",e,t,r),ip("dtype",e,t,r))];case"ZerosLike":return[Bs(ip("x",e,t,r))];default:throw TypeError("Node type ".concat(e.op," is not implemented"))}}(e,t,r)}));case"dynamic":return(s=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r,a){var n,i,o,s,l,u,h,c,f,d,v,p,g,_,m,y,b,x,k,w,C,T,S,I;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:e.t0=t.op,e.next="NonMaxSuppressionV5"===e.t0?3:"NonMaxSuppressionV4"===e.t0?14:"NonMaxSuppressionV3"===e.t0||"NonMaxSuppressionV2"===e.t0?25:"Where"===e.t0?30:"ListDiff"===e.t0?36:37;break;case 3:return n=Qp(t,r,a),i=n.boxes,o=n.scores,s=n.maxOutputSize,l=n.iouThreshold,u=n.scoreThreshold,h=n.softNmsSigma,e.next=12,ld.nonMaxSuppressionWithScoreAsync(i,o,s,l,u,h);case 12:return c=e.sent,e.abrupt("return",[c.selectedIndices,c.selectedScores]);case 14:return f=Qp(t,r,a),d=f.boxes,v=f.scores,p=f.maxOutputSize,g=f.iouThreshold,_=f.scoreThreshold,m=ip("padToMaxOutputSize",t,r,a),e.next=23,ld.nonMaxSuppressionPaddedAsync(d,v,p,g,_,m);case 23:return y=e.sent,e.abrupt("return",[y.selectedIndices,y.validOutputs]);case 25:return b=Qp(t,r,a),x=b.boxes,k=b.scores,w=b.maxOutputSize,C=b.iouThreshold,T=b.scoreThreshold,e.next=28,ld.nonMaxSuppressionAsync(x,k,w,C,T);case 28:return e.t1=e.sent,e.abrupt("return",[e.t1]);case 30:return S=$i(ip("condition",t,r,a),"bool"),e.next=33,Bc(S);case 33:return e.t2=e.sent,I=[e.t2],e.abrupt("return",(S.dispose(),I));case 36:return e.abrupt("return",oc(ip("x",t,r,a),ip("y",t,r,a)));case 37:throw TypeError("Node type ".concat(t.op," is not implemented"));case 38:case"end":return e.stop()}}),e)}))),function(e,t,r){return s.apply(this,arguments)})(e,t,r);case"evaluation":return ys((function(){return function(e,t,r){switch(e.op){case"TopKV2":var a=ip("x",e,t,r),n=ip("k",e,t,r),i=ip("sorted",e,t,r),o=Ec(a,n,i);return[o.values,o.indices];case"Unique":var s=ip("x",e,t,r),l=Mc(s);return[l.values,l.indices];case"UniqueV2":var u=ip("x",e,t,r),h=ip("axis",e,t,r),c=Mc(u,h);return[c.values,c.indices];default:throw TypeError("Node type ".concat(e.op," is not implemented"))}}(e,t,r)}));case"image":return ys((function(){return function(e,t,r){switch(e.op){case"ResizeBilinear":var a=ip("images",e,t,r),n=ip("size",e,t,r),i=ip("alignCorners",e,t,r);return[ld.resizeBilinear(a,[n[0],n[1]],i)];case"ResizeNearestNeighbor":var o=ip("images",e,t,r),s=ip("size",e,t,r),l=ip("alignCorners",e,t,r);return[ld.resizeNearestNeighbor(o,[s[0],s[1]],l)];case"CropAndResize":var u=ip("image",e,t,r),h=ip("boxes",e,t,r),c=ip("boxInd",e,t,r),f=ip("cropSize",e,t,r),d=ip("method",e,t,r),v=ip("extrapolationValue",e,t,r);return[ld.cropAndResize(u,h,c,f,d,v)];default:throw TypeError("Node type ".concat(e.op," is not implemented"))}}(e,t,r)}));case"graph":return ys((function(){return function(e,t,r){switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":var a=ip("default",e,t,r);return[op(e.name,t,r)||a];case"Placeholder":return[op(e.name,t,r)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":return[cp(ip("x",e,t,r))];case"IdentityN":return ip("x",e,t,r).map((function(e){return cp(e)}));case"Snapshot":return[cp(ip("x",e,t,r))];case"Shape":return[qh(ip("x",e,t,r).shape,"int32")];case"ShapeN":return ip("x",e,t,r).map((function(e){return qh(e.shape)}));case"Size":return[qs(ip("x",e,t,r).size,"int32")];case"Rank":return[qs(ip("x",e,t,r).rank,"int32")];case"NoOp":return[qs(1)];case"Print":var n=ip("x",e,t,r),i=ip("data",e,t,r),o=ip("message",e,t,r),s=ip("summarize",e,t,r);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(o);for(var l=0;l<i.length;l++)console.log(Array.prototype.slice.call(i[l].dataSync()).slice(0,s));return[n];default:throw TypeError("Node type ".concat(e.op," is not implemented"))}}(e,t,r)}));case"logical":return ys((function(){return function(e,t,r){switch(e.op){case"Equal":return[Cu(ip("a",e,t,r),ip("b",e,t,r))];case"NotEqual":return[Th(ip("a",e,t,r),ip("b",e,t,r))];case"Greater":return[Wu(ip("a",e,t,r),ip("b",e,t,r))];case"GreaterEqual":return[Gu(ip("a",e,t,r),ip("b",e,t,r))];case"Less":return[Qu(ip("a",e,t,r),ip("b",e,t,r))];case"LessEqual":return[Yu(ip("a",e,t,r),ip("b",e,t,r))];case"LogicalAnd":return[lh(ip("a",e,t,r),ip("b",e,t,r))];case"LogicalNot":return[uh(ip("a",e,t,r))];case"LogicalOr":return[hh(ip("a",e,t,r),ip("b",e,t,r))];case"Select":case"SelectV2":return[Tu(ip("condition",e,t,r),ip("a",e,t,r),ip("b",e,t,r))];default:throw TypeError("Node type ".concat(e.op," is not implemented"))}}(e,t,r)}));case"matrices":return ys((function(){return function(e,t,r){switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[Co(ip("a",e,t,r),ip("b",e,t,r),ip("transposeA",e,t,r),ip("transposeB",e,t,r))];case"Transpose":return[So(ip("x",e,t,r),ip("perm",e,t,r))];case"_FusedMatMul":var a=_slicedToArray(ip("fusedOps",e,t,r),2),n=a[0],i=a[1],o="biasadd"===n,s="prelu"===i,l=ip("numArgs",e,t,r);if(o){if(s&&2!==l)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!s&&1!==l)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}var u=_slicedToArray(ip("args",e,t,r),2),h=u[0],c=u[1];return[p.matMul({a:ip("a",e,t,r),b:ip("b",e,t,r),transposeA:ip("transposeA",e,t,r),transposeB:ip("transposeB",e,t,r),bias:h,activation:i,preluActivationWeights:c})];default:throw TypeError("Node type ".concat(e.op," is not implemented"))}}(e,t,r)}));case"normalization":return ys((function(){return function(e,t,r){switch(e.op){case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[$l(ip("x",e,t,r),ip("mean",e,t,r),ip("variance",e,t,r),ip("offset",e,t,r),ip("scale",e,t,r),ip("epsilon",e,t,r))];case"LRN":return[Zu(ip("x",e,t,r),ip("radius",e,t,r),ip("bias",e,t,r),ip("alpha",e,t,r),ip("beta",e,t,r))];case"Softmax":return[vc(ip("x",e,t,r))];case"LogSoftmax":return[oh(ip("x",e,t,r))];case"SparseToDense":return[nf(ip("sparseIndices",e,t,r),ip("outputShape",e,t,r),ip("sparseValues",e,t,r),ip("defaultValue",e,t,r))];default:throw TypeError("Node type ".concat(e.op," is not implemented"))}}(e,t,r)}));case"reduction":return ys((function(){return function(e,t,r){switch(e.op){case"Max":var a=ip("axis",e,t,r),n=ip("keepDims",e,t,r);return[nh(ip("x",e,t,r),a,n)];case"Mean":var i=ip("axis",e,t,r),o=ip("keepDims",e,t,r);return[_h(ip("x",e,t,r),i,o)];case"Min":var s=ip("axis",e,t,r),l=ip("keepDims",e,t,r);return[mh(ip("x",e,t,r),s,l)];case"Sum":var u=ip("axis",e,t,r),h=ip("keepDims",e,t,r);return[ih(ip("x",e,t,r),u,h)];case"All":var c=ip("axis",e,t,r),f=ip("keepDims",e,t,r);return[bl(ip("x",e,t,r),c,f)];case"Any":var d=ip("axis",e,t,r),v=ip("keepDims",e,t,r);return[xl(ip("x",e,t,r),d,v)];case"ArgMax":var p=ip("axis",e,t,r);return[kl(ip("x",e,t,r),p)];case"ArgMin":var g=ip("axis",e,t,r);return[wl(ip("x",e,t,r),g)];case"Prod":var _=ip("axis",e,t,r),m=ip("keepDims",e,t,r);return[zh(ip("x",e,t,r),_,m)];case"Cumsum":var y=ip("axis",e,t,r),b=ip("exclusive",e,t,r),x=ip("reverse",e,t,r);return[yu(ip("x",e,t,r),y,b,x)];default:throw TypeError("Node type ".concat(e.op," is not implemented"))}}(e,t,r)}));case"slice_join":return ys((function(){return function(e,t,r){switch(e.op){case"ConcatV2":case"Concat":var n=ip("n",e,t,r),i=ip("axis",e,t,r),o=ip("tensors",e,t,r);return o=o.slice(0,n),[ql(o,i)];case"GatherV2":case"Gather":var s=ip("axis",e,t,r),l=ip("x",e,t,r),u=ip("indices",e,t,r);return[Uu(l,$i(u,"int32"),s)];case"ReverseV2":case"Reverse":var h=ip("axis",e,t,r),c=ip("x",e,t,r);return[Jh(c,h)];case"Slice":var f=ip("begin",e,t,r),d=ip("size",e,t,r);return[Kl(ip("x",e,t,r),f,d)];case"StridedSlice":var v=ip("begin",e,t,r),p=ip("end",e,t,r),g=ip("strides",e,t,r),_=ip("beginMask",e,t,r),m=ip("endMask",e,t,r),y=ip("ellipsisMask",e,t,r),b=ip("newAxisMask",e,t,r),x=ip("shrinkAxisMask",e,t,r),k=ip("x",e,t,r);return[Tc(k,v,p,g,_,m,y,b,x)];case"Pack":return ys((function(){var n=ip("axis",e,t,r),i=ip("tensors",e,t,r),o=i[0].shape,s=kc(i[0]).shape,l=i.map((function(e){var t=a.arraysEqual(e.shape,o);if(!t&&!a.arraysEqual(kc(e).shape,s))throw new Error("the input tensors shape does not match");return t?e:wo(e,o)}));return[wc(l,n)]}));case"Unpack":var w=ip("axis",e,t,r),C=ip("tensor",e,t,r);return Oc(C,w);case"Tile":var T=ip("reps",e,t,r);return[Mu(ip("x",e,t,r),T)];case"Split":case"SplitV":var S=ip("axis",e,t,r),I=ip("numOrSizeSplits",e,t,r),A=ip("x",e,t,r);return yc(A,I,S);case"ScatterNd":var R=ip("indices",e,t,r),N=ip("values",e,t,r),E=ip("shape",e,t,r);return[af(R,N,E)];case"GatherNd":var F=ip("x",e,t,r),M=ip("indices",e,t,r);return[of(F,M)];case"SparseToDense":var D=ip("sparseIndices",e,t,r),O=ip("outputShape",e,t,r),L=ip("sparseValues",e,t,r),z=ip("defaultValue",e,t,r);return[nf(D,L,O,L.dtype===z.dtype?z:$i(z,L.dtype))];default:throw TypeError("Node type ".concat(e.op," is not implemented"))}}(e,t,r)}));case"spectral":return ys((function(){return function(e,t,r){switch(e.op){case"FFT":return[pc(ip("x",e,t,r))];case"IFFT":return[gc(ip("x",e,t,r))];case"RFFT":return[bc(ip("x",e,t,r))];case"IRFFT":return[_c(ip("x",e,t,r))];default:throw TypeError("Node type ".concat(e.op," is not implemented"))}}(e,t,r)}));case"transformation":return ys((function(){return function(e,t,r){switch(e.op){case"Cast":return[$i(ip("x",e,t,r),ip("dtype",e,t,r))];case"ExpandDims":var a=ip("axis",e,t,r);return[Eu(ip("x",e,t,r),a)];case"Squeeze":var n=ip("axis",e,t,r);return[kc(ip("x",e,t,r),n)];case"Reshape":return[wo(ip("x",e,t,r),ip("shape",e,t,r))];case"MirrorPad":return[bh(ip("x",e,t,r),ip("padding",e,t,r),ip("mode",e,t,r))];case"PadV2":case"Pad":return[Rh(ip("x",e,t,r),ip("padding",e,t,r),ip("constantValue",e,t,r))];case"SpaceToBatchND":var i=ip("blockShape",e,t,r),o=ip("paddings",e,t,r);return[Dh(ip("x",e,t,r),i,o)];case"BatchToSpaceND":var s=ip("blockShape",e,t,r),l=ip("crops",e,t,r);return[Jl(ip("x",e,t,r),s,l)];case"DepthToSpace":var u=ip("blockSize",e,t,r),h=ip("dataFormat",e,t,r).toUpperCase();return[bu(ip("x",e,t,r),u,h)];case"BroadcastTo":return[au(ip("x",e,t,r),ip("shape",e,t,r))];default:throw TypeError("Node type ".concat(e.op," is not implemented"))}}(e,t,r)}));case"hash_table":return(o=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r,a,n){var i,o,s,l,u,h,c,f,d,v,p;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:e.t0=t.op,e.next="HashTable"===e.t0||"HashTableV2"===e.t0?3:"LookupTableImport"===e.t0||"LookupTableImportV2"===e.t0?5:"LookupTableFind"===e.t0||"LookupTableFindV2"===e.t0?10:15;break;case 3:return i=ip("keyDType",t,r,a),o=ip("valueDType",t,r,a),s=new Yp(i,o),e.abrupt("return",(n.addHashTable(t.name,s),[s.handle]));case 5:return l=ip("tableHandle",t,r,a,n),u=ip("keys",t,r,a),h=ip("values",t,r,a),c=n.getHashTableById(l.id),e.next=8,c.import(u,h);case 8:return e.t1=e.sent,e.abrupt("return",[e.t1]);case 10:return f=ip("tableHandle",t,r,a,n),d=ip("keys",t,r,a),v=ip("defaultValue",t,r,a),p=n.getHashTableById(f.id),e.next=13,p.find(d,v);case 13:return e.t2=e.sent,e.abrupt("return",[e.t2]);case 15:throw TypeError("Node type ".concat(t.op," is not implemented"));case 16:case"end":return e.stop()}}),e)}))),function(e,t,r,a){return o.apply(this,arguments)})(e,t,r,n);case"custom":var i=np(e.op);if(i&&i.customExecutor)return i.customExecutor(new Hp(e,t,r));throw TypeError("Custom op ".concat(e.op," is not registered."));default:throw TypeError("Unknown op '".concat(e.op,"'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()"))}var o,s,l}(e,t,r);return a.isPromise(i)?i.then((function(e){return[].concat(e)})):[].concat(i)}var Zp=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};_classCallCheck(this,e),this.weightMap=t,this.tensorArrayMap=r,this.tensorListMap=a,this.functionMap=n,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}return _createClass(e,[{key:"newFrame",value:function(e,t){return{id:e,frameName:t,iterationId:0}}},{key:"generateCurrentContextIds",value:function(){for(var e=[],t=0;t<this.contexts.length-1;t++){var r=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(r))}e.push(""),this._currentContextIds=e}},{key:"contextIdforContexts",value:function(e){return e?e.map((function(e){return 0===e.id&&0===e.iterationId?"":"".concat(e.frameName,"-").concat(e.iterationId)})).join("/"):""}},{key:"enterFrame",value:function(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}},{key:"exitFrame",value:function(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}},{key:"nextIteration",value:function(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");this.contexts=this.contexts.slice(),this.lastId++;var e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}},{key:"getWeight",value:function(e){return this.weightMap[e]}},{key:"addTensorArray",value:function(e){this.tensorArrayMap[e.id]=e}},{key:"getTensorArray",value:function(e){return this.tensorArrayMap[e]}},{key:"addTensorList",value:function(e){this.tensorListMap[e.id]=e}},{key:"getTensorList",value:function(e){return this.tensorListMap[e]}},{key:"dispose",value:function(e){for(var t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(var r in this.tensorListMap)this.tensorListMap[r].clearAndClose(e)}},{key:"currentContext",set:function(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())},get:function(){return this.contexts}},{key:"currentContextId",get:function(){return this._currentContextIds[0]}},{key:"currentContextIds",get:function(){return this._currentContextIds}}]),e}();function $p(e,t,r,a){var n=new Set,i=[],o=null,s=null,l=new Set,u=Object.keys(e).map((function(e){return up(e)[0]})),h=[];null!=a&&(h=a.map((function(e){return up(e.name)[0]})));for(var c=_toConsumableArray(t);c.length>0;){var f=c.pop();(ag(f)||ng(f)||ig(f))&&null==o&&(s=(o=f).children.map((function(e){return e.name})).filter((function(e){return n.has(e)}))),n.add(f.name),null==r[f.name]&&-1===u.indexOf(f.name)&&-1===h.indexOf(f.name)&&(0!==f.inputs.length?f.inputs.forEach((function(e){l.has(e.name)||(l.add(e.name),c.push(e))})):i.push(f.name))}return{inputs:e,outputs:t,usedNodes:n,missingInputs:i,dynamicNode:o,syncInputs:s}}var eg=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],tg=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],rg=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2"];function ag(e){return eg.indexOf(e.op)>=0}function ng(e){return tg.indexOf(e.op)>=0}function ig(e){return rg.indexOf(e.op)>=0}var og=function(){function e(t,r){var a=this;_classCallCheck(this,e),this.graph=t,this.parent=r,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this._outputs=t.outputs,this._inputs=t.inputs,this._initNodes=t.initNodes,this._signature=t.signature,this._functions=t.functions,null!=t.functions&&Object.keys(t.functions).forEach((function(r){a._functionExecutorMap[r]=new e(t.functions[r],a)}))}var t,r,n,i;return _createClass(e,[{key:"getCompilationKey",value:function(e,t){var r=e.map((function(e){return e.name})).sort(),a=t.map((function(e){return e.name})).sort();return r.join(this.SEPERATOR)+"--"+a.join(this.SEPERATOR)}},{key:"compile",value:function(e,t){var r=$p(e,t,this.weightMap,this._initNodes),a=r.missingInputs,n=r.dynamicNode,i=r.syncInputs;if(null!=n)throw new Error("This execution contains the node '".concat(n.name,"', which has the dynamic op '").concat(n.op,"'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [").concat(i,"]"));if(a.length>0){var o=t.map((function(e){return e.name})),s=Object.keys(e);throw new Error("Cannot compute the outputs [".concat(o,"] from the provided inputs [").concat(s,"]. Missing the following inputs: [").concat(a,"]"))}return function(e,t,r){var a=r.usedNodes,n=r.inputs,i=[],o=Object.keys(n).map((function(e){return up(e)[0]})).map((function(t){return e.nodes[t]})),s=e.initNodes;o.forEach((function(e){a.has(e.name)&&i.push(e)})),e.weights.forEach((function(e){a.has(e.name)&&i.push(e)})),null!=s&&s.forEach((function(e){a.has(e.name)&&i.push(e)}));for(var l=new Set,u=[];i.length>0;){var h=i.pop();l.add(h.name),t[h.name]||u.push(h),h.children.forEach((function(e){!l.has(e.name)&&a.has(e.name)&&e.inputs.every((function(e){return l.has(e.name)}))&&i.push(e)}))}return u}(this.graph,this.weightMap,r)}},{key:"execute",value:function(e,t){var r=this;e=this.mapInputs(e);var n=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);var i=n.map((function(e){return r.graph.nodes[up(e)[0]]})),o=t.map((function(e){return up(e)[0]})),s=o.map((function(e){return r.graph.nodes[e]}));0===s.length&&(s=this._outputs);var l=this.getCompilationKey(i,s),u=this.compiledMap.get(l);null==u&&(u=this.compile(e,s),this.compiledMap.set(l,u));var h={},c={};return ys((function(){var n=new Zp(r.weightMap,h,c,r.functionExecutorMap),i=Object.assign({},r.weightMap);Object.keys(e).forEach((function(t){var r=_slicedToArray(up(t),2),a=r[0],n=[];n[r[1]]=e[t],i[a]=n}));for(var s=r.getFrozenTensorIds(i),l={},f=0;f<u.length;f++){var d=u[f];if(!i[d.name]){var v=Jp(d,i,n,r._resourceManager);if(a.isPromise(v))throw new Error("The execution of the op '".concat(d.op,"' returned a promise. Please use model.executeAsync() instead."));i[d.name]=v,r.checkTensorForDisposal(d.name,d,i,n,s,o,l)}}return null==r.parent&&n.dispose(s),t.map((function(e){return op(e,i,n)}))}))}},{key:"getFrozenTensorIds",value:function(e){var t=[].concat.apply([],Object.keys(e).map((function(t){return e[t]})).map((function(e){return e.map((function(e){return e.id}))})));return new Set(t)}},{key:"checkTensorForDisposal",value:function(e,t,r,a,n,i,o){"control"!==t.category&&-1===i.indexOf(e)&&(r[e].forEach((function(e){null!=e&&(o[e.id]=(o[e.id]||0)+t.children.length)})),t.inputs.forEach((function(e){if("control"!==e.category){var t=function(e,t,r){return t[lp(e,r.currentContextId)]}(e.name,r,a);null!=t&&t.forEach((function(e){if(e&&!n.has(e.id)){var t=o[e.id];1===t?(e.dispose(),delete o[e.id]):null!=t&&o[e.id]--}}))}})))}},{key:"executeAsync",value:(i=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this._executeAsync(t,r));case 1:case"end":return e.stop()}}),e,this)}))),function(e,t){return i.apply(this,arguments)})},{key:"_executeAsync",value:(n=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){var a,n,i,o,s,l,u,h,c,f=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return a=f.length>2&&void 0!==f[2]&&f[2],n=f.length>3&&void 0!==f[3]?f[3]:{},i=f.length>4&&void 0!==f[4]?f[4]:{},a||(t=this.mapInputs(t),this.checkInputs(t),this.checkInputShapeAndType(t),r=this.mapOutputs(r),this.checkOutputs(r)),o=new Zp(this.weightMap,n,i,this.functionExecutorMap),e.next=7,this.executeWithControlFlow(t,o,r,a);case 7:return s=e.sent,l=r.map((function(e){return op(e,s,o)})),u=l.map((function(e){return e.id})),h=Object.keys(t).map((function(e){return t[e].id})),c=new Set([].concat(_toConsumableArray(u),_toConsumableArray(h),_toConsumableArray(this.weightIds))),e.abrupt("return",(Object.keys(s).forEach((function(e){s[e].forEach((function(e){!e||e.isDisposed||c.has(e.id)||e.dispose()}))})),null==this.parent&&o.dispose(c),l));case 13:case"end":return e.stop()}}),e,this)}))),function(e,t){return n.apply(this,arguments)})},{key:"executeFunctionAsync",value:(r=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r,a){var n,i=this;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.reduce((function(e,t,r){return e[i.inputs[r].name]=t,e}),{}),e.abrupt("return",this._executeAsync(n,this.outputNodes,!0,r,a));case 2:case"end":return e.stop()}}),e,this)}))),function(e,t,a){return r.apply(this,arguments)})},{key:"executeWithControlFlow",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r,a,n){var i,o,s,l,u,h,c,f,d,v,p,g,_,m,y,b,x,k=this;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:i=Object.keys(t),o=i.map((function(e){return k.graph.nodes[up(e)[0]]})),s=a.map((function(e){return up(e)[0]})),0===(l=s.map((function(e){return k.graph.nodes[e]}))).length&&(l=this._outputs),u=$p(t,l,this.weightMap,this._initNodes),h=u.usedNodes,c=u.missingInputs,f=u.dynamicNode,d=u.syncInputs,v=[].concat(_toConsumableArray(o),_toConsumableArray(this.graph.weights),_toConsumableArray(this._initNodes||[])).map((function(e){return{node:e,contexts:r.currentContext}})),p=Object.assign({},this.weightMap),Object.keys(t).forEach((function(e){var r=_slicedToArray(up(e),2),a=r[0],n=[];n[r[1]]=t[e],p[a]=n})),g={},_=this.getFrozenTensorIds(p),m={};case 6:if(!(v.length>0)){e.next=12;break}return y=this.processStack(o,v,r,p,m,_,s,g,h),e.next=10,Promise.all(y);case 10:e.next=6;break;case 12:if(null!=f||n||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead."),!((b=l.filter((function(e){return!ag(e)&&!op(e.name,p,r)})).map((function(e){return e.name}))).length>0)){e.next=17;break}throw x="",null!=f&&(x="Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [".concat(d,"]")),new Error("Cannot compute the outputs [".concat(b,"] from the provided inputs [").concat(i,"]. Consider providing the following inputs: [").concat(c,"]. ").concat(x));case 17:return e.abrupt("return",p);case 18:case"end":return e.stop()}}),e,this)}))),function(e,r,a,n){return t.apply(this,arguments)})},{key:"processStack",value:function(e,t,r,n,i,o,s,l,u){for(var h=this,c=[],f=function(){var e,f=t.pop();r.currentContext=f.contexts;var d="";if("Enter"===f.node.op&&ip("isConstant",f.node,n,r)&&(e=_slicedToArray(sp(f.node.name,r),1),d=e[0]),null==n[f.node.name]){var v,p=Jp(f.node,n,r,h._resourceManager);d||(v=_slicedToArray(sp(f.node.name,r),1),d=v[0]);var g=r.currentContext;a.isPromise(p)?c.push(p.then((function(e){return n[d]=e,r.currentContext=g,h.checkTensorForDisposal(d,f.node,n,r,o,s,l),h.processChildNodes(f.node,t,r,n,i,u),e}))):(n[d]=p,h.checkTensorForDisposal(d,f.node,n,r,o,s,l),h.processChildNodes(f.node,t,r,n,i,u))}else h.processChildNodes(f.node,t,r,n,i,u)};t.length>0;)f();return c}},{key:"processChildNodes",value:function(e,t,r,a,n,i){e.children.forEach((function(e){var o=_slicedToArray(sp(e.name,r),1)[0];!n[o]&&i.has(e.name)&&("Merge"===e.op?e.inputNames.some((function(e){return!!op(e,a,r)}))&&(n[o]=!0,t.push({contexts:r.currentContext,node:e})):e.inputNames.every((function(e){return!!op(e,a,r)}))&&(n[o]=!0,t.push({contexts:r.currentContext,node:e})))}))}},{key:"dispose",value:function(){var e=this;Object.keys(this.weightMap).forEach((function(t){return e.weightMap[t].forEach((function(e){return e.dispose()}))}))}},{key:"checkInputShapeAndType",value:function(e){var t=this;Object.keys(e).forEach((function(r){var n=e[r],i=_slicedToArray(up(r),1)[0],o=t.graph.nodes[i];if(o.attrParams.shape&&o.attrParams.shape.value){var s=o.attrParams.shape.value,l=s.length===n.shape.length&&n.shape.every((function(e,t){return-1===s[t]||s[t]===e}));a.assert(l,(function(){return"The shape of dict['".concat(o.name,"'] provided in model.execute(dict) must be [").concat(s,"], but was [").concat(n.shape,"]")}))}o.attrParams.dtype&&o.attrParams.dtype.value&&a.assert(n.dtype===o.attrParams.dtype.value,(function(){return"The dtype of dict['".concat(o.name,"'] provided in model.execute(dict) must be ").concat(o.attrParams.dtype.value,", but was ").concat(n.dtype)}))}))}},{key:"mapInputs",value:function(e){var t={};for(var r in e)null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[r]?t[this._signature.inputs[r].name]=e[r]:t[r]=e[r];return t}},{key:"checkInputs",value:function(e){var t=this,r=Object.keys(e).filter((function(e){var r=_slicedToArray(up(e),1)[0];return null==t.graph.nodes[r]}));if(r.length>0)throw new Error("The dict provided in model.execute(dict) has keys: [".concat(r,"] that are not part of graph"))}},{key:"mapOutputs",value:function(e){var t=this;return e.map((function(e){return null!=t._signature&&null!=t._signature.outputs&&null!=t._signature.outputs[e]?t._signature.outputs[e].name:e}),{})}},{key:"checkOutputs",value:function(e){var t=this;e.forEach((function(e){var r=_slicedToArray(up(e),1)[0];if(!t.graph.nodes[r])throw new Error("The output '".concat(e,"' is not found in the graph"))}))}},{key:"weightIds",get:function(){return this.parent?this.parent.weightIds:this._weightIds}},{key:"functionExecutorMap",get:function(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}},{key:"weightMap",get:function(){return this.parent?this.parent.weightMap:this._weightMap},set:function(e){var t,r=Object.keys(e).map((function(t){return e[t].map((function(e){return e.id}))}));this._weightIds=(t=[]).concat.apply(t,_toConsumableArray(r)),this._weightMap=e}},{key:"resourceManager",set:function(e){this._resourceManager=e}},{key:"inputs",get:function(){return this._inputs.map((function(e){return{name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0}}))}},{key:"outputs",get:function(){return this._outputs.map((function(e){return{name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0}}))}},{key:"inputNodes",get:function(){return this._inputs.map((function(e){return e.signatureKey||e.name}))}},{key:"outputNodes",get:function(){return this._outputs.map((function(e){var t=e.signatureKey||e.name;return e.defaultOutput?"".concat(t,":").concat(e.defaultOutput):t}))}},{key:"functions",get:function(){var e=this;return Object.keys(this._functions).reduce((function(t,r){return t[r]=e._functions[r].signature,t}),{})}}]),e}(),sg=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};_classCallCheck(this,e),this.hashTableNameToHandle=t,this.hashTableMap=r}return _createClass(e,[{key:"addHashTable",value:function(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}},{key:"getHashTableHandleByName",value:function(e){return this.hashTableNameToHandle[e]}},{key:"getHashTableById",value:function(e){return this.hashTableMap[e]}},{key:"dispose",value:function(){for(var e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(var t in this.hashTableNameToHandle)this.hashTableNameToHandle[t].dispose(),delete this.hashTableNameToHandle[t]}}]),e}(),lg=function(){function e(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};_classCallCheck(this,e),this.modelUrl=t,this.loadOptions=r,this.version="n/a",null==r&&(this.loadOptions={}),this.resourceManager=new sg}var t,r,a;return _createClass(e,[{key:"findIOHandler",value:function(){var e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=o.browserHTTPRequest(e,this.loadOptions);else{var t=o.getLoadHandlers(e,this.loadOptions);if(0===t.length)t.push(o.browserHTTPRequest(e,this.loadOptions));else if(t.length>1)throw new Error("Found more than one (".concat(t.length,") load handlers for URL '").concat([e],"'"));this.handler=t[0]}}},{key:"load",value:(a=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(this.findIOHandler(),null!=this.handler.load){e.next=2;break}throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");case 2:return e.next=4,this.handler.load();case 4:return t=e.sent,e.abrupt("return",this.loadSync(t));case 6:case"end":return e.stop()}}),e,this)}))),function(){return a.apply(this,arguments)})},{key:"loadSync",value:function(e){this.artifacts=e;var t=this.artifacts.modelTopology,r={};null!=this.artifacts.userDefinedMetadata&&(r=this.artifacts.userDefinedMetadata.signature),this.version="".concat(t.versions.producer,".").concat(t.versions.minConsumer);var a=o.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new og(Rp.Instance.transformGraph(t,r)),this.executor.weightMap=this.convertTensorMapToTensorsMap(a),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer){var n=Rp.Instance.transformGraph(e.modelInitializer);this.initializer=new og(n),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}},{key:"save",value:(r=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){var a;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if("string"!=typeof t){e.next=7;break}if(0!==(a=o.getSaveHandlers(t)).length){e.next=4;break}throw new Error("Cannot find any save handlers for URL '".concat(t,"'"));case 4:if(!(a.length>1)){e.next=6;break}throw new Error("Found more than one (".concat(a.length,") save handlers for URL '").concat(t,"'"));case 6:t=a[0];case 7:if(null!=t.save){e.next=9;break}throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");case 9:return e.abrupt("return",t.save(this.artifacts));case 10:case"end":return e.stop()}}),e,this)}))),function(e,t){return r.apply(this,arguments)})},{key:"predict",value:function(e,t){return this.execute(e,this.outputNodes)}},{key:"normalizeInputs",value:function(e){if(!(e instanceof Rn||Array.isArray(e)))return e;if((e=Array.isArray(e)?e:[e]).length!==this.inputNodes.length)throw new Error("Input tensor count mismatch,the graph model has ".concat(this.inputNodes.length," placeholders, while there are ").concat(e.length," input tensors."));return this.inputNodes.reduce((function(t,r,a){return t[r]=e[a],t}),{})}},{key:"normalizeOutputs",value:function(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}},{key:"execute",value:function(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);var r=this.executor.execute(e,t);return r.length>1?r:r[0]}},{key:"executeAsync",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){var a;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=this.normalizeInputs(t),r=this.normalizeOutputs(r),e.next=3,this.executor.executeAsync(t,r);case 3:return a=e.sent,e.abrupt("return",a.length>1?a:a[0]);case 5:case"end":return e.stop()}}),e,this)}))),function(e,r){return t.apply(this,arguments)})},{key:"convertTensorMapToTensorsMap",value:function(e){return Object.keys(e).reduce((function(t,r){return t[r]=[e[r]],t}),{})}},{key:"dispose",value:function(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}},{key:"modelVersion",get:function(){return this.version}},{key:"inputNodes",get:function(){return this.executor.inputNodes}},{key:"outputNodes",get:function(){return this.executor.outputNodes}},{key:"inputs",get:function(){return this.executor.inputs}},{key:"outputs",get:function(){return this.executor.outputs}},{key:"weights",get:function(){return this.executor.weightMap}}]),e}();function ug(e){return hg.apply(this,arguments)}function hg(){return(hg=_asyncToGenerator(regeneratorRuntime.mark((function e(t){var r,a,n=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(r=n.length>1&&void 0!==n[1]?n[1]:{},null!=t){e.next=3;break}throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");case 3:return null==r&&(r={}),r.fromTFHub&&null==t.load&&(t.endsWith("/")||(t+="/"),t+="model.json?tfjs-format=file"),a=new lg(t,r),e.next=7,a.load();case 7:return e.abrupt("return",a);case 8:case"end":return e.stop()}}),e)})))).apply(this,arguments)}var cg=function(e,t){return(cg=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)};function fg(e,t){function r(){this.constructor=e}cg(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}var dg=function(){return(dg=Object.assign||function(e){for(var t,r=1,a=arguments.length;r<a;r++)for(var n in t=arguments[r])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}).apply(this,arguments)};function vg(e,t,r,a){return new(r||(r=Promise))((function(n,i){function o(e){try{l(a.next(e))}catch(e){i(e)}}function s(e){try{l(a.throw(e))}catch(e){i(e)}}function l(e){e.done?n(e.value):new r((function(t){t(e.value)})).then(o,s)}l((a=a.apply(e,t||[])).next())}))}function pg(e,t){var r,a,n,i,o={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;o;)try{if(r=1,a&&(n=2&i[0]?a.return:i[0]?a.throw||((n=a.return)&&n.call(a),0):a.next)&&!(n=n.call(a,i[1])).done)return n;switch(a=0,n&&(i=[2&i[0],n.value]),i[0]){case 0:case 1:n=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,a=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(n=(n=o.trys).length>0&&n[n.length-1])&&(6===i[0]||2===i[0])){o=0;continue}if(3===i[0]&&(!n||i[1]>n[0]&&i[1]<n[3])){o.label=i[1];break}if(6===i[0]&&o.label<n[1]){o.label=n[1],n=i;break}if(n&&o.label<n[2]){o.label=n[2],o.ops.push(i);break}n[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],a=0}finally{r=n=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}}var gg=function(){function e(e,t){this.model=e,this.outputStride=t;var r=this.model.inputs[0].shape;a.assert(-1===r[1]&&-1===r[2],(function(){return"Input shape ["+r[1]+", "+r[2]+"] must both be equal to or -1"}))}return e.prototype.predict=function(e){var t=this;return ys((function(){var r=t.preprocessInput(e.toFloat()).expandDims(0),a=t.model.predict(r).map((function(e){return e.squeeze([0])})),n=t.nameOutputResults(a);return{heatmapScores:n.heatmap.sigmoid(),offsets:n.offsets,displacementFwd:n.displacementFwd,displacementBwd:n.displacementBwd}}))},e.prototype.dispose=function(){this.model.dispose()},e}(),_g=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return fg(t,e),t.prototype.preprocessInput=function(e){return ys((function(){return Ds(e,127.5).sub(1)}))},t.prototype.nameOutputResults=function(e){return{offsets:e[0],heatmap:e[1],displacementFwd:e[2],displacementBwd:e[3]}},t}(gg);function mg(e){return Math.floor(e/2)}var yg=function(){function e(e,t){this.priorityQueue=new Array(e),this.numberOfElements=-1,this.getElementValue=t}return e.prototype.enqueue=function(e){this.priorityQueue[++this.numberOfElements]=e,this.swim(this.numberOfElements)},e.prototype.dequeue=function(){var e=this.priorityQueue[0];return this.exchange(0,this.numberOfElements--),this.sink(0),this.priorityQueue[this.numberOfElements+1]=null,e},e.prototype.empty=function(){return-1===this.numberOfElements},e.prototype.size=function(){return this.numberOfElements+1},e.prototype.all=function(){return this.priorityQueue.slice(0,this.numberOfElements+1)},e.prototype.max=function(){return this.priorityQueue[0]},e.prototype.swim=function(e){for(;e>0&&this.less(mg(e),e);)this.exchange(e,mg(e)),e=mg(e)},e.prototype.sink=function(e){for(;2*e<=this.numberOfElements;){var t=2*e;if(t<this.numberOfElements&&this.less(t,t+1)&&t++,!this.less(e,t))break;this.exchange(e,t),e=t}},e.prototype.getValueAt=function(e){return this.getElementValue(this.priorityQueue[e])},e.prototype.less=function(e,t){return this.getValueAt(e)<this.getValueAt(t)},e.prototype.exchange=function(e,t){var r=this.priorityQueue[e];this.priorityQueue[e]=this.priorityQueue[t],this.priorityQueue[t]=r},e}();function bg(e,t,r,a,n,i){for(var o=i.shape,s=o[0],l=o[1],u=!0,h=Math.max(r-n,0),c=Math.min(r+n+1,s),f=h;f<c;++f){for(var d=Math.max(a-n,0),v=Math.min(a+n+1,l),p=d;p<v;++p)if(i.get(f,p,e)>t){u=!1;break}if(!u)break}return u}var xg=["nose","leftEye","rightEye","leftEar","rightEar","leftShoulder","rightShoulder","leftElbow","rightElbow","leftWrist","rightWrist","leftHip","rightHip","leftKnee","rightKnee","leftAnkle","rightAnkle"],kg=xg.length,wg=xg.reduce((function(e,t,r){return e[t]=r,e}),{});function Cg(e,t,r,a){return{y:a.get(e,t,r),x:a.get(e,t,r+kg)}}function Tg(e,t,r){var a=Cg(e.heatmapY,e.heatmapX,e.id,r);return{x:e.heatmapX*t+a.x,y:e.heatmapY*t+a.y}}function Sg(e,t,r){return e<t?t:e>r?r:e}function Ig(e,t){return{x:e.x+t.x,y:e.y+t.y}}[["leftHip","leftShoulder"],["leftElbow","leftShoulder"],["leftElbow","leftWrist"],["leftHip","leftKnee"],["leftKnee","leftAnkle"],["rightHip","rightShoulder"],["rightElbow","rightShoulder"],["rightElbow","rightWrist"],["rightHip","rightKnee"],["rightKnee","rightAnkle"],["leftShoulder","rightShoulder"],["leftHip","rightHip"]].map((function(e){return[wg[e[0]],wg[e[1]]]}));var Ag=[["nose","leftEye"],["leftEye","leftEar"],["nose","rightEye"],["rightEye","rightEar"],["nose","leftShoulder"],["leftShoulder","leftElbow"],["leftElbow","leftWrist"],["leftShoulder","leftHip"],["leftHip","leftKnee"],["leftKnee","leftAnkle"],["nose","rightShoulder"],["rightShoulder","rightElbow"],["rightElbow","rightWrist"],["rightShoulder","rightHip"],["rightHip","rightKnee"],["rightKnee","rightAnkle"]].map((function(e){return[wg[e[0]],wg[e[1]]]})),Rg=Ag.map((function(e){return e[1]})),Ng=Ag.map((function(e){return e[0]}));function Eg(e,t,r,a){return{y:Sg(Math.round(e.y/t),0,r-1),x:Sg(Math.round(e.x/t),0,a-1)}}function Fg(e,t,r,a,n,i,o,s){void 0===s&&(s=2);for(var l=a.shape,u=l[0],h=l[1],c=function(e,t,r){var a=r.shape[2]/2;return{y:r.get(t.y,t.x,e),x:r.get(t.y,t.x,a+e)}}(e,Eg(t.position,i,u,h),o),f=Ig(t.position,c),d=0;d<s;d++){var v=Eg(f,i,u,h),p=Cg(v.y,v.x,r,n);f=Ig({x:v.x*i,y:v.y*i},{x:p.x,y:p.y})}var g=Eg(f,i,u,h),_=a.get(g.y,g.x,r);return{position:f,part:xg[r],score:_}}function Mg(e,t,r,a,n,i){var o=Rg.length,s=new Array(t.shape[2]),l=e.part,u=e.score,h=Tg(l,a,r);s[l.id]={score:u,part:xg[l.id],position:h};for(var c=o-1;c>=0;--c){var f=Rg[c],d=Ng[c];s[f]&&!s[d]&&(s[d]=Fg(c,s[f],d,t,r,a,i))}for(c=0;c<o;++c)d=Rg[c],s[f=Ng[c]]&&!s[d]&&(s[d]=Fg(c,s[f],d,t,r,a,n));return s}function Dg(e,t,r,a){var n=r.x,i=r.y;return e.some((function(e){var r=e.keypoints[a].position;return function(e,t,r,a){var n=r-e,i=a-t;return n*n+i*i}(i,n,r.y,r.x)<=t}))}function Og(e,t,r){return r.reduce((function(r,a,n){var i=a.score;return Dg(e,t,a.position,n)||(r+=i),r}),0)/r.length}function Lg(e,t,r,a,n,i,o,s){void 0===o&&(o=.5),void 0===s&&(s=20);for(var l=[],u=function(e,t,r){for(var a=r.shape,n=a[0],i=a[1],o=a[2],s=new yg(n*i*o,(function(e){return e.score})),l=0;l<n;++l)for(var u=0;u<i;++u)for(var h=0;h<o;++h){var c=r.get(l,u,h);c<e||bg(h,c,l,u,1,r)&&s.enqueue({score:c,part:{heatmapY:l,heatmapX:u,id:h}})}return s}(o,0,e),h=s*s;l.length<i&&!u.empty();){var c=u.dequeue();if(!Dg(l,h,Tg(c.part,n,t),c.part.id)){var f=Mg(c,e,t,n,r,a),d=Og(l,h,f);l.push({keypoints:f,score:d})}}return l}function zg(e,t,r,a){return{y:a.get(e,t,r),x:a.get(e,t,r+kg)}}function Bg(e,t,r){return ys((function(){var a=function(e,t){for(var r=[],a=0;a<kg;a++){var n=zg(e.get(a,0).valueOf(),e.get(a,1).valueOf(),a,t),i=n.x;r.push(n.y),r.push(i)}return Ic(r,[kg,2])}(e,r);return e.toTensor().mul(qs(t,"int32")).toFloat().add(a)}))}function Pg(e,t,r){return vg(this,void 0,void 0,(function(){var a,n,i,o,s,l,u,h,c;return pg(this,(function(f){switch(f.label){case 0:return a=0,n=function(e){var t=e.shape,r=t[0],a=t[1],n=t[2];return ys((function(){var t=e.reshape([r*a,n]).argMax(0),i=t.div(qs(a,"int32")).expandDims(1),o=function(e,t){return ys((function(){var r=e.div(qs(t,"int32"));return e.sub(r.mul(qs(t,"int32")))}))}(t,a).expandDims(1);return ql([i,o],1)}))}(e),[4,Promise.all([e.buffer(),t.buffer(),n.buffer()])];case 1:return i=f.sent(),o=i[0],[4,(l=Bg(s=i[2],r,i[1])).buffer()];case 2:return u=f.sent(),h=Array.from(function(e,t){for(var r=t.shape[0],a=new Float32Array(r),n=0;n<r;n++){var i=t.get(n,0),o=t.get(n,1);a[n]=e.get(i,o,n)}return a}(o,s)),c=h.map((function(e,t){return a+=e,{position:{y:u.get(t,0),x:u.get(t,1)},part:xg[t],score:e}})),n.dispose(),l.dispose(),[2,{keypoints:c,score:a/c.length}]}}))}))}var Vg="https://storage.googleapis.com/tfjs-models/savedmodel/posenet/mobilenet/",Ug="https://storage.googleapis.com/tfjs-models/savedmodel/posenet/resnet50/",Wg=[-123.15,-115.9,-103.06],Gg=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return fg(t,e),t.prototype.preprocessInput=function(e){return e.add(Wg)},t.prototype.nameOutputResults=function(e){return{offsets:e[2],heatmap:e[3],displacementFwd:e[0],displacementBwd:e[1]}},t}(gg);function Hg(e){return vg(this,void 0,void 0,(function(){return pg(this,(function(t){return[2,Promise.all(e.map((function(e){return e.buffer()})))]}))}))}function jg(e,t){return Qg(e,t)?e:Math.floor(e/t)*t+1}function qg(e){a.assert("number"==typeof e||"object"==typeof e,(function(){return"Invalid inputResolution "+e+". Should be a number or an object with width and height"})),"object"==typeof e&&(a.assert("number"==typeof e.width,(function(){return"inputResolution.width has a value of "+e.width+" which is invalid; it must be a number"})),a.assert("number"==typeof e.height,(function(){return"inputResolution.height has a value of "+e.height+" which is invalid; it must be a number"})))}function Xg(e,t){return qg(e),"object"==typeof e?[jg(e.height,t),jg(e.width,t)]:[jg(e,t),jg(e,t)]}var Kg=[8,16,32];function Qg(e,t){return(e-1)%t==0}function Yg(e){return e instanceof Rn?[e.shape[0],e.shape[1]]:[e.height,e.width]}function Jg(e,t){var r=t[0],a=t[1],n=Yg(e),i=n[0],o=n[1],s=a/r,u=[0,0,0,0],h=u[0],c=u[1],f=u[2],d=u[3];return o/i<s?(h=0,c=0,f=Math.round(.5*(s*i-o)),d=Math.round(.5*(s*i-o))):(h=Math.round(.5*(1/s*o-i)),c=Math.round(.5*(1/s*o-i)),f=0,d=0),{resized:ys((function(){var t=function(e){return e instanceof Rn?e:l.fromPixels(e)}(e);return(t=Fh(t,[[h,c],[f,d],[0,0]])).resizeBilinear([r,a])})),padding:{top:h,left:f,right:d,bottom:c}}}function Zg(e,t,r,a,n){var i=t[1],o=function(e,t,r,a,n){return void 0===a&&(a=0),void 0===n&&(n=0),1===r&&1===t&&0===a&&0===n?e:e.map((function(e){return function(e,t,r,a,n){return void 0===a&&(a=0),void 0===n&&(n=0),{score:e.score,keypoints:e.keypoints.map((function(e){var i=e.position;return{score:e.score,part:e.part,position:{x:i.x*r+n,y:i.y*t+a}}}))}}(e,t,r,a,n)}))}(e,(t[0]+a.top+a.bottom)/r[0],(i+a.left+a.right)/r[1],-a.top,-a.left);return n?function(e,t){return t<=0?e:e.map((function(e){return function(e,t){return{score:e.score,keypoints:e.keypoints.map((function(e){var r=e.position;return{score:e.score,part:e.part,position:{x:t-1-r.x,y:r.y}}}))}}(e,t)}))}(o,i):o}var $g,e_={architecture:"MobileNetV1",outputStride:16,multiplier:.75,inputResolution:257},t_=["MobileNetV1","ResNet50"],r_={MobileNetV1:[8,16,32],ResNet50:[32,16]},a_={MobileNetV1:[.5,.75,1],ResNet50:[1]},n_=[1,2,4],i_={flipHorizontal:!1},o_={flipHorizontal:!1,maxDetections:5,scoreThreshold:.5,nmsRadius:20},s_=function(){function e(e,t){(function(e){a.assert("number"==typeof e,(function(){return"outputStride is not a number"})),a.assert(Kg.indexOf(e)>=0,(function(){return"outputStride of "+e+" is invalid. It must be either 8, 16, or 32"}))})(e.outputStride),function(e,t){a.assert("number"==typeof e[0]&&"number"==typeof e[1],(function(){return"both resolution values must be a number but had values "+e})),a.assert(Qg(e[0],t),(function(){return"height of "+e[0]+" is invalid for output stride "+t+"."})),a.assert(Qg(e[1],t),(function(){return"width of "+e[1]+" is invalid for output stride "+t+"."}))}(t,e.outputStride),this.baseModel=e,this.inputResolution=t}return e.prototype.estimateMultiplePoses=function(e,t){return void 0===t&&(t=o_),vg(this,void 0,void 0,(function(){var r,a,n,i,o,s,l,u,h,c,f,d,v,p,g,_,m;return pg(this,(function(y){switch(y.label){case 0:return r=dg({},o_,t),function(e){var t=e.maxDetections,r=e.scoreThreshold,a=e.nmsRadius;if(t<=0)throw new Error("Invalid maxDetections "+t+". Should be > 0");if(r<0||r>1)throw new Error("Invalid scoreThreshold "+r+". Should be in range [0.0, 1.0]");if(a<=0)throw new Error("Invalid nmsRadius "+a+".")}(t),a=this.baseModel.outputStride,n=this.inputResolution,i=Yg(e),o=i[0],s=i[1],l=Jg(e,n),h=l.padding,c=this.baseModel.predict(u=l.resized),[4,Hg([f=c.heatmapScores,d=c.offsets,v=c.displacementFwd,p=c.displacementBwd])];case 1:return[4,Lg((g=y.sent())[0],g[1],g[2],g[3],a,r.maxDetections,r.scoreThreshold,r.nmsRadius)];case 2:return _=y.sent(),m=Zg(_,[o,s],n,h,r.flipHorizontal),f.dispose(),d.dispose(),v.dispose(),p.dispose(),u.dispose(),[2,m]}}))}))},e.prototype.estimateSinglePose=function(e,t){return void 0===t&&(t=i_),vg(this,void 0,void 0,(function(){var r,a,n,i,o,s,l,u,h,c,f,d,v,p,g,_;return pg(this,(function(m){switch(m.label){case 0:return r=dg({},i_,t),a=this.baseModel.outputStride,n=this.inputResolution,i=Yg(e),o=i[0],s=i[1],l=Jg(e,n),h=l.padding,c=this.baseModel.predict(u=l.resized),v=c.displacementFwd,p=c.displacementBwd,[4,Pg(f=c.heatmapScores,d=c.offsets,a)];case 1:return g=m.sent(),_=Zg([g],[o,s],n,h,r.flipHorizontal),f.dispose(),d.dispose(),v.dispose(),p.dispose(),u.dispose(),[2,_[0]]}}))}))},e.prototype.estimatePoses=function(e,t){return vg(this,void 0,void 0,(function(){return pg(this,(function(r){switch(r.label){case 0:return"single-person"!==t.decodingMethod?[3,2]:[4,this.estimateSinglePose(e,t)];case 1:return[2,[r.sent()]];case 2:return[2,this.estimateMultiplePoses(e,t)]}}))}))},e.prototype.dispose=function(){this.baseModel.dispose()},e}();function l_(e){return vg(this,void 0,void 0,(function(){var t,r,a,n,i,o,s;return pg(this,(function(l){switch(l.label){case 0:if(t=e.outputStride,r=e.quantBytes,a=e.multiplier,null==m)throw new Error("Cannot find TensorFlow.js. If you are using a <script> tag, please also include @tensorflow/tfjs on the page before using this\n        model.");return n=function(e,t,r){var a={1:"100",.75:"075",.5:"050"},n="model-stride"+e+".json";return 4===r?Vg+"float/"+a[t]+"/"+n:Vg+"quant"+r+"/"+a[t]+"/"+n}(t,a,r),[4,ug(e.modelUrl||n)];case 1:return i=l.sent(),o=new _g(i,t),s=Xg(e.inputResolution,o.outputStride),[2,new s_(o,s)]}}))}))}function u_(e){return vg(this,void 0,void 0,(function(){var t,r,a,n,i,o;return pg(this,(function(s){switch(s.label){case 0:if(t=e.outputStride,r=e.quantBytes,null==m)throw new Error("Cannot find TensorFlow.js. If you are using a <script> tag, please also include @tensorflow/tfjs on the page before using this\n        model.");return a=function(e,t){var r="model-stride"+e+".json";return 4===t?Ug+"float/"+r:Ug+"quant"+t+"/"+r}(t,r),[4,ug(e.modelUrl||a)];case 1:return n=s.sent(),i=new Gg(n,t),o=Xg(e.inputResolution,i.outputStride),[2,new s_(i,o)]}}))}))}function h_(){return null==$g&&($g=Ns().epsilon()),$g}var c_=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;return _classCallCheck(this,r),a=t.call(this,e),Object.setPrototypeOf(_assertThisInitialized(a),r.prototype),a}return r}(_wrapNativeSuper(Error)),f_=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;return _classCallCheck(this,r),a=t.call(this,e),Object.setPrototypeOf(_assertThisInitialized(a),r.prototype),a}return r}(_wrapNativeSuper(Error)),d_=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;return _classCallCheck(this,r),a=t.call(this,e),Object.setPrototypeOf(_assertThisInitialized(a),r.prototype),a}return r}(_wrapNativeSuper(Error)),v_=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;return _classCallCheck(this,r),a=t.call(this,e),Object.setPrototypeOf(_assertThisInitialized(a),r.prototype),a}return r}(_wrapNativeSuper(Error)),p_=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;return _classCallCheck(this,r),a=t.call(this,e),Object.setPrototypeOf(_assertThisInitialized(a),r.prototype),a}return r}(_wrapNativeSuper(Error));function g_(e,t){if(Array.isArray(e)){for(var r=[],a=0;a<t;a++)r=r.concat(e);return r}var n=new Array(t);return n.fill(e),n}function __(e,t){if(!e)throw new p_(t)}function m_(e,t){var r,a=0,n=_createForOfIteratorHelper(e);try{for(n.s();!(r=n.n()).done;){r.value===t&&a++}}catch(hE){n.e(hE)}finally{n.f()}return a}function y_(e){return 1===e.length?e[0]:e}function b_(e){return Array.isArray(e)?e:[e]}function x_(e){var t=e.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==t[0]?t:"private"+t}function k_(e){return e.length<=1||-1===e.indexOf("_")?e:e.replace(/[_]+(\w|$)/g,(function(e,t){return t.toUpperCase()}))}Error;var w_={};function C_(e){if(null==e)return null;var t={};return t.className=e.getClassName(),t.config=e.getConfig(),t}function T_(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"object",n=arguments.length>4&&void 0!==arguments[4]&&arguments[4];if("string"==typeof e){var i,o=e;if(o in r)i=r[o];else if(o in w_)i=w_[o];else if(null==(i=t[o]))throw new d_("Unknown ".concat(a,": ").concat(e,". This may be due to one of the following reasons:\n1. The ").concat(a," is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ").concat(a," is defined in JavaScript, but is not registered properly with tf.serialization.registerClass()."));return i}var s,l,u,h=e;if(null==h.className||null==h.config)throw new d_(a+": Improper config format: "+JSON.stringify(h)+".\n'className' and 'config' must set.");var c,f,d=h.className;if(d in r?(c=(s=_slicedToArray(r[d],2))[0],f=s[1]):d in w_?(c=(l=_slicedToArray(w_.className,2))[0],f=l[1]):d in t&&(c=(u=_slicedToArray(t[d],2))[0],f=u[1]),null==c)throw new d_("Unknown ".concat(a,": ").concat(d,". This may be due to one of the following reasons:\n1. The ").concat(a," is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ").concat(a," is defined in JavaScript, but is not registered properly with tf.serialization.registerClass()."));if(null!=f){for(var v={},p=0,g=Object.keys(w_);p<g.length;p++){var _=g[p];v[_]=w_[_]}for(var m=0,y=Object.keys(r);m<y.length;m++){var b=y[m];v[b]=r[b]}h.config.customObjects=v;for(var x=Object.assign({},w_),k=0,w=Object.keys(r);k<w.length;k++){var C=w[k];w_[C]=r[C]}!function e(t){if(null!=t&&"object"==typeof t)if(Array.isArray(t))t.forEach((function(t){return e(t)}));else for(var r=0,a=Object.keys(t);r<a.length;r++){var n=a[r],i=t[n];null!=i&&"object"==typeof i&&(Array.isArray(i)||"ndarray"!==i.type||"number"!=typeof i.value?e(i):t[n]=i.value)}}(h.config);var T=f(c,h.config,r,n);return w_=Object.assign({},x),T}for(var S=Object.assign({},w_),I=0,A=Object.keys(r);I<A.length;I++){var R=A[I];w_[R]=r[R]}var N=new c(h.config);return w_=Object.assign({},S),N}function S_(e,t){return-1*function(e,t){return e<t?-1:e>t?1:0}(e,t)}function I_(e){if(null==e)return e;var t,r=[],a=_createForOfIteratorHelper(e);try{for(a.s();!(t=a.n()).done;){var n=t.value;-1===r.indexOf(n)&&r.push(n)}}catch(hE){a.e(hE)}finally{a.f()}return r}function A_(e){if(null==e)throw new d_("Invalid value in obj: "+JSON.stringify(e));for(var t in e)if(e.hasOwnProperty(t))return!1;return!0}function R_(e,t,r){if(null!=r&&e.indexOf(r)<0)throw new d_("".concat(r," is not a valid ").concat(t,".  Valid values are ").concat(e," or null/undefined."))}function N_(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1/0;return __(r>=0),__(a>=r),Array.isArray(e)&&e.length>=r&&e.length<=a&&e.every((function(e){return typeof e===t}))}function E_(e,t){Array.isArray(e)?(a.assert(e.length>0,(function(){return t+" is unexpectedly an empty array."})),e.forEach((function(e,r){return E_(e,"element ".concat(r+1," of ").concat(t))}))):a.assert(Number.isInteger(e)&&e>0,(function(){return"Expected ".concat(t," to be a positive integer, but got ")+function e(t){return null===t?"null":Array.isArray(t)?"["+t.map((function(t){return e(t)})).join(",")+"]":"string"==typeof t?'"'.concat(t,'"'):""+t}(e)+"."}))}function F_(e){return"relu"===e?"relu":"linear"===e?"linear":"elu"===e?"elu":null}function M_(e,t){return ys((function(){return Ls(ih(Os(e,e),t,!0))}))}var D_=function(e){_inherits(r,e);var t=_createSuper(r);function r(){return _classCallCheck(this,r),t.apply(this,arguments)}return _createClass(r,[{key:"getConfig",value:function(){return{}}}]),r}(f.Serializable),O_=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;return _classCallCheck(this,r),(a=t.call(this)).defaultMaxValue=2,a.defaultAxis=0,a.maxValue=null!=e.maxValue?e.maxValue:a.defaultMaxValue,a.axis=null!=e.axis?e.axis:a.defaultAxis,a}return _createClass(r,[{key:"apply",value:function(e){var t=this;return ys((function(){var r=M_(e,t.axis),a=iu(r,0,t.maxValue);return Os(e,Ds(a,Fs(h_(),r)))}))}},{key:"getConfig",value:function(){return{maxValue:this.maxValue,axis:this.axis}}}]),r}(D_);O_.className="MaxNorm",f.registerClass(O_);var L_=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;return _classCallCheck(this,r),(a=t.call(this)).defaultAxis=0,a.axis=null!=e.axis?e.axis:a.defaultAxis,a}return _createClass(r,[{key:"apply",value:function(e){var t=this;return ys((function(){return Ds(e,Fs(h_(),M_(e,t.axis)))}))}},{key:"getConfig",value:function(){return{axis:this.axis}}}]),r}(D_);L_.className="UnitNorm",f.registerClass(L_);var z_=function(e){_inherits(r,e);var t=_createSuper(r);function r(){return _classCallCheck(this,r),t.apply(this,arguments)}return _createClass(r,[{key:"apply",value:function(e){return Qh(e)}}]),r}(D_);z_.className="NonNeg",f.registerClass(z_);var B_=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;return _classCallCheck(this,r),(a=t.call(this)).defaultMinValue=0,a.defaultMaxValue=1,a.defaultRate=1,a.defaultAxis=0,a.minValue=null!=e.minValue?e.minValue:a.defaultMinValue,a.maxValue=null!=e.maxValue?e.maxValue:a.defaultMaxValue,a.rate=null!=e.rate?e.rate:a.defaultRate,a.axis=null!=e.axis?e.axis:a.defaultAxis,a}return _createClass(r,[{key:"apply",value:function(e){var t=this;return ys((function(){var r=M_(e,t.axis),a=Fs(Os(t.rate,iu(r,t.minValue,t.maxValue)),Os(1-t.rate,r));return Os(e,Ds(a,Fs(h_(),r)))}))}},{key:"getConfig",value:function(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}]),r}(D_);B_.className="MinMaxNorm",f.registerClass(B_);var P_={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function V_(e){return C_(e)}function U_(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return T_(e,f.SerializationMap.getMap().classNameMap,t,"constraint")}function W_(e){return null==e?null:"string"==typeof e?U_({className:e in P_?P_[e]:e,config:{}}):e instanceof D_?e:U_(e)}var G_=["channelsFirst","channelsLast"],H_=["valid","same","causal"],j_=["max","avg"],q_=["sum","mul","concat","ave"],X_=new Map;function K_(e){R_(G_,"DataFormat",e)}function Q_(e){R_(H_,"PaddingMode",e)}function Y_(e){R_(j_,"PoolMode",e)}var J_=[];function Z_(e,t){J_.push(e);try{var r=t();return J_.pop(),r}catch(a){throw J_.pop(),a}}function $_(e){if(!rm(e))throw new Error("Not a valid tensor name: '"+e+"'");return(0===J_.length?"":J_.join("/")+"/")+e}function em(e){if(!rm(e))throw new Error("Not a valid tensor name: '"+e+"'");X_.has(e)||X_.set(e,0);var t=X_.get(e);if(X_.set(e,X_.get(e)+1),t>0){var r="".concat(e,"_").concat(t);return X_.set(r,1),r}return e}var tm=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function rm(e){return!!e.match(tm)}function am(e,t,r){null==t&&(t=0),null==r&&(r=e.length);for(var a=1,n=t;n<r;++n)a*=e[n];return a}function nm(e){return qh(e=Array.isArray(e)?new Float32Array(e):e)}function im(e){return mh(nm(e)).dataSync()[0]}function om(e){return nh(nm(e)).dataSync()[0]}function sm(e,t){if(t<e)throw new d_("end (".concat(t,") < begin (").concat(e,") is forbidden."));for(var r=[],a=e;a<t;++a)r.push(a);return r}function lm(e,t){return e.asType(t)}function um(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1,r=e.shape.slice();return t<0&&(t=r.length+t+1),r.splice(t,0,1),e.reshape(r)}function hm(e,t,r){return ys((function(){switch(e.rank){case 1:return hc(e,t,r);case 2:return cc(e,[t,0],[r,e.shape[1]]);case 3:return fc(e,[t,0,0],[r,e.shape[1],e.shape[2]]);case 4:return dc(e,[t,0,0,0],[r,e.shape[1],e.shape[2],e.shape[3]]);case 5:return Kl(e,[t,0,0,0,0],[r,e.shape[1],e.shape[2],e.shape[3],e.shape[4]]);case 6:return Kl(e,[t,0,0,0,0,0],[r,e.shape[1],e.shape[2],e.shape[3],e.shape[4],e.shape[5]]);default:throw new d_("sliceAlongFirstAxis() received an unsupported tensor rank: "+e.rank)}}))}function cm(e,t,r){return ys((function(){switch(e.rank){case 1:return hc(e,t,r);case 2:return cc(e,[0,t],[e.shape[0],r]);case 3:return fc(e,[0,0,t],[e.shape[0],e.shape[1],r]);case 4:return dc(e,[0,0,0,t],[e.shape[0],e.shape[1],e.shape[2],r]);default:throw new d_("sliceAlongLastAxis() received an unsupported tensor rank: "+e.rank)}}))}function fm(e,t,r,a){return ys((function(){switch(e.rank){case 1:return hc(e,t,r);case 2:switch(a){case 1:return hm(e,t,r);case 2:return cm(e,t,r);default:throw new d_("The axis is not within the rank of the tensor "+a)}case 3:switch(a){case 1:return hm(e,t,r);case 2:return fc(e,[0,t,0],[e.shape[0],r,e.shape[2]]);case 3:return cm(e,t,r);default:throw new d_("The axis is not within the rank of the tensor "+a)}case 4:switch(a){case 1:return hm(e,t,r);case 2:return dc(e,[0,t,0,0],[e.shape[0],r,e.shape[2],e.shape[3]]);case 3:return dc(e,[0,0,t,0],[e.shape[0],e.shape[1],r,e.shape[3]]);case 4:return cm(e,t,r);default:throw new d_("The axis is not within the rank of the tensor "+a)}default:throw new d_("sliceAlongLastAxis() received an unsupported tensor rank: "+e.rank)}}))}function dm(e){var t,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1;return r<0&&(r=0!==(t=e[0].rank)?t:0),r===e[0].rank&&(r=-1),ql(e,r)}function vm(e,t){switch(e.rank){case 1:return ou([e,t]);case 2:return su([e,t],0);case 3:return lu([e,t],0);case 4:return uu([e,t],0);default:throw new d_("concatAlongFirstAxis() received an unsupported tensor rank: "+e.rank)}}function pm(e,t){if(Array.isArray(t)||(t=[t]),e.rank!==t.length)throw new d_("The length of input n (".concat(t.length,") does not match the number of dimensions in input x (").concat(e.rank,")"));return Mu(e,t)}function gm(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,a=arguments.length>3?arguments[3]:void 0,n=arguments.length>4?arguments[4]:void 0;return Hh(e,t,r,a,n)}function _m(e,t,r,a){if(e.rank<2||t.rank<2)throw new v_("dot requires both inputs to be rank >= 2 but got x shape = ".concat(e.shape," and y shape = ").concat(t.shape));if(t.rank>=3&&e.shape.slice(-1)[0]!==t.shape.slice(-2)[0])throw new v_("If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ".concat(e.shape," and  y shape = ")+t.shape);if(2===e.rank&&2===t.rank)return p.matMul({a:e,b:t,transposeA:!1,transposeB:!1,bias:a?bm(e.rank,a,"channelsLast"):null,activation:r});var n=e.shape.slice(),i=n.pop();e=e.reshape([-1,i]);var o=t.shape.slice(),s=o.pop(),l=o.pop(),u=[].concat(_toConsumableArray(o),[s]),h=Array.from({length:t.rank},(function(e,r){return 0===r?t.rank-2:r<=t.rank-2?r-1:r}));t=t.transpose(h).reshape([l,-1]);var c=[].concat(_toConsumableArray(n),_toConsumableArray(u));return p.matMul({a:e,b:t,transposeA:!1,transposeB:!1,bias:a?bm(e.rank,a,"channelsLast"):null,activation:r}).reshape(c)}function mm(e,t,r){return ys((function(){return t=Array.isArray(t)?qh(t,"int32"):t.toInt(),Uu(e,t,r)}))}function ym(e){return Os(e,e)}function bm(e,t,r){var a=t.shape;if(1!==t.rank&&t.rank!==e)throw new d_("Unexpected bias dimensions: "+t.rank+"; expected it to be 1 or "+e);if(5===e){if("channelsFirst"===r)return t.reshape(1===a.length?[1,a[0],1,1,1]:[1,a[3],a[0],a[1],a[2]]);if("channelsLast"===r)return t.reshape(1===a.length?[1,1,1,1,a[0]]:[1].concat(a))}else if(4===e){if("channelsFirst"===r)return t.reshape(1===a.length?[1,a[0],1,1]:[1,a[2],a[0],a[1]]);if("channelsLast"===r)return t.reshape(1===a.length?[1,1,1,a[0]]:[1].concat(a))}else if(3===e){if("channelsFirst"===r)return t.reshape(1===a.length?[1,a[0],1]:[1,a[1],a[0]]);if("channelsLast"===r)return t.reshape(1===a.length?[1,1,a[0]]:[1].concat(a))}else if(e<3)return t;throw new d_("Unsupported input rank by biasAdd: "+t.rank)}function xm(e,t,r){return ys((function(){return null==r&&(r="channelsLast"),K_(r),e.add(bm(e.rank,t,r))}))}function km(e,t,r,a){return ys((function(){return sf(e,t,r,a)}))}function wm(e,t){var r=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return r?e():t()}var Cm=["fanIn","fanOut","fanAvg"],Tm=["normal","uniform","truncatedNormal"],Sm=function(e){_inherits(r,e);var t=_createSuper(r);function r(){return _classCallCheck(this,r),t.apply(this,arguments)}return _createClass(r,[{key:"fromConfigUsesCustomObjects",value:function(){return!1}},{key:"getConfig",value:function(){return{}}}]),r}(f.Serializable),Im=function(e){_inherits(r,e);var t=_createSuper(r);function r(){return _classCallCheck(this,r),t.apply(this,arguments)}return _createClass(r,[{key:"apply",value:function(e,t){return ph(e,t)}}]),r}(Sm);Im.className="Zeros",f.registerClass(Im);var Am=function(e){_inherits(r,e);var t=_createSuper(r);function r(){return _classCallCheck(this,r),t.apply(this,arguments)}return _createClass(r,[{key:"apply",value:function(e,t){return gh(e,t)}}]),r}(Sm);Am.className="Ones",f.registerClass(Am);var Rm=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;if(_classCallCheck(this,r),a=t.call(this),"object"!=typeof e)throw new d_("Expected argument of type ConstantConfig but got "+e);if(void 0===e.value)throw new d_("config must have value set but got "+e);return a.value=e.value,_possibleConstructorReturn(a)}return _createClass(r,[{key:"apply",value:function(e,t){var r=this;return ys((function(){return Os(qs(r.value),gh(e,t))}))}},{key:"getConfig",value:function(){return{value:this.value}}}]),r}(Sm);Rm.className="Constant",f.registerClass(Rm);var Nm=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;return _classCallCheck(this,r),(a=t.call(this)).DEFAULT_MINVAL=-.05,a.DEFAULT_MAXVAL=.05,a.minval=e.minval||a.DEFAULT_MINVAL,a.maxval=e.maxval||a.DEFAULT_MAXVAL,a.seed=e.seed,a}return _createClass(r,[{key:"apply",value:function(e,t){return jh(e,this.minval,this.maxval,t)}},{key:"getConfig",value:function(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}]),r}(Sm);Nm.className="RandomUniform",f.registerClass(Nm);var Em=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;return _classCallCheck(this,r),(a=t.call(this)).DEFAULT_MEAN=0,a.DEFAULT_STDDEV=.05,a.mean=e.mean||a.DEFAULT_MEAN,a.stddev=e.stddev||a.DEFAULT_STDDEV,a.seed=e.seed,a}return _createClass(r,[{key:"apply",value:function(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new v_("randomNormal does not support dType ".concat(t,"."));return gm(e,this.mean,this.stddev,t,this.seed)}},{key:"getConfig",value:function(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}]),r}(Sm);Em.className="RandomNormal",f.registerClass(Em);var Fm=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;return _classCallCheck(this,r),(a=t.call(this)).DEFAULT_MEAN=0,a.DEFAULT_STDDEV=.05,a.mean=e.mean||a.DEFAULT_MEAN,a.stddev=e.stddev||a.DEFAULT_STDDEV,a.seed=e.seed,a}return _createClass(r,[{key:"apply",value:function(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new v_("truncatedNormal does not support dType ".concat(t,"."));return Fc(e,this.mean,this.stddev,t,this.seed)}},{key:"getConfig",value:function(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}]),r}(Sm);Fm.className="TruncatedNormal",f.registerClass(Fm);var Mm=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;return _classCallCheck(this,r),(a=t.call(this)).gain=null!=e.gain?e.gain:1,a}return _createClass(r,[{key:"apply",value:function(e,t){var r=this;return ys((function(){if(2!==e.length||e[0]!==e[1])throw new d_("Identity matrix initializer can only be used for 2D square matrices.");return Os(r.gain,Du(e[0]))}))}},{key:"getConfig",value:function(){return{gain:this.gain}}}]),r}(Sm);Mm.className="Identity",f.registerClass(Mm);var Dm=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;if(_classCallCheck(this,r),a=t.call(this),e.scale<0)throw new d_("scale must be a positive float. Got: "+e.scale);return a.scale=null==e.scale?1:e.scale,a.mode=null==e.mode?"fanIn":e.mode,R_(Cm,"FanMode",a.mode),a.distribution=null==e.distribution?"normal":e.distribution,R_(Tm,"Distribution",a.distribution),a.seed=e.seed,_possibleConstructorReturn(a)}return _createClass(r,[{key:"apply",value:function(e,t){var r=function(e){var t,r,a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"channelsLast";if(K_(a),2===e.length)t=e[0],r=e[1];else if(-1!==[3,4,5].indexOf(e.length)){if("channelsFirst"===a){var n=am(e,2);t=e[1]*n,r=e[0]*n}else if("channelsLast"===a){var i=am(e,0,e.length-2);t=e[e.length-2]*i,r=e[e.length-1]*i}}else{var o=am(e);t=Math.sqrt(o),r=Math.sqrt(o)}return[t,r]}(e),a=r[0],n=r[1],i=this.scale;if(i/="fanIn"===this.mode?Math.max(1,a):"fanOut"===this.mode?Math.max(1,n):Math.max(1,(a+n)/2),"normal"===this.distribution){var o=Math.sqrt(i);if("float32"!==(t=t||"float32")&&"int32"!==t)throw new v_("".concat(this.getClassName()," does not support dType ").concat(t,"."));return Fc(e,0,o,t,this.seed)}var s=Math.sqrt(3*i);return jh(e,-s,s,t)}},{key:"getConfig",value:function(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}]),r}(Sm);Dm.className="VarianceScaling",f.registerClass(Dm);var Om=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){return _classCallCheck(this,r),t.call(this,{scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}return _createClass(r,[{key:"getClassName",value:function(){return Dm.className}}]),r}(Dm);Om.className="GlorotUniform",f.registerClass(Om);var Lm=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){return _classCallCheck(this,r),t.call(this,{scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}return _createClass(r,[{key:"getClassName",value:function(){return Dm.className}}]),r}(Dm);Lm.className="GlorotNormal",f.registerClass(Lm);var zm=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){return _classCallCheck(this,r),t.call(this,{scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}return _createClass(r,[{key:"getClassName",value:function(){return Dm.className}}]),r}(Dm);zm.className="HeNormal",f.registerClass(zm);var Bm=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){return _classCallCheck(this,r),t.call(this,{scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}return _createClass(r,[{key:"getClassName",value:function(){return Dm.className}}]),r}(Dm);Bm.className="HeUniform",f.registerClass(Bm);var Pm=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){return _classCallCheck(this,r),t.call(this,{scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}return _createClass(r,[{key:"getClassName",value:function(){return Dm.className}}]),r}(Dm);Pm.className="LeCunNormal",f.registerClass(Pm);var Vm=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){return _classCallCheck(this,r),t.call(this,{scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}return _createClass(r,[{key:"getClassName",value:function(){return Dm.className}}]),r}(Dm);Vm.className="LeCunNormal",f.registerClass(Vm);var Um=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;if(_classCallCheck(this,r),(a=t.call(this)).DEFAULT_GAIN=1,a.gain=null==e.gain?a.DEFAULT_GAIN:e.gain,a.seed=e.seed,null!=a.seed)throw new v_("Random seed is not implemented for Orthogonal Initializer yet.");return _possibleConstructorReturn(a)}return _createClass(r,[{key:"apply",value:function(e,t){var r=this;return ys((function(){if(e.length<2)throw new v_("Shape must be at least 2D.");e[0]*e[1]>2e3&&console.warn("Orthogonal initializer is being called on a matrix with more than 2000 (".concat(e[0]*e[1],") elements: Slowness may result."));var t=gm(e[0]>e[1]?[e[1],e[0]]:e,0,1,"float32"),a=ud.gramSchmidt(t);return e[0]>e[1]&&(a=a.transpose()),Os(r.gain,a)}))}},{key:"getConfig",value:function(){return{gain:this.gain,seed:this.seed}}}]),r}(Sm);Um.className="Orthogonal",f.registerClass(Um);var Wm={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function Gm(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return T_(e,f.SerializationMap.getMap().classNameMap,t,"initializer")}function Hm(e){return C_(e)}function jm(e){if("string"==typeof e){var t=e in Wm?Wm[e]:e;if("GlorotNormal"===t)return new Lm;if("GlorotUniform"===t)return new Om;if("HeNormal"===t)return new zm;if("HeUniform"===t)return new Bm;if("LeCunNormal"===t)return new Pm;if("LeCunUniform"===t)return new Vm;var r={};return r.className=t,r.config={},Gm(r)}return e instanceof Sm?e:Gm(e)}var qm=0;function Xm(){return qm++}var Km={};function Qm(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return e in Km||(Km[e]=0),Km[e]+=1,e+Km[e].toString()}function Ym(e){return Array.isArray(e)&&Array.isArray(e[0])}function Jm(e){return 0===e.length?[]:Array.isArray(e[0])?e:[e]}function Zm(e){var t;if(Array.isArray(e)){if(1!==e.length)throw new d_("Expected Tensor length to be 1; got "+e.length);t=e[0]}else t=e;return t}function $m(e){if(Array.isArray(e)&&Array.isArray(e[0])){if(1===e.length)return(e=e)[0];throw new d_("Expected exactly 1 Shape; got "+e.length)}return e}function ey(e){var t,r=0,a=_createForOfIteratorHelper(e);try{for(a.s();!(t=a.n()).done;){var n=t.value;r+=0===n.shape.length?1:n.shape.reduce((function(e,t){return e*t}))}}catch(hE){a.e(hE)}finally{a.f()}return r}var ty=function(){function e(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"float32",a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"Variable",n=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null;_classCallCheck(this,e),this.dtype=null==r?"float32":r,this.shape=t.shape,this.id=Xm(),this.originalName=$_(a=null==a?"Variable":a),this.name=em(this.originalName),this.trainable_=n,this.constraint=i,this.val=Lc(t,this.trainable_,this.name,this.dtype)}return _createClass(e,[{key:"read",value:function(){return this.assertNotDisposed(),this.val}},{key:"write",value:function(e){return this.assertNotDisposed(),function(e,t){if(e.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(e.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,e),this.val.id!==e.id&&(this.val.assign(e),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}},{key:"dispose",value:function(){this.assertNotDisposed(),this.val.dispose()}},{key:"assertNotDisposed",value:function(){if(this.val.isDisposed)throw new Error("LayersVariable ".concat(this.name," is already disposed."))}},{key:"trainable",get:function(){return this.trainable_},set:function(e){this.trainable_=e,this.val.trainable=e}}]),e}();function ry(e){return e.map((function(e){return e.read()}))}function ay(e){e.forEach((function(e){e[0].write(e[1])}))}var ny,iy=function e(t){_classCallCheck(this,e),this.dtype=t.dtype,this.shape=t.shape,this.ndim=null!=t.shape?t.shape.length:t.ndim,this.maxNDim=t.maxNDim,this.minNDim=t.minNDim,this.axes=t.axes||{}},oy=function e(t,r,a,n,i,o,s){_classCallCheck(this,e),this.dtype=t,this.shape=r,this.sourceLayer=a,this.inputs=n,this.callArgs=i,this.outputTensorIndex=s,this.id=Xm(),null!=o&&(this.originalName=$_(o),this.name=em(this.originalName)),this.rank=r.length},sy=0,ly=function(){function e(t,r){_classCallCheck(this,e),this.callArgs=r,this.id=sy++,this.outboundLayer=t.outboundLayer,this.inboundLayers=t.inboundLayers,this.nodeIndices=t.nodeIndices,this.tensorIndices=t.tensorIndices,this.inputTensors=t.inputTensors,this.outputTensors=t.outputTensors,this.inputMasks=t.inputMasks,this.outputMasks=t.outputMasks,this.inputShapes=t.inputShapes,this.outputShapes=t.outputShapes;var a,n=_createForOfIteratorHelper(t.inboundLayers);try{for(n.s();!(a=n.n()).done;){var i=a.value;null!=i&&i.outboundNodes.push(this)}}catch(hE){n.e(hE)}finally{n.f()}t.outboundLayer.inboundNodes.push(this)}return _createClass(e,[{key:"getConfig",value:function(){var e,t=[],r=_createForOfIteratorHelper(this.inboundLayers);try{for(r.s();!(e=r.n()).done;){var a=e.value;t.push(null!=a?a.name:null)}}catch(hE){r.e(hE)}finally{r.f()}return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:t,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}]),e}(),uy=0,hy=function(e){_inherits(r,e);var t=_createSuper(r);function r(){var e,a=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};_classCallCheck(this,r),(e=t.call(this))._callHook=null,e._addedWeightNames=[],e._stateful=!1,e.id=uy++,e.activityRegularizer=null,e.inputSpec=null,e.supportsMasking=!1,e._trainableWeights=[],e._nonTrainableWeights=[],e._losses=[],e._updates=[],e._built=!1,e.inboundNodes=[],e.outboundNodes=[];var n=a.name;if(!n){var i=e.getClassName();n=x_(i)+"_"+Qm(i)}if(e.name=n,e.trainable_=null==a.trainable||a.trainable,null!=a.inputShape||null!=a.batchInputShape){var o;if(null!=a.batchInputShape)o=a.batchInputShape;else if(null!=a.inputShape){var s=null;null!=a.batchSize&&(s=a.batchSize),o=[s].concat(a.inputShape)}e.batchInputShape=o;var l=a.dtype;null==l&&(l=a.inputDType),null==l&&(l="float32"),e.dtype=l}return e.initialWeights=null!=a.weights?a.weights:null,e._refCount=null,e.fastWeightInitDuringBuild=!1,e}return _createClass(r,[{key:"getNodeAtIndex",value:function(e,t){if(0===this.inboundNodes.length)throw new f_("The layer has never been called and thus has no defined ".concat(t,"."));if(this.inboundNodes.length<=e)throw new d_("Asked to get ".concat(t," at node ").concat(e,", but the layer has only ").concat(this.inboundNodes.length," inbound nodes."));return this.inboundNodes[e]}},{key:"getInputAt",value:function(e){return y_(this.getNodeAtIndex(e,"input").inputTensors)}},{key:"getOutputAt",value:function(e){return y_(this.getNodeAtIndex(e,"output").outputTensors)}},{key:"calculateLosses",value:function(){return this.losses.map((function(e){return e()}))}},{key:"resetStates",value:function(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}},{key:"assertInputCompatibility",value:function(e){if(e=b_(e),null!=this.inputSpec&&0!==this.inputSpec.length){var t=b_(this.inputSpec);if(e.length!==t.length)throw new d_("Layer ".concat(this.name," expects ").concat(t.length," inputs, but it received ").concat(e.length," input tensors. Input received: ")+e);for(var r=0;r<e.length;r++){var a=e[r],n=t[r];if(null!=n){var i=a.rank;if(null!=n.ndim&&i!==n.ndim)throw new d_("Input ".concat(r," is incompatible with layer ").concat(this.name,": expected ndim=").concat(n.ndim,", found ndim=").concat(i));if(null!=n.maxNDim&&i>n.maxNDim)throw new d_("Input ".concat(r," is incompatible with layer ").concat(this.name,": expected max_ndim=").concat(n.maxNDim,", found ndim=").concat(i));if(null!=n.minNDim&&i<n.minNDim)throw new d_("Input ".concat(r," is incompatible with layer ").concat(this.name,": expected min_ndim=").concat(n.minNDim,", found ndim=").concat(i,"."));if(null!=n.dtype&&a.dtype!==n.dtype)throw new d_("Input ".concat(r," is incompatible with layer ").concat(this.name," : expected dtype=").concat(n.dtype,", found dtype=").concat(a.dtype,"."));if(n.axes){var o=a.shape;for(var s in n.axes){var l=Number(s),u=n.axes[s],h=l>=0?o[l]:o[o.length+l];if(null!=u&&-1===[u,null].indexOf(h))throw new d_("Input ".concat(r," is incompatible with layer ").concat(this.name,": expected axis ").concat(l," of input shape to have value ").concat(u," but got shape ").concat(o,"."))}}if(null!=n.shape)for(var c=0;c<n.shape.length;++c){var f=n.shape[c],d=a.shape[c];if(null!=f&&null!=d&&f!==d)throw new d_("Input ".concat(r," is incompatible with layer ").concat(this.name,": expected shape=").concat(n.shape,", found shape=").concat(a.shape,"."))}}}}}},{key:"call",value:function(e,t){return e}},{key:"invokeCallHook",value:function(e,t){null!=this._callHook&&this._callHook(e,t)}},{key:"setCallHook",value:function(e){this._callHook=e}},{key:"clearCallHook",value:function(){this._callHook=null}},{key:"apply",value:function(e,t){var r=this;t=t||{},this.assertNotDisposed();var a,n=b_(e),i=!0,o=_createForOfIteratorHelper(n);try{for(o.s();!(a=o.n()).done;){if(!(a.value instanceof oy)){i=!1;break}}}catch(hE){o.e(hE)}finally{o.f()}var s,l=!0,u=_createForOfIteratorHelper(n);try{for(u.s();!(s=u.n()).done;){if(s.value instanceof oy){l=!1;break}}}catch(hE){u.e(hE)}finally{u.f()}if(i===l)throw new d_("Arguments to apply() must be all SymbolicTensors or all Tensors");return Z_(this.name,(function(){if(!r.built){r.assertInputCompatibility(e);var a,i=[],o=_createForOfIteratorHelper(b_(e));try{for(o.s();!(a=o.n()).done;){var s=a.value;i.push(s.shape)}}catch(hE){o.e(hE)}finally{o.f()}r.build(y_(i)),r.built=!0,r.initialWeights&&r.setWeights(r.initialWeights),null===r._refCount&&l&&(r._refCount=1)}if(r.assertInputCompatibility(e),l){var u,h=r.call(e,t),c=[],f=_createForOfIteratorHelper(b_(h));try{for(f.s();!(u=f.n()).done;){var d=u.value;-1!==n.indexOf(d)&&(d=d.clone()),c.push(d)}}catch(hE){f.e(hE)}finally{f.f()}if(h=y_(c),null!=r.activityRegularizer)throw new v_("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return h}var v,p=function(e){var t,r=[],a=_createForOfIteratorHelper(e=b_(e));try{for(a.s();!(t=a.n()).done;){var n=t.value;r.push(n.shape)}}catch(hE){a.e(hE)}finally{a.f()}return y_(r)}(e),g=r.computeOutputShape(p),_="float32";if(r.warnOnIncompatibleInputShape(Array.isArray(e)?p[0]:p),v=null!=g&&g.length>0&&Array.isArray(g[0])?g.map((function(a,n){return new oy(_,a,r,b_(e),t,r.name,n)})):new oy(_,g,r,b_(e),t,r.name),r.addInboundNode(e,v,null,null,p,g,t),r._refCount++,null!=r.activityRegularizer)throw new v_("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return v}))}},{key:"warnOnIncompatibleInputShape",value:function(e){if(null!=this.batchInputShape)if(e.length!==this.batchInputShape.length)console.warn("The rank of the input tensor provided (shape: "+JSON.stringify(e)+") does not match that of the "+"batchInputShape (".concat(JSON.stringify(this.batchInputShape),") of the layer ")+this.name);else{var t=!1;this.batchInputShape.forEach((function(r,a){null!=r&&null!=e[a]&&e[a]!==r&&(t=!0)})),t&&console.warn("The shape of the input tensor (".concat(JSON.stringify(e),") does not match the expectation of layer ").concat(this.name,": ")+JSON.stringify(this.batchInputShape))}}},{key:"countParams",value:function(){if(!this.built)throw new f_("You tried to call countParams() on ".concat(this.name,", but the layer is not built yet. Build it first by calling build(batchInputShape)."));return ey(this.weights)}},{key:"build",value:function(e){this.built=!0}},{key:"getWeights",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return ry(e?this.trainableWeights:this.weights)}},{key:"setWeights",value:function(e){var t=this;ys((function(){var r=t.weights;if(r.length!==e.length)throw new d_('You called setWeights(weights) on layer "'.concat(t.name,'" with a weight list of length ').concat(e.length,", but the layer was expecting ").concat(r.length," weights. Provided weights: ").concat(e,"..."));if(0!==r.length){for(var n=[],i=ry(r),o=0;o<i.length;++o){var s=i[o],l=r[o],u=e[o];if(!a.arraysEqual(s.shape,u.shape))throw new d_("Layer weight shape ".concat(s.shape," not compatible with provided weight shape ")+u.shape);n.push([l,u])}ay(n)}}))}},{key:"addWeight",value:function(e,t,r,a,n,i,o){if(-1!==this._addedWeightNames.indexOf(e))throw new d_("Duplicate weight name ".concat(e," for layer ").concat(this.name));this._addedWeightNames.push(e),null==r&&(r="float32"),this.fastWeightInitDuringBuild&&(a=jm("zeros"));var s=a.apply(t,r),l=new ty(s,r,e,i,o);return s.dispose(),null!=n&&this.addLoss((function(){return n.apply(l.read())})),null==i&&(i=!0),i?this._trainableWeights.push(l):this._nonTrainableWeights.push(l),l}},{key:"setFastWeightInitDuringBuild",value:function(e){this.fastWeightInitDuringBuild=e}},{key:"addLoss",value:function(e){var t;null==e||Array.isArray(e)&&0===e.length||(e=b_(e),null!=this._losses&&(t=this.losses).push.apply(t,_toConsumableArray(e)))}},{key:"computeOutputShape",value:function(e){return e}},{key:"computeMask",value:function(e,t){var r=this;if(!this.supportsMasking){if(null!=t){if(!Array.isArray(t))throw new TypeError("Layer ".concat(this.name," does not support masking, but was passed an inputMask."));t.forEach((function(e){if(null!=e)throw new TypeError("Layer ".concat(r.name," does not support masking, but was passed an inputMask."))}))}return null}return t}},{key:"addInboundNode",value:function(e,t,r,a,n,i){var o=arguments.length>6&&void 0!==arguments[6]?arguments[6]:null,s=b_(e);t=b_(t),r=b_(r),a=b_(a),n=Jm(n),i=Jm(i);var l,u=[],h=[],c=[],f=_createForOfIteratorHelper(s);try{for(f.s();!(l=f.n()).done;){var d=l.value;u.push(d.sourceLayer),h.push(d.nodeIndex),c.push(d.tensorIndex)}}catch(hE){f.e(hE)}finally{f.f()}new ly({outboundLayer:this,inboundLayers:u,nodeIndices:h,tensorIndices:c,inputTensors:s,outputTensors:t,inputMasks:r,outputMasks:a,inputShapes:n,outputShapes:i},o);for(var v=0;v<t.length;v++)t[v].sourceLayer=this,t[v].nodeIndex=this.inboundNodes.length-1,t[v].tensorIndex=v}},{key:"getConfig",value:function(){var e={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(e.batchInputShape=this.batchInputShape),null!=this.dtype&&(e.dtype=this.dtype),e}},{key:"disposeWeights",value:function(){return this.weights.forEach((function(e){return e.dispose()})),this.weights.length}},{key:"assertNotDisposed",value:function(){if(0===this._refCount)throw new Error("Layer '".concat(this.name,"' is already disposed."))}},{key:"dispose",value:function(){if(!this.built)throw new Error("Cannot dispose Layer ".concat(this.name," because it has not been built yet."));if(null===this._refCount)throw new Error("Cannot dispose Layer ".concat(this.name," because it has not been used yet."));this.assertNotDisposed();var e=0;return 0==--this._refCount&&(e=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:e}}},{key:"input",get:function(){if(this.inboundNodes.length>1)throw new c_("Layer "+this.name+' has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use `getInputAt(nodeIndex)` instead.');if(0===this.inboundNodes.length)throw new c_("Layer "+this.name+" is not connected, no input to return.");return y_(this.getNodeAtIndex(0,"input").inputTensors)}},{key:"output",get:function(){if(0===this.inboundNodes.length)throw new c_("Layer "+this.name+" has no inbound nodes.");if(this.inboundNodes.length>1)throw new c_("Layer "+this.name+' has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use `getOutputAt(nodeIndex)` instead.');return y_(this.getNodeAtIndex(0,"output").outputTensors)}},{key:"losses",get:function(){return this._losses}},{key:"updates",get:function(){return this._updates}},{key:"built",get:function(){return this._built},set:function(e){this._built=e}},{key:"trainable",get:function(){return this.trainable_},set:function(e){this._trainableWeights.forEach((function(t){return t.trainable=e})),this.trainable_=e}},{key:"trainableWeights",get:function(){return this.trainable_?this._trainableWeights.filter((function(e){return e.trainable})):[]},set:function(e){this._trainableWeights=e}},{key:"nonTrainableWeights",get:function(){return this.trainable?this._trainableWeights.filter((function(e){return!e.trainable})).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)},set:function(e){this._nonTrainableWeights=e}},{key:"weights",get:function(){return this.trainableWeights.concat(this.nonTrainableWeights)}},{key:"stateful",get:function(){return this._stateful}},{key:"outputShape",get:function(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new c_("The layer ".concat(this.name," has never been called and thus has no defined output shape."));var e,t=[],r=_createForOfIteratorHelper(this.inboundNodes);try{for(r.s();!(e=r.n()).done;){var a=e.value,n=JSON.stringify(a.outputShapes);-1===t.indexOf(n)&&t.push(n)}}catch(hE){r.e(hE)}finally{r.f()}if(1===t.length){var i=this.inboundNodes[0].outputShapes;return Array.isArray(i)&&Array.isArray(i[0])&&1===i.length?i[0]:i}throw new c_("The layer ".concat(this.name,' has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.'))}}],[{key:"nodeKey",value:function(e,t){return e.name+"_ib-"+t.toString()}}]),r}(f.Serializable),cy=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;if(_classCallCheck(this,r),a=t.call(this,{dtype:e.dtype,name:null!=e.name?e.name:Qm("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),a.trainable=!1,a.built=!0,a.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new d_("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");var n=e.batchInputShape;if(null==n){if(null==e.inputShape)throw new d_("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");n=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new d_("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");var i=e.dtype||"float32";a.batchInputShape=n,a.dtype=i,a.inputSpec=[{shape:n}];var o=new oy(a.dtype,a.batchInputShape,_assertThisInitialized(a),[],{},a.name);return o.nodeIndex=0,o.tensorIndex=0,new ly({outboundLayer:_assertThisInitialized(a),inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[o],outputTensors:[o],inputMasks:[null],outputMasks:[null],inputShapes:[n],outputShapes:[n]}),_possibleConstructorReturn(a)}return _createClass(r,[{key:"apply",value:function(e,t){throw new d_("Cannot pass any input to an InputLayer's apply() method. InputLayer name: "+this.name)}},{key:"dispose",value:function(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}},{key:"getConfig",value:function(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}]),r}(hy);function fy(e){return dy.apply(this,arguments)}function dy(){return(dy=_asyncToGenerator(regeneratorRuntime.mark((function e(t){var r,a,n,i,o,s,l,u;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(null!=t){e.next=2;break}return e.abrupt("return");case 2:for(i in r=[],a=[],n=[],t)"number"!=typeof(o=t[i])&&(s=o,r.push(s.data()),a.push(i),n.push(s));if(!(r.length>0)){e.next=10;break}return e.next=7,Promise.all(r);case 7:for(l=e.sent,u=0;u<l.length;++u)t[a[u]]=l[u][0];bs(n);case 10:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function vy(e){if(null!=e)for(var t in e){var r=e[t];"number"!=typeof r&&r.dispose()}}cy.className="InputLayer",f.registerClass(cy),function(e){e[e.SILENT=0]="SILENT",e[e.VERBOSE=1]="VERBOSE"}(ny||(ny={}));var py=function(){function e(){_classCallCheck(this,e),this.validationData=null}var t,r,a,n,i,o;return _createClass(e,[{key:"setParams",value:function(e){this.params=e}},{key:"onEpochBegin",value:(o=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:case"end":return e.stop()}}),e)}))),function(e,t){return o.apply(this,arguments)})},{key:"onEpochEnd",value:(i=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:case"end":return e.stop()}}),e)}))),function(e,t){return i.apply(this,arguments)})},{key:"onBatchBegin",value:(n=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:case"end":return e.stop()}}),e)}))),function(e,t){return n.apply(this,arguments)})},{key:"onBatchEnd",value:(a=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:case"end":return e.stop()}}),e)}))),function(e,t){return a.apply(this,arguments)})},{key:"onTrainBegin",value:(r=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:case"end":return e.stop()}}),e)}))),function(e){return r.apply(this,arguments)})},{key:"onTrainEnd",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:case"end":return e.stop()}}),e)}))),function(e){return t.apply(this,arguments)})},{key:"setModel",value:function(e){}}]),e}(),gy=function(){function e(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:10;_classCallCheck(this,e),null==t&&(t=[]),this.callbacks=t,this.queueLength=r}var t,r,a,n,i,o;return _createClass(e,[{key:"append",value:function(e){this.callbacks.push(e)}},{key:"setParams",value:function(e){var t,r=_createForOfIteratorHelper(this.callbacks);try{for(r.s();!(t=r.n()).done;){t.value.setParams(e)}}catch(hE){r.e(hE)}finally{r.f()}}},{key:"setModel",value:function(e){var t,r=_createForOfIteratorHelper(this.callbacks);try{for(r.s();!(t=r.n()).done;){t.value.setModel(e)}}catch(hE){r.e(hE)}finally{r.f()}}},{key:"onEpochBegin",value:(o=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){var a,n,i;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:null==r&&(r={}),a=_createForOfIteratorHelper(this.callbacks),e.prev=2,a.s();case 4:if((n=a.n()).done){e.next=10;break}return i=n.value,e.next=8,i.onEpochBegin(t,r);case 8:e.next=4;break;case 10:e.next=15;break;case 12:e.prev=12,e.t0=e.catch(2),a.e(e.t0);case 15:return e.prev=15,a.f(),e.finish(15);case 18:case"end":return e.stop()}}),e,this,[[2,12,15,18]])}))),function(e,t){return o.apply(this,arguments)})},{key:"onEpochEnd",value:(i=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){var a,n,i;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:null==r&&(r={}),a=_createForOfIteratorHelper(this.callbacks),e.prev=2,a.s();case 4:if((n=a.n()).done){e.next=10;break}return i=n.value,e.next=8,i.onEpochEnd(t,r);case 8:e.next=4;break;case 10:e.next=15;break;case 12:e.prev=12,e.t0=e.catch(2),a.e(e.t0);case 15:return e.prev=15,a.f(),e.finish(15);case 18:case"end":return e.stop()}}),e,this,[[2,12,15,18]])}))),function(e,t){return i.apply(this,arguments)})},{key:"onBatchBegin",value:(n=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){var a,n,i;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:null==r&&(r={}),a=_createForOfIteratorHelper(this.callbacks),e.prev=2,a.s();case 4:if((n=a.n()).done){e.next=10;break}return i=n.value,e.next=8,i.onBatchBegin(t,r);case 8:e.next=4;break;case 10:e.next=15;break;case 12:e.prev=12,e.t0=e.catch(2),a.e(e.t0);case 15:return e.prev=15,a.f(),e.finish(15);case 18:case"end":return e.stop()}}),e,this,[[2,12,15,18]])}))),function(e,t){return n.apply(this,arguments)})},{key:"onBatchEnd",value:(a=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){var a,n,i;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:null==r&&(r={}),a=_createForOfIteratorHelper(this.callbacks),e.prev=2,a.s();case 4:if((n=a.n()).done){e.next=10;break}return i=n.value,e.next=8,i.onBatchEnd(t,r);case 8:e.next=4;break;case 10:e.next=15;break;case 12:e.prev=12,e.t0=e.catch(2),a.e(e.t0);case 15:return e.prev=15,a.f(),e.finish(15);case 18:case"end":return e.stop()}}),e,this,[[2,12,15,18]])}))),function(e,t){return a.apply(this,arguments)})},{key:"onTrainBegin",value:(r=_asyncToGenerator(regeneratorRuntime.mark((function e(t){var r,a,n;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:null==t&&(t={}),r=_createForOfIteratorHelper(this.callbacks),e.prev=2,r.s();case 4:if((a=r.n()).done){e.next=10;break}return n=a.value,e.next=8,n.onTrainBegin(t);case 8:e.next=4;break;case 10:e.next=15;break;case 12:e.prev=12,e.t0=e.catch(2),r.e(e.t0);case 15:return e.prev=15,r.f(),e.finish(15);case 18:case"end":return e.stop()}}),e,this,[[2,12,15,18]])}))),function(e){return r.apply(this,arguments)})},{key:"onTrainEnd",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(t){var r,a,n;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:null==t&&(t={}),r=_createForOfIteratorHelper(this.callbacks),e.prev=2,r.s();case 4:if((a=r.n()).done){e.next=10;break}return n=a.value,e.next=8,n.onTrainEnd(t);case 8:e.next=4;break;case 10:e.next=15;break;case 12:e.prev=12,e.t0=e.catch(2),r.e(e.t0);case 15:return e.prev=15,r.f(),e.finish(15);case 18:case"end":return e.stop()}}),e,this,[[2,12,15,18]])}))),function(e){return t.apply(this,arguments)})}]),e}(),_y=function(e){_inherits(i,e);var t,r,a,n=_createSuper(i);function i(){return _classCallCheck(this,i),n.call(this)}return _createClass(i,[{key:"onEpochBegin",value:(a=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:this.seen=0,this.totals={};case 1:case"end":return e.stop()}}),e,this)}))),function(e){return a.apply(this,arguments)})},{key:"onBatchEnd",value:(r=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){var a,n,i,o=this;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:for(i in null==r&&(r={}),a=null==r.size?0:r.size,this.seen+=a,n=function(e){var t=r[e];if("number"==typeof t)o.totals.hasOwnProperty(e)||(o.totals[e]=0),o.totals[e]=o.totals[e]+t*a;else{var n;e in o.totals?n=o.totals[e]:o.totals[e]=0;var i=ys((function(){return Fs(o.totals[e],Os(t,a))}));o.totals[e]=i,null!=n&&n.dispose()}},r)n(i);case 5:case"end":return e.stop()}}),e,this)}))),function(e,t){return r.apply(this,arguments)})},{key:"onEpochEnd",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){var a,n,i,o=this;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(null!=r){a=_createForOfIteratorHelper(this.params.metrics);try{for(i=function(){var e=n.value;null!=o.totals[e]&&("number"==typeof o.totals[e]?r[e]=o.totals[e]/o.seen:ys((function(){var t=Os(Ds(1,o.seen),o.totals[e]);r[e]=t,o.totals[e].dispose(),xs(r[e])})))},a.s();!(n=a.n()).done;)i()}catch(hE){a.e(hE)}finally{a.f()}}case 1:case"end":return e.stop()}}),e,this)}))),function(e,r){return t.apply(this,arguments)})}]),i}(py),my=function(e){_inherits(i,e);var t,r,a,n=_createSuper(i);function i(){return _classCallCheck(this,i),n.apply(this,arguments)}return _createClass(i,[{key:"onTrainBegin",value:(a=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:this.epoch=[],this.history={};case 1:case"end":return e.stop()}}),e,this)}))),function(e){return a.apply(this,arguments)})},{key:"onEpochEnd",value:(r=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){var a;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:for(a in null==r&&(r={}),this.epoch.push(t),r)null==this.history[a]&&(this.history[a]=[]),this.history[a].push(r[a]);case 2:case"end":return e.stop()}}),e,this)}))),function(e,t){return r.apply(this,arguments)})},{key:"syncData",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t,r,a,n,i,o,s,l;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:for(n in t=[],r=[],a=[],this.history)for(i=this.history[n],o=0;o<i.length;++o)"number"!=typeof i[o]&&(t.push(i[o].data()),r.push(n),a.push(o));return e.next=4,Promise.all(t);case 4:for(s=e.sent,l=0;l<s.length;++l)this.history[r[l]][a[l]].dispose(),this.history[r[l]][a[l]]=s[l][0];case 6:case"end":return e.stop()}}),e,this)}))),function(){return t.apply(this,arguments)})}]),i}(py),yy=function(e){_inherits(h,e);var t,r,n,i,o,s,l,u=_createSuper(h);function h(e,t){var r,n,i,o,s;if(_classCallCheck(this,h),(r=u.call(this)).currentEpoch=0,r.yieldEvery=t||"auto","auto"===r.yieldEvery&&(r.yieldEvery=125),"never"===r.yieldEvery&&null!=e.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");return a.isNumber(r.yieldEvery)&&(r.maybeWait=(n=r.maybeWait.bind(_assertThisInitialized(r)),i=r.yieldEvery,s=a.now(),function(){var e=a.now();return e-s<i||(s=e,o=n.apply(void 0,arguments)),o})),r.trainBegin=e.onTrainBegin,r.trainEnd=e.onTrainEnd,r.epochBegin=e.onEpochBegin,r.epochEnd=e.onEpochEnd,r.batchBegin=e.onBatchBegin,r.batchEnd=e.onBatchEnd,r.yield=e.onYield,_possibleConstructorReturn(r)}return _createClass(h,[{key:"maybeWait",value:(l=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r,a){var n;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n=[],e.t0=null!=this.yield,!e.t0){e.next=6;break}return e.next=5,fy(a);case 5:n.push(this.yield(t,r,a));case 6:return n.push(vd()),e.next=9,Promise.all(n);case 9:case"end":return e.stop()}}),e,this)}))),function(e,t,r){return l.apply(this,arguments)})},{key:"onEpochBegin",value:(s=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(this.currentEpoch=t,e.t0=null!=this.epochBegin,!e.t0){e.next=7;break}return e.next=5,fy(r);case 5:return e.next=7,this.epochBegin(t,r);case 7:case"end":return e.stop()}}),e,this)}))),function(e,t){return s.apply(this,arguments)})},{key:"onEpochEnd",value:(o=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){var a;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(a=[],e.t0=null!=this.epochEnd,!e.t0){e.next=6;break}return e.next=5,fy(r);case 5:a.push(this.epochEnd(t,r));case 6:return"epoch"===this.yieldEvery&&a.push(vd()),e.next=9,Promise.all(a);case 9:case"end":return e.stop()}}),e,this)}))),function(e,t){return o.apply(this,arguments)})},{key:"onBatchBegin",value:(i=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(e.t0=null!=this.batchBegin,!e.t0){e.next=6;break}return e.next=4,fy(r);case 4:return e.next=6,this.batchBegin(t,r);case 6:case"end":return e.stop()}}),e,this)}))),function(e,t){return i.apply(this,arguments)})},{key:"onBatchEnd",value:(n=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){var n;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n=[],e.t0=null!=this.batchEnd,!e.t0){e.next=6;break}return e.next=5,fy(r);case 5:n.push(this.batchEnd(t,r));case 6:return"batch"===this.yieldEvery?n.push(vd()):a.isNumber(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,t,r)),e.next=9,Promise.all(n);case 9:case"end":return e.stop()}}),e,this)}))),function(e,t){return n.apply(this,arguments)})},{key:"onTrainBegin",value:(r=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(e.t0=null!=this.trainBegin,!e.t0){e.next=6;break}return e.next=4,fy(t);case 4:return e.next=6,this.trainBegin(t);case 6:case"end":return e.stop()}}),e,this)}))),function(e){return r.apply(this,arguments)})},{key:"onTrainEnd",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(e.t0=null!=this.trainEnd,!e.t0){e.next=6;break}return e.next=4,fy(t);case 4:return e.next=6,this.trainEnd(t);case 6:case"end":return e.stop()}}),e,this)}))),function(e){return t.apply(this,arguments)})}]),h}(py);function by(e,t){return null==e&&(e={}),e instanceof py?[e]:Array.isArray(e)&&e[0]instanceof py?e:b_(e).map((function(e){return new yy(e,t)}))}var xy=function(){function e(){_classCallCheck(this,e)}return _createClass(e,null,[{key:"registerCallbackConstructor",value:function(t,r){a.assert(t>=0&&Number.isInteger(t),(function(){return"Verbosity level is expected to be an integer >= 0, but got "+t})),e.checkForDuplicate(r),null==e.constructors[t]&&(e.constructors[t]=[]),e.constructors[t].push(r)}},{key:"checkForDuplicate",value:function(t){for(var r in e.constructors)e.constructors[+r].forEach((function(e){if(e===t)throw new d_("Duplicate callback constructor.")}))}},{key:"clear",value:function(){e.constructors={}}},{key:"createCallbacks",value:function(t){var r=[];for(var a in e.constructors){var n=+a;t>=n&&r.push.apply(r,_toConsumableArray(e.constructors[n]))}return r.map((function(e){return new e}))}}]),e}();function ky(e,t,r,a,n,i,o,s,l){var u=new my,h=[new _y].concat(_toConsumableArray(xy.createCallbacks(t)));null!=e&&h.push.apply(h,_toConsumableArray(e)),h.push(u);var c=new gy(h);return c.setParams({epochs:r,initialEpoch:a,samples:n,steps:i,batchSize:o,verbose:t,doValidation:s,metrics:l}),{callbackList:c,history:u}}function wy(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return T_(e,f.SerializationMap.getMap().classNameMap,t,"layer",r)}function Cy(e,t){return ys((function(){"float32"!==e.dtype&&(e=e.asType("float32"));var r=ih(ym(e),t,!0),a=Qs(r.shape,h_()),n=Ls(nl(r,a));return Ds(e,n)}))}function Ty(e,t){return ys((function(){return _h(ym(Zs(t,e)),-1)}))}function Sy(e,t){return ys((function(){return _h(el(Zs(t,e)),-1)}))}function Iy(e,t){return ys((function(){var r=Zs(e,t),a=iu(el(e),h_(),Number.MAX_VALUE),n=el(Ds(r,a));return Os(100,_h(n,-1))}))}function Ay(e,t){var r=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return ys((function(){if(r)t=vc(t);else{var a=ih(t,t.shape.length-1,!0);t=Ds(t,a)}return t=iu(t,h_(),1-h_()),th(ih(Os(e.toFloat(),$u(t)),t.shape.length-1))}))}function Ry(e,t){var r=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return ys((function(){var a,n,i=Ou((a=e,n=[am(a.shape)],a.reshape(n))).toInt(),o=(t=iu(t,h_(),1-h_())).shape;return Ay(To(i,o[o.length-1]).reshape(o),t,r)}))}function Ny(e,t){return ys((function(){var r;return r=iu(t,h_(),1-h_()),r=$u(Ds(r,Zs(1,r))),_h(function(e,t){if(!a.arraysEqual(e.shape,t.shape))throw new d_("logits and labels must have the same shape, but got shapes ".concat(JSON.stringify(e.shape)," and ").concat(JSON.stringify(t.shape)));return ys((function(){var r=t.relu(),a=t.abs().neg();return r.sub(t.mul(e)).add(a.exp().log1p())}))}(e,r),-1)}))}function Ey(e,t){return ys((function(){var r=Cy(e,-1),a=Cy(t,-1),n=Os(r,a);return th(ih(n,-1))}))}xy.constructors={};var Fy={meanSquaredError:Ty,meanAbsoluteError:Sy,meanAbsolutePercentageError:Iy,meanSquaredLogarithmicError:function(e,t){return ys((function(){var r=iu(t,h_(),Number.MAX_VALUE),a=$u(Fs(1,r)),n=iu(e,h_(),Number.MAX_VALUE),i=$u(Fs(1,n));return _h(ym(Zs(a,i)),-1)}))},squaredHinge:function(e,t){return ys((function(){var r=nl(0,Zs(1,Os(e,t)));return _h(ym(r),-1)}))},hinge:function(e,t){return ys((function(){var r=nl(0,Zs(1,Os(e,t)));return _h(r,-1)}))},categoricalHinge:function(e,t){return ys((function(){var r=ih(Os(e,t),-1),a=nh(Os(Zs(1,e),t),-1);return nl(0,Fs(1,Zs(a,r)))}))},logcosh:function(e,t){return ys((function(){var r=Math.log(2),a=Zs(t,e),n=Zs(Fs(a,rh(Os(-2,a))),r);return _h(n,-1)}))},categoricalCrossentropy:Ay,sparseCategoricalCrossentropy:Ry,binaryCrossentropy:Ny,kullbackLeiblerDivergence:function(e,t){return ys((function(){var r=iu(e,h_(),1),a=iu(t,h_(),1);return ih(Os(e,$u(Ds(r,a))),-1)}))},poisson:function(e,t){return ys((function(){var r=$u(Fs(h_(),t));return _h(Zs(t,Os(e,r)),-1)}))},cosineProximity:Ey};function My(e){if("string"==typeof e){if(e in Fy)return Fy[e];var t="Unknown loss "+e;throw e.toLowerCase().includes("softmaxcrossentropy")&&(t="Unknown loss ".concat(e,'. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy')),new d_(t)}return e}function Dy(e,t){return ys((function(){var r=Os(.5,Ih(t)),a=lm(Wu(t,r),e.dtype);return _h(Cu(e,a),-1)}))}function Oy(e,t){return ys((function(){return lm(Cu(kl(e,-1),kl(t,-1)),"float32")}))}function Ly(e,t){return Ny(e,t)}function zy(e,t){return e.rank===t.rank&&(e=e.squeeze([e.rank-1])),(t=t.argMax(-1)).dtype!==e.dtype&&(t=t.asType(e.dtype)),Cu(e,t).asType("float32")}var By=Ay,Py=Ry,Vy={binaryAccuracy:Dy,categoricalAccuracy:Oy,precision:function(e,t){return ys((function(){var r=function(e,t){return ys((function(){return lh(e.equal(1),t.equal(1)).sum().cast("float32")}))}(e,t),a=function(e,t){return ys((function(){return lh(e.equal(0),t.equal(1)).sum().cast("float32")}))}(e,t),n=r.add(a);return Tu(Wu(n,0),r.div(n),0).cast("float32")}))},categoricalCrossentropy:By,sparseCategoricalCrossentropy:Py,mse:Ty,MSE:Ty,mae:Sy,MAE:Sy,mape:Iy,MAPE:Iy,cosine:Ey};function Uy(e){if("string"==typeof e&&e in Vy)return Vy[e];if("string"!=typeof e&&null!=e)return e;throw new d_("Unknown metric "+e)}function Wy(e){if(__(null!==e,"Unknown LossOrMetricFn "+e),"string"==typeof e)return e;for(var t,r=0,a=Object.keys(Fy);r<a.length;r++){var n=a[r];if(Fy[n]===e){t=n;break}}if(void 0!==t)return t;for(var i=0,o=Object.keys(Vy);i<o.length;i++){var s=o[i];if(Vy[s]===e){t=s;break}}return void 0!==t?t:e.name}function Gy(e,t){var r=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(null==e||"object"!=typeof e||Object.getPrototypeOf(e)!==Object.prototype||!function e(t){if(null===t)return!0;if("object"==typeof t){if(Object.getPrototypeOf(t)===Object.prototype){for(var r=0,a=Object.keys(t);r<a.length;r++){var n=a[r];if("string"!=typeof n)return!1;if(!e(t[n]))return!1}return!0}if(Array.isArray(t)){var i,o=_createForOfIteratorHelper(t);try{for(o.s();!(i=o.n()).done;){if(!e(i.value))return!1}}catch(hE){o.e(hE)}finally{o.f()}return!0}return!1}var s=typeof t;return"string"===s||"number"===s||"boolean"===s}(e))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(r){var a=JSON.stringify(e);a.length>1048576&&console.warn('User-defined metadata of model "'.concat(t,'" is too large in size (length=').concat(a.length," when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576."))}}function Hy(e,t){for(var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:console.log,a="",n=0;n<e.length;++n)n>0&&(a=a.slice(0,a.length-1)+" "),a=(a+=e[n]).slice(0,t[n]),a+=" ".repeat(t[n]-a.length);r(a)}function jy(e,t,r){var a;try{a=JSON.stringify(e.outputShape)}catch(hE){a="multiple"}Hy(["".concat(e.name," (").concat(e.getClassName(),")"),a,e.countParams().toString()],t,r)}function qy(e,t,r,a){var n;try{n=JSON.stringify(e.outputShape)}catch(hE){n="multiple"}var i,o=[],s=_createForOfIteratorHelper(e.inboundNodes);try{for(s.s();!(i=s.n()).done;){var l=i.value;if(!(null!=r&&r.length>0&&-1===r.indexOf(l)))for(var u=0;u<l.inboundLayers.length;++u)o.push("".concat(l.inboundLayers[u].name,"[").concat(l.nodeIndices[u],"][").concat(l.tensorIndices[u],"]"))}}catch(hE){s.e(hE)}finally{s.f()}var h=e.name,c=e.getClassName(),f=0===o.length?"":o[0];Hy(["".concat(h," (").concat(c,")"),n,e.countParams().toString(),f],t,a);for(var d=1;d<o.length;++d)Hy(["","","",o[d]],t,a)}function Xy(e,t,r){return("inboundNodes"===e||"outputLayers"===e||"inputLayers"===e)&&0===t&&"string"==typeof r}var Ky=function(){function e(t){if(_classCallCheck(this,e),this.id2Value={},this.id2Mask={},this.name2Id={},t instanceof e)for(var r in t.id2Value)this.id2Value[r]=t.id2Value[r],r in t.id2Mask&&(this.id2Mask[r]=t.id2Mask[r]);else{if(null==t)return;var a,n=_createForOfIteratorHelper(t);try{for(n.s();!(a=n.n()).done;){var i=a.value;this.add(i.key,i.value)}}catch(hE){n.e(hE)}finally{n.f()}}}return _createClass(e,[{key:"add",value:function(e,t,r){if(null!=this.id2Value[e.id])throw new d_("Duplicate key: name=".concat(e.name,", id=").concat(e.id));return this.id2Value[e.id]=function(e,t){if(null==e.dtype||e.dtype===t.dtype)return t;try{return $i(t,e.dtype)}catch(hE){throw new d_("The dtype of the feed (".concat(t.dtype,") can not be cast to the dtype of the key '").concat(e.name,"' (").concat(e.dtype,")."))}}(e,t),this.name2Id[e.name]=e.id,null!=r&&(this.id2Mask[e.id]=r),this}},{key:"addFeed",value:function(e){this.add(e.key,e.value)}},{key:"hasKey",value:function(e){return null!=this.id2Value[e.id]}},{key:"names",value:function(){return Object.keys(this.name2Id)}},{key:"getValue",value:function(e){if(e instanceof oy){if(null==this.id2Value[e.id])throw new d_("Nonexistent key: "+e.name);return this.id2Value[e.id]}var t=this.name2Id[e];if(null==t)throw new d_("Feed dict has no SymbolicTensor name: "+e);return this.id2Value[t]}},{key:"getMask",value:function(e){if(e instanceof oy){if(null==this.id2Value[e.id])throw new d_("Nonexistent key: "+e.name);return this.id2Mask[e.id]}var t=this.name2Id[e];if(null==t)throw new d_("Feed dict has no SymbolicTensor name: "+e);return this.id2Mask[t]}},{key:"disposeMasks",value:function(){null!=this.id2Mask&&bs(this.id2Mask)}}]),e}(),Qy={},Yy={};function Jy(e,t,r,n){var i,o=null!=r&&r.training,s=Array.isArray(e),l=s?e:[e],u=l.map((function(e){return e.name})),h=[],c=t.names(),f=_createForOfIteratorHelper(u);try{for(f.s();!(i=f.n()).done;){var d=i.value;-1!==c.indexOf(d)?h.push(t.getValue(d)):h.push(null)}}catch(hE){f.e(hE)}finally{f.f()}null!=n&&(n.maxNumTensors=-1/0,n.minNumTensors=1/0);var v,p,g=u.join(",")+"|"+t.names().join(",");if(null==Qy[g]){var _=function(e,t){a.assert(null!=e&&e.length>0,(function(){return"Expected at least one fetch, got none"}));var r=[],n={};if(1===e.length){var i=$y(e[0],t);r=i.sorted,n=i.recipientMap}else{var o,s=new Set,l=_createForOfIteratorHelper(e);try{for(l.s();!(o=l.n()).done;){var u,h=$y(o.value,t),c=h.sorted,f=h.recipientMap,d=_createForOfIteratorHelper(c);try{for(d.s();!(u=d.n()).done;){var v=u.value;s.has(v.name)||(r.push(v),s.add(v.name))}}catch(hE){d.e(hE)}finally{d.f()}var p=function(e){null==n[e]&&(n[e]=new Set),f[e].forEach((function(t){return n[e].add(t)}))};for(var g in f)p(g)}}catch(hE){l.e(hE)}finally{l.f()}}return{sorted:r,recipientCounts:Zy(n)}}(l,t);v=_.sorted,p=_.recipientCounts,Qy[g]=v,Yy[g]=p}v=Qy[g],p={},o||Object.assign(p,Yy[g]);for(var m=new Ky(t),y=0;y<v.length;++y){if(null!=n){var b=_s().numTensors;b>n.maxNumTensors&&(n.maxNumTensors=b),b<n.minNumTensors&&(n.minNumTensors=b)}var x=v[y],k=x.sourceLayer;if(!(k instanceof cy)){var w,C=[],T=[],S=[],I=!1,A=_createForOfIteratorHelper(x.inputs);try{for(A.s();!(w=A.n()).done;){var R=w.value,N=m.getValue(R),E=m.getMask(R);C.push(N),T.push(E),null!=E&&(I=!0),o||(p[R.name]--,0!==p[R.name]||t.hasKey(R)||-1!==u.indexOf(R.name)||N.isDisposed||!0===R.sourceLayer.stateful||S.push(N))}}catch(hE){A.e(hE)}finally{A.f()}I&&((r=r||{}).mask=T[0]);var F=b_(k.apply(C,r)),M=null;k.supportsMasking&&(M=k.computeMask(C,T));for(var D=eb(x),O=Array.isArray(D)?D:[D],L=0;L<O.length;++L){m.hasKey(O[L])||m.add(O[L],F[L],Array.isArray(M)?M[0]:M);var z=u.indexOf(O[L].name);-1!==z&&(h[z]=F[L])}o||bs(S)}}return m.disposeMasks(),s?h:h[0]}function Zy(e){var t={};for(var r in e)t[r]=e[r].size;return t}function $y(e,t){var r,a=new Set,n=[],i={},o=_createForOfIteratorHelper(t.names());try{for(o.s();!(r=o.n()).done;){var s=r.value;a.add(s)}}catch(hE){o.e(hE)}finally{o.f()}var l=[],u=[];for(l.push(e);l.length>0;){var h=l[l.length-1];if(a.has(h.name))l.pop();else{var c=u[u.length-1]===l.length-1;if(0===h.inputs.length||c)l.pop(),n.push(h),a.add(h.name),c&&u.pop();else{u.push(l.length-1);var f,d=_createForOfIteratorHelper(h.inputs);try{for(d.s();!(f=d.n()).done;){var v=f.value;null==i[v.name]&&(i[v.name]=new Set),i[v.name].add(h.name),a.has(v.name)||l.push(v)}}catch(hE){d.e(hE)}finally{d.f()}}}}return{sorted:n,recipientMap:i}}function eb(e){var t;if(1===e.sourceLayer.inboundNodes.length)t=e.sourceLayer.output;else{for(var r=null,a=0;a<e.sourceLayer.inboundNodes.length;++a){var n,i=_createForOfIteratorHelper(e.sourceLayer.inboundNodes[a].outputTensors);try{for(i.s();!(n=i.n()).done;){if(n.value.id===e.id){r=a;break}}}catch(hE){i.e(hE)}finally{i.f()}}t=e.sourceLayer.getOutputAt(r)}return t}function tb(e,t){return function(e,t,r){var a=t.length;if(null==e||Array.isArray(e)&&0===e.length)return t.map((function(e){return null}));if(1===a)return Array.isArray(e)&&1===e.length?e:"object"==typeof e&&t[0]in e?[e[t[0]]]:[e];if(Array.isArray(e)){if(e.length!==a)throw new Error("Provided classWeight is an array of ".concat(e.length," element(s), but the model has ").concat(a," outputs. Make sure a set of weights is provided for each model output."));return e}if("object"==typeof e&&Object.keys(e).length>0&&"object"==typeof e[Object.keys(e)[0]]){var n=[];return t.forEach((function(t){n.push(t in e?e[t]:null)})),n}throw new Error("The model has multiple (".concat(a,") outputs, so classWeight must be either an array with ").concat(a," elements or an object with ").concat(t," keys. Provided classWeight not understood: ").concat(JSON.stringify(e)))}(e,t)}function rb(e,t,r,a){return ab.apply(this,arguments)}function ab(){return(ab=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r,a,n){var i,o,s;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(null==r&&null==n){e.next=2;break}throw new Error("Support sampleWeight is not implemented yet");case 2:if(null==a){e.next=12;break}return i=ys((function(){if(1===t.shape.length)return t.clone();if(2===t.shape.length){if(t.shape[1]>1)return t.argMax(1);if(1===t.shape[1])return t.reshape([t.shape[0]]);throw new Error("Encountered unexpected last-dimension size (".concat(t.shape[1],") during handling of class weights. The size is expected to be >= 1."))}throw new Error("Unexpected rank of target (y) tensor (".concat(t.rank,") during handling of class weights. The rank is expected to be 1 or 2."))})),e.t0=Array,e.next=7,i.data();case 7:return e.t1=e.sent,o=e.t0.from.call(e.t0,e.t1),bs(i),s=[],e.abrupt("return",(o.forEach((function(e){if(null==a[e])throw new Error("classWeight must contain all classes in the training data. The class ".concat(e," exists in the data but not in classWeight"));s.push(a[e])})),qh(s,"float32")));case 12:return e.abrupt("return",null);case 13:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function nb(e,t){return Os(e,t)}function ib(e,t){var r,n;r=t.xs,n=t.ys,a.assert(null!=r&&null!=n,(function(){return"A Dataset iterator for fitDataset() is expected to generate objects of the form `{xs: xVal, ys: yVal}`, where the two values may be `tf.Tensor`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates "+t}));var i=ob("input",e.inputNames,r),o=ob("output",e.outputNames,n),s=i[0].shape[0];a.assert(i.length===e.inputs.length,(function(){return"LayersModel has ".concat(e.inputs.length," inputs, but the dataset provides ").concat(i.length," inputs.  (Expected input keys: ")+JSON.stringify(e.inputNames)+")"})),a.assert(o.length===e.outputs.length,(function(){return"LayersModel has ".concat(e.outputs.length," outputs, but the dataset provides ").concat(o.length," outputs.  (Expected output keys: ")+JSON.stringify(e.outputNames)+")"}));for(var l=function(t){a.assert(i[t].shape[0]===s,(function(){return"Batch size mismatch: input ".concat(e.inputNames[t]," has ").concat(i[t].shape[0],"; expected  ").concat(s," based on input ").concat(e.inputNames[0],".")}))},u=0;u<i.length;u++)l(u);for(var h=function(t){a.assert(o[t].shape[0]===s,(function(){return"Batch size mismatch: output ".concat(e.outputNames[t]," has ").concat(o[t].shape[0],"; expected  ").concat(s," based on input ").concat(e.inputNames[0],".")}))},c=0;c<o.length;c++)h(c);return{xs:i,ys:o}}function ob(e,t,r){if(r instanceof Rn)return[r];if(Array.isArray(r))return a.assert(r.length===t.length,(function(){return"Received an array of ".concat(r.length," Tensors, but expected ").concat(t.length," to match the ").concat(e," keys ").concat(t,".")})),r;var n,i=[],o=_createForOfIteratorHelper(t);try{for(o.s();!(n=o.n()).done;){var s=n.value;if(null==r[s])throw new d_("The feature data generated by the dataset lacks the required ".concat(e," key '").concat(s,"'."));i.push(r[s])}}catch(hE){o.e(hE)}finally{o.f()}return i}function sb(e){return"function"==typeof e.iterator}function lb(e){a.assert(e>0&&Number.isInteger(e),(function(){return"batchSize is required to be a positive integer, but got "+e}))}function ub(e,t,r){return null==e?[null]:Array.isArray(e)?e.map((function(e){return hm(e,t,r-t)})):hm(e,t,r-t)}function hb(e,t){return ys((function(){return null==e?null:Array.isArray(e)?e.map((function(e){return hb(e,t)})):mm(e,"int32"===t.dtype?t:t.toInt())}))}function cb(e,t){for(var r=[],a=0,n=null;a<e;)(n=a+t)>=e&&(n=e),r.push([a,n]),a=n;return r}function fb(e){var t=[];e instanceof Rn&&(e=[e]);for(var r=0;r<e.length;++r){var a=e[r];if(1===a.rank)t.push(um(a,1));else{if(0===a.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(a)}}return t}function db(e,t){if(null!=e){var r=[];if(t instanceof Rn)r.push(t.id);else if(Array.isArray(t))t.forEach((function(e){return r.push(e.id)}));else if(null!=t)for(var a in t)r.push(t[a].id);var n=[];if(e instanceof Rn)-1===r.indexOf(e.id)&&n.push(e);else if(Array.isArray(e))e.forEach((function(e){-1===r.indexOf(e.id)&&n.push(e)}));else if(null!=e)for(var i in e){var o=e[i];-1===r.indexOf(o.id)&&n.push(o)}n.forEach((function(e){e.isDisposed||e.dispose()}))}}function vb(e){return Array.isArray(e)}function pb(e){return!function(e){return e instanceof Rn}(e)&&!vb(e)}function gb(e,t,r){var a,n=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"";if(null==t||0===t.length){if(null!=e){var o=!1;if(vb(e)&&e.length>0)o=!0;else if(pb(e)){for(var s in e)if(e.hasOwnProperty(s)){o=!0;break}}else o=!0;if(o)throw new d_("Error when checking model ".concat(i," expected no data, but got ")+e)}return[]}if(null==e)return t.map((function(e){return null}));if(pb(e)){e=e,a=[];var l,u=_createForOfIteratorHelper(t);try{for(u.s();!(l=u.n()).done;){var h=l.value;if(null==e[h])throw new d_('No data provided for "'.concat(h,'". Need data for each key in: ')+t);a.push(e[h])}}catch(hE){u.e(hE)}finally{u.f()}}else if(vb(e)){if((e=e).length!==t.length)throw new d_("Error when checking model ".concat(i,": the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ").concat(t.length," Tensor(s), but instead got the following list of Tensor(s): ")+e);a=e}else{if(e=e,t.length>1)throw new d_("The model ".concat(i," expects ").concat(t.length," Tensor(s), but only received one Tensor. Found: Tensor with shape ")+e.shape);a=[e]}if(a=fb(a),null!=r)for(var c=0;c<t.length;++c)if(null!=r[c]){var f=a[c];if(f.shape.length!==r[c].length)throw new d_("Error when checking ".concat(i,": expected ").concat(t[c]," to have ").concat(r[c].length," dimension(s). but got array with shape ")+f.shape);for(var d=0;d<r[c].length;++d)if(0!==d||n){var v=f.shape[d],p=r[c][d];if(null!=p&&p>=0&&v!==p)throw new d_("Error when checking ".concat(i,": expected ").concat(t[c]," to have shape [").concat(r[c],"], but got array with shape [").concat(f.shape,"]."))}}return a}function _b(e,t,r){var a,n=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"";if(Array.isArray(e)){if(e.length!==t.length)throw new d_("Error when checking model ".concat(i,": the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ").concat(t.length," Tensor(s), but instead got ").concat(e.length," Tensors(s)."));a=e}else{if(t.length>1)throw new d_("The model expects ".concat(t.length," ").concat(i," Tensors, but only received one Tensor. Found: array with shape ")+JSON.stringify(e.shape)+".");a=[e]}if(null!=r)for(var o=0;o<t.length;++o)if(null!=r[o]){var s=a[o];if(s.shape.length!==r[o].length)throw new d_("Error when checking ".concat(i,": expected ").concat(t[o]," to have ").concat(r[o].length," dimension(s), but got array with shape ")+JSON.stringify(s.shape));for(var l=0;l<r[o].length;++l)if(0!==l||n){var u=s.shape[l],h=r[o][l];if(null!=h&&h!==u)throw new d_("Error when checking ".concat(i,": expected ").concat(t[o]," to have shape ").concat(JSON.stringify(r[o])," but got array with shape ").concat(JSON.stringify(s.shape),"."))}}}var mb=function(e){_inherits(h,e);var t,r,n,i,s,l,u=_createSuper(h);function h(e){var t;return _classCallCheck(this,h),(t=u.call(this,e)).isTraining=!1,t}return _createClass(h,[{key:"summary",value:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:console.log;if(!this.built)throw new d_("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");!function(e,t,r){var a,n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:console.log,i=function(e){var t=!0,r=[],a=[];for(var n in e.nodesByDepth)r.push(e.nodesByDepth[n]);for(var i=0,o=r;i<o.length;i++){var s=o[i];if(s.length>1||1===s.length&&s[0].inboundLayers.length>1){t=!1;break}a.push.apply(a,_toConsumableArray(s))}if(t){var l,u=_createForOfIteratorHelper(e.layers);try{for(u.s();!(l=u.n()).done;){var h,c=l.value,f=!1,d=_createForOfIteratorHelper(c.inboundNodes);try{for(d.s();!(h=d.n()).done;){var v=h.value;if(-1!==a.indexOf(v)){if(f){t=!1;break}f=!0}}}catch(hE){d.e(hE)}finally{d.f()}if(!t)break}}catch(hE){u.e(hE)}finally{u.f()}}return t}(e),o=["Layer (type)","Output shape","Param #"];if(i?(t=t||65,r=r||[.45,.85,1]):(t=t||98,r=r||[.33,.55,.67,1]),r[r.length-1]<=1&&(r=r.map((function(e){return Math.floor(t*e)}))),!i)for(var s in o.push("Receives inputs"),a=[],e.nodesByDepth){var l;(l=a).push.apply(l,_toConsumableArray(e.nodesByDepth[s]))}n("_".repeat(t)),Hy(o,r,n),n("=".repeat(t));for(var u=e.layers,h=0;h<u.length;++h)i?jy(u[h],r,n):qy(u[h],r,a,n),n((h===u.length-1?"=":"_").repeat(t));e.checkTrainableWeightsConsistency();var c=function(e){return ey(null!=e.collectedTrainableWeights?e.collectedTrainableWeights:e.trainableWeights)}(e),f=ey(e.nonTrainableWeights);n("Total params: "+(c+f)),n("Trainable params: "+c),n("Non-trainable params: "+f),n("_".repeat(t))}(this,e,t,r)}},{key:"compile",value:function(e){var t=this;if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=function(e){var t={Adagrad:function(){return fd.adagrad(.01)},Adadelta:function(){return fd.adadelta(1,.95,h_())},Adam:function(){return fd.adam(.001,.9,.999,h_())},Adamax:function(){return fd.adamax(.002,.9,.999,h_(),0)},RMSProp:function(){return fd.rmsprop(.001,.9,0,h_())},SGD:function(){return fd.sgd(.01)}};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,e in t)return t[e]();throw new d_("Unknown Optimizer "+e)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof Xs))throw new d_("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}var r=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new d_("When passing an Array as loss, it should have one entry per model output. The model has ".concat(this.outputs.length," output(s), but you passed loss=").concat(e.loss,"."));r=e.loss.map((function(e){return My(e)}))}else{var a=My(e.loss);this.outputs.forEach((function(e){r.push(a)}))}else{for(var n in e.loss=e.loss,e.loss)if(-1===this.outputNames.indexOf(n))throw new d_('Unknown entry in loss dictionary: "'.concat(n,'". Only expected the following keys: ')+this.outputNames);var i,o=_createForOfIteratorHelper(this.outputNames);try{for(o.s();!(i=o.n()).done;){var s=i.value;null==e.loss[s]&&console.warn('Output "'.concat(s,'" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ').concat(s," during training")),r.push(My(e.loss[s]))}}catch(hE){o.e(hE)}finally{o.f()}}this.lossFunctions=r,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(var l=0;l<this.outputs.length;++l){var u=this.internalOutputShapes[l];this.feedOutputNames.push(this.outputNames[l]),this.feedOutputShapes.push(u),this.feedLossFns.push(this.lossFunctions[l])}var h=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],Z_("loss",(function(){for(var e=0;e<t.outputs.length;++e)if(-1===h.indexOf(e)){var r=t.lossFunctions[e];t.outputs.length>1&&(t.metricsTensors.push([r,e]),t.metricsNames.push(t.outputNames[e]+"_loss"))}}));var c=function(e,t){if(null==e||Array.isArray(e)&&0===e.length)return t.map((function(e){return[]}));var r;if("string"==typeof e||"function"==typeof e)r=[e];else{if(!Array.isArray(e)&&"object"!=typeof e)throw new TypeError("Type of metrics argument not understood. Expected an string,function, Array, or Object, found: "+e);r=e}if(Array.isArray(r))return t.map((function(e){return r}));var a,n=[],i=_createForOfIteratorHelper(t);try{for(i.s();!(a=i.n()).done;){var o=a.value,s=r.hasOwnProperty(o)?r[o]:[];Array.isArray(s)||(s=[s]),n.push(s)}}catch(hE){i.e(hE)}finally{i.f()}return n}(e.metrics,this.outputNames),f=function(e,r,a){t.outputNames.length>1&&(r=t.outputNames[e]+"_"+r),t.metricsNames.push(r),t.metricsTensors.push([a,e])};Z_("metric",(function(){for(var e=function(e){-1===h.indexOf(e)&&function(r){var a,n,i,o,s=_createForOfIteratorHelper(r);try{for(s.s();!(o=s.n()).done;){var l=o.value;if("string"==typeof l&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(l)){var u=t.internalOutputShapes[e],h=void 0;1===u[u.length-1]||t.lossFunctions[e]===Ny?-1!==["accuracy","acc"].indexOf(l)?n=Dy:-1!==["crossentropy","ce"].indexOf(l)&&(n=Ly):t.lossFunctions[e]===Ry?-1!==["accuracy","acc"].indexOf(l)?n=zy:-1!==["crossentropy","ce"].indexOf(l)&&(n=Py):-1!==["accuracy","acc"].indexOf(l)?n=Oy:-1!==["crossentropy","ce"].indexOf(l)&&(n=By),-1!==["accuracy","acc"].indexOf(l)?h="acc":-1!==["crossentropy","ce"].indexOf(l)&&(h="ce"),i=n,a=""+h}else{var c=Uy(l);i=c,a=""+Wy(l)}var d=void 0;Z_(a,(function(){d=i})),f(e,a,d)}}catch(hE){s.e(hE)}finally{s.f()}}(c[e])},r=0;r<t.outputs.length;++r)e(r)})),this.collectedTrainableWeights=this.trainableWeights}},{key:"checkTrainableWeightsConsistency",value:function(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}},{key:"evaluate",value:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},a=null==r.batchSize?32:r.batchSize;lb(a);var n=this.standardizeUserDataXY(e,t,!0,a);try{var i=n[0].concat(n[1]);return this.makeTestFunction(),y_(this.testLoop(this.testFunction,i,a,r.verbose,r.steps))}finally{db(n[0],e),db(n[1],t)}}},{key:"evaluateDataset",value:(l=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",(this.makeTestFunction(),function(){var e=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r,n){var i,o,s,l,u,h,c,f,d;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(i=null!=(n=n||{}).batches,o=t.testFunction,s=[],!(n.verbose>0)){e.next=4;break}throw new v_("Verbose mode is not implemented yet.");case 4:if(a.assert(!i||n.batches>0&&Number.isInteger(n.batches),(function(){return"Test loop expects `batches` to be a positive integer, but received "+JSON.stringify(n.batches)})),"function"!=typeof r.next){e.next=9;break}e.t0=r,e.next=12;break;case 9:return e.next=11,r.iterator();case 11:e.t0=e.sent;case 12:l=e.t0,u=0,h=0,c=regeneratorRuntime.mark((function e(){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,l.next();case 2:if(r=e.sent,s=ys((function(){return r.value&&function(){var e=ib(t,r.value),a=e.xs,n=e.ys,i=a.concat(n),l=ys((function(){return o(i)}));if(bs(i),0===h)for(var c=0;c<l.length;++c)s.push(qs(0));for(var f=i[0].shape[0],d=function(e){var t=l[e],r=s[e];s[e]=ys((function(){return Fs(s[e],Os(f,t))})),h>0&&bs(r)},v=0;v<l.length;++v)d(v);bs(l),u+=f,++h}(),s})),!r.done){e.next=6;break}return i&&console.warn("Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least `batches` batches (in this case, ".concat(n.batches," batches). You may need to use the repeat() function when building your dataset.")),e.abrupt("return","break");case 6:case"end":return e.stop()}}),e)}));case 15:if(i&&!(h<n.batches)){e.next=22;break}return e.delegateYield(c(),"t1",17);case 17:if("break"!==e.t1){e.next=20;break}return e.abrupt("break",22);case 20:e.next=15;break;case 22:for(f=0;f<s.length;++f)d=s[f],s[f]=Ds(s[f],u),bs(d);return e.abrupt("return",y_(s));case 24:case"end":return e.stop()}}),e)})));return function(t,r,a){return e.apply(this,arguments)}}()(this,t,r)));case 1:case"end":return e.stop()}}),e,this)}))),function(e,t){return l.apply(this,arguments)})},{key:"checkNumSamples",value:function(e,t,r){var a,n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"steps";if(null!=r){if(a=null,null!=t)throw new d_("If ".concat(n," is set, batchSize must be null or undefined.Got batchSize = ")+t)}else{if(null==e)throw new d_("Either the input data should have a defined shape, or "+n+" shoud be specified.");a=Array.isArray(e)?e[0].shape[0]:e.shape[0]}return a}},{key:"execute",value:function(e,t){if(Array.isArray(t)&&0===t.length)throw new d_("`outputs` is an empty Array, which is not allowed.");var r=Array.isArray(t),a=this.retrieveSymbolicTensors(r?t:[t]),n=new Ky;if(e instanceof Rn&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new d_("The number of inputs provided (".concat(e.length,") does not match the number of inputs of this model (").concat(this.inputs.length,")."));for(var i=0;i<this.inputs.length;++i)n.add(this.inputs[i],e[i])}else{var o,s=_createForOfIteratorHelper(this.inputs);try{for(s.s();!(o=s.n()).done;){var l=o.value,u=e[l.name];if(null==u)throw new d_("No value is provided for the model's input "+l.name);n.add(l,u)}}catch(hE){s.e(hE)}finally{s.f()}}var h=Jy(a,n);return r?h:h[0]}},{key:"retrieveSymbolicTensors",value:function(e){var t,r=g_(null,e.length),a=e.length,n=_createForOfIteratorHelper(this.layers);try{for(n.s();!(t=n.n()).done;){for(var i=t.value,o=Array.isArray(i.output)?i.output:[i.output],s=o.map((function(e){return e.name})),l=0;l<e.length;++l){var u=s.indexOf(e[l]);if(-1!==u&&(r[l]=o[u],a--),0===a)break}if(0===a)break}}catch(hE){n.e(hE)}finally{n.f()}if(a>0){var h=[];throw r.forEach((function(t,r){null==t&&h.push(e[r])})),new d_("Cannot find SymbolicTensors for output name(s): "+JSON.stringify(h))}return r}},{key:"predictLoop",value:function(e){var t=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:32,a=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return ys((function(){var n=t.checkNumSamples(e);if(a)throw new v_("Verbose predictLoop() is not implemented yet.");for(var i=cb(n,r),o=t.outputs.map((function(e){return[]})),s=function(r){ys((function(){var a=ub(e,i[r][0],i[r][1]),n=[];if(Array.isArray(a))for(var o=0;o<a.length;++o)n.push({key:t.inputs[o],value:a[o]});else n.push({key:t.inputs[0],value:a});var s=new Ky(n);return Jy(t.outputs,s)})).forEach((function(e,t){return o[t].push(e)}))},l=0;l<i.length;++l)s(l);return y_(o.map((function(e){return ql(e,0)})))}))}},{key:"predict",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=fb(e);_b(r,this.inputNames,this.feedInputShapes,!1);try{var a=null==t.batchSize?32:t.batchSize;return lb(a),this.predictLoop(r,a)}finally{db(r,e)}}},{key:"predictOnBatch",value:function(e){_b(e,this.inputNames,this.feedInputShapes,!0);var t=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,t)}},{key:"standardizeUserDataXY",value:function(e,t){var r=arguments.length>3?arguments[3]:void 0;if(null==this.optimizer_)throw new f_("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");for(var n=[],i=0;i<this.feedOutputShapes.length;++i){var o=this.feedOutputShapes[i];n.push(this.feedLossFns[i]===Ry?o.slice(0,o.length-1).concat([1]):o)}if(function(e,t,r){var n=I_(e.map((function(e){return e.shape[0]})));n.sort();var i=I_(t.map((function(e){return e.shape[0]})));if(i.sort(),n.length>1)throw new d_("All input Tensors (x) should have the same number of samples. Got array shapes: "+JSON.stringify(e.map((function(e){return e.shape}))));if(i.length>1)throw new d_("All target Tensors (y) should have the same number of samples. Got array shapes: "+JSON.stringify(t.map((function(e){return e.shape}))));if(n.length>0&&i.length>0&&!a.arraysEqual(n,i))throw new d_("Input Tensors should have the same number of samples as target Tensors. Found ".concat(n[0]," input sample(s) and ").concat(i[0]," target sample(s)."))}(e=gb(e,this.feedInputNames,this.feedInputShapes,!1,"input"),t=gb(t,this.feedOutputNames,n,!1,"target")),function(e,t,r){for(var a=[Ty,Ny,Ay],n=0;n<e.length;++n){var i=e[n],o=t[n],s=r[n];if(null!=o){if(o===Ay&&1===i.shape[i.shape.length-1])throw new d_("You are passing a target array of shape ".concat(i.shape," while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes]."));if(-1!==a.indexOf(o))for(var l=i.shape.slice(1),u=s.slice(1),h=0;h<l.length;++h){var c=l[h],f=u[h];if(null!=f&&c!==f)throw new d_("A target Tensor with shape ".concat(i.shape," was passed for an output of shape ").concat(s,", while using a loss function that expects targets to have the same shape as the output."))}}}}(t,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=r&&r>0&&e[0].shape[0]%r!=0)throw new d_("In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ".concat(r,". Found: ").concat(e[0].shape[0]," sample(s)."));return[e,t]}},{key:"standardizeUserData",value:(s=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r,a,n){var i,o,s,l,u,h,c,f,d,v=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(i=!(v.length>4&&void 0!==v[4])||v[4],o=v.length>5?v[5]:void 0,s=this.standardizeUserDataXY(t,r,i,o),l=_slicedToArray(s,2),u=l[0],h=l[1],null==a){e.next=5;break}throw new Error("sample weight is not supported yet.");case 5:if(c=null,null==n){e.next=19;break}f=tb(n,this.outputNames),c=[],d=0;case 10:if(!(d<f.length)){e.next=19;break}return e.t0=c,e.next=14,rb(h[d],null,f[d]);case 14:e.t1=e.sent,e.t0.push.call(e.t0,e.t1);case 16:++d,e.next=10;break;case 19:return e.abrupt("return",[u,h,c]);case 20:case"end":return e.stop()}}),e,this)}))),function(e,t,r,a){return s.apply(this,arguments)})},{key:"testLoop",value:function(e,t,r){var a=this,n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,i=arguments.length>4?arguments[4]:void 0;return ys((function(){var o=a.checkNumSamples(t,r,i,"steps"),s=[];if(n>0)throw new v_("Verbose mode is not implemented yet.");if(null!=i)throw new v_("steps mode in testLoop() is not implemented yet");for(var l=cb(o,r),u=qh(sm(0,o)),h=0;h<l.length;++h){var c=l[h][0],f=l[h][1],d=hm(u,c,f-c),v=hb(t,d),p=e(v);if(0===h)for(var g=0;g<p.length;++g)s.push(qs(0));for(var _=0;_<p.length;++_)s[_]=Fs(s[_],Os(f-c,p[_]))}for(var m=0;m<s.length;++m)s[m]=Ds(s[m],o);return s}))}},{key:"getDedupedMetricsNames",value:function(){for(var e=this.metricsNames,t=[],r=0;r<e.length;++r){var a=e[r],n=a;m_(e,a)>1&&(n+="_"+m_(e.slice(0,r),a)),t.push(n)}return t}},{key:"makeTrainFunction",value:function(){var e=this;return function(t){var r=[],a=t.slice(0,e.inputs.length),n=t.slice(e.inputs.length,e.inputs.length+e.outputs.length),i=t.slice(e.inputs.length+e.outputs.length,e.inputs.length+2*e.outputs.length),o=[],s=e.collectedTrainableWeights.map((function(e){return e.read()}));return[e.optimizer_.minimize((function(){for(var t=[],s=0;s<e.inputs.length;++s)t.push({key:e.inputs[s],value:a[s]});for(var l,u=new Ky(t),h=Jy(e.outputs,u,{training:!0}),c=0;c<e.lossFunctions.length;++c){var f=(0,e.lossFunctions[c])(n[c],h[c]);null!=i[c]&&(f=nb(f,i[c]));var d=_h(f);r.push(d),l=0===c?f:Fs(l,f)}for(var v=0;v<e.metricsTensors.length;++v){var p=void 0;if(e.outputs.length>1&&v<e.outputs.length)p=r[v];else{var g=e.metricsTensors[v][1];p=_h((0,e.metricsTensors[v][0])(n[g],h[g]))}xs(p),o.push(p)}return l=_h(l),e.calculateLosses().forEach((function(e){l=Fs(l,e)})),l}),!0,s)].concat(o)}}},{key:"makeTestFunction",value:function(){var e=this;this.testFunction=function(t){return ys((function(){for(var r,a=[],n=t.slice(0,e.inputs.length),i=t.slice(e.inputs.length,e.inputs.length+e.outputs.length),o=[],s=0;s<e.inputs.length;++s)o.push({key:e.inputs[s],value:n[s]});for(var l=new Ky(o),u=Jy(e.outputs,l),h=0;h<e.lossFunctions.length;++h){var c=_h((0,e.lossFunctions[h])(i[h],u[h]));r=0===h?c:Fs(r,c),a.push(r)}for(var f=0;f<e.metricsTensors.length;++f){var d=e.metricsTensors[f][1],v=_h((0,e.metricsTensors[f][0])(i[d],u[d]));a.push(v)}return a}))}}},{key:"fit",value:(i=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){var n,i=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=i.length>2&&void 0!==i[2]?i[2]:{},e.abrupt("return",function(){var e=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r,n){var i,o,s,l,u,h,c,f,d,v,p,g,_,m,y,b,x,k,w,C,T,S,I,A=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(i=A.length>3&&void 0!==A[3]?A[3]:{},!t.isTraining){e.next=3;break}throw new Error("Cannot start training because another fit() call is ongoing.");case 3:return t.isTraining=!0,e.prev=4,lb(d=null==i.batchSize?32:i.batchSize),v=!1,e.next=10,t.standardizeUserData(r,n,i.sampleWeight,i.classWeight,v,d);case 10:if(p=e.sent,o=p[0],s=p[1],f=p[2],_=!1,!(null!=i.validationData&&i.validationData.length>0)){e.next=24;break}if(_=!0,2===i.validationData.length){e.next=16;break}throw 3===i.validationData.length?new v_("validationData including sample weights is not supported yet."):new d_("When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; "+i.validationData+" is invalid.");case 16:return l=i.validationData[0],u=i.validationData[1],m=!0,e.next=20,t.standardizeUserData(l,u,null,null,m,d);case 20:y=e.sent,h=y[0],c=y[1],g=h.concat(c),e.next=25;break;case 24:null!=i.validationSplit&&i.validationSplit>0&&i.validationSplit<1?(_=!0,b=Math.floor(o[0].shape[0]*(1-i.validationSplit)),x=o[0].shape[0],h=ub(o,b,x),o=ub(o,0,b),c=ub(s,b,x),s=ub(s,0,b),g=h.concat(c)):null!=i.validationSteps&&(_=!0);case 25:return k=o.concat(s).concat(f),t.checkTrainableWeightsConsistency(),w=t.makeTrainFunction(),C=t.getDedupedMetricsNames(),_?(t.makeTestFunction(),T=t.testFunction,S=C.slice().concat(C.map((function(e){return"val_"+e})))):(T=null,g=[],S=C.slice()),I=by(i.callbacks,i.yieldEvery),e.next=32,function(){var e=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r,n,i,o,s,l,u,h,c,f,d,v,p,g){var _,m,y,b,x,k,w,C;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return null==o&&(o=32),null==s&&(s=1),null==f&&(f=!0),null==v&&(v=0),_=!1,null!=h&&null!=c&&(_=!0),null!=(m=t.checkNumSamples(n,o,null,"steps_per_epoch"))&&(y=sm(0,m)),null==l&&(l=1),b=ky(u,l,s,v,m,null,o,_,d),x=b.callbackList,k=b.history,x.setModel(t),t.history=k,e.next=10,x.onTrainBegin();case 10:t.stopTraining_=!1,w=regeneratorRuntime.mark((function e(s){var l;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,x.onEpochBegin(s);case 2:return l={},e.delegateYield(regeneratorRuntime.mark((function e(){var s,u,d,v;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if("batch"!==f){e.next=2;break}throw new v_("batch shuffling is not implemneted yet");case 2:f&&a.shuffle(y),s=qh(y),u=cb(m,o),d=regeneratorRuntime.mark((function e(a){var f;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return f={},e.next=3,x.onBatchBegin(a,f);case 3:return ys((function(){var e=u[a][0],d=u[a][1],v=hm(s,e,d-e);f.batch=a,f.size=d-e;for(var p=hb(n,v),g=r(p),m=0;m<i.length;++m){var y=g[m];f[i[m]]=y,xs(y)}if(a===u.length-1&&_)for(var b=t.testLoop(h,c,o),x=0;x<i.length;++x){var k=i[x],w=b[x];xs(w),l["val_"+k]=w}})),e.next=6,x.onBatchEnd(a,f);case 6:if(vy(f),!t.stopTraining_){e.next=9;break}return e.abrupt("return","break");case 9:case"end":return e.stop()}}),e)})),v=0;case 6:if(!(v<u.length)){e.next=14;break}return e.delegateYield(d(v),"t0",8);case 8:if("break"!==e.t0){e.next=11;break}return e.abrupt("break",14);case 11:++v,e.next=6;break;case 14:s.dispose();case 15:case"end":return e.stop()}}),e)}))(),"t0",4);case 4:return e.next=6,x.onEpochEnd(s,l);case 6:if(!t.stopTraining_){e.next=8;break}return e.abrupt("return","break");case 8:case"end":return e.stop()}}),e)})),C=v;case 13:if(!(C<s)){e.next=21;break}return e.delegateYield(w(C),"t0",15);case 15:if("break"!==e.t0){e.next=18;break}return e.abrupt("break",21);case 18:++C,e.next=13;break;case 21:return e.next=23,x.onTrainEnd();case 23:return e.next=25,t.history.syncData();case 25:return e.abrupt("return",t.history);case 26:case"end":return e.stop()}}),e)})));return function(t,r,a,n,i,o,s,l,u,h,c,f,d,v,p){return e.apply(this,arguments)}}()(t,w,k,C,d,i.epochs,i.verbose,I,T,g,i.shuffle,S,i.initialEpoch);case 32:return e.abrupt("return",e.sent);case 33:return e.prev=33,t.isTraining=!1,db(o,r),db(s,n),db(h,l),db(c,u),null!=f&&bs(f),e.finish(33);case 36:case"end":return e.stop()}}),e,null,[[4,,33,36]])})));return function(t,r,a){return e.apply(this,arguments)}}()(this,t,r,n));case 2:case"end":return e.stop()}}),e,this)}))),function(e,t){return i.apply(this,arguments)})},{key:"fitDataset",value:(n=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",function(){var e=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r,n){var i,o,s,l,u,h,c,f,d,v,p,g,_,m,y,b,x,k,w,C,T,S,I,A,R,N,E,F,M,D,O,L;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(i=null!=n.batchesPerEpoch,a.assert(null!=t.optimizer,(function(){return"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."})),a.assert(null!=n,(function(){return"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."})),a.assert(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),(function(){return"For fitDataset(), config.epochs is expected to be a positive integer, but got "+n.epochs})),a.assert(!i||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),(function(){return"For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got "+n.batchesPerEpoch})),a.assert(null==n.validationSplit,(function(){return"`validationSplit` is not supported by `fitDataset()`. Use validationData instead."})),!t.isTraining){e.next=3;break}throw new Error("Cannot start training because another fit() call is ongoing.");case 3:return t.isTraining=!0,e.prev=4,(o=null!=n.validationData)&&(sb(n.validationData)?a.assert(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),(function(){return"For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got "+n.validationBatches})):(u=function(e){if(3===e.length)throw new v_("Validation with sample weights is not implemented yet.");return{xs:e[0],ys:e[1]}}(n.validationData),s=u.xs,l=u.ys)),h=t.makeTrainFunction(),c=t.getDedupedMetricsNames(),f=o?c.slice().concat(c.map((function(e){return"val_"+e}))):c.slice(),d=by(n.callbacks,n.yieldEvery),v=null==n.verbose?1:n.verbose,p=ky(d,v,n.epochs,null,null,function(e,t){var r=null;return null!=t.batchesPerEpoch?r=t.batchesPerEpoch:Number.isFinite(e.size)&&(r=e.size),r}(r,n),null,o,f),g=p.callbackList,_=p.history,g.setModel(t),t.history=_,e.next=14,g.onTrainBegin();case 14:return t.stopTraining_=!1,m=null==n.initialEpoch?0:n.initialEpoch,e.next=18,r.iterator();case 18:y=e.sent;case 19:if(!(m<n.epochs)){e.next=89;break}return b={},e.next=23,g.onEpochBegin(m);case 23:if(x=0,k=0,e.t0=i,e.t0){e.next=29;break}return e.next=28,r.iterator();case 28:y=e.sent;case 29:if(i&&!(x<n.batchesPerEpoch)){e.next=82;break}return e.next=32,y.next();case 32:if(w=e.sent,!i||!w.done){e.next=36;break}return console.warn("You provided `batchesPerEpoch` as "+n.batchesPerEpoch+", but your dataset iterator ran out of data after "+x+" batches; interrupting training. Make sure that your dataset can generate at least `batchesPerEpoch * epochs` batches (in this case, "+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset."),e.abrupt("break",82);case 36:if(null==w.value){e.next=63;break}return C=ib(t,w.value),T=C.xs,S=C.ys,(I={}).batch=k,I.size=T[0].shape[0],e.next=42,g.onBatchBegin(k,I);case 42:if(A=[],null==n.classWeight){e.next=55;break}R=tb(n.classWeight,t.outputNames),N=0;case 46:if(!(N<R.length)){e.next=55;break}return e.t1=A,e.next=50,rb(S[N],null,R[N]);case 50:e.t2=e.sent,e.t1.push.call(e.t1,e.t2);case 52:++N,e.next=46;break;case 55:for(E=T.concat(S).concat(A),F=h(E),bs(E),M=0;M<c.length;++M)D=F[M],I[c[M]]=D,xs(D);return e.next=60,g.onBatchEnd(k,I);case 60:vy(I),k++,x++;case 63:if(!(i?x>=n.batchesPerEpoch:w.done)){e.next=78;break}if(!o){e.next=77;break}if(O=void 0,!sb(n.validationData)){e.next=74;break}return e.t4=b_,e.next=70,t.evaluateDataset(n.validationData,{batches:n.validationBatches});case 70:e.t5=e.sent,e.t3=(0,e.t4)(e.t5),e.next=75;break;case 74:e.t3=b_(t.evaluate(s,l,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));case 75:for(O=e.t3,L=0;L<t.metricsNames.length;++L)b["val_"+t.metricsNames[L]]=O[L];case 77:return e.abrupt("break",82);case 78:if(!t.stopTraining_){e.next=80;break}return e.abrupt("break",82);case 80:e.next=29;break;case 82:return e.next=84,g.onEpochEnd(m,b);case 84:if(m++,!t.stopTraining_){e.next=87;break}return e.abrupt("break",89);case 87:e.next=19;break;case 89:return e.next=91,g.onTrainEnd();case 91:return e.next=93,t.history.syncData();case 93:return e.abrupt("return",t.history);case 94:return e.prev=94,t.isTraining=!1,e.finish(94);case 97:case"end":return e.stop()}}),e,null,[[4,,94,97]])})));return function(t,r,a){return e.apply(this,arguments)}}()(this,t,r));case 1:case"end":return e.stop()}}),e,this)}))),function(e,t){return n.apply(this,arguments)})},{key:"trainOnBatch",value:(r=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){var a,n,i,o,s,l,u,h,c;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.standardizeUserData(t,r);case 2:a=e.sent,n=a[0],i=a[1],o=this.makeTrainFunction()(n.concat(i)),s=[],l=_createForOfIteratorHelper(o),e.prev=8,l.s();case 10:if((u=l.n()).done){e.next=18;break}return h=u.value,e.next=14,h.data();case 14:c=e.sent,s.push(c[0]);case 16:e.next=10;break;case 18:e.next=23;break;case 20:e.prev=20,e.t0=e.catch(8),l.e(e.t0);case 23:return e.prev=23,l.f(),e.finish(23);case 26:return e.abrupt("return",(bs(o),y_(s)));case 27:case"end":return e.stop()}}),e,this,[[8,20,23,26]])}))),function(e,t){return r.apply(this,arguments)})},{key:"getNamedWeights",value:function(e){for(var t=[],r=null!=e&&e.trainableOnly,a=r?this.trainableWeights:this.weights,n=this.getWeights(r),i=0;i<a.length;++i)r&&!a[i].trainable||t.push({name:a[i].originalName,tensor:n[i]});return t}},{key:"dispose",value:function(){var e=_get(_getPrototypeOf(h.prototype),"dispose",this).call(this);if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){var t=_s().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=t-_s().numTensors}return e}},{key:"getLossIdentifiers",value:function(){var e;if("string"==typeof this.loss)e=x_(this.loss);else if(Array.isArray(this.loss)){var t,r=_createForOfIteratorHelper(this.loss);try{for(r.s();!(t=r.n()).done;){if("string"!=typeof t.value)throw new Error("Serialization of non-string loss is not supported.")}}catch(hE){r.e(hE)}finally{r.f()}e=this.loss.map((function(e){return x_(e)}))}else{var a=Object.keys(this.loss);e={};for(var n=this.loss,i=0,o=a;i<o.length;i++){var s=o[i];if("string"!=typeof n[s])throw new Error("Serialization of non-string loss is not supported.");e[s]=x_(n[s])}}return e}},{key:"getMetricIdentifiers",value:function(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[x_(Wy(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map((function(e){return x_(Wy(e))}));var e={};for(var t in this.metrics)e[t]=x_(Wy(this.metrics[t]));return e}},{key:"getTrainingConfig",value:function(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}},{key:"loadTrainingConfig",value:function(e){if(null!=e.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");var t,r,a=wy(function e(t,r){if(null===t)return null;if("string"==typeof t)return k_(t);if("number"==typeof t||"boolean"==typeof t)return t;if(t instanceof Array){for(var a=[],n=t.length,i=0;i<n;++i){var o=t[i];Xy(r,i,o)?a.push(o):a.push(e(o,r))}return a}for(var s={},l=0,u=Object.keys(t);l<u.length;l++){var h=u[l],c=t[h];if("name"===h&&"string"==typeof c)s[h]=c;else{var f=k_(h);s[f]=e(c,f)}}return s}(e.optimizer_config));if("string"==typeof e.loss)t=k_(e.loss);else if(Array.isArray(e.loss))t=e.loss.map((function(e){return k_(e)}));else if(null!=e.loss)for(var n in t={},e.loss)t[n]=k_(e.loss[n]);if(Array.isArray(e.metrics))r=e.metrics.map((function(e){return k_(e)}));else if(null!=e.metrics)for(var i in r={},e.metrics)r[i]=k_(e.metrics[i]);this.compile({loss:t,metrics:r,optimizer:a})}},{key:"save",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){var a,n,i,s,l,u,h,c;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if("string"!=typeof t){e.next=7;break}if(0!==(a=o.getSaveHandlers(t)).length){e.next=4;break}throw new d_("Cannot find any save handlers for URL '".concat(t,"'"));case 4:if(!(a.length>1)){e.next=6;break}throw new d_("Found more than one (".concat(a.length,") save handlers for URL '").concat(t,"'"));case 6:t=a[0];case 7:if(null!=t.save){e.next=9;break}throw new d_("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");case 9:return e.next=11,o.encodeWeights(this.getNamedWeights(r));case 11:if(n=e.sent,i={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:"TensorFlow.js tfjs-layers v2.7.0",convertedBy:null},null==r||!r.includeOptimizer||null==this.optimizer){e.next=27;break}return i.trainingConfig=this.getTrainingConfig(),l="optimizer",e.t0=o,e.next=19,this.optimizer.getWeights();case 19:return e.t1=e.sent,e.t2=l,e.next=23,e.t0.encodeWeights.call(e.t0,e.t1,e.t2);case 23:u=e.sent,h=u.data,c=u.specs,(s=n.specs).push.apply(s,_toConsumableArray(c)),n.data=o.concatenateArrayBuffers([n.data,h]);case 27:return e.abrupt("return",(null!=this.userDefinedMetadata&&(Gy(this.userDefinedMetadata,this.name,!0),i.userDefinedMetadata=this.userDefinedMetadata),i.weightData=n.data,i.weightSpecs=n.specs,t.save(i)));case 28:case"end":return e.stop()}}),e,this)}))),function(e,r){return t.apply(this,arguments)})},{key:"setUserDefinedMetadata",value:function(e){Gy(e,this.name),this.userDefinedMetadata=e}},{key:"getUserDefinedMetadata",value:function(){return this.userDefinedMetadata}},{key:"stopTraining",set:function(e){this.stopTraining_=e},get:function(){return this.stopTraining_}},{key:"optimizer",get:function(){return this.optimizer_},set:function(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}}]),h}(function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;if(_classCallCheck(this,r),(a=t.call(this,{})).containerNodes=new Set,a.name=e.name,null==a.name){var n=a.getClassName().toLowerCase();a.name=Qm(n)}if(a.supportsMasking=!1,a.trainable_=!0,a.inputs=Array.isArray(e.inputs)?e.inputs.slice():[e.inputs],a.outputs=Array.isArray(e.outputs)?e.outputs.slice():[e.outputs],I_(a.inputs).length!==a.inputs.length)throw new d_("The list of inputs passed to the model is redundant. All inputs should only appear once. Found: "+a.inputs.map((function(e){return e.name})));I_(a.outputs).length!==a.outputs.length&&console.warn("The list of outputs passed to the model is redundant. All outputs should only appear once. Found: "+a.outputs.map((function(e){return e.name}))),a.inputLayers=[],a.inputLayersNodeIndices=[],a.inputLayersTensorIndices=[],a.outputLayers=[],a.outputLayersNodeIndices=[],a.outputLayersTensorIndices=[],a.layers=[],a.internalContainerRefs=[];var i,o=_createForOfIteratorHelper(a.outputs);try{for(o.s();!(i=o.n()).done;){var s=i.value,l=s.nodeIndex,u=s.tensorIndex;a.outputLayers.push(s.sourceLayer),a.outputLayersNodeIndices.push(l),a.outputLayersTensorIndices.push(u)}}catch(hE){o.e(hE)}finally{o.f()}var h,c=_createForOfIteratorHelper(a.inputs);try{for(c.s();!(h=c.n()).done;){var f=h.value,d=f.sourceLayer,v=f.nodeIndex,p=f.tensorIndex;__(0===v,"input layer has >1 nodes"),__(0===p,"input layer has >1 tensors"),a.inputLayers.push(d),a.inputLayersNodeIndices.push(v),a.inputLayersTensorIndices.push(p)}}catch(hE){c.e(hE)}finally{c.f()}a.inputNames=[],a.outputNames=[],a.feedInputShapes=[],a.feedInputNames=[],a.feedOutputNames=[];for(var g=0;g<a.inputLayers.length;g++){var _=a.inputLayers[g];if(!(_ instanceof cy))throw new TypeError("Input layers to a LayersModel must be InputLayer objects. Received inputs: ".concat(e.inputs,". Input ").concat(g," (0-based) originates from layer type ").concat(_.getClassName(),"."));a.inputNames.push(_.name),a.feedInputShapes.push(_.batchInputShape),a.feedInputNames.push(_.name)}var m,y=_createForOfIteratorHelper(a.outputLayers);try{for(y.s();!(m=y.n()).done;){var b=m.value;a.outputNames.push(b.name)}}catch(hE){y.e(hE)}finally{y.f()}a.internalInputShapes=a.inputs.map((function(e){return e.shape})),a.internalOutputShapes=a.outputs.map((function(e){return e.shape}));var x,k={},w={},C={},T={},S={},I=[],A=function e(t,n,i,o,s,l){null!=o&&null!=s&&null!=l||(o=t.sourceLayer,s=t.nodeIndex,l=t.tensorIndex);var u=o.inboundNodes[s];if(-1!==i.indexOf(u))throw new f_("The tensor ".concat(t.name,' at layer "').concat(o.name,'" is part of a cycle.'));if(-1===n.indexOf(u)){a.containerNodes.add(r.nodeKey(o,s)),o.id in S||(S[o.id]=Object.keys(S).length),-1===i.indexOf(u)&&i.push(u);for(var h=u.inboundLayers.length,c=0;c<h;c++)e(u.inputTensors[c],n,i,u.inboundLayers[c],u.nodeIndices[c],u.tensorIndices[c]);for(n.push(u);i.indexOf(u)>=0;)i.splice(i.indexOf(u),1);I.push(u)}},R=[],N=[],E=_createForOfIteratorHelper(a.outputs);try{for(E.s();!(x=E.n()).done;){A(x.value,R,N)}}catch(hE){E.e(hE)}finally{E.f()}var F,M=_createForOfIteratorHelper(I.slice().reverse());try{for(M.s();!(F=M.n()).done;){var D=F.value;w[D.id]=D,D.id in k||(k[D.id]=0);var O=k[D.id];O=Math.max(O,null==C[D.outboundLayer.id]?0:C[D.outboundLayer.id]),C[D.outboundLayer.id]=O,T[D.outboundLayer.id]=D.outboundLayer,k[D.id]=O;for(var L=0;L<D.inboundLayers.length;L++){var z=D.inboundLayers[L].inboundNodes[D.nodeIndices[L]];k[z.id]=Math.max(O+1,null==k[z.id]?0:k[z.id]),w[z.id]=z}}}catch(hE){M.e(hE)}finally{M.f()}var B={};for(var P in k){var V=k[P];V in B||(B[V]=[]),B[V].push(w[P])}var U={};for(var W in C){var G=C[W];G in U||(U[G]=[]),U[G].push(T[W])}var H=Object.keys(U).map((function(e){return parseInt(e,10)})).sort(S_);a.layers=[];var j,q=_createForOfIteratorHelper(H);try{for(q.s();!(j=q.n()).done;){var X=U[j.value];X.sort((function(e,t){var r=S[e.id],a=S[t.id];return r<a?-1:r>a?1:0}));var K,Q=_createForOfIteratorHelper(X);try{for(Q.s();!(K=Q.n()).done;){var Y=K.value;Y instanceof r&&a.internalContainerRefs.push(Y),a.layers.push(Y)}}catch(hE){Q.e(hE)}finally{Q.f()}}}catch(hE){q.e(hE)}finally{q.f()}a.layersByDepth=U,H=Object.keys(B).map((function(e){return parseInt(e,10)})).sort(S_);var J,Z=a.inputs.slice(),$=[],ee=_createForOfIteratorHelper(H);try{for(ee.s();!(J=ee.n()).done;){var te,re=_createForOfIteratorHelper(B[J.value]);try{for(re.s();!(te=re.n()).done;){var ae=te.value,ne=ae.outboundLayer;if(null!=ne){var ie,oe=_createForOfIteratorHelper(ae.inputTensors);try{for(oe.s();!(ie=oe.n()).done;){var se=ie.value;if(-1===Z.indexOf(se))throw new f_("Graph disconnected: cannot obtain value for tensor "+se+' at layer "'.concat(ne.name,'". The following previous layers were accessed without issue: ')+$)}}catch(hE){oe.e(hE)}finally{oe.f()}var le,ue=_createForOfIteratorHelper(ae.outputTensors);try{for(ue.s();!(le=ue.n()).done;){var he=le.value;Z.push(he)}}catch(hE){ue.e(hE)}finally{ue.f()}$.push(ne.name)}}}catch(hE){re.e(hE)}finally{re.f()}}}catch(hE){ee.e(hE)}finally{ee.f()}a.nodesByDepth=B;var ce,fe=a.layers.map((function(e){return e.name})),de=_createForOfIteratorHelper(fe);try{var ve=function(){var e=ce.value,t=fe.filter((function(t){return t===e})).length;if(1!==t)throw new f_('The name "'.concat(e,'" is used ').concat(t," times in the model. All layer names should be unique. Layer names: ")+JSON.stringify(fe))};for(de.s();!(ce=de.n()).done;)ve()}catch(hE){de.e(hE)}finally{de.f()}return a.outboundNodes=[],a.inboundNodes=[],new ly({outboundLayer:_assertThisInitialized(a),inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:a.inputs,outputTensors:a.outputs,inputMasks:a.inputs.map((function(e){return null})),outputMasks:a.outputs.map((function(e){return null})),inputShapes:a.inputs.map((function(e){return e.shape})),outputShapes:a.outputs.map((function(e){return e.shape}))}),a.built=!0,a._refCount=1,_possibleConstructorReturn(a)}return _createClass(r,[{key:"assertNotDisposed",value:function(){if(0===this._refCount)throw new Error("Container '".concat(this.name,"' is already disposed."))}},{key:"dispose",value:function(){this.assertNotDisposed();var e={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){var t,r=_createForOfIteratorHelper(this.layers);try{for(r.s();!(t=r.n()).done;){var a=t.value;e.numDisposedVariables+=a.dispose().numDisposedVariables}}catch(hE){r.e(hE)}finally{r.f()}var n,i=_createForOfIteratorHelper(this.internalContainerRefs);try{for(i.s();!(n=i.n()).done;){var o=n.value;e.numDisposedVariables+=o.dispose().numDisposedVariables}}catch(hE){i.e(hE)}finally{i.f()}}return e.refCountAfterDispose=this._refCount,e}},{key:"loadWeights",value:function(e){var t,r=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],a={},n=0,i=_createForOfIteratorHelper(this.layers);try{for(i.s();!(t=i.n()).done;){var o,s=t.value,l=_createForOfIteratorHelper(s.weights);try{for(l.s();!(o=l.n()).done;){var u=o.value;if(null!=a[u.originalName])throw new d_("Duplicate weight name: "+u.originalName);a[u.originalName]=u,n++}}catch(hE){l.e(hE)}finally{l.f()}}}catch(hE){i.e(hE)}finally{i.f()}var h=[];for(var c in e){var f=c;if(null==a[c]){var d=c.split("/");f=d.slice(0,-2).concat([d[d.length-1]]).join("/")}if(null!=a[f])h.push([a[f],e[c]]);else if(r)throw new d_("Provided weight data has no target variable: "+c);delete a[f]}if(r){var v=[];for(var p in a)v.push(p);if(v.length>0)throw new d_("".concat(v.length," of ").concat(n," weights are not set: ")+v)}ay(h)}},{key:"updatedConfig",value:function(){var e=this.getConfig(),t={};return t.className=this.getClassName(),t.config=e,t.kerasVersion="tfjs-layers 2.7.0",t.backend="TensorFlow.js",t}},{key:"toJSON",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],r=function e(t,r){if(null==t)return null;if("string"==typeof t)return x_(t);if("number"==typeof t||"boolean"==typeof t)return t;if(t instanceof Array){for(var a=[],n=t.length,i=0;i<n;++i){var o=t[i];Xy(r,i,o)?a.push(o):a.push(e(o,r))}return a}for(var s={},l=0,u=Object.keys(t);l<u.length;l++){var h=u[l],c=t[h];s[x_(h)]="name"!==h&&"className"!==h||"string"!=typeof c?e(c,h):c}return s}(this.updatedConfig());return t?JSON.stringify(r):r}},{key:"call",value:function(e,t){var r=this;return ys((function(){e=b_(e);for(var a=new Ky,n=0;n<r.inputs.length;++n)a.add(r.inputs[n],e[n]);return Jy(r.outputs,a,t)}))}},{key:"computeMask",value:function(e,t){var r=this;return ys((function(){var a;return e=b_(e),a=null==t?g_(null,e.length):b_(t),r.runInternalGraph(e,a)[1]}))}},{key:"computeOutputShape",value:function(e){var t=Jm(e);if(t.length!==this.inputLayers.length)throw new d_("Invalid inputShape argument ".concat(e,": model has ").concat(this.inputLayers.length," tensor inputs."));for(var r={},a=0;a<t.length;a++)r[this.inputLayers[a].name+"_0_0"]=t[a];var n=Object.keys(this.nodesByDepth).map((function(e){return parseInt(e,10)})).sort(S_);if(n.length>1){var i,o=_createForOfIteratorHelper(n);try{for(o.s();!(i=o.n()).done;){var s,l=i.value,u=_createForOfIteratorHelper(this.nodesByDepth[l]);try{for(u.s();!(s=u.n()).done;){var h=s.value,c=h.outboundLayer;if(-1===this.inputLayers.map((function(e){return e.id})).indexOf(c.id)){for(var f=[],d=0;d<h.inboundLayers.length;d++)f.push(r["".concat(h.inboundLayers[d].name,"_").concat(h.nodeIndices[d],"_").concat(h.tensorIndices[d])]);for(var v=Jm(c.computeOutputShape(y_(f))),p=c.inboundNodes.indexOf(h),g=0;g<v.length;g++)r["".concat(c.name,"_").concat(p,"_").concat(g)]=v[g]}}}catch(hE){u.e(hE)}finally{u.f()}}}catch(hE){o.e(hE)}finally{o.f()}}for(var _=[],m=[],y=0;y<this.outputLayers.length;y++)m.push("".concat(this.outputLayers[y].name,"_").concat(this.outputLayersNodeIndices[y],"_").concat(this.outputLayersTensorIndices[y]));for(var b=0;b<m.length;b++){var x=m[b];__(x in r),_.push(r[x])}return y_(_)}},{key:"runInternalGraph",value:function(e,t){null==t&&(t=g_(null,e.length));for(var r={},a=0;a<this.inputs.length;++a)r[this.inputs[a].id]=[e[a],t[a]];var n,i=_createForOfIteratorHelper(Object.keys(this.nodesByDepth).map((function(e){return parseInt(e,10)})).sort(S_));try{for(i.s();!(n=i.n()).done;){var o,s=n.value,l=_createForOfIteratorHelper(this.nodesByDepth[s]);try{for(l.s();!(o=l.n()).done;){var u,h=o.value,c=h.outboundLayer,f=h.inputTensors,d=h.outputTensors,v=new Array,p=_createForOfIteratorHelper(f);try{for(p.s();!(u=p.n()).done;){var g=u.value;g.id in r&&v.push(r[g.id])}}catch(hE){p.e(hE)}finally{p.f()}if(v.length===f.length){var _=void 0,m=void 0,y=void 0,b=void 0,x={};if(null!=h.callArgs&&(x=h.callArgs),1===v.length){var k=_slicedToArray(v[0],2),w=k[0],C=k[1];null==x.mask&&(x.mask=C),y=b_(c.call(w,x)),b=b_(c.computeMask(w,C)),_=[w],m=[C]}else _=v.map((function(e){return e[0]})),m=v.map((function(e){return e[1]})),null==x.mask&&(x.mask=m),y=b_(c.call(_,x)),b=b_(c.computeMask(_,m));if(c.activityRegularizer)throw new v_("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(var T=0;T<d.length;++T)r[d[T].id]=[y[T],b[T]]}}}catch(hE){l.e(hE)}finally{l.f()}}}catch(hE){i.e(hE)}finally{i.f()}var S,I=[],A=[],R=[],N=_createForOfIteratorHelper(this.outputs);try{for(N.s();!(S=N.n()).done;){var E=S.value;__(E.id in r,"Could not compute output ".concat(E.name," : ").concat(E.id));var F=_slicedToArray(r[E.id],2),M=F[0],D=F[1];R.push(M.shape),I.push(M),A.push(D)}}catch(hE){N.e(hE)}finally{N.f()}return[I,A,R]}},{key:"buildNodeConversionMap",value:function(e){var t,a,n={},i=_createForOfIteratorHelper(this.layers);try{for(i.s();!(a=i.n()).done;){var o=a.value;t=o instanceof r?1:0;for(var s=0;s<o.inboundNodes.length;s++){var l=r.nodeKey(o,s);this.containerNodes.has(l)&&(n[l]=t,t+=1)}}}catch(hE){i.e(hE)}finally{i.f()}return n}},{key:"getLayer",value:function(e,t){if(null!=t){if(this.layers.length<=t)throw new d_("Was asked to retrieve layer at index ".concat(t,", but model only has ").concat(this.layers.length," layer(s)."));return this.layers[t]}if(null==e)throw new d_("Provide either a layer name or layer index");var r,a=_createForOfIteratorHelper(this.layers);try{for(a.s();!(r=a.n()).done;){var n=r.value;if(n.name===e)return n}}catch(hE){a.e(hE)}finally{a.f()}throw new d_("No such layer: "+e)}},{key:"calculateLosses",value:function(){var e=this;return ys((function(){var t,a=[],n=_createForOfIteratorHelper(e.layers);try{for(n.s();!(t=n.n()).done;)for(var i=t.value,o=0;o<i.inboundNodes.length;++o){var s=r.nodeKey(i,o);e.containerNodes.has(s)&&a.push.apply(a,_toConsumableArray(i.calculateLosses()))}}catch(hE){n.e(hE)}finally{n.f()}return a}))}},{key:"getConfig",value:function(){var e,t={name:this.name},a=this.buildNodeConversionMap(this.layers),n=[],i=_createForOfIteratorHelper(this.layers);try{for(i.s();!(e=i.n()).done;){for(var o=e.value,s=o.getClassName(),l=o.getConfig(),u=[],h=0;h<o.inboundNodes.length;h++){var c=o.inboundNodes[h],f=r.nodeKey(o,h),d={};if(this.containerNodes.has(f)){if(c.callArgs)try{JSON.stringify(c.callArgs),d=c.callArgs}catch(hE){console.warn("Layer ".concat(o.name," was passed non-serializable keyword arguments: ")+c.callArgs+". They will not be included in the serialized model (and thus will be missing at deserialization time)."),d={}}if(c.inboundLayers.length>0){for(var v=[],p=0;p<c.inboundLayers.length;p++){var g=c.inboundLayers[p],_=c.tensorIndices[p],m=a[r.nodeKey(g,c.nodeIndices[p])];null==m&&(m=0),v.push([g.name,m,_,d])}u.push(v)}}}var y={};y.name=o.name,y.className=s,y.config=l,y.inboundNodes=u,n.push(y)}}catch(hE){i.e(hE)}finally{i.f()}t.layers=n;for(var b=[],x=0;x<this.inputLayers.length;x++){var k=this.inputLayers[x],w=r.nodeKey(k,this.inputLayersNodeIndices[x]);if(this.containerNodes.has(w)){var C=a[w];null==C&&(C=0),b.push([k.name,C,this.inputLayersTensorIndices[x]])}}t.inputLayers=b;for(var T=[],S=0;S<this.outputLayers.length;S++){var I=this.outputLayers[S],A=r.nodeKey(I,this.outputLayersNodeIndices[S]);if(this.containerNodes.has(A)){var R=a[A];null==R&&(R=0),T.push([I.name,R,this.outputLayersTensorIndices[S]])}}return t.outputLayers=T,t}},{key:"resetStates",value:function(){var e=this;ys((function(){e.layers.forEach((function(e){e.stateful&&e.resetStates()}))}))}},{key:"trainable",get:function(){return this.trainable_},set:function(e){this.layers.forEach((function(t){t._trainableWeights.forEach((function(t){return t.trainable=e}))})),this.trainable_=e}},{key:"trainableWeights",get:function(){if(this._trainableWeights.length>0)throw new d_("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];var e,t=[],r=_createForOfIteratorHelper(this.layers);try{for(r.s();!(e=r.n()).done;){var a=e.value;t=t.concat(a.trainableWeights)}}catch(hE){r.e(hE)}finally{r.f()}return t}},{key:"nonTrainableWeights",get:function(){var e,t=[],r=_createForOfIteratorHelper(this.layers);try{for(r.s();!(e=r.n()).done;){var a=e.value;t.push.apply(t,_toConsumableArray(a.nonTrainableWeights))}}catch(hE){r.e(hE)}finally{r.f()}if(!this.trainable){var n,i=[],o=_createForOfIteratorHelper(this.layers);try{for(o.s();!(n=o.n()).done;){var s=n.value;i.push.apply(i,_toConsumableArray(s.trainableWeights))}}catch(hE){o.e(hE)}finally{o.f()}return i.concat(t)}return t}},{key:"weights",get:function(){return this.trainableWeights.concat(this.nonTrainableWeights)}},{key:"stateful",get:function(){if(this._stateful)throw new d_("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");var e,t=_createForOfIteratorHelper(this.layers);try{for(t.s();!(e=t.n()).done;){if(e.value.stateful)return!0}}catch(hE){t.e(hE)}finally{t.f()}return!1}}],[{key:"fromConfig",value:function(e,t){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],a={},n={};function i(e,t){e.name in n?n[e.name].push(t):n[e.name]=[t]}function o(e,t){var r,n,o=[],s=_createForOfIteratorHelper(t);try{for(s.s();!(n=s.n()).done;){var l=n.value,u=l[0],h=l[1],c=l[2];if(r=null==l[3]?{}:l[3],!(u in a))return void i(e,t);var f=a[u];if(f.inboundNodes.length<=h)return void i(e,t);o.push(f.inboundNodes[h].outputTensors[c])}}catch(hE){s.e(hE)}finally{s.f()}o.length>0&&e.apply(y_(o),r)}function s(e){var n=e.name,o=wy(e,null!=t.customObjects?t.customObjects:{});o.setFastWeightInitDuringBuild(r),a[n]=o,e.inboundNodes.forEach((function(e){if(!(e instanceof Array))throw new d_("Corrupted configuration, expected array for nodeData: "+e);i(o,e)}))}var l,u=t.name,h=t.layers,c=_createForOfIteratorHelper(h);try{for(c.s();!(l=c.n()).done;){var f=l.value;s(f)}}catch(hE){c.e(hE)}finally{c.f()}for(;!A_(n);){var d,v=_createForOfIteratorHelper(h);try{for(v.s();!(d=v.n()).done;){var p=d.value,g=a[p.name];if(g.name in n){var _=n[g.name];delete n[g.name];var m,y=_createForOfIteratorHelper(_);try{for(y.s();!(m=y.n()).done;){var b=m.value;o(g,b)}}catch(hE){y.e(hE)}finally{y.f()}}}}catch(hE){v.e(hE)}finally{v.f()}}var x,k=[],w=[],C=t.inputLayers,T=_createForOfIteratorHelper(C);try{for(T.s();!(x=T.n()).done;){var S=x.value,I=S[0],A=S[1],R=S[2];__(I in a),k.push(a[I].inboundNodes[A].outputTensors[R])}}catch(hE){T.e(hE)}finally{T.f()}var N,E=t.outputLayers,F=_createForOfIteratorHelper(E);try{for(F.s();!(N=F.n()).done;){var M=N.value,D=M[0],O=M[1],L=M[2];__(D in a),w.push(a[D].inboundNodes[O].outputTensors[L])}}catch(hE){F.e(hE)}finally{F.f()}return new e({inputs:k,outputs:w,name:u})}}]),r}(hy));mb.className="Model",f.registerClass(mb);var yb=function(e){_inherits(r,e);var t=_createSuper(r);function r(){return _classCallCheck(this,r),t.apply(this,arguments)}return r}(mb);yb.className="Functional",f.registerClass(yb);var bb=function(e){_inherits(s,e);var t,r,n,i,o=_createSuper(s);function s(e){var t;if(_classCallCheck(this,s),e=e||{},(t=o.call(this,{inputs:[],outputs:[]})).trainable=!0,t.built=!1,t.name=null!=e.name?e.name:Qm("sequential_"),null!=e.layers){var r,a=_createForOfIteratorHelper(e.layers);try{for(a.s();!(r=a.n()).done;){var n=r.value;t.add(n)}}catch(hE){a.e(hE)}finally{a.f()}}return _possibleConstructorReturn(t)}return _createClass(s,[{key:"checkShape",value:function(e){if(e.inboundNodes[0].outputTensors[0].shape.some((function(e){return e<0})))throw new d_("Negative dimension size caused by adding layer "+e.name+" with input shape ["+e.inboundNodes[0].inputTensors[0].shape+"]")}},{key:"add",value:function(e){var t,r=e instanceof s||e instanceof mb;if(r){if(1!==(t=e).outputs.length)throw new d_("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==t.inputs.length)throw new d_("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new d_("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");var a=function(e){if(null==e.batchShape&&null==e.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=e.batchShape&&null!=e.shape)throw new d_("Please provide either a `shape` or `batchShape` argument to Input, but not both.");var t=e.batchShape;null!=e.shape&&null==t&&(t=[null].concat(e.shape));var r=e.dtype;return null==r&&(r="float32"),new cy({batchInputShape:t,name:e.name,dtype:r,sparse:e.sparse}).inboundNodes[0].outputTensors[0]}({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(a)}if(r)this.outputs=t.outputs,this.inputs=t.inputs;else{if(1!==e.inboundNodes.length)throw new d_("A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ".concat(e.name," which has ").concat(e.inboundNodes.length," pre-existing inbound connections."));if(1!==e.inboundNodes[0].outputTensors.length)throw new d_("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=function e(t,r,a){if((null==r||null!=a&&a>0)&&(r=t.sourceLayer,a=t.nodeIndex),0===r.inboundNodes.length)return[t];var n=r.inboundNodes[a];if(0===n.inboundLayers.length)return n.inputTensors;for(var i=[],o=0;o<n.inboundLayers.length;o++){var s,l=_createForOfIteratorHelper(e(n.inputTensors[o],n.inboundLayers[o],n.nodeIndices[o]));try{for(l.s();!(s=l.n()).done;){var u=s.value;-1===i.indexOf(u)&&i.push(u)}}catch(hE){l.e(hE)}finally{l.f()}}return i}(this.outputs[0])}this.inboundNodes=[],new ly({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:g_(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map((function(e){return e.shape})),outputShapes:this.outputs[0].shape})}else{var n=e.apply(this.outputs[0]);if(Array.isArray(n))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[n],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}},{key:"pop",value:function(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{var e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}},{key:"call",value:function(e,t){return null==this.model&&this.build(),this.model.call(e,t)}},{key:"build",value:function(e){if($m(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new mb({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}},{key:"countParams",value:function(){return this.built||this.build(),_get(_getPrototypeOf(s.prototype),"countParams",this).call(this)}},{key:"summary",value:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:console.log;this.built||this.build(),_get(_getPrototypeOf(s.prototype),"summary",this).call(this,e,t,r)}},{key:"setWeights",value:function(e){null==this.model&&this.build(),this.model.setWeights(e)}},{key:"evaluate",value:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(!this.built)throw new f_("The model needs to be compiled before being used.");return this.model.evaluate(e,t,r)}},{key:"evaluateDataset",value:(i=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(this.built){e.next=2;break}throw new f_("The model needs to be compiled before being used.");case 2:return e.abrupt("return",this.model.evaluateDataset(t,r));case 3:case"end":return e.stop()}}),e,this)}))),function(e,t){return i.apply(this,arguments)})},{key:"predict",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return null==this.model&&this.build(),this.model.predict(e,t)}},{key:"predictOnBatch",value:function(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}},{key:"compile",value:function(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}},{key:"fit",value:(n=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){var a,n=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(a=n.length>2&&void 0!==n[2]?n[2]:{},this.built){e.next=3;break}throw new f_("The model needs to be compiled before being used.");case 3:return e.abrupt("return",this.model.fit(t,r,a));case 4:case"end":return e.stop()}}),e,this)}))),function(e,t){return n.apply(this,arguments)})},{key:"fitDataset",value:(r=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(this.built){e.next=2;break}throw new f_("The model needs to be compiled before being used.");case 2:return e.abrupt("return",this.model.fitDataset(t,r));case 3:case"end":return e.stop()}}),e,this)}))),function(e,t){return r.apply(this,arguments)})},{key:"trainOnBatch",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(t,r){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.model.trainOnBatch(t,r));case 1:case"end":return e.stop()}}),e,this)}))),function(e,r){return t.apply(this,arguments)})},{key:"getConfig",value:function(){var e,t=[],r=_createForOfIteratorHelper(this.layers);try{for(r.s();!(e=r.n()).done;){var a=e.value,n={};n.className=a.getClassName(),n.config=a.getConfig(),t.push(n)}}catch(hE){r.e(hE)}finally{r.f()}return{name:this.name,layers:t}}},{key:"optimizer",get:function(){return null==this.model?void 0:this.model.optimizer},set:function(e){this.model.optimizer=e}},{key:"stopTraining",set:function(e){if(null==this.model)throw new d_("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e},get:function(){if(null==this.model)throw new d_("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}}],[{key:"fromConfig",value:function(e,t){var r,n=arguments.length>3&&void 0!==arguments[3]&&arguments[3],i={};if(t instanceof Array){if(null==t[0].className||"Merge"===t[0].className)throw new d_("Legacy serialization format not supported yet.");r=t}else a.assert(null!=t.layers,(function(){return"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."})),r=t.layers,delete t.layers,i=t;var o=new e(i);if(!(o instanceof s))throw new v_("Sequential.fromConfig called on non-Sequential input: "+o);var l,u=_createForOfIteratorHelper(r);try{for(u.s();!(l=u.n()).done;){var h=l.value,c=wy(h,void 0,n);n&&c.setFastWeightInitDuringBuild(!0),o.add(c)}}catch(hE){u.e(hE)}finally{u.f()}return o}}]),s}(mb);bb.className="Sequential",f.registerClass(bb);var xb=function(e){_inherits(r,e);var t=_createSuper(r);function r(){return _classCallCheck(this,r),t.apply(this,arguments)}return _createClass(r,[{key:"getConfig",value:function(){return{}}}]),r}(f.Serializable),kb=function(e){_inherits(r,e);var t=_createSuper(r);function r(){return _classCallCheck(this,r),t.apply(this,arguments)}return _createClass(r,[{key:"apply",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;if(1!==t)throw new v_("Support for alpha values other than 1 (".concat(t,") is not implemented yet."));return Au(e)}(e,t)}}]),r}(xb);kb.className="elu",f.registerClass(kb);var wb=function(e){_inherits(r,e);var t=_createSuper(r);function r(){return _classCallCheck(this,r),t.apply(this,arguments)}return _createClass(r,[{key:"apply",value:function(e){return nc(e)}}]),r}(xb);wb.className="selu",f.registerClass(wb);var Cb=function(e){_inherits(r,e);var t=_createSuper(r);function r(){return _classCallCheck(this,r),t.apply(this,arguments)}return _createClass(r,[{key:"apply",value:function(e){return Qh(e)}}]),r}(xb);Cb.className="relu",f.registerClass(Cb);var Tb=function(e){_inherits(r,e);var t=_createSuper(r);function r(){return _classCallCheck(this,r),t.apply(this,arguments)}return _createClass(r,[{key:"apply",value:function(e){return ys((function(){return yh(6,Qh(e))}))}}]),r}(xb);Tb.className="relu6",f.registerClass(Tb);var Sb=function(e){_inherits(r,e);var t=_createSuper(r);function r(){return _classCallCheck(this,r),t.apply(this,arguments)}return _createClass(r,[{key:"apply",value:function(e){return e}}]),r}(xb);Sb.className="linear",f.registerClass(Sb);var Ib=function(e){_inherits(r,e);var t=_createSuper(r);function r(){return _classCallCheck(this,r),t.apply(this,arguments)}return _createClass(r,[{key:"apply",value:function(e){return Xl(e)}}]),r}(xb);Ib.className="sigmoid",f.registerClass(Ib);var Ab=function(e){_inherits(r,e);var t=_createSuper(r);function r(){return _classCallCheck(this,r),t.apply(this,arguments)}return _createClass(r,[{key:"apply",value:function(e){return function(e){return ys((function(){var t=Fs(.5,Os(.2,e));return iu(t,0,1)}))}(e)}}]),r}(xb);Ab.className="hardSigmoid",f.registerClass(Ab);var Rb=function(e){_inherits(r,e);var t=_createSuper(r);function r(){return _classCallCheck(this,r),t.apply(this,arguments)}return _createClass(r,[{key:"apply",value:function(e){return rh(e)}}]),r}(xb);Rb.className="softplus",f.registerClass(Rb);var Nb=function(e){_inherits(r,e);var t=_createSuper(r);function r(){return _classCallCheck(this,r),t.apply(this,arguments)}return _createClass(r,[{key:"apply",value:function(e){return function(e){return ys((function(){return Ds(e,el(e).add(1))}))}(e)}}]),r}(xb);Nb.className="softsign",f.registerClass(Nb);var Eb=function(e){_inherits(r,e);var t=_createSuper(r);function r(){return _classCallCheck(this,r),t.apply(this,arguments)}return _createClass(r,[{key:"apply",value:function(e){return Ql(e)}}]),r}(xb);Eb.className="tanh",f.registerClass(Eb);var Fb=function(e){_inherits(r,e);var t=_createSuper(r);function r(){return _classCallCheck(this,r),t.apply(this,arguments)}return _createClass(r,[{key:"apply",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1;return vc(e,t)}}]),r}(xb);Fb.className="softmax",f.registerClass(Fb);var Mb=function(e){_inherits(r,e);var t=_createSuper(r);function r(){return _classCallCheck(this,r),t.apply(this,arguments)}return _createClass(r,[{key:"apply",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1;return oh(e,t)}}]),r}(xb);Mb.className="logSoftmax",f.registerClass(Mb);var Db=function(e){_inherits(r,e);var t=_createSuper(r);function r(){return _classCallCheck(this,r),t.apply(this,arguments)}return _createClass(r,[{key:"apply",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;return ys((function(){return Xl(e.mul(t)).mul(e)}))}}]),r}(xb);function Ob(e){return e.getClassName()}function Lb(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return T_(e,f.SerializationMap.getMap().classNameMap,t,"activation")}function zb(e){if(null==e)return Lb({className:"linear",config:{}});if("string"==typeof e){var t={};return t.className=e,t.config={},Lb(t)}return e instanceof xb?e:Lb(e)}Db.className="swish",f.registerClass(Db);var Bb=function(e){_inherits(r,e);var t=_createSuper(r);function r(){return _classCallCheck(this,r),t.apply(this,arguments)}return r}(f.Serializable),Pb=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;return _classCallCheck(this,r),a=t.call(this),function(e){if(null!=e&&"object"!=typeof e)throw new Error("Argument to L1L2 regularizer's constructor is expected to be an object, but received: "+e)}(e),a.l1=null==e||null==e.l1?.01:e.l1,a.l2=null==e||null==e.l2?.01:e.l2,a.hasL1=0!==a.l1,a.hasL2=0!==a.l2,a}return _createClass(r,[{key:"apply",value:function(e){var t=this;return ys((function(){var r=ph([1]);return t.hasL1&&(r=Fs(r,ih(Os(t.l1,el(e))))),t.hasL2&&(r=Fs(r,ih(Os(t.l2,ym(e))))),r.asScalar()}))}},{key:"getConfig",value:function(){return{l1:this.l1,l2:this.l2}}}],[{key:"fromConfig",value:function(e,t){return new e({l1:t.l1,l2:t.l2})}}]),r}(Bb);Pb.className="L1L2",f.registerClass(Pb);var Vb={l1l2:"L1L2"};function Ub(e){return C_(e)}function Wb(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return T_(e,f.SerializationMap.getMap().classNameMap,t,"regularizer")}function Gb(e){return null==e?null:"string"==typeof e?Wb({className:e in Vb?Vb[e]:e,config:{}}):e instanceof Bb?e:Wb(e)}var Hb=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;return _classCallCheck(this,r),(a=t.call(this,null==e?{}:e)).supportsMasking=!0,null!=e&&(a.maxValue=e.maxValue),a}return _createClass(r,[{key:"call",value:function(e,t){e=Zm(e);var r=Qh(e);return null!=this.maxValue&&(r=iu(r,0,this.maxValue)),r}},{key:"computeOutputShape",value:function(e){return e}},{key:"getConfig",value:function(){var e={maxValue:this.maxValue},t=_get(_getPrototypeOf(r.prototype),"getConfig",this).call(this);return Object.assign(e,t),e}}]),r}(hy);Hb.className="ReLU",f.registerClass(Hb);var jb=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;return _classCallCheck(this,r),(a=t.call(this,null==e?{}:e)).DEFAULT_ALPHA=.3,null==e&&(e={}),a.alpha=null==e.alpha?a.DEFAULT_ALPHA:e.alpha,a}return _createClass(r,[{key:"call",value:function(e,t){var r=Zm(e);return Ku(r,this.alpha)}},{key:"computeOutputShape",value:function(e){return e}},{key:"getConfig",value:function(){var e={alpha:this.alpha},t=_get(_getPrototypeOf(r.prototype),"getConfig",this).call(this);return Object.assign(e,t),e}}]),r}(hy);jb.className="LeakyReLU",f.registerClass(jb);var qb=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;if(_classCallCheck(this,r),(a=t.call(this,null==e?{}:e)).DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),a.supportsMasking=!0,a.alphaInitializer=jm(e.alphaInitializer||a.DEFAULT_ALPHA_INITIALIZER),a.alphaRegularizer=Gb(e.alphaRegularizer),a.alphaConstraint=W_(e.alphaConstraint),null==e.sharedAxes)a.sharedAxes=null;else if(Array.isArray(e.sharedAxes))a.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new d_("Expected sharedAxes to be a number or an array of numbers, but got "+e.sharedAxes);a.sharedAxes=[e.sharedAxes]}return _possibleConstructorReturn(a)}return _createClass(r,[{key:"build",value:function(e){var t=(e=$m(e)).slice(1);if(null!=this.sharedAxes){var r,a=_createForOfIteratorHelper(this.sharedAxes);try{for(a.s();!(r=a.n()).done;){t[r.value-1]=1}}catch(hE){a.e(hE)}finally{a.f()}}this.alpha=this.addWeight("alpha",t,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);var n={};if(null!=this.sharedAxes)for(var i=1;i<e.length;++i)n[i]=e[i];this.inputSpec=[new iy({ndim:e.length,axes:n})],this.built=!0}},{key:"call",value:function(e,t){return e=Zm(e),Lh(e,this.alpha.read())}},{key:"getConfig",value:function(){var e={alphaInitializer:Hm(this.alphaInitializer),alphaRegularizer:Ub(this.alphaRegularizer),alphaConstraint:V_(this.alphaConstraint),sharedAxes:this.sharedAxes},t=_get(_getPrototypeOf(r.prototype),"getConfig",this).call(this);return Object.assign(e,t),e}}]),r}(hy);qb.className="PReLU",f.registerClass(qb);var Xb=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;if(_classCallCheck(this,r),(a=t.call(this,null==e?{}:e)).DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==a.DEFAULT_ALPHA)throw new v_("Non-default alpha value (".concat(e.alpha,") is not supported by the ELU layer yet."));return a.alpha=null==e.alpha?a.DEFAULT_ALPHA:e.alpha,_possibleConstructorReturn(a)}return _createClass(r,[{key:"call",value:function(e,t){var r=Zm(e);return Au(r)}},{key:"computeOutputShape",value:function(e){return e}},{key:"getConfig",value:function(){var e={alpha:this.alpha},t=_get(_getPrototypeOf(r.prototype),"getConfig",this).call(this);return Object.assign(e,t),e}}]),r}(hy);Xb.className="ELU",f.registerClass(Xb);var Kb=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;return _classCallCheck(this,r),(a=t.call(this,null==e?{}:e)).DEFAULT_THETA=1,null==e&&(e={}),a.theta=null==e.theta?a.DEFAULT_THETA:e.theta,a}return _createClass(r,[{key:"call",value:function(e,t){var r=Zm(e);return r.mul(lm(r.greater(this.theta),"float32"))}},{key:"computeOutputShape",value:function(e){return e}},{key:"getConfig",value:function(){var e={theta:this.theta},t=_get(_getPrototypeOf(r.prototype),"getConfig",this).call(this);return Object.assign(e,t),e}}]),r}(hy);Kb.className="ThresholdedReLU",f.registerClass(Kb);var Qb=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;return _classCallCheck(this,r),(a=t.call(this,null==e?{}:e)).DEFAULT_AXIS=1,null==e&&(e={}),a.softmax=(new Fb).apply,a.axis=null==e.axis?a.DEFAULT_AXIS:e.axis,a}return _createClass(r,[{key:"call",value:function(e,t){var r=Zm(e);return this.softmax(r,this.axis)}},{key:"computeOutputShape",value:function(e){return e}},{key:"getConfig",value:function(){var e={axis:this.axis},t=_get(_getPrototypeOf(r.prototype),"getConfig",this).call(this);return Object.assign(e,t),e}}]),r}(hy);function Yb(e,t,r){if("number"==typeof e)return g_(e,t);if(e.length!==t)throw new d_("The ".concat(r," argument must be an integer or tuple of ").concat(t," integers. Received: ").concat(e.length," elements."));for(var a=0;a<t;++a){var n=e[a];if((i=n)!==parseInt(i.toString(),10))throw new d_("The ".concat(r," argument must be an integer or tuple of ").concat(t," integers. Received: ").concat(JSON.stringify(e)," including a non-integer number ")+n)}return e;var i}function Jb(e,t,r,a){var n,i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:1;return null==e?e:(n="same"===r?e:e-(t+(t-1)*(i-1))+1,Math.floor((n+a-1)/a))}function Zb(e,t,r,a){if(null==e)return null;if("valid"===a)e=e*t+om([r-t,0]);else{if("same"!==a)throw new d_("Unsupport padding mode: ".concat(a,"."));e*=t}return e}function $b(e,t){return ys((function(){return K_(t),"channelsFirst"===t?So(e,[0,2,3,1]):e}))}function ex(e,t){return ys((function(){return K_(t),"channelsFirst"===t?So(e,[0,2,3,4,1]):e}))}function tx(e,t,r){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[1,1],n=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"valid",i=arguments.length>5?arguments[5]:void 0,o=arguments.length>6?arguments[6]:void 0,s=arguments.length>7&&void 0!==arguments[7]?arguments[7]:null;return ys((function(){if(null==i&&(i="channelsLast"),K_(i),3!==e.rank&&4!==e.rank)throw new d_("conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ".concat(e.rank,"."));if(3!==t.rank&&4!==t.rank)throw new d_("conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ".concat(e.rank,"."));var l=$b(e,i);if("causal"===n)throw new v_("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=p.conv2d({x:l,filter:t,strides:a,pad:"same"===n?"same":"valid",dilations:o,dataFormat:"NHWC",bias:r,activation:s}),"channelsFirst"===i&&(l=So(l,[0,3,1,2])),l}))}Qb.className="Softmax",f.registerClass(Qb);var rx=function(e){_inherits(r,e);var t=_createSuper(r);function r(e,a){var n;if(_classCallCheck(this,r),(n=t.call(this,a)).bias=null,n.DEFAULT_KERNEL_INITIALIZER="glorotNormal",n.DEFAULT_BIAS_INITIALIZER="zeros",r.verifyArgs(a),n.rank=e,E_(n.rank,"rank"),1!==n.rank&&2!==n.rank&&3!==n.rank)throw new v_("Convolution layer for rank other than 1, 2, or 3 (".concat(n.rank,") is not implemented yet."));if(n.kernelSize=Yb(a.kernelSize,e,"kernelSize"),n.strides=Yb(null==a.strides?1:a.strides,e,"strides"),n.padding=null==a.padding?"valid":a.padding,Q_(n.padding),n.dataFormat=null==a.dataFormat?"channelsLast":a.dataFormat,K_(n.dataFormat),n.activation=zb(a.activation),n.useBias=null==a.useBias||a.useBias,n.biasInitializer=jm(a.biasInitializer||n.DEFAULT_BIAS_INITIALIZER),n.biasConstraint=W_(a.biasConstraint),n.biasRegularizer=Gb(a.biasRegularizer),n.activityRegularizer=Gb(a.activityRegularizer),n.dilationRate=Yb(null==a.dilationRate?1:a.dilationRate,e,"dilationRate"),1===n.rank&&Array.isArray(n.dilationRate)&&1!==n.dilationRate.length)throw new d_("dilationRate must be a number or an array of a single number for 1D convolution, but received "+JSON.stringify(n.dilationRate));if(2===n.rank){if("number"==typeof n.dilationRate)n.dilationRate=[n.dilationRate,n.dilationRate];else if(2!==n.dilationRate.length)throw new d_("dilationRate must be a number or array of two numbers for 2D convolution, but received "+JSON.stringify(n.dilationRate))}else if(3===n.rank)if("number"==typeof n.dilationRate)n.dilationRate=[n.dilationRate,n.dilationRate,n.dilationRate];else if(3!==n.dilationRate.length)throw new d_("dilationRate must be a number or array of three numbers for 3D convolution, but received "+JSON.stringify(n.dilationRate));return _possibleConstructorReturn(n)}return _createClass(r,[{key:"getConfig",value:function(){var e={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:Ob(this.activation),useBias:this.useBias,biasInitializer:Hm(this.biasInitializer),biasRegularizer:Ub(this.biasRegularizer),activityRegularizer:Ub(this.activityRegularizer),biasConstraint:V_(this.biasConstraint)},t=_get(_getPrototypeOf(r.prototype),"getConfig",this).call(this);return Object.assign(e,t),e}}],[{key:"verifyArgs",value:function(e){if(__("kernelSize"in e,"required key 'kernelSize' not in config"),"number"!=typeof e.kernelSize&&!N_(e.kernelSize,"number",1,3))throw new d_("BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ".concat(JSON.stringify(e.kernelSize),"."))}}]),r}(hy),ax=function(e){_inherits(r,e);var t=_createSuper(r);function r(e,a){var n;return _classCallCheck(this,r),(n=t.call(this,e,a)).kernel=null,r.verifyArgs(a),n.filters=a.filters,E_(n.filters,"filters"),n.kernelInitializer=jm(a.kernelInitializer||n.DEFAULT_KERNEL_INITIALIZER),n.kernelConstraint=W_(a.kernelConstraint),n.kernelRegularizer=Gb(a.kernelRegularizer),n}return _createClass(r,[{key:"build",value:function(e){e=$m(e);var t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new d_("The channel dimension of the input should be defined. Found "+e[t]);var r=e[t],a=this.kernelSize.concat([r,this.filters]);this.kernel=this.addWeight("kernel",a,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:_defineProperty({},t,r)}],this.built=!0}},{key:"call",value:function(e,t){var r=this;return ys((function(){var t;e=Zm(e);var a=null==r.bias?null:r.bias.read(),n=F_(r.activation.getClassName());if(null!=n&&2===r.rank)t=tx(e,r.kernel.read(),a,r.strides,r.padding,r.dataFormat,r.dilationRate,n);else{if(1===r.rank)t=function(e,t,r){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1,n=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"valid",i=arguments.length>5?arguments[5]:void 0,o=arguments.length>6&&void 0!==arguments[6]?arguments[6]:1;return ys((function(){if(null==i&&(i="channelsLast"),K_(i),3!==e.shape.length)throw new d_("The input of a conv1dWithBias operation should be 3, but is "+e.shape.length+" instead.");if(3!==t.shape.length)throw new d_("The kernel for a conv1dWithBias operation should be 3, but is "+t.shape.length+" instead");if(null!=r&&1!==r.shape.length)throw new d_("The bias for a conv1dWithBias operation should be 1, but is "+t.shape.length+" instead");if("channelsFirst"===i&&(e=So(e,[0,2,1])),"causal"===n)throw new v_("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");var s=cu(e,t,a,"same"===n?"same":"valid","NWC",o);return null!=r&&(s=xm(s,r)),s}))}(e,r.kernel.read(),a,r.strides[0],r.padding,r.dataFormat,r.dilationRate[0]);else if(2===r.rank)t=tx(e,r.kernel.read(),a,r.strides,r.padding,r.dataFormat,r.dilationRate);else{if(3!==r.rank)throw new v_("convolutions greater than 3D are not implemented yet.");t=function(e,t,r){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[1,1,1],n=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"valid",i=arguments.length>5?arguments[5]:void 0,o=arguments.length>6?arguments[6]:void 0;return ys((function(){if(null==i&&(i="channelsLast"),K_(i),4!==e.rank&&5!==e.rank)throw new d_("conv3dWithBias expects input to be of rank 4 or 5, but received "+e.rank+".");if(4!==t.rank&&5!==t.rank)throw new d_("conv3dWithBias expects kernel to be of rank 4 or 5, but received "+e.rank+".");var s=ex(e,i);if("causal"===n)throw new v_("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return s=vu(s,t,a,"same"===n?"same":"valid","NDHWC",o),null!=r&&(s=xm(s,r)),"channelsFirst"===i&&(s=So(s,[0,4,1,2,3])),s}))}(e,r.kernel.read(),a,r.strides,r.padding,r.dataFormat,r.dilationRate)}null!=r.activation&&(t=r.activation.apply(t))}return t}))}},{key:"computeOutputShape",value:function(e){e=$m(e);for(var t=[],r="channelsLast"===this.dataFormat?e.slice(1,e.length-1):e.slice(2),a=0;a<r.length;++a){var n=Jb(r[a],this.kernelSize[a],this.padding,this.strides[a],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[a]);t.push(n)}var i=[e[0]];return"channelsLast"===this.dataFormat?(i=i.concat(t)).push(this.filters):(i.push(this.filters),i=i.concat(t)),i}},{key:"getConfig",value:function(){var e={filters:this.filters,kernelInitializer:Hm(this.kernelInitializer),kernelRegularizer:Ub(this.kernelRegularizer),kernelConstraint:V_(this.kernelConstraint)},t=_get(_getPrototypeOf(r.prototype),"getConfig",this).call(this);return Object.assign(e,t),e}}],[{key:"verifyArgs",value:function(e){if(!("filters"in e)||"number"!=typeof e.filters||e.filters<1)throw new d_("Convolution layer expected config.filters to be a 'number' > 0 but got "+JSON.stringify(e.filters))}}]),r}(rx),nx=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;return _classCallCheck(this,r),a=t.call(this,2,e),r.verifyArgs(e),a}return _createClass(r,[{key:"getConfig",value:function(){var e=_get(_getPrototypeOf(r.prototype),"getConfig",this).call(this);return delete e.rank,e}}],[{key:"verifyArgs",value:function(e){if("number"!=typeof e.kernelSize&&!N_(e.kernelSize,"number",1,2))throw new d_("Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ".concat(JSON.stringify(e.kernelSize),"."))}}]),r}(ax);nx.className="Conv2D",f.registerClass(nx);var ix=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;return _classCallCheck(this,r),a=t.call(this,3,e),r.verifyArgs(e),a}return _createClass(r,[{key:"getConfig",value:function(){var e=_get(_getPrototypeOf(r.prototype),"getConfig",this).call(this);return delete e.rank,e}}],[{key:"verifyArgs",value:function(e){if("number"!=typeof e.kernelSize&&(!Array.isArray(e.kernelSize)||1!==e.kernelSize.length&&3!==e.kernelSize.length))throw new d_("Conv3D expects config.kernelSize to be number or [number, number, number], but received ".concat(JSON.stringify(e.kernelSize),"."))}}]),r}(ax);ix.className="Conv3D",f.registerClass(ix);var ox=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;if(_classCallCheck(this,r),(a=t.call(this,e)).inputSpec=[new iy({ndim:4})],"same"!==a.padding&&"valid"!==a.padding)throw new d_("Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode "+a.padding);return _possibleConstructorReturn(a)}return _createClass(r,[{key:"build",value:function(e){if(4!==(e=$m(e)).length)throw new d_("Input should have rank 4; Received input shape: "+JSON.stringify(e));var t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new d_("The channel dimension of the inputs should be defined. Found `None`.");var r=e[t],a=this.kernelSize.concat([this.filters,r]);this.kernel=this.addWeight("kernel",a,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new iy({ndim:4,axes:_defineProperty({},t,r)})],this.built=!0}},{key:"call",value:function(e,t){var r=this;return ys((function(){var t=Zm(e);if(4!==t.shape.length)throw new d_("Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-"+t.shape.length);var a,n,i=t.shape;"channelsFirst"===r.dataFormat?(a=2,n=3):(a=1,n=2);var o=i[n],s=r.kernelSize[1],l=r.strides[1],u=[i[0],Zb(i[a],r.strides[0],r.kernelSize[0],r.padding),Zb(o,l,s,r.padding),r.filters];"channelsLast"!==r.dataFormat&&(t=So(t,[0,2,3,1]));var h=du(t,r.kernel.read(),u,r.strides,r.padding);return"channelsLast"!==r.dataFormat&&(h=So(h,[0,3,1,2])),null!=r.bias&&(h=xm(h,r.bias.read(),r.dataFormat)),null!=r.activation&&(h=r.activation.apply(h)),h}))}},{key:"computeOutputShape",value:function(e){var t,r,a,n=(e=$m(e)).slice();"channelsFirst"===this.dataFormat?(t=1,r=2,a=3):(t=3,r=1,a=2);var i=this.kernelSize[0],o=this.kernelSize[1],s=this.strides[0],l=this.strides[1];return n[t]=this.filters,n[r]=Zb(n[r],s,i,this.padding),n[a]=Zb(n[a],l,o,this.padding),n}},{key:"getConfig",value:function(){var e=_get(_getPrototypeOf(r.prototype),"getConfig",this).call(this);return delete e.dilationRate,e}}]),r}(nx);ox.className="Conv2DTranspose",f.registerClass(ox);var sx=function(e){_inherits(r,e);var t=_createSuper(r);function r(e,a){var n;if(_classCallCheck(this,r),(n=t.call(this,e,a)).DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",n.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",n.depthwiseKernel=null,n.pointwiseKernel=null,null==a.filters)throw new d_("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=a.kernelInitializer||null!=a.kernelRegularizer||null!=a.kernelConstraint)throw new d_("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=a.padding&&"same"!==a.padding&&"valid"!==a.padding)throw new d_("SeparableConv".concat(n.rank,"D supports only padding modes: 'same' and 'valid', but received ")+JSON.stringify(a.padding));return n.depthMultiplier=null==a.depthMultiplier?1:a.depthMultiplier,n.depthwiseInitializer=jm(a.depthwiseInitializer||n.DEFAULT_DEPTHWISE_INITIALIZER),n.depthwiseRegularizer=Gb(a.depthwiseRegularizer),n.depthwiseConstraint=W_(a.depthwiseConstraint),n.pointwiseInitializer=jm(a.depthwiseInitializer||n.DEFAULT_POINTWISE_INITIALIZER),n.pointwiseRegularizer=Gb(a.pointwiseRegularizer),n.pointwiseConstraint=W_(a.pointwiseConstraint),_possibleConstructorReturn(n)}return _createClass(r,[{key:"build",value:function(e){if((e=$m(e)).length<this.rank+2)throw new d_("Inputs to SeparableConv".concat(this.rank,"D should have rank ")+(this.rank+2)+", but received input shape: "+JSON.stringify(e));var t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t]||e[t]<0)throw new d_("The channel dimension of the inputs should be defined, but found "+JSON.stringify(e[t]));for(var r=e[t],a=this.kernelSize.concat([r,this.depthMultiplier]),n=[],i=0;i<this.rank;++i)n.push(1);n.push(r*this.depthMultiplier,this.filters),this.depthwiseKernel=this.addWeight("depthwise_kernel",a,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",n,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,!0,this.pointwiseConstraint),this.bias=this.useBias?this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.inputSpec=[new iy({ndim:this.rank+2,axes:_defineProperty({},t,r)})],this.built=!0}},{key:"call",value:function(e,t){var r=this;return ys((function(){var t;if(e=Zm(e),1===r.rank)throw new v_("1D separable convolution is not implemented yet.");return 2===r.rank&&("channelsFirst"===r.dataFormat&&(e=So(e,[0,2,3,1])),t=ic(e,r.depthwiseKernel.read(),r.pointwiseKernel.read(),r.strides,r.padding,r.dilationRate,"NHWC")),r.useBias&&(t=xm(t,r.bias.read(),r.dataFormat)),null!=r.activation&&(t=r.activation.apply(t)),"channelsFirst"===r.dataFormat&&(t=So(t,[0,3,1,2])),t}))}},{key:"getConfig",value:function(){var e=_get(_getPrototypeOf(r.prototype),"getConfig",this).call(this);return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=Hm(this.depthwiseInitializer),e.pointwiseInitializer=Hm(this.pointwiseInitializer),e.depthwiseRegularizer=Ub(this.depthwiseRegularizer),e.pointwiseRegularizer=Ub(this.pointwiseRegularizer),e.depthwiseConstraint=V_(this.depthwiseConstraint),e.pointwiseConstraint=V_(this.pointwiseConstraint),e}}]),r}(ax);sx.className="SeparableConv";var lx=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){return _classCallCheck(this,r),t.call(this,2,e)}return r}(sx);lx.className="SeparableConv2D",f.registerClass(lx);var ux=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;return _classCallCheck(this,r),a=t.call(this,1,e),r.verifyArgs(e),a.inputSpec=[{ndim:3}],a}return _createClass(r,[{key:"getConfig",value:function(){var e=_get(_getPrototypeOf(r.prototype),"getConfig",this).call(this);return delete e.rank,delete e.dataFormat,e}}],[{key:"verifyArgs",value:function(e){if("number"!=typeof e.kernelSize&&!N_(e.kernelSize,"number",1,1))throw new d_("Conv1D expects config.kernelSize to be number or number[] with length 1, but received ".concat(JSON.stringify(e.kernelSize),"."))}}]),r}(ax);ux.className="Conv1D",f.registerClass(ux);var hx=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;return _classCallCheck(this,r),(a=t.call(this,e)).cropping="number"==typeof e.cropping?[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:e.cropping,a.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,a.inputSpec=[{ndim:4}],a}return _createClass(r,[{key:"computeOutputShape",value:function(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}},{key:"call",value:function(e,t){var r=this;return ys((function(){if(e=Zm(e),"channelsLast"===r.dataFormat){var t=fm(e,r.cropping[0][0],e.shape[1]-r.cropping[0][0]-r.cropping[0][1],2);return fm(t,r.cropping[1][0],e.shape[2]-r.cropping[1][1]-r.cropping[1][0],3)}var a=fm(e,r.cropping[0][0],e.shape[2]-r.cropping[0][0]-r.cropping[0][1],3);return fm(a,r.cropping[1][0],e.shape[3]-r.cropping[1][1]-r.cropping[1][0],4)}))}},{key:"getConfig",value:function(){var e={cropping:this.cropping,dataFormat:this.dataFormat},t=_get(_getPrototypeOf(r.prototype),"getConfig",this).call(this);return Object.assign(e,t),e}}]),r}(hy);hx.className="Cropping2D",f.registerClass(hx);var cx=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;return _classCallCheck(this,r),(a=t.call(this,e)).DEFAULT_SIZE=[2,2],a.inputSpec=[{ndim:4}],a.size=null==e.size?a.DEFAULT_SIZE:e.size,a.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,a}return _createClass(r,[{key:"computeOutputShape",value:function(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],null==e[2]?null:this.size[0]*e[2],null==e[3]?null:this.size[1]*e[3]]:[e[0],null==e[1]?null:this.size[0]*e[1],null==e[2]?null:this.size[1]*e[2],e[3]]}},{key:"call",value:function(e,t){var r=this;return ys((function(){var t=Zm(e),a=t.shape;if("channelsFirst"===r.dataFormat){var n=(t=So(t,[0,2,3,1])).resizeNearestNeighbor([r.size[0]*a[2],r.size[1]*a[3]]);return So(n,[0,3,1,2])}return t.resizeNearestNeighbor([r.size[0]*a[1],r.size[1]*a[2]])}))}},{key:"getConfig",value:function(){var e={size:this.size,dataFormat:this.dataFormat},t=_get(_getPrototypeOf(r.prototype),"getConfig",this).call(this);return Object.assign(e,t),e}}]),r}(hy);cx.className="UpSampling2D",f.registerClass(cx);var fx=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;return _classCallCheck(this,r),(a=t.call(this,2,e)).depthwiseKernel=null,a.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,a.depthwiseInitializer=jm(e.depthwiseInitializer||a.DEFAULT_KERNEL_INITIALIZER),a.depthwiseConstraint=W_(e.depthwiseConstraint),a.depthwiseRegularizer=Gb(e.depthwiseRegularizer),a}return _createClass(r,[{key:"build",value:function(e){if((e=$m(e)).length<4)throw new d_("Inputs to DepthwiseConv2D should have rank 4. Received input shape: ".concat(JSON.stringify(e),"."));var t="channelsFirst"===this.dataFormat?1:3;if(null==e[t]||e[t]<0)throw new d_("The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (".concat(e[t],")."));var r=e[t];this.depthwiseKernel=this.addWeight("depthwise_kernel",[this.kernelSize[0],this.kernelSize[1],r,this.depthMultiplier],null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.bias=this.useBias?this.addWeight("bias",[r*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.built=!0}},{key:"call",value:function(e,t){var r=this;return ys((function(){var t=function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[1,1],a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"valid",n=arguments.length>4?arguments[4]:void 0,i=arguments.length>5?arguments[5]:void 0;return ys((function(){null==n&&(n="channelsLast"),K_(n);var o=$b(e,n);if(4!==e.rank)throw new d_("Input for depthwiseConv2d is required to be 4-D, but is instead "+e.rank+"-D");if(4!==t.rank)throw new d_("depthwiseKernel is required to be 4-D, but is instead "+t.rank+"-D");return o=xu(o,t,r,"same"===a?"same":"valid","NHWC",i),"channelsFirst"===n&&(o=So(o,[0,3,1,2])),o}))}(e=Zm(e),r.depthwiseKernel.read(),r.strides,r.padding,r.dataFormat,null);return r.useBias&&(t=xm(t,r.bias.read(),r.dataFormat)),null!=r.activation&&(t=r.activation.apply(t)),t}))}},{key:"computeOutputShape",value:function(e){e=$m(e);var t="channelsFirst"===this.dataFormat?e[3]:e[2],r="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,a=Jb("channelsFirst"===this.dataFormat?e[2]:e[1],this.kernelSize[0],this.padding,this.strides[0]),n=Jb(t,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],r,a,n]:[e[0],a,n,r]}},{key:"getConfig",value:function(){var e=_get(_getPrototypeOf(r.prototype),"getConfig",this).call(this);return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=Hm(this.depthwiseInitializer),e.depthwiseRegularizer=Ub(this.depthwiseRegularizer),e.depthwiseConstraint=V_(this.depthwiseRegularizer),e}}]),r}(rx);function dx(e,t,r,a){if(Array.isArray(e)){if(null!=t||null!=r)throw new d_("When inputs is an array, neither initialState or constants should be provided");null!=a&&(r=e.slice(e.length-a,e.length),e=e.slice(0,e.length-a)),e.length>1&&(t=e.slice(1,e.length)),e=e[0]}function n(e){return null==e||Array.isArray(e)?e:[e]}return{inputs:e,initialState:t=n(t),constants:r=n(r)}}function vx(e,t,r){var a=arguments.length>3&&void 0!==arguments[3]&&arguments[3],n=arguments.length>4?arguments[4]:void 0,i=arguments.length>5?arguments[5]:void 0,o=arguments.length>6&&void 0!==arguments[6]&&arguments[6],s=arguments.length>7&&void 0!==arguments[7]&&arguments[7];return ys((function(){var l=t.shape.length;if(l<3)throw new d_("Input should be at least 3D, but is ".concat(l,"D."));var u=[1,0].concat(sm(2,l));if(t=So(t,u),null!=i)throw new v_("The rnn() functoin of the deeplearn.js backend does not support constants yet.");o&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=n&&((n=n.asType("bool").asType("float32")).rank===l-1&&(n=Eu(n,-1)),n=So(n,u)),a&&(t=Jh(t,0),null!=n&&(n=Jh(n,0)));var h,c,f,d=[],v=r,p=t.shape[0],g=Oc(t);null!=n&&(c=Oc(n));for(var _=function(t){var r=g[t],a=ys((function(){return e(r,v)}));if(null==n)h=a[0],v=a[1];else{var i=ys((function(){var e=c[t],r=Ih(e).sub(e);return{output:a[0].mul(e).add(v[0].mul(r)),newStates:v.map((function(t,n){return a[1][n].mul(e).add(t.mul(r))}))}}));h=i.output,v=i.newStates}s&&d.push(h)},m=0;m<p;++m)_(m);return s&&(f=wc(d,1)),[h,f,v]}))}fx.className="DepthwiseConv2D",f.registerClass(fx);var px=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a,n;if(_classCallCheck(this,r),a=t.call(this,e),null==e.cell)throw new d_("cell property is missing for the constructor of RNN.");if(null==(n=Array.isArray(e.cell)?new Cx({cells:e.cell}):e.cell).stateSize)throw new d_("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");return a.cell=n,a.returnSequences=null!=e.returnSequences&&e.returnSequences,a.returnState=null!=e.returnState&&e.returnState,a.goBackwards=null!=e.goBackwards&&e.goBackwards,a._stateful=null!=e.stateful&&e.stateful,a.unroll=null!=e.unroll&&e.unroll,a.supportsMasking=!0,a.inputSpec=[new iy({ndim:3})],a.stateSpec=null,a.states_=null,a.numConstants=null,a.keptStates=[],_possibleConstructorReturn(a)}return _createClass(r,[{key:"getStates",value:function(){return null==this.states_?sm(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map((function(e){return null})):this.states_}},{key:"setStates",value:function(e){this.states_=e}},{key:"computeOutputShape",value:function(e){Ym(e)&&(e=e[0]),e=e;var t=this.cell.stateSize;Array.isArray(t)||(t=[t]);var r,a=t[0];if(r=this.returnSequences?[e[0],e[1],a]:[e[0],a],this.returnState){var n,i=[],o=_createForOfIteratorHelper(t);try{for(o.s();!(n=o.n()).done;){var s=n.value;i.push([e[0],s])}}catch(hE){o.e(hE)}finally{o.f()}return[r].concat(i)}return r}},{key:"computeMask",value:function(e,t){var r=this;return ys((function(){Array.isArray(t)&&(t=t[0]);var e=r.returnSequences?t:null;if(r.returnState){var a=r.states.map((function(e){return null}));return[e].concat(a)}return e}))}},{key:"build",value:function(e){if(null!=this.numConstants)throw new v_("Constants support is not implemented in RNN yet.");Ym(e)&&(e=e[0]),e=e;var t=this.stateful?e[0]:null,r=e.slice(2);this.inputSpec[0]=new iy({shape:[t,null].concat(_toConsumableArray(r))});var n,i=[e[0]].concat(e.slice(2));if(this.cell.build(i),n=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!a.arraysEqual(this.stateSpec.map((function(e){return e.shape[e.shape.length-1]})),n))throw new d_("An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=".concat(this.stateSpec,"; However cell.stateSize is ")+this.cell.stateSize)}else this.stateSpec=n.map((function(e){return new iy({shape:[null,e]})}));this.stateful&&this.resetStates()}},{key:"resetStates",value:function(e){var t=this,r=arguments.length>1&&void 0!==arguments[1]&&arguments[1];ys((function(){if(!t.stateful)throw new c_("Cannot call resetStates() on an RNN Layer that is not stateful.");var n=t.inputSpec[0].shape[0];if(null==n)throw new d_("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==t.states_)t.states_=Array.isArray(t.cell.stateSize)?t.cell.stateSize.map((function(e){return ph([n,e])})):[ph([n,t.cell.stateSize])];else if(null==e)bs(t.states_),null!=t.keptStates&&(bs(t.keptStates),t.keptStates=[]),Array.isArray(t.cell.stateSize)?t.states_=t.cell.stateSize.map((function(e){return ph([n,e])})):t.states_[0]=ph([n,t.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==t.states_.length)throw new d_("Layer ".concat(t.name," expects ").concat(t.states_.length," state(s), but it received ").concat(e.length," state value(s). Input received: ")+e);!0===r?t.keptStates.push(t.states_.slice()):bs(t.states_);for(var i=0;i<t.states_.length;++i){var o=e[i],s=Array.isArray(t.cell.stateSize)?t.cell.stateSize[i]:t.cell.stateSize,l=[n,s];if(!a.arraysEqual(o.shape,l))throw new d_("State ".concat(i," is incompatible with layer ").concat(t.name,": expected shape=").concat(l,", received shape=").concat(o.shape));t.states_[i]=o}}t.states_=t.states_.map((function(e){return xs(e.clone())}))}))}},{key:"apply",value:function(e,t){var a=null==t?null:t.initialState,n=null==t?null:t.constants;null==t&&(t={});var i=dx(e,a,n,this.numConstants);e=i.inputs,a=i.initialState,n=i.constants;var o=[],s=[];if(null!=a){t.initialState=a,o=o.concat(a),this.stateSpec=[];var l,u=_createForOfIteratorHelper(a);try{for(u.s();!(l=u.n()).done;){var h=l.value;this.stateSpec.push(new iy({shape:h.shape}))}}catch(hE){u.e(hE)}finally{u.f()}s=s.concat(this.stateSpec)}if(null!=n&&(t.constants=n,o=o.concat(n),this.numConstants=n.length),o[0]instanceof oy){var c=[e].concat(o),f=this.inputSpec.concat(s),d=this.inputSpec;this.inputSpec=f;var v=_get(_getPrototypeOf(r.prototype),"apply",this).call(this,c,t);return this.inputSpec=d,v}return _get(_getPrototypeOf(r.prototype),"apply",this).call(this,e,t)}},{key:"call",value:function(e,t){var r=this;return ys((function(){var a=null==t?null:t.mask,n=null==t?null:t.training,i=null==t?null:t.initialState;e=Zm(e),null==i&&(i=r.stateful?r.states_:r.getInitialState(e));var o=Array.isArray(r.cell.stateSize)?r.cell.stateSize.length:1;if(i.length!==o)throw new d_("RNN Layer has ".concat(o," state(s) but was passed ")+i.length+" initial state(s).");r.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");var s={training:n},l=vx((function(e,t){var a=r.cell.call([e].concat(t),s);return[a[0],a.slice(1)]}),e,i,r.goBackwards,a,null,r.unroll,r.returnSequences),u=l[0],h=l[1],c=l[2];r.stateful&&r.resetStates(c,n);var f=r.returnSequences?h:u;return r.returnState?[f].concat(c):f}))}},{key:"getInitialState",value:function(e){var t=this;return ys((function(){var r=ph(e.shape);return r=um(r=ih(r,[1,2])),Array.isArray(t.cell.stateSize)?t.cell.stateSize.map((function(e){return e>1?pm(r,[1,e]):r})):t.cell.stateSize>1?[pm(r,[1,t.cell.stateSize])]:[r]}))}},{key:"setFastWeightInitDuringBuild",value:function(e){_get(_getPrototypeOf(r.prototype),"setFastWeightInitDuringBuild",this).call(this,e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}},{key:"getConfig",value:function(){var e=_get(_getPrototypeOf(r.prototype),"getConfig",this).call(this),t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);var a=this.cell.getConfig();return this.getClassName()===r.className&&(t.cell={className:this.cell.getClassName(),config:a}),Object.assign({},a,e,t)}},{key:"states",get:function(){if(null==this.states_){for(var e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,t=[],r=0;r<e;++r)t.push(null);return t}return this.states_},set:function(e){this.states_=e}},{key:"trainableWeights",get:function(){return this.trainable?this.cell.trainableWeights:[]}},{key:"nonTrainableWeights",get:function(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}}],[{key:"fromConfig",value:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},a=wy(t.cell,r);return new e(Object.assign(t,{cell:a}))}}]),r}(hy);px.className="RNN",f.registerClass(px);var gx=function(e){_inherits(r,e);var t=_createSuper(r);function r(){return _classCallCheck(this,r),t.apply(this,arguments)}return r}(hy),_x=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;return _classCallCheck(this,r),(a=t.call(this,e)).DEFAULT_ACTIVATION="tanh",a.DEFAULT_KERNEL_INITIALIZER="glorotNormal",a.DEFAULT_RECURRENT_INITIALIZER="orthogonal",a.DEFAULT_BIAS_INITIALIZER="zeros",a.units=e.units,E_(a.units,"units"),a.activation=zb(null==e.activation?a.DEFAULT_ACTIVATION:e.activation),a.useBias=null==e.useBias||e.useBias,a.kernelInitializer=jm(e.kernelInitializer||a.DEFAULT_KERNEL_INITIALIZER),a.recurrentInitializer=jm(e.recurrentInitializer||a.DEFAULT_RECURRENT_INITIALIZER),a.biasInitializer=jm(e.biasInitializer||a.DEFAULT_BIAS_INITIALIZER),a.kernelRegularizer=Gb(e.kernelRegularizer),a.recurrentRegularizer=Gb(e.recurrentRegularizer),a.biasRegularizer=Gb(e.biasRegularizer),a.kernelConstraint=W_(e.kernelConstraint),a.recurrentConstraint=W_(e.recurrentConstraint),a.biasConstraint=W_(e.biasConstraint),a.dropout=im([1,om([0,null==e.dropout?0:e.dropout])]),a.recurrentDropout=im([1,om([0,null==e.recurrentDropout?0:e.recurrentDropout])]),a.stateSize=a.units,a.dropoutMask=null,a.recurrentDropoutMask=null,a}return _createClass(r,[{key:"build",value:function(e){e=$m(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.bias=this.useBias?this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.built=!0}},{key:"call",value:function(e,t){var r=this;return ys((function(){if(2!==(e=e).length)throw new d_("SimpleRNNCell expects 2 input Tensors, got ".concat(e.length,"."));var a=e[1];e=e[0];var n,i=null!=t.training&&t.training;0<r.dropout&&r.dropout<1&&null==r.dropoutMask&&(r.dropoutMask=Tx({ones:function(){return Ih(e)},rate:r.dropout,training:i})),0<r.recurrentDropout&&r.recurrentDropout<1&&null==r.recurrentDropoutMask&&(r.recurrentDropoutMask=Tx({ones:function(){return Ih(a)},rate:r.recurrentDropout,training:i}));var o=r.dropoutMask,s=r.recurrentDropoutMask;n=_m(null!=o?Os(e,o):e,r.kernel.read()),null!=r.bias&&(n=xm(n,r.bias.read())),null!=s&&(a=Os(a,s));var l=Fs(n,_m(a,r.recurrentKernel.read()));return null!=r.activation&&(l=r.activation.apply(l)),[l,l]}))}},{key:"getConfig",value:function(){var e=_get(_getPrototypeOf(r.prototype),"getConfig",this).call(this),t={units:this.units,activation:Ob(this.activation),useBias:this.useBias,kernelInitializer:Hm(this.kernelInitializer),recurrentInitializer:Hm(this.recurrentInitializer),biasInitializer:Hm(this.biasInitializer),kernelRegularizer:Ub(this.kernelRegularizer),recurrentRegularizer:Ub(this.recurrentRegularizer),biasRegularizer:Ub(this.biasRegularizer),activityRegularizer:Ub(this.activityRegularizer),kernelConstraint:V_(this.kernelConstraint),recurrentConstraint:V_(this.recurrentConstraint),biasConstraint:V_(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign({},e,t)}}]),r}(gx);_x.className="SimpleRNNCell",f.registerClass(_x);var mx=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){return _classCallCheck(this,r),e.cell=new _x(e),t.call(this,e)}return _createClass(r,[{key:"call",value:function(e,t){var a=this;return ys((function(){return null!=a.cell.dropoutMask&&(bs(a.cell.dropoutMask),a.cell.dropoutMask=null),null!=a.cell.recurrentDropoutMask&&(bs(a.cell.recurrentDropoutMask),a.cell.recurrentDropoutMask=null),_get(_getPrototypeOf(r.prototype),"call",a).call(a,e,{mask:null==t?null:t.mask,training:null==t?null:t.training,initialState:null==t?null:t.initialState})}))}}],[{key:"fromConfig",value:function(e,t){return new e(t)}}]),r}(px);mx.className="SimpleRNN",f.registerClass(mx);var yx=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;if(_classCallCheck(this,r),(a=t.call(this,e)).DEFAULT_ACTIVATION="tanh",a.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",a.DEFAULT_KERNEL_INITIALIZER="glorotNormal",a.DEFAULT_RECURRENT_INITIALIZER="orthogonal",a.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new d_("GRUCell does not support reset_after parameter set to true.");return a.units=e.units,E_(a.units,"units"),a.activation=zb(void 0===e.activation?a.DEFAULT_ACTIVATION:e.activation),a.recurrentActivation=zb(void 0===e.recurrentActivation?a.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),a.useBias=null==e.useBias||e.useBias,a.kernelInitializer=jm(e.kernelInitializer||a.DEFAULT_KERNEL_INITIALIZER),a.recurrentInitializer=jm(e.recurrentInitializer||a.DEFAULT_RECURRENT_INITIALIZER),a.biasInitializer=jm(e.biasInitializer||a.DEFAULT_BIAS_INITIALIZER),a.kernelRegularizer=Gb(e.kernelRegularizer),a.recurrentRegularizer=Gb(e.recurrentRegularizer),a.biasRegularizer=Gb(e.biasRegularizer),a.kernelConstraint=W_(e.kernelConstraint),a.recurrentConstraint=W_(e.recurrentConstraint),a.biasConstraint=W_(e.biasConstraint),a.dropout=im([1,om([0,null==e.dropout?0:e.dropout])]),a.recurrentDropout=im([1,om([0,null==e.recurrentDropout?0:e.recurrentDropout])]),a.implementation=e.implementation,a.stateSize=a.units,a.dropoutMask=null,a.recurrentDropoutMask=null,_possibleConstructorReturn(a)}return _createClass(r,[{key:"build",value:function(e){e=$m(e),this.kernel=this.addWeight("kernel",[e[e.length-1],3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.bias=this.useBias?this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.built=!0}},{key:"call",value:function(e,t){var r=this;return ys((function(){if(2!==(e=e).length)throw new d_("GRUCell expects 2 input Tensors (inputs, h, c), got "+e.length+".");var a=null!=t.training&&t.training,n=e[1];e=e[0],0<r.dropout&&r.dropout<1&&null==r.dropoutMask&&(r.dropoutMask=Tx({ones:function(){return Ih(e)},rate:r.dropout,training:a,count:3})),0<r.recurrentDropout&&r.recurrentDropout<1&&null==r.recurrentDropoutMask&&(r.recurrentDropoutMask=Tx({ones:function(){return Ih(n)},rate:r.recurrentDropout,training:a,count:3}));var i,o,s,l=r.recurrentDropoutMask;0<r.dropout&&r.dropout<1&&(e=Os(e,r.dropoutMask[0]));var u=_m(e,r.kernel.read());r.useBias&&(u=xm(u,r.bias.read())),0<r.recurrentDropout&&r.recurrentDropout<1&&(n=Os(n,l[0]));var h=r.recurrentKernel.read(),c=_slicedToArray(yc(h,[2*r.units,r.units],h.rank-1),2),f=c[0],d=c[1],v=_m(n,f),p=_slicedToArray(yc(u,3,u.rank-1),3),g=p[0],_=p[1],m=p[2],y=_slicedToArray(yc(v,2,v.rank-1),2),b=y[0],x=y[1];i=r.recurrentActivation.apply(Fs(g,b)),o=r.recurrentActivation.apply(Fs(_,x));var k=_m(Os(o,n),d);s=r.activation.apply(Fs(m,k));var w=Fs(Os(i,n),Os(Fs(1,th(i)),s));return[w,w]}))}},{key:"getConfig",value:function(){var e=_get(_getPrototypeOf(r.prototype),"getConfig",this).call(this),t={units:this.units,activation:Ob(this.activation),recurrentActivation:Ob(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Hm(this.kernelInitializer),recurrentInitializer:Hm(this.recurrentInitializer),biasInitializer:Hm(this.biasInitializer),kernelRegularizer:Ub(this.kernelRegularizer),recurrentRegularizer:Ub(this.recurrentRegularizer),biasRegularizer:Ub(this.biasRegularizer),activityRegularizer:Ub(this.activityRegularizer),kernelConstraint:V_(this.kernelConstraint),recurrentConstraint:V_(this.recurrentConstraint),biasConstraint:V_(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign({},e,t)}}]),r}(gx);yx.className="GRUCell",f.registerClass(yx);var bx=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){return _classCallCheck(this,r),0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new yx(e),t.call(this,e)}return _createClass(r,[{key:"call",value:function(e,t){var a=this;return ys((function(){return null!=a.cell.dropoutMask&&(bs(a.cell.dropoutMask),a.cell.dropoutMask=null),null!=a.cell.recurrentDropoutMask&&(bs(a.cell.recurrentDropoutMask),a.cell.recurrentDropoutMask=null),_get(_getPrototypeOf(r.prototype),"call",a).call(a,e,{mask:null==t?null:t.mask,training:null==t?null:t.training,initialState:null==t?null:t.initialState})}))}}],[{key:"fromConfig",value:function(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}]),r}(px);bx.className="GRU",f.registerClass(bx);var xx=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;return _classCallCheck(this,r),(a=t.call(this,e)).DEFAULT_ACTIVATION="tanh",a.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",a.DEFAULT_KERNEL_INITIALIZER="glorotNormal",a.DEFAULT_RECURRENT_INITIALIZER="orthogonal",a.DEFAULT_BIAS_INITIALIZER="zeros",a.units=e.units,E_(a.units,"units"),a.activation=zb(void 0===e.activation?a.DEFAULT_ACTIVATION:e.activation),a.recurrentActivation=zb(void 0===e.recurrentActivation?a.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),a.useBias=null==e.useBias||e.useBias,a.kernelInitializer=jm(e.kernelInitializer||a.DEFAULT_KERNEL_INITIALIZER),a.recurrentInitializer=jm(e.recurrentInitializer||a.DEFAULT_RECURRENT_INITIALIZER),a.biasInitializer=jm(e.biasInitializer||a.DEFAULT_BIAS_INITIALIZER),a.unitForgetBias=e.unitForgetBias,a.kernelRegularizer=Gb(e.kernelRegularizer),a.recurrentRegularizer=Gb(e.recurrentRegularizer),a.biasRegularizer=Gb(e.biasRegularizer),a.kernelConstraint=W_(e.kernelConstraint),a.recurrentConstraint=W_(e.recurrentConstraint),a.biasConstraint=W_(e.biasConstraint),a.dropout=im([1,om([0,null==e.dropout?0:e.dropout])]),a.recurrentDropout=im([1,om([0,null==e.recurrentDropout?0:e.recurrentDropout])]),a.implementation=e.implementation,a.stateSize=[a.units,a.units],a.dropoutMask=null,a.recurrentDropoutMask=null,a}return _createClass(r,[{key:"build",value:function(e){var t,r;if(e=$m(e),this.kernel=this.addWeight("kernel",[e[e.length-1],4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){var a=this.biasInitializer,n=this.units;r=new((t=function(e){_inherits(r,e);var t=_createSuper(r);function r(){return _classCallCheck(this,r),t.apply(this,arguments)}return _createClass(r,[{key:"apply",value:function(e,t){var r=a.apply([n]),i=(new Am).apply([n]),o=a.apply([2*n]);return vm(vm(r,i),o)}}]),r}(Sm)).className="CustomInit",t)}else r=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,r,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}},{key:"call",value:function(e,t){var r=this;return ys((function(){var a=null!=t.training&&t.training;if(3!==(e=e).length)throw new d_("LSTMCell expects 3 input Tensors (inputs, h, c), got "+e.length+".");var n=e[1],i=e[2];e=e[0],0<r.dropout&&r.dropout<1&&null==r.dropoutMask&&(r.dropoutMask=Tx({ones:function(){return Ih(e)},rate:r.dropout,training:a,count:4})),0<r.recurrentDropout&&r.recurrentDropout<1&&null==r.recurrentDropoutMask&&(r.recurrentDropoutMask=Tx({ones:function(){return Ih(n)},rate:r.recurrentDropout,training:a,count:4}));var o,s,l,u,h=r.recurrentDropoutMask;0<r.dropout&&r.dropout<1&&(e=Os(e,r.dropoutMask[0]));var c=_m(e,r.kernel.read());0<r.recurrentDropout&&r.recurrentDropout<1&&(n=Os(n,h[0])),c=Fs(c,_m(n,r.recurrentKernel.read())),r.useBias&&(c=xm(c,r.bias.read()));var f=_slicedToArray(yc(c,4,c.rank-1),4),d=f[0],v=f[1],p=f[2],g=f[3];o=r.recurrentActivation.apply(d),s=r.recurrentActivation.apply(v),l=Fs(Os(s,i),Os(o,r.activation.apply(p))),u=r.recurrentActivation.apply(g);var _=Os(u,r.activation.apply(l));return[_,_,l]}))}},{key:"getConfig",value:function(){var e=_get(_getPrototypeOf(r.prototype),"getConfig",this).call(this),t={units:this.units,activation:Ob(this.activation),recurrentActivation:Ob(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Hm(this.kernelInitializer),recurrentInitializer:Hm(this.recurrentInitializer),biasInitializer:Hm(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:Ub(this.kernelRegularizer),recurrentRegularizer:Ub(this.recurrentRegularizer),biasRegularizer:Ub(this.biasRegularizer),activityRegularizer:Ub(this.activityRegularizer),kernelConstraint:V_(this.kernelConstraint),recurrentConstraint:V_(this.recurrentConstraint),biasConstraint:V_(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign({},e,t)}}]),r}(gx);xx.className="LSTMCell",f.registerClass(xx);var kx=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){return _classCallCheck(this,r),0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new xx(e),t.call(this,e)}return _createClass(r,[{key:"call",value:function(e,t){var a=this;return ys((function(){return null!=a.cell.dropoutMask&&(bs(a.cell.dropoutMask),a.cell.dropoutMask=null),null!=a.cell.recurrentDropoutMask&&(bs(a.cell.recurrentDropoutMask),a.cell.recurrentDropoutMask=null),_get(_getPrototypeOf(r.prototype),"call",a).call(a,e,{mask:null==t?null:t.mask,training:null==t?null:t.training,initialState:null==t?null:t.initialState})}))}}],[{key:"fromConfig",value:function(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}]),r}(px);kx.className="LSTM",f.registerClass(kx);var wx,Cx=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;return _classCallCheck(this,r),(a=t.call(this,e)).cells=e.cells,a}return _createClass(r,[{key:"call",value:function(e,t){var r=this;return ys((function(){var a,n=(e=e).slice(1),i=[],o=_createForOfIteratorHelper(r.cells.slice().reverse());try{for(o.s();!(a=o.n()).done;){var s=a.value;Array.isArray(s.stateSize)?i.push(n.splice(0,s.stateSize.length)):i.push(n.splice(0,1))}}catch(hE){o.e(hE)}finally{o.f()}i.reverse();for(var l,u=[],h=0;h<r.cells.length;++h){var c=r.cells[h];n=i[h],l=0===h?[e[0]].concat(n):[l[0]].concat(n),l=c.call(l,t),u.push(l.slice(1))}n=[];var f,d=_createForOfIteratorHelper(u.slice().reverse());try{for(d.s();!(f=d.n()).done;){var v,p=f.value;(v=n).push.apply(v,_toConsumableArray(p))}}catch(hE){d.e(hE)}finally{d.f()}return[l[0]].concat(n)}))}},{key:"build",value:function(e){var t;Ym(e)&&(e=e[0]),e=e,this.cells.forEach((function(r,a){Z_("RNNCell_"+a,(function(){r.build(e),t=Array.isArray(r.stateSize)?r.stateSize[0]:r.stateSize,e=[e[0],t]}))})),this.built=!0}},{key:"getConfig",value:function(){var e=_get(_getPrototypeOf(r.prototype),"getConfig",this).call(this),t=this.cells.map((function(e){return{className:e.getClassName(),config:e.getConfig()}}));return Object.assign({},e,{cells:t})}},{key:"getWeights",value:function(){var e,t=[],r=_createForOfIteratorHelper(this.cells);try{for(r.s();!(e=r.n()).done;){var a=e.value;t.push.apply(t,_toConsumableArray(a.weights))}}catch(hE){r.e(hE)}finally{r.f()}return ry(t)}},{key:"setWeights",value:function(e){var t,r=[],a=_createForOfIteratorHelper(this.cells);try{for(a.s();!(t=a.n()).done;)for(var n=t.value,i=e.splice(n.weights.length),o=0;o<n.weights.length;++o)r.push([n.weights[o],i[o]])}catch(hE){a.e(hE)}finally{a.f()}ay(r)}},{key:"stateSize",get:function(){var e,t=[],r=_createForOfIteratorHelper(this.cells.slice().reverse());try{for(r.s();!(e=r.n()).done;){var a=e.value;Array.isArray(a.stateSize)?t.push.apply(t,_toConsumableArray(a.stateSize)):t.push(a.stateSize)}}catch(hE){r.e(hE)}finally{r.f()}return t}},{key:"trainableWeights",get:function(){if(!this.trainable)return[];var e,t=[],r=_createForOfIteratorHelper(this.cells);try{for(r.s();!(e=r.n()).done;){var a=e.value;t.push.apply(t,_toConsumableArray(a.trainableWeights))}}catch(hE){r.e(hE)}finally{r.f()}return t}},{key:"nonTrainableWeights",get:function(){var e,t=[],r=_createForOfIteratorHelper(this.cells);try{for(r.s();!(e=r.n()).done;){var a=e.value;t.push.apply(t,_toConsumableArray(a.nonTrainableWeights))}}catch(hE){r.e(hE)}finally{r.f()}if(!this.trainable){var n,i=[],o=_createForOfIteratorHelper(this.cells);try{for(o.s();!(n=o.n()).done;){var s=n.value;i.push.apply(i,_toConsumableArray(s.trainableWeights))}}catch(hE){o.e(hE)}finally{o.f()}return i.concat(t)}return t}}],[{key:"fromConfig",value:function(e,t){var r,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},n=[],i=_createForOfIteratorHelper(t.cells);try{for(i.s();!(r=i.n()).done;){var o=r.value;n.push(wy(o,a))}}catch(hE){i.e(hE)}finally{i.f()}return new e({cells:n})}}]),r}(gx);function Tx(e){var t=e.ones,r=e.rate,a=e.training,n=void 0!==a&&a,i=e.count,o=void 0===i?1:i,s=function(){return km(t(),r)},l=function(){return wm(s,t,n)};return!o||o<=1?xs(l().clone()):Array(o).fill(void 0).map(l).map((function(e){return xs(e.clone())}))}Cx.className="StackedRNNCells",f.registerClass(Cx);var Sx=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;if(_classCallCheck(this,r),e.unroll)throw new v_("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new v_("It is not possible at the moment to stack convolutional cells.");return(a=t.call(this,e)).inputSpec=[new iy({ndim:5})],a}return _createClass(r,[{key:"call",value:function(e,t){var a=this;return ys((function(){if(null!=a.cell.dropoutMask&&(bs(a.cell.dropoutMask),a.cell.dropoutMask=null),null!=a.cell.recurrentDropoutMask&&(bs(a.cell.recurrentDropoutMask),a.cell.recurrentDropoutMask=null),t&&t.constants)throw new d_("ConvRNN2D cell does not support constants");return _get(_getPrototypeOf(r.prototype),"call",a).call(a,e,{mask:null==t?null:t.mask,training:null==t?null:t.training,initialState:null==t?null:t.initialState})}))}},{key:"computeOutputShape",value:function(e){var t=this.computeSingleOutputShape(e);return this.returnSequences||(t=[t[0]].concat(_toConsumableArray(t.slice(2)))),this.returnState&&(t=[t].concat(_toConsumableArray(Array(2).fill([e[0]].concat(_toConsumableArray(t.slice(-3))))))),t}},{key:"getInitialState",value:function(e){var t=this;return ys((function(){var r=t.cell.stateSize,a=t.computeSingleOutputShape(e.shape),n=ph([a[0]].concat(_toConsumableArray(a.slice(2))));return Array.isArray(r)?Array(r.length).fill(n):[n]}))}},{key:"resetStates",value:function(e){var t=this,r=arguments.length>1&&void 0!==arguments[1]&&arguments[1];ys((function(){if(!t.stateful)throw new c_("Cannot call resetStates() on an RNN Layer that is not stateful.");var n=t.inputSpec[0].shape,i=t.computeSingleOutputShape(n),o=[i[0]].concat(_toConsumableArray(i.slice(2)));if(null==n[0])throw new d_("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==t.getStates())t.states_=Array.isArray(t.cell.stateSize)?t.cell.stateSize.map((function(){return ph(o)})):[ph(o)];else if(null==e)bs(t.states_),null!=t.keptStates&&(bs(t.keptStates),t.keptStates=[]),Array.isArray(t.cell.stateSize)?t.states_=t.cell.stateSize.map((function(){return ph(o)})):t.states_[0]=ph(o);else{if(Array.isArray(e)||(e=[e]),e.length!==t.states_.length)throw new d_("Layer ".concat(t.name," expects ").concat(t.states_.length," state(s), but it received ").concat(e.length," state value(s). Input received: ")+e);r?t.keptStates.push(t.states_.slice()):bs(t.states_);for(var s=0;s<t.states_.length;++s){var l=e[s],u=o;if(!a.arraysEqual(l.shape,u))throw new d_("State ".concat(s," is incompatible with layer ").concat(t.name,": expected shape=").concat(u,", received shape=").concat(l.shape));t.states_[s]=l}}t.states_=t.states_.map((function(e){return xs(e.clone())}))}))}},{key:"computeSingleOutputShape",value:function(e){var t=this.cell,r=t.dataFormat,a=t.filters,n=t.kernelSize,i=t.padding,o=t.strides,s=t.dilationRate,l="channelsFirst"===r,u=e[l?4:3],h=Jb(e[l?3:2],n[0],i,o[0],s[0]),c=Jb(u,n[1],i,o[1],s[1]);return[].concat(_toConsumableArray(e.slice(0,2)),_toConsumableArray(l?[a,h,c]:[h,c,a]))}}]),r}(px);Sx.className="ConvRNN2D";var Ix=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;_classCallCheck(this,r);var n=e.filters,i=e.kernelSize,o=e.strides,s=e.padding,l=e.dataFormat,u=e.dilationRate;return(a=t.call(this,Object.assign({},e,{units:n}))).filters=n,E_(a.filters,"filters"),a.kernelSize=Yb(i,2,"kernelSize"),a.kernelSize.forEach((function(e){return E_(e,"kernelSize")})),a.strides=Yb(o||1,2,"strides"),a.strides.forEach((function(e){return E_(e,"strides")})),a.padding=s||"valid",Q_(a.padding),a.dataFormat=l||"channelsLast",K_(a.dataFormat),a.dilationRate=Yb(u||1,2,"dilationRate"),a.dilationRate.forEach((function(e){return E_(e,"dilationRate")})),a}return _createClass(r,[{key:"build",value:function(e){var t;e=$m(e);var r="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[r])throw new d_("The channel dimension of the input should be defined. Found "+e[r]);var a=this.kernelSize.concat([e[r],4*this.filters]);this.kernel=this.addWeight("kernel",a,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);var n=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",n,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){var i;if(this.unitForgetBias){var o=this.biasInitializer,s=this.filters;i=new((t=function(e){_inherits(r,e);var t=_createSuper(r);function r(){return _classCallCheck(this,r),t.apply(this,arguments)}return _createClass(r,[{key:"apply",value:function(e,t){return dm([o.apply([s]),gh([s]),o.apply([2*s])])}}]),r}(Sm)).className="CustomInit",t)}else i=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,i,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}},{key:"call",value:function(e,t){var r=this;return ys((function(){if(3!==e.length)throw new d_("ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got "+e.length+".");var a=t.training||!1,n=e[0],i=e[1],o=e[2];0<r.dropout&&r.dropout<1&&null==r.dropoutMask&&(r.dropoutMask=Tx({ones:function(){return Ih(n)},rate:r.dropout,training:a,count:4}));var s=r.dropoutMask,l=function(e,t,r){return t&&t[r]?Os(t[r],e):e},u=l(n,s,0),h=l(n,s,1),c=l(n,s,2),f=l(n,s,3);0<r.recurrentDropout&&r.recurrentDropout<1&&null==r.recurrentDropoutMask&&(r.recurrentDropoutMask=Tx({ones:function(){return Ih(i)},rate:r.recurrentDropout,training:a,count:4}));var d=r.recurrentDropoutMask,v=l(i,d,0),p=l(i,d,1),g=l(i,d,2),_=l(i,d,3),m=_slicedToArray(yc(r.kernel.read(),4,3),4),y=m[0],b=m[1],x=m[2],k=m[3],w=_slicedToArray(r.useBias?yc(r.bias.read(),4):[null,null,null,null],4),C=w[0],T=w[1],S=w[2],I=w[3];u=r.inputConv(u,y,C,r.padding),h=r.inputConv(h,b,T,r.padding),c=r.inputConv(c,x,S,r.padding),f=r.inputConv(f,k,I,r.padding);var A=_slicedToArray(yc(r.recurrentKernel.read(),4,3),4),R=A[0],N=A[1],E=A[2],F=A[3];v=r.recurrentConv(v,R),p=r.recurrentConv(p,N),g=r.recurrentConv(g,E),_=r.recurrentConv(_,F);var M=r.recurrentActivation.apply(Fs(u,v)),D=r.recurrentActivation.apply(Fs(h,p)),O=Fs(Os(D,o),Os(M,r.activation.apply(Fs(c,g)))),L=Os(r.recurrentActivation.apply(Fs(f,_)),r.activation.apply(O));return[L,L,O]}))}},{key:"getConfig",value:function(){var e=function(e,t){var r={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&t.indexOf(a)<0&&(r[a]=e[a]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var n=0;for(a=Object.getOwnPropertySymbols(e);n<a.length;n++)t.indexOf(a[n])<0&&Object.prototype.propertyIsEnumerable.call(e,a[n])&&(r[a[n]]=e[a[n]])}return r}(_get(_getPrototypeOf(r.prototype),"getConfig",this).call(this),["units"]);return Object.assign({},e,{filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides})}},{key:"inputConv",value:function(e,t,r,a){var n=hu(e,t,this.strides,a||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return r?xm(n,r,this.dataFormat):n}},{key:"recurrentConv",value:function(e,t){return hu(e,t,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}]),r}(xx);Ix.className="ConvLSTM2DCell",f.registerClass(Ix);var Ax=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){_classCallCheck(this,r);var a=new Ix(e);return t.call(this,Object.assign({},e,{cell:a}))}return _createClass(r,null,[{key:"fromConfig",value:function(e,t){return new e(t)}}]),r}(Sx);Ax.className="ConvLSTM2D",f.registerClass(Ax);var Rx=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;return _classCallCheck(this,r),(a=t.call(this,e)).rate=Math.max(Math.min(e.rate,1),0),a.noiseShape=e.noiseShape,a.seed=e.seed,a.supportsMasking=!0,a}return _createClass(r,[{key:"getNoiseShape",value:function(e){if(null==this.noiseShape)return this.noiseShape;for(var t=e.shape,r=[],a=0;a<this.noiseShape.length;++a)r.push(null==this.noiseShape[a]?t[a]:this.noiseShape[a]);return r}},{key:"call",value:function(e,t){var r=this;return ys((function(){r.invokeCallHook(e,t);var a=Zm(e);if(0<r.rate&&r.rate<1){var n=null!=t.training&&t.training,i=r.getNoiseShape(a);return wm((function(){return km(a,r.rate,i,r.seed)}),(function(){return a}),n)}return e}))}},{key:"getConfig",value:function(){var e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},t=_get(_getPrototypeOf(r.prototype),"getConfig",this).call(this);return Object.assign(e,t),e}},{key:"dispose",value:function(){return _get(_getPrototypeOf(r.prototype),"dispose",this).call(this)}}]),r}(hy);Rx.className="Dropout",f.registerClass(Rx);var Nx=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;return _classCallCheck(this,r),(a=t.call(this,e)).inputSpec=[{ndim:3}],a}return _createClass(r,[{key:"getNoiseShape",value:function(e){var t=e.shape;return[t[0],1,t[2]]}}]),r}(Rx);Nx.className="SpatialDropout1D",f.registerClass(Nx);var Ex=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;if(_classCallCheck(this,r),(a=t.call(this,e)).activation=null,a.useBias=!0,a.kernel=null,a.bias=null,a.DEFAULT_KERNEL_INITIALIZER="glorotNormal",a.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){var n=null;null!=e.batchSize&&(n=e.batchSize),a.batchInputShape=[n,e.inputDim]}return a.units=e.units,E_(a.units,"units"),a.activation=zb(e.activation),null!=e.useBias&&(a.useBias=e.useBias),a.kernelInitializer=jm(e.kernelInitializer||a.DEFAULT_KERNEL_INITIALIZER),a.biasInitializer=jm(e.biasInitializer||a.DEFAULT_BIAS_INITIALIZER),a.kernelConstraint=W_(e.kernelConstraint),a.biasConstraint=W_(e.biasConstraint),a.kernelRegularizer=Gb(e.kernelRegularizer),a.biasRegularizer=Gb(e.biasRegularizer),a.activityRegularizer=Gb(e.activityRegularizer),a.supportsMasking=!0,a.inputSpec=[{minNDim:2}],_possibleConstructorReturn(a)}return _createClass(r,[{key:"build",value:function(e){var t=(e=$m(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[t,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:_defineProperty({},-1,t)}],this.built=!0}},{key:"computeOutputShape",value:function(e){var t=(e=$m(e)).slice();return t[t.length-1]=this.units,t}},{key:"call",value:function(e,t){var r=this;return ys((function(){r.invokeCallHook(e,t);var a,n=Zm(e),i=F_(r.activation.getClassName());return null!=i?a=_m(n,r.kernel.read(),i,r.bias?r.bias.read():null):(a=_m(n,r.kernel.read()),null!=r.bias&&(a=xm(a,r.bias.read())),null!=r.activation&&(a=r.activation.apply(a))),a}))}},{key:"getConfig",value:function(){var e={units:this.units,activation:Ob(this.activation),useBias:this.useBias,kernelInitializer:Hm(this.kernelInitializer),biasInitializer:Hm(this.biasInitializer),kernelRegularizer:Ub(this.kernelRegularizer),biasRegularizer:Ub(this.biasRegularizer),activityRegularizer:Ub(this.activityRegularizer),kernelConstraint:V_(this.kernelConstraint),biasConstraint:V_(this.biasConstraint)},t=_get(_getPrototypeOf(r.prototype),"getConfig",this).call(this);return Object.assign(e,t),e}}]),r}(hy);Ex.className="Dense",f.registerClass(Ex);var Fx=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;return _classCallCheck(this,r),(a=t.call(this,e=e||{})).inputSpec=[{minNDim:3}],a.dataFormat=e.dataFormat,a}return _createClass(r,[{key:"computeOutputShape",value:function(e){var t,r=_createForOfIteratorHelper((e=$m(e)).slice(1));try{for(r.s();!(t=r.n()).done;){if(null==t.value)throw new d_('The shape of the input to "Flatten" is not fully defined (got '.concat(e.slice(1),'). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.'))}}catch(hE){r.e(hE)}finally{r.f()}return[e[0],am(e,1)]}},{key:"call",value:function(e,t){var r=this;return ys((function(){r.invokeCallHook(e,t);var a=Zm(e);if("channelsFirst"===r.dataFormat&&a.rank>1){for(var n=[0],i=2;i<a.rank;++i)n.push(i);n.push(1),a=a.transpose(n)}return function(e){if(e.rank<=1)throw new d_("batchFlatten requires a minimum rank of 2. Got rank: ".concat(e.rank,"."));var t=[e.shape[0],am(e.shape,1)];return e.reshape(t)}(a)}))}},{key:"getConfig",value:function(){var e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);var t=_get(_getPrototypeOf(r.prototype),"getConfig",this).call(this);return Object.assign(e,t),e}}]),r}(hy);Fx.className="Flatten",f.registerClass(Fx);var Mx=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;return _classCallCheck(this,r),(a=t.call(this,e)).supportsMasking=!0,a.activation=zb(e.activation),a}return _createClass(r,[{key:"call",value:function(e,t){var r=this;return ys((function(){r.invokeCallHook(e,t);var a=Zm(e);return r.activation.apply(a)}))}},{key:"getConfig",value:function(){var e={activation:Ob(this.activation)},t=_get(_getPrototypeOf(r.prototype),"getConfig",this).call(this);return Object.assign(e,t),e}}]),r}(hy);Mx.className="Activation",f.registerClass(Mx);var Dx=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;return _classCallCheck(this,r),(a=t.call(this,e)).n=e.n,a.inputSpec=[{ndim:2}],a}return _createClass(r,[{key:"computeOutputShape",value:function(e){return[e[0],this.n,e[1]]}},{key:"call",value:function(e,t){var r=this;return ys((function(){return e=Zm(e),t=e,a=r.n,ys((function(){if(2!==t.shape.length)throw new d_("repeat() expects a rank-2 tensor, but received a rank-".concat(t.shape.length," tensor."));return pm(um(t,1),[1,a,1])}));var t,a}))}},{key:"getConfig",value:function(){var e={n:this.n},t=_get(_getPrototypeOf(r.prototype),"getConfig",this).call(this);return Object.assign(e,t),e}}]),r}(hy);Dx.className="RepeatVector",f.registerClass(Dx);var Ox=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;_classCallCheck(this,r),(a=t.call(this,e)).targetShape=e.targetShape;for(var n=0;n<a.targetShape.length;++n)a.isUnknown(a.targetShape[n])&&(a.targetShape[n]=null);return a}return _createClass(r,[{key:"isUnknown",value:function(e){return e<0||null==e}},{key:"fixUnknownDimension",value:function(e,t){for(var r="Total size of new array must be unchanged.",a=t.slice(),n=1,i=null,o=0;o<a.length;++o){var s=a[o];if(this.isUnknown(s)){if(null!==i)throw new d_("Can only specifiy one unknown dimension.");i=o}else n*=s}var l=am(e);if(null!==i){if(0===n||l%n!=0)throw new d_(r);a[i]=l/n}else if(l!==n)throw new d_(r);return a}},{key:"computeOutputShape",value:function(e){for(var t=!1,r=0;r<e.length;++r)if(this.isUnknown(e[r])){t=!0;break}return t?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}},{key:"call",value:function(e,t){var r=this;return ys((function(){r.invokeCallHook(e,t);var a=Zm(e),n=a.shape,i=n.slice(0,1).concat(r.fixUnknownDimension(n.slice(1),r.targetShape));return a.reshape(i)}))}},{key:"getConfig",value:function(){var e={targetShape:this.targetShape},t=_get(_getPrototypeOf(r.prototype),"getConfig",this).call(this);return Object.assign(e,t),e}}]),r}(hy);Ox.className="Reshape",f.registerClass(Ox);var Lx=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var n;if(_classCallCheck(this,r),n=t.call(this,e),null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error("Permute constructor requires `dims` to be an Array, but received "+e.dims+" instead.");var i=sm(1,e.dims.length+1);if(!a.arraysEqual(e.dims.slice().sort(),i))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");return n.dims=e.dims,n.dimsIncludingBatch=[0].concat(n.dims),n.inputSpec=[new iy({ndim:n.dims.length+1})],_possibleConstructorReturn(n)}return _createClass(r,[{key:"computeOutputShape",value:function(e){var t=(e=$m(e)).slice();return this.dims.forEach((function(r,a){t[a+1]=e[r]})),t}},{key:"call",value:function(e,t){return So(Zm(e),this.dimsIncludingBatch)}},{key:"getConfig",value:function(){var e={dims:this.dims},t=_get(_getPrototypeOf(r.prototype),"getConfig",this).call(this);return Object.assign(e,t),e}}]),r}(hy);Lx.className="Permute",f.registerClass(Lx);var zx=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;return _classCallCheck(this,r),(a=t.call(this,null==e?{}:e)).supportsMasking=!0,a.maskValue=null!=e?null==e.maskValue?0:e.maskValue:0,a}return _createClass(r,[{key:"computeOutputShape",value:function(e){return e}},{key:"getConfig",value:function(){var e=_get(_getPrototypeOf(r.prototype),"getConfig",this).call(this),t={maskValue:this.maskValue};return Object.assign(t,e),t}},{key:"computeMask",value:function(e,t){var r=Zm(e);return xl(Th(r,this.maskValue),-1)}},{key:"call",value:function(e,t){var r=this;return ys((function(){r.invokeCallHook(e,t);var a=Zm(e),n=xl(Th(a,r.maskValue),-1,!0);return a.mul(n.asType(a.dtype))}))}}]),r}(hy);zx.className="Masking",f.registerClass(zx);var Bx=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;if(_classCallCheck(this,r),(a=t.call(this,e)).embeddings=null,a.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){var n=null;null!=e.batchSize&&(n=e.batchSize),a.batchInputShape=null==e.inputLength?[n,null]:[n].concat(b_(e.inputLength))}return a.inputDim=e.inputDim,E_(a.inputDim,"inputDim"),a.outputDim=e.outputDim,E_(a.outputDim,"outputDim"),a.embeddingsInitializer=jm(e.embeddingsInitializer||a.DEFAULT_EMBEDDINGS_INITIALIZER),a.embeddingsRegularizer=Gb(e.embeddingsRegularizer),a.activityRegularizer=Gb(e.activityRegularizer),a.embeddingsConstraint=W_(e.embeddingsConstraint),a.maskZero=e.maskZero,a.supportsMasking=e.maskZero,a.inputLength=e.inputLength,_possibleConstructorReturn(a)}return _createClass(r,[{key:"build",value:function(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}},{key:"warnOnIncompatibleInputShape",value:function(e){}},{key:"computeMask",value:function(e,t){var r=this;return ys((function(){return r.maskZero?(e=Zm(e),Th(e,Bs(e))):null}))}},{key:"computeOutputShape",value:function(e){if(e=$m(e),null==this.inputLength)return[].concat(_toConsumableArray(e),[this.outputDim]);var t=b_(this.inputLength);if(t.length!==e.length-1)throw new d_('"inputLength" is '.concat(this.inputLength,", but received input shape has shape ")+e);for(var r=0,a=0;a<t.length;++a){var n=t[a],i=e[a+1];if(null!=n&&null!=i&&n!==i)throw new d_('"inputLength" is '.concat(this.inputLength,", but received input shape has shape ")+e);null==n&&(t[r]=i),r++}return[e[0]].concat(_toConsumableArray(t),[this.outputDim])}},{key:"call",value:function(e,t){var r=this;return ys((function(){r.invokeCallHook(e,t);var a=Zm(e);return"int32"!==a.dtype&&(a=lm(a,"int32")),mm(r.embeddings.read(),a.as1D()).reshape($m(r.computeOutputShape(a.shape)))}))}},{key:"getConfig",value:function(){var e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:Hm(this.embeddingsInitializer),embeddingsRegularizer:Ub(this.embeddingsRegularizer),activityRegularizer:Ub(this.activityRegularizer),embeddingsConstraint:V_(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},t=_get(_getPrototypeOf(r.prototype),"getConfig",this).call(this);return Object.assign(e,t),e}}]),r}(hy);Bx.className="Embedding",f.registerClass(Bx);var Px=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;return _classCallCheck(this,r),(a=t.call(this,e||{})).supportsMasking=!0,a}return _createClass(r,[{key:"mergeFunction",value:function(e){throw new v_}},{key:"computeElementwiseOpOutputShape",value:function(e,t){if(null==e||null==t)return null;if(e.length<t.length)return this.computeElementwiseOpOutputShape(t,e);if(0===t.length)return e;for(var r=e.slice(0,e.length-t.length),a=0;a<t.length;++a){var n=e[e.length-t.length+a],i=t[a];if(null==n||null==i||n<0||i<0)r.push(null);else if(1===n)r.push(i);else if(1===i)r.push(n);else{if(n!==i)throw new d_("Operands could not be broadcast together with shapes "+JSON.stringify(e)+" "+JSON.stringify(t));r.push(n)}}return r}},{key:"build",value:function(e){if(Array.isArray(e)&&!Array.isArray(e[0])&&(e=[$m(e)]),(e=e).length<2)throw new d_("A merge layer should be called on an Array of at least 2 inputs. Got ".concat(e.length," input(s)."));var t,r=[],a=_createForOfIteratorHelper(e);try{for(a.s();!(t=a.n()).done;){var n=t.value;null!=n&&null!==n[0]&&r.push(n[0])}}catch(hE){a.e(hE)}finally{a.f()}if((r=I_(r)).length>1)throw new d_("Can not merge tensors with different batch sizes. Got tensors with shapes: ".concat(JSON.stringify(e),"."));for(var i=null==e[0]?null:e[0].slice(1),o=1;o<e.length;++o){var s=null==e[o]?null:e[o].slice(1);i=this.computeElementwiseOpOutputShape(i,s)}var l=e.map((function(e){return e.length}));this.reshapeRequired=-1!==e.indexOf(null)||1!==I_(l).length}},{key:"call",value:function(e,t){var r=this;return ys((function(){if(e=e,r.reshapeRequired){var t=[],a=e.map((function(e){return e.rank}));if(-1===a.indexOf(null)){var n,i=om(a),o=_createForOfIteratorHelper(e);try{for(o.s();!(n=o.n()).done;){for(var s=n.value,l=s.rank,u=0;u<i-l;++u)s=um(s,1);t.push(s)}}catch(hE){o.e(hE)}finally{o.f()}return r.mergeFunction(t)}var h,c=!1,f=_createForOfIteratorHelper(e);try{for(f.s();!(h=f.n()).done;){var d=h.value,v=d.rank;if(null==v){var p=d.shape,g=p[0],_=p.slice(1).concat([g]),m=d.reshape([g].concat(am(p.slice(1))));m=(m=So(m,[1,0])).reshape(_),t.push(m),c=!0}else if(v>1){var y=sm(1,v).concat([0]);t.push(So(d,y)),c=!0}else t.push(d)}}catch(hE){f.e(hE)}finally{f.f()}var b=r.mergeFunction(t),x=b.rank;if(c)if(null==x){var k=b.shape,w=k[k.length-1],C=[w].concat(k.slice(0,k.length-1));b=So(b.reshape([-1,w]),[1,0]).reshape(C)}else if(x>1){var T=[x-1].concat(sm(0,x-1));b=So(b,T)}return b}return r.mergeFunction(e)}))}},{key:"computeOutputShape",value:function(e){var t;t=null==(e=e)[0]?null:e[0].slice(1);for(var r=1;r<e.length;++r){var a=null==e[r]?null:e[r].slice(1);t=this.computeElementwiseOpOutputShape(t,a)}var n,i=[],o=_createForOfIteratorHelper(e);try{for(o.s();!(n=o.n()).done;){var s=n.value;null!=s&&null!==s[0]&&i.push(s[0])}}catch(hE){o.e(hE)}finally{o.f()}return t=1===(i=I_(i)).length?i.concat(t):[null].concat(t)}},{key:"computeMask",value:function(e,t){return ys((function(){if(null==t)return null;if(!Array.isArray(t))throw new d_("`mask` should be an Array");if(!Array.isArray(e))throw new d_("`inputs` should be an Array");if(t.length!==e.length)throw new d_("The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (".concat(e.length," vs ").concat(t.length,")"));if(t.every((function(e){return null==e})))return null;for(var r=(t=t.map((function(e){return null==e?e:Eu(e,0)})))[0],a=1;a<t.length-1;++a)r=lh(r,t[a]);return r}))}}]),r}(hy),Vx=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){return _classCallCheck(this,r),t.call(this,e)}return _createClass(r,[{key:"mergeFunction",value:function(e){return ys((function(){for(var t=e[0].clone(),r=1;r<e.length;++r)t=Fs(t,e[r]);return t}))}}]),r}(Px);Vx.className="Add",f.registerClass(Vx);var Ux=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){return _classCallCheck(this,r),t.call(this,e)}return _createClass(r,[{key:"mergeFunction",value:function(e){return ys((function(){for(var t=e[0].clone(),r=1;r<e.length;++r)t=Os(t,e[r]);return t}))}}]),r}(Px);Ux.className="Multiply",f.registerClass(Ux);var Wx=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){return _classCallCheck(this,r),t.call(this,e)}return _createClass(r,[{key:"mergeFunction",value:function(e){return ys((function(){for(var t=e[0].clone(),r=1;r<e.length;++r)t=Fs(t,e[r]);return Os(1/e.length,t)}))}}]),r}(Px);Wx.className="Average",f.registerClass(Wx);var Gx=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){return _classCallCheck(this,r),t.call(this,e)}return _createClass(r,[{key:"mergeFunction",value:function(e){return ys((function(){for(var t=e[0],r=1;r<e.length;++r)t=nl(t,e[r]);return t}))}}]),r}(Px);Gx.className="Maximum",f.registerClass(Gx);var Hx=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){return _classCallCheck(this,r),t.call(this,e)}return _createClass(r,[{key:"mergeFunction",value:function(e){return ys((function(){for(var t=e[0],r=1;r<e.length;++r)t=yh(t,e[r]);return t}))}}]),r}(Px);Hx.className="Minimum",f.registerClass(Hx);var jx=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;return _classCallCheck(this,r),(a=t.call(this,e)).DEFAULT_AXIS=-1,null==e&&(e={}),a.axis=null==e.axis?a.DEFAULT_AXIS:e.axis,a.supportsMasking=!0,a.reshapeRequired=!1,a}return _createClass(r,[{key:"build",value:function(e){if(!Array.isArray(e)||!Array.isArray(e[0])||1===e.length)throw new d_("A `Concatenate` layer should be called on a list of at least 2 inputs");var t,r=!0,n=_createForOfIteratorHelper(e=e);try{for(n.s();!(t=n.n()).done;){if(null!=t.value){r=!1;break}}}catch(hE){n.e(hE)}finally{n.f()}if(!r){for(var i=[],o=0;o<e.length;++o){var s=e[o].slice();s.splice(this.axis,1);var l,u=!1,h=_createForOfIteratorHelper(i);try{for(h.s();!(l=h.n()).done;){var c=l.value;if(a.arraysEqual(c,s)){u=!0;break}}}catch(hE){h.e(hE)}finally{h.f()}u||i.push(s)}if(i.length>1)throw new d_("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}}},{key:"mergeFunction",value:function(e){var t=this;return ys((function(){return dm(e,t.axis)}))}},{key:"computeOutputShape",value:function(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new d_("A `Concatenate` layer should be called on a list of inputs.");var t,r=e,a=r[0].slice(),n=this.axis<0?a.length+this.axis:this.axis,i=_createForOfIteratorHelper(r.slice(1));try{for(i.s();!(t=i.n()).done;){var o=t.value;if(null==a[n]||null==o[n]){a[n]=null;break}a[n]+=o[n]}}catch(hE){i.e(hE)}finally{i.f()}return a}},{key:"computeMask",value:function(e,t){var r=this;if(null==t)return null;if(!Array.isArray(t))throw new d_("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new d_("`inputs` should be an array for Concatenate");if(t.length!==e.length)throw new d_("Mismatch in the length of mask (".concat(t.length,") and the legnth of inputs (").concat(e.length,")"));return ys((function(){var a=!0;if(t.forEach((function(e){null==e||(a=!1)})),a)return null;for(var n=[],i=0;i<e.length;++i)n.push(null==t[i]?Ih(e[i]).asType("bool"):t[i].rank<e[i].rank?Eu(t[i],-1):t[i]);var o=ql(n,r.axis);return bl(o,-1,!1)}))}},{key:"getConfig",value:function(){var e={axis:this.axis},t=_get(_getPrototypeOf(r.prototype),"getConfig",this).call(this);return Object.assign(e,t),e}}]),r}(Px);function qx(e,t){for(;e<0;)e+=t;return e}jx.className="Concatenate",f.registerClass(jx);var Xx=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;return _classCallCheck(this,r),(a=t.call(this,e)).axes=e.axes,a.normalize=null!=e.normalize&&e.normalize,a.supportsMasking=!0,a.reshapeRequired=!1,a}return _createClass(r,[{key:"build",value:function(e){a.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(function(){return"A `Dot` layer should be called on a list of exactly 2 inputs."}));var t=e[0],r=e[1];if(t.length>3||r.length>3)throw new v_("Dot layer does not support tensors of 4D or higher rank yet.");var n=this.interpretAxes(t,r);if(t[n[0]]!==r[n[1]])throw new d_("Dimension incompatibility: ".concat(t[n[0]]," !== ").concat(r[n[1]]))}},{key:"mergeFunction",value:function(e){if(2!==e.length)throw new d_("A `Dot` layer must be called on exactly 2 inputs, but received ".concat(e.length," input(s)."));var t,r=e[0],n=e[1];return t=Array.isArray(this.axes)?this.axes.map((function(t,r){return qx(t,e[r].shape.length)})):[qx(this.axes,r.shape.length),qx(this.axes,n.shape.length)],this.normalize&&(r=Cy(r,t[0]),n=Cy(n,t[1])),function(e,t,r){if(e.shape.length>3||t.shape.length>3)throw new v_("batchDot is not implemented for tensors of 4D or higher rank yet");if(a.assert(e.shape.length>=2,(function(){return"batchDot requires the rank of x to be >= 2, but got "+e.shape.length})),a.assert(e.shape.length>=2,(function(){return"batchDot requires the rank of y to be >= 2, but got "+t.shape.length})),"number"==typeof r&&(r=[r,r]),"complex64"===e.dtype||"complex64"===t.dtype)throw new v_("batchDot is not implemented for complex64-type Tensors yet.");var n=e.shape.length,i=t.shape.length;null==r&&(r=[n-1,i-2]);var o=r;return ys((function(){var r,a;if(n>i){r=n-i;for(var s=[],l=0;l<r;++l)s.push(1);t=t.reshape(t.shape.concat(s))}else if(i>n){r=i-n;for(var u=[],h=0;h<r;++h)u.push(1);e=e.reshape(e.shape.concat(u))}else r=0;if(a=2===e.shape.length&&2===t.shape.length?o[0]===o[1]?e.mul(t).sum(o[0]):e.transpose([1,0]).mul(t).sum(o[1]):e.matMul(t,o[0]!==e.shape.length-1,o[1]===t.shape.length-1),r>0){for(var c,f=[],d=c=n>i?n+i-3:n-1;d<c+r;++d)f.push(d);a=a.squeeze(f)}return 1===a.shape.length&&(a=a.expandDims(1)),a}))}(r,n,t)}},{key:"interpretAxes",value:function(e,t){return Array.isArray(this.axes)?this.axes:[qx(this.axes,e.length),qx(this.axes,t.length)]}},{key:"computeOutputShape",value:function(e){a.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(function(){return"A `Dot` layer should be called on a list of exactly 2 inputs."}));var t=e[0].slice(),r=e[1].slice();if(t.length>3||r.length>3)throw new v_("Dot layer does not support tensors of 4D or higher rank yet.");var n=this.interpretAxes(t,r);t.splice(n[0],1),r.splice(n[1],1),r.splice(0,1);var i=t.concat(r);return 1===i.length&&i.push(1),i}},{key:"computeMask",value:function(e,t){return null}},{key:"getConfig",value:function(){var e={axes:this.axes,normalize:this.normalize},t=_get(_getPrototypeOf(r.prototype),"getConfig",this).call(this);return Object.assign(e,t),e}}]),r}(Px);Xx.className="Dot",f.registerClass(Xx);var Kx=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;return _classCallCheck(this,r),(a=t.call(this,e)).supportsMasking=!0,a.stddev=e.stddev,a}return _createClass(r,[{key:"computeOutputShape",value:function(e){return e}},{key:"getConfig",value:function(){var e=_get(_getPrototypeOf(r.prototype),"getConfig",this).call(this),t={stddev:this.stddev};return Object.assign(t,e),t}},{key:"call",value:function(e,t){var r=this;return ys((function(){r.invokeCallHook(e,t);var a=Zm(e);return wm((function(){return gm(a.shape,0,r.stddev).add(a)}),(function(){return a}),t.training||!1)}))}}]),r}(hy);Kx.className="GaussianNoise",f.registerClass(Kx);var Qx=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;return _classCallCheck(this,r),(a=t.call(this,e)).supportsMasking=!0,a.rate=e.rate,a}return _createClass(r,[{key:"computeOutputShape",value:function(e){return e}},{key:"getConfig",value:function(){var e=_get(_getPrototypeOf(r.prototype),"getConfig",this).call(this),t={rate:this.rate};return Object.assign(t,e),t}},{key:"call",value:function(e,t){var r=this;return ys((function(){r.invokeCallHook(e,t);var a=Zm(e);return r.rate>0&&r.rate<1?wm((function(){var e=Math.sqrt(r.rate/(1-r.rate));return a.mul(gm(a.shape,1,e))}),(function(){return a}),t.training||!1):a}))}}]),r}(hy);Qx.className="GaussianDropout",f.registerClass(Qx);var Yx=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;return _classCallCheck(this,r),(a=t.call(this,e)).supportsMasking=!0,a.rate=e.rate,a.noiseShape=e.noiseShape,a}return _createClass(r,[{key:"_getNoiseShape",value:function(e){return this.noiseShape||Zm(e).shape}},{key:"computeOutputShape",value:function(e){return e}},{key:"getConfig",value:function(){var e=_get(_getPrototypeOf(r.prototype),"getConfig",this).call(this),t={rate:this.rate};return Object.assign(t,e),t}},{key:"call",value:function(e,t){var r=this;return ys((function(){if(r.rate<1&&r.rate>0){var a=r._getNoiseShape(e);return wm((function(){var t=Zm(e),n=-1.7580993408473766,i=Gu(jh(a),r.rate);i=lm(i,"float32");var o=Math.pow((1-r.rate)*(1+r.rate*Math.pow(n,2)),-.5),s=-o*n*r.rate;return t.mul(i).add(i.add(-1).mul(n)).mul(o).add(s)}),(function(){return Zm(e)}),t.training||!1)}return e}))}}]),r}(hy);function Jx(e,t,r,a,n){var i,o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:.001;if(2===e.rank)i=eu(e,t,r,a,n,o);else if(3===e.rank)i=tu(e,t,r,a,n,o);else{if(4!==e.rank)throw new v_("batchNormalization is not implemented for array of rank ".concat(e.rank," yet"));i=ru(e,t,r,a,n,o)}return i}Yx.className="AlphaDropout",f.registerClass(Yx);var Zx=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;return _classCallCheck(this,r),null==e&&(e={}),(a=t.call(this,e)).supportsMasking=!0,a.axis=null==e.axis?-1:e.axis,a.momentum=null==e.momentum?.99:e.momentum,a.epsilon=null==e.epsilon?.001:e.epsilon,a.center=null==e.center||e.center,a.scale=null==e.scale||e.scale,a.betaInitializer=jm(e.betaInitializer||"zeros"),a.gammaInitializer=jm(e.gammaInitializer||"ones"),a.movingMeanInitializer=jm(e.movingMeanInitializer||"zeros"),a.movingVarianceInitializer=jm(e.movingVarianceInitializer||"ones"),a.betaConstraint=W_(e.betaConstraint),a.gammaConstraint=W_(e.gammaConstraint),a.betaRegularizer=Gb(e.betaRegularizer),a.gammaRegularizer=Gb(e.gammaRegularizer),a}return _createClass(r,[{key:"build",value:function(e){e=$m(e);var t=this.axis>=0?this.axis:this.axis+e.length,r=e[t];if(null==r)throw new d_("Axis ".concat(t," of input tensor should have a defined dimension but the layer received an input with shape ")+JSON.stringify(e)+".");this.inputSpec=[new iy({ndim:e.length,axes:_defineProperty({},t,r)})];var a=[r];this.scale&&(this.gamma=this.addWeight("gamma",a,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",a,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",a,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",a,null,this.movingVarianceInitializer,null,!1),this.built=!0}},{key:"call",value:function(e,t){var r=this;return ys((function(){var n=null!=t.training&&t.training,i=Zm(e),o=i.shape,s=o.length,l=sm(0,s),u=r.axis>=0?r.axis:r.axis+s;l.splice(u,1);var h=g_(1,s);h[u]=o[u];var c=l.slice();c.sort();var f=!a.arraysEqual(c,sm(0,s).slice(0,s-1));if(!n)return function(){if(f){var e=r.movingMean.read().reshape(h),t=r.movingVariance.read().reshape(h),a=r.center?r.beta.read().reshape(h):null,n=r.scale?r.gamma.read().reshape(h):null;return Jx(i,e,t,a,n,r.epsilon)}return Jx(i,r.movingMean.read(),r.movingVariance.read(),null==r.beta?null:r.beta.read(),null==r.gamma?null:r.gamma.read(),r.epsilon)}();var d=_slicedToArray(function(e,t,r,n){var i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:.001;return a.arraysEqual(n.slice().sort(),sm(0,e.rank-1))?function(e,t,r,a){var n=arguments.length>4&&void 0!==arguments[4]?arguments[4]:.001;return ys((function(){var i=kh(e,a),o=i.mean,s=i.variance;return[Jx(e,o,s,r,t,n),o,s]}))}(e,t,r,n,i):function(e,t,r,a){var n=arguments.length>4&&void 0!==arguments[4]?arguments[4]:.001;return ys((function(){var i,o=kh(e,a),s=o.mean,l=o.variance,u=[],h=_createForOfIteratorHelper(sm(0,e.rank));try{for(h.s();!(i=h.n()).done;){var c=i.value;-1!==a.indexOf(c)?u.push(1):u.push(e.shape[c])}}catch(hE){h.e(hE)}finally{h.f()}var f=s.reshape(u),d=l.reshape(u),v=null==t?null:t.reshape(u),p=null==r?null:r.reshape(u);return[Jx(e,f,d,p,v,n),s,l]}))}(e,t,r,n,i)}(i,r.gamma.read(),r.beta.read(),l,r.epsilon),3),v=d[0],p=d[1],g=d[2],_=function(e,t,r){ys((function(){var a=1-r,n=e.read(),i=n.sub(t).mul(a);e.write(n.sub(i))}))};return _(r.movingMean,p,r.momentum),_(r.movingVariance,g,r.momentum),v}))}},{key:"getConfig",value:function(){var e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Hm(this.betaInitializer),gammaInitializer:Hm(this.gammaInitializer),movingMeanInitializer:Hm(this.movingMeanInitializer),movingVarianceInitializer:Hm(this.movingVarianceInitializer),betaRegularizer:Ub(this.betaRegularizer),gammaRegularizer:Ub(this.gammaRegularizer),betaConstraint:V_(this.betaConstraint),gammaConstraint:V_(this.gammaConstraint)},t=_get(_getPrototypeOf(r.prototype),"getConfig",this).call(this);return Object.assign(e,t),e}}]),r}(hy);Zx.className="BatchNormalization",f.registerClass(Zx);var $x=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;if(_classCallCheck(this,r),null==e&&(e={}),(a=t.call(this,e)).axis=null==e.axis?-1:e.axis,"number"==typeof a.axis){if(!Number.isInteger(a.axis))throw new Error("Expected axis to be an integer, but received "+a.axis)}else{if(!Array.isArray(a.axis))throw new Error("Expected axis to be an integer or an array of integers, but received "+JSON.stringify(a.axis));var n,i=_createForOfIteratorHelper(a.axis);try{for(i.s();!(n=i.n()).done;){var o=n.value;if(!Number.isInteger(o))throw new Error("Expected axis to be an array of integers, but received "+JSON.stringify(a.axis))}}catch(hE){i.e(hE)}finally{i.f()}}return a.epsilon=null==e.epsilon?.001:e.epsilon,a.center=null==e.center||e.center,a.scale=null==e.scale||e.scale,a.betaInitializer=jm(e.betaInitializer||"zeros"),a.gammaInitializer=jm(e.gammaInitializer||"ones"),a.betaRegularizer=Gb(e.betaRegularizer),a.gammaRegularizer=Gb(e.gammaRegularizer),a.supportsMasking=!0,_possibleConstructorReturn(a)}return _createClass(r,[{key:"build",value:function(e){var t=(e=$m(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(var r=0;r<this.axis.length;++r)this.axis[r]<0&&(this.axis[r]+=t);var a,n=_createForOfIteratorHelper(this.axis);try{for(n.s();!(a=n.n()).done;){var i=a.value;if(i<0||i>=t)throw new Error("Invalid axis: "+i)}}catch(hE){n.e(hE)}finally{n.f()}if(this.axis.length!==I_(this.axis).length)throw new Error("Found duplicate axes in: "+this.axis);var o=this.axis.map((function(t){return e[t]}));this.gamma=this.scale?this.addWeight("gamma",o,"float32",this.gammaInitializer,this.gammaRegularizer,!0):null,this.beta=this.center?this.addWeight("beta",o,"float32",this.betaInitializer,this.betaRegularizer,!0):null,this.built=!0}},{key:"call",value:function(e,t){var r=this,a=Zm(e),n=a.shape,i=n.length;return ys((function(){var e,t=kh(a,r.axis,!0),o=t.mean,s=t.variance,l=g_(1,i),u=_createForOfIteratorHelper(r.axis);try{for(u.s();!(e=u.n()).done;){var h=e.value;l[h]=n[h]}}catch(hE){u.e(hE)}finally{u.f()}for(var c=function(e){return null!=e&&e.shape.length!==i&&r.axis!==[i-1]?e.reshape(l):e},f=c(r.gamma.read()),d=c(r.beta.read()),v=[],p=[],g=0;g<i;++g)-1!==r.axis.indexOf(g)?(v.push(n[g]),p.push(1)):(v.push(1),p.push(n[g]));return o=o.tile(v),s=s.tile(v),f=f.tile(p),d=d.tile(p),Jx(a,o,s,d,f,r.epsilon)}))}},{key:"getConfig",value:function(){var e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Hm(this.betaInitializer),gammaInitializer:Hm(this.gammaInitializer),betaRegularizer:Ub(this.betaRegularizer),gammaRegularizer:Ub(this.gammaRegularizer)},t=_get(_getPrototypeOf(r.prototype),"getConfig",this).call(this);return Object.assign(e,t),e}}]),r}(hy);$x.className="LayerNormalization",f.registerClass($x);var ek=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;if(_classCallCheck(this,r),null==e&&(e={}),(a=t.call(this,e)).dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)a.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)a.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new d_("ZeroPadding2D expects padding to be a length-2 array, but received a length-".concat(e.padding.length," array."));var n,i;if("number"==typeof e.padding[0])n=[e.padding[0],e.padding[0]],i=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new d_("ZeroPadding2D expects height padding to be a length-2 array, but received a length-".concat(e.padding[0].length," array."));if(n=e.padding[0],2!==e.padding[1].length)throw new d_("ZeroPadding2D expects width padding to be a length-2 array, but received a length-".concat(e.padding[1].length," array."));i=e.padding[1]}a.padding=[n,i]}return a.inputSpec=[new iy({ndim:4})],_possibleConstructorReturn(a)}return _createClass(r,[{key:"computeOutputShape",value:function(e){var t,r;return e=$m(e),"channelsFirst"===this.dataFormat?(t=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,r=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],t,r]):(t=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,r=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],t,r,e[3]])}},{key:"call",value:function(e,t){var r=this;return ys((function(){return t=Zm(e),a=r.padding,n=r.dataFormat,ys((function(){if(4!==t.rank)throw new d_("temporalPadding expects input tensor to be 4-D, but received a "+t.rank+"-D tensor.");if(null==a&&(a=[[1,1],[1,1]]),2!==a.length||2!==a[0].length||2!==a[1].length)throw new d_("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==n&&(n="channelsLast"),"channelsLast"!==n&&"channelsFirst"!==n)throw new d_("Unknown data format: ".concat(n,". Supported data formats are 'channelsLast' and 'channelsFirst."));var e;return e="channelsFirst"===n?[[0,0],[0,0],a[0],a[1]]:[[0,0],a[0],a[1],[0,0]],Rh(t,e)}));var t,a,n}))}},{key:"getConfig",value:function(){var e={padding:this.padding,dataFormat:this.dataFormat},t=_get(_getPrototypeOf(r.prototype),"getConfig",this).call(this);return Object.assign(e,t),e}}]),r}(hy);function tk(e,t,r,a,n,i){return ys((function(){var o;K_(n),Y_(i),Q_(a),null==r&&(r=[1,1]),null==a&&(a="valid"),null==n&&(n="channelsLast"),null==i&&(i="max"),e=$b(e,n);var s="same"===a?"same":"valid";return o="max"===i?fh(e,t,r,s):Wl(e,t,r,s),"channelsFirst"===n&&(o=So(o,[0,3,1,2])),o}))}function rk(e,t,r,a,n,i){return ys((function(){var o;K_(n),Y_(i),Q_(a),null==r&&(r=[1,1,1]),null==a&&(a="valid"),null==n&&(n="channelsLast"),null==i&&(i="max"),e=ex(e,n);var s="same"===a?"same":"valid";return o="max"===i?dh(e,t,r,s):Gl(e,t,r,s),"channelsFirst"===n&&(o=So(o,[0,4,1,2,3])),o}))}ek.className="ZeroPadding2D",f.registerClass(ek);var ak=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;if(_classCallCheck(this,r),null==e.poolSize&&(e.poolSize=2),a=t.call(this,e),"number"==typeof e.poolSize)a.poolSize=[e.poolSize];else{if(!Array.isArray(e.poolSize)||1!==e.poolSize.length||"number"!=typeof e.poolSize[0])throw new d_("poolSize for 1D convolutional layer must be a number or an Array of a single number, but received "+JSON.stringify(e.poolSize));a.poolSize=e.poolSize}if(E_(a.poolSize,"poolSize"),null==e.strides)a.strides=a.poolSize;else if("number"==typeof e.strides)a.strides=[e.strides];else{if(!Array.isArray(e.strides)||1!==e.strides.length||"number"!=typeof e.strides[0])throw new d_("strides for 1D convolutional layer must be a number or an Array of a single number, but received "+JSON.stringify(e.strides));a.strides=e.strides}return E_(a.strides,"strides"),a.padding=null==e.padding?"valid":e.padding,Q_(a.padding),a.inputSpec=[new iy({ndim:3})],_possibleConstructorReturn(a)}return _createClass(r,[{key:"computeOutputShape",value:function(e){var t=Jb((e=$m(e))[1],this.poolSize[0],this.padding,this.strides[0]);return[e[0],t,e[2]]}},{key:"call",value:function(e,t){var r=this;return ys((function(){r.invokeCallHook(e,t),e=um(Zm(e),2);var a=r.poolingFunction(Zm(e),[r.poolSize[0],1],[r.strides[0],1],r.padding,"channelsLast");return kc(a,[2])}))}},{key:"getConfig",value:function(){var e={poolSize:this.poolSize,padding:this.padding,strides:this.strides},t=_get(_getPrototypeOf(r.prototype),"getConfig",this).call(this);return Object.assign(e,t),e}}]),r}(hy),nk=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){return _classCallCheck(this,r),t.call(this,e)}return _createClass(r,[{key:"poolingFunction",value:function(e,t,r,a,n){return K_(n),Q_(a),tk(e,t,r,a,n,"max")}}]),r}(ak);nk.className="MaxPooling1D",f.registerClass(nk);var ik=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){return _classCallCheck(this,r),t.call(this,e)}return _createClass(r,[{key:"poolingFunction",value:function(e,t,r,a,n){return K_(n),Q_(a),tk(e,t,r,a,n,"avg")}}]),r}(ak);ik.className="AveragePooling1D",f.registerClass(ik);var ok=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;if(_classCallCheck(this,r),null==e.poolSize&&(e.poolSize=[2,2]),(a=t.call(this,e)).poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],null==e.strides)a.strides=a.poolSize;else if(Array.isArray(e.strides)){if(2!==e.strides.length)throw new d_("If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length "+e.strides.length+".");a.strides=e.strides}else a.strides=[e.strides,e.strides];return E_(a.poolSize,"poolSize"),E_(a.strides,"strides"),a.padding=null==e.padding?"valid":e.padding,a.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,K_(a.dataFormat),Q_(a.padding),a.inputSpec=[new iy({ndim:4})],_possibleConstructorReturn(a)}return _createClass(r,[{key:"computeOutputShape",value:function(e){e=$m(e);var t="channelsFirst"===this.dataFormat?e[2]:e[1],r="channelsFirst"===this.dataFormat?e[3]:e[2];return t=Jb(t,this.poolSize[0],this.padding,this.strides[0]),r=Jb(r,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,r]:[e[0],t,r,e[3]]}},{key:"call",value:function(e,t){var r=this;return ys((function(){return r.invokeCallHook(e,t),r.poolingFunction(Zm(e),r.poolSize,r.strides,r.padding,r.dataFormat)}))}},{key:"getConfig",value:function(){var e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=_get(_getPrototypeOf(r.prototype),"getConfig",this).call(this);return Object.assign(e,t),e}}]),r}(hy),sk=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){return _classCallCheck(this,r),t.call(this,e)}return _createClass(r,[{key:"poolingFunction",value:function(e,t,r,a,n){return K_(n),Q_(a),tk(e,t,r,a,n,"max")}}]),r}(ok);sk.className="MaxPooling2D",f.registerClass(sk);var lk=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){return _classCallCheck(this,r),t.call(this,e)}return _createClass(r,[{key:"poolingFunction",value:function(e,t,r,a,n){return K_(n),Q_(a),tk(e,t,r,a,n,"avg")}}]),r}(ok);lk.className="AveragePooling2D",f.registerClass(lk);var uk=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;if(_classCallCheck(this,r),null==e.poolSize&&(e.poolSize=[2,2,2]),(a=t.call(this,e)).poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize,e.poolSize],null==e.strides)a.strides=a.poolSize;else if(Array.isArray(e.strides)){if(3!==e.strides.length)throw new d_("If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length "+e.strides.length+".");a.strides=e.strides}else a.strides=[e.strides,e.strides,e.strides];return E_(a.poolSize,"poolSize"),E_(a.strides,"strides"),a.padding=null==e.padding?"valid":e.padding,a.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,K_(a.dataFormat),Q_(a.padding),a.inputSpec=[new iy({ndim:5})],_possibleConstructorReturn(a)}return _createClass(r,[{key:"computeOutputShape",value:function(e){e=$m(e);var t="channelsFirst"===this.dataFormat?e[2]:e[1],r="channelsFirst"===this.dataFormat?e[3]:e[2],a="channelsFirst"===this.dataFormat?e[4]:e[3];return t=Jb(t,this.poolSize[0],this.padding,this.strides[0]),r=Jb(r,this.poolSize[1],this.padding,this.strides[1]),a=Jb(a,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,r,a]:[e[0],t,r,a,e[4]]}},{key:"call",value:function(e,t){var r=this;return ys((function(){return r.invokeCallHook(e,t),r.poolingFunction(Zm(e),r.poolSize,r.strides,r.padding,r.dataFormat)}))}},{key:"getConfig",value:function(){var e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=_get(_getPrototypeOf(r.prototype),"getConfig",this).call(this);return Object.assign(e,t),e}}]),r}(hy),hk=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){return _classCallCheck(this,r),t.call(this,e)}return _createClass(r,[{key:"poolingFunction",value:function(e,t,r,a,n){return K_(n),Q_(a),rk(e,t,r,a,n,"max")}}]),r}(uk);hk.className="MaxPooling3D",f.registerClass(hk);var ck=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){return _classCallCheck(this,r),t.call(this,e)}return _createClass(r,[{key:"poolingFunction",value:function(e,t,r,a,n){return K_(n),Q_(a),rk(e,t,r,a,n,"avg")}}]),r}(uk);ck.className="AveragePooling3D",f.registerClass(ck);var fk=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;return _classCallCheck(this,r),(a=t.call(this,e)).inputSpec=[new iy({ndim:3})],a}return _createClass(r,[{key:"computeOutputShape",value:function(e){return[e[0],e[2]]}},{key:"call",value:function(e,t){throw new v_}}]),r}(hy),dk=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){return _classCallCheck(this,r),t.call(this,e||{})}return _createClass(r,[{key:"call",value:function(e,t){return ys((function(){var t=Zm(e);return _h(t,1)}))}}]),r}(fk);dk.className="GlobalAveragePooling1D",f.registerClass(dk);var vk=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){return _classCallCheck(this,r),t.call(this,e||{})}return _createClass(r,[{key:"call",value:function(e,t){return ys((function(){var t=Zm(e);return nh(t,1)}))}}]),r}(fk);vk.className="GlobalMaxPooling1D",f.registerClass(vk);var pk=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;return _classCallCheck(this,r),(a=t.call(this,e)).dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,K_(a.dataFormat),a.inputSpec=[new iy({ndim:4})],a}return _createClass(r,[{key:"computeOutputShape",value:function(e){return e=e,"channelsLast"===this.dataFormat?[e[0],e[3]]:[e[0],e[1]]}},{key:"call",value:function(e,t){throw new v_}},{key:"getConfig",value:function(){var e={dataFormat:this.dataFormat},t=_get(_getPrototypeOf(r.prototype),"getConfig",this).call(this);return Object.assign(e,t),e}}]),r}(hy),gk=function(e){_inherits(r,e);var t=_createSuper(r);function r(){return _classCallCheck(this,r),t.apply(this,arguments)}return _createClass(r,[{key:"call",value:function(e,t){var r=this;return ys((function(){var t=Zm(e);return _h(t,"channelsLast"===r.dataFormat?[1,2]:[2,3])}))}}]),r}(pk);gk.className="GlobalAveragePooling2D",f.registerClass(gk);var _k=function(e){_inherits(r,e);var t=_createSuper(r);function r(){return _classCallCheck(this,r),t.apply(this,arguments)}return _createClass(r,[{key:"call",value:function(e,t){var r=this;return ys((function(){var t=Zm(e);return nh(t,"channelsLast"===r.dataFormat?[1,2]:[2,3])}))}}]),r}(pk);_k.className="GlobalMaxPooling2D",f.registerClass(_k);var mk=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;return _classCallCheck(this,r),(a=t.call(this,e)).layer=e.layer,a}return _createClass(r,[{key:"build",value:function(e){this.built=!0}},{key:"getWeights",value:function(){return this.layer.getWeights()}},{key:"setWeights",value:function(e){this.layer.setWeights(e)}},{key:"getConfig",value:function(){var e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},t=_get(_getPrototypeOf(r.prototype),"getConfig",this).call(this);return Object.assign(e,t),e}},{key:"setFastWeightInitDuringBuild",value:function(e){_get(_getPrototypeOf(r.prototype),"setFastWeightInitDuringBuild",this).call(this,e),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(e)}},{key:"trainable",get:function(){return null!=this.layer&&this.layer.trainable},set:function(e){null!=this.layer&&(this.layer.trainable=e)}},{key:"trainableWeights",get:function(){return this.layer.trainableWeights}},{key:"nonTrainableWeights",get:function(){return this.layer.nonTrainableWeights}},{key:"updates",get:function(){return this.layer._updates}},{key:"losses",get:function(){return this.layer.losses}}],[{key:"fromConfig",value:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},a=wy(t.layer,r);delete t.layer;var n={layer:a};return Object.assign(n,t),new e(n)}}]),r}(hy),yk=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;return _classCallCheck(this,r),(a=t.call(this,e)).supportsMasking=!0,a}return _createClass(r,[{key:"build",value:function(e){if((e=$m(e)).length<3)throw new d_("TimeDistributed layer expects an input shape >= 3D, but received input shape "+JSON.stringify(e));this.inputSpec=[{shape:e}];var t=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(t),this.layer.built=!0),_get(_getPrototypeOf(r.prototype),"build",this).call(this,e)}},{key:"computeOutputShape",value:function(e){var t=[(e=$m(e))[0]].concat(e.slice(2)),r=this.layer.computeOutputShape(t);return[r[0],e[1]].concat(r.slice(1))}},{key:"call",value:function(e,t){var r=this;return ys((function(){return vx((function(e,a){return[Zm(r.layer.call(e,t)),[]]}),e=Zm(e),[],!1,null,null,!1,!0)[1]}))}}]),r}(mk);yk.className="TimeDistributed",f.registerClass(yk);var bk=function(e){_inherits(r,e);var t=_createSuper(r);function r(e){var a;_classCallCheck(this,r),a=t.call(this,e);var n=e.layer.getConfig(),i={};i.className=e.layer.getClassName(),i.config=n,a.forwardLayer=wy(i),n.goBackwards=!0!==n.goBackwards;var o={};if(o.className=e.layer.getClassName(),o.config=n,a.backwardLayer=wy(o),a.forwardLayer.name="forward_"+a.forwardLayer.name,a.backwardLayer.name="backward_"+a.backwardLayer.name,a.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,R_(q_,"BidirectionalMergeMode",a.mergeMode),e.weights)throw new v_("weights support is not implemented for Bidirectional layer yet.");return a._stateful=e.layer.stateful,a.returnSequences=e.layer.returnSequences,a.returnState=e.layer.returnState,a.supportsMasking=!0,a._trainable=!0,a.inputSpec=e.layer.inputSpec,a.numConstants=null,a}return _createClass(r,[{key:"getWeights",value:function(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}},{key:"setWeights",value:function(e){var t=Math.floor(e.length/2);this.forwardLayer.setWeights(e.slice(0,t)),this.backwardLayer.setWeights(e.slice(t))}},{key:"computeOutputShape",value:function(e){var t,r,a,n=this.forwardLayer.computeOutputShape(e);return Array.isArray(n)&&Array.isArray(n[0])||(n=[n]),n=n,this.returnState?(a=n.slice(1),t=n[0]):t=n[0],t=t,"concat"===this.mergeMode?(t[t.length-1]*=2,r=[t]):r=null==this.mergeMode?[t,t.slice()]:[t],this.returnState?null==this.mergeMode?r.concat(a).concat(a.slice()):[t].concat(a).concat(a.slice()):y_(r)}},{key:"apply",value:function(e,t){var a=null==t?null:t.initialState,n=null==t?null:t.constants;null==t&&(t={});var i=dx(e,a,n,this.numConstants);if(e=i.inputs,a=i.initialState,n=i.constants,Array.isArray(e)&&(a=e.slice(1),e=e[0]),(null==a||0===a.length)&&null==n)return _get(_getPrototypeOf(r.prototype),"apply",this).call(this,e,t);var o=[],s=[];if(null!=a){var l=a.length;if(l%2>0)throw new d_("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");t.initialState=a,o.push.apply(o,_toConsumableArray(a));var u=a.map((function(e){return new iy({shape:e.shape})}));this.forwardLayer.stateSpec=u.slice(0,l/2),this.backwardLayer.stateSpec=u.slice(l/2),s.push.apply(s,_toConsumableArray(u))}if(null!=n)throw new v_("Support for constants in Bidirectional layers is not implemented yet.");for(var h=o[0]instanceof oy,c=0,f=o;c<f.length;c++){if(f[c]instanceof oy!==h)throw new d_("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors")}if(h){var d=[e].concat(o),v=this.inputSpec.concat(s),p=this.inputSpec;this.inputSpec=v;var g=_get(_getPrototypeOf(r.prototype),"apply",this).call(this,d,t);return this.inputSpec=p,g}return _get(_getPrototypeOf(r.prototype),"apply",this).call(this,e,t)}},{key:"call",value:function(e,t){var r=this;return ys((function(){var a,n,i,o,s=t.initialState;if(null==s)a=r.forwardLayer.call(e,t),n=r.backwardLayer.call(e,t);else{var l=s.slice(0,s.length/2),u=s.slice(s.length/2);a=r.forwardLayer.call(e,Object.assign(t,{initialState:l})),n=r.backwardLayer.call(e,Object.assign(t,{initialState:u}))}return r.returnState&&(Array.isArray(a)&&(i=a.slice(1).concat(n.slice(1))),a=a[0],n=n[0]),r.returnSequences&&(n=Jh(n,1)),"concat"===r.mergeMode?o=dm([a,n]):"sum"===r.mergeMode?o=Fs(a,n):"ave"===r.mergeMode?o=Os(.5,Fs(a,n)):"mul"===r.mergeMode?o=Os(a,n):null==r.mergeMode&&(o=[a,n]),r.returnState?null==r.mergeMode?o.concat(i):[o].concat(i):o}))}},{key:"resetStates",value:function(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}},{key:"build",value:function(e){var t=this;Z_(this.forwardLayer.name,(function(){t.forwardLayer.build(e)})),Z_(this.backwardLayer.name,(function(){t.backwardLayer.build(e)})),this.built=!0}},{key:"computeMask",value:function(e,t){var r;if(Array.isArray(t)&&(t=t[0]),r=this.returnSequences?null==this.mergeMode?[t,t]:t:null==this.mergeMode?[null,null]:null,this.returnState){var a=this.forwardLayer.states.map((function(e){return null}));return Array.isArray(r)?r.concat(a).concat(a):[r].concat(a).concat(a)}return r}},{key:"setFastWeightInitDuringBuild",value:function(e){_get(_getPrototypeOf(r.prototype),"setFastWeightInitDuringBuild",this).call(this,e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}},{key:"getConfig",value:function(){var e={mergeMode:this.mergeMode},t=_get(_getPrototypeOf(r.prototype),"getConfig",this).call(this);return Object.assign(e,t),e}},{key:"trainable",get:function(){return this._trainable},set:function(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}},{key:"trainableWeights",get:function(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}},{key:"nonTrainableWeights",get:function(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}}],[{key:"fromConfig",value:function(e,t){var r=wy(t.layer);if(delete t.layer,null!=t.numConstants)throw new v_("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");var a=t;return a.layer=r,new e(a)}}]),r}(mk);function xk(e){return null===e?null:kk(e[0])?{value:null,recurse:!0}:{value:e,recurse:!1}}function kk(e){return null!=e&&!ArrayBuffer.isView(e)&&(Array.isArray(e)||"object"==typeof e&&!(e instanceof Rn))}function wk(e){return e instanceof Rn?{value:e.clone(),recurse:!1}:kk(e)?{value:null,recurse:!0}:{value:e,recurse:!1}}bk.className="Bidirectional",f.registerClass(bk);var Ck=function(){function e(t){if(_classCallCheck(this,e),this.capacity=t,this.begin=0,this.end=0,null==t)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(t<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(t),this.doubledCapacity=2*t}return _createClass(e,[{key:"wrap",value:function(e){for(;e<0;)e+=this.doubledCapacity;return e%this.doubledCapacity}},{key:"get",value:function(e){if(e<0)throw new RangeError("Can't get item at a negative index.");return this.data[e%this.capacity]}},{key:"set",value:function(e,t){if(e<0)throw new RangeError("Can't set item at a negative index.");this.data[e%this.capacity]=t}},{key:"length",value:function(){var e=this.end-this.begin;return e<0&&(e=this.doubledCapacity+e),e}},{key:"isFull",value:function(){return this.length()===this.capacity}},{key:"isEmpty",value:function(){return 0===this.length()}},{key:"push",value:function(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,e),this.end=this.wrap(this.end+1)}},{key:"pushAll",value:function(e){var t,r=_createForOfIteratorHelper(e);try{for(r.s();!(t=r.n()).done;){var a=t.value;this.push(a)}}catch(hE){r.e(hE)}finally{r.f()}}},{key:"pop",value:function(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);var e=this.get(this.end);return this.set(this.end,void 0),e}},{key:"unshift",value:function(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,e)}},{key:"shift",value:function(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");var e=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),e}},{key:"shuffleExcise",value:function(e){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");var t=this.wrap(this.begin+e),r=this.get(t);return this.set(t,this.pop()),r}}]),e}(),Tk=function(e){_inherits(r,e);var t=_createSuper(r);function r(){return _classCallCheck(this,r),t.call(this,r.INITIAL_CAPACITY)}return _createClass(r,[{key:"isFull",value:function(){return!1}},{key:"push",value:function(e){_get(_getPrototypeOf(r.prototype),"isFull",this).call(this)&&this.expand(),_get(_getPrototypeOf(r.prototype),"push",this).call(this,e)}},{key:"unshift",value:function(e){_get(_getPrototypeOf(r.prototype),"isFull",this).call(this)&&this.expand(),_get(_getPrototypeOf(r.prototype),"unshift",this).call(this,e)}},{key:"expand",value:function(){for(var e=2*this.capacity,t=new Array(e),r=this.length(),a=0;a<r;a++)t[a]=this.get(this.wrap(this.begin+a));this.data=t,this.capacity=e,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=r}}]),r}(Ck);Tk.INITIAL_CAPACITY=32;var Sk=function(){function e(){_classCallCheck(this,e)}var t,r,a,n,i,o;return _createClass(e,[{key:"toArray",value:(o=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t,r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=[],e.next=3,this.next();case 3:r=e.sent;case 4:if(r.done){e.next=11;break}return t.push(r.value),e.next=8,this.next();case 8:r=e.sent;case 9:e.next=4;break;case 11:return e.abrupt("return",t);case 12:case"end":return e.stop()}}),e,this)}))),function(){return o.apply(this,arguments)})},{key:"toArrayForTest",value:(i=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t,r,a;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=this.prefetch(100),r=[],e.next=3,t.next();case 3:a=e.sent;case 4:if(a.done){e.next=11;break}return r.push(a.value),e.next=8,t.next();case 8:a=e.sent;case 9:e.next=4;break;case 11:return e.abrupt("return",r);case 12:case"end":return e.stop()}}),e,this)}))),function(){return i.apply(this,arguments)})},{key:"resolveFully",value:(n=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.next();case 2:t=e.sent;case 3:if(t.done){e.next=9;break}return e.next=6,this.next();case 6:t=e.sent;case 7:e.next=3;break;case 9:case"end":return e.stop()}}),e,this)}))),function(){return n.apply(this,arguments)})},{key:"resolveWhile",value:(a=_asyncToGenerator(regeneratorRuntime.mark((function e(t){var r,a;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.next();case 2:r=e.sent,a=t(r.value);case 4:if(r.done||!a){e.next=11;break}return e.next=7,this.next();case 7:r=e.sent,a=t(r.value);case 9:e.next=4;break;case 11:case"end":return e.stop()}}),e,this)}))),function(e){return a.apply(this,arguments)})},{key:"handleErrors",value:function(e){return new Ok(this,e)}},{key:"filter",value:function(e){return new Mk(this,e)}},{key:"map",value:function(e){return new Dk(this,e)}},{key:"mapAsync",value:function(e){return new Lk(this,e)}},{key:"serialMapAsync",value:function(e){return new Lk(this,e).serial()}},{key:"flatmap",value:function(e){return new zk(this,e)}},{key:"forEachAsync",value:(r=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.map(t).resolveFully());case 1:case"end":return e.stop()}}),e,this)}))),function(e){return r.apply(this,arguments)})},{key:"serialForEach",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.serialMapAsync(t).resolveWhile((function(e){return!0===e})));case 1:case"end":return e.stop()}}),e,this)}))),function(e){return t.apply(this,arguments)})},{key:"rowMajorBatch",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return new Fk(this,e,t)}},{key:"columnMajorBatch",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:xk;return this.rowMajorBatch(e,t).map((function(e){return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:xk;return function e(t,r){var a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:new Set,n=t[0];if(a.has(n))throw new Error("Circular references are not supported.");var i=r(t);if(i.recurse&&null!==i.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(i.recurse){if(kk(n)){var o=Array.isArray(n)?[]:{};a.add(n);var s=function(n){var i=e(t.map((function(e){return e[n]})),r,a);o[n]=i};for(var l in n)s(l);return a.delete(n),o}throw new Error("Can't recurse into non-iterable type: "+n)}return i.value}(e,t)}(e,r)}))}},{key:"concatenate",value:function(e,t){return new Bk(new Ik([this,e]),t)}},{key:"take",value:function(e){return e<0||null==e?this:new Ek(this,e)}},{key:"skip",value:function(e){return e<0||null==e?this:new Nk(this,e)}},{key:"prefetch",value:function(e){return new Pk(this,e)}},{key:"shuffle",value:function(e,t){return new Vk(this,e,t)}},{key:"serial",value:function(){return new Rk(this)}}]),e}(),Ik=function(e){_inherits(a,e);var t,r=_createSuper(a);function a(e){var t;return _classCallCheck(this,a),(t=r.call(this)).items=e,t.trav=0,t}return _createClass(a,[{key:"summary",value:function(){return"Array of ".concat(this.items.length," items")}},{key:"next",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t,r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!(this.trav>=this.items.length)){e.next=2;break}return e.abrupt("return",{value:null,done:!0});case 2:return t=this.items[this.trav],e.abrupt("return",(this.trav++,{value:(r=t,function e(t,r){var a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:new Map,n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:new Set;if(null==t)return null;if(n.has(t))throw new Error("Circular references are not supported.");if(a.has(t))return a.get(t);var i=r(t);if(i.recurse&&null!==i.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(i.recurse){if(kk(t)){var o=Array.isArray(t)?[]:{};for(var s in n.add(t),t){var l=e(t[s],r,a,n);o[s]=l}return n.delete(t),o}throw new Error("Can't recurse into non-iterable type: "+t)}return a.set(t,i.value),i.value}(r,wk)),done:!1}));case 4:case"end":return e.stop()}}),e,this)}))),function(){return t.apply(this,arguments)})}]),a}(Sk),Ak=function(e){_inherits(a,e);var t,r=_createSuper(a);function a(e){var t;return _classCallCheck(this,a),(t=r.call(this)).nextFn=e,t}return _createClass(a,[{key:"summary",value:function(){return"Function call"}},{key:"next",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.abrupt("return",this.nextFn());case 4:throw e.prev=4,e.t0=e.catch(0),e.t0.message="Error thrown while iterating through a dataset: "+e.t0.message,e.t0;case 7:case"end":return e.stop()}}),e,this,[[0,4]])}))),function(){return t.apply(this,arguments)})}]),a}(Sk),Rk=function(e){_inherits(n,e);var t,r,a=_createSuper(n);function n(e){var t;return _classCallCheck(this,n),(t=a.call(this)).upstream=e,t.lastRead=Promise.resolve({value:null,done:!1}),t}return _createClass(n,[{key:"summary",value:function(){return this.upstream.summary()+" -> Serial"}},{key:"next",value:(r=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t=this;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",(this.lastRead=this.lastRead.then((function(){return t.serialNext()})),this.lastRead));case 1:case"end":return e.stop()}}),e,this)}))),function(){return r.apply(this,arguments)})},{key:"serialNext",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.upstream.next());case 1:case"end":return e.stop()}}),e,this)}))),function(){return t.apply(this,arguments)})}]),n}(Sk),Nk=function(e){_inherits(n,e);var t,r,a=_createSuper(n);function n(e,t){var r;return _classCallCheck(this,n),(r=a.call(this)).upstream=e,r.maxCount=t,r.count=0,r.lastRead=Promise.resolve({value:null,done:!1}),r}return _createClass(n,[{key:"summary",value:function(){return this.upstream.summary()+" -> Skip"}},{key:"next",value:(r=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t=this;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",(this.lastRead=this.lastRead.then((function(){return t.serialNext()})),this.lastRead));case 1:case"end":return e.stop()}}),e,this)}))),function(){return r.apply(this,arguments)})},{key:"serialNext",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!(this.count++<this.maxCount)){e.next=9;break}return e.next=3,this.upstream.next();case 3:if(!(t=e.sent).done){e.next=6;break}return e.abrupt("return",t);case 6:bs(t.value);case 7:e.next=0;break;case 9:return e.abrupt("return",this.upstream.next());case 10:case"end":return e.stop()}}),e,this)}))),function(){return t.apply(this,arguments)})}]),n}(Sk),Ek=function(e){_inherits(a,e);var t,r=_createSuper(a);function a(e,t){var n;return _classCallCheck(this,a),(n=r.call(this)).upstream=e,n.maxCount=t,n.count=0,n}return _createClass(a,[{key:"summary",value:function(){return this.upstream.summary()+" -> Take"}},{key:"next",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next());case 1:case"end":return e.stop()}}),e,this)}))),function(){return t.apply(this,arguments)})}]),a}(Sk),Fk=function(e){_inherits(n,e);var t,r,a=_createSuper(n);function n(e,t){var r,i=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];return _classCallCheck(this,n),(r=a.call(this)).upstream=e,r.batchSize=t,r.enableSmallLastBatch=i,r.lastRead=Promise.resolve({value:null,done:!1}),r}return _createClass(n,[{key:"summary",value:function(){return this.upstream.summary()+" -> RowMajorBatch"}},{key:"next",value:(r=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t=this;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",(this.lastRead=this.lastRead.then((function(){return t.serialNext()})),this.lastRead));case 1:case"end":return e.stop()}}),e,this)}))),function(){return r.apply(this,arguments)})},{key:"serialNext",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t,r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=[];case 1:if(!(t.length<this.batchSize)){e.next=10;break}return e.next=4,this.upstream.next();case 4:if(!(r=e.sent).done){e.next=7;break}return e.abrupt("return",this.enableSmallLastBatch&&t.length>0?{value:t,done:!1}:{value:null,done:!0});case 7:t.push(r.value);case 8:e.next=1;break;case 10:return e.abrupt("return",{value:t,done:!1});case 11:case"end":return e.stop()}}),e,this)}))),function(){return t.apply(this,arguments)})}]),n}(Sk),Mk=function(e){_inherits(n,e);var t,r,a=_createSuper(n);function n(e,t){var r;return _classCallCheck(this,n),(r=a.call(this)).upstream=e,r.predicate=t,r.lastRead=Promise.resolve({value:null,done:!1}),r}return _createClass(n,[{key:"summary",value:function(){return this.upstream.summary()+" -> Filter"}},{key:"next",value:(r=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t=this;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",(this.lastRead=this.lastRead.then((function(){return t.serialNext()})),this.lastRead));case 1:case"end":return e.stop()}}),e,this)}))),function(){return r.apply(this,arguments)})},{key:"serialNext",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.upstream.next();case 2:if(!(t=e.sent).done&&!this.predicate(t.value)){e.next=5;break}return e.abrupt("return",t);case 5:bs(t.value);case 6:e.next=0;break;case 8:case"end":return e.stop()}}),e,this)}))),function(){return t.apply(this,arguments)})}]),n}(Sk),Dk=function(e){_inherits(a,e);var t,r=_createSuper(a);function a(e,t){var n;return _classCallCheck(this,a),(n=r.call(this)).upstream=e,n.transform=t,n}return _createClass(a,[{key:"summary",value:function(){return this.upstream.summary()+" -> Map"}},{key:"next",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t,r,a,i,o,s,l;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.upstream.next();case 2:if(!(t=e.sent).done){e.next=5;break}return e.abrupt("return",{value:null,done:!0});case 5:r=n.getTensorsInContainer(t.value),a=this.transform(t.value),i=n.getTensorsInContainer(a),o=_createForOfIteratorHelper(r);try{for(o.s();!(s=o.n()).done;)l=s.value,n.isTensorInList(l,i)||l.dispose()}catch(hE){o.e(hE)}finally{o.f()}return e.abrupt("return",{value:a,done:!1});case 9:case"end":return e.stop()}}),e,this)}))),function(){return t.apply(this,arguments)})}]),a}(Sk),Ok=function(e){_inherits(n,e);var t,r,a=_createSuper(n);function n(e,t){var r;return _classCallCheck(this,n),(r=a.call(this)).upstream=e,r.handler=t,r.count=0,r.lastRead=Promise.resolve({value:null,done:!1}),r}return _createClass(n,[{key:"summary",value:function(){return this.upstream.summary()+" -> handleErrors"}},{key:"next",value:(r=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t=this;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",(this.lastRead=this.lastRead.then((function(){return t.serialNext()})),this.lastRead));case 1:case"end":return e.stop()}}),e,this)}))),function(){return r.apply(this,arguments)})},{key:"serialNext",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,this.upstream.next();case 3:return e.abrupt("return",e.sent);case 6:if(e.prev=6,e.t0=e.catch(0),this.handler(e.t0)){e.next=10;break}return e.abrupt("return",{value:null,done:!0});case 10:e.next=0;break;case 12:case"end":return e.stop()}}),e,this,[[0,6]])}))),function(){return t.apply(this,arguments)})}]),n}(Sk),Lk=function(e){_inherits(a,e);var t,r=_createSuper(a);function a(e,t){var n;return _classCallCheck(this,a),(n=r.call(this)).upstream=e,n.transform=t,n}return _createClass(a,[{key:"summary",value:function(){return this.upstream.summary()+" -> AsyncMap"}},{key:"next",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t,r,a,i,o,s,l;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.upstream.next();case 2:if(!(t=e.sent).done){e.next=5;break}return e.abrupt("return",{value:null,done:!0});case 5:return r=n.getTensorsInContainer(t.value),e.next=8,this.transform(t.value);case 8:a=e.sent,i=n.getTensorsInContainer(a),o=_createForOfIteratorHelper(r);try{for(o.s();!(s=o.n()).done;)l=s.value,n.isTensorInList(l,i)||l.dispose()}catch(hE){o.e(hE)}finally{o.f()}return e.abrupt("return",{value:a,done:!1});case 13:case"end":return e.stop()}}),e,this)}))),function(){return t.apply(this,arguments)})}]),a}(Sk),zk=function(e){_inherits(a,e);var t,r=_createSuper(a);function a(e,t){var n;return _classCallCheck(this,a),(n=r.call(this)).upstream=e,n.transform=t,n}return _createClass(a,[{key:"summary",value:function(){return this.upstream.summary()+" -> Flatmap"}},{key:"pump",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t,r,a,i,o,s,l;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.upstream.next();case 2:if(!(t=e.sent).done){e.next=5;break}return e.abrupt("return",!1);case 5:r=n.getTensorsInContainer(t.value),a=this.transform(t.value),i=n.getTensorsInContainer(a),this.outputQueue.pushAll(a),o=_createForOfIteratorHelper(r);try{for(o.s();!(s=o.n()).done;)l=s.value,n.isTensorInList(l,i)||l.dispose()}catch(hE){o.e(hE)}finally{o.f()}return e.abrupt("return",!0);case 10:case"end":return e.stop()}}),e,this)}))),function(){return t.apply(this,arguments)})}]),a}(function(e){_inherits(n,e);var t,r,a=_createSuper(n);function n(){var e;return _classCallCheck(this,n),(e=a.call(this)).outputQueue=new Tk,e.lastRead=Promise.resolve({value:null,done:!1}),e}return _createClass(n,[{key:"next",value:(r=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t=this;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",(this.lastRead=this.lastRead.then((function(){return t.serialNext()})),this.lastRead));case 1:case"end":return e.stop()}}),e,this)}))),function(){return r.apply(this,arguments)})},{key:"serialNext",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(0!==this.outputQueue.length()){e.next=7;break}return e.next=3,this.pump();case 3:if(e.sent){e.next=5;break}return e.abrupt("return",{value:null,done:!0});case 5:e.next=0;break;case 7:return e.abrupt("return",{value:this.outputQueue.shift(),done:!1});case 8:case"end":return e.stop()}}),e,this)}))),function(){return t.apply(this,arguments)})}]),n}(Sk)),Bk=function(e){_inherits(n,e);var t,r,a=_createSuper(n);function n(e,t){var r;return _classCallCheck(this,n),(r=a.call(this)).baseErrorHandler=t,r.lastRead=null,r.iterator=null,r.moreIterators=e,r}return _createClass(n,[{key:"summary",value:function(){return"TODO: fill in upstream of chained summaries -> Chained"}},{key:"next",value:(r=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",(this.lastRead=this.readFromChain(this.lastRead),this.lastRead));case 1:case"end":return e.stop()}}),e,this)}))),function(){return r.apply(this,arguments)})},{key:"readFromChain",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(t){var r,a;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t;case 2:if(null!=this.iterator){e.next=9;break}return e.next=5,this.moreIterators.next();case 5:if(!(r=e.sent).done){e.next=8;break}return e.abrupt("return",{value:null,done:!0});case 8:this.iterator=r.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler));case 9:return e.next=11,this.iterator.next();case 11:return a=e.sent,e.abrupt("return",a.done?(this.iterator=null,this.readFromChain(t)):a);case 13:case"end":return e.stop()}}),e,this)}))),function(e){return t.apply(this,arguments)})}]),n}(Sk);!function(e){e[e.FAIL=0]="FAIL",e[e.SHORTEST=1]="SHORTEST",e[e.LONGEST=2]="LONGEST"}(wx||(wx={}));var Pk=function(e){_inherits(r,e);var t=_createSuper(r);function r(e,a){var n;return _classCallCheck(this,r),(n=t.call(this)).upstream=e,n.bufferSize=a,n.buffer=new Ck(a),n}return _createClass(r,[{key:"summary",value:function(){return this.upstream.summary()+" -> Prefetch"}},{key:"refill",value:function(){for(;!this.buffer.isFull();){var e=this.upstream.next();this.buffer.push(e)}}},{key:"next",value:function(){return this.refill(),this.buffer.shift()}}]),r}(Sk),Vk=function(e){_inherits(i,e);var t,r,n=_createSuper(i);function i(e,t,r){var o;return _classCallCheck(this,i),(o=n.call(this,e,t)).upstream=e,o.windowSize=t,o.upstreamExhausted=!1,o.random=Ph.alea(r||a.now().toString()),o.lastRead=Promise.resolve({value:null,done:!1}),o}return _createClass(i,[{key:"next",value:(r=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t=this;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",(this.lastRead=this.lastRead.then((function(){return t.serialNext()})),this.lastRead));case 1:case"end":return e.stop()}}),e,this)}))),function(){return r.apply(this,arguments)})},{key:"randomInt",value:function(e){return Math.floor(this.random()*e)}},{key:"chooseIndex",value:function(){return this.randomInt(this.buffer.length())}},{key:"serialNext",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t,r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:this.upstreamExhausted||this.refill();case 1:if(this.buffer.isEmpty()){e.next=11;break}return t=this.chooseIndex(),e.next=5,this.buffer.shuffleExcise(t);case 5:if((r=e.sent).done){e.next=8;break}return e.abrupt("return",(this.refill(),r));case 8:this.upstreamExhausted=!0;case 9:e.next=1;break;case 11:return e.abrupt("return",{value:null,done:!0});case 12:case"end":return e.stop()}}),e,this)}))),function(){return t.apply(this,arguments)})}]),i}(Pk),Uk=function(){function e(){_classCallCheck(this,e),this.size=null}var t,r,n;return _createClass(e,[{key:"batch",value:function(e){var t,r=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=this;return a.assert(e>0,(function(){return"batchSize needs to be positive, but it is\n      "+e})),t=this.size===1/0||null==this.size?this.size:r?Math.ceil(this.size/e):Math.floor(this.size/e),Wk(_asyncToGenerator(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,n.iterator();case 2:return t.abrupt("return",t.sent.columnMajorBatch(e,r,Gk));case 3:case"end":return t.stop()}}),t)}))),t)}},{key:"concatenate",value:function(e){var t,r=this;return t=this.size===1/0||e.size===1/0?1/0:null!=this.size&&null!=e.size?this.size+e.size:null,Wk(_asyncToGenerator(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,r.iterator();case 2:return t.t0=t.sent,t.next=5,e.iterator();case 5:return t.t1=t.sent,t.abrupt("return",t.t0.concatenate.call(t.t0,t.t1));case 7:case"end":return t.stop()}}),t)}))),t)}},{key:"filter",value:function(e){var t,r=this;return t=this.size===1/0?1/0:null,Wk(_asyncToGenerator(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,r.iterator();case 2:return t.abrupt("return",t.sent.filter((function(t){return ys((function(){return e(t)}))})));case 3:case"end":return t.stop()}}),t)}))),t)}},{key:"forEachAsync",value:(n=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.iterator();case 2:return e.abrupt("return",e.sent.forEachAsync(t));case 3:case"end":return e.stop()}}),e,this)}))),function(e){return n.apply(this,arguments)})},{key:"map",value:function(e){var t=this;return Wk(_asyncToGenerator(regeneratorRuntime.mark((function r(){return regeneratorRuntime.wrap((function(r){for(;;)switch(r.prev=r.next){case 0:return r.next=2,t.iterator();case 2:return r.abrupt("return",r.sent.map((function(t){return ys((function(){return e(t)}))})));case 3:case"end":return r.stop()}}),r)}))),this.size)}},{key:"mapAsync",value:function(e){var t=this;return Wk(_asyncToGenerator(regeneratorRuntime.mark((function r(){return regeneratorRuntime.wrap((function(r){for(;;)switch(r.prev=r.next){case 0:return r.next=2,t.iterator();case 2:return r.abrupt("return",r.sent.mapAsync(e));case 3:case"end":return r.stop()}}),r)}))),this.size)}},{key:"prefetch",value:function(e){if(null==e)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");var t=this;return Wk(_asyncToGenerator(regeneratorRuntime.mark((function r(){return regeneratorRuntime.wrap((function(r){for(;;)switch(r.prev=r.next){case 0:return r.next=2,t.iterator();case 2:return r.abrupt("return",r.sent.prefetch(e));case 3:case"end":return r.stop()}}),r)}))),this.size)}},{key:"repeat",value:function(e){var t,r=this;return t=null!=this.size&&e>0?this.size*e:0===e?0:null!=this.size&&(void 0===e||e<0)?1/0:null,Wk(_asyncToGenerator(regeneratorRuntime.mark((function t(){var a,n;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",(a=(n=function(){var e=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,r.iterator();case 2:return e.t0=e.sent,e.t1=!1,e.abrupt("return",{value:e.t0,done:e.t1});case 5:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),new Ak(n)).take(e),new Bk(a,void 0)));case 1:case"end":return t.stop()}}),t)}))),t)}},{key:"skip",value:function(e){var t,r=this;return t=null!=this.size&&e>=0&&this.size>=e?this.size-e:null!=this.size&&(this.size<e||void 0===e||e<0)?0:null,Wk(_asyncToGenerator(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,r.iterator();case 2:return t.abrupt("return",t.sent.skip(e));case 3:case"end":return t.stop()}}),t)}))),t)}},{key:"shuffle",value:function(e,t){var r=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];if(null==e||e<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError("`Dataset.shuffle()` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for `tf.Tensor`s), consider setting bufferSize to the dataset size (".concat(this.size," elements)"));var n=this,i=Ph.alea(t||a.now().toString());return Wk(_asyncToGenerator(regeneratorRuntime.mark((function t(){var a;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return a=i.int32(),r&&(a+=i.int32()),t.next=4,n.iterator();case 4:return t.abrupt("return",t.sent.shuffle(e,a.toString()));case 5:case"end":return t.stop()}}),t)}))),this.size)}},{key:"take",value:function(e){var t,r=this;return t=null!=this.size&&this.size>e?e:null!=this.size&&this.size<=e?this.size:null,Wk(_asyncToGenerator(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,r.iterator();case 2:return t.abrupt("return",t.sent.take(e));case 3:case"end":return t.stop()}}),t)}))),t)}},{key:"toArray",value:(r=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(this.size!==1/0){e.next=2;break}throw new Error("Can not convert infinite data stream to array.");case 2:return e.next=4,this.iterator();case 4:return e.abrupt("return",e.sent.toArray());case 5:case"end":return e.stop()}}),e,this)}))),function(){return r.apply(this,arguments)})},{key:"toArrayForTest",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(this.size!==1/0){e.next=2;break}throw new Error("Can not convert infinite data stream to array.");case 2:return e.next=4,this.iterator();case 4:return e.abrupt("return",e.sent.toArrayForTest());case 5:case"end":return e.stop()}}),e,this)}))),function(){return t.apply(this,arguments)})}]),e}();function Wk(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;return new(function(r){_inherits(i,r);var a,n=_createSuper(i);function i(){var e;return _classCallCheck(this,i),(e=n.apply(this,arguments)).size=t,e}return _createClass(i,[{key:"iterator",value:(a=_asyncToGenerator(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",e());case 1:case"end":return t.stop()}}),t)}))),function(){return a.apply(this,arguments)})}]),i}(Uk))}function Gk(e){return null===e?null:null==(t=e[0])||null===(r=t)||"object"!=typeof r&&"function"!=typeof r||Array.isArray(t)||"object"==typeof t&&t instanceof Rn||a.isTypedArray(t)?{value:function(e){if(0===e.length)throw new Error("Can't make a batch of zero elements.");return e[0]instanceof Rn?wc(e):ii(e)}(e),recurse:!1}:{value:null,recurse:!0};var t,r}function Hk(e,t){Array.isArray(e)||(e=[e]),e.forEach((function(e){null!=e&&a.assert("complex64"!==e.dtype,(function(){return t+" does not support complex64 tensors in the CPU backend."}))}))}Uk.MAX_BUFFER_SIZE=1e4,Symbol("out"),Symbol("field"),Symbol("quote"),Symbol("quoteafterquote"),Symbol("quoteinquote");var jk=_.nonMaxSuppressionV3Impl,qk=_.split,Xk=_.tile,Kk=_.topkImpl,Qk=_.whereImpl,Yk=function(e){_inherits(i,e);var t,r,n=_createSuper(i);function i(){var e;return _classCallCheck(this,i),(e=n.call(this)).blockSize=48,e.firstUse=!0,e.data=new pe(_assertThisInitialized(e),gs()),e}return _createClass(i,[{key:"write",value:function(e,t,r){this.firstUse&&(this.firstUse=!1,ht().get("IS_NODE")&&g.warn("\n============================\nHi there \ud83d\udc4b. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"));var a={};return this.data.set(a,{values:e,dtype:r,refCount:1}),a}},{key:"makeTensorInfo",value:function(e,t,r){var n;if("string"===t&&null!=r&&r.length>0&&a.isString(r[0])){var i=r.map((function(e){return a.encodeString(e)}));n=this.write(i,e,t)}else n=this.write(r,e,t);return{dataId:n,shape:e,dtype:t}}},{key:"incRef",value:function(e){this.data.get(e).refCount++}},{key:"decRef",value:function(e){this.data.has(e)&&this.data.get(e).refCount--}},{key:"move",value:function(e,t,r,a){this.data.set(e,{values:t,dtype:a,refCount:1})}},{key:"numDataIds",value:function(){return this.data.numDataIds()}},{key:"read",value:(r=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.readSync(t));case 1:case"end":return e.stop()}}),e,this)}))),function(e){return r.apply(this,arguments)})},{key:"readSync",value:function(e){var t=this.data.get(e),r=t.dtype,a=t.complexTensorInfos;if("complex64"===r){var n=this.readSync(a.real.dataId),i=this.readSync(a.imag.dataId);return g.mergeRealAndImagArrays(n,i)}return this.data.get(e).values}},{key:"bufferSync",value:function(e){var t=this.readSync(e.dataId),r=t;if("string"===e.dtype)try{r=t.map((function(e){return a.decodeString(e)}))}catch(n){throw new Error("Failed to decode encoded string bytes into utf-8")}return Zi(e.shape,e.dtype,r)}},{key:"makeOutput",value:function(e,t,r){var a=this.write(e,t,r);return gs().makeTensorFromDataId(a,t,r,this)}},{key:"disposeData",value:function(e){if(this.data.has(e)){var t=this.data.get(e).complexTensorInfos;null!=t&&(this.disposeData(t.real.dataId),this.disposeData(t.imag.dataId)),this.data.delete(e)}}},{key:"disposeIntermediateTensorInfo",value:function(e){var t=e.dataId;if(this.data.has(t)){var r=this.data.get(t);r.refCount--,r.refCount<1&&this.disposeData(t)}}},{key:"time",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(t){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=a.now(),e.abrupt("return",(t(),{kernelMs:a.now()-r}));case 2:case"end":return e.stop()}}),e)}))),function(e){return t.apply(this,arguments)})},{key:"memory",value:function(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}},{key:"stridedSlice",value:function(e,t,r,a){Hk(e,"stridedSlice");var n=c.computeOutShape(t,r,a);if(n.some((function(e){return 0===e})))return ii([],n);for(var i=Zi(n,e.dtype),o=this.bufferSync(e),s=0;s<i.size;s++){for(var l=i.indexToLoc(s),u=new Array(l.length),h=0;h<u.length;h++)u[h]=l[h]*a[h]+t[h];i.set.apply(i,[o.get.apply(o,u)].concat(_toConsumableArray(l)))}return i.toTensor()}},{key:"diag",value:function(e){for(var t=this.readSync(e.dataId),r=Zi([e.size,e.size],e.dtype),a=r.values,n=0;n<t.length;n++)a[n*e.size+n]=t[n];return r.toTensor()}},{key:"unstack",value:function(e,t){for(var r=e.shape[t],a=new Array(e.rank-1),n=0,i=0;i<e.rank;i++)i!==t&&(a[n++]=e.shape[i]);var o=new Array(e.rank).fill(0),s=e.shape.slice();s[t]=1;for(var l=new Array(r),u=0;u<l.length;u++)o[t]=u,l[u]=Kl(e,o,s).reshape(a);return l}},{key:"reverse",value:function(e,t){Hk(e,"reverse");for(var r=Zi(e.shape,e.dtype),a=this.bufferSync(e),n=function(n){var i=r.indexToLoc(n),o=i.slice();t.forEach((function(t){return o[t]=e.shape[t]-1-o[t]})),r.set.apply(r,[a.get.apply(a,_toConsumableArray(o))].concat(_toConsumableArray(i)))},i=0;i<r.size;i++)n(i);return r.toTensor()}},{key:"neg",value:function(e){return Hk(e,"neg"),Os(qs(-1),e)}},{key:"addN",value:function(e){var t=this;Hk(e,"addN");for(var r=e.map((function(e){return t.readSync(e.dataId)})),a=Zi(e[0].shape,e[0].dtype),n=a.values,i=0;i<e.length;i++)for(var o=r[i],s=0;s<n.length;s++)n[s]+=o[s];return a.toTensor()}},{key:"softmax",value:function(e,t){var r=a.parseAxisParam([t],e.shape),n=nh(e,r),i=g.expandShapeToKeepDim(n.shape,r),o=Zs(e,n.reshape(i)),s=Nu(o),l=this.sum(s,r).reshape(i);return Ds(s,l)}},{key:"pow",value:function(e,t){return Hk([e,t],"pow"),this.broadcastedBinaryOp(e,t,e.dtype,(function(e,t){return Math.pow(e,t)}))}},{key:"floorDiv",value:function(e,t){return Hk([e,t],"floorDiv"),this.broadcastedBinaryOp(e,t,"int32",(function(e,t){return Math.floor(e/t)}))}},{key:"sum",value:function(e,t){Hk(e,"sum"),g.assertAxesAreInnerMostDims("sum",t,e.rank);for(var r=_slicedToArray(g.computeOutAndReduceShapes(e.shape,t),2),n=r[0],i=r[1],o=ph(n,zn(e.dtype,"int32")),s=a.sizeFromShape(i),l=this.readSync(o.dataId),u=this.readSync(e.dataId),h=0;h<l.length;++h){for(var c=h*s,f=0,d=0;d<s;++d)f+=u[c+d];l[h]=f}return o}},{key:"prod",value:function(e,t){Hk(e,"sum");for(var r=_slicedToArray(g.computeOutAndReduceShapes(e.shape,t),2),n=r[0],i=r[1],o=ph(n,zn(e.dtype,"int32")),s=a.sizeFromShape(i),l=this.readSync(o.dataId),u=this.readSync(e.dataId),h=0;h<l.length;++h){for(var c=h*s,f=1,d=0;d<s;++d)f*=u[c+d];l[h]=f}return o}},{key:"unsortedSegmentSum",value:function(e,t,r){Hk(e,"unsortedSegmentSum");for(var a=[],n=e.rank-t.rank,i=0;i<n;++i)t=t.expandDims(i+1);for(var o=0;o<r;++o){var s=qs(o,"int32"),l=Cu(s,t).asType("float32").mul(e).sum(0);a.push(l)}return wc(a)}},{key:"argMin",value:function(e,t){Hk(e,"argMin");var r=[t];g.assertAxesAreInnerMostDims("argMin",r,e.rank);for(var n=_slicedToArray(g.computeOutAndReduceShapes(e.shape,r),2),i=n[0],o=n[1],s=ph(i,"int32"),l=a.sizeFromShape(o),u=this.readSync(s.dataId),h=this.readSync(e.dataId),c=0;c<u.length;++c){for(var f=c*l,d=h[f],v=0,p=0;p<l;++p){var _=h[f+p];_<d&&(d=_,v=p)}u[c]=v}return s}},{key:"argMax",value:function(e,t){Hk(e,"argMax");var r=[t];g.assertAxesAreInnerMostDims("argMax",r,e.rank);for(var n=_slicedToArray(g.computeOutAndReduceShapes(e.shape,r),2),i=n[0],o=n[1],s=ph(i,"int32"),l=a.sizeFromShape(o),u=this.readSync(s.dataId),h=this.readSync(e.dataId),c=0;c<u.length;++c){for(var f=c*l,d=h[f],v=0,p=0;p<l;++p){var _=h[f+p];_>d&&(d=_,v=p)}u[c]=v}return s}},{key:"cumsum",value:function(e,t,r,a){if(Hk(e,"cumsum"),t!==e.rank-1)throw new Error("backend.cumsum in CPU expects an inner-most axis=".concat(e.rank-1," but got axis=")+t);for(var n=zn(e.dtype,"int32"),i=ph(e.shape,n),o=this.readSync(i.dataId),s=this.readSync(e.dataId),l=e.shape[e.rank-1],u=a?function(e,t){return e+l-t-1}:function(e,t){return e+t},h=0;h<s.length;h+=l)for(var c=0;c<l;c++){var f=u(h,c);if(0===c)o[f]=r?0:s[f];else{var d=u(h,c-1);o[f]=r?s[d]+o[d]:s[f]+o[d]}}return i}},{key:"equal",value:function(e,t){return Hk([e,t],"equal"),this.broadcastedBinaryOp(e,t,"bool",(function(e,t){return e===t?1:0}))}},{key:"notEqual",value:function(e,t){return Hk([e,t],"notEqual"),this.broadcastedBinaryOp(e,t,"bool",(function(e,t){return e!==t?1:0}))}},{key:"less",value:function(e,t){return Hk([e,t],"less"),this.broadcastedBinaryOp(e,t,"bool",(function(e,t){return e<t?1:0}))}},{key:"lessEqual",value:function(e,t){return Hk([e,t],"lessEqual"),this.broadcastedBinaryOp(e,t,"bool",(function(e,t){return e<=t?1:0}))}},{key:"greater",value:function(e,t){return Hk([e,t],"greater"),this.broadcastedBinaryOp(e,t,"bool",(function(e,t){return e>t?1:0}))}},{key:"greaterEqual",value:function(e,t){return Hk([e,t],"greaterEqual"),this.broadcastedBinaryOp(e,t,"bool",(function(e,t){return e>=t?1:0}))}},{key:"logicalAnd",value:function(e,t){return Hk([e,t],"logicalAnd"),this.broadcastedBinaryOp(e,t,"bool",(function(e,t){return e&&t}))}},{key:"logicalOr",value:function(e,t){return Hk([e,t],"logicalOr"),this.broadcastedBinaryOp(e,t,"bool",(function(e,t){return e||t}))}},{key:"select",value:function(e,t,r){Hk([e,t,r],"select");for(var n=this.readSync(e.dataId),i=this.readSync(t.dataId),o=this.readSync(r.dataId),s=ph(t.shape,zn(t.dtype,r.dtype)),l=this.readSync(s.dataId),u=0,h=0===e.rank||e.rank>1||1===t.rank?1:a.sizeFromShape(t.shape.slice(1)),c=0;c<n.length;c++)for(var f=0;f<h;f++)l[u++]=1===n[c]?i[c]:o[c];return s}},{key:"where",value:function(e){Hk([e],"where");var t=this.readSync(e.dataId);return Qk(e.shape,t)}},{key:"topk",value:function(e,t,r){Hk(e,"topk");var a=this.readSync(e.dataId);return Kk(a,e.shape,e.dtype,t,r)}},{key:"min",value:function(e,t){Hk(e,"min"),g.assertAxesAreInnerMostDims("min",t,e.rank);for(var r=_slicedToArray(g.computeOutAndReduceShapes(e.shape,t),2),n=r[0],i=r[1],o=ph(n,e.dtype),s=a.sizeFromShape(i),l=this.readSync(o.dataId),u=this.readSync(e.dataId),h=0;h<l.length;++h){for(var c=h*s,f=u[c],d=0;d<s;++d){var v=u[c+d];v<f&&(f=v)}l[h]=f}return o}},{key:"minimum",value:function(e,t){return Hk([e,t],"minimum"),this.broadcastedBinaryOp(e,t,e.dtype,(function(e,t){return Math.min(e,t)}))}},{key:"mod",value:function(e,t){return Hk([e,t],"mod"),this.broadcastedBinaryOp(e,t,e.dtype,(function(e,t){var r=e%t;return e<0&&t<0||e>=0&&t>=0?r:(r+t)%t}))}},{key:"maximum",value:function(e,t){return Hk([e,t],"maximum"),this.broadcastedBinaryOp(e,t,e.dtype,(function(e,t){return Math.max(e,t)}))}},{key:"all",value:function(e,t){Hk(e,"all"),g.assertAxesAreInnerMostDims("all",t,e.rank);for(var r=_slicedToArray(g.computeOutAndReduceShapes(e.shape,t),2),n=r[0],i=r[1],o=ph(n,e.dtype),s=a.sizeFromShape(i),l=this.readSync(o.dataId),u=this.readSync(e.dataId),h=0;h<l.length;++h){for(var c=h*s,f=u[c],d=0;d<s;++d){var v=u[c+d];f=f&&v}l[h]=f}return o}},{key:"any",value:function(e,t){Hk(e,"any"),g.assertAxesAreInnerMostDims("any",t,e.rank);for(var r=_slicedToArray(g.computeOutAndReduceShapes(e.shape,t),2),n=r[0],i=r[1],o=ph(n,e.dtype),s=a.sizeFromShape(i),l=this.readSync(o.dataId),u=this.readSync(e.dataId),h=0;h<l.length;++h){for(var c=h*s,f=u[c],d=0;d<s;++d){var v=u[c+d];f=f||v}l[h]=f}return o}},{key:"squaredDifference",value:function(e,t){return Hk([e,t],"squaredDifference"),this.broadcastedBinaryOp(e,t,e.dtype,(function(e,t){var r=e-t;return r*r}))}},{key:"eluDer",value:function(e,t){Hk([e,t],"eluDer");for(var r=new Float32Array(t.size),a=this.readSync(t.dataId),n=this.readSync(e.dataId),i=0;i<a.length;++i){var o=a[i];r[i]=o>=1?n[i]:n[i]*(o+1)}return this.makeOutput(r,t.shape,"float32")}},{key:"atan2",value:function(e,t){return Hk([e,t],"atan2"),this.broadcastedBinaryOp(e,t,e.dtype,(function(e,t){return Math.atan2(e,t)}))}},{key:"tile",value:function(e,t){return Hk(e,"tile"),Xk(this.bufferSync(e),t)}},{key:"gather",value:function(e,t,r){Hk([e,t],"gather");var a=e.shape.slice(),n=this.readSync(t.dataId);a[r]=n.length;for(var i=Zi(a,e.dtype),o=this.bufferSync(e),s=0;s<i.size;++s){var l=i.indexToLoc(s),u=l.slice();u[r]=n[l[r]];var h=o.locToIndex(u);i.values[s]=o.values[h]}return i.toTensor()}},{key:"batchToSpaceND",value:function(e,t,r){Hk([e],"batchToSpaceND");var a=t.reduce((function(e,t){return e*t})),n=g.getReshaped(e.shape,t,a),i=g.getPermuted(n.length,t.length),o=g.getReshapedPermuted(e.shape,t,a),s=g.getSliceBeginCoords(r,t.length),l=g.getSliceSize(o,r,t.length);return So(e.reshape(n),i).reshape(o).slice(s,l)}},{key:"pool3d",value:function(e,t,r){Hk(e,"pool3d");for(var a=t.strideDepth,n=t.strideHeight,i=t.strideWidth,o=t.dilationDepth,s=t.dilationHeight,l=t.dilationWidth,u=t.effectiveFilterDepth,h=t.effectiveFilterHeight,c=t.effectiveFilterWidth,f=t.padInfo.front,d=t.padInfo.top,v=t.padInfo.left,p="max"===r?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,g=this.readSync(e.dataId),_=Zi(t.outShape,e.dtype),m=_.values,y=t.outShape[1]*t.outShape[2]*t.outShape[3]*t.outShape[4],b=t.outShape[2]*t.outShape[3]*t.outShape[4],x=t.outShape[3]*t.outShape[4],k=t.outShape[4],w=0;w<t.batchSize;++w)for(var C=w*y,T=w*e.strides[0],S=0;S<t.inChannels;++S)for(var I=0;I<t.outDepth;++I){for(var A=I*a-f,R=A;R<0;)R+=o;for(var N=Math.min(t.inDepth,u+A),E=C+I*b,F=0;F<t.outHeight;++F){for(var M=F*n-d,D=M;D<0;)D+=s;for(var O=Math.min(t.inHeight,h+M),L=E+F*x,z=0;z<t.outWidth;++z){for(var B=z*i-v,P=B;P<0;)P+=l;for(var V=Math.min(t.inWidth,c+B),U=L+z*k,W=p,G=0,H=0,j=R;j<N;j+=o){for(var q=T+j*e.strides[1],X=D;X<O;X+=s){for(var K=q+X*e.strides[2],Q=P;Q<V;Q+=l){var Y=g[K+Q*e.strides[3]+S];if("max"===r&&Y>W?W=Y:"avg"===r&&(G+=Y,H++),isNaN(W))break}if(isNaN(W))break}if(isNaN(W))break}m[U+S]="avg"===r?G/H:W}}}return _.toTensor()}},{key:"avgPool3d",value:function(e,t){return Hk(e,"avgPool3d"),this.pool3d(e,t,"avg").toFloat()}},{key:"avgPool3dBackprop",value:function(e,t,r){Hk([e,t],"avgPool3dBackprop");for(var a=r.strideDepth,n=r.strideHeight,i=r.strideWidth,o=r.filterDepth,s=r.filterHeight,l=r.filterWidth,u=r.dilationDepth,h=r.dilationHeight,c=r.dilationWidth,f=r.effectiveFilterDepth,d=r.effectiveFilterHeight,v=r.effectiveFilterWidth,p=f-1-r.padInfo.front,g=v-1-r.padInfo.left,_=d-1-r.padInfo.top,m=Zi(t.shape,"float32"),y=1/(o*s*l),b=this.bufferSync(e),x=0;x<r.batchSize;++x)for(var k=0;k<r.inChannels;++k)for(var w=0;w<r.inDepth;++w)for(var C=0;C<r.inHeight;++C)for(var T=0;T<r.inWidth;++T){for(var S=w-p,I=C-_,A=T-g,R=0,N=0;N<f;N+=u){var E=(S+N)/a;if(!(E<0||E>=r.outDepth||Math.floor(E)!==E))for(var F=0;F<d;F+=h){var M=(I+F)/n;if(!(M<0||M>=r.outHeight||Math.floor(M)!==M))for(var D=0;D<v;D+=c){var O=(A+D)/i;O<0||O>=r.outWidth||Math.floor(O)!==O||(R+=b.get(x,E,M,O,k))}}}m.set(R*y,x,w,C,T,k)}return m.toTensor()}},{key:"maxPool3d",value:function(e,t){return Hk(e,"maxPool3d"),this.pool3d(e,t,"max").toFloat()}},{key:"maxPool3dPositions",value:function(e,t){for(var r=Zi(t.outShape,"int32"),a=t.strideDepth,n=t.strideHeight,i=t.strideWidth,o=t.dilationDepth,s=t.dilationHeight,l=t.dilationWidth,u=t.effectiveFilterDepth,h=t.effectiveFilterHeight,c=t.effectiveFilterWidth,f=t.padInfo.front,d=t.padInfo.top,v=t.padInfo.left,p=this.bufferSync(e),g=0;g<t.batchSize;++g)for(var _=0;_<t.inChannels;++_)for(var m=0;m<t.outDepth;++m){for(var y=m*a-f,b=y;b<0;)b+=o;for(var x=Math.min(t.inDepth,u+y),k=0;k<t.outHeight;++k){for(var w=k*n-d,C=w;C<0;)C+=s;for(var T=Math.min(t.inHeight,h+w),S=0;S<t.outWidth;++S){for(var I=S*i-v,A=I;A<0;)A+=l;for(var R=Math.min(t.inWidth,c+I),N=Number.NEGATIVE_INFINITY,E=-1,F=b;F<x;F+=o)for(var M=F-y,D=C;D<T;D+=s)for(var O=D-w,L=A;L<R;L+=l){var z=L-I,B=p.get(g,F,D,L,_);B>=N&&(N=B,E=M*h*c+O*h+z)}r.set(E,g,m,k,S,_)}}}return r.toTensor()}},{key:"maxPool3dBackprop",value:function(e,t,r,a){Hk([t,r],"maxPool3dBackprop");for(var n=this.maxPool3dPositions(t,a),i=a.strideDepth,o=a.strideHeight,s=a.strideWidth,l=a.dilationDepth,u=a.dilationHeight,h=a.dilationWidth,c=a.effectiveFilterDepth,f=a.effectiveFilterHeight,d=a.effectiveFilterWidth,v=c-1-a.padInfo.front,p=d-1-a.padInfo.left,g=f-1-a.padInfo.top,_=Zi(t.shape,"float32"),m=this.bufferSync(n),y=this.bufferSync(e),b=0;b<a.batchSize;++b)for(var x=0;x<a.inChannels;++x)for(var k=0;k<a.inDepth;++k)for(var w=0;w<a.inHeight;++w)for(var C=0;C<a.inWidth;++C){for(var T=k-v,S=w-g,I=C-p,A=0,R=0;R<c;R+=l){var N=(T+R)/i;if(!(N<0||N>=a.outDepth||Math.floor(N)!==N))for(var E=0;E<f;E+=u){var F=(S+E)/o;if(!(F<0||F>=a.outHeight||Math.floor(F)!==F))for(var M=0;M<d;M+=h){var D=(I+M)/s;if(!(D<0||D>=a.outWidth||Math.floor(D)!==D)){var O=c*f*d-1-m.get(b,N,F,D,x)===R*f*d+E*d+M?1:0;0!==O&&(A+=y.get(b,N,F,D,x)*O)}}}}_.set(A,b,k,w,C,x)}return _.toTensor()}},{key:"resizeBilinear",value:function(e,t,r,n){Hk(e,"resizeBilinear");for(var i=_slicedToArray(e.shape,4),o=i[0],s=i[1],l=i[2],u=i[3],h=this.readSync(e.dataId),c=new Float32Array(a.sizeFromShape([o,t,r,u])),f=[n&&t>1?s-1:s,n&&r>1?l-1:l],d=[n&&t>1?t-1:t,n&&r>1?r-1:r],v=0,p=f[0]/d[0],g=f[1]/d[1],_=0;_<o;_++)for(var m=0;m<t;m++)for(var y=p*m,b=Math.floor(y),x=y-b,k=Math.min(s-1,Math.ceil(y)),w=_*e.strides[0]+b*e.strides[1],C=_*e.strides[0]+k*e.strides[1],T=0;T<r;T++)for(var S=g*T,I=Math.floor(S),A=S-I,R=Math.min(l-1,Math.ceil(S)),N=w+I*e.strides[2],E=C+I*e.strides[2],F=w+R*e.strides[2],M=C+R*e.strides[2],D=0;D<u;D++){var O=h[N+D],L=h[E+D],z=O+(h[F+D]-O)*A;c[v++]=z+(L+(h[M+D]-L)*A-z)*x}return ii(c,[o,t,r,u])}},{key:"resizeBilinearBackprop",value:function(e,t,r){Hk([e,t],"resizeBilinearBackprop");for(var a=_slicedToArray(t.shape,4),n=a[0],i=a[1],o=a[2],s=a[3],l=_slicedToArray(e.shape,3),u=l[1],h=l[2],c=new Float32Array(n*i*o*s),f=[r&&u>1?i-1:i,r&&h>1?o-1:o],d=[r&&u>1?u-1:u,r&&h>1?h-1:h],v=f[0]/d[0],p=f[1]/d[1],g=this.readSync(e.dataId),_=0,m=0;m<n;m++)for(var y=m*t.strides[0],b=0;b<u;b++)for(var x=b*v,k=Math.floor(x),w=Math.min(Math.ceil(x),i-1),C=y+k*t.strides[1],T=y+w*t.strides[1],S=x-k,I=1-S,A=0;A<h;A++)for(var R=A*p,N=Math.floor(R),E=Math.min(Math.ceil(R),o-1),F=R-N,M=1-F,D=C+N*t.strides[2],O=C+E*t.strides[2],L=T+N*t.strides[2],z=T+E*t.strides[2],B=I*M,P=I*F,V=S*M,U=S*F,W=0;W<s;W++){var G=g[_++];c[D+W]+=G*B,c[O+W]+=G*P,c[L+W]+=G*V,c[z+W]+=G*U}return Ac(c,[n,o,i,s],t.dtype)}},{key:"resizeNearestNeighbor",value:function(e,t,r,a){Hk(e,"resizeNearestNeighbor");for(var n=_slicedToArray(e.shape,4),i=n[0],o=n[1],s=n[2],l=n[3],u=this.readSync(e.dataId),h=new Float32Array(i*t*r*l),c=[a&&t>1?o-1:o,a&&r>1?s-1:s],f=[a&&t>1?t-1:t,a&&r>1?r-1:r],d=c[0]/f[0],v=c[1]/f[1],p=0,g=0;g<i;g++)for(var _=g*e.strides[0],m=0;m<t;m++)for(var y=d*m,b=_+Math.min(o-1,a?Math.round(y):Math.floor(y))*e.strides[1],x=0;x<r;x++)for(var k=v*x,w=b+Math.min(s-1,a?Math.round(k):Math.floor(k))*e.strides[2],C=0;C<l;C++)h[p++]=u[w+C];return ii(h,[i,t,r,l],e.dtype)}},{key:"resizeNearestNeighborBackprop",value:function(e,t,r){Hk([e,t],"resizeNearestNeighborBackprop");for(var a=_slicedToArray(t.shape,4),n=a[0],i=a[1],o=a[2],s=a[3],l=_slicedToArray(e.shape,3),u=l[1],h=l[2],c=new Float32Array(n*i*o*s),f=this.readSync(e.dataId),d=[r&&u>1?i-1:i,r&&h>1?o-1:o],v=[r&&u>1?u-1:u,r&&h>1?h-1:h],p=d[0]/v[0],g=d[1]/v[1],_=1/p,m=1/g,y=2*Math.ceil(_)+2,b=2*Math.ceil(m)+2,x=0;x<n;x++)for(var k=x*t.strides[0],w=0;w<i;w++)for(var C=k+w*t.strides[1],T=Math.floor(w*_),S=Math.floor(T-y/2),I=0;I<o;I++)for(var A=C+I*t.strides[2],R=Math.floor(I*m),N=Math.floor(R-b/2),E=0;E<s;E++){for(var F=0,M=0;M<y;M++){var D=M+S;if(!(D<0||D>=u)){var O=k+D*e.strides[1],L=D*p;if(w===Math.min(i-1,r?Math.round(L):Math.floor(L)))for(var z=0;z<b;z++){var B=z+N;if(!(B<0||B>=h)){var P=O+B*e.strides[2],V=B*g;I===Math.min(o-1,r?Math.round(V):Math.floor(V))&&(F+=f[P+E])}}}}c[A+E]=F}return Ac(c,t.shape,t.dtype)}},{key:"localResponseNormalization4D",value:function(e,t,r,a,n){Hk(e,"localResponseNormalization4D");var i=e.shape[3],o=i-1,s=this.readSync(e.dataId),l=e.size,u=new Float32Array(l);function h(e){for(var r=e%i,a=e-r+Math.max(0,r-t),n=e-r+Math.min(r+t,o),l=0;a<=n;a++){var u=s[a];l+=u*u}return l}for(var c=0;c<l;c++){var f=h(c),d=s[c]*Math.pow(r+a*f,-n);u[c]=d}return Ac(u,e.shape)}},{key:"LRNGrad",value:function(e,t,r,a,n,i,o){Hk(e,"LRNGrad");for(var s=e.shape[3],l=this.readSync(e.dataId),u=this.readSync(t.dataId),h=this.readSync(r.dataId),c=new Float32Array(e.size),f=e.size,d=0;d<f;d++){for(var v=d%s,p=d-v+Math.max(0,v-a),g=d-v+Math.min(s,v+a+1),_=0,m=p;m<g;m++)_+=Math.pow(u[m],2);_=i*_+n;for(var y=p;y<g;y++){var b=-2*i*o*u[y]*h[d]/_;d===y&&(b+=Math.pow(_,-o)),b*=l[d],c[y]+=b}}return Ac(c,e.shape)}},{key:"multinomial",value:function(e,t,r,a){Hk(e,"multinomial");for(var n=t?e:vc(e),i=n.shape[0],o=n.shape[1],s=ph([i,r],"int32"),l=this.readSync(s.dataId),u=this.readSync(n.dataId),h=0;h<i;++h){var c=h*o,f=new Float32Array(o-1);f[0]=u[c];for(var d=1;d<f.length;++d)f[d]=f[d-1]+u[c+d];for(var v=Ph.alea(a.toString()),p=h*r,g=0;g<r;++g){var _=v();l[p+g]=f.length;for(var m=0;m<f.length;m++)if(_<f[m]){l[p+g]=m;break}}}return s}},{key:"oneHot",value:function(e,t,r,a){Hk(e,"oneHot");var n=new Float32Array(e.size*t);n.fill(a);for(var i=this.readSync(e.dataId),o=0;o<e.size;++o)i[o]>=0&&i[o]<t&&(n[o*t+i[o]]=r);return Ic(n,[e.size,t],"int32")}},{key:"nonMaxSuppression",value:function(e,t,r,a,n){Hk(e,"nonMaxSuppression");var i=this.readSync(e.dataId),o=this.readSync(t.dataId);return jk(i,o,r,a,n)}},{key:"depthToSpace",value:function(e,t,r){a.assert("NHWC"===r,(function(){return"Only NHWC dataFormat supported on CPU for depthToSpace. Got "+r})),a.assert(t>1,(function(){return"blockSize should be > 1 for depthToSpace, but was: "+t}));for(var n=e.shape[0],i=e.shape[1],o=e.shape[2],s=e.shape[3],l=i*t,u=o*t,h=s/(t*t),c=this.readSync(e.dataId),f=new Float32Array(n*l*u*h),d=0,v=0;v<n;++v)for(var p=0;p<l;++p)for(var g=Math.floor(p/t),_=p%t,m=0;m<u;++m)for(var y=Math.floor(m/t),b=(_*t+m%t)*h,x=0;x<h;++x)f[d++]=c[x+b+s*(y+o*(g+i*v))];return Ac(f,[n,l,u,h])}},{key:"broadcastedBinaryOp",value:function(e,t,r,a){var n=g.assertAndGetBroadcastShape(e.shape,t.shape),i=Zi(n,r),o=this.readSync(e.dataId),s=this.readSync(t.dataId),l=g.getBroadcastDims(e.shape,n),u=g.getBroadcastDims(t.shape,n),h=i.values;if(l.length+u.length===0)for(var c=0;c<h.length;++c)h[c]=a(o[c%o.length],s[c%s.length]);else for(var f=this.bufferSync(e),d=this.bufferSync(t),v=function(r){var n=i.indexToLoc(r),c=n.slice(-e.rank);l.forEach((function(e){return c[e]=0}));var v=f.locToIndex(c),p=n.slice(-t.rank);u.forEach((function(e){return p[e]=0}));var g=d.locToIndex(p);h[r]=a(o[v],s[g])},p=0;p<h.length;++p)v(p);return i.toTensor()}},{key:"split",value:function(e,t,r){return qk(e,t,r)}},{key:"dispose",value:function(){}},{key:"floatPrecision",value:function(){return 32}},{key:"epsilon",value:function(){return _get(_getPrototypeOf(i.prototype),"epsilon",this).call(this)}},{key:"cropAndResize",value:function(e,t,r,a,n,i){for(var o=_slicedToArray(e.shape,4),s=o[0],l=o[1],u=o[2],h=o[3],c=t.shape[0],f=_slicedToArray(a,2),d=f[0],v=f[1],p=Zi([c,d,v,h],"float32"),g=this.readSync(t.dataId),_=this.readSync(r.dataId),m=this.readSync(e.dataId),y=e.strides,b=p.strides,x=0;x<c;x++){var k=4*x,w=g[k],C=g[k+1],T=g[k+2],S=g[k+3],I=_[x];if(!(I>=s))for(var A=d>1?(T-w)*(l-1)/(d-1):0,R=v>1?(S-C)*(u-1)/(v-1):0,N=0;N<d;N++){var E=d>1?w*(l-1)+N*A:.5*(w+T)*(l-1);if(E<0||E>l-1)for(var F=0;F<v;F++)for(var M=0;M<h;M++)p.values[M+F*b[2]+N*b[1]+x*b[0]]=i;else if("bilinear"===n)for(var D=Math.floor(E),O=Math.ceil(E),L=E-D,z=0;z<v;z++){var B=v>1?C*(u-1)+z*R:.5*(C+S)*(u-1);if(B<0||B>u-1)for(var P=0;P<h;P++)p.values[P+z*b[2]+N*b[1]+x*b[0]]=i;else for(var V=Math.floor(B),U=Math.ceil(B),W=B-V,G=0;G<h;G++){var H=G+V*y[2]+D*y[1]+I*y[0],j=m[H],q=m[H=G+U*y[2]+D*y[1]+I*y[0]],X=m[H=G+V*y[2]+O*y[1]+I*y[0]],K=m[H=G+U*y[2]+O*y[1]+I*y[0]],Q=j+(q-j)*W;H=G+z*b[2]+N*b[1]+x*b[0],p.values[H]=Q+(X+(K-X)*W-Q)*L}}else for(var Y=0;Y<v;++Y){var J=v>1?C*(u-1)+Y*R:.5*(C+S)*(u-1);if(J<0||J>u-1)for(var Z=0;Z<h;Z++)p.values[Z+Y*b[2]+N*b[1]+x*b[0]]=i;else for(var $=Math.round(J),ee=Math.round(E),te=0;te<h;te++)p.values[te+Y*b[2]+N*b[1]+x*b[0]]=m[te+$*y[2]+ee*y[1]+I*y[0]]}}}return p.toTensor()}},{key:"sparseToDense",value:function(e,t,r,a){var n=g.calculateShapes(t,e,r),i=n.sliceRank,o=n.numUpdates,s=n.sliceSize,l=n.strides,u=n.outputSize;return this.scatter(e,t,r,u,s,o,i,l,a,!1)}},{key:"gatherND",value:function(e,t){var r=t.shape,a=r[r.length-1],n=_slicedToArray(g.prepareAndValidate(e,t),4),i=n[0],o=n[1],s=n[2],l=n[3];if(0===o)return ii([],i,e.dtype);for(var u=new Sn([o,s],e.dtype),h=this.readSync(t.dataId),c=this.readSync(e.dataId),f=0;f<o;f++){for(var d=[],v=0,p=0;p<a;p++){var _=h[f*a+p];v+=_*l[p],d.push(_)}if(v<0||v>=e.size/s)throw new Error("Invalid indices: ".concat(d," does not index into ").concat(e.shape));for(var m=0;m<s;m++)u.values[f*s+m]=c[v*s+m]}return u.toTensor().reshape(i)}},{key:"scatterND",value:function(e,t,r){var a=g.calculateShapes(t,e,r),n=a.sliceRank,i=a.numUpdates,o=a.sliceSize,s=a.strides,l=a.outputSize,u=qs(0);return this.scatter(e,t,r,l,o,i,n,s,u,!0)}},{key:"onesLike",value:function(e){if("string"===e.dtype)throw new Error("onesLike is not supported for string tensors");return Qs(e.shape,1,e.dtype)}},{key:"zerosLike",value:function(e){var t=a.getArrayFromDType(e.dtype,a.sizeFromShape(e.shape));return this.makeOutput(t,e.shape,e.dtype)}},{key:"linspace",value:function(e,t,r){return g.linspaceImpl(e,t,r)}},{key:"scatter",value:function(e,t,r,a,n,i,o,s,l,u){var h=[a/n,n],c=this.readSync(e.dataId),f=this.readSync(t.dataId);if(0===a)return ii([],r,t.dtype);var d=new Sn(h,t.dtype);d.values.fill(this.readSync(l.dataId)[0]);for(var v=0;v<i;v++){for(var p=[],g=0,_=0;_<o;_++){var m=c[v*o+_];p.push(m),g+=m*s[_]}if(g<0||g>=a/n)throw new Error("Invalid indices: ".concat(p," does not index into ").concat(r));for(var y=0;y<n;y++)u?d.values[g*n+y]+=f[v*n+y]:d.values[g*n+y]=0===t.rank?f[0]:f[v*n+y]}return d.toTensor().reshape(r)}}]),i}(ge);function Jk(e,t,r){return function(n){var i=n.inputs,o=n.attrs,s=n.backend,l=i.x;if(Hk(l,e),"string"===l.dtype||"string"===r)throw new Error("unaryKernelFunc does not support string input/output");for(var u=s,h=u.data.get(l.dataId).values,c=a.sizeFromShape(l.shape),f=r||l.dtype,d=a.getArrayFromDType(f,c),v=0;v<c;++v)d[v]=t(h[v],o);return u.makeTensorInfo(l.shape,f,d)}}function Zk(e,t,r){return function(a){var n=a.inputs,i=a.attrs,o=a.backend,s=n.x;if(Hk(s,e),"string"===s.dtype||"string"===r)throw new Error("unaryKernelFunc does not support string input/output");var l=o,u=l.data.get(s.dataId).values,h=r||s.dtype,c=t(u,h,i);return l.makeTensorInfo(s.shape,h,c)}}Rs("cpu",(function(){return new Yk}),1);var $k=Jk(or,(function(e){return e>=0?e:Math.exp(e)-1})),ew={kernelName:or,backendName:"cpu",kernelFunc:$k};function tw(e){var t=e.inputs,r=e.backend,a=t.x;return r.incRef(a.dataId),{dataId:a.dataId,shape:a.shape,dtype:a.dtype}}var rw={kernelName:kr,backendName:"cpu",kernelFunc:tw};function aw(e){return function(t,r,n,i,o){var s=g.assertAndGetBroadcastShape(t,r),l=s.length,u=a.computeStrides(s),h=a.sizeFromShape(s),c=a.getTypedArrayFromDType(o,h),f=t.length,d=r.length,v=a.computeStrides(t),p=a.computeStrides(r),_=g.getBroadcastDims(t,s),m=g.getBroadcastDims(r,s);if(_.length+m.length===0)for(var y=0;y<c.length;++y)c[y]=e(n[y%n.length],i[y%i.length]);else for(var b=function(t){var r=a.indexToLoc(t,l,u),o=r.slice(-f);_.forEach((function(e){return o[e]=0}));var s=a.locToIndex(o,f,v),h=r.slice(-d);m.forEach((function(e){return h[e]=0}));var g=a.locToIndex(h,d,p);c[t]=e(n[s],i[g])},x=0;x<c.length;++x)b(x);return[c,s]}}var nw=aw((function(e,t){return e<0?t*e:e}));function iw(e){var t=e.inputs,r=e.backend,a=t.x,n=t.alpha;Hk([a,n],"prelu");var i=r.data.get(a.dataId).values,o=r.data.get(n.dataId).values,s=_slicedToArray(nw(a.shape,n.shape,i,o,a.dtype),2),l=s[0],u=s[1];return r.makeTensorInfo(u,a.dtype,l)}var ow={kernelName:la,backendName:"cpu",kernelFunc:iw},sw=Jk(da,(function(e){return Math.max(0,e)})),lw={kernelName:da,backendName:"cpu",kernelFunc:sw},uw=Jk(ya,(function(e){return Math.min(Math.max(0,e),6)})),hw={kernelName:ya,backendName:"cpu",kernelFunc:uw};function cw(e,t,r,a){if("linear"===r)return tw({inputs:{x:t},backend:e});if("relu"===r)return sw({inputs:{x:t},backend:e});if("elu"===r)return $k({inputs:{x:t},backend:e});if("relu6"===r)return uw({inputs:{x:t},backend:e});if("prelu"===r)return iw({inputs:{x:t,alpha:a},backend:e});throw new Error("Activation ".concat(r," has not been implemented for the CPU backend."))}function fw(e){var t=e.inputs,r=e.backend,a=t.real,n=t.imag,i=r.data.get(a.dataId).values,o=r.data.get(n.dataId).values,s=r.makeTensorInfo(a.shape,"complex64");return r.data.get(s.dataId).complexTensorInfos={real:r.makeTensorInfo(a.shape,"float32",i),imag:r.makeTensorInfo(n.shape,"float32",o)},s}var dw={kernelName:Pt,backendName:"cpu",kernelFunc:fw};function vw(e){var t=e.inputs,r=e.backend,a=t.input,n=r.data.get(a.dataId).complexTensorInfos.real,i=r.data.get(n.dataId).values;return r.makeTensorInfo(n.shape,n.dtype,i)}var pw={kernelName:ca,backendName:"cpu",kernelFunc:vw};function gw(e){var t=e.inputs,r=e.backend,n=e.attrs,i=t.x,o=n.dtype;if("complex64"===o){if("complex64"===i.dtype)return tw({inputs:{x:i},backend:r});var s=ph(i.shape),l=gw({inputs:{x:i},backend:r,attrs:{dtype:"float32"}}),u=fw({inputs:{real:l,imag:s},backend:r});return s.dispose(),r.disposeIntermediateTensorInfo(l),u}if("complex64"===i.dtype){var h=vw({inputs:{input:i},backend:r}),c=gw({inputs:{x:h},backend:r,attrs:{dtype:o}});return r.disposeIntermediateTensorInfo(h),c}if(!a.hasEncodingLoss(i.dtype,o)){var f=tw({inputs:{x:i},backend:r});return{dataId:f.dataId,shape:f.shape,dtype:o}}if("int32"===o){var d=r.data.get(i.dataId).values,v=Int32Array.from(d);return r.makeTensorInfo(i.shape,"int32",v)}if("bool"===o){var p=r.data.get(i.dataId).values,g=a.toTypedArray([0],i.dtype),_=_slicedToArray(aw((function(e,t){return e!==t?1:0}))(i.shape,[],p,g,"bool"),2),m=_[0],y=_[1];return r.makeTensorInfo(y,"bool",m)}throw new Error("Error in Cast: failed to cast ".concat(i.dtype," to ").concat(o))}var _w={kernelName:Lt,backendName:"cpu",kernelFunc:gw};function mw(e,t,r,a){return null==r?function(r){var n=r.inputs,i=r.backend,o=n.a,s=n.b,l=i;Hk([o,s],e);var u=l.data.get(o.dataId).values,h=l.data.get(s.dataId).values,c=a||o.dtype,f=_slicedToArray(t(o.shape,s.shape,u,h,c),2),d=f[0],v=f[1];return l.makeTensorInfo(v,c,d)}:function(e){var n=e.inputs,i=e.backend,o=n.a,s=n.b,l=i;if("complex64"===o.dtype||"complex64"===s.dtype){var u=gw({inputs:{x:o},backend:l,attrs:{dtype:"complex64"}}),h=l.data.get(u.dataId),c=h.complexTensorInfos.imag,f=l.data.get(h.complexTensorInfos.real.dataId).values,d=l.data.get(c.dataId).values,v=gw({inputs:{x:s},backend:l,attrs:{dtype:"complex64"}}),p=l.data.get(v.dataId),g=p.complexTensorInfos.imag,_=l.data.get(p.complexTensorInfos.real.dataId).values,m=l.data.get(g.dataId).values,y=_slicedToArray(r(o.shape,s.shape,f,d,_,m),3),b=y[0],x=y[1],k=y[2],w=l.makeTensorInfo(k,"float32",b),C=l.makeTensorInfo(k,"float32",x),T=fw({inputs:{real:w,imag:C},backend:l});return l.disposeIntermediateTensorInfo(u),l.disposeIntermediateTensorInfo(v),l.disposeIntermediateTensorInfo(w),l.disposeIntermediateTensorInfo(C),T}var S=l.data.get(o.dataId).values,I=l.data.get(s.dataId).values,A=a||o.dtype,R=_slicedToArray(t(o.shape,s.shape,S,I,A),2),N=R[0],E=R[1];return l.makeTensorInfo(E,A,N)}}function yw(e){return function(t,r,n,i,o,s){var l=g.assertAndGetBroadcastShape(t,r),u=a.sizeFromShape(l),h=l.length,c=a.computeStrides(l),f=a.getTypedArrayFromDType("float32",u),d=a.getTypedArrayFromDType("float32",u),v=g.getBroadcastDims(t,l),p=g.getBroadcastDims(r,l),_=g.mergeRealAndImagArrays(n,i),m=g.mergeRealAndImagArrays(o,s),y=t.length,b=a.computeStrides(t),x=r.length,k=a.computeStrides(r);if(v.length+p.length===0)for(var w=0;w<f.length;w++){var C=w%_.length,T=w%m.length,S=e(_[2*C],_[2*C+1],m[2*T],m[2*T+1]);f[w]=S.real,d[w]=S.imag}else for(var I=function(t){var r=a.indexToLoc(t,h,c),n=r.slice(-y);v.forEach((function(e){return n[e]=0}));var i=a.locToIndex(n,y,b),o=r.slice(-x);p.forEach((function(e){return o[e]=0}));var s=a.locToIndex(o,x,k),l=e(_[2*i],_[2*i+1],m[2*s],m[2*s+1]);f[t]=l.real,d[t]=l.imag},A=0;A<f.length;A++)I(A);return[f,d,l]}}var bw=aw((function(e,t){return e+t})),xw=yw((function(e,t,r,a){return{real:e+r,imag:t+a}})),kw=mw(mt,bw,xw),ww={kernelName:mt,backendName:"cpu",kernelFunc:kw};function Cw(e){var t=e.inputs,r=e.backend,n=e.attrs,i=t.x,o=n.shape,s=a.sizeFromShape(i.shape),l=a.inferFromImplicitShape(o,s),u=a.sizeFromShape(l);a.assert(s===u,(function(){return"The new shape (".concat(l,") has ").concat(u," elements and the old shape (").concat(i.shape,") has ").concat(s," elements. The new shape and old shape must have the same number of elements.")})),r.incRef(i.dataId);var h=r.data.get(i.dataId);if(null!=h.complexTensorInfos){var c=h.complexTensorInfos.imag;h.complexTensorInfos.real.shape=l,c.shape=l}return{dataId:i.dataId,shape:l,dtype:i.dtype}}var Tw={kernelName:va,backendName:"cpu",kernelFunc:Cw};function Sw(e){var t=e.inputs,r=e.backend,n=e.attrs,i=t.a,o=t.b,s=n.transposeA,l=n.transposeB;Hk([i,o],"matMul");var u=i.shape.length,h=o.shape.length,c=s?i.shape[u-2]:i.shape[u-1],f=l?o.shape[h-1]:o.shape[h-2],d=s?i.shape[u-1]:i.shape[u-2],v=l?o.shape[h-2]:o.shape[h-1],p=i.shape.slice(0,-2),g=o.shape.slice(0,-2),_=a.sizeFromShape(p),m=a.sizeFromShape(g);a.assert(u>=2&&h>=2&&(_===m||1===_||1===m),(function(){return"Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (".concat(p,") and (").concat(g,").")}));var y=(_>m?i.shape.slice(0,-2):o.shape.slice(0,-2)).concat([d,v]);a.assert(c===f,(function(){return"Error in matMul: inner shapes (".concat(c,") and (").concat(f,") of Tensors with shapes ").concat(i.shape," and ").concat(o.shape," and transposeA=").concat(s," and transposeB=").concat(l," must match.")}));for(var b=l?[m,v,f]:[m,f,v],x=Cw({inputs:{x:i},backend:r,attrs:{shape:s?[_,c,d]:[_,d,c]}}),k=Cw({inputs:{x:o},backend:r,attrs:{shape:b}}),w=s?x.shape[1]:x.shape[2],C=s?x.shape[2]:x.shape[1],T=l?k.shape[1]:k.shape[2],S=Math.max(_,m),I=r.data.get(x.dataId).values,A=r.data.get(k.dataId).values,R=a.computeStrides(x.shape),N=a.computeStrides(k.shape),E=_slicedToArray(s?[R[0],1,R[1]]:[R[0],R[1],1],3),F=E[0],M=E[1],D=E[2],O=_slicedToArray(l?[1,N[1],N[0]]:[N[1],1,N[0]],3),L=O[0],z=O[1],B=O[2],P=C*T,V=Zi([S,C,T],x.dtype),U=V.values,W=r.blockSize,G=0;G<S;G++)for(var H=0;H<C;H+=W)for(var j=0;j<T;j+=W)for(var q=0;q<w;q+=W)for(var X=Math.min(H+W,C),K=Math.min(j+W,T),Q=Math.min(q+W,w),Y=H;Y<X;Y++)for(var J=j;J<K;J++){for(var Z=0,$=q;$<Q;$++){var ee=Math.min(G,_-1)*F,te=Math.min(G,m-1)*B;Z+=I[ee+Y*M+$*D]*A[$*L+J*z+te]}U[G*P+(Y*T+J)]+=Z}return r.disposeIntermediateTensorInfo(x),r.disposeIntermediateTensorInfo(k),r.makeTensorInfo(y,V.dtype,V.values)}var Iw={kernelName:Mt,backendName:"cpu",kernelFunc:Sw},Aw={kernelName:en,backendName:"cpu",kernelFunc:function(e){var t,r,a,n=e.inputs,i=e.backend,o=e.attrs,s=n.a,l=n.b,u=n.bias,h=n.preluActivationWeights,c=o.transposeA,f=o.transposeB,d=o.activation,v=[];t=Sw({inputs:{a:s,b:l},attrs:{transposeA:c,transposeB:f},backend:i}),u&&(r=kw({inputs:{a:t,b:u},backend:i}),v.push(t),t=r),d&&(a=cw(i,t,d,h),v.push(t),t=a);for(var p=0,g=v;p<g.length;p++){var _=g[p];i.disposeIntermediateTensorInfo(_)}return t}};function Rw(e){for(var t=new Float32Array(e.length),r=0;r<e.length;++r)t[r]=Math.abs(e[r]);return t}var Nw={kernelName:pt,backendName:"cpu",kernelFunc:function(e){var t=e.inputs.x,r=e.backend,n=new Float32Array(a.sizeFromShape(t.shape));if("complex64"!==t.dtype)n=Rw(r.data.get(t.dataId).values);else for(var i=r.data.get(t.dataId),o=i.complexTensorInfos.imag,s=r.data.get(i.complexTensorInfos.real.dataId).values,l=r.data.get(o.dataId).values,u=0;u<s.length;u++)n[u]=Math.hypot(s[u],l[u]);return r.makeOutput(n,t.shape,"float32")}},Ew=Jk(gt,(function(e){return Math.acos(e)})),Fw={kernelName:gt,backendName:"cpu",kernelFunc:Ew},Mw=Jk(_t,(function(e){return Math.acosh(e)})),Dw={kernelName:_t,backendName:"cpu",kernelFunc:Mw},Ow=Jk(Ct,(function(e){return Math.asin(e)})),Lw={kernelName:Ct,backendName:"cpu",kernelFunc:Ow},zw=Jk(Tt,(function(e){return Math.asinh(e)})),Bw={kernelName:Tt,backendName:"cpu",kernelFunc:zw},Pw=Jk(St,(function(e){return Math.atan(e)})),Vw={kernelName:St,backendName:"cpu",kernelFunc:Pw},Uw=Jk(It,(function(e){return Math.atanh(e)})),Ww={kernelName:It,backendName:"cpu",kernelFunc:Uw};function Gw(e,t,r,a,n,i){for(var o=n.strideHeight,s=n.strideWidth,l=n.dilationHeight,u=n.dilationWidth,h=n.effectiveFilterHeight,c=n.effectiveFilterWidth,f=n.padInfo.top,d=n.padInfo.left,v="max"===i?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,p=Zi(n.outShape,r),g=p.values,_=n.outShape[1]*n.outShape[2]*n.outShape[3],m=n.outShape[2]*n.outShape[3],y=n.outShape[3],b=0;b<n.batchSize;++b)for(var x=b*_,k=b*a[0],w=0;w<n.inChannels;++w)for(var C=0;C<n.outHeight;++C)for(var T=C*o-f,S=Math.max(0,T),I=Math.min(n.inHeight,h+T),A=x+C*m,R=0;R<n.outWidth;++R){for(var N=R*s-d,E=Math.max(0,N),F=Math.min(n.inWidth,c+N),M=v,D=0,O=0,L=S;L<I;L+=l){for(var z=k+L*a[1],B=E;B<F;B+=u){var P=e[z+B*a[2]+w];"max"===i&&P>M?M=P:"avg"===i&&(D+=P,O++)}if(isNaN(M))break}g[A+R*y+w]="avg"===i?D/O:M}return p}function Hw(e,t,r,a){for(var n=arguments.length>4&&void 0!==arguments[4]&&arguments[4],i=arguments.length>5&&void 0!==arguments[5]&&arguments[5],o=Zi(a.outShape,"int32"),s=a.strideHeight,l=a.strideWidth,u=a.dilationHeight,h=a.dilationWidth,c=a.effectiveFilterHeight,f=a.effectiveFilterWidth,d=a.padInfo.top,v=a.padInfo.left,p=Zi(t,r,e),g=0;g<a.batchSize;++g)for(var _=0;_<a.inChannels;++_)for(var m=0;m<a.outHeight;++m){for(var y=m*s-d,b=y;b<0;)b+=u;for(var x=Math.min(a.inHeight,c+y),k=0;k<a.outWidth;++k){for(var w=k*l-v,C=w;C<0;)C+=h;for(var T=Math.min(a.inWidth,f+w),S=Number.NEGATIVE_INFINITY,I=-1,A=b;A<x;A+=u)for(var R=A-y,N=C;N<T;N+=h){var E=N-w,F=p.get(g,A,N,_);F>S&&(S=F,I=n?i?((g*a.inHeight+A)*a.inWidth+N)*a.inChannels+_:(A*a.inWidth+N)*a.inChannels+_:R*f+E)}o.set(I,g,m,k,_)}}return o}var jw={kernelName:Rt,backendName:"cpu",kernelFunc:function(e){var t=e.inputs,r=e.backend,n=e.attrs,i=t.x;Hk(i,"avgPool");var o=n.filterSize,s=n.strides,l=n.pad,u=n.dimRoundingMode;a.assert(g.eitherStridesOrDilationsAreOne(s,1),(function(){return"Error in avgPool: Either strides or dilations must be 1. Got strides ".concat(s," and dilations '1'")}));var h,c=g.computePool2DInfo(i.shape,o,s,1,l,u);if(1===c.filterWidth&&1===c.filterHeight&&a.arraysEqual(c.inShape,c.outShape))h=tw({inputs:{x:i},backend:r});else{var f=r.data.get(i.dataId).values,d=a.computeStrides(i.shape),v=Gw(f,0,i.dtype,d,c,"avg");h=r.makeTensorInfo(c.outShape,i.dtype,v.values)}return h}},qw={kernelName:Nt,backendName:"cpu",kernelFunc:function(e){var t=e.inputs,r=e.backend,a=e.attrs,n=t.dy,i=t.input,o=i;Hk([n,i],"avgPoolBackprop");for(var s=a.filterSize,l=a.strides,u=a.pad,h=g.computePool2DInfo(o.shape,s,l,1,u),c=h.strideHeight,f=h.strideWidth,d=h.filterHeight,v=h.filterWidth,p=h.dilationHeight,_=h.dilationWidth,m=h.effectiveFilterHeight,y=h.effectiveFilterWidth,b=y-1-h.padInfo.left,x=m-1-h.padInfo.top,k=Zi(o.shape,"float32"),w=1/(d*v),C=r.data.get(n.dataId).values,T=Zi(n.shape,"float32",C),S=0;S<h.batchSize;++S)for(var I=0;I<h.inChannels;++I)for(var A=0;A<h.inHeight;++A)for(var R=0;R<h.inWidth;++R){for(var N=A-x,E=R-b,F=0,M=0;M<m;M+=p){var D=(N+M)/c;if(!(D<0||D>=h.outHeight||Math.floor(D)!==D))for(var O=0;O<y;O+=_){var L=(E+O)/f;L<0||L>=h.outWidth||Math.floor(L)!==L||(F+=T.get(S,D,L,I))}}k.set(F*w,S,A,R,I)}return r.makeTensorInfo(k.shape,k.dtype,k.values)}},Xw={kernelName:_r,backendName:"cpu",kernelFunc:function(e){var t=e.inputs,r=e.backend,n=e.attrs,i=t.x,o=t.scale,s=t.offset,l=t.mean,u=t.variance;a.assert(l.shape.length===u.shape.length,(function(){return"Batch normalization gradient requires mean and variance to have equal ranks."})),a.assert(null==s||l.shape.length===s.shape.length,(function(){return"Batch normalization gradient requires mean and offset to have equal ranks."})),a.assert(null==o||l.shape.length===o.shape.length,(function(){return"Batch normalization gradient requires mean and scale to have equal ranks."})),Hk([i,l,u,o,s],"batchNorm");var h=n.varianceEpsilon;null==h&&(h=.001);for(var c=r.data.get(i.dataId).values,f=r.data.get(l.dataId).values,d=r.data.get(u.dataId).values,v=o?r.data.get(o.dataId).values:new Float32Array([1]),p=s?r.data.get(s.dataId).values:new Float32Array([0]),g=new Float32Array(c.length),_=p.length,m=v.length,y=d.length,b=f.length,x=0,k=0,w=0,C=0,T=0;T<c.length;++T)g[T]=p[x++]+(c[T]-f[k++])*v[w++]/Math.sqrt(d[C++]+h),x>=_&&(x=0),k>=b&&(k=0),w>=m&&(w=0),C>=y&&(C=0);return r.makeTensorInfo(i.shape,i.dtype,g)}};function Kw(e){return function(t,r,n){for(var i=a.getTypedArrayFromDType(r,t.length),o=0;o<t.length;++o)i[o]=e(t[o],n);return i}}var Qw=Kw((function(e){return Math.ceil(e)})),Yw=Zk(zt,Qw),Jw={kernelName:zt,backendName:"cpu",kernelFunc:Yw},Zw=Jk(Bt,(function(e,t){return e>t.clipValueMax?t.clipValueMax:e<t.clipValueMin?t.clipValueMin:e})),$w={kernelName:Bt,backendName:"cpu",kernelFunc:Zw};function eC(e){var t=e.inputs,r=e.backend,a=t.input,n=r.data.get(a.dataId).complexTensorInfos.imag,i=r.data.get(n.dataId).values;return r.makeTensorInfo(n.shape,n.dtype,i)}var tC={kernelName:Cr,backendName:"cpu",kernelFunc:eC};function rC(e){var t=e.inputs,r=e.backend,n=e.attrs.axis,i=a.parseAxisParam(n,t[0].shape)[0],o=g.computeOutShape(t.map((function(e){return e.shape})),i);if(0===a.sizeFromShape(o))return r.makeTensorInfo(o,t[0].dtype,[]);var s=t.filter((function(e){return a.sizeFromShape(e.shape)>0}));if(1===s.length)return s[0];var l=s.map((function(e){return e.shape}));if(g.assertParamsConsistent(l,i),"complex64"===s[0].dtype){var u=s.map((function(e){return vw({inputs:{input:e},backend:r})})),h=s.map((function(e){return eC({inputs:{input:e},backend:r})})),c=rC({inputs:u,backend:r,attrs:{axis:i}}),f=rC({inputs:h,backend:r,attrs:{axis:i}}),d=fw({inputs:{real:c,imag:f},backend:r});return u.forEach((function(e){return r.disposeIntermediateTensorInfo(e)})),h.forEach((function(e){return r.disposeIntermediateTensorInfo(e)})),r.disposeIntermediateTensorInfo(c),r.disposeIntermediateTensorInfo(f),d}var v=s.map((function(e){var t=a.sizeFromShape(e.shape.slice(i));return Cw({inputs:{x:e},backend:r,attrs:{shape:[-1,t]}})}));o=g.computeOutShape(v.map((function(e){return e.shape})),1);var p=a.getTypedArrayFromDType(s[0].dtype,a.sizeFromShape(o));if(1===v[0].shape[0]){var _=0;v.forEach((function(e){var t=r.data.get(e.dataId).values,n=a.sizeFromShape(e.shape);p.set(t,_),_+=n}))}else{var m=0;v.forEach((function(e){for(var t=r.data.get(e.dataId).values,a=0,n=0;n<e.shape[0];++n)for(var i=n*o[1]+m,s=0;s<e.shape[1];++s)p[i+s]=t[a++];m+=e.shape[1]}))}var y=g.computeOutShape(s.map((function(e){return e.shape})),i),b=r.makeTensorInfo(y,t[0].dtype,p);return v.forEach((function(e){return r.disposeIntermediateTensorInfo(e)})),b}var aC={kernelName:Vt,backendName:"cpu",kernelFunc:rC};function nC(e){var t=e.inputs,r=e.backend,n=e.attrs,i=t.x,o=t.filter,s=n.strides,l=n.pad,u=n.dataFormat,h=n.dilations,c=n.dimRoundingMode;Hk([i,o],"conv2d");for(var f=g.convertConv2DDataFormat(u),d=g.computeConv2DInfo(i.shape,o.shape,s,h,l,c,!1,f),v=d.filterHeight,p=d.filterWidth,_=d.dilationHeight,m=d.dilationWidth,y=d.padInfo.left,b=d.padInfo.top,x="channelsLast"===d.dataFormat,k=new Sn(d.outShape,i.dtype),w=a.computeStrides(i.shape),C=a.computeStrides(o.shape),T=w[0],S=x?w[1]:w[2],I=x?w[2]:1,A=x?1:w[1],R=k.strides[0],N=x?k.strides[1]:k.strides[2],E=x?k.strides[2]:1,F=x?1:k.strides[1],M=r.data.get(i.dataId).values,D=r.data.get(o.dataId).values,O=k.values,L=0;L<d.batchSize;++L)for(var z=L*T,B=L*R,P=0;P<d.outHeight;++P)for(var V=B+P*N,U=P*d.strideHeight-b,W=0;W<v;++W){var G=U+W*_;if(!(G<0||G>=d.inHeight))for(var H=W*C[0],j=z+G*S,q=0;q<d.outWidth;++q)for(var X=V+q*E,K=q*d.strideWidth-y,Q=0;Q<p;++Q){var Y=K+Q*m;if(!(Y<0||Y>=d.inWidth))for(var J=j+Y*I,Z=H+Q*C[1],$=0;$<d.inChannels;++$){for(var ee=M[J+$*A],te=0;te<d.outChannels;++te)O[X+te*F]+=ee*D[Z+te];Z+=d.outChannels}}}return r.makeTensorInfo(k.shape,k.dtype,O)}var iC={kernelName:Ut,backendName:"cpu",kernelFunc:nC},oC={kernelName:Wt,backendName:"cpu",kernelFunc:function(e){var t=e.inputs,r=e.backend,a=e.attrs,n=t.x,i=t.dy,o=a.strides,s=a.pad,l=a.dataFormat,u=a.dimRoundingMode,h=a.filterShape;Hk([n,i],"conv2dBackpropFilter");for(var c=g.convertConv2DDataFormat(l),f=g.computeConv2DInfo(n.shape,h,o,1,s,u,!1,c),d=f.strideHeight,v=f.strideWidth,p=f.filterHeight,_=f.filterWidth,m="channelsLast"===f.dataFormat,y=new Sn(f.filterShape,"float32"),b=f.padInfo.left,x=f.padInfo.top,k=r.data.get(n.dataId).values,w=r.data.get(i.dataId).values,C=new Sn(n.shape,n.dtype,k),T=new Sn(i.shape,i.dtype,w),S=0;S<p;++S)for(var I=Math.max(0,Math.ceil((x-S)/d)),A=Math.min(f.outHeight,(f.inHeight+x-S)/d),R=0;R<_;++R)for(var N=Math.max(0,Math.ceil((b-R)/v)),E=Math.min(f.outWidth,(f.inWidth+b-R)/v),F=0;F<f.inChannels;++F)for(var M=0;M<f.outChannels;++M){for(var D=0,O=0;O<f.batchSize;++O)for(var L=I;L<A;++L)for(var z=S+L*d-x,B=N;B<E;++B){var P=R+B*v-b;D+=m?C.get(O,z,P,F)*T.get(O,L,B,M):C.get(O,F,z,P)*T.get(O,M,L,B)}y.set(D,S,R,F,M)}return r.makeTensorInfo(y.shape,y.dtype,y.values)}},sC={kernelName:Gt,backendName:"cpu",kernelFunc:function(e){var t=e.inputs,r=e.backend,n=e.attrs,i=t.dy,o=t.filter,s=n.inputShape,l=n.strides,u=n.pad,h=n.dataFormat,c=n.dimRoundingMode;Hk([i,o],"conv2dBackpropInput");var f=a.computeStrides(o.shape),d=a.computeStrides(i.shape),v=g.convertConv2DDataFormat(h),p=g.computeConv2DInfo(s,o.shape,l,1,u,c,!1,v),_=new Sn(p.inShape,"float32"),m=_.values,y=r.data.get(i.dataId).values,b=r.data.get(o.dataId).values,x=_slicedToArray(f,3),k=x[0],w=x[1],C=x[2],T=p.batchSize,S=p.filterHeight,I=p.filterWidth,A=p.inChannels,R=p.inHeight,N=p.inWidth,E=p.outChannels,F=p.outHeight,M=p.outWidth,D=p.strideHeight,O=p.strideWidth;v=p.dataFormat;for(var L=S-1-p.padInfo.top,z=I-1-p.padInfo.left,B="channelsLast"===v,P=_.strides[0],V=B?_.strides[1]:_.strides[2],U=B?_.strides[2]:1,W=B?1:_.strides[1],G=d[0],H=B?d[1]:d[2],j=B?d[2]:1,q=B?1:d[1],X=0;X<T;++X)for(var K=0;K<A;++K)for(var Q=0;Q<R;++Q)for(var Y=Q-L,J=Math.max(0,Math.ceil(Y/D)),Z=Math.min(F,(S+Y)/D),$=0;$<N;++$){for(var ee=$-z,te=Math.max(0,Math.ceil(ee/O)),re=Math.min(M,(I+ee)/O),ae=0,ne=J;ne<Z;++ne)for(var ie=ne*D-Y,oe=te;oe<re;++oe)for(var se=G*X+H*ne+j*oe,le=k*(S-1-ie)+w*(I-1-(oe*O-ee))+C*K,ue=0;ue<E;++ue)ae+=y[se+q*ue]*b[le+ue];m[P*X+V*Q+U*$+W*K]=ae}return r.makeTensorInfo(_.shape,_.dtype,_.values)}},lC={kernelName:Ht,backendName:"cpu",kernelFunc:function(e){var t=e.inputs,r=e.backend,n=e.attrs,i=t.x,o=t.filter,s=n.strides,l=n.pad,u=n.dilations;Hk([i,o],"conv3d");for(var h=g.computeConv3DInfo(i.shape,o.shape,s,u,l),c=h.filterDepth,f=h.filterHeight,d=h.filterWidth,v=h.dilationDepth,p=h.dilationHeight,_=h.dilationWidth,m=h.padInfo,y=m.front,b=m.left,x=m.top,k=new Sn(h.outShape,i.dtype),w=r.data.get(i.dataId).values,C=r.data.get(o.dataId).values,T=k.values,S=a.computeStrides(i.shape),I=a.computeStrides(o.shape),A=0;A<h.batchSize;++A)for(var R=A*S[0],N=A*k.strides[0],E=0;E<h.outDepth;++E)for(var F=N+E*k.strides[1],M=E*h.strideDepth-y,D=0;D<c;++D){var O=M+D*v;if(!(O<0||O>=h.inDepth))for(var L=D*I[0],z=R+O*S[1],B=0;B<h.outHeight;++B)for(var P=F+B*k.strides[2],V=B*h.strideHeight-x,U=0;U<f;++U){var W=V+U*p;if(!(W<0||W>=h.inHeight))for(var G=L+U*I[1],H=z+W*S[2],j=0;j<h.outWidth;++j)for(var q=P+j*h.outChannels,X=j*h.strideWidth-b,K=0;K<d;++K){var Q=X+K*_;if(!(Q<0||Q>=h.inWidth))for(var Y=H+Q*h.inChannels,J=G+K*I[2],Z=0;Z<h.inChannels;++Z){for(var $=w[Y+Z],ee=0;ee<h.outChannels;++ee)T[q+ee]+=$*C[J+ee];J+=h.outChannels}}}}return r.makeTensorInfo(k.shape,k.dtype,k.values)}},uC={kernelName:jt,backendName:"cpu",kernelFunc:function(e){var t=e.inputs,r=e.backend,n=e.attrs,i=t.x,o=t.dy,s=n.strides,l=n.pad,u=n.filterShape;Hk([i,o],"conv3dBackpropFilterV2");for(var h=a.computeStrides(i.shape),c=a.computeStrides(o.shape),f=g.computeConv3DInfo(i.shape,u,s,1,l),d=f.strideDepth,v=f.strideHeight,p=f.strideWidth,_=f.filterDepth,m=f.filterHeight,y=f.filterWidth,b=new Sn(f.filterShape,"float32"),x=b.values,k=_slicedToArray(b.strides,4),w=k[0],C=k[1],T=k[2],S=k[3],I=r.data.get(o.dataId).values,A=_slicedToArray(c,4),R=A[0],N=A[1],E=A[2],F=A[3],M=r.data.get(i.dataId).values,D=_slicedToArray(h,4),O=D[0],L=D[1],z=D[2],B=D[3],P=f.padInfo.front,V=f.padInfo.left,U=f.padInfo.top,W=0;W<_;++W)for(var G=Math.max(0,Math.ceil((P-W)/d)),H=Math.min(f.outDepth,(f.inDepth+P-W)/d),j=W*w,q=0;q<m;++q)for(var X=Math.max(0,Math.ceil((U-q)/v)),K=Math.min(f.outHeight,(f.inHeight+U-q)/v),Q=q*C+j,Y=0;Y<y;++Y)for(var J=Math.max(0,Math.ceil((V-Y)/p)),Z=Math.min(f.outWidth,(f.inWidth+V-Y)/p),$=Y*T+Q,ee=0;ee<f.inChannels;++ee)for(var te=ee*S+$,re=0;re<f.outChannels;++re){for(var ae=0,ne=0;ne<f.batchSize;++ne)for(var ie=ne*O,oe=ne*R,se=G;se<H;++se)for(var le=(W+se*d-P)*L+ie,ue=se*N+oe,he=X;he<K;++he)for(var ce=(q+he*v-U)*z+le,fe=he*E+ue,de=J;de<Z;++de)ae+=M[(Y+de*p-V)*B+ce+ee]*I[de*F+fe+re];x[te+re]=ae}return r.makeTensorInfo(b.shape,b.dtype,b.values)}},hC={kernelName:qt,backendName:"cpu",kernelFunc:function(e){var t=e.inputs,r=e.backend,n=e.attrs,i=t.dy,o=t.filter,s=n.pad,l=n.strides,u=n.inputShape;Hk([i],"conv3dBackpropInputV2");for(var h=a.computeStrides(i.shape),c=a.computeStrides(o.shape),f=g.computeConv3DInfo(u,o.shape,l,1,s),d=new Sn(f.inShape,"float32"),v=d.values,p=_slicedToArray(d.strides,4),_=p[0],m=p[1],y=p[2],b=p[3],x=r.data.get(i.dataId).values,k=_slicedToArray(h,4),w=k[0],C=k[1],T=k[2],S=k[3],I=r.data.get(o.dataId).values,A=_slicedToArray(c,4),R=A[0],N=A[1],E=A[2],F=A[3],M=f.batchSize,D=f.filterDepth,O=f.filterHeight,L=f.filterWidth,z=f.inChannels,B=f.inDepth,P=f.inHeight,V=f.inWidth,U=f.outChannels,W=f.outDepth,G=f.outHeight,H=f.outWidth,j=f.strideDepth,q=f.strideHeight,X=f.strideWidth,K=D-1-f.padInfo.front,Q=O-1-f.padInfo.top,Y=L-1-f.padInfo.left,J=0;J<M;++J)for(var Z=0;Z<z;++Z)for(var $=0;$<B;++$)for(var ee=$-K,te=Math.max(0,Math.ceil(ee/j)),re=Math.min(W,(D+ee)/j),ae=0;ae<P;++ae)for(var ne=ae-Q,ie=Math.max(0,Math.ceil(ne/q)),oe=Math.min(G,(O+ne)/q),se=0;se<V;++se){for(var le=se-Y,ue=Math.max(0,Math.ceil(le/X)),he=Math.min(H,(L+le)/X),ce=0,fe=te;fe<re;++fe)for(var de=fe*j-ee,ve=ie;ve<oe;++ve)for(var pe=ve*q-ne,ge=ue;ge<he;++ge)for(var _e=w*J+C*fe+T*ve+S*ge,me=R*(D-1-de)+N*(O-1-pe)+E*(L-1-(ge*X-le))+F*Z,ye=0;ye<U;++ye)ce+=x[_e+ye]*I[me+ye];v[_*J+m*$+y*ae+b*se+Z]=ce}return r.makeTensorInfo(d.shape,d.dtype,d.values)}},cC=Jk(Xt,(function(e){return Math.cos(e)})),fC={kernelName:Xt,backendName:"cpu",kernelFunc:cC},dC=Jk(Kt,(function(e){return Math.cosh(e)})),vC={kernelName:Kt,backendName:"cpu",kernelFunc:dC};function pC(e){var t=e.inputs,r=e.backend,n=e.attrs,i=t.x,o=t.filter,s=n.strides,l=n.pad,u=n.dilations,h=n.dimRoundingMode;Hk([i,o],"depthwiseConv2DNative");var c=a.computeStrides(i.shape),f=a.computeStrides(o.shape),d=u;null==d&&(d=[1,1]),a.assert(g.eitherStridesOrDilationsAreOne(s,d),(function(){return"Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ".concat(s," and dilations '").concat(d,"'")}));for(var v=g.computeConv2DInfo(i.shape,o.shape,s,d,l,h,!0),p=v.filterHeight,_=v.filterWidth,m=v.dilationHeight,y=v.dilationWidth,b=v.padInfo,x=b.left,k=b.top,w=v.outChannels/v.inChannels,C=new Sn(v.outShape,i.dtype),T=r.data.get(i.dataId).values,S=r.data.get(o.dataId).values,I=C.values,A=0;A<v.batchSize;++A)for(var R=A*c[0],N=A*C.strides[0],E=0;E<v.outHeight;++E)for(var F=N+E*C.strides[1],M=E*v.strideHeight-x,D=0;D<p;++D){var O=M+D*m;if(!(O<0||O>=v.inHeight))for(var L=D*f[0],z=R+O*c[1],B=0;B<v.outWidth;++B)for(var P=F+B*C.strides[2],V=B*v.strideWidth-k,U=0;U<_;++U){var W=V+U*y;if(!(W<0||W>=v.inWidth))for(var G=z+W*v.inChannels,H=P,j=L+U*f[1],q=0;q<v.inChannels;++q){for(var X=T[G+q],K=0;K<w;++K)I[H+K]+=X*S[j+K];H+=w,j+=w}}}return r.makeTensorInfo(C.shape,C.dtype,C.values)}var gC={kernelName:Zt,backendName:"cpu",kernelFunc:pC},_C={kernelName:$t,backendName:"cpu",kernelFunc:function(e){var t=e.inputs,r=e.backend,a=e.attrs,n=t.x,i=t.dy,o=a.strides,s=a.dilations,l=a.pad,u=a.dimRoundingMode,h=a.filterShape;Hk([n,i],"depthwiseConv2dNativeBackpropFilter");for(var c=g.computeConv2DInfo(n.shape,h,o,s,l,u,!0),f=c.strideHeight,d=c.strideWidth,v=c.filterHeight,p=c.filterWidth,_=new Sn(c.filterShape,"float32"),m=c.padInfo.left,y=c.padInfo.top,b=c.outChannels/c.inChannels,x=r.data.get(n.dataId).values,k=new Sn(n.shape,n.dtype,x),w=r.data.get(i.dataId).values,C=new Sn(i.shape,i.dtype,w),T=0;T<v;++T)for(var S=Math.max(0,Math.ceil((y-T)/f)),I=Math.min(c.outHeight,(c.inHeight+y-T)/f),A=0;A<p;++A)for(var R=Math.max(0,Math.ceil((m-A)/d)),N=Math.min(c.outWidth,(c.inWidth+m-A)/d),E=0;E<c.outChannels;++E){for(var F=Math.trunc(E/b),M=E%b,D=0,O=0;O<c.batchSize;++O)for(var L=S;L<I;++L)for(var z=T+L*f-y,B=R;B<N;++B)D+=k.get(O,z,A+B*d-m,F)*C.get(O,L,B,E);_.set(D,T,A,F,M)}return r.makeTensorInfo(_.shape,_.dtype,_.values)}},mC={kernelName:er,backendName:"cpu",kernelFunc:function(e){var t=e.inputs,r=e.backend,n=e.attrs,i=t.dy,o=t.filter,s=n.strides,l=n.dilations,u=n.pad,h=n.dimRoundingMode,c=n.inputShape;Hk([i,o],"depthwiseConv2DNativeBackpropInput");for(var f=a.computeStrides(i.shape),d=a.computeStrides(o.shape),v=g.computeConv2DInfo(c,o.shape,s,l,u,h,!0),p=new Sn(v.inShape,"float32"),_=p.values,m=_slicedToArray(p.strides,3),y=m[0],b=m[1],x=m[2],k=r.data.get(i.dataId).values,w=_slicedToArray(f,3),C=w[0],T=w[1],S=w[2],I=r.data.get(o.dataId).values,A=_slicedToArray(d,3),R=A[0],N=A[1],E=A[2],F=v.batchSize,M=v.filterHeight,D=v.filterWidth,O=v.inChannels,L=v.inHeight,z=v.inWidth,B=v.outChannels,P=v.outHeight,V=v.outWidth,U=v.strideHeight,W=v.strideWidth,G=M-1-v.padInfo.top,H=D-1-v.padInfo.left,j=B/O,q=0;q<F;++q)for(var X=0;X<O;++X)for(var K=0;K<L;++K)for(var Q=K-G,Y=Math.max(0,Math.ceil(Q/U)),J=Math.min(P,(M+Q)/U),Z=0;Z<z;++Z){for(var $=Z-H,ee=Math.max(0,Math.ceil($/W)),te=Math.min(V,(D+$)/W),re=0,ae=Y;ae<J;++ae)for(var ne=ae*U-Q,ie=ee;ie<te;++ie)for(var oe=C*q+T*ae+S*ie,se=R*(M-1-ne)+N*(D-1-(ie*W-$))+E*X,le=0;le<j;++le)re+=k[oe+(X*j+le)]*I[se+le];_[y*q+b*K+x*Z+X]=re}return r.makeTensorInfo(p.shape,p.dtype,p.values)}},yC={kernelName:rr,backendName:"cpu",kernelFunc:function(e){for(var t=e.inputs,r=e.backend,n=e.attrs,i=t.x,o=t.filter,s=n.strides,l=n.pad,u=n.dilations,h=r,c=h.data.get(i.dataId).values,f=i.shape.length,d=h.data.get(o.dataId).values,v=o.shape.length,p=g.computeDilation2DInfo(i.shape,o.shape,s,l,"NHWC",u),_=p.batchSize,m=p.inHeight,y=p.inWidth,b=p.inChannels,x=p.outHeight,k=p.outWidth,w=p.padInfo,C=p.strideHeight,T=p.strideWidth,S=p.filterHeight,I=p.filterWidth,A=p.dilationHeight,R=p.dilationWidth,N=p.outShape,E=a.sizeFromShape(N),F=N.length,M=a.getArrayFromDType(i.dtype,E),D=0;D<_;++D)for(var O=0;O<x;++O)for(var L=O*C-w.top,z=0;z<k;++z)for(var B=z*T-w.left,P=0;P<b;++P){for(var V=Number.MIN_SAFE_INTEGER,U=0;U<S;++U){var W=L+U*A;if(W>=0&&W<m)for(var G=0;G<I;++G){var H=B+G*R;if(H>=0&&H<y){var j=a.locToIndex([D,W,H,P],f,a.computeStrides(i.shape)),q=a.locToIndex([U,G,P],v,a.computeStrides(o.shape)),X=c[j]+d[q];X>V&&(V=X)}}}M[a.locToIndex([D,O,z,P],F,a.computeStrides(N))]=V}return{dataId:h.write(a.toTypedArray(M,i.dtype),N,i.dtype),shape:N,dtype:i.dtype}}},bC={kernelName:nr,backendName:"cpu",kernelFunc:function(e){var t=e.inputs,r=e.backend,n=e.attrs,i=t.x,o=t.filter,s=t.dy,l=n.strides,u=n.pad,h=n.dilations,c=r,f=a.toNestedArray(i.shape,c.data.get(i.dataId).values),d=a.toNestedArray(o.shape,c.data.get(o.dataId).values),v=g.computeDilation2DInfo(i.shape,o.shape,l,u,"NHWC",h),p=v.batchSize,_=v.inHeight,m=v.inWidth,y=v.inChannels,b=v.outHeight,x=v.outWidth,k=v.padInfo,w=v.strideHeight,C=v.strideWidth,T=v.filterHeight,S=v.filterWidth,I=v.dilationHeight,A=v.dilationWidth,R=v.outShape;a.assert(s.rank===R.length,(function(){return"Error in ".concat(nr,", dy must have the same rank as output ").concat(R.length,", but got ")+s.rank}));for(var N=a.toNestedArray(R,c.data.get(s.dataId).values),E=a.makeZerosNestedTypedArray(o.shape,o.dtype),F=0;F<p;++F)for(var M=0;M<b;++M)for(var D=M*w-k.top,O=0;O<x;++O)for(var L=O*C-k.left,z=0;z<y;++z){for(var B=Number.MIN_SAFE_INTEGER,P=0,V=0,U=0;U<T;++U){var W=D+U*I;if(W>=0&&W<_)for(var G=0;G<S;++G){var H=L+G*A;if(H>=0&&H<m){var j=f[F][W][H][z]+d[U][G][z];j>B&&(B=j,P=U,V=G)}}}E[P][V][z]+=N[F][M][O][z]}return{dataId:c.write(a.toTypedArray(E,i.dtype),o.shape,o.dtype),shape:o.shape,dtype:o.dtype}}},xC={kernelName:ar,backendName:"cpu",kernelFunc:function(e){var t=e.inputs,r=e.backend,n=e.attrs,i=t.x,o=t.filter,s=t.dy,l=n.strides,u=n.pad,h=n.dilations,c=r,f=a.toNestedArray(i.shape,c.data.get(i.dataId).values),d=a.toNestedArray(o.shape,c.data.get(o.dataId).values),v=g.computeDilation2DInfo(i.shape,o.shape,l,u,"NHWC",h),p=v.batchSize,_=v.inHeight,m=v.inWidth,y=v.inChannels,b=v.outHeight,x=v.outWidth,k=v.padInfo,w=v.strideHeight,C=v.strideWidth,T=v.filterHeight,S=v.filterWidth,I=v.dilationHeight,A=v.dilationWidth,R=v.outShape;a.assert(s.rank===R.length,(function(){return"Error in ".concat(ar,", dy must have the same rank as output ").concat(R.length,", but got ")+s.rank}));for(var N=a.toNestedArray(R,c.data.get(s.dataId).values),E=a.makeZerosNestedTypedArray(i.shape,i.dtype),F=0;F<p;++F)for(var M=0;M<b;++M)for(var D=M*w-k.top,O=0;O<x;++O)for(var L=O*C-k.left,z=0;z<y;++z){for(var B=Number.MIN_SAFE_INTEGER,P=D<0?0:D,V=L<0?0:L,U=0;U<T;++U){var W=D+U*I;if(W>=0&&W<_)for(var G=0;G<S;++G){var H=L+G*A;if(H>=0&&H<m){var j=f[F][W][H][z]+d[U][G][z];j>B&&(B=j,P=W,V=H)}}}E[F][P][V][z]+=N[F][M][O][z]}return{dataId:c.write(a.toTypedArray(E,i.dtype),i.shape,i.dtype),shape:i.shape,dtype:i.dtype}}},kC=aw((function(e,t){return e/t})),wC=mw(ir,kC),CC={kernelName:ir,backendName:"cpu",kernelFunc:wC},TC=g.ERF_P,SC=g.ERF_A1,IC=g.ERF_A2,AC=g.ERF_A3,RC=g.ERF_A4,NC=g.ERF_A5,EC=Jk(lr,(function(e){var t=Math.sign(e),r=Math.abs(e),a=1/(1+TC*r);return t*(1-((((NC*a+RC)*a+AC)*a+IC)*a+SC)*a*Math.exp(-r*r))})),FC={kernelName:lr,backendName:"cpu",kernelFunc:EC},MC=Kw((function(e){return Math.exp(e)})),DC=Zk(hr,MC),OC={kernelName:hr,backendName:"cpu",kernelFunc:DC},LC=Kw((function(e){return Math.expm1(e)})),zC=Zk(cr,LC),BC={kernelName:cr,backendName:"cpu",kernelFunc:zC},PC=aw((function(e,t){return e*t})),VC=yw((function(e,t,r,a){return{real:e*r-t*a,imag:e*a+t*r}})),UC=mw(Jr,PC,VC),WC={kernelName:Jr,backendName:"cpu",kernelFunc:UC};function GC(e,t,r,n,i){var o=c.isSliceContinous(n,t,r),s=a.sizeFromShape(r),l=a.computeStrides(n);if(o){var u=c.computeFlatOffset(t,l);return e.subarray(u,u+s)}for(var h=a.getTypedArrayFromDType(i,s),f=0;f<s;++f){var d=r.length,v=a.computeStrides(r),p=a.indexToLoc(f,d,v).map((function(e,r){return e+t[r]})),g=a.locToIndex(p,n.length,l);h[f]=e[g]}return h}function HC(e){var t=e.inputs,r=e.backend,a=e.attrs,n=t.x,i=a.begin,o=a.size;Hk(n,"slice");var s=_slicedToArray(c.parseSliceParams(n,i,o),2),l=s[0],u=s[1];c.assertParamsValid(n,l,u);var h=GC(r.data.get(n.dataId).values,l,u,n.shape,n.dtype);return r.makeTensorInfo(u,n.dtype,h)}var jC={kernelName:Sa,backendName:"cpu",kernelFunc:HC},qC=aw((function(e,t){return e-t})),XC=yw((function(e,t,r,a){return{real:e-r,imag:t-a}})),KC=mw(Pa,qC,XC),QC={kernelName:Pa,backendName:"cpu",kernelFunc:KC};function YC(e,t,r){for(var n=e.shape,i=n[0],o=n[1],s=r.data.get(e.dataId),l=s.complexTensorInfos.real,u=s.complexTensorInfos.imag,h=[i,o],c=a.sizeFromShape(h),f=a.getTypedArrayFromDType("float32",c),d=a.getTypedArrayFromDType("float32",c),v=0;v<i;v++){for(var p=HC({inputs:{x:l},backend:r,attrs:{begin:[v,0],size:[1,o]}}),_=HC({inputs:{x:u},backend:r,attrs:{begin:[v,0],size:[1,o]}}),m=fw({inputs:{real:p,imag:_},backend:r}),y=JC(m,t,r),b=y.real,x=y.imag,k=g.mergeRealAndImagArrays(b,x),w=0;w<o;w++){var C=g.getComplexWithIndex(k,w);f[v*o+w]=C.real,d[v*o+w]=C.imag}r.disposeIntermediateTensorInfo(p),r.disposeIntermediateTensorInfo(_),r.disposeIntermediateTensorInfo(m)}var T=r.makeTensorInfo(h,"float32",f),S=r.makeTensorInfo(h,"float32",d),I=fw({inputs:{real:T,imag:S},backend:r});return r.disposeIntermediateTensorInfo(T),r.disposeIntermediateTensorInfo(S),I}function JC(e,t,r){var n=a.sizeFromShape(e.shape),i=r.data.get(e.dataId),o=r.data.get(i.complexTensorInfos.real.dataId).values,s=r.data.get(i.complexTensorInfos.imag.dataId).values;if(0==((y=n)&y-1)){var l=function e(t,r,a,n,i){if(1===a)return{real:t,imag:r};var o=g.mergeRealAndImagArrays(t,r),s=a/2,l=g.complexWithEvenIndex(o),u=l.real,h=l.imag,c=[u.length],f=i.makeTensorInfo(c,"float32",u),d=i.makeTensorInfo(c,"float32",h),v=fw({inputs:{real:f,imag:d},backend:i}),p=g.complexWithOddIndex(o),_=p.real,m=p.imag,y=[_.length],b=i.makeTensorInfo(y,"float32",_),x=i.makeTensorInfo(y,"float32",m),k=fw({inputs:{real:b,imag:x},backend:i}),w=e(u,h,s,n,i),C=w.real,T=w.imag,S=[C.length],I=i.makeTensorInfo(S,"float32",C),A=i.makeTensorInfo(S,"float32",T),R=fw({inputs:{real:I,imag:A},backend:i}),N=e(_,m,s,n,i),E=N.real,F=N.imag,M=[E.length],D=i.makeTensorInfo(M,"float32",E),O=i.makeTensorInfo(M,"float32",F),L=fw({inputs:{real:D,imag:O},backend:i}),z=g.exponents(a,n),B=[z.real.length],P=i.makeTensorInfo(B,"float32",z.real),V=i.makeTensorInfo(B,"float32",z.imag),U=fw({inputs:{real:P,imag:V},backend:i}),W=UC({inputs:{a:U,b:L},backend:i}),G=kw({inputs:{a:R,b:W},backend:i}),H=KC({inputs:{a:R,b:W},backend:i}),j=vw({inputs:{input:G},backend:i}),q=vw({inputs:{input:H},backend:i}),X=eC({inputs:{input:G},backend:i}),K=eC({inputs:{input:H},backend:i}),Q=rC({inputs:[j,q],backend:i,attrs:{axis:0}}),Y=rC({inputs:[X,K],backend:i,attrs:{axis:0}}),J=i.data.get(Q.dataId).values,Z=i.data.get(Y.dataId).values;return i.disposeIntermediateTensorInfo(f),i.disposeIntermediateTensorInfo(d),i.disposeIntermediateTensorInfo(v),i.disposeIntermediateTensorInfo(b),i.disposeIntermediateTensorInfo(x),i.disposeIntermediateTensorInfo(k),i.disposeIntermediateTensorInfo(I),i.disposeIntermediateTensorInfo(A),i.disposeIntermediateTensorInfo(R),i.disposeIntermediateTensorInfo(D),i.disposeIntermediateTensorInfo(O),i.disposeIntermediateTensorInfo(L),i.disposeIntermediateTensorInfo(P),i.disposeIntermediateTensorInfo(V),i.disposeIntermediateTensorInfo(U),i.disposeIntermediateTensorInfo(W),i.disposeIntermediateTensorInfo(G),i.disposeIntermediateTensorInfo(H),i.disposeIntermediateTensorInfo(j),i.disposeIntermediateTensorInfo(X),i.disposeIntermediateTensorInfo(q),i.disposeIntermediateTensorInfo(K),i.disposeIntermediateTensorInfo(Q),i.disposeIntermediateTensorInfo(Y),{real:J,imag:Z}}(o,s,n,t,r),u=[e.shape[0],e.shape[1]];if(t){var h=r.makeTensorInfo(u,"float32",l.real),c=r.makeTensorInfo(u,"float32",l.imag),f=r.makeTensorInfo([],"float32",a.createScalarValue(n,"float32")),d=tw({inputs:{x:f},backend:r}),v=CC.kernelFunc({inputs:{a:h,b:f},backend:r}),p=CC.kernelFunc({inputs:{a:c,b:d},backend:r}),_=r.data.get(v.dataId).values,m=r.data.get(p.dataId).values;return r.disposeIntermediateTensorInfo(h),r.disposeIntermediateTensorInfo(c),r.disposeIntermediateTensorInfo(f),r.disposeIntermediateTensorInfo(d),r.disposeIntermediateTensorInfo(v),r.disposeIntermediateTensorInfo(p),{real:_,imag:m}}return l}var y,b=function(e,t,r){for(var a=new Float32Array(2*t),n=0;n<t;n++){for(var i=0,o=0,s=0;s<t;s++){var l=g.exponent(n*s,t,r),u=g.getComplexWithIndex(e,s);i+=u.real*l.real-u.imag*l.imag,o+=u.real*l.imag+u.imag*l.real}r&&(i/=t,o/=t),g.assignToTypedArray(a,i,o,n)}return a}(g.mergeRealAndImagArrays(o,s),n,t);return g.splitRealAndImagArrays(b)}var ZC={kernelName:fr,backendName:"cpu",kernelFunc:function(e){var t=e.inputs,r=e.backend,n=t.input,i=a.sizeFromShape(n.shape),o=n.shape[n.shape.length-1],s=Cw({inputs:{x:n},backend:r,attrs:{shape:[i/o,o]}}),l=YC(s,!1,r),u=Cw({inputs:{x:l},backend:r,attrs:{shape:n.shape}});return r.disposeIntermediateTensorInfo(s),r.disposeIntermediateTensorInfo(l),u}},$C={kernelName:dr,backendName:"cpu",kernelFunc:function(e){var t=e.backend,r=e.attrs,n=r.shape,i=r.value,o=r.dtype||a.inferDtype(i),s=a.getArrayFromDType(o,a.sizeFromShape(n));return function(e,t,r){e.fill(t)}(s,i),t.makeTensorInfo(n,o,s)}},eT={kernelName:vr,backendName:"cpu",kernelFunc:function(e){for(var t=e.inputs,r=e.backend,n=t.image,i=r,o=a.getTypedArrayFromDType(n.dtype,a.sizeFromShape(n.shape)),s=_slicedToArray(n.shape,4),l=s[0],u=s[1],h=s[2],c=s[3],f=i.data.get(n.dataId).values,d=0;d<l;d++)for(var v=d*h*u*c,p=0;p<u;p++)for(var g=p*(h*c),_=0;_<h;_++)for(var m=_*c,y=0;y<c;y++){var b=Math.round(h-[l,p,_,y][2]),x=v+g+m+y,k=f[x];b>=0&&b<h&&(k=f[v+g+b*c+y]),o[x]=k}return{dataId:i.write(o,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},tT=Kw((function(e){return Math.floor(e)})),rT=Zk(pr,tT),aT={kernelName:pr,backendName:"cpu",kernelFunc:rT},nT={kernelName:tn,backendName:"cpu",kernelFunc:function(e){var t=e.inputs,r=e.backend,a=e.attrs,n=t.x,i=t.filter,o=t.bias,s=t.preluActivationWeights,l=a.strides,u=a.pad,h=a.dataFormat,c=a.dilations,f=a.dimRoundingMode,d=a.activation,v=nC({inputs:{x:n,filter:i},backend:r,attrs:{strides:l,pad:u,dataFormat:h,dilations:c,dimRoundingMode:f}});if(o){var p=v;v=kw({inputs:{a:v,b:o},backend:r}),r.disposeIntermediateTensorInfo(p)}if(d){var g=v;v=cw(r,v,d,s),r.disposeIntermediateTensorInfo(g)}return v}},iT={kernelName:rn,backendName:"cpu",kernelFunc:function(e){var t=e.inputs,r=e.backend,a=e.attrs,n=t.x,i=t.filter,o=t.bias,s=t.preluActivationWeights,l=a.strides,u=a.pad,h=a.dataFormat,c=a.dilations,f=a.dimRoundingMode,d=a.activation,v=pC({inputs:{x:n,filter:i},backend:r,attrs:{strides:l,pad:u,dataFormat:h,dilations:c,dimRoundingMode:f}});if(o){var p=v;v=kw({inputs:{a:v,b:o},backend:r}),r.disposeIntermediateTensorInfo(p)}if(d){var g=v;v=cw(r,v,d,s),r.disposeIntermediateTensorInfo(g)}return v}},oT={kernelName:wr,backendName:"cpu",kernelFunc:function(e){var t=e.inputs,r=e.backend,n=t.input,i=a.sizeFromShape(n.shape),o=n.shape[n.shape.length-1],s=Cw({inputs:{x:n},backend:r,attrs:{shape:[i/o,o]}}),l=YC(s,!0,r),u=Cw({inputs:{x:l},backend:r,attrs:{shape:n.shape}});return r.disposeIntermediateTensorInfo(s),r.disposeIntermediateTensorInfo(l),u}},sT=Jk(Tr,(function(e){return Number.isFinite(e)?1:0}),"bool"),lT={kernelName:Tr,backendName:"cpu",kernelFunc:sT},uT=Jk(Sr,(function(e){return Math.abs(e)===1/0?1:0}),"bool"),hT={kernelName:Sr,backendName:"cpu",kernelFunc:uT},cT=Jk(Ir,(function(e){return Number.isNaN(e)?1:0}),"bool"),fT={kernelName:Ir,backendName:"cpu",kernelFunc:cT},dT=Kw((function(e){return Math.log(e)})),vT=Zk(Er,dT),pT={kernelName:Er,backendName:"cpu",kernelFunc:vT},gT=Jk(Fr,(function(e){return Math.log1p(e)})),_T={kernelName:Fr,backendName:"cpu",kernelFunc:gT},mT=Jk(Dr,(function(e){return e?0:1}),"bool"),yT={kernelName:Dr,backendName:"cpu",kernelFunc:mT};function bT(e,t,r,n){for(var i=a.getTypedArrayFromDType(n,a.sizeFromShape(r)),o=0;o<i.length;++o){for(var s=o*t,l=e[s],u=0;u<t;++u){var h=e[s+u];h>l&&(l=h)}i[o]=l}return i}function xT(e,t,r,n,i){for(var o=t.length,s=a.sizeFromShape(t),l=a.computeStrides(t),u=a.computeStrides(i),h=a.getTypedArrayFromDType(r,a.sizeFromShape(i)),c=0;c<s;++c){for(var f=a.indexToLoc(c,o,l),d=new Array(f.length),v=0;v<d.length;v++)d[v]=f[n[v]];h[a.locToIndex(d,o,u)]=e[c]}return h}var kT={kernelName:Pr,backendName:"cpu",kernelFunc:function(e){var t=e.inputs,r=e.attrs,n=e.backend,i=t.x,o=r.reductionIndices,s=r.keepDims,l=n,u=i.shape,h=u.length,c=a.parseAxisParam(o,u),f=c,d=g.getAxesPermutation(f,h),v=l.data.get(i.dataId).values;if(null!=d){for(var p=new Array(h),_=0;_<p.length;_++)p[_]=u[d[_]];v=xT(v,u,i.dtype,d,p),f=g.getInnerMostAxes(f.length,h),u=p}Hk(i,"max"),g.assertAxesAreInnerMostDims("max",f,h);var m=_slicedToArray(g.computeOutAndReduceShapes(u,f),2),y=m[0],b=m[1],x=bT(v,a.sizeFromShape(b),y,i.dtype),k=l.write(x,y,i.dtype),w=y;return s&&(w=g.expandShapeToKeepDim(y,c)),{dataId:k,shape:w,dtype:i.dtype}}},wT={kernelName:Ur,backendName:"cpu",kernelFunc:function(e){var t=e.inputs,r=e.backend,n=e.attrs,i=t.x;Hk(i,"maxPool");var o=n.filterSize,s=n.strides,l=n.pad,u=n.dimRoundingMode;a.assert(g.eitherStridesOrDilationsAreOne(s,1),(function(){return"Error in maxPool: Either strides or dilations must be 1. Got strides ".concat(s," and dilations '1'")}));var h,c=g.computePool2DInfo(i.shape,o,s,1,l,u);if(1===c.filterWidth&&1===c.filterHeight&&a.arraysEqual(c.inShape,c.outShape))h=tw({inputs:{x:i},backend:r});else{var f=r.data.get(i.dataId).values,d=a.computeStrides(i.shape),v=Gw(f,0,i.dtype,d,c,"max");h=r.makeTensorInfo(c.outShape,i.dtype,v.values)}return h}},CT={kernelName:Wr,backendName:"cpu",kernelFunc:function(e){var t=e.inputs,r=e.backend,a=e.attrs,n=t.dy,i=t.input,o=i;Hk([i,t.output],"maxPoolBackprop");for(var s=a.filterSize,l=a.strides,u=a.pad,h=a.dimRoundingMode,c=g.computePool2DInfo(o.shape,s,l,1,u,h),f=r.data.get(o.dataId).values,d=Zi(c.outShape,o.dtype,Hw(f,o.shape,o.dtype,c).values),v=c.strideHeight,p=c.strideWidth,_=c.dilationHeight,m=c.dilationWidth,y=c.effectiveFilterHeight,b=c.effectiveFilterWidth,x=b-1-c.padInfo.left,k=y-1-c.padInfo.top,w=Zi(o.shape,"float32"),C=r.data.get(n.dataId).values,T=Zi(n.shape,"float32",C),S=0;S<c.batchSize;++S)for(var I=0;I<c.inChannels;++I)for(var A=0;A<c.inHeight;++A)for(var R=0;R<c.inWidth;++R){for(var N=A-k,E=R-x,F=0,M=0;M<y;M+=_){var D=(N+M)/v;if(!(D<0||D>=c.outHeight||Math.floor(D)!==D))for(var O=0;O<b;O+=m){var L=(E+O)/p;if(!(L<0||L>=c.outWidth||Math.floor(L)!==L)){var z=y*b-1-d.get(S,D,L,I)===M*b+O?1:0;0!==z&&(F+=T.get(S,D,L,I)*z)}}}w.set(F,S,A,R,I)}return r.makeTensorInfo(w.shape,w.dtype,w.values)}},TT={kernelName:jr,backendName:"cpu",kernelFunc:function(e){var t=e.inputs,r=e.attrs,n=e.backend,i=t.x,o=r.filterSize,s=r.strides,l=r.pad,u=r.includeBatchInIndex,h=n;Hk(i,"MaxPoolWithArgmax");var c=h.data.get(i.dataId).values,f=g.computePool2DInfo(i.shape,o,s,[1,1],l),d=_slicedToArray(function(e,t,r,n,i){var o=Gw(e,0,r,a.computeStrides(t),i,"max"),s=Hw(e,t,r,i,!0,n);return[o.values,s.values]}(c,i.shape,i.dtype,u,f),2),v=d[0],p=d[1],_=h.write(v,f.outShape,i.dtype),m=h.write(p,f.outShape,i.dtype);return[{dataId:_,shape:f.outShape,dtype:i.dtype},{dataId:m,shape:f.outShape,dtype:"int32"}]}},ST={kernelName:Qr,backendName:"cpu",kernelFunc:function(e){var t=e.inputs,r=e.backend,n=e.attrs,i=t.x,o=n.paddings,s=n.mode;Hk(i,"mirrorPad");for(var l=o.map((function(e,t){return e[0]+i.shape[t]+e[1]})),u=o.map((function(e){return e[0]})),h=o.map((function(e,t){return e[0]+i.shape[t]})),c="reflect"===s?0:1,f=r.data.get(i.dataId).values,d=i.shape.length,v=a.computeStrides(i.shape),p=a.sizeFromShape(l),g=l.length,_=a.computeStrides(l),m=a.getTypedArrayFromDType(i.dtype,p),y=0;y<p;y++){for(var b=a.indexToLoc(y,g,_),x=0;x<g;x++)b[x]<u[x]?b[x]=2*u[x]-b[x]-c:b[x]>=h[x]&&(b[x]=2*(h[x]-1)-b[x]+c);b=b.map((function(e,t){return e-u[t]}));var k=a.locToIndex(b,d,v);m[y]=f[k]}return{dataId:r.write(m,l,i.dtype),shape:l,dtype:i.dtype}}},IT=_.nonMaxSuppressionV4Impl,AT={kernelName:ta,backendName:"cpu",kernelFunc:function(e){var t=e.inputs,r=e.backend,a=e.attrs,n=t.boxes,i=t.scores,o=a.maxOutputSize,s=a.iouThreshold,l=a.scoreThreshold,u=a.padToMaxOutputSize,h=r;Hk(n,"NonMaxSuppressionPadded");var c=h.data.get(n.dataId).values,f=h.data.get(i.dataId).values,d=IT(c,f,o,s,l,u);return[d.selectedIndices,d.validOutputs]}},RT=_.nonMaxSuppressionV5Impl,NT={kernelName:ra,backendName:"cpu",kernelFunc:function(e){var t=e.inputs,r=e.backend,a=e.attrs,n=t.boxes,i=t.scores,o=a.maxOutputSize,s=a.iouThreshold,l=a.scoreThreshold,u=a.softNmsSigma,h=r;Hk(n,"NonMaxSuppressionWithScore");var c=h.data.get(n.dataId).values,f=h.data.get(i.dataId).values,d=RT(c,f,o,s,l,u);return[d.selectedIndices,d.selectedScores]}},ET=aw((function(e,t){return e!==t?1:0})),FT=mw($r,ET,null,"bool"),MT={kernelName:$r,backendName:"cpu",kernelFunc:FT},DT={kernelName:ia,backendName:"cpu",kernelFunc:function(e){var t=e.inputs,r=e.backend,n=e.attrs,i=t.x,o=n.paddings,s=n.constantValue;Hk(i,"pad");var l=o.map((function(e,t){return e[0]+i.shape[t]+e[1]})),u=o.map((function(e){return e[0]})),h=r.data.get(i.dataId).values,c=a.sizeFromShape(i.shape),f=i.shape.length,d=a.computeStrides(i.shape),v=a.sizeFromShape(l),p=l.length,g=a.computeStrides(l),_=a.getTypedArrayFromDType(i.dtype,v);0!==s&&_.fill(s);for(var m=0;m<c;m++){var y=a.indexToLoc(m,f,d).map((function(e,t){return e+u[t]}));_[a.locToIndex(y,p,g)]=h[m]}return{dataId:r.write(_,l,i.dtype),shape:l,dtype:i.dtype}}},OT=Jk(fa,(function(e){return 1/e})),LT={kernelName:fa,backendName:"cpu",kernelFunc:OT},zT={kernelName:$a,backendName:"cpu",kernelFunc:function(e){for(var t=e.inputs,r=e.attrs,n=e.backend,i=t.image,o=r.radians,s=r.fillValue,l=r.center,u=n,h=a.getTypedArrayFromDType(i.dtype,a.sizeFromShape(i.shape)),c=_slicedToArray(i.shape,4),f=c[0],d=c[1],v=c[2],p=c[3],_=_slicedToArray(g.getImageCenter(l,d,v),2),m=_[0],y=_[1],b=Math.sin(o),x=Math.cos(o),k=u.data.get(i.dataId).values,w=0;w<f;w++)for(var C=w*v*d*p,T=0;T<d;T++)for(var S=T*(v*p),I=0;I<v;I++)for(var A=I*p,R=0;R<p;R++){var N=[f,T,I,R],E=N[2],F=N[1],M=(E-m)*x-(F-y)*b,D=(E-m)*b+(F-y)*x;M=Math.round(M+m),D=Math.round(D+y);var O=s;"number"!=typeof s&&(O=3===R?255:s[R]),M>=0&&M<v&&D>=0&&D<d&&(O=k[C+D*(v*p)+M*p+R]),h[C+S+A+R]=O}return{dataId:u.write(h,i.shape,i.dtype),shape:i.shape,dtype:i.dtype}}},BT=Jk(xa,(function(e){var t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1})),PT={kernelName:xa,backendName:"cpu",kernelFunc:BT},VT=Kw((function(e){return 1/Math.sqrt(e)})),UT=Zk(ka,VT),WT={kernelName:ka,backendName:"cpu",kernelFunc:UT},GT=g.SELU_SCALEALPHA,HT=g.SELU_SCALE,jT=Jk(Ta,(function(e){return e>=0?HT*e:GT*(Math.exp(e)-1)})),qT={kernelName:Ta,backendName:"cpu",kernelFunc:jT},XT=Jk(Na,(function(e){return 1/(1+Math.exp(-e))})),KT={kernelName:Na,backendName:"cpu",kernelFunc:XT},QT=Jk(Ra,(function(e){return e<0?-1:e>0?1:0})),YT={kernelName:Ra,backendName:"cpu",kernelFunc:QT},JT=Jk(Ia,(function(e){return Math.sin(e)})),ZT={kernelName:Ia,backendName:"cpu",kernelFunc:JT},$T=Jk(Aa,(function(e){return Math.sinh(e)})),eS={kernelName:Aa,backendName:"cpu",kernelFunc:$T},tS=Math.log(1.1920928955078125e-7)+2,rS=Jk(Ea,(function(e){var t=e>-tS,r=e<tS,a=Math.exp(e);return r?a:t?e:Math.log(1+a)})),aS={kernelName:Ea,backendName:"cpu",kernelFunc:rS};function nS(e){var t=e.inputs,r=e.attrs,a=e.backend,n=t.x,i=r.perm;Hk(n,"transpose");for(var o=new Array(n.shape.length),s=0;s<o.length;s++)o[s]=n.shape[i[s]];var l=xT(a.data.get(n.dataId).values,n.shape,n.dtype,i,o);return{dataId:a.write(l,o,n.dtype),shape:o,dtype:n.dtype}}var iS={kernelName:qa,backendName:"cpu",kernelFunc:nS},oS={kernelName:Da,backendName:"cpu",kernelFunc:function(e){var t=e.inputs,r=e.backend,n=e.attrs,i=t.x,o=n.blockShape,s=n.paddings;Hk([i],"spaceToBatchND");var l=a.sizeFromShape(o),u=[[0,0]];u.push.apply(u,_toConsumableArray(s));for(var h=1+o.length;h<i.shape.length;++h)u.push([0,0]);var c=DT.kernelFunc({inputs:{x:i},backend:r,attrs:{paddings:u,constantValue:0}}),f=g.getReshaped(c.shape,o,l,!1),d=g.getPermuted(f.length,o.length,!1),v=g.getReshapedPermuted(c.shape,o,l,!1),p=Cw({inputs:{x:c},backend:r,attrs:{shape:f}}),_=nS({inputs:{x:p},backend:r,attrs:{perm:d}}),m=Cw({inputs:{x:_},backend:r,attrs:{shape:v}});return r.disposeIntermediateTensorInfo(c),r.disposeIntermediateTensorInfo(p),r.disposeIntermediateTensorInfo(_),m}},sS=Jk(Fa,(function(e){return Math.sqrt(e)})),lS={kernelName:Fa,backendName:"cpu",kernelFunc:sS},uS={kernelName:Ba,backendName:"cpu",kernelFunc:function(e){var t=e.inputs,r=e.backend,a=t.x,n=r;Hk(a,"square");for(var i=n.data.get(a.dataId).values,o=new Float32Array(i.length),s=0;s<i.length;++s){var l=i[s];o[s]=l*l}return{dataId:n.write(o,a.shape,a.dtype),shape:a.shape,dtype:a.dtype}}},hS=aw((function(e,t){var r=e-t;return r*r})),cS=mw(za,hS),fS={kernelName:za,backendName:"cpu",kernelFunc:cS},dS=Jk(Ja,(function(e,t){var r=t;return isNaN(e)?NaN:e>0?1:r.alpha})),vS={kernelName:Ja,backendName:"cpu",kernelFunc:dS},pS=Jk(Wa,(function(e){return Math.tan(e)})),gS={kernelName:Wa,backendName:"cpu",kernelFunc:pS},_S=Jk(Ga,(function(e){return Math.tanh(e)}));function mS(e,t,r,n){for(var i=a.parseAxisParam(t,r)[0],o=[1,r[0],1],s=0;s<i;s++)o[0]*=r[s];o[1]=r[i];for(var l=i+1;l<r.length;l++)o[2]*=r[l];for(var u={},h=new Int32Array(r[i]),c=new Sn(o,n,e),f=[],d=1===o[0]&&1===o[2],v=0;v<r[i];v++){var p=void 0;if(d)p=e[v].toString();else{for(var g=[],_=0;_<o[0];_++)for(var m=0;m<o[2];m++)g.push(c.get(_,v,m));p=g.join(",")}if(void 0!==u[p])h[v]=u[p];else{var y=Object.keys(u).length;u[p]=y,h[v]=y,f.push(v)}}var b=o.slice();b[1]=Object.keys(u).length;var x=new Sn(b,n);f.forEach((function(e,t){for(var r=0;r<o[0];r++)for(var a=0;a<o[2];a++)x.set(c.get(r,e,a),r,t,a)}));var k=r.slice();return k[i]=b[1],{outputValues:x.values,outputShape:k,indices:h}}for(var yS=0,bS=[Aw,Nw,Fw,Dw,ww,Lw,Bw,Vw,Ww,jw,qw,Iw,Xw,_w,Jw,$w,dw,aC,oC,sC,iC,uC,hC,lC,fC,vC,gC,_C,mC,yC,xC,bC,CC,ew,FC,OC,BC,ZC,$C,eT,aT,nT,iT,rw,oT,tC,lT,hT,fT,pT,_T,yT,wT,CT,TT,kT,ST,WC,AT,NT,MT,DT,ow,pw,LT,lw,hw,Tw,zT,PT,WT,qT,KT,YT,ZT,eS,jC,aS,oS,lS,uS,fS,vS,QC,gS,{kernelName:Ga,backendName:"cpu",kernelFunc:_S},iS,{kernelName:Xa,backendName:"cpu",kernelFunc:function(e){var t=e.inputs,r=e.attrs,a=e.backend,n=r.axis,i=t.x;Hk(i,"unique");var o=mS(a.data.get(i.dataId).values,n,i.shape,i.dtype),s=o.outputValues,l=o.outputShape,u=o.indices;return[a.makeTensorInfo(l,i.dtype,s),a.makeTensorInfo([u.length],"int32",u)]}}];yS<bS.length;yS++){un(bS[yS])}var xS,kS,wS,CS={},TS={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function SS(e){if(!(e in CS)){var t=function(e){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");var t=function(e){if("undefined"!=typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(e);return t.addEventListener("webglcontextlost",(function(t){t.preventDefault(),delete CS[e]}),!1),1===e?t.getContext("webgl",TS)||t.getContext("experimental-webgl",TS):t.getContext("webgl2",TS)}(e);if(null===t)return console.log("Could not get context for WebGL version",e),null;CS[e]=t}var r=CS[e];return r.isContextLost()?(delete CS[e],SS(e)):(r.disable(r.DEPTH_TEST),r.disable(r.STENCIL_TEST),r.disable(r.BLEND),r.disable(r.DITHER),r.disable(r.POLYGON_OFFSET_FILL),r.disable(r.SAMPLE_COVERAGE),r.enable(r.SCISSOR_TEST),r.enable(r.CULL_FACE),r.cullFace(r.BACK),CS[e])}function IS(e,t){return[t,e]}function AS(e){var t=a.sizeFromShape(e),r=Math.ceil(t/4);return a.sizeToSquarishShape(r)}function RS(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function NS(e,t){var r,a,n,i,o,s,l,u,h,c=e;return 2===ht().getNumber("WEBGL_VERSION")?(r=c.R32F,a=c.R16F,n=c.RGBA16F,i=c.RGBA32F,o=c.RED,s=4,l=1,u=c.HALF_FLOAT,h=c.FLOAT):(r=e.RGBA,a=e.RGBA,n=e.RGBA,i=c.RGBA,o=e.RGBA,s=4,l=4,u=null!=t?t.HALF_FLOAT_OES:null,h=e.FLOAT),{internalFormatFloat:r,internalFormatHalfFloat:a,internalFormatPackedHalfFloat:n,internalFormatPackedFloat:i,textureFormatFloat:o,downloadTextureFormat:e.RGBA,downloadUnpackNumChannels:s,defaultNumChannels:l,textureTypeHalfFloat:u,textureTypeFloat:h}}function ES(e,t){var r=t();return ht().getBool("DEBUG")&&function(e){var t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+function(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return"Unknown error code "+t}}(e,t))}(e),r}function FS(e){return!!(ht().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||5.96e-8<Math.abs(e)&&Math.abs(e)<65504)}function MS(e,t){return WS(e,(function(){return e.getExtension(t)}),'Extension "'+t+'" not supported on this browser.')}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(xS||(xS={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(kS||(kS={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(wS||(wS={}));var DS,OS,LS=/ERROR: [0-9]+:([0-9]+):/g;function zS(e,t){if(ES(e,(function(){return e.validateProgram(t)})),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function BS(e,t,r,a,n,i,o){var s=e.getAttribLocation(t,r);return-1!==s&&(ES(e,(function(){return e.bindBuffer(e.ARRAY_BUFFER,a)})),ES(e,(function(){return e.vertexAttribPointer(s,n,e.FLOAT,!1,i,o)})),ES(e,(function(){return e.enableVertexAttribArray(s)})),!0)}function PS(e,t,r){ES(e,(function(){return e.bindFramebuffer(e.FRAMEBUFFER,r)})),ES(e,(function(){return e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)}))}function VS(e,t){ES(e,(function(){return e.bindFramebuffer(e.FRAMEBUFFER,t)})),ES(e,(function(){return e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0)}))}function US(e){var t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return"unknown error "+t}}(e,t))}function WS(e,t,r){var a=ES(e,(function(){return t()}));if(null==a)throw new Error(r);return a}function GS(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2;return a.sizeFromShape(e.slice(0,e.length-t))}function HS(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function jS(e){var t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[GS(e)].concat(_toConsumableArray(HS(e)))),t}function qS(e){return e%2==0}function XS(e,t){if(e=e.slice(-2),t=t.slice(-2),a.arraysEqual(e,t))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){var r=e.slice(-1)[0],n=t.slice(-1)[0];if(r===n)return!0;if(qS(r)&&qS(n)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&qS(e[0])&&qS(t[0])}function KS(e,t){return null!=e.getExtension(t)}function QS(e){try{if(null!=SS(e))return!0}catch(t){return console.log("Error when getting WebGL context: ",t),!1}return!1}function YS(e){var t=NS(e),r=e.createTexture();e.bindTexture(e.TEXTURE_2D,r),e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);var a=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,a),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,r,0);var n=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(r),e.deleteFramebuffer(a),n}function JS(e,t){Array.isArray(e)||(e=[e]),e.forEach((function(e){null!=e&&a.assert("complex64"!==e.dtype,(function(){return t+" does not support complex64 tensors in the WebGL backend."}))}))}var ZS=ht();ZS.registerFlag("HAS_WEBGL",(function(){return ZS.getNumber("WEBGL_VERSION")>0})),ZS.registerFlag("WEBGL_VERSION",(function(){return QS(2)?2:QS(1)?1:0})),ZS.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",(function(){return!1})),ZS.registerFlag("WEBGL_BUFFER_SUPPORTED",(function(){return 2===ZS.get("WEBGL_VERSION")})),ZS.registerFlag("WEBGL_CPU_FORWARD",(function(){return!0})),ZS.registerFlag("WEBGL_FORCE_F16_TEXTURES",(function(){return!1})),ZS.registerFlag("WEBGL_PACK",(function(){return ZS.getBool("HAS_WEBGL")})),ZS.registerFlag("WEBGL_PACK_NORMALIZATION",(function(){return ZS.getBool("WEBGL_PACK")})),ZS.registerFlag("WEBGL_PACK_CLIP",(function(){return ZS.getBool("WEBGL_PACK")})),ZS.registerFlag("WEBGL_PACK_DEPTHWISECONV",(function(){return!1})),ZS.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(function(){return ZS.getBool("WEBGL_PACK")})),ZS.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(function(){return ZS.getBool("WEBGL_PACK")})),ZS.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(function(){return ZS.getBool("WEBGL_PACK")})),ZS.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(function(){return ZS.getBool("WEBGL_PACK")})),ZS.registerFlag("WEBGL_PACK_REDUCE",(function(){return ZS.getBool("WEBGL_PACK")})),ZS.registerFlag("WEBGL_LAZILY_UNPACK",(function(){return ZS.getBool("WEBGL_PACK")})),ZS.registerFlag("WEBGL_CONV_IM2COL",(function(){return ZS.getBool("WEBGL_PACK")})),ZS.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(function(){return function(e){if(null==DS){var t=SS(e);DS=t.getParameter(t.MAX_TEXTURE_SIZE)}return DS}(ZS.getNumber("WEBGL_VERSION"))})),ZS.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(function(){return function(e){if(null==OS){var t=SS(e);OS=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,OS)}(ZS.getNumber("WEBGL_VERSION"))})),ZS.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(function(){var e=ZS.getNumber("WEBGL_VERSION");return 0===e?0:function(e){if(0===e)return 0;var t=SS(e);return KS(t,"EXT_disjoint_timer_query_webgl2")&&2===e?2:KS(t,"EXT_disjoint_timer_query")?1:0}(e)})),ZS.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(function(){return ZS.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!i.isMobile()})),ZS.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(function(){return function(e){if(0===e)return!1;var t=SS(e);if(1===e){if(!KS(t,"OES_texture_float"))return!1}else if(!KS(t,"EXT_color_buffer_float"))return!1;return YS(t)}(ZS.getNumber("WEBGL_VERSION"))})),ZS.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(function(){return!ZS.getBool("WEBGL_FORCE_F16_TEXTURES")&&ZS.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")})),ZS.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(function(){return function(e){if(0===e)return!1;var t=SS(e);if(1!==e){if(KS(t,"EXT_color_buffer_float"))return YS(t);var r="EXT_color_buffer_half_float";if(KS(t,r)){var a=t.getExtension(r);return function(e,t){var r=NS(e,t),a=e.createTexture();e.bindTexture(e.TEXTURE_2D,a),e.texImage2D(e.TEXTURE_2D,0,r.internalFormatHalfFloat,1,1,0,r.textureFormatFloat,r.textureTypeHalfFloat,null);var n=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,n),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,a,0);var i=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(a),e.deleteFramebuffer(n),i}(t,a)}return!1}return!!KS(t,"OES_texture_float")&&!!KS(t,"WEBGL_color_buffer_float")&&YS(t)}(ZS.getNumber("WEBGL_VERSION"))})),ZS.registerFlag("WEBGL_FENCE_API_ENABLED",(function(){return 2===(e=ZS.getNumber("WEBGL_VERSION"))&&null!=SS(e).fenceSync;var e})),ZS.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(function(){return ZS.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0})),ZS.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",(function(){return-1}),(function(e){if(e<0&&-1!==e)throw new Error("WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ".concat(e,"."))}));var $S=L.simpleAbsImpl,eI=L.addImpl,tI=L.ceilImpl,rI=L.expImpl,aI=L.expm1Impl,nI=L.floorImpl,iI=L.logImpl,oI=L.maxImpl,sI=L.multiplyImpl,lI=L.rsqrtImpl,uI=L.sliceImpl,hI=L.subImpl,cI=L.transposeImpl,fI=L.uniqueImpl,dI=function e(t,r){_classCallCheck(this,e),this.outputShape=[],this.outputShape=t,this.variableNames=r.map((function(e,t){return"T"+t}));var a=[];this.variableNames.forEach((function(e){a.push("float v".concat(e," = get").concat(e,"AtOutCoords();"))}));var n=this.variableNames.map((function(e){return"v"+e})).join(" + ");this.userCode="\n      void main() {\n        ".concat(a.join("\n        "),"\n\n        float result = ").concat(n,";\n        setOutput(result);\n      }\n    ")},vI=function e(t,r){_classCallCheck(this,e),this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.variableNames=r.map((function(e,t){return"T"+t}));var a=[];this.variableNames.forEach((function(e){a.push("vec4 v".concat(e," = get").concat(e,"AtOutCoords();"))}));var n=this.variableNames.map((function(e){return"v"+e})).join(" + ");this.userCode="\n      void main() {\n        ".concat(a.join("\n        "),"\n\n        vec4 result = ").concat(n,";\n        setOutput(result);\n      }\n    ")},pI=function e(t,r,a){_classCallCheck(this,e),this.variableNames=["A"];var n=t.windowSize,i=t.batchSize,o=t.outSize;a||this.variableNames.push("bestIndicesA"),this.outputShape=[i,o],this.userCode="\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ".concat(n,";\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ").concat(n,"; i++) {\n          int inIdx = ").concat(a?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));",";\n          float candidate = getA(batch, inIdx);\n          if (candidate ").concat("max"===r?">":"<"," bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    ")};function gI(e,t){return["x","y","z","w","u","v"].slice(0,t).map((function(t){return"".concat(e,".").concat(t)}))}function _I(e,t){return 1===t?[e]:gI(e,t)}function mI(){var e,t,r,a,n,i,o,s,l,u;return 2===ht().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",r="out",a="in",n="texture",i="outputColor",o="out vec4 outputColor;",s="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",l="",u="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",r="varying",a="varying",n="texture2D",i="gl_FragColor",o="",s="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",u="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:r,varyingFs:a,texture2D:n,output:i,defineOutput:o,defineSpecialNaN:s,defineSpecialInf:l,defineRound:u}}function yI(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"index",n=a.computeStrides(t);return n.map((function(t,a){return"int ".concat(e[a]," = ").concat(r," / ").concat(t,"; ").concat(a===n.length-1?"int ".concat(e[a+1]," = ").concat(r," - ").concat(e[a]," * ").concat(t):"index -= ".concat(e[a]," * ").concat(t),";")})).join("")}function bI(e){var t=a.computeStrides(e).map((function(e){return e.toString()}));return"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ".concat(t[0]," + coords.y * ").concat(t[1]," + coords.z;\n  }\n")}var xI="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",kI=g.getBroadcastDims,wI="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",CI="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",TI="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",SI="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function II(e){return"offset"+e}function AI(e){var t=e.name,r=a.sizeFromShape(e.shapeInfo.logicalShape);return r<2?"return ".concat(t,";"):"\n    for (int i = 0; i < ".concat(r,"; i++) {\n      if (i == index) {\n        return ").concat(t,"[i];\n      }\n    }\n  ")}function RI(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error("GPU for rank ".concat(e," is not yet supported"))}function NI(e,t){var r=JSON.parse(JSON.stringify(e));return r.shapeInfo.logicalShape=t,r}function EI(e,t){return t.map((function(t){return e[t]})).join(", ")}var FI=function e(t,r,n,i){_classCallCheck(this,e),this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,a.assert(t.length>2,(function(){return"Packed arg".concat(n.charAt(0).toUpperCase()+n.slice(1)," supports only inputs with rank above 2.")}));var o=Math.ceil(t[t.length-1]/r);this.outputShape=t.slice(0,-1),o>1&&this.outputShape.push(o),i||this.variableNames.push("bestIndicesA");var s,l,u=this.outputShape,h=u.length,c=RI(h),f=_I("coords",h);if(1===o){var d=RI(l=h+1);s="\n        ".concat(d," sourceLocR = ").concat(d,"(").concat(f.join(),", 0);\n        ++").concat(f[h-1],";\n        ").concat(d," sourceLocG = ").concat(d,"(").concat(f.join(),", 0);\n        ++").concat(f[h-2],";\n        ").concat(d," sourceLocA = ").concat(d,"(").concat(f.join(),", 0);\n        --").concat(f[h-1],";\n        ").concat(d," sourceLocB = ").concat(d,"(").concat(f.join(),", 0);\n        --").concat(f[h-2],";")}else l=h,s="\n        ".concat(c," sourceLocR = coords;\n        ++").concat(f[h-1],";\n        ").concat(c," sourceLocG = coords;\n        ++").concat(f[h-2],";\n        ").concat(c," sourceLocA = coords;\n        --").concat(f[h-1],";\n        ").concat(c," sourceLocB = coords;\n        --").concat(f[h-2],";");var v=["x","y","z","w","u","v"].slice(0,l),p="."+v[l-1],g=v.map((function(e){return"int "+e})),_=_I("sourceLocR",l-1).concat("inIdx.r"),m=_I("sourceLocG",l-1).concat("inIdx.g"),y=_I("sourceLocB",l-1).concat("inIdx.b"),b=_I("sourceLocA",l-1).concat("inIdx.a"),x="max"===n?"greaterThan":"lessThan",k=i?"":"\n          inIdx = round(vec4(getBestIndicesAChannel(".concat(_.join(),"),\n                             getBestIndicesAChannel(").concat(m.join(),"),\n                             getBestIndicesAChannel(").concat(y.join(),"),\n                             getBestIndicesAChannel(").concat(b.join(),")));"),w="vec4(\n            getAChannel(".concat(_.join(),"),\n            hasNextCol ? getAChannel(").concat(m.join(),") : 0.,\n            hasNextRow ? getAChannel(").concat(y.join(),") : 0.,\n            hasNextRow && hasNextCol ? getAChannel(").concat(b.join(),") : 0.)"),C=i?"":"\n      float getBestIndicesAChannel(".concat(g.join(),") {\n        return getChannel(getBestIndicesA(").concat(v.join(),"),\n                                          vec2(").concat(v.slice(-2).join(),"));\n      }");this.userCode="\n      float getAChannel(".concat(g.join(),") {\n        return getChannel(getA(").concat(v.join(),"),\n                               vec2(").concat(v.slice(-2).join(),"));\n      }\n      ").concat(C,"\n      void main() {\n        ").concat(c," coords = getOutputCoords();\n        bool hasNextCol = ").concat(f[h-1]," < ").concat(u[h-1]-1,";\n        bool hasNextRow = ").concat(f[h-2]," < ").concat(u[h-2]-1,";\n        ").concat(s,"\n        ivec4 srcIdx = ivec4(sourceLocR").concat(p,", sourceLocG").concat(p,",\n          sourceLocB").concat(p,", sourceLocA").concat(p,") * ").concat(r,";\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ").concat(w,";\n\n        for (int i = 0; i < ").concat(r,"; i++) {\n          inIdx = srcIdx;\n          ").concat(k,"\n          vec4 candidate = ").concat(w,";\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(").concat(x,"(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    ")},MI=function e(t){_classCallCheck(this,e),this.variableNames=["dy"],this.outputShape=t.inShape;var r=t.effectiveFilterHeight,a=t.effectiveFilterWidth;this.userCode="\n      const ivec2 pads = ivec2(".concat(r-1-t.padInfo.top,", ").concat(a-1-t.padInfo.left,");\n      const float avgMultiplier = float(").concat(1/(t.filterHeight*t.filterWidth),");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ").concat(r,";\n            wR += ").concat(t.dilationHeight,") {\n          float dyR = float(dyRCorner + wR) / ").concat(t.strideHeight,".0;\n\n          if (dyR < 0.0 || dyR >= ").concat(t.outHeight,".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ").concat(a,";\n            wC+= ").concat(t.dilationWidth,") {\n            float dyC = float(dyCCorner + wC) / ").concat(t.strideWidth,".0;\n\n            if (dyC < 0.0 || dyC >= ").concat(t.outWidth,".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    ")},DI=function e(t){_classCallCheck(this,e),this.variableNames=["dy"],this.outputShape=t.inShape;var r=t.effectiveFilterDepth,a=t.effectiveFilterHeight,n=t.effectiveFilterWidth;this.userCode="\n      const ivec3 pads = ivec3(".concat(r-1-t.padInfo.front,", ").concat(a-1-t.padInfo.top,", ").concat(n-1-t.padInfo.left,");\n      const float avgMultiplier = float(").concat(1/(t.filterDepth*t.filterHeight*t.filterWidth),");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ").concat(r,";\n            wD += ").concat(t.dilationDepth,") {\n          float dyD = float(dyDCorner + wD) / ").concat(t.strideDepth,".0;\n\n          if (dyD < 0.0 || dyD >= ").concat(t.outDepth,".0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ").concat(a,";\n              wR += ").concat(t.dilationHeight,") {\n            float dyR = float(dyRCorner + wR) / ").concat(t.strideHeight,".0;\n\n            if (dyR < 0.0 || dyR >= ").concat(t.outHeight,".0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ").concat(n,";\n                wC += ").concat(t.dilationWidth,") {\n              float dyC = float(dyCCorner + wC) / ").concat(t.strideWidth,".0;\n\n              if (dyC < 0.0 || dyC >= ").concat(t.outWidth,".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ")},OI="return (a < 0.) ? b * a : a;",LI=function e(t,r,a){_classCallCheck(this,e),this.variableNames=["A","B"],this.outputShape=g.assertAndGetBroadcastShape(r,a),this.userCode="\n      float binaryOperation(float a, float b) {\n        ".concat(t,"\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    ")},zI="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",BI=function e(t,r,n){var i=arguments.length>3&&void 0!==arguments[3]&&arguments[3];_classCallCheck(this,e),this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=g.assertAndGetBroadcastShape(r,n);var o=this.outputShape.length,s="";if(i)if(0===o||1===a.sizeFromShape(this.outputShape))s="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else if(s="\n          ".concat(RI(o)," coords = getOutputCoords();\n        "),1===o)s+="\n            result.y = (coords + 1) >= ".concat(this.outputShape[0]," ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ");else{var l=_I("coords",o);s+="\n            bool nextRowOutOfBounds =\n              (".concat(l[o-2]," + 1) >= ").concat(this.outputShape[o-2],";\n            bool nextColOutOfBounds =\n              (").concat(l[o-1]," + 1) >= ").concat(this.outputShape[o-1],";\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          ")}this.userCode="\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ".concat(t,"\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ").concat(s,"\n\n        setOutput(result);\n      }\n    ")},PI=function(){function e(t){_classCallCheck(this,e),this.variableNames=["A"],this.outputShape=t,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}return _createClass(e,[{key:"getCustomSetupFunc",value:function(e,t){var r=this;return function(a,n){null==r.minLoc&&(r.minLoc=a.getUniformLocationNoThrow(n,"minVal"),r.maxLoc=a.getUniformLocationNoThrow(n,"maxVal")),a.gl.uniform1f(r.minLoc,e),a.gl.uniform1f(r.maxLoc,t)}}}]),e}(),VI=function(){function e(t){_classCallCheck(this,e),this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}return _createClass(e,[{key:"getCustomSetupFunc",value:function(e,t){var r=this;return function(a,n){null==r.minLoc&&(r.minLoc=a.getUniformLocationNoThrow(n,"minVal"),r.maxLoc=a.getUniformLocationNoThrow(n,"maxVal")),a.gl.uniform1f(r.minLoc,e),a.gl.uniform1f(r.maxLoc,t)}}}]),e}(),UI=function e(t){_classCallCheck(this,e),this.variableNames=["real","imag"],this.outputShape=t,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "},WI=function e(t){_classCallCheck(this,e),this.variableNames=["x","dy"],this.outputShape=t.filterShape,this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ".concat(t.batchSize,"; b++) {\n          for (int yR = 0; yR < ").concat(t.outHeight,"; yR++) {\n            int xR = wR + yR * ").concat(t.strideHeight," - ").concat(t.padInfo.top,";\n\n            if (xR < 0 || xR >= ").concat(t.inHeight,") {\n              continue;\n            }\n\n            for (int yC = 0; yC < ").concat(t.outWidth,"; yC++) {\n              int xC = wC + yC * ").concat(t.strideWidth," - ").concat(t.padInfo.left,";\n\n              if (xC < 0 || xC >= ").concat(t.inWidth,") {\n                continue;\n              }\n\n              if (").concat("channelsLast"===t.dataFormat,") {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ")},GI=function e(t){_classCallCheck(this,e),this.variableNames=["dy","W"],this.outputShape=t.inShape;var r=t.filterHeight,a=t.filterWidth,n="channelsLast"===t.dataFormat;this.userCode="\n      const ivec2 pads = ivec2(".concat(r-1-t.padInfo.top,", ").concat(a-1-t.padInfo.left,");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[").concat(n?3:1,"];\n\n        ivec2 dyCorner = ivec2(coords[").concat(n?1:2,"], coords[").concat(n?2:3,"]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ").concat(r,"; wR++) {\n          float dyR = float(dyRCorner + wR) / ").concat(t.strideHeight,".0;\n\n          if (dyR < 0.0 || dyR >= ").concat(t.outHeight,".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ").concat(r," - 1 - wR;\n\n          for (int wC = 0; wC < ").concat(a,"; wC++) {\n            float dyC = float(dyCCorner + wC) / ").concat(t.strideWidth,".0;\n\n            if (dyC < 0.0 || dyC >= ").concat(t.outWidth,".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ").concat(a," - 1 - wC;\n\n            for (int d2 = 0; d2 < ").concat(t.outChannels,"; d2++) {\n\n              if (").concat(n,") {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ")},HI=function e(t){_classCallCheck(this,e),this.variableNames=["x","dy"],this.outputShape=t.filterShape,this.userCode="\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ".concat(t.batchSize,"; b++) {\n          for (int yF = 0; yF < ").concat(t.outDepth,"; yF++) {\n            int xF = wF + yF * ").concat(t.strideDepth," - ").concat(t.padInfo.front,";\n\n            if (xF < 0 || xF >= ").concat(t.inDepth,") {\n              continue;\n            }\n\n            for (int yR = 0; yR < ").concat(t.outHeight,"; yR++) {\n              int xR = wR + yR * ").concat(t.strideHeight," - ").concat(t.padInfo.top,";\n\n              if (xR < 0 || xR >= ").concat(t.inHeight,") {\n                continue;\n              }\n\n              for (int yC = 0; yC < ").concat(t.outWidth,"; yC++) {\n                int xC = wC + yC * ").concat(t.strideWidth," - ").concat(t.padInfo.left,";\n\n                if (xC < 0 || xC >= ").concat(t.inWidth,") {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ")},jI=function e(t){_classCallCheck(this,e),this.variableNames=["dy","W"],this.outputShape=t.inShape;var r=t.filterDepth,a=t.filterHeight,n=t.filterWidth;this.userCode="\n      const ivec3 pads = ivec3(".concat(r-1-t.padInfo.front,", ").concat(a-1-t.padInfo.top,", ").concat(n-1-t.padInfo.left,");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ").concat(r,"; wF++) {\n          float dyF = float(dyFCorner + wF) / ").concat(t.strideDepth,".0;\n\n          if (dyF < 0.0 || dyF >= ").concat(t.outDepth,".0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ").concat(r," - 1 - wF;\n\n          for (int wR = 0; wR < ").concat(a,"; wR++) {\n            float dyR = float(dyRCorner + wR) / ").concat(t.strideHeight,".0;\n\n            if (dyR < 0.0 || dyR >= ").concat(t.outHeight,".0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ").concat(a," - 1 - wR;\n\n            for (int wC = 0; wC < ").concat(n,"; wC++) {\n              float dyC = float(dyCCorner + wC) / ").concat(t.strideWidth,".0;\n\n              if (dyC < 0.0 || dyC >= ").concat(t.outWidth,".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ").concat(n," - 1 - wC;\n\n              for (int d2 = 0; d2 < ").concat(t.outChannels,"; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ")},qI=function e(t){_classCallCheck(this,e),this.variableNames=["x","dy"],this.outputShape=t.filterShape,this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ".concat(t.outChannels/t.inChannels," + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ").concat(t.batchSize,"; b++) {\n          for (int yR = 0; yR < ").concat(t.outHeight,"; yR++) {\n            int xR = wR + yR * ").concat(t.strideHeight," - ").concat(t.padInfo.top,";\n\n            if (xR < 0 || xR >= ").concat(t.inHeight,") {\n              continue;\n            }\n\n            for (int yC = 0; yC < ").concat(t.outWidth,"; yC++) {\n              int xC = wC + yC * ").concat(t.strideWidth," - ").concat(t.padInfo.left,";\n\n              if (xC < 0 || xC >= ").concat(t.inWidth,") {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ")},XI=function e(t){_classCallCheck(this,e),this.variableNames=["dy","W"],this.outputShape=t.inShape;var r=t.filterHeight,a=t.filterWidth,n=t.outChannels/t.inChannels;this.userCode="\n      const ivec2 pads = ivec2(".concat(r-1-t.padInfo.top,", ").concat(a-1-t.padInfo.left,");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ").concat(r,"; wR++) {\n          float dyR = float(dyRCorner + wR) / ").concat(t.strideHeight,".0;\n\n          if (dyR < 0.0 || dyR >= ").concat(t.outHeight,".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ").concat(r," - 1 - wR;\n\n          for (int wC = 0; wC < ").concat(a,"; wC++) {\n            float dyC = float(dyCCorner + wC) / ").concat(t.strideWidth,".0;\n\n            if (dyC < 0.0 || dyC >= ").concat(t.outWidth,".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ").concat(a," - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ").concat(n,"; dm++) {\n              int d2 = d1 * ").concat(n," + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ")},KI=function e(t){var r=arguments.length>1&&void 0!==arguments[1]&&arguments[1],a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,n=arguments.length>3&&void 0!==arguments[3]&&arguments[3];_classCallCheck(this,e),this.variableNames=["x","W"],this.outputShape=t.outShape;var i=t.padInfo.top,o=t.padInfo.left,s=t.strideHeight,l=t.strideWidth,u=t.dilationHeight,h=t.dilationWidth,c=t.filterHeight,f=t.filterWidth,d=4*Math.floor(t.inChannels/4),v=t.inChannels%4,p="channelsLast"===t.dataFormat,g=p?1:2,_=p?2:3,m=p?3:1,y="",b="";a&&(y=n?"float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ".concat(a,"\n        }"):"\n          float activation(float x) {\n            ".concat(a,"\n          }\n        "),b="result = activation(result);");var x=r?"result += getBiasAtOutCoords();":"";r&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),this.userCode="\n      ".concat(y,"\n\n      const ivec2 strides = ivec2(").concat(s,", ").concat(l,");\n      const ivec2 pads = ivec2(").concat(i,", ").concat(o,");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[").concat(m,"];\n\n        ivec2 xRCCorner =\n            ivec2(coords[").concat(g,"], coords[").concat(_,"]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ").concat(c,"; wR++) {\n          int xR = xRCorner + wR * ").concat(u,";\n\n          if (xR < 0 || xR >= ").concat(t.inHeight,") {\n            continue;\n          }\n\n          for (int wC = 0; wC < ").concat(f,"; wC++) {\n            int xC = xCCorner + wC * ").concat(h,";\n\n            if (xC < 0 || xC >= ").concat(t.inWidth,") {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ").concat(d,"; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (").concat(p,") {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (").concat(1===v,") {\n\n              if (").concat(p,") {\n                dotProd +=\n                    getX(batch, xR, xC, ").concat(d,") *\n                    getW(wR, wC, ").concat(d,", d2);\n              } else {\n                dotProd +=\n                    getX(batch, ").concat(d,", xR, xC) *\n                    getW(wR, wC, ").concat(d,", d2);\n              }\n\n            } else if (").concat(2===v,") {\n              vec2 wValues = vec2(\n                getW(wR, wC, ").concat(d,", d2),\n                getW(wR, wC, ").concat(d," + 1, d2)\n              );\n\n              if (").concat(p,") {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ").concat(d,"),\n                  getX(batch, xR, xC, ").concat(d," + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ").concat(d,", xR, xC),\n                  getX(batch, ").concat(d," + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (").concat(3===v,") {\n              vec3 wValues = vec3(\n                getW(wR, wC, ").concat(d,", d2),\n                getW(wR, wC, ").concat(d," + 1, d2),\n                getW(wR, wC, ").concat(d," + 2, d2)\n              );\n\n              if (").concat(p,") {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ").concat(d,"),\n                  getX(batch, xR, xC, ").concat(d," + 1),\n                  getX(batch, xR, xC, ").concat(d," + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ").concat(d,", xR, xC),\n                  getX(batch, ").concat(d," + 1, xR, xC),\n                  getX(batch, ").concat(d," + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ").concat(x,"\n        ").concat(b,"\n        setOutput(result);\n      }\n    ")},QI=function e(t){_classCallCheck(this,e),this.variableNames=["x","W"],this.outputShape=t.outShape;var r=t.padInfo.front,a=t.padInfo.top,n=t.padInfo.left,i=t.strideDepth,o=t.strideHeight,s=t.strideWidth,l=t.dilationDepth,u=t.dilationHeight,h=t.dilationWidth,c=t.filterDepth,f=t.filterHeight,d=t.filterWidth,v=4*Math.floor(t.inChannels/4),p=t.inChannels%4;this.userCode="\n      const ivec3 strides = ivec3(".concat(i,", ").concat(o,", ").concat(s,");\n      const ivec3 pads = ivec3(").concat(r,", ").concat(a,", ").concat(n,");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ").concat(c,"; wF++) {\n          int xF = xFCorner + wF * ").concat(l,";\n\n          if (xF < 0 || xF >= ").concat(t.inDepth,") {\n            continue;\n          }\n\n          for (int wR = 0; wR < ").concat(f,"; wR++) {\n            int xR = xRCorner + wR * ").concat(u,";\n\n            if (xR < 0 || xR >= ").concat(t.inHeight,") {\n              continue;\n            }\n\n            for (int wC = 0; wC < ").concat(d,"; wC++) {\n              int xC = xCCorner + wC * ").concat(h,";\n\n              if (xC < 0 || xC >= ").concat(t.inWidth,") {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ").concat(v,"; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (").concat(1===p,") {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ").concat(v,") *\n                  getW(wF, wR, wC, ").concat(v,", d2);\n              } else if (").concat(2===p,") {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ").concat(v,"),\n                  getX(batch, xF, xR, xC, ").concat(v," + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ").concat(v,", d2),\n                  getW(wF, wR, wC, ").concat(v," + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (").concat(3===p,") {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ").concat(v,"),\n                  getX(batch, xF, xR, xC, ").concat(v," + 1),\n                  getX(batch, xF, xR, xC, ").concat(v," + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ").concat(v,", d2),\n                  getW(wF, wR, wC, ").concat(v," + 1, d2),\n                  getW(wF, wR, wC, ").concat(v," + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ")},YI=function e(t){var r=arguments.length>1&&void 0!==arguments[1]&&arguments[1],a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,n=arguments.length>3&&void 0!==arguments[3]&&arguments[3];_classCallCheck(this,e),this.variableNames=["x","W"],this.outputShape=t.outShape;var i=t.inHeight,o=t.inWidth,s=t.padInfo.top,l=t.padInfo.left,u=t.strideHeight,h=t.strideWidth,c=t.dilationHeight,f=t.dilationWidth,d=t.filterHeight,v=t.filterWidth,p=t.outChannels/t.inChannels,g="",_="";a&&(g=n?"float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ".concat(a,"\n        }"):"\n          float activation(float x) {\n            ".concat(a,"\n          }\n        "),_="result = activation(result);");var m=r?"result += getBiasAtOutCoords();":"";r&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),this.userCode="\n      ".concat(g,"\n\n      const ivec2 strides = ivec2(").concat(u,", ").concat(h,");\n      const ivec2 pads = ivec2(").concat(s,", ").concat(l,");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ").concat(p,";\n        int q = d2 - d1 * ").concat(p,";\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ").concat(d,"; wR++) {\n          int xR = xRCorner + wR * ").concat(c,";\n\n          if (xR < 0 || xR >= ").concat(i,") {\n            continue;\n          }\n\n          for (int wC = 0; wC < ").concat(v,"; wC++) {\n            int xC = xCCorner + wC * ").concat(f,";\n\n            if (xC < 0 || xC >= ").concat(o,") {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ").concat(m,"\n        ").concat(_,"\n        setOutput(result);\n      }\n    ")},JI=function e(t){var r=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,i=arguments.length>3&&void 0!==arguments[3]&&arguments[3];_classCallCheck(this,e),this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.outShape;for(var o=t.inHeight,s=t.inWidth,l=t.padInfo.top,u=t.padInfo.left,h=t.strideHeight,c=t.strideWidth,f=t.dilationHeight,d=t.dilationWidth,v=t.filterHeight,p=t.filterWidth,g=p,_="int xR; int xC; int xCOffset;",m=0;m<v;m++)for(var y=0;y<p;y++)_+="\n          vec4 xTexelR".concat(m,"C").concat(2*y," = vec4(0.);\n          vec4 wR").concat(m,"C").concat(y," = vec4(0.);\n          vec4 xR").concat(m,"C").concat(y," = vec4(0.);");for(var b=0;b<v;b++)for(var x=0;x<g;x++){var k=2*x;if(_+="\n          xR = xRCorner + ".concat(b*f,";\n          xC = xCCorner + ").concat(k*d,";\n        "),1===c){if(k<p&&(_+=u%2==1?"\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < ".concat(o," && xCOffset >= 0 && xCOffset < ").concat(s,") {\n                  xTexelR").concat(b,"C").concat(k," = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ").concat(s,") {\n                    xTexelR").concat(b,"C").concat(k,".zw = vec2(0.);\n                  }\n                } else {\n                  xTexelR").concat(b,"C").concat(k," = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < ").concat(o," && xCOffset >= 0 && xCOffset < ").concat(s,") {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ").concat(s,") {\n                    previous.zw = vec2(0.);\n                  }\n\n                  xR").concat(b,"C").concat(k," = vec4(previous.zw, xTexelR").concat(b,"C").concat(k,".xy);\n                } else {\n                  xR").concat(b,"C").concat(k," = vec4(0, 0, xTexelR").concat(b,"C").concat(k,".xy);\n                }\n              "):"\n                if(xR >= 0 && xR < ".concat(o," && xC >= 0 && xC < ").concat(s,") {\n                  xTexelR").concat(b,"C").concat(k," = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR").concat(b,"C").concat(k," = vec4(0.);\n                }\n\n                xR").concat(b,"C").concat(k," = xTexelR").concat(b,"C").concat(k,";\n              "),k+1<p)){var w=u%2==0?a.nearestLargerEven(d):d;d%2==0&&u%2==1||d%2!=0&&u%2!=1?(_+="\n                  xCOffset = xC + ".concat(u%2," + ").concat(w,";\n\n                  if(xR >= 0 && xR < ").concat(o," &&\n                    xCOffset >= 0 && xCOffset < ").concat(s,") {\n                    xTexelR").concat(b,"C").concat(k+2," = getX(batch, xR, xCOffset, d1);\n                  }\n                "),d>1&&(_+="\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < ".concat(o," &&\n                      xCOffset >= 0 && xCOffset < ").concat(s,") {\n                      xTexelR").concat(b,"C").concat(k," = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR").concat(b,"C").concat(k," = vec4(0.);\n                    }\n                  ")),_+="\n                  xR".concat(b,"C").concat(k+1," = vec4(\n                    xTexelR").concat(b,"C").concat(k,".zw, xTexelR").concat(b,"C").concat(k+2,".xy);\n                ")):_+="\n                  xCOffset = xC + ".concat(w,";\n\n                  if(xR >= 0 && xR < ").concat(o," &&\n                    xCOffset >= 0 && xCOffset < ").concat(s,") {\n                    xTexelR").concat(b,"C").concat(k+2," = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR").concat(b,"C").concat(k+1," = xTexelR").concat(b,"C").concat(k+2,";\n                ")}}else k<p&&(_+="\n              if(xR >= 0 && xR < ".concat(o,") {\n            "),u%2==1?(_+="\n                xCOffset = xC + 1 - ".concat(c,";\n                if(xCOffset >= 0 && xCOffset < ").concat(s,") {\n                  xTexelR").concat(b,"C").concat(k," = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR").concat(b,"C").concat(k," = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ").concat(s,") {\n                  xTexelR").concat(b,"C").concat(k+2," = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR").concat(b,"C").concat(k+2," = vec4(0.);\n                }\n\n                xR").concat(b,"C").concat(k," = vec4(\n                  xTexelR").concat(b,"C").concat(k,".zw, xTexelR").concat(b,"C").concat(k+2,".zw);\n              "),k+1<p&&(_+="\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + ".concat(c,";\n                  if(xCOffset >= 0 && xCOffset < ").concat(s,") {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR").concat(b,"C").concat(k+1," = vec4(xTexelR").concat(b,"C").concat(k+2,".xy, final.xy);\n                "))):(_+="\n                if(xC >= 0 && xC < ".concat(s,") {\n                  xTexelR").concat(b,"C").concat(k," = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR").concat(b,"C").concat(k," = vec4(0.);\n                }\n\n                xCOffset = xC + ").concat(c,";\n                if(xCOffset >= 0 && xCOffset < ").concat(s,") {\n                  xTexelR").concat(b,"C").concat(k+2," = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR").concat(b,"C").concat(k+2," = vec4(0.);\n                }\n\n                xR").concat(b,"C").concat(k," = vec4(\n                  xTexelR").concat(b,"C").concat(k,".xy, xTexelR").concat(b,"C").concat(k+2,".xy);\n              "),k+1<p&&(_+="\n                  xR".concat(b,"C").concat(k+1," = vec4(\n                    xTexelR").concat(b,"C").concat(k,".zw, xTexelR").concat(b,"C").concat(k+2,".zw);\n                "))),_+="}");k<p&&(_+="\n            vec4 wTexelR".concat(b,"C").concat(k," = getW(").concat(b,", ").concat(k,", d1, q);\n            wR").concat(b,"C").concat(k," = vec4(wTexelR").concat(b,"C").concat(k,".xz, wTexelR").concat(b,"C").concat(k,".xz);\n          "),k+1<p&&(_+="\n              vec4 wTexelR".concat(b,"C").concat(k+1," = getW(").concat(b,", ").concat(k+1,", d1, q);\n              wR").concat(b,"C").concat(k+1," =\n                vec4(wTexelR").concat(b,"C").concat(k+1,".xz, wTexelR").concat(b,"C").concat(k+1,".xz);")))}for(var C=0;C<v;C++)for(var T=0;T<p;T++)_+="dotProd += xR".concat(C,"C").concat(T," * wR").concat(C,"C").concat(T,";");var S="",I="";n&&(S=i?"vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ".concat(n,"\n        }"):"vec4 activation(vec4 x) {\n          ".concat(n,"\n        }"),I="result = activation(result);");var A=r?"result += getBiasAtOutCoords();":"";r&&this.variableNames.push("bias"),i&&this.variableNames.push("preluActivationWeights"),this.userCode="\n      ".concat(S,"\n\n      const ivec2 strides = ivec2(").concat(h,", ").concat(c,");\n      const ivec2 pads = ivec2(").concat(l,", ").concat(u,");\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        ").concat(_,"\n\n        vec4 result = dotProd;\n        ").concat(A,"\n        ").concat(I,"\n        setOutput(result);\n      }\n    ")},ZI=function e(t,r,a,n,i){_classCallCheck(this,e),this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];var o=_slicedToArray(t,4),s=o[0],l=o[1],u=o[2],h=o[3],c=_slicedToArray(r,1)[0],f=_slicedToArray(a,2),d=f[0],v=f[1];this.outputShape=[c,d,v,h];var p="bilinear"===n?1:0,g=l-1+".0",_=u-1+".0",m=_slicedToArray(d>1?[""+(l-1)/(d-1),"(y2-y1) * height_ratio","y1*".concat(g," + float(y)*(height_scale)")]:["0.0","0.0","0.5 * (y1+y2) * "+g],3),y=m[0],b=m[1],x=m[2],k=_slicedToArray(v>1?[""+(u-1)/(v-1),"(x2-x1) * width_ratio","x1*".concat(_," + float(x)*(width_scale)")]:["0.0","0.0","0.5 * (x1+x2) * "+_],3),w=k[0],C=k[1],T=k[2];this.userCode="\n      const float height_ratio = float(".concat(y,");\n      const float width_ratio = float(").concat(w,");\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ").concat(s,") {\n          return;\n        }\n\n        float height_scale = ").concat(b,";\n        float width_scale = ").concat(C,";\n\n        float in_y = ").concat(x,";\n        if( in_y < 0.0 || in_y > ").concat(g," ) {\n          setOutput(float(").concat(i,"));\n          return;\n        }\n        float in_x = ").concat(T,";\n        if( in_x < 0.0 || in_x > ").concat(_," ) {\n          setOutput(float(").concat(i,"));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(").concat(p," == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    ")},$I=function(){function e(t,r,a){_classCallCheck(this,e),this.variableNames=["x"],this.outputShape=t;var n=t.length,i=r?"0.0":"getX(".concat(eA(n,"coords"),")"),o=t[t.length-1],s="",l="";r?(s=a?"end != "+(o-1):"end != 0",l=a?"end + 1":"end - 1"):(s=a?"end + pow2 < "+o:"end >= pow2",l=a?"end + pow2":"end - pow2"),this.userCode="\n      uniform float index;\n      void main() {\n        ".concat(RI(n)," coords = getOutputCoords();\n        int end = ").concat(tA(n,"coords"),";\n        float val = ").concat(i,";\n        int pow2 = int(pow(2.0, index));\n        if (").concat(s,") {\n          int idx = ").concat(l,";\n          ").concat(tA(n,"coords")," = idx;\n          val += getX(").concat(eA(n,"coords"),");\n        }\n        setOutput(val);\n      }\n    ")}return _createClass(e,[{key:"getCustomSetupFunc",value:function(e){var t=this;return function(r,a){null==t.index&&(t.index=r.getUniformLocation(a,"index")),r.gl.uniform1f(t.index,e)}}}]),e}();function eA(e,t){if(1===e)return""+t;if(2===e)return"".concat(t,".x, ").concat(t,".y");if(3===e)return"".concat(t,".x, ").concat(t,".y, ").concat(t,".z");if(4===e)return"".concat(t,".x, ").concat(t,".y, ").concat(t,".z, ").concat(t,".w");throw Error("Cumulative sum for rank ".concat(e," is not yet supported"))}function tA(e,t){if(1===e)return""+t;if(2===e)return t+".y";if(3===e)return t+".z";if(4===e)return t+".w";throw Error("Cumulative sum for rank ".concat(e," is not yet supported"))}var rA=function e(t){_classCallCheck(this,e),this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=xS.DENSE;var r=AS(t),a=mI();this.outputShape=t,this.userCode="\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ".concat(yI(["r","c","d"],t),"\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(").concat(r[0],", ").concat(r[1],"));\n        int index = 4 * (resTexRC.x * ").concat(r[1]," + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ").concat(a.output," = result;\n      }\n    ")},aA=function e(t){_classCallCheck(this,e),this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=xS.DENSE;var r=AS(t),a=mI();this.outputShape=t,this.userCode="\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ".concat(yI(["r","c","d"],t),"\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(").concat(r[0],", ").concat(r[1],"));\n        int index = 4 * (resTexRC.x * ").concat(r[1]," + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ").concat(a.output," = result;\n      }\n    ")},nA=function(){function e(t,r,a){_classCallCheck(this,e),this.variableNames=["x"],this.outputShape=[],this.outputShape=t,this.blockSize=r,this.dataFormat=a,this.userCode="\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ".concat(this.getHeightCoordString(),";\n      int w = ").concat(this.getWidthCoordString(),";\n      int d = ").concat(this.getDepthCoordString(),";\n\n      int in_h = h / ").concat(r,";\n      int offset_h = imod(h, ").concat(r,");\n      int in_w = w / ").concat(r,";\n      int offset_w = imod(w, ").concat(r,");\n      int offset_d = (offset_h * ").concat(r," + offset_w) *\n        ").concat(this.getOutputDepthSize(),";\n      int in_d = d + offset_d;\n\n      float result = ").concat(this.getInputSamplingString(),";\n      setOutput(result);\n    }\n  ")}return _createClass(e,[{key:"getHeightCoordString",value:function(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}},{key:"getWidthCoordString",value:function(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}},{key:"getDepthCoordString",value:function(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}},{key:"getOutputDepthSize",value:function(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}},{key:"getInputSamplingString",value:function(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}]),e}(),iA=function e(t){_classCallCheck(this,e),this.variableNames=["X"],this.outputShape=[t,t],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "},oA=function e(t){_classCallCheck(this,e),this.variableNames=["A"],this.outTexUsage=kS.DOWNLOAD;var r=mI();this.outputShape=t,this.userCode="\n      ".concat(xI,"\n\n      void main() {\n        float x = getAAtOutCoords();\n        ").concat(r.output," = encode_float(x);\n      }\n    ")},sA=function e(t){_classCallCheck(this,e),this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=kS.DOWNLOAD;var r=mI();this.outputShape=t,this.userCode="\n      ".concat(xI,"\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ").concat(r.output," = encode_float(x);\n      }\n    ")},lA=function e(t,r){var a=arguments.length>2&&void 0!==arguments[2]&&arguments[2];_classCallCheck(this,e),this.variableNames=["A"];var n=mI(),i=_slicedToArray(r,2),o=i[0],s=i[1];this.outputShape=t;var l="result";a&&(l="floor(result * 255. + 0.5)"),this.userCode="\n      ".concat(bI(t),"\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / ").concat(s,";\n        int c = imod(flatIndex, ").concat(s,");\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(").concat(s,".0, ").concat(o,".0);\n        vec4 values = ").concat(n.texture2D,"(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ").concat(n.output," = vec4(").concat(l,", 0., 0., 0.);\n      }\n    ")},uA=function e(t,r){var a=arguments.length>2&&void 0!==arguments[2]&&arguments[2];_classCallCheck(this,e),this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;var n=mI(),i=_slicedToArray(r,2),o=i[0],s=i[1];this.outputShape=t;var l="",u="result";a&&(u="floor(result * 255. + 0.5)");for(var h=0;h<=1;h++)for(var c=0;c<=1;c++){var f=2*h+c;l+="\n          localCoords = coords;\n          if(localCoords[2] + ".concat(c," < ").concat(t[2],") {\n            localCoords[2] += ").concat(c,";\n            if(localCoords[1] + ").concat(h," < ").concat(t[1],") {\n              localCoords[1] += ").concat(h,";\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ").concat(s,";\n              c = imod(flatIndex, ").concat(s,");\n              uv = (vec2(c, r) + halfCR) / vec2(").concat(s,".0, ").concat(o,".0);\n              values = ").concat(n.texture2D,"(A, uv);\n\n              if(offset == 0) {\n                result[").concat(f,"] = values[0];\n              } else if(offset == 1) {\n                result[").concat(f,"] = values[1];\n              } else if(offset == 2) {\n                result[").concat(f,"] = values[2];\n              } else {\n                result[").concat(f,"] = values[3];\n              }\n            }\n          }\n        ")}this.userCode="\n      ".concat(bI(t),"\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ").concat(l,"\n\n        ").concat(n.output," = ").concat(u,";\n      }\n    ")},hA=function(){function e(t,r){_classCallCheck(this,e),this.outputShape=[],this.variableNames=["x"],this.outputShape=t,this.userCode="\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}return _createClass(e,[{key:"getCustomSetupFunc",value:function(e){var t=this;return function(r,a){null==t.valueLoc&&(t.valueLoc=r.getUniformLocationNoThrow(a,"value")),r.gl.uniform1f(t.valueLoc,e)}}}]),e}(),cA=function e(t,r,a){_classCallCheck(this,e),this.variableNames=["A","indices"];var n=t.slice();n[a]=r,this.outputShape=n,this.rank=n.length;var i=RI(this.rank),o=function(e,t){var r=e.length;if(r>4)throw Error("Gather for rank ".concat(r," is not yet supported"));if(1===r)return"int(getIndices(resRC))";for(var a=["resRC.x","resRC.y","resRC.z","resRC.w"],n=[],i=0;i<e.length;i++)n.push(i===t?"int(getIndices(".concat(a[i],"))"):""+a[i]);return n.join()}(t,a);this.userCode="\n      void main() {\n        ".concat(i," resRC = getOutputCoords();\n        setOutput(getA(").concat(o,"));\n      }\n    ")},fA=function e(t,r,a){_classCallCheck(this,e),this.sliceDim=t,this.strides=r,this.variableNames=["x","indices"],this.outputShape=a;var n=RI(r.length),i=RI(a.length);this.userCode="\n        ".concat(n," strides = ").concat(n,"(").concat(this.strides,");\n         void main() {\n          ").concat(i," coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ").concat(this.sliceDim,"; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ").concat(this.sliceDim>1?"strides[j]":"strides",";\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      ")};function dA(e,t,r,a,n,i){!function(e,t){var r=ht().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0)throw new Error("Requested texture size [".concat(e,"x").concat(t,"] is invalid."));if(e>r||t>r)throw new Error("Requested texture size [".concat(e,"x").concat(t,"] greater than WebGL maximum on this browser / GPU [").concat(r,"x").concat(r,"]."))}(t,r);var o=function(e){return WS(e,(function(){return e.createTexture()}),"Unable to create WebGLTexture.")}(e),s=e.TEXTURE_2D;return ES(e,(function(){return e.bindTexture(s,o)})),ES(e,(function(){return e.texParameteri(s,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE)})),ES(e,(function(){return e.texParameteri(s,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE)})),ES(e,(function(){return e.texParameteri(s,e.TEXTURE_MIN_FILTER,e.NEAREST)})),ES(e,(function(){return e.texParameteri(s,e.TEXTURE_MAG_FILTER,e.NEAREST)})),ES(e,(function(){return e.texImage2D(s,0,a,t,r,0,n,i,null)})),ES(e,(function(){return e.bindTexture(e.TEXTURE_2D,null)})),o}function vA(e){return e.internalFormatFloat}function pA(e){return e.internalFormatHalfFloat}function gA(e){return e.downloadTextureFormat}function _A(e){return e.internalFormatPackedFloat}function mA(e){return e.internalFormatPackedHalfFloat}var yA=function(){function e(t){_classCallCheck(this,e),this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];var r=ht().getNumber("WEBGL_VERSION");null!=t?(this.gl=t,function(e,t){CS[e]=t}(r,t)):this.gl=SS(r);var a="WEBGL_color_buffer_float";if(1===ht().getNumber("WEBGL_VERSION")){var n="OES_texture_half_float";if(this.textureFloatExtension=MS(this.gl,"OES_texture_float"),KS(this.gl,n))this.textureHalfFloatExtension=MS(this.gl,n);else if(ht().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(a),KS(this.gl,"EXT_color_buffer_half_float"))this.colorBufferHalfFloatExtension=MS(this.gl,"EXT_color_buffer_half_float");else if(ht().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(a="EXT_color_buffer_float",KS(this.gl,a))this.colorBufferFloatExtension=this.gl.getExtension(a);else{if(!KS(this.gl,"EXT_color_buffer_half_float"))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension("EXT_color_buffer_half_float")}this.vertexBuffer=function(e){return function(e,t){var r=WS(e,(function(){return e.createBuffer()}),"Unable to create WebGLBuffer");return ES(e,(function(){return e.bindBuffer(e.ARRAY_BUFFER,r)})),ES(e,(function(){return e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW)})),r}(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}(this.gl),this.indexBuffer=function(e){return function(e,t){var r=WS(e,(function(){return e.createBuffer()}),"Unable to create WebGLBuffer");return ES(e,(function(){return e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,r)})),ES(e,(function(){return e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW)})),r}(e,new Uint16Array([0,1,2,2,1,3]))}(this.gl),this.framebuffer=function(e){return WS(e,(function(){return e.createFramebuffer()}),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=NS(this.gl,this.textureHalfFloatExtension)}var t;return _createClass(e,[{key:"dispose",value:function(){var e=this;if(!this.disposed){null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");var t=this.gl;ES(t,(function(){return t.finish()})),ES(t,(function(){return t.bindFramebuffer(t.FRAMEBUFFER,null)})),ES(t,(function(){return t.deleteFramebuffer(e.framebuffer)})),ES(t,(function(){return t.bindBuffer(t.ARRAY_BUFFER,null)})),ES(t,(function(){return t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null)})),ES(t,(function(){return t.deleteBuffer(e.indexBuffer)})),this.disposed=!0}}},{key:"createFloat32MatrixTexture",value:function(e,t){return this.throwIfDisposed(),function(e,t,r,a){var n=_slicedToArray(IS(t,r),2);return dA(e,n[0],n[1],vA(a),a.textureFormatFloat,e.FLOAT)}(this.gl,e,t,this.textureConfig)}},{key:"createFloat16MatrixTexture",value:function(e,t){return this.throwIfDisposed(),function(e,t,r,a){var n=_slicedToArray(IS(t,r),2);return dA(e,n[0],n[1],pA(a),a.textureFormatFloat,a.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}},{key:"createUnsignedBytesMatrixTexture",value:function(e,t){return this.throwIfDisposed(),function(e,t,r,a){var n=_slicedToArray(IS(t,r),2);return dA(e,n[0],n[1],gA(a),e.RGBA,e.UNSIGNED_BYTE)}(this.gl,e,t,this.textureConfig)}},{key:"uploadPixelDataToTexture",value:function(e,t){this.throwIfDisposed(),function(e,t,r){ES(e,(function(){return e.bindTexture(e.TEXTURE_2D,t)})),r.data instanceof Uint8Array?ES(e,(function(){return e.texImage2D(e.TEXTURE_2D,0,e.RGBA,r.width,r.height,0,e.RGBA,e.UNSIGNED_BYTE,r.data)})):ES(e,(function(){return e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,r)})),ES(e,(function(){return e.bindTexture(e.TEXTURE_2D,null)}))}(this.gl,e,t)}},{key:"uploadDenseMatrixToTexture",value:function(e,t,r,a){this.throwIfDisposed(),function(e,t,r,a,n,i){var o,s,l;ES(e,(function(){return e.bindTexture(e.TEXTURE_2D,t)})),n instanceof Uint8Array?(o=new Uint8Array(r*a*4),s=e.UNSIGNED_BYTE,l=e.RGBA):(o=new Float32Array(r*a*4),s=e.FLOAT,l=i.internalFormatPackedFloat),o.set(n),ES(e,(function(){return e.texImage2D(e.TEXTURE_2D,0,l,r,a,0,e.RGBA,s,o)})),ES(e,(function(){return e.bindTexture(e.TEXTURE_2D,null)}))}(this.gl,e,t,r,a,this.textureConfig)}},{key:"createFloat16PackedMatrixTexture",value:function(e,t){return this.throwIfDisposed(),function(e,t,r,a){var n=_slicedToArray(RS(t,r),2);return dA(e,n[0],n[1],mA(a),e.RGBA,a.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}},{key:"createPackedMatrixTexture",value:function(e,t){return this.throwIfDisposed(),function(e,t,r,a){var n=_slicedToArray(RS(t,r),2);return dA(e,n[0],n[1],_A(a),e.RGBA,e.FLOAT)}(this.gl,e,t,this.textureConfig)}},{key:"deleteMatrixTexture",value:function(e){var t=this;this.throwIfDisposed(),this.outputTexture===e&&(VS(this.gl,this.framebuffer),this.outputTexture=null),ES(this.gl,(function(){return t.gl.deleteTexture(e)}))}},{key:"downloadByteEncodedFloatMatrixFromOutputTexture",value:function(e,t,r){var a=this;return this.downloadMatrixDriver(e,(function(){return function(e,t,r,a){var n=_slicedToArray(IS(t,r),2),i=n[0],o=n[1],s=new Uint8Array(t*r*4);return ES(e,(function(){return e.readPixels(0,0,i,o,a.downloadTextureFormat,e.UNSIGNED_BYTE,s)})),new Float32Array(s.buffer)}(a.gl,t,r,a.textureConfig)}))}},{key:"downloadPackedMatrixFromBuffer",value:function(e,t,r,a,n,i){return function(e,t,r,a,n,i,o,s){var l=e,u=new Float32Array(function(e,t){var r=_slicedToArray(RS(e,t),2);return r[0]*r[1]*4}(i,o));return l.bindBuffer(l.PIXEL_PACK_BUFFER,t),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}(this.gl,e,0,0,0,n,i)}},{key:"downloadFloat32MatrixFromBuffer",value:function(e,t){return function(e,t,r){var a=e,n=new Float32Array(r);return a.bindBuffer(a.PIXEL_PACK_BUFFER,t),a.getBufferSubData(a.PIXEL_PACK_BUFFER,0,n),a.bindBuffer(a.PIXEL_PACK_BUFFER,null),n}(this.gl,e,t)}},{key:"createBufferFromTexture",value:function(e,t,r){this.bindTextureToFrameBuffer(e);var a=function(e,t,r,a){var n=e.createBuffer();ES(e,(function(){return e.bindBuffer(e.PIXEL_PACK_BUFFER,n)}));var i=16*t*r;return ES(e,(function(){return e.bufferData(e.PIXEL_PACK_BUFFER,i,e.STREAM_READ)})),ES(e,(function(){return e.readPixels(0,0,r,t,e.RGBA,e.FLOAT,0)})),ES(e,(function(){return e.bindBuffer(e.PIXEL_PACK_BUFFER,null)})),n}(this.gl,t,r);return this.unbindTextureToFrameBuffer(),a}},{key:"createAndWaitForFence",value:function(){var e=this.createFence(this.gl);return this.pollFence(e)}},{key:"createFence",value:function(e){var t,r,a=this;if(ht().getBool("WEBGL_FENCE_API_ENABLED")){var n=e,i=n.fenceSync(n.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),r=function(){var e=n.clientWaitSync(i,0,0);return e===n.ALREADY_SIGNALED||e===n.CONDITION_SATISFIED},t=i}else ht().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),r=function(){return a.isQueryAvailable(t,ht().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}):r=function(){return!0};return{query:t,isFencePassed:r}}},{key:"downloadMatrixFromPackedTexture",value:function(e,t,r){var a=this;return this.downloadMatrixDriver(e,(function(){return function(e,t,r){var a=new Float32Array(t*r*4);return ES(e,(function(){return e.readPixels(0,0,r,t,e.RGBA,e.FLOAT,a)})),a}(a.gl,t,r)}))}},{key:"createProgram",value:function(e){this.throwIfDisposed();var t=this.gl,r=function(e,t){var r=WS(e,(function(){return e.createShader(e.FRAGMENT_SHADER)}),"Unable to create fragment WebGLShader.");if(ES(e,(function(){return e.shaderSource(r,t)})),ES(e,(function(){return e.compileShader(r)})),!1===e.getShaderParameter(r,e.COMPILE_STATUS))throw function(e,t){var r=LS.exec(t);if(null==r)return console.log("Couldn't parse line number in error: "+t),void console.log(e);for(var n=+r[1],i=e.split("\n"),o=i.length.toString().length+2,s=i.map((function(e,t){return a.rightPad((t+1).toString(),o)+e})),l=0,u=0;u<s.length;u++)l=Math.max(s[u].length,l);var h=s.slice(0,n-1),c=s.slice(n-1,n),f=s.slice(n);console.log(h.join("\n")),console.log(t.split("\n")[0]),console.log("%c "+a.rightPad(c[0],l),"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(f.join("\n"))}(t,e.getShaderInfoLog(r)),new Error("Failed to compile fragment shader.");return r}(t,e),n=function(e){var t=mI();return function(e,t){var r=WS(e,(function(){return e.createShader(e.VERTEX_SHADER)}),"Unable to create vertex WebGLShader.");if(ES(e,(function(){return e.shaderSource(r,t)})),ES(e,(function(){return e.compileShader(r)})),!1===e.getShaderParameter(r,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(r)),new Error("Failed to compile vertex shader.");return r}(e,"".concat(t.version,"\n    precision highp float;\n    ").concat(t.attribute," vec3 clipSpacePos;\n    ").concat(t.attribute," vec2 uv;\n    ").concat(t.varyingVs," vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }"))}(t),i=function(e){return WS(e,(function(){return e.createProgram()}),"Unable to create WebGLProgram.")}(t);return ES(t,(function(){return t.attachShader(i,n)})),ES(t,(function(){return t.attachShader(i,r)})),function(e,t){if(ES(e,(function(){return e.linkProgram(t)})),!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(t,i),this.debug&&zS(t,i),this.vertexAttrsAreBound||(this.setProgram(i),this.vertexAttrsAreBound=function(e,t,r){return ES(e,(function(){return e.bindBuffer(e.ARRAY_BUFFER,r)})),BS(e,t,"clipSpacePos",r,3,20,0)&&BS(e,t,"uv",r,2,20,12)}(t,this.program,this.vertexBuffer)),i}},{key:"deleteProgram",value:function(e){var t=this;this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&ES(this.gl,(function(){return t.gl.deleteProgram(e)}))}},{key:"setProgram",value:function(e){var t=this;this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&zS(this.gl,this.program),ES(this.gl,(function(){return t.gl.useProgram(e)}))}},{key:"getUniformLocation",value:function(e,t){var r=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];return this.throwIfDisposed(),r?function(e,t,r){return WS(e,(function(){return e.getUniformLocation(t,r)}),'uniform "'+r+'" not present in program.')}(this.gl,e,t):function(e,t,r){return e.getUniformLocation(t,r)}(this.gl,e,t)}},{key:"getAttributeLocation",value:function(e,t){var r=this;return this.throwIfDisposed(),ES(this.gl,(function(){return r.gl.getAttribLocation(e,t)}))}},{key:"getUniformLocationNoThrow",value:function(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}},{key:"setInputMatrixTexture",value:function(e,t,r){this.throwIfDisposed(),this.throwIfNoProgram(),function(e,t,r,a){ES(e,(function(){return function(e,t,r){(function(e,t){var r=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,a=t+e.TEXTURE0;if(a<e.TEXTURE0||a>r)throw new Error("textureUnit must be in [gl.TEXTURE0, gl.TEXTURE".concat(r,"]."))})(e,r),ES(e,(function(){return e.activeTexture(e.TEXTURE0+r)})),ES(e,(function(){return e.bindTexture(e.TEXTURE_2D,t)}))}(e,t,a)})),ES(e,(function(){return e.uniform1i(r,a)}))}(this.gl,e,t,r)}},{key:"setOutputMatrixTexture",value:function(e,t,r){this.setOutputMatrixTextureDriver(e,r,t)}},{key:"setOutputPackedMatrixTexture",value:function(e,t,r){this.throwIfDisposed();var a=_slicedToArray(RS(t,r),2),n=a[0],i=a[1];this.setOutputMatrixTextureDriver(e,n,i)}},{key:"setOutputMatrixWriteRegion",value:function(e,t,r,a){this.setOutputMatrixWriteRegionDriver(r,e,a,t)}},{key:"setOutputPackedMatrixWriteRegion",value:function(e,t,r,a){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}},{key:"debugValidate",value:function(){null!=this.program&&zS(this.gl,this.program),US(this.gl)}},{key:"executeProgram",value:function(){this.throwIfDisposed(),this.throwIfNoProgram();var e=this.gl;this.debug&&this.debugValidate(),ES(e,(function(){return e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0)}))}},{key:"blockUntilAllProgramsCompleted",value:function(){var e=this;this.throwIfDisposed(),ES(this.gl,(function(){return e.gl.finish()}))}},{key:"getQueryTimerExtension",value:function(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=MS(this.gl,2===ht().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}},{key:"getQueryTimerExtensionWebGL2",value:function(){return this.getQueryTimerExtension()}},{key:"getQueryTimerExtensionWebGL1",value:function(){return this.getQueryTimerExtension()}},{key:"beginQuery",value:function(){if(2===ht().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){var e=this.gl,t=this.getQueryTimerExtensionWebGL2(),r=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,r),r}var a=this.getQueryTimerExtensionWebGL1(),n=a.createQueryEXT();return a.beginQueryEXT(a.TIME_ELAPSED_EXT,n),n}},{key:"endQuery",value:function(){if(2!==ht().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){var e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}else{var t=this.gl,r=this.getQueryTimerExtensionWebGL2();t.endQuery(r.TIME_ELAPSED_EXT)}}},{key:"waitForQueryAndGetTime",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(t){var r=this;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,a.repeatedTry((function(){return r.disposed||r.isQueryAvailable(t,ht().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}));case 2:return e.abrupt("return",this.getQueryTime(t,ht().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")));case 3:case"end":return e.stop()}}),e,this)}))),function(e){return t.apply(this,arguments)})},{key:"getQueryTime",value:function(e,t){if(0===t)return null;if(2===t){var r=this.gl;return r.getQueryParameter(e,r.QUERY_RESULT)/1e6}var a=this.getQueryTimerExtensionWebGL1();return a.getQueryObjectEXT(e,a.QUERY_RESULT_EXT)/1e6}},{key:"isQueryAvailable",value:function(e,t){if(0===t)return!0;if(2===t){var r=this.gl,a=this.getQueryTimerExtensionWebGL2(),n=r.getQueryParameter(e,r.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(a.GPU_DISJOINT_EXT)),n&&!this.disjoint}var i=this.getQueryTimerExtensionWebGL1(),o=i.getQueryObjectEXT(e,i.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(i.GPU_DISJOINT_EXT)),o&&!this.disjoint}},{key:"pollFence",value:function(e){var t=this;return new Promise((function(r){t.addItemToPoll((function(){return e.isFencePassed()}),(function(){return r()}))}))}},{key:"pollItems",value:function(){for(var e=function(e){for(var t=0;t<e.length&&e[t]();++t);return t-1}(this.itemsToPoll.map((function(e){return e.isDoneFn}))),t=0;t<=e;++t){(0,this.itemsToPoll[t].resolveFn)()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}},{key:"addItemToPoll",value:function(e,t){var r=this;this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1||a.repeatedTry((function(){return r.pollItems(),0===r.itemsToPoll.length}))}},{key:"bindTextureToFrameBuffer",value:function(e){this.throwIfDisposed(),PS(this.gl,e,this.framebuffer),this.debug&&US(this.gl)}},{key:"unbindTextureToFrameBuffer",value:function(){null!=this.outputTexture?(PS(this.gl,this.outputTexture,this.framebuffer),this.debug&&US(this.gl)):VS(this.gl,this.framebuffer)}},{key:"downloadMatrixDriver",value:function(e,t){this.bindTextureToFrameBuffer(e);var r=t();return this.unbindTextureToFrameBuffer(),r}},{key:"setOutputMatrixTextureDriver",value:function(e,t,r){this.throwIfDisposed();var a=this.gl;PS(a,e,this.framebuffer),this.debug&&US(a),this.outputTexture=e,ES(a,(function(){return a.viewport(0,0,t,r)})),ES(a,(function(){return a.scissor(0,0,t,r)}))}},{key:"setOutputMatrixWriteRegionDriver",value:function(e,t,r,a){var n=this;this.throwIfDisposed(),ES(this.gl,(function(){return n.gl.scissor(e,t,r,a)}))}},{key:"throwIfDisposed",value:function(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}},{key:"throwIfNoProgram",value:function(){if(null==this.program)throw new Error("No GPU program is currently set.")}},{key:"debug",get:function(){return ht().getBool("DEBUG")}}]),e}();function bA(e,t){if(e.length!==t.length)throw Error("Binary was compiled with ".concat(e.length," inputs, but was executed with ").concat(t.length," inputs"));e.forEach((function(e,r){var n=e.logicalShape,i=t[r],o=i.shape;if(!a.arraysEqual(n,o))throw Error("Binary was compiled with different shapes than the current args. Shapes ".concat(n," and ").concat(o," must match"));if(!e.isUniform||!i.isUniform){var s=e.texShape,l=i.isUniform?null:i.texData.texShape;if(!a.arraysEqual(s,l))throw Error("Binary was compiled with different texture shapes than the current args. Shape ".concat(s," and ").concat(l," must match"))}}))}var xA=function e(t,r,a){_classCallCheck(this,e),this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;for(var n=a.filterWidth,i=a.inChannels,o=a.strideWidth,s=a.strideHeight,l=a.padInfo,u=a.outWidth,h=a.dilationWidth,c=a.dilationHeight,f=a.dataFormat,d=l.left,v=l.top,p=i*n,g=mI(),_="channelsLast"===f,m=_?0:1,y=_?1:2,b="",x=0;x<=1;x++)for(var k=0;k<=1;k++)b+="\n          blockIndex = rc.y + ".concat(k,";\n          pos = rc.x + ").concat(x,";\n\n          if(blockIndex < ").concat(t[1]," && pos < ").concat(t[0],") {\n            offsetY = int(blockIndex / (").concat(u,")) * ").concat(s," - ").concat(v,";\n            d0 = offsetY + ").concat(c," * (pos / ").concat(p,");\n\n            if(d0 < ").concat(r[m]," && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ").concat(u,".) * ").concat(o,". - ").concat(d,".);\n              d1 = offsetX + ").concat(h," * (int(mod(float(pos), ").concat(p,".) / ").concat(i,".));\n\n              if(d1 < ").concat(r[y]," && d1 >= 0) {\n\n                ch = int(mod(float(pos), ").concat(i,".));\n\n                if (").concat(_,") {\n                  innerDims = vec2(d1, ch);\n                  result[").concat(2*x+k,"] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[").concat(2*x+k,"] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        ");this.userCode="\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ".concat(b,"\n\n        ").concat(g.output," = result;\n      }\n    ")},kA=function e(t,r,a,n,i){_classCallCheck(this,e),this.variableNames=["x"],this.outputShape=[];var o,s=r,l=t[3]-1;this.outputShape=t;var u="float(".concat(a,") + float(").concat(n,") * sum");o=.5===i?"inversesqrt(".concat(u,")"):1===i?"1.0/(".concat(u,")"):"exp(log(".concat(u,") * float(-").concat(i,"));"),this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -".concat(s,"; j <= ").concat(s,"; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ").concat(l,") {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ").concat(o,";\n        setOutput(val);\n      }\n    ")},wA=function e(t,r,a,n,i){_classCallCheck(this,e),this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=t,this.depth=t[3],this.depthRadius=r,this.bias=a,this.alpha=n,this.beta=i,this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ".concat(this.depth,"; ++d) {\n          int depthBegin = int(max(0.0, float(d - ").concat(r,")));\n          int depthEnd = int(min(float(").concat(this.depth,"),\n              float(d + ").concat(r," + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ").concat(this.depth,";\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(").concat(n,") * norm + float(").concat(a,");\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(").concat(n,")\n                * float(").concat(i,")\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ").concat(i,");\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    ")},CA=function e(t,r,a,n,i){_classCallCheck(this,e),this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;var o,s=r,l=t[3]-1;this.outputShape=t;var u="float(".concat(a,") + float(").concat(n,") * sum");o=.5===i?"inversesqrt(".concat(u,")"):1===i?"1.0/(".concat(u,")"):"exp(log(".concat(u,") * float(-").concat(i,"));"),this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ".concat(this.outputShape[3],";\n        bool hasNextRow = c < ").concat(this.outputShape[2],";\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ").concat(s,";\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ").concat(s,"; j <= ").concat(s,"; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(").concat(l,"));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ").concat(o,";\n        setOutput(result);\n      }\n    ")},TA=function e(t){_classCallCheck(this,e),this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;var r=t.effectiveFilterHeight,a=t.effectiveFilterWidth;this.userCode="\n      const ivec2 pads = ivec2(".concat(r-1-t.padInfo.top,", ").concat(a-1-t.padInfo.left,");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ").concat(r,";\n          wR += ").concat(t.dilationHeight,") {\n          float dyR = float(dyRCorner + wR) / ").concat(t.strideHeight,".0;\n\n          if (dyR < 0.0 || dyR >= ").concat(t.outHeight,".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ").concat(a,"; wC++) {\n            float dyC = float(dyCCorner + wC) / ").concat(t.strideWidth,".0;\n\n            if (dyC < 0.0 || dyC >= ").concat(t.outWidth,".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ").concat(r*a-1," - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ").concat(a," + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    ")},SA=function e(t){_classCallCheck(this,e),this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;var r=t.effectiveFilterDepth,a=t.effectiveFilterHeight,n=t.effectiveFilterWidth;this.userCode="\n      const ivec3 pads = ivec3(".concat(r-1-t.padInfo.front,", ").concat(a-1-t.padInfo.top,", ").concat(n-1-t.padInfo.left,");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ").concat(r,";\n           wD += ").concat(t.dilationDepth,") {\n          float dyD = float(dyDCorner + wD) / ").concat(t.strideDepth,".0;\n\n          if (dyD < 0.0 || dyD >= ").concat(t.outDepth,".0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ").concat(a,";\n              wR += ").concat(t.dilationHeight,") {\n            float dyR = float(dyRCorner + wR) / ").concat(t.strideHeight,".0;\n\n            if (dyR < 0.0 || dyR >= ").concat(t.outHeight,".0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ").concat(n,";\n                wC += ").concat(t.dilationWidth,") {\n              float dyC = float(dyCCorner + wC) / ").concat(t.strideWidth,".0;\n\n              if (dyC < 0.0 || dyC >= ").concat(t.outWidth,".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ").concat(r*a*n-1," -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ").concat(a," * ").concat(n," +\n                  wR * ").concat(n," + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ")},IA=function e(t,r,a){var n=arguments.length>3&&void 0!==arguments[3]&&arguments[3],i=arguments.length>4&&void 0!==arguments[4]&&arguments[4],o=arguments.length>5&&void 0!==arguments[5]&&arguments[5],s=arguments.length>6&&void 0!==arguments[6]?arguments[6]:null,l=arguments.length>7&&void 0!==arguments[7]&&arguments[7];_classCallCheck(this,e),this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=a;var u=Math.ceil((n?t[1]:t[2])/2),h=n?"i * 2, rc.y":"rc.y, i * 2",c=i?"rc.z, i * 2":"i * 2, rc.z",f=n?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],d=i?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"],v="",p="";s&&(v=l?"vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ".concat(s,"\n        }"):"vec4 activation(vec4 x) {\n          ".concat(s,"\n        }"),p="result = activation(result);");var g=o?"result += getBiasAtOutCoords();":"";o&&this.variableNames.push("bias"),l&&this.variableNames.push("preluActivationWeights");var _="rc.x",m="rc.x";t[0]<r[0]?_="int(min(float(rc.x), ".concat(t[0]-1,".))"):r[0]<t[0]&&(m="int(min(float(rc.x), ".concat(r[0]-1,".))")),this.userCode="\n      ".concat(v,"\n\n      const float sharedDimension = ").concat(u,".0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ").concat(u,"; i++) {\n          int batchA = ").concat(_,";\n          int batchB = ").concat(m,";\n          vec4 a = getMatrixA(batchA, ").concat(h,");\n          vec4 b = getMatrixB(batchB, ").concat(c,");\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (").concat(f[0]," * ").concat(d[0],");\n          result += (").concat(f[1]," * ").concat(d[1],");\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ").concat(g,"\n\n        ").concat(p,"\n\n        setOutput(result);\n      }\n    ")},AA=function(){function e(t,r,a){_classCallCheck(this,e),this.variableNames=["probs"],this.outputShape=[t,a],this.userCode="\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ".concat(r-1,"; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(").concat(r-1,"));\n      }\n    ")}return _createClass(e,[{key:"getCustomSetupFunc",value:function(e){var t=this;return function(r,a){null==t.seedLoc&&(t.seedLoc=r.getUniformLocation(a,"seed")),r.gl.uniform1f(t.seedLoc,e)}}}]),e}(),RA=function e(t,r,a,n){_classCallCheck(this,e),this.variableNames=["indices"],this.outputShape=[t,r],this.userCode="\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(".concat(n,"), float(").concat(a,"),\n                      float(index == coords.y)));\n      }\n    ")},NA=function e(t){_classCallCheck(this,e),this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=t;var r=t.length;if(0===r)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{var a=_I("rc",r),n=RI(r),i=function(e,t,r){if(1===e)return"rc > "+t[0];for(var a="",n=e-2;n<e;n++)a+="".concat(r[n]," >= ").concat(t[n]),n<e-1&&(a+="||");return a}(r,t,a),o=function(e,t,r,a){if(1===e)return"";var n=a.slice(-2);return"\n    int r = ".concat(n[0],";\n    int c = ").concat(n[1],";\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ").concat(t,";\n    bool rEdge = rp1 >= ").concat(r,";\n  ")}(r,t[t.length-1],t[t.length-2],a),s=function(e,t){var r=e.length,a=function(e,t){for(var r=[],a=0;a<=1;a++)for(var n=0;n<=1;n++){for(var i="".concat(0===a?"r":"rp1",", ").concat(0===n?"c":"cp1"),o=2;o<e;o++)i=t[t.length-1-o]+","+i;r.push(i)}return r}(r,t);return 1===r?"getA(rc),\n            rc + 1 >= ".concat(e[0]," ? 0. : getA(rc + 1),\n            0, 0"):"getA(".concat(a[0],"),\n          cEdge ? 0. : getA(").concat(a[1],"),\n          rEdge ? 0. : getA(").concat(a[2],"),\n          rEdge || cEdge ? 0. : getA(").concat(a[3],")")}(t,a);this.userCode="\n        void main() {\n          ".concat(n," rc = getOutputCoords();\n\n          if(").concat(i,") {\n            setOutput(vec4(0));\n          } else {\n            ").concat(o,"\n\n            setOutput(vec4(").concat(s,"));\n          }\n        }\n      ")}},EA=function e(t,r,a){_classCallCheck(this,e),this.variableNames=["x"],this.outputShape=r.map((function(e,r){return e[0]+t[r]+e[1]}));var n=t.length,i=RI(n),o=r.map((function(e){return e[0]})).join(","),s=r.map((function(e,r){return e[0]+t[r]})).join(","),l=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,n);this.userCode=1!==n?"\n      ".concat(i," start = ").concat(i,"(").concat(o,");\n      ").concat(i," end = ").concat(i,"(").concat(s,");\n\n      void main() {\n        ").concat(i," outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(").concat(a,"));\n        } else {\n          ").concat(i," coords = outC - start;\n          setOutput(getX(").concat(l,"));\n        }\n      }\n    "):"\n        int start = ".concat(o,";\n        int end = ").concat(s,";\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(").concat(a,"));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      ")},FA=function e(t,r,a){_classCallCheck(this,e),this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=r.map((function(e,r){return e[0]+t[r]+e[1]}));for(var n=t.length,i=RI(n),o=r.map((function(e){return e[0]})).join(","),s=r.map((function(e,r){return e[0]+t[r]})).join(","),l=_I("rc",n),u=_I("source",n),h="".concat(l[n-1]," < ").concat(this.outputShape[n-1]),c=1===n?"source":"vec2(".concat(u.slice(-2).join(),")"),f=[i+" rc = outputLoc;","".concat(l[n-1]," += 1;\n       if(").concat(h,") {\n      "),1===n?"":"}\n       rc = outputLoc;\n       ".concat(l[n-2]," += 1;\n       if(").concat(l[n-2]," < ").concat(this.outputShape[n-2],") {"),1===n?"":"  ".concat(l[n-1]," += 1;\n         if(").concat(h,") {")],d=1===n?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))",v="",p=0,g=1===n?2:4;p<g;p++)v+="\n        ".concat(f[p],"\n        if (").concat(d,") {\n          result[").concat(p,"] = float(").concat(a,");\n        } else {\n          ").concat(i," source = rc - start;\n          result[").concat(p,"] = getChannel(getX(").concat(u.join(),"), ").concat(c,");\n        }\n      ");v+=1===n?"} ":"}}",this.userCode="\n      const ".concat(i," start = ").concat(i,"(").concat(o,");\n      const ").concat(i," end = ").concat(i,"(").concat(s,");\n\n      void main() {\n        ").concat(i," outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ").concat(v,"\n        setOutput(result);\n      }\n    ")},MA=function e(t,r,a){var n=arguments.length>3&&void 0!==arguments[3]&&arguments[3],i=arguments.length>4&&void 0!==arguments[4]&&arguments[4];if(_classCallCheck(this,e),this.variableNames=["x"],"avg"===r&&a)throw new Error("Cannot compute positions for average pool.");var o=t.filterWidth,s=t.strideHeight,l=t.strideWidth,u=t.dilationHeight,h=t.dilationWidth,c=t.effectiveFilterHeight,f=t.effectiveFilterWidth,d=t.padInfo.top,v=t.padInfo.left;this.outputShape=t.outShape;var p="avg"===r,g="0.0";if(p||(g="-1.0 / 1e-20"),a)this.userCode="\n        const ivec2 strides = ivec2(".concat(s,", ").concat(l,");\n        const ivec2 pads = ivec2(").concat(d,", ").concat(v,");\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ").concat(c,";\n              wR += ").concat(u,") {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ").concat(t.inHeight,") {\n              continue;\n            }\n\n            for (int wC = 0; wC < ").concat(f,";\n                wC += ").concat(h,") {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ").concat(t.inWidth,") {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value >= currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ").concat(n?i?"((batch  * ".concat(t.inHeight," + xR) * ").concat(t.inWidth," + xC) * ").concat(t.inChannels," + d"):"(xR * ".concat(t.inWidth," + xC) * ").concat(t.inChannels," + d"):"wR * ".concat(f," + wC"),";\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      ");else{var _="".concat(r,"(").concat(r,"(").concat(r,"(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])");"avg"===r&&(_="avgValue / count");var m=4*Math.floor(o/4),y=o%4,b="\n      if (".concat(p,") {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    ");this.userCode="\n      const ivec2 strides = ivec2(".concat(s,", ").concat(l,");\n      const ivec2 pads = ivec2(").concat(d,", ").concat(v,");\n      const float initializationValue = ").concat(g,";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ").concat(t.inWidth,") {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(").concat(g,");\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ").concat(c,";\n            wR += ").concat(u,") {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ").concat(t.inHeight,") {\n            continue;\n          }\n\n          for (int wC = 0; wC < ").concat(m,"; wC += 4) {\n            int xC = xCCorner + wC * ").concat(h,";\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ").concat(h,", d),\n              getValue(batch, xR, xC + 2 * ").concat(h,", d),\n              getValue(batch, xR, xC + 3 * ").concat(h,", d)\n            );\n\n            ").concat(b,"\n          }\n\n          int xC = xCCorner + ").concat(m,";\n          if (").concat(1===y,") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ").concat(b,"\n          } else if (").concat(2===y,") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ").concat(h,", d),\n              initializationValue,\n              initializationValue\n            );\n\n            ").concat(b,"\n          } else if (").concat(3===y,") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ").concat(h,", d),\n              getValue(batch, xR, xC + 2 * ").concat(h,", d),\n              initializationValue\n            );\n\n            ").concat(b,"\n          }\n        }\n        setOutput(").concat(_,");\n      }\n    ")}},DA=function e(t,r,a){var n=arguments.length>3&&void 0!==arguments[3]&&arguments[3],i=arguments.length>4&&void 0!==arguments[4]&&arguments[4];if(_classCallCheck(this,e),this.variableNames=["x"],"avg"===r&&a)throw new Error("Cannot compute positions for average pool.");var o=t.filterWidth,s=t.strideDepth,l=t.strideHeight,u=t.strideWidth,h=t.dilationDepth,c=t.dilationHeight,f=t.dilationWidth,d=t.effectiveFilterDepth,v=t.effectiveFilterHeight,p=t.effectiveFilterWidth,g=t.padInfo.front,_=t.padInfo.top,m=t.padInfo.left;this.outputShape=t.outShape;var y="avg"===r,b="0.0";if(y||(b="-1.0 / 1e-20"),a)this.userCode="\n        const ivec3 strides =\n            ivec3(".concat(s,", ").concat(l,", ").concat(u,");\n        const ivec3 pads = ivec3(").concat(g,", ").concat(_,", ").concat(m,");\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ").concat(d,";\n              wD += ").concat(h,") {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ").concat(t.inDepth,") {\n              continue;\n            }\n\n            for (int wR = 0; wR < ").concat(v,";\n                wR += ").concat(c,") {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ").concat(t.inHeight,") {\n                continue;\n              }\n\n              for (int wC = 0; wC < ").concat(p,";\n                  wC += ").concat(f,") {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ").concat(t.inWidth,") {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value >= currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ").concat(n?i?"(((batch * ".concat(t.inDepth," + xD) * ").concat(t.inHeight," + xR) * ").concat(t.inWidth," + xC) * ").concat(t.inChannels," + ch"):"((xD * ".concat(t.inHeight," + xR) * ").concat(t.inWidth," + xC) * ").concat(t.inChannels," + ch"):"wD * ".concat(v," * ").concat(p," +\n                      wR * ").concat(p," + wC"),";\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      ");else{var x="".concat(r,"(").concat(r,"(").concat(r,"(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])");"avg"===r&&(x="avgValue / count");var k=4*Math.floor(o/4),w=o%4,C="\n      if (".concat(y,") {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    ");this.userCode="\n      const ivec3 strides =\n        ivec3(".concat(s,", ").concat(l,", ").concat(u,");\n      const ivec3 pads = ivec3(").concat(g,", ").concat(_,", ").concat(m,");\n      const float initializationValue = ").concat(b,";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ").concat(t.inWidth,") {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(").concat(b,");\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ").concat(d,";\n            wD += ").concat(h,") {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ").concat(t.inDepth,") {\n            continue;\n          }\n\n          for (int wR = 0; wR < ").concat(v,";\n            wR += ").concat(c,") {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ").concat(t.inHeight,") {\n              continue;\n            }\n\n            for (int wC = 0; wC < ").concat(k,"; wC += 4) {\n              int xC = xCCorner + wC * ").concat(f,";\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ").concat(f,", ch),\n                getValue(batch, xD, xR, xC + 2 * ").concat(f,", ch),\n                getValue(batch, xD, xR, xC + 3 * ").concat(f,", ch)\n              );\n\n              ").concat(C,"\n            }\n\n            int xC = xCCorner + ").concat(k,";\n            if (").concat(1===w,") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ").concat(C,"\n            } else if (").concat(2===w,") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ").concat(f,", ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ").concat(C,"\n            } else if (").concat(3===w,") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ").concat(f,", ch),\n                getValue(batch, xD, xR, xC + 2 * ").concat(f,", ch),\n                initializationValue\n              );\n\n              ").concat(C,"\n            }\n          }\n          setOutput(").concat(x,");\n        }\n      }\n    ")}},OA=function e(t,r){_classCallCheck(this,e),this.variableNames=["x"];var a=t.windowSize,n=t.batchSize,i=t.inSize,o=t.outSize;this.outputShape=[n,o];var s="0.0",l="";"prod"===r?s="1.0":"min"===r?(s="1.0 / 1e-20",l="min"):"max"===r&&(s="-1.0 / 1e-20",l="max");var u="".concat(r,"(").concat(r,"(").concat(r,"(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])");"sum"===r?u="sumValue":"prod"===r?u="prodValue":"all"===r?u="allValue":"any"===r&&(u="anyValue");var h=4*Math.floor(a/4),c=a%4,f="\n      if (".concat("sum"===r,") {\n        sumValue += dot(values, ones);\n      } else if (").concat("prod"===r,") {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ").concat(l,"(values, minMaxValue);\n      }\n    "),d="vec4";"all"===r?(s="1.0",f="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",d="bvec4"):"any"===r&&(s="0.0",f="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",d="bvec4");var v="";i%a>0&&(v="\n        if (inIdx < 0 || inIdx >= ".concat(i,") {\n          return initializationValue;\n        }\n      ")),this.userCode="\n      const float initializationValue = ".concat(s,";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ").concat(v,"\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ").concat(a,";\n\n        vec4 minMaxValue = vec4(").concat(s,");\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ").concat(h,"; i += 4) {\n          int inIdx = inOffset + i;\n          ").concat(d," values = ").concat(d,"(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ").concat(f,"\n        }\n\n        int inIdx = inOffset + ").concat(h,";\n        if (").concat(1===c,") {\n          ").concat(d," values = ").concat(d,"(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ").concat(f,"\n        } else if (").concat(2===c,") {\n          ").concat(d," values = ").concat(d,"(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ").concat(f,"\n        } else if (").concat(3===c,") {\n          ").concat(d," values = ").concat(d,"(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ").concat(f,"\n        }\n        setOutput(").concat(u,");\n      }\n    ")},LA=function e(t,r){_classCallCheck(this,e),this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;for(var a,n="",i=0;i<4;i++){var o="thisRC = rc;";i%2==1&&(o+="thisRC.z += 1;"),i>1&&(o+="thisRC.y += 1;"),n+="\n        ".concat(o,"\n        ").concat(i>0?"if(thisRC.y < rows && thisRC.z < cols){":"","\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[").concat(i,"] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ").concat(i>0?"}":"","\n      ")}this.userCode="\n      ".concat((a=r,"\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ".concat(yI(["r","c","d"],a),"\n      return ivec3(r, c, d);\n    }\n  ")),"\n      ").concat(bI(t),"\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ").concat(t[1],";\n        int cols = ").concat(t[2],";\n\n        ").concat(n,"\n\n        setOutput(result);\n      }\n    ")},zA=function e(t,r,a){_classCallCheck(this,e),this.variableNames=["dy"],this.outputShape=[],this.outputShape=r.shape;var n=_slicedToArray(r.shape,3),i=n[1],o=n[2],s=_slicedToArray(t.shape,3),l=s[1],u=s[2],h=[a&&l>1?i-1:i,a&&u>1?o-1:o],c=[a&&l>1?l-1:l,a&&u>1?u-1:u],f=h[0]/c[0],d=h[1]/c[1],v=1/f,p=1/d,g=2*Math.ceil(v)+2,_=2*Math.ceil(p)+2;this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(".concat(f,");\n        const float widthScale = float(").concat(d,");\n\n        const float invHeightScale = float(").concat(v,");\n        const float invWidthScale = float(").concat(p,");\n\n        const int winHeight = int(").concat(g,");\n        const int winWidth = int(").concat(_,");\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ").concat(l,") {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ").concat(u,") {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ").concat(i-1,".0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ").concat(o-1,".0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    ")},BA=function e(t,r,a,n){_classCallCheck(this,e),this.variableNames=["A"],this.outputShape=[];var i=_slicedToArray(t,4),o=i[0],s=i[1],l=i[2],u=i[3];this.outputShape=[o,r,a,u];var h=[n&&r>1?s-1:s,n&&a>1?l-1:l],c=[n&&r>1?r-1:r,n&&a>1?a-1:a];this.userCode="\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ".concat(h[0]/c[0],",\n          ").concat(h[1]/c[1],");\n      const vec2 inputShapeRC = vec2(").concat(s,".0, ").concat(l,".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    ")},PA=function e(t,r,a,n){_classCallCheck(this,e),this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];var i=_slicedToArray(t,4),o=i[0],s=i[1],l=i[2],u=i[3];this.outputShape=[o,r,a,u];var h=[n&&r>1?s-1:s,n&&a>1?l-1:l],c=[n&&r>1?r-1:r,n&&a>1?a-1:a];this.userCode="\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ".concat(h[0]/c[0],",\n          ").concat(h[1]/c[1],",\n          ").concat(h[1]/c[1],");\n      const vec3 inputShapeRC = vec3(").concat(s,".0, ").concat(l,".0,\n                                     ").concat(l,".0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ").concat(u-1,";\n        bool hasNextRow = coords.z < ").concat(a-1,";\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    ")},VA=function e(t,r,a){_classCallCheck(this,e),this.variableNames=["dy"],this.outputShape=[],this.outputShape=r.shape;var n=_slicedToArray(r.shape,3),i=n[1],o=n[2],s=_slicedToArray(t.shape,3),l=s[1],u=s[2],h=[a&&l>1?i-1:i,a&&u>1?o-1:o],c=[a&&l>1?l-1:l,a&&u>1?u-1:u],f=h[0]/c[0],d=h[1]/c[1],v=1/f,p=1/d,g=2*Math.ceil(v)+2,_=2*Math.ceil(p)+2;this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(".concat(f,");\n        const float widthScale = float(").concat(d,");\n\n        const float invHeightScale = float(").concat(v,");\n        const float invWidthScale = float(").concat(p,");\n\n        const int winHeight = int(").concat(g,");\n        const int winWidth = int(").concat(_,");\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ").concat(l,") {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ").concat(u,") {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(").concat(h[0],") *\n                (float(dyR) / float(").concat(c[0],"));\n\n            float sourceFracCol =\n                float(").concat(h[1],") *\n                  (float(dyC) / float(").concat(c[1],"));\n\n            int sourceNearestRow = int(min(\n                float(int(").concat(i,") - 1),\n                ").concat(a," ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(").concat(o,") - 1),\n                ").concat(a," ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    ")},UA=function e(t,r,a,n){_classCallCheck(this,e),this.variableNames=["A"],this.outputShape=[];var i=_slicedToArray(t,4),o=i[0],s=i[1],l=i[2],u=i[3];this.outputShape=[o,r,a,u];var h=[n&&r>1?s-1:s,n&&a>1?l-1:l],c=[n&&r>1?r-1:r,n&&a>1?a-1:a];this.userCode="\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ".concat(h[0]/c[0],",\n          ").concat(h[1]/c[1],");\n      const vec2 inputShapeRC = vec2(").concat(s,".0, ").concat(l,".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ").concat(n?"0.5":"0.0",")));\n\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    ")},WA=function e(t,r){_classCallCheck(this,e),this.variableNames=["x"];var a=t.length;if(a>4)throw new Error("WebGL backend: Reverse of rank-".concat(a," tensor is not yet supported"));if(this.outputShape=t,1!==a){var n=t.map((function(e,a){return function(e){return-1!==r.indexOf(e)&&1!==t[e]?"".concat(t[e]," - coords[").concat(e,"] - 1"):"coords[".concat(e,"]")}(a)})).join(","),i=RI(a);this.userCode="\n      void main() {\n        ".concat(i," coords = getOutputCoords();\n        setOutput(getX(").concat(n,"));\n      }\n    ")}else this.userCode="\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(".concat(t[0]," - coord - 1));\n        }\n      ")},GA=function e(t,r){_classCallCheck(this,e),this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;var a=t.length;if(a>4)throw new Error("WebGL backend: Reverse of rank-".concat(a," tensor is not yet supported"));this.outputShape=t;var n=_I("rc",a),i="".concat(n[a-1]," + 1 < ").concat(this.outputShape[a-1]),o="".concat(n[a-2]," + 1 < ").concat(this.outputShape[a-2]),s=RI(a);function l(e){var a=t.map((function(a,n){return function(e,a){return-1!==r.indexOf(e)&&1!==t[e]?"".concat(t[e]," - ").concat(a[e]," - 1"):""+a[e]}(n,e)}));return"getChannel(getX(".concat(a.join(","),"), vec2(").concat(a.slice(-2).join(","),"))")}this.userCode=1===a?"\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(".concat(t[0]," - rc - 1),\n            ").concat(t[0]," - rc - 1);\n          if(").concat(i,"){\n              result.g = getChannel(getX(").concat(t[0]," - (rc  + 1) - 1),\n                ").concat(t[0]," - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      "):"\n        void main() {\n          ".concat(s," rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ").concat(function(e){return l(e)}(n.slice()),";\n          if(").concat(i,"){\n            result.g = ").concat(function(e){return e[a-1]="("+e[a-1]+" + 1)",l(e)}(n.slice()),";\n          }\n          if(").concat(o,") {\n            result.b = ").concat(function(e){return e[a-2]="("+e[a-2]+" + 1)",l(e)}(n.slice()),";\n            if(").concat(i,") {\n              result.a = ").concat(function(e){return e[a-1]="("+e[a-1]+" + 1)",e[a-2]="("+e[a-2]+" + 1)",l(e)}(n.slice()),";\n            }\n          }\n          setOutput(result);\n        }\n    ")},HA=function e(t,r,a,n,i,o){_classCallCheck(this,e),this.variableNames=["updates","indices","defaultValue"],this.outputShape=o;var s=RI(i.length),l=RI(o.length),u="";1===a?u="i":2===a&&(u="i, j");var h="";1===n?h="i":2===n&&(h="i, coords[1]"),this.userCode="\n        ".concat(s," strides = ").concat(s,"(").concat(i,");\n\n        void main() {\n          ").concat(l," coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ").concat(t,"; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ").concat(r,"; j++) {\n              int index = round(getIndices(").concat(u,"));\n              flattenedIndex += index * ").concat(r>1?"strides[j]":"strides",";\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += getUpdates(").concat(h,");\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      ")},jA=function e(t,r){_classCallCheck(this,e),this.variableNames=["x","segmentIds"];var a=t.windowSize,n=t.batchSize,i=t.inSize,o=t.numSegments,s=o*Math.ceil(i/a);this.outputShape=[n,s];var l=4*Math.floor(a/4),u=a%4,h="\n        sumValue += dot(values, segFilter);\n    ",c="";i%a>0&&(c="\n        if (inIdx < 0 || inIdx >= ".concat(i,") {\n          return initializationValue;\n        }\n      "));var f="";i%a>0&&(f="\n        if (inIdx < 0 || inIdx >= ".concat(i,") {\n          return -1.0;\n        }\n      ")),this.userCode="\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ".concat(c,"\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ").concat(f,"\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ").concat(o,")) * float(").concat(a,"));\n        int currentSeg = int(mod(float(outIdx), float(").concat(o,")));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ").concat(l,"; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ").concat(h,"\n        }\n\n        int inIdx = inOffset + ").concat(l,";\n        if (").concat(1===u,") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ").concat(h,"\n        } else if (").concat(2===u,") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ").concat(h,"\n        } else if (").concat(3===u,") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ").concat(h,"\n        }\n        setOutput(sumValue);\n      }\n    ")},qA=function e(t,r,a){var n,i;if(_classCallCheck(this,e),this.variableNames=["c","a","b"],this.outputShape=r,a>4)throw Error("Where for rank ".concat(a," is not yet supported"));if(1===a)i="resRC",n="resRC";else{for(var o=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[],l=[],u=0;u<r.length;u++)l.push(""+o[u]),u<t&&s.push(""+o[u]);n=s.join(),i=l.join()}var h=RI(a);this.userCode="\n      void main() {\n        ".concat(h," resRC = getOutputCoords();\n        float cVal = getC(").concat(n,");\n        if (cVal >= 1.0) {\n          setOutput(getA(").concat(i,"));\n        } else {\n          setOutput(getB(").concat(i,"));\n        }\n      }\n    ")},XA=function(){function e(t){_classCallCheck(this,e),this.variableNames=["source"],this.outputShape=t,this.rank=t.length;var r,a=RI(this.rank),n="uniform int start[".concat(this.rank,"];"),i=function(e){if(1===e)return"sourceLoc";if(e<=6)return KA.slice(0,e).map((function(e){return"sourceLoc."+e})).join(",");throw Error("Slicing for rank ".concat(e," is not yet supported"))}(this.rank);r="\n        ".concat(a," sourceLoc;\n        ").concat(a," coords = getOutputCoords();\n        ").concat(t.map((function(e,t){return"sourceLoc.".concat(KA[t]," = start[").concat(t,"] + coords.").concat(KA[t],";")})).join("\n"),"\n      "),this.userCode="\n      ".concat(n,"\n      void main() {\n        ").concat(r,"\n        setOutput(getSource(").concat(i,"));\n      }\n    ")}return _createClass(e,[{key:"getCustomSetupFunc",value:function(e){var t=this;if(e.length!==this.rank)throw Error("The rank (".concat(this.rank,") of the program must match the length of start (").concat(e.length,")"));return function(r,a){null==t.startLoc&&(t.startLoc=r.getUniformLocationNoThrow(a,"start"),null==t.startLoc)||r.gl.uniform1iv(t.startLoc,e)}}}]),e}(),KA=["x","y","z","w","u","v"],QA=function(){function e(t){_classCallCheck(this,e),this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.rank=t.length;var r=RI(this.rank),a=_I("coords",this.rank),n=_I("sourceLoc",this.rank),i=1===this.rank?"sourceLoc":"vec2(".concat(n.slice(-2).join(),")"),o="getChannel(getSource(".concat(n.join(),"), ").concat(i,")"),s="\n      result.x = ".concat(o,";\n      if (++").concat(a[this.rank-1]," < ").concat(t[this.rank-1],") {\n        ++").concat(n[this.rank-1],";\n        result.y = ").concat(o,";\n        --").concat(n[this.rank-1],";\n      }\n    "),l=1===this.rank?"":"\n      --".concat(a[this.rank-1],";\n      if (++").concat(a[this.rank-2]," < ").concat(t[this.rank-2],") {\n        ++").concat(n[this.rank-2],";\n        result.z = ").concat(o,";\n        if (++").concat(a[this.rank-1]," < ").concat(t[this.rank-1],") {\n          ++").concat(n[this.rank-1],";\n          result.w = ").concat(o,";\n        }\n      }\n    "),u=this.rank<=4?"sourceLoc = coords +\n            ".concat(r,"(").concat(t.map((function(e,t){return"start[".concat(t,"]")})).join(),");"):t.map((function(e,t){return"".concat(n[t]," = ").concat(a[t]," + start[").concat(t,"];")})).join("\n");this.userCode="\n      uniform int start[".concat(this.rank,"];\n      void main() {\n        ").concat(r," coords = getOutputCoords();\n        ").concat(r," sourceLoc;\n        ").concat(u,"\n        vec4 result = vec4(0.);\n        ").concat(s,"\n        ").concat(l,"\n        setOutput(result);\n      }\n    ")}return _createClass(e,[{key:"getCustomSetupFunc",value:function(e){var t=this;if(e.length!==this.rank)throw Error("The rank (".concat(this.rank,") of the program must match the length of start (").concat(e.length,")"));return function(r,a){null==t.startLoc&&(t.startLoc=r.getUniformLocationNoThrow(a,"start"),null==t.startLoc)||r.gl.uniform1iv(t.startLoc,e)}}}]),e}(),YA=function e(t,r,a){_classCallCheck(this,e),this.variableNames=["x"],this.outputShape=a;var n=a.length,i=RI(a.length),o=RI(a.length),s="";if(1===n)s="coords * strides + begin";else{var l=0;s=a.map((function(e,t){return l++,1===a.length?"coords * strides[".concat(t,"] + begin[").concat(t,"]"):"coords[".concat(l-1,"] * strides[").concat(t,"] + begin[").concat(t,"]")})).join(",")}this.userCode="\n      ".concat(i," begin = ").concat(i,"(").concat(t,");\n      ").concat(i," strides = ").concat(i,"(").concat(r,");\n\n      void main() {\n        ").concat(o," coords = getOutputCoords();\n        setOutput(getX(").concat(s,"));\n      }\n    ")},JA=function(){function e(t){_classCallCheck(this,e),this.gpgpu=t,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}return _createClass(e,[{key:"acquireTexture",value:function(e,t,r){var a=$A(t,r),n=eR(e,a,r);n in this.freeTextures||(this.freeTextures[n]=[]),n in this.usedTextures||(this.usedTextures[n]=[]);var i,o=ZA(e,a,this.gpgpu.gl,this.gpgpu.textureConfig,r);if(this.freeTextures[n].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=o,this.log();var s=this.freeTextures[n].shift();return this.usedTextures[n].push(s),s}return a===wS.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):a===wS.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):a===wS.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):a===wS.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):a===wS.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[n].push(i),this.numUsedTextures++,this._numBytesAllocated+=o,this.log(),i}},{key:"releaseTexture",value:function(e,t,r,a){if(null!=this.freeTextures){var n=$A(r,a),i=eR(t,n,a);i in this.freeTextures||(this.freeTextures[i]=[]);var o=ZA(t,n,this.gpgpu.gl,this.gpgpu.textureConfig,a),s=ht().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==s&&this._numBytesAllocated>s?(this.gpgpu.deleteMatrixTexture(e),this._numBytesAllocated-=o):(this.freeTextures[i].push(e),this.numFreeTextures++,this._numBytesFree+=o),this.numUsedTextures--;var l=this.usedTextures[i],u=l.indexOf(e);if(u<0)throw new Error("Cannot release a texture that was never provided by this texture manager");l.splice(u,1),this.log()}}},{key:"log",value:function(){if(this.logEnabled){console.log("Free/Used","".concat(this.numFreeTextures," / ").concat(this.numUsedTextures),"(".concat(this.numFreeTextures+this.numUsedTextures,")"));var e=this._numBytesFree/this._numBytesAllocated;console.log("Bytes allocated: "+this._numBytesAllocated),console.log("Bytes unused: ".concat(this._numBytesFree," (").concat(Math.round(100*e),"%)"))}}},{key:"getNumUsedTextures",value:function(){return this.numUsedTextures}},{key:"getNumFreeTextures",value:function(){return this.numFreeTextures}},{key:"dispose",value:function(){var e=this;if(null!=this.freeTextures){for(var t in this.freeTextures)this.freeTextures[t].forEach((function(t){e.gpgpu.deleteMatrixTexture(t)}));for(var r in this.usedTextures)this.usedTextures[r].forEach((function(t){e.gpgpu.deleteMatrixTexture(t)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}},{key:"numBytesAllocated",get:function(){return this._numBytesAllocated}},{key:"numBytesFree",get:function(){return this._numBytesFree}}]),e}();function ZA(e,t,r,a,n){var i,o=function(e,t){switch(e){case wS.PACKED_2X2_FLOAT32:return _A(t);case wS.PACKED_2X2_FLOAT16:return mA(t);case wS.UNPACKED_FLOAT32:return vA(t);case wS.UNPACKED_FLOAT16:return pA(t);case wS.PACKED_4X1_UNSIGNED_BYTE:return gA(t);default:throw new Error("Unknown physical texture type "+e)}}(t,a);if(n){var s=_slicedToArray(RS(e[0],e[1]),2);i=s[0]*s[1]}else{var l=_slicedToArray(IS(e[0],e[1]),2);i=l[0]*l[1]}return i*function(e,t){if(t===e.R32F)return 4;if(t===e.R16F)return 2;if(t===e.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===e.RGBA16F)return 8;throw new Error("Unknown internal format "+t)}(r,o)}function $A(e,t){if(e===kS.UPLOAD)return wS.PACKED_2X2_FLOAT32;if(e===kS.RENDER||null==e)return function(e){return ht().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?wS.PACKED_2X2_FLOAT32:wS.UNPACKED_FLOAT32:e?wS.PACKED_2X2_FLOAT16:wS.UNPACKED_FLOAT16}(t);if(e===kS.DOWNLOAD||e===kS.PIXELS)return wS.PACKED_4X1_UNSIGNED_BYTE;throw new Error("Unknown logical texture type "+e)}function eR(e,t,r){return"".concat(e[0],"_").concat(e[1],"_").concat(t,"_").concat(r)}var tR=function e(t,r){_classCallCheck(this,e),this.variableNames=["A"];for(var a=new Array(t.length),n=0;n<a.length;n++)a[n]=t[n]*r[n];this.outputShape=a,this.rank=a.length;var i=RI(this.rank),o=function(e){var t=e.length;if(t>5)throw Error("Tile for rank ".concat(t," is not yet supported"));if(1===t)return"imod(resRC, ".concat(e[0],")");for(var r=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],a=[],n=0;n<e.length;n++)a.push("imod(".concat(r[n],", ").concat(e[n],")"));return a.join()}(t);this.userCode="\n      void main() {\n        ".concat(i," resRC = getOutputCoords();\n        setOutput(getA(").concat(o,"));\n      }\n    ")},rR=function e(t,r){_classCallCheck(this,e),this.variableNames=["A"],this.outputShape=t,this.userCode="\n      float unaryOperation(float x) {\n        ".concat(r,"\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    ")},aR="return abs(x);",nR="if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n",iR="if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",oR="\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ".concat(g.SELU_SCALEALPHA,";\n  float scale = ").concat(g.SELU_SCALE,";\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n"),sR="return -x;",lR="return ceil(x);",uR="return floor(x);",hR="return exp(x);",cR="return exp(x) - 1.0;",fR='\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = '.concat(g.ERF_P,";\n  float a1 = ").concat(g.ERF_A1,";\n  float a2 = ").concat(g.ERF_A2,";\n  float a3 = ").concat(g.ERF_A3,";\n  float a4 = ").concat(g.ERF_A4,";\n  float a5 = ").concat(g.ERF_A5,";\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n"),dR="return x;",vR="\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",pR="\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",gR="\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n",_R=function e(t,r){_classCallCheck(this,e),this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode="\n      vec4 unaryOperation(vec4 x) {\n        ".concat(r,"\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    ")},mR=function e(t){_classCallCheck(this,e),this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=t;var r=t.length,a=_I("rc",r),n=RI(r),i=function(e,t){if(1===e)return"rc";for(var r="",a=0;a<e;a++)r+=t[a],a<e-1&&(r+=",");return r}(r,a),o=a.slice(-2),s=r<=1?"rc":"vec2(".concat(o.join(","),")");this.userCode="\n      void main() {\n        ".concat(n," rc = getOutputCoords();\n        vec4 packedInput = getA(").concat(i,");\n\n        setOutput(getChannel(packedInput, ").concat(s,"));\n      }\n    ")},yR=g.segment_util,bR=_.split,xR=_.tile,kR=_.topkImpl,wR=_.whereImpl,CR={};function TR(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if("linear"===e)return"return x;";if("relu"===e)return t?vR:nR;if("elu"===e)return t?gR:"return (x >= 0.0) ? x : (exp(x) - 1.0);";if("relu6"===e)return t?pR:iR;if("prelu"===e)return t?zI:OI;throw new Error("Activation ".concat(e," has not been implemented for the WebGL backend."))}var SR=function(e){_inherits(o,e);var t,r,n,i=_createSuper(o);function o(e){var t,r;if(_classCallCheck(this,o),(t=i.call(this)).pendingRead=new WeakMap,t.pendingDisposal=new WeakSet,t.dataRefCount=new WeakMap,t.numBytesInGPU=0,t.uploadWaitMs=0,t.downloadWaitMs=0,t.warnedAboutMemory=!1,t.warnedAboutCPUBackend=!1,t.pendingDeletes=0,t.disposed=!1,!ht().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(null==e){var a=SS(ht().getNumber("WEBGL_VERSION"));t.binaryCache=((r=ht().getNumber("WEBGL_VERSION"))in CR||(CR[r]={}),CR[r]),t.gpgpu=new yA(a),t.canvas=a.canvas,t.gpgpuCreatedLocally=!0}else t.gpgpu=e,t.binaryCache={},t.gpgpuCreatedLocally=!1,t.canvas=e.gl.canvas;return t.textureManager=new JA(t.gpgpu),t.numMBBeforeWarning=null==ht().global.screen?1024:ht().global.screen.height*ht().global.screen.width*window.devicePixelRatio*600/1024/1024,t.texData=new pe(_assertThisInitialized(t),gs()),_possibleConstructorReturn(t)}return _createClass(o,[{key:"numDataIds",value:function(){return this.texData.numDataIds()+(this.cpuBackend?this.cpuBackend.numDataIds():0)-this.pendingDeletes}},{key:"write",value:function(e,t,r){if((ht().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||ht().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===r&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");var a={};return this.texData.set(a,{shape:t,dtype:r,values:e,usage:kS.UPLOAD,refCount:1,complexParentRefCount:0}),a}},{key:"incRef",value:function(e){this.texData.get(e).refCount++}},{key:"decRef",value:function(e){this.texData.has(e)&&this.texData.get(e).refCount--}},{key:"move",value:function(e,t,r,a){if(ht().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===a)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:r,dtype:a,values:t,usage:kS.UPLOAD,refCount:1,complexParentRefCount:0})}},{key:"disposeIntermediateTensorInfo",value:function(e){var t=e.dataId;if(this.texData.has(t)){var r=this.texData.get(t);r.refCount--,r.refCount<1&&this.disposeData(t)}}},{key:"readSync",value:function(e){var t=this.texData.get(e),r=t.values,n=t.dtype,i=t.complexTensorInfos,o=t.slice,s=t.shape,l=t.isPacked;if(null!=o){var u;u=l?new _R(s,dR):new rR(s,dR);var h=this.runWebGLProgram(u,[{dataId:e,shape:s,dtype:n}],n),c=this.readSync(h.dataId);return this.disposeIntermediateTensorInfo(h),c}if(null!=r)return this.convertAndCacheOnCPU(e);if("string"===n)return r;var f,d,v=null!=this.activeTimers;if(v&&(f=a.now()),"complex64"===n){var p=this.readSync(i.real.dataId),_=this.readSync(i.imag.dataId);d=g.mergeRealAndImagArrays(p,_)}else d=this.getValuesFromTexture(e);return v&&(this.downloadWaitMs+=a.now()-f),this.convertAndCacheOnCPU(e,d)}},{key:"read",value:(n=_asyncToGenerator(regeneratorRuntime.mark((function e(t){var r,n,i,o,s,l,u,h,c,f,d,v,p,_,m,y,b,x,k,w;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!this.pendingRead.has(t)){e.next=3;break}return r=this.pendingRead.get(t),e.abrupt("return",new Promise((function(e){return r.push(e)})));case 3:if(n=this.texData.get(t),i=n.values,o=n.shape,s=n.slice,l=n.dtype,u=n.complexTensorInfos,h=n.isPacked,null==s){e.next=8;break}return c=h?new _R(o,dR):new rR(o,dR),f=this.runWebGLProgram(c,[{dataId:t,shape:o,dtype:l}],l),d=this.read(f.dataId),e.abrupt("return",(this.disposeIntermediateTensorInfo(f),d));case 8:if(null==i){e.next=10;break}return e.abrupt("return",this.convertAndCacheOnCPU(t));case 10:if(ht().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")||2!==ht().getNumber("WEBGL_VERSION")){e.next=12;break}throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");case 12:if(_=null,"complex64"!==l&&ht().get("WEBGL_BUFFER_SUPPORTED")&&(v=this.decode(t),y=this.texData.get(v.dataId),_=(m=this.gpgpu).createBufferFromTexture.apply(m,[y.texture].concat(_toConsumableArray(AS(o))))),this.pendingRead.set(t,[]),e.t0="complex64"!==l,!e.t0){e.next=19;break}return e.next=19,this.gpgpu.createAndWaitForFence();case 19:if("complex64"!==l){e.next=26;break}return e.next=22,Promise.all([this.read(u.real.dataId),this.read(u.imag.dataId)]);case 22:b=e.sent,p=g.mergeRealAndImagArrays(b[0],b[1]),e.next=27;break;case 26:null==_?p=this.getValuesFromTexture(t):(x=a.sizeFromShape(o),p=this.gpgpu.downloadFloat32MatrixFromBuffer(_,x));case 27:return null!=v&&this.disposeIntermediateTensorInfo(v),k=this.convertAndCacheOnCPU(t,p),w=this.pendingRead.get(t),e.abrupt("return",(this.pendingRead.delete(t),w.forEach((function(e){return e(k)})),this.pendingDisposal.has(t)&&(this.pendingDisposal.delete(t),this.disposeData(t),this.pendingDeletes--),k));case 30:case"end":return e.stop()}}),e,this)}))),function(e){return n.apply(this,arguments)})},{key:"checkNumericalProblems",value:function(e){if(null!=e)for(var t=0;t<e.length;t++){var r=e[t];if(!FS(r)){if(ht().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error("The value ".concat(r," cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'"));throw Error("The value ".concat(r," cannot be represented on this device."))}}}},{key:"getValuesFromTexture",value:function(e){var t=this.texData.get(e),r=t.shape,n=t.dtype,i=t.isPacked,o=a.sizeFromShape(r);if(ht().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){var s,l=this.decode(e),u=this.texData.get(l.dataId),h=(s=this.gpgpu).downloadMatrixFromPackedTexture.apply(s,[u.texture].concat(_toConsumableArray(AS(r)))).subarray(0,o);return this.disposeIntermediateTensorInfo(l),h}var c=ht().getBool("WEBGL_PACK")&&!0===i,f=c?jS(r):r,d=c?new sA(f):new oA(f),v=this.runWebGLProgram(d,[{shape:f,dtype:n,dataId:e}],"float32"),p=this.texData.get(v.dataId),g=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(p.texture,p.texShape[0],p.texShape[1]).subarray(0,o);return this.disposeIntermediateTensorInfo(v),g}},{key:"time",value:(r=_asyncToGenerator(regeneratorRuntime.mark((function e(t){var r,n,i,o,s,l,u;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(r=this.activeTimers,n=[],i=!1,null==this.programTimersStack?(this.programTimersStack=n,i=!0):this.activeTimers.push(n),this.activeTimers=n,t(),o=a.flatten(this.activeTimers.map((function(e){return e.query}))).filter((function(e){return null!=e})),s=a.flatten(this.activeTimers.map((function(e){return e.name}))).filter((function(e){return null!=e})),this.activeTimers=r,i&&(this.programTimersStack=null),l={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null},!(ht().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)){e.next=13;break}return e.next=9,Promise.all(o);case 9:u=e.sent,l.kernelMs=a.sum(u),l.getExtraProfileInfo=function(){return u.map((function(e,t){return{name:s[t],ms:e}})).map((function(e){return"".concat(e.name,": ").concat(e.ms)})).join(", ")},e.next=14;break;case 13:l.kernelMs={error:"WebGL query timers are not supported in this environment."};case 14:return e.abrupt("return",(this.uploadWaitMs=0,this.downloadWaitMs=0,l));case 15:case"end":return e.stop()}}),e,this)}))),function(e){return r.apply(this,arguments)})},{key:"memory",value:function(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}},{key:"startTimer",value:function(){return ht().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:a.now(),endMs:null}}},{key:"endTimer",value:function(e){return ht().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=a.now(),e)}},{key:"getQueryTime",value:(t=_asyncToGenerator(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",ht().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.waitForQueryAndGetTime(t):t.endMs-t.startMs);case 1:case"end":return e.stop()}}),e,this)}))),function(e){return t.apply(this,arguments)})},{key:"disposeData",value:function(e){if(!this.pendingDisposal.has(e)){if(this.pendingRead.has(e))return this.pendingDisposal.add(e),void this.pendingDeletes++;if(this.texData.has(e))if(this.texData.get(e).complexParentRefCount>0)this.texData.get(e).refCount--;else{this.releaseGPUData(e);var t=this.texData.get(e).complexTensorInfos;null!=t&&(this.texData.get(t.real.dataId).complexParentRefCount--,this.disposeIntermediateTensorInfo(t.real),this.texData.get(t.imag.dataId).complexParentRefCount--,this.disposeIntermediateTensorInfo(t.imag)),this.texData.delete(e)}}}},{key:"releaseGPUData",value:function(e){var t=this.texData.get(e),r=t.texture,a=t.dtype,n=t.texShape,i=t.usage,o=t.isPacked,s=t.slice,l=s&&s.origDataId||e,u=this.dataRefCount.get(l);u>1?this.dataRefCount.set(l,u-1):(this.dataRefCount.delete(l),null!=r&&(this.numBytesInGPU-=this.computeBytes(n,a),this.textureManager.releaseTexture(r,n,i,o)));var h=this.texData.get(e);h.texture=null,h.texShape=null,h.isPacked=!1,h.slice=null}},{key:"getTexture",value:function(e){return this.uploadToGPU(e),this.texData.get(e).texture}},{key:"getDataInfo",value:function(e){return this.texData.get(e)}},{key:"getCPUBackend",value:function(){return ht().getBool("WEBGL_CPU_FORWARD")?(null==this.cpuBackend&&(this.cpuBackend=gs().findBackend("cpu")),this.cpuBackend):null}},{key:"shouldExecuteOnCPU",value:function(e){var t=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:128,n=this.getCPUBackend();return this.warnedAboutCPUBackend||null!=n||(console.warn("Your application contains ops that are small enough to be executed on the CPU backend, however the CPU backend cannot be found. Consider importing the CPU backend (@tensorflow/tfjs-backend-cpu) for better performance."),this.warnedAboutCPUBackend=!0),null!=n&&e.every((function(e){return null==t.texData.get(e.dataId).texture&&a.sizeFromShape(e.shape)<r}))}},{key:"getGPGPUContext",value:function(){return this.gpgpu}},{key:"slice",value:function(e,t,r){if(this.shouldExecuteOnCPU([e])){var n=uI(this.texData.get(e.dataId).values,t,r,e.shape,e.dtype);return this.makeOutput(r,e.dtype,n)}if(0===a.sizeFromShape(r))return ii([],r,e.dtype);var i=this.texData.get(e.dataId).isPacked,o=c.isSliceContinous(e.shape,t,r);if(i||!o){var s=ht().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new QA(r):new XA(r),l=s.getCustomSetupFunc(t);return this.compileAndRun(s,[e],null,l)}return this.uploadToGPU(e.dataId),this.shallowSlice(e,t,r)}},{key:"shallowSlice",value:function(e,t,r){var a=this.texData.get(e.dataId),n=this.makeOutput(r,e.dtype),i=this.texData.get(n.dataId);Object.assign(i,a),i.shape=r,i.dtype=e.dtype;var o=c.computeFlatOffset(t,e.strides);a.slice&&(o+=a.slice.flatOffset),i.slice={flatOffset:o,origDataId:a.slice&&a.slice.origDataId||e.dataId};var s=this.dataRefCount.get(i.slice.origDataId)||1;return this.dataRefCount.set(i.slice.origDataId,s+1),n}},{key:"stridedSlice",value:function(e,t,r,a){var n=this,i=this.tryRunOnCpuOrThrow([e],(function(){return n.cpuBackend.stridedSlice(e,t,r,a)}));if(i)return i;var o=c.computeOutShape(t,r,a);if(o.some((function(e){return 0===e})))return ii([],o);var s=new YA(t,a,o);return this.compileAndRun(s,[e])}},{key:"reverse",value:function(e,t){var r=ht().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new GA(e.shape,t):new WA(e.shape,t);return this.compileAndRun(r,[e])}},{key:"neg",value:function(e){var t=this,r=this.tryRunOnCpuOrThrow([e],(function(){return t.cpuBackend.neg(e)}));if(r)return r;if(ht().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,sR,e.dtype);var a=new rR(e.shape,sR);return this.compileAndRun(a,[e])}},{key:"batchMatMul",value:function(e,t,r,a){var n=r?e.shape[2]:e.shape[1],i=a?t.shape[1]:t.shape[2],o=r?e.shape[1]:e.shape[2],s=Math.max(e.shape[0],t.shape[0]);if((1===n||1===i)&&o>1e3){r&&(e=So(e,[0,2,1])),a&&(t=So(t,[0,2,1]));var l=1===i?e:e.as3D(s,o,1),u=1===i?2:1,h=1===i?t.as3D(s,1,o):t;return Os(l,h).sum(u,!0)}var c=zn(e.dtype,t.dtype),f=new IA(e.shape,t.shape,[s,n,i],r,a);return this.compileAndRun(f,[e,t],c)}},{key:"fusedBatchMatMul",value:function(e){var t=e.a,r=e.b,a=e.transposeA,n=e.transposeB,i=e.bias,o=e.activation,s=e.preluActivationWeights,l=a?t.shape[2]:t.shape[1],u=n?r.shape[1]:r.shape[2],h=Math.max(t.shape[0],r.shape[0]),c=zn(t.dtype,r.dtype),f=null!=i,d=null!=s,v=o?TR(o,!0):null,p=new IA(t.shape,r.shape,[h,l,u],a,n,f,v,d),g=[t,r];return i&&g.push(i),s&&g.push(s),this.compileAndRun(p,g,c)}},{key:"localResponseNormalization4D",value:function(e,t,r,a,n){var i=ht().getBool("WEBGL_PACK_NORMALIZATION")?new CA(e.shape,t,r,a,n):new kA(e.shape,t,r,a,n);return this.compileAndRun(i,[e])}},{key:"LRNGrad",value:function(e,t,r,a,n,i,o){var s=new wA(t.shape,a,n,i,o);return this.compileAndRun(s,[t,r,e])}},{key:"tile",value:function(e,t){if("string"===e.dtype){var r=this.readSync(e.dataId).map((function(e){return a.decodeString(e)})),n=Zi(e.shape,e.dtype,r);return xR(n,t)}var i=new tR(e.shape,t);return this.compileAndRun(i,[e])}},{key:"pad",value:function(e,t,r){var a=ht().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new FA(e.shape,t,r):new EA(e.shape,t,r);return this.compileAndRun(a,[e])}},{key:"gather",value:function(e,t,r){var a=this,n=this.tryRunOnCpuOrThrow([e,t],(function(){return a.cpuBackend.gather(e,t,r)}));if(n)return n;var i=new cA(e.shape,t.size,r);return this.compileAndRun(i,[e,t])}},{key:"batchToSpaceND",value:function(e,t,r){a.assert(e.rank<=4,(function(){return"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"}));var n=t.reduce((function(e,t){return e*t})),i=g.getReshaped(e.shape,t,n),o=g.getPermuted(i.length,t.length),s=g.getReshapedPermuted(e.shape,t,n),l=g.getSliceBeginCoords(r,t.length),u=g.getSliceSize(s,r,t.length);return So(e.reshape(i),o).reshape(s).slice(l,u)}},{key:"spaceToBatchND",value:function(e,t,r){a.assert(e.rank<=4,(function(){return"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"}));var n=t.reduce((function(e,t){return e*t})),i=[[0,0]];i.push.apply(i,_toConsumableArray(r));for(var o=1+t.length;o<e.shape.length;++o)i.push([0,0]);var s=e.pad(i),l=g.getReshaped(s.shape,t,n,!1),u=g.getPermuted(l.length,t.length,!1),h=g.getReshapedPermuted(s.shape,t,n,!1),c=So(s.reshape(l),u);return wo(c,h)}},{key:"reduce",value:function(e,t,r){var a=e.shape[0],n=e.shape[1],i=g.computeOptimalWindowSize(n),o=Math.ceil(n/i),s=new OA({windowSize:i,inSize:n,batchSize:a,outSize:o},t),l=this.compileAndRun(s,[e],r);return 1===l.shape[1]?l:this.reduce(l,t,r)}},{key:"argReduce",value:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,a=e.shape[0],n=e.shape[1];null!=r&&(a=r.shape[0],n=r.shape[1]);var i=g.computeOptimalWindowSize(n),o={windowSize:i,inSize:n,batchSize:a,outSize:Math.ceil(n/i)},s=new pI(o,t,null==r),l=[e];null!=r&&l.push(r);var u=this.compileAndRun(s,l,"int32");return 1===u.shape[1]?u:this.argReduce(e,t,u)}},{key:"argReducePacked",value:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,a=null!=r?r.shape:e.shape,n=g.computeOptimalWindowSize(a[a.length-1]),i=new FI(a,n,t,null==r),o=this.compileAndRun(i,null==r?[e]:[e,r],"int32");return o.rank===e.rank?this.argReducePacked(e,t,o):o}},{key:"sum",value:function(e,t){g.assertAxesAreInnerMostDims("sum",t,e.rank);var r=_slicedToArray(g.computeOutAndReduceShapes(e.shape,t),2),n=r[0],i=r[1],o=a.sizeFromShape(i),s=e.as2D(-1,o),l=Bn(e.dtype);return this.reduce(s,"sum",l).reshape(n)}},{key:"prod",value:function(e,t){var r=this,n=this.tryRunOnCpuOrThrow([e],(function(){return r.cpuBackend.prod(e,t)}));if(n)return n;var i=_slicedToArray(g.computeOutAndReduceShapes(e.shape,t),2),o=i[0],s=i[1],l=a.sizeFromShape(s),u=e.as2D(-1,l),h=Bn(e.dtype);return this.reduce(u,"prod",h).reshape(o)}},{key:"unsortedSegmentSum",value:function(e,t,r){var n=0,i=g.getAxesPermutation([n],e.rank),o=e;null!=i&&(o=So(e,i),n=g.getInnerMostAxes(1,e.rank)[0]);var s=yR.computeOutShape(o.shape,n,r),l=a.sizeFromShape([o.shape[n]]),u=o.as2D(-1,l),h=Bn(e.dtype),c=this.segOpCompute(u,"unsortedSegmentSum",t,h,r).reshape(s);return null!=i&&(c=So(c,g.getUndoAxesPermutation(i))),c}},{key:"segOpCompute",value:function(e,t,r,a,n){var i=e.shape[0],o=e.shape[1],s=yR.segOpComputeOptimalWindowSize(o,n),l=new jA({windowSize:s,inSize:o,batchSize:i,numSegments:n},t),u=this.compileAndRun(l,[e,r],a);return u.shape[1]===n?u:(r=Xh(0,n).tile([o/s]),this.segOpCompute(u,t,r,a,n))}},{key:"argMinMaxReduce",value:function(e,t,r){var n=[t];if(g.assertAxesAreInnerMostDims("arg"+r.charAt(0).toUpperCase()+r.slice(1),n,e.rank),!ht().getBool("WEBGL_PACK_REDUCE")||e.rank<=2){var i=_slicedToArray(g.computeOutAndReduceShapes(e.shape,n),2),o=i[0],s=i[1],l=a.sizeFromShape(s),u=e.as2D(-1,l);return this.argReduce(u,r).reshape(o)}return this.argReducePacked(e,r)}},{key:"argMin",value:function(e,t){return this.argMinMaxReduce(e,t,"min")}},{key:"argMax",value:function(e,t){return this.argMinMaxReduce(e,t,"max")}},{key:"cumsum",value:function(e,t,r,a){if(t!==e.rank-1)throw new Error("WebGL cumsum shader expects an inner-most axis=".concat(e.rank-1," but got axis=")+t);for(var n=e.shape[t],i=e,o=0;o<=Math.ceil(Math.log2(n))-1;o++){var s=new $I(e.shape,!1,a),l=s.getCustomSetupFunc(o),u=i;i=this.compileAndRun(s,[i],i.dtype,l),u.dispose()}if(r){var h=new $I(e.shape,r,a),c=i;i=this.compileAndRun(h,[i]),c.dispose()}return i}},{key:"equal",value:function(e,t){if(ht().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,"\n  return vec4(equal(a, b));\n","bool");var r=new LI("return float(a == b);",e.shape,t.shape);return this.compileAndRun(r,[e,t],"bool")}},{key:"less",value:function(e,t){var r=this,a=this.tryRunOnCpuOrThrow([e,t],(function(){return r.cpuBackend.less(e,t)}));if(a)return a;if(ht().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,"\n  return vec4(lessThan(a, b));\n","bool");var n=new LI("return float(a < b);",e.shape,t.shape);return this.compileAndRun(n,[e,t],"bool")}},{key:"lessEqual",value:function(e,t){if(ht().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,"\n  return vec4(lessThanEqual(a, b));\n","bool");var r=new LI("return float(a <= b);",e.shape,t.shape);return this.compileAndRun(r,[e,t],"bool")}},{key:"greater",value:function(e,t){var r=this,a=this.tryRunOnCpuOrThrow([e,t],(function(){return r.cpuBackend.greater(e,t)}));if(a)return a;if(ht().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,"\n  return vec4(greaterThan(a, b));\n","bool");var n=new LI("return float(a > b);",e.shape,t.shape);return this.compileAndRun(n,[e,t],"bool")}},{key:"greaterEqual",value:function(e,t){if(ht().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,"\n  return vec4(greaterThanEqual(a, b));\n","bool");var r=new LI("return float(a >= b);",e.shape,t.shape);return this.compileAndRun(r,[e,t],"bool")}},{key:"logicalNot",value:function(e){var t=new rR(e.shape,"return float(!(x >= 1.0));");return this.compileAndRun(t,[e])}},{key:"logicalAnd",value:function(e,t){if(ht().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n","bool");var r=new LI("return float(a >= 1.0 && b >= 1.0);",e.shape,t.shape);return this.compileAndRun(r,[e,t],"bool")}},{key:"logicalOr",value:function(e,t){if(ht().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n","bool");var r=new LI("return float(a >= 1.0 || b >= 1.0);",e.shape,t.shape);return this.compileAndRun(r,[e,t],"bool")}},{key:"select",value:function(e,t,r){var a=new qA(e.rank,t.shape,t.rank);return this.compileAndRun(a,[e,t,r],zn(t.dtype,r.dtype))}},{key:"where",value:function(e){g.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");var t=e.dataSync();return wR(e.shape,t)}},{key:"topk",value:function(e,t,r){var a=e.dataSync();return kR(a,e.shape,e.dtype,t,r)}},{key:"min",value:function(e,t){g.assertAxesAreInnerMostDims("min",t,e.rank);var r=_slicedToArray(g.computeOutAndReduceShapes(e.shape,t),2),n=r[0],i=r[1],o=a.sizeFromShape(i),s=e.as2D(-1,o);return this.reduce(s,"min",s.dtype).reshape(n)}},{key:"minimum",value:function(e,t){var r=this,a=this.tryRunOnCpuOrThrow([e,t],(function(){return r.cpuBackend.minimum(e,t)}));if(a)return a;var n=ht().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new BI("\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",e.shape,t.shape):new LI("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",e.shape,t.shape);return this.compileAndRun(n,[e,t])}},{key:"mod",value:function(e,t){var r=ht().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new BI("\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",e.shape,t.shape):new LI("if (b == 0.0) return NAN;\n  return mod(a, b);",e.shape,t.shape);return this.compileAndRun(r,[e,t])}},{key:"maximum",value:function(e,t){var r=this,a=this.tryRunOnCpuOrThrow([e,t],(function(){return r.cpuBackend.maximum(e,t)}));if(a)return a;var n=ht().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new BI("\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",e.shape,t.shape):new LI("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",e.shape,t.shape);return this.compileAndRun(n,[e,t])}},{key:"all",value:function(e,t){g.assertAxesAreInnerMostDims("all",t,e.rank);var r=_slicedToArray(g.computeOutAndReduceShapes(e.shape,t),2),n=r[0],i=r[1],o=a.sizeFromShape(i),s=e.as2D(-1,o);return this.reduce(s,"all",s.dtype).reshape(n)}},{key:"any",value:function(e,t){g.assertAxesAreInnerMostDims("any",t,e.rank);var r=_slicedToArray(g.computeOutAndReduceShapes(e.shape,t),2),n=r[0],i=r[1],o=a.sizeFromShape(i),s=e.as2D(-1,o);return this.reduce(s,"any",s.dtype).reshape(n)}},{key:"floorDiv",value:function(e,t){if(ht().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n","int32");var r=new LI("\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",e.shape,t.shape);return this.compileAndRun(r,[e,t],"int32")}},{key:"packedUnaryOp",value:function(e,t,r){var a=new _R(e.shape,t);return this.compileAndRun(a,[e],r)}},{key:"packedBinaryOp",value:function(e,t,r,a){var n=arguments.length>4&&void 0!==arguments[4]&&arguments[4],i=new BI(r,e.shape,t.shape,n);return this.compileAndRun(i,[e,t],a)}},{key:"makeComplexComponentTensorInfo",value:function(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}},{key:"addN",value:function(e){if(1===e.length)return e[0];if(e.length>ht().get("WEBGL_MAX_TEXTURES_IN_SHADER")){var t=Math.floor(e.length/2),r=this.addN(e.slice(0,t)),a=this.addN(e.slice(t));return this.addN([r,a])}var n=e.map((function(e){return e.dtype})).reduce((function(e,t){return zn(e,t)})),i=e.map((function(e){return e.shape})),o=ht().getBool("WEBGL_PACK")?new vI(e[0].shape,i):new dI(e[0].shape,i);return this.compileAndRun(o,e,n)}},{key:"pow",value:function(e,t){var r=ht().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new BI("\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",e.shape,t.shape):new LI("\nif(a < 0.0 && floor(b) < b){\n  return NAN;\n}\nif (b == 0.0) {\n  return 1.0;\n}\nreturn (round(mod(b, 2.0)) != 1) ?\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",e.shape,t.shape),a=zn(e.dtype,t.dtype);return this.compileAndRun(r,[e,t],a)}},{key:"ceil",value:function(e){if(this.shouldExecuteOnCPU([e])){var t=tI(this.texData.get(e.dataId).values,e.dtype);return this.makeOutput(e.shape,e.dtype,t)}if(ht().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,lR,e.dtype);var r=new rR(e.shape,lR);return this.compileAndRun(r,[e])}},{key:"floor",value:function(e){if(this.shouldExecuteOnCPU([e])){var t=nI(this.texData.get(e.dataId).values,e.dtype);return this.makeOutput(e.shape,e.dtype,t)}if(ht().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,uR,e.dtype);var r=new rR(e.shape,uR);return this.compileAndRun(r,[e])}},{key:"sign",value:function(e){var t=new rR(e.shape,"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n");return this.compileAndRun(t,[e])}},{key:"isNaN",value:function(e){var t=new rR(e.shape,"return float(isnan(x));");return this.compileAndRun(t,[e],"bool")}},{key:"isInf",value:function(e){var t=new rR(e.shape,"return float(isinf(x));");return this.compileAndRun(t,[e],"bool")}},{key:"isFinite",value:function(e){var t=new rR(e.shape,"return float(!isnan(x) && !isinf(x));");return this.compileAndRun(t,[e],"bool")}},{key:"round",value:function(e){var t=new rR(e.shape,"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n");return this.compileAndRun(t,[e])}},{key:"exp",value:function(e){if(this.shouldExecuteOnCPU([e])){var t=rI(this.texData.get(e.dataId).values,e.dtype);return this.makeOutput(e.shape,e.dtype,t)}if(ht().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,hR,e.dtype);var r=new rR(e.shape,hR);return this.compileAndRun(r,[e])}},{key:"expm1",value:function(e){if(this.shouldExecuteOnCPU([e])){var t=aI(this.texData.get(e.dataId).values,e.dtype);return this.makeOutput(e.shape,e.dtype,t)}if(ht().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,cR,e.dtype);var r=new rR(e.shape,cR);return this.compileAndRun(r,[e])}},{key:"softmax",value:function(e,t){var r=a.parseAxisParam([t],e.shape),n=nh(e,r),i=g.expandShapeToKeepDim(n.shape,r),o=Zs(e,n.reshape(i)),s=this.exp(o),l=this.sum(s,r).reshape(i);return Ds(s,l)}},{key:"log",value:function(e){if(this.shouldExecuteOnCPU([e])){var t=iI(this.texData.get(e.dataId).values,e.dtype);return this.makeOutput(e.shape,e.dtype,t)}if(ht().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,"\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",e.dtype);var r=new rR(e.shape,"if (x < 0.0) return NAN;\n  return log(x);");return this.compileAndRun(r,[e])}},{key:"log1p",value:function(e){var t=new rR(e.shape,"return log(1.0 + x);");return this.compileAndRun(t,[e])}},{key:"sqrt",value:function(e){var t=new rR(e.shape,"return sqrt(x);");return this.compileAndRun(t,[e])}},{key:"rsqrt",value:function(e){if(this.shouldExecuteOnCPU([e])){var t=lI(this.texData.get(e.dataId).values,e.dtype);return this.makeOutput(e.shape,e.dtype,t)}var r=new rR(e.shape,"return inversesqrt(x);");return this.compileAndRun(r,[e])}},{key:"reciprocal",value:function(e){var t=new rR(e.shape,"return 1.0 / x;");return this.compileAndRun(t,[e])}},{key:"relu",value:function(e){var t;return t=ht().getBool("WEBGL_PACK")?new _R(e.shape,vR):new rR(e.shape,nR),this.compileAndRun(t,[e])}},{key:"relu6",value:function(e){var t;return t=ht().getBool("WEBGL_PACK")?new _R(e.shape,pR):new rR(e.shape,iR),this.compileAndRun(t,[e])}},{key:"prelu",value:function(e,t){var r=ht().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new BI(zI,e.shape,t.shape):new LI(OI,e.shape,t.shape);return this.compileAndRun(r,[e,t])}},{key:"elu",value:function(e){if(ht().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,gR,e.dtype);var t=new rR(e.shape,"return (x >= 0.0) ? x : (exp(x) - 1.0);");return this.compileAndRun(t,[e])}},{key:"eluDer",value:function(e,t){var r=ht().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new BI("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",e.shape,t.shape):new LI("return (b >= 1.0) ? a : a * (b + 1.0);",e.shape,t.shape);return this.compileAndRun(r,[e,t])}},{key:"selu",value:function(e){var t=new rR(e.shape,oR);return this.compileAndRun(t,[e])}},{key:"clip",value:function(e,t,r){var a,n=(a=ht().getBool("WEBGL_PACK_CLIP")?new VI(e.shape):new PI(e.shape)).getCustomSetupFunc(t,r);return this.compileAndRun(a,[e],null,n)}},{key:"abs",value:function(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){var t=$S(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if(ht().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,aR,e.dtype);var r=new rR(e.shape,aR);return this.compileAndRun(r,[e])}},{key:"complexAbs",value:function(e){var t=this.texData.get(e.dataId),r=new UI(e.shape),a=[this.makeComplexComponentTensorInfo(e,t.complexTensorInfos.real),this.makeComplexComponentTensorInfo(e,t.complexTensorInfos.imag)];return this.compileAndRun(r,a)}},{key:"sigmoid",value:function(e){var t=new rR(e.shape,"return 1.0 / (1.0 + exp(-1.0 * x));");return this.compileAndRun(t,[e])}},{key:"softplus",value:function(e){var t=new rR(e.shape,"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n");return this.compileAndRun(t,[e])}},{key:"asin",value:function(e){var t=new rR(e.shape,"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n");return this.compileAndRun(t,[e])}},{key:"acos",value:function(e){var t=new rR(e.shape,"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n");return this.compileAndRun(t,[e])}},{key:"atan",value:function(e){var t=new rR(e.shape,"if (isnan(x)) return x;\n  return atan(x);\n");return this.compileAndRun(t,[e])}},{key:"sinh",value:function(e){var t=new rR(e.shape,"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n");return this.compileAndRun(t,[e])}},{key:"cosh",value:function(e){var t=new rR(e.shape,"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n");return this.compileAndRun(t,[e])}},{key:"tanh",value:function(e){var t=new rR(e.shape,"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n");return this.compileAndRun(t,[e])}},{key:"asinh",value:function(e){var t=new rR(e.shape,"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));");return this.compileAndRun(t,[e])}},{key:"acosh",value:function(e){var t=new rR(e.shape,"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\n  return log(x + sqrt(x * x - 1.0));");return this.compileAndRun(t,[e])}},{key:"atanh",value:function(e){var t=new rR(e.shape,"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;");return this.compileAndRun(t,[e])}},{key:"erf",value:function(e){var t=new rR(e.shape,fR);return this.compileAndRun(t,[e])}},{key:"step",value:function(e,t){var r=new rR(e.shape,function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return"if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(".concat(e,");\n  ")}(t));return this.compileAndRun(r,[e])}},{key:"conv2dByMatMul",value:function(e,t,r,n,i,o){var s=e.shape,l=this.texData.get(e.dataId),u="channelsLast"===r.dataFormat,h=s[2]%2!=0&&!!l.isPacked;if((1==s[0]*s[1]*s[2]||1===r.outChannels)&&r.inChannels>1e3||!ht().getBool("WEBGL_LAZILY_UNPACK")||!ht().getBool("WEBGL_PACK_BINARY_OPERATIONS")||!h){var c=wo(e,[1,u?s[0]*s[1]*s[2]:s[0]*s[2]*s[3],r.inChannels]),f=wo(t,[1,r.inChannels,r.outChannels]),d=this.fusedBatchMatMul({a:c,b:f,transposeA:!1,transposeB:!1,bias:n,activation:i,preluActivationWeights:o});return wo(d,r.outShape)}var v={dataId:e.dataId,shape:[1,u?s[0]*s[1]*(s[2]+1):s[0]*s[2]*(s[3]+1),r.inChannels],dtype:e.dtype},p=l.shape;l.shape=l.shape.slice(),l.shape[l.shape.length-2]++,a.assert(XS(l.shape,v.shape),(function(){return"packed reshape ".concat(l.shape," to ").concat(v.shape," isn't free")}));var g=wo(t,[1,r.inChannels,r.outChannels]),_=this.fusedBatchMatMul({a:v,b:g,transposeA:!1,transposeB:!1,bias:n,activation:i,preluActivationWeights:o}),m=this.texData.get(_.dataId);return a.assert(m.isPacked,(function(){return"batchMatMul result is expected to be packed"})),l.shape=p,m.shape=r.outShape,gs().makeTensorFromDataId(_.dataId,r.outShape,_.dtype)}},{key:"conv2dWithIm2Row",value:function(e,t,r,a,n,i){var o=r.filterWidth,s=r.filterHeight,l=r.inChannels,u=r.outWidth,h=r.outHeight,c="channelsLast"===r.dataFormat,f=o*s*l,d=h*u,v=[f,d],p=e.squeeze([0]),g=t.reshape([1,f,-1]),_=new xA(v,p.shape,r),m=this.compileAndRun(_,[p]).reshape([1,v[0],v[1]]),y=null!=a,b=null!=i,x=n?TR(n,!0):null,k=new IA(m.shape,g.shape,[1,d,r.outChannels],!0,!1,y,x,b),w=[m,g];return a&&w.push(a),b&&w.push(i),this.compileAndRun(k,w).reshape(c?[1,h,u,r.outChannels]:[1,r.outChannels,h,u])}},{key:"fusedConv2d",value:function(e){var t=e.input,r=e.filter,a=e.convInfo,n=e.bias,i=e.activation,o=e.preluActivationWeights;if(1===a.filterHeight&&1===a.filterWidth&&1===a.dilationHeight&&1===a.dilationWidth&&1===a.strideHeight&&1===a.strideWidth&&("SAME"===a.padInfo.type||"VALID"===a.padInfo.type))return this.conv2dByMatMul(t,r,a,n,i,o);if(ht().getBool("WEBGL_CONV_IM2COL")&&1===t.shape[0])return this.conv2dWithIm2Row(t,r,a,n,i,o);var s=null!=n,l=null!=o,u=i?TR(i,!1):null,h=new KI(a,s,u,l),c=[t,r];return n&&c.push(n),o&&c.push(o),this.compileAndRun(h,c)}},{key:"conv2d",value:function(e,t,r){if(1===r.filterHeight&&1===r.filterWidth&&1===r.dilationHeight&&1===r.dilationWidth&&1===r.strideHeight&&1===r.strideWidth&&("SAME"===r.padInfo.type||"VALID"===r.padInfo.type))return this.conv2dByMatMul(e,t,r);if(ht().getBool("WEBGL_CONV_IM2COL")&&1===e.shape[0])return this.conv2dWithIm2Row(e,t,r);var a=new KI(r);return this.compileAndRun(a,[e,t])}},{key:"conv2dDerInput",value:function(e,t,r){var a=new GI(r);return this.compileAndRun(a,[e,t])}},{key:"conv2dDerFilter",value:function(e,t,r){var a=new WI(r);return this.compileAndRun(a,[e,t])}},{key:"fusedDepthwiseConv2D",value:function(e){var t,r=e.input,a=e.filter,n=e.convInfo,i=e.bias,o=e.activation,s=e.preluActivationWeights,l=ht().getBool("WEBGL_PACK_DEPTHWISECONV")&&n.strideWidth<=2&&n.outChannels/n.inChannels==1,u=o?TR(o,l):null,h=[r,a],c=null!=i,f=null!=s;return c&&h.push(i),f&&h.push(s),l?(t=new JI(n,c,u,f),this.compileAndRun(t,h)):(t=new YI(n,c,u,f),this.compileAndRun(t,h))}},{key:"depthwiseConv2D",value:function(e,t,r){var a;return ht().getBool("WEBGL_PACK_DEPTHWISECONV")&&r.strideWidth<=2&&r.outChannels/r.inChannels==1?(a=new JI(r),this.compileAndRun(a,[e,t])):(a=new YI(r),this.compileAndRun(a,[e,t]))}},{key:"depthwiseConv2DDerInput",value:function(e,t,r){var a=new XI(r);return this.compileAndRun(a,[e,t])}},{key:"depthwiseConv2DDerFilter",value:function(e,t,r){var a=new qI(r);return this.compileAndRun(a,[e,t])}},{key:"conv3d",value:function(e,t,r){var a=new QI(r);return this.compileAndRun(a,[e,t])}},{key:"conv3dDerInput",value:function(e,t,r){var a=new jI(r);return this.compileAndRun(a,[e,t])}},{key:"conv3dDerFilter",value:function(e,t,r){var a=new HI(r);return this.compileAndRun(a,[e,t])}},{key:"unstack",value:function(e,t){for(var r=e.shape[t],a=new Array(e.rank-1),n=0,i=0;i<e.rank;i++)i!==t&&(a[n++]=e.shape[i]);var o=new Array(e.rank).fill(0),s=e.shape.slice();s[t]=1;for(var l=new Array(r),u=0;u<l.length;u++)o[t]=u,l[u]=this.slice(e,o,s).reshape(a);return l}},{key:"avgPool3d",value:function(e,t){var r=new DA(t,"avg",!1);return this.compileAndRun(r,[e],"float32")}},{key:"avgPool3dBackprop",value:function(e,t,r){var a=new DI(r);return this.compileAndRun(a,[e],t.dtype)}},{key:"maxPool3d",value:function(e,t){var r=new DA(t,"max",!1);return this.compileAndRun(r,[e],"float32")}},{key:"maxPool3dBackprop",value:function(e,t,r,a){var n=new DA(a,"max",!0),i=this.compileAndRun(n,[t]),o=new SA(a),s=this.compileAndRun(o,[e,i],t.dtype);return i.dispose(),s}},{key:"resizeBilinear",value:function(e,t,r,a){var n=ht().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new PA(e.shape,t,r,a):new BA(e.shape,t,r,a);return this.compileAndRun(n,[e],"float32")}},{key:"resizeBilinearBackprop",value:function(e,t,r){var a=new zA(e,t,r);return this.compileAndRun(a,[e])}},{key:"resizeNearestNeighbor",value:function(e,t,r,a){var n=new UA(e.shape,t,r,a);return this.compileAndRun(n,[e])}},{key:"resizeNearestNeighborBackprop",value:function(e,t,r){var a=new VA(e,t,r);return this.compileAndRun(a,[e])}},{key:"multinomial",value:function(e,t,r,a){var n=t?e:vc(e),i=new AA(n.shape[0],n.shape[1],r),o=i.getCustomSetupFunc(a);return this.compileAndRun(i,[n],"int32",o)}},{key:"oneHot",value:function(e,t,r,a){var n=new RA(e.size,t,r,a);return this.compileAndRun(n,[e])}},{key:"diag",value:function(e){var t=new iA(e.size);return this.compileAndRun(t,[e])}},{key:"cropAndResize",value:function(e,t,r,a,n,i){var o=new ZI(e.shape,t.shape,a,n,i);return this.compileAndRun(o,[e,t,r],"float32")}},{key:"depthToSpace",value:function(e,t,r){a.assert(t>1,(function(){return"blockSize should be > 1 for depthToSpace, but was: "+t}));var n=e.shape[0],i=("NHWC"===r?e.shape[1]:e.shape[2])*t,o=("NHWC"===r?e.shape[2]:e.shape[3])*t,s=("NHWC"===r?e.shape[3]:e.shape[1])/(t*t),l=new nA("NHWC"===r?[n,i,o,s]:[n,s,i,o],t,r);return this.compileAndRun(l,[e])}},{key:"split",value:function(e,t,r){return bR(e,t,r)}},{key:"scatterND",value:function(e,t,r){var a=g.calculateShapes(t,e,r),n=a.sliceRank,i=a.numUpdates,o=a.sliceSize,s=a.strides,l=a.outputSize,u=[l/o,o],h=e.reshape([i,n]),c=t.reshape([i,o]);if(0===l)return g.reshapeTensor(ii([]),r);var f=qs(0),d=new HA(i,n,h.rank,c.rank,s,u);return this.compileAndRun(d,[c,h,f]).reshape(r)}},{key:"sparseToDense",value:function(e,t,r,a){var n=g.calculateShapes(t,e,r),i=n.sliceRank,o=n.numUpdates,s=n.strides,l=n.outputSize,u=new HA(o,i,e.rank,t.rank,s,[l,1],!1);return this.compileAndRun(u,[t,e,a]).reshape(r)}},{key:"gatherND",value:function(e,t){var r=t.shape,a=r[r.length-1],n=_slicedToArray(g.prepareAndValidate(e,t),4),i=n[0],o=n[1],s=n[2],l=n[3],u=t.reshape([o,a]),h=e.reshape([e.size/s,s]),c=new fA(a,l,[o,s]);return this.compileAndRun(c,[h,u]).reshape(i)}},{key:"fill",value:function(e,t,r){if("string"===(r=r||a.inferDtype(t))){var n=a.getArrayFromDType(r,a.sizeFromShape(e));return n.fill(t),gs().makeTensor(n,e,r,this)}var i=new hA(e,t),o=i.getCustomSetupFunc(t);return this.compileAndRun(i,[],r,o)}},{key:"onesLike",value:function(e){if("string"===e.dtype)throw new Error("onesLike is not supported under string dtype");return this.fill(e.shape,1,e.dtype)}},{key:"zerosLike",value:function(e){return this.fill(e.shape,"string"===e.dtype?"":0,e.dtype)}},{key:"linspace",value:function(e,t,r){return g.linspaceImpl(e,t,r)}},{key:"makeTensorInfo",value:function(e,t,r){var a=this.write(r,e,t);return this.texData.get(a).usage=null,{dataId:a,shape:e,dtype:t}}},{key:"makeOutput",value:function(e,t,r){var a=this.makeTensorInfo(e,t,r).dataId;return gs().makeTensorFromDataId(a,e,t,this)}},{key:"unpackTensor",value:function(e){var t=new mR(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}},{key:"packTensor",value:function(e){var t=new NA(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}},{key:"packedReshape",value:function(e,t){var r=[GS(e.shape)].concat(_toConsumableArray(HS(e.shape))),a={dtype:e.dtype,shape:r,dataId:e.dataId},n=[GS(t)].concat(_toConsumableArray(HS(t))),i=new LA(n,r),o=this.runWebGLProgram(i,[a],e.dtype,null,!0);return{dataId:o.dataId,shape:t,dtype:o.dtype}}},{key:"decode",value:function(e){var t,r=this.texData.get(e),a=r.isPacked,n=r.shape,i=r.dtype,o=jS(n);return t=a?new aA(o):new rA(o),{dtype:i,shape:n,dataId:this.runWebGLProgram(t,[{shape:o,dtype:i,dataId:e}],i,null,!0).dataId}}},{key:"runWebGLProgram",value:function(e,t,r,n){var i=this,o=arguments.length>4&&void 0!==arguments[4]&&arguments[4],s=this.makeTensorInfo(e.outputShape,r),l=this.texData.get(s.dataId);if(e.packedOutput&&(l.isPacked=!0),e.outPackingScheme===xS.DENSE){var u=AS(e.outputShape);l.texShape=u.map((function(e){return 2*e}))}if(null!=e.outTexUsage&&(l.usage=e.outTexUsage),0===a.sizeFromShape(s.shape))return l.values=a.getTypedArrayFromDType(s.dtype,0),s;var h=[],c=t.map((function(t){if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");var r=i.texData.get(t.dataId);if(null==r.texture){if(!e.packedInputs&&a.sizeFromShape(t.shape)<=ht().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:r.values};e.packedInputs&&(r.isPacked=!0,r.shape=t.shape)}else if(!!r.isPacked!=!!e.packedInputs)t=r.isPacked?i.unpackTensor(t):i.packTensor(t),h.push(t),r=i.texData.get(t.dataId);else if(r.isPacked&&!XS(r.shape,t.shape)){var n=t,o=t.shape;t.shape=r.shape,t=i.packedReshape(t,o),h.push(t),r=i.texData.get(t.dataId),n.shape=o}return i.uploadToGPU(t.dataId),{shape:t.shape,texData:r,isUniform:!1}}));this.uploadToGPU(s.dataId);var f,d={shape:s.shape,texData:l,isUniform:!1},v=function(e,t,r){var a="";t.concat(r).forEach((function(e){a+="".concat(e.shape,"_").concat(e.isUniform?"uniform":e.texData.texShape,"_").concat(null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0)}));var n=e.constructor.name;return n+="_"+a+"_"+e.userCode}(e,c,d),p=this.getAndSaveBinary(v,(function(){return function(e,t,r,n){var i=t.userCode,o=r.map((function(e,r){var a={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(a.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[r],shapeInfo:a}})),s=o.map((function(e){return e.shapeInfo})),l={logicalShape:n.shape,texShape:n.texData.texShape,isUniform:!1,isPacked:n.texData.isPacked,flatOffset:null},u=function(e,t,r,n){var i=[];e.forEach((function(e){var t=a.sizeFromShape(e.shapeInfo.logicalShape);e.shapeInfo.isUniform?i.push("uniform float ".concat(e.name).concat(t>1?"[".concat(t,"]"):"",";")):(i.push("uniform sampler2D ".concat(e.name,";")),i.push("uniform int offset".concat(e.name,";")))}));var o,s,l=i.join("\n"),u=e.map((function(e){return function(e,t){var r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],n="";return n+=r?function e(t){switch(t.shapeInfo.logicalShape.length){case 0:return r=t.name,"\n    vec4 ".concat("get"+r.charAt(0).toUpperCase()+r.slice(1),"() {\n      return ").concat(mI().texture2D,"(").concat(r,", halfCR);\n    }\n  ");case 1:return function(e){var t=e.name,r="get"+t.charAt(0).toUpperCase()+t.slice(1),a=e.shapeInfo.texShape,n=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],i=mI();return"\n    vec4 ".concat(r,"(int index) {\n      vec2 uv = packedUVfrom1D(\n        ").concat(n[0],", ").concat(n[1],", index);\n      return ").concat(i.texture2D,"(").concat(t,", uv);\n    }\n  ")}(t);case 2:return function(e){var t=e.shapeInfo.logicalShape,r=e.name,n="get"+r.charAt(0).toUpperCase()+r.slice(1),i=e.shapeInfo.texShape,o=i[0],s=i[1],l=mI();if(null!=i&&a.arraysEqual(t,i))return"\n      vec4 ".concat(n,"(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(").concat(s,".0, ").concat(o,".0);\n\n        return ").concat(l.texture2D,"(").concat(r,", uv);\n      }\n    ");var u=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)];return"\n    vec4 ".concat(n,"(int row, int col) {\n      vec2 uv = packedUVfrom2D(").concat(Math.ceil(t[1]/2),", ").concat(u[0],", ").concat(u[1],", row, col);\n      return ").concat(l.texture2D,"(").concat(r,", uv);\n    }\n  ")}(t);case 3:return function(t){var r=t.shapeInfo.logicalShape,a=t.name,n="get"+a.charAt(0).toUpperCase()+a.slice(1),i=t.shapeInfo.texShape,o=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)];if(1===r[0]){return"\n        ".concat(e(NI(t,r.slice(1))),"\n        vec4 ").concat(n,"(int b, int row, int col) {\n          return ").concat(n,"(").concat(EI(["b","row","col"],[1,2]),");\n        }\n      ")}var s=o[0],l=o[1],u=Math.ceil(r[2]/2);return"\n    vec4 ".concat(n,"(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ").concat(s,", ").concat(l,", ").concat(u*Math.ceil(r[1]/2),", ").concat(u,", b, row, col);\n      return ").concat(mI().texture2D,"(").concat(a,", uv);\n    }\n  ")}(t);default:return function(e){for(var t=e.shapeInfo.logicalShape,r=t.length,a=e.name,n="get"+a.charAt(0).toUpperCase()+a.slice(1),i=e.shapeInfo.texShape,o=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)],s=o[0],l=o[1],u=Math.ceil(t[r-1]/2),h=u*Math.ceil(t[r-2]/2),c="int b, int row, int col",f="b * ".concat(h," + (row / 2) * ").concat(u," + (col / 2)"),d=2;d<r-1;d++)c="int b".concat(d,", ")+c,h*=t[r-d-1],f="b".concat(d," * ").concat(h," + ")+f;return"\n    vec4 ".concat(n,"(").concat(c,") {\n      int index = ").concat(f,";\n      int texR = index / ").concat(l,";\n      int texC = index - texR * ").concat(l,";\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(").concat(l,", ").concat(s,");\n      return ").concat(mI().texture2D,"(").concat(a,", uv);\n    }\n  ")}(t)}var r}(e):function e(t){var r=t.shapeInfo.logicalShape;switch(r.length){case 0:return function(e){var t=e.name,r="get"+t.charAt(0).toUpperCase()+t.slice(1);if(e.shapeInfo.isUniform)return"float ".concat(r,"() {return ").concat(t,";}");var a=_slicedToArray(e.shapeInfo.texShape,2),n=a[0],i=a[1];if(1===n&&1===i)return"\n      float ".concat(r,"() {\n        return sampleTexture(").concat(t,", halfCR);\n      }\n    ");var o=_slicedToArray(e.shapeInfo.texShape,2),s=o[0],l=o[1];return"\n    float ".concat(r,"() {\n      vec2 uv = uvFromFlat(").concat(s,", ").concat(l,", ").concat(II(t),");\n      return sampleTexture(").concat(t,", uv);\n    }\n  ")}(t);case 1:return function(e){var t=e.name,r="get"+t.charAt(0).toUpperCase()+t.slice(1);if(e.shapeInfo.isUniform)return"\n      float ".concat(r,"(int index) {\n        ").concat(AI(e),"\n      }\n    ");var a=e.shapeInfo.texShape,n=a[0],i=a[1];if(1===i&&1===n)return"\n      float ".concat(r,"(int index) {\n        return sampleTexture(").concat(t,", halfCR);\n      }\n    ");var o=II(t);return 1===i?"\n      float ".concat(r,"(int index) {\n        vec2 uv = vec2(0.5, (float(index + ").concat(o,") + 0.5) / ").concat(n,".0);\n        return sampleTexture(").concat(t,", uv);\n      }\n    "):1===n?"\n      float ".concat(r,"(int index) {\n        vec2 uv = vec2((float(index + ").concat(o,") + 0.5) / ").concat(i,".0, 0.5);\n        return sampleTexture(").concat(t,", uv);\n      }\n    "):"\n    float ".concat(r,"(int index) {\n      vec2 uv = uvFromFlat(").concat(n,", ").concat(i,", index + ").concat(o,");\n      return sampleTexture(").concat(t,", uv);\n    }\n  ")}(t);case 2:return function(t){var r=t.shapeInfo.logicalShape,n=t.name,i="get"+n.charAt(0).toUpperCase()+n.slice(1),o=t.shapeInfo.texShape;if(null!=o&&a.arraysEqual(r,o))return"\n    float ".concat(i,"(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(").concat(o[1],".0, ").concat(o[0],".0);\n      return sampleTexture(").concat(n,", uv);\n    }\n  ");var s=a.squeezeShape(r),l=s.newShape,u=s.keptDims;if(l.length<r.length){return"\n      ".concat(e(NI(t,l)),"\n      float ").concat(i,"(int row, int col) {\n        return ").concat(i,"(").concat(EI(["row","col"],u),");\n      }\n    ")}if(t.shapeInfo.isUniform)return"\n      float ".concat(i,"(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(").concat(r[1],", 1)));\n        ").concat(AI(t),"\n      }\n    ");var h=o[0],c=o[1],f=II(n);return 1===c?"\n    float ".concat(i,"(int row, int col) {\n      float index = dot(vec3(row, col, ").concat(f,"), vec3(").concat(r[1],", 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ").concat(h,".0);\n      return sampleTexture(").concat(n,", uv);\n    }\n  "):1===h?"\n    float ".concat(i,"(int row, int col) {\n      float index = dot(vec3(row, col, ").concat(f,"), vec3(").concat(r[1],", 1, 1));\n      vec2 uv = vec2((index + 0.5) / ").concat(c,".0, 0.5);\n      return sampleTexture(").concat(n,", uv);\n    }\n  "):"\n  float ".concat(i,"(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ").concat(r[1]," + col + ").concat(f,";\n    vec2 uv = uvFromFlat(").concat(h,", ").concat(c,", index);\n    return sampleTexture(").concat(n,", uv);\n  }\n")}(t);case 3:return function(t){var r=t.shapeInfo.logicalShape,n=t.name,i="get"+n.charAt(0).toUpperCase()+n.slice(1),o=r[1]*r[2],s=r[2],l=a.squeezeShape(r),u=l.newShape,h=l.keptDims;if(u.length<r.length){return"\n        ".concat(e(NI(t,u)),"\n        float ").concat(i,"(int row, int col, int depth) {\n          return ").concat(i,"(").concat(EI(["row","col","depth"],h),");\n        }\n      ")}if(t.shapeInfo.isUniform)return"\n      float ".concat(i,"(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(").concat(o,", ").concat(s,", 1)));\n        ").concat(AI(t),"\n      }\n    ");var c=t.shapeInfo.texShape,f=c[0],d=c[1],v=t.shapeInfo.flatOffset;return d===o&&null==v?"\n        float ".concat(i,"(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(").concat(s,", 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(").concat(d,".0, ").concat(f,".0);\n          return sampleTexture(").concat(n,", uv);\n        }\n      "):d===s&&null==v?"\n    float ".concat(i,"(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(").concat(r[1],", 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(").concat(d,".0, ").concat(f,".0);\n      return sampleTexture(").concat(n,", uv);\n    }\n  "):"\n      float ".concat(i,"(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ").concat(o," + col * ").concat(s," + depth + ").concat(II(n),";\n        vec2 uv = uvFromFlat(").concat(f,", ").concat(d,", index);\n        return sampleTexture(").concat(n,", uv);\n      }\n  ")}(t);case 4:return function(t){var r=t.shapeInfo.logicalShape,n=t.name,i="get"+n.charAt(0).toUpperCase()+n.slice(1),o=r[3],s=r[2]*o,l=r[1]*s,u=a.squeezeShape(r),h=u.newShape,c=u.keptDims;if(h.length<r.length){return"\n      ".concat(e(NI(t,h)),"\n      float ").concat(i,"(int row, int col, int depth, int depth2) {\n        return ").concat(i,"(").concat(EI(["row","col","depth","depth2"],c),");\n      }\n    ")}if(t.shapeInfo.isUniform)return"\n      float ".concat(i,"(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(").concat(l,", ").concat(s,", ").concat(o,", 1)));\n        ").concat(AI(t),"\n      }\n    ");var f=t.shapeInfo.flatOffset,d=t.shapeInfo.texShape,v=d[0],p=d[1];return p===l&&null==f?"\n      float ".concat(i,"(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(").concat(s,", ").concat(o,", 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(").concat(p,".0, ").concat(v,".0);\n        return sampleTexture(").concat(n,", uv);\n      }\n    "):p===o&&null==f?"\n      float ".concat(i,"(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(").concat(r[1]*r[2],", ").concat(r[2],", 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(").concat(p,".0, ").concat(v,".0);\n        return sampleTexture(").concat(n,", uv);\n      }\n    "):"\n    float ".concat(i,"(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ").concat(l," + col * ").concat(s," +\n          depth * ").concat(o," + depth2;\n      vec2 uv = uvFromFlat(").concat(v,", ").concat(p,", index + ").concat(II(n),");\n      return sampleTexture(").concat(n,", uv);\n    }\n  ")}(t);case 5:return function(t){var r=t.shapeInfo.logicalShape,n=t.name,i="get"+n.charAt(0).toUpperCase()+n.slice(1),o=r[4],s=r[3]*o,l=r[2]*s,u=r[1]*l,h=a.squeezeShape(r),c=h.newShape,f=h.keptDims;if(c.length<r.length){return"\n      ".concat(e(NI(t,c)),"\n      float ").concat(i,"(int row, int col, int depth, int depth2, int depth3) {\n        return ").concat(i,"(").concat(EI(["row","col","depth","depth2","depth3"],f),");\n      }\n    ")}if(t.shapeInfo.isUniform)return"\n      float ".concat(i,"(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(").concat(u,", ").concat(l,", ").concat(s,", ").concat(o,")) +\n          depth3;\n        ").concat(AI(t),"\n      }\n    ");var d=t.shapeInfo.flatOffset,v=t.shapeInfo.texShape,p=v[0],g=v[1];return g===u&&null==d?"\n      float ".concat(i,"(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(").concat(l,", ").concat(s,", ").concat(o,", 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(").concat(g,".0, ").concat(p,".0);\n        return sampleTexture(").concat(n,", uv);\n      }\n    "):g===o&&null==d?"\n      float ".concat(i,"(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(").concat(r[1]*r[2]*r[3],",\n               ").concat(r[2]*r[3],", ").concat(r[3],", 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(").concat(g,".0, ").concat(p,".0);\n        return sampleTexture(").concat(n,", uv);\n      }\n    "):"\n    float ".concat(i,"(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ").concat(u," + col * ").concat(l," + depth * ").concat(s," +\n          depth2 * ").concat(o," + depth3 + ").concat(II(n),";\n      vec2 uv = uvFromFlat(").concat(p,", ").concat(g,", index);\n      return sampleTexture(").concat(n,", uv);\n    }\n  ")}(t);case 6:return function(t){var r=t.shapeInfo.logicalShape,n=t.name,i="get"+n.charAt(0).toUpperCase()+n.slice(1),o=a.squeezeShape(r),s=o.newShape,l=o.keptDims;if(s.length<r.length){return"\n      ".concat(e(NI(t,s)),"\n      float ").concat(i,"(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ").concat(i,"(").concat(EI(["row","col","depth","depth2","depth3","depth4"],l),");\n      }\n    ")}var u=r[5],h=r[4]*u,c=r[3]*h,f=r[2]*c,d=r[1]*f;if(t.shapeInfo.isUniform)return"\n      float ".concat(i,"(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(").concat(d,", ").concat(f,", ").concat(c,", ").concat(h,")) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(").concat(u,", 1)));\n        ").concat(AI(t),"\n      }\n    ");var v=t.shapeInfo.flatOffset,p=t.shapeInfo.texShape,g=p[0],_=p[1];return _===d&&null==v?"\n      float ".concat(i,"(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(").concat(f,", ").concat(c,", ").concat(h,", ").concat(u,")) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(").concat(_,".0, ").concat(g,".0);\n        return sampleTexture(").concat(n,", uv);\n      }\n    "):_===u&&null==v?"\n      float ".concat(i,"(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(").concat(r[1]*r[2]*r[3]*r[4],",\n               ").concat(r[2]*r[3]*r[4],",\n               ").concat(r[3]*r[4],",\n               ").concat(r[4],")) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(").concat(_,".0, ").concat(g,".0);\n        return sampleTexture(").concat(n,", uv);\n      }\n    "):"\n    float ".concat(i,"(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ").concat(d," + col * ").concat(f," + depth * ").concat(c," +\n          depth2 * ").concat(h," + depth3 * ").concat(u," + depth4 + ").concat(II(n),";\n      vec2 uv = uvFromFlat(").concat(g,", ").concat(_,", index);\n      return sampleTexture(").concat(n,", uv);\n    }\n  ")}(t);default:throw new Error(r.length+"-D input sampling is not yet supported")}}(e),e.shapeInfo.logicalShape.length<=t.logicalShape.length&&(n+=r?function(e,t){var r,n=e.name,i=n.charAt(0).toUpperCase()+n.slice(1),o="get"+i+"AtOutCoords",s=e.shapeInfo.logicalShape.length,l=t.logicalShape.length,u=kI(e.shapeInfo.logicalShape,t.logicalShape),h=RI(l),c=l-s,f=["x","y","z","w","u","v"];r=0===s?"":l<2&&u.length>=1?"coords = 0;":u.map((function(e){return"coords.".concat(f[e+c]," = 0;")})).join("\n");var d;d=l<2&&s>0?"coords":e.shapeInfo.logicalShape.map((function(e,t){return"coords."+f[t+c]})).join(", ");var v="return outputValue;",p=1===a.sizeFromShape(e.shapeInfo.logicalShape),g=1===a.sizeFromShape(t.logicalShape);if(1!==s||p||g){if(p&&!g)v=1===l?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(u.length){var _=s-2,m=s-1;u.indexOf(_)>-1&&u.indexOf(m)>-1?v="return vec4(outputValue.x);":u.indexOf(_)>-1?v="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":u.indexOf(m)>-1&&(v="return vec4(outputValue.xx, outputValue.zz);")}}else v="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return"\n    vec4 ".concat(o,"() {\n      ").concat(h," coords = getOutputCoords();\n      ").concat(r,"\n      vec4 outputValue = get").concat(i,"(").concat(d,");\n      ").concat(v,"\n    }\n  ")}(e,t):function(e,t){var r=e.name,n=r.charAt(0).toUpperCase()+r.slice(1),i="get"+n+"AtOutCoords",o=e.shapeInfo.logicalShape.length,s=t.logicalShape.length;if(!e.shapeInfo.isUniform&&o===s&&null==e.shapeInfo.flatOffset&&a.arraysEqual(e.shapeInfo.texShape,t.texShape))return"\n      float ".concat(i,"() {\n        return sampleTexture(").concat(r,", resultUV);\n      }\n    ");var l,u=RI(s),h=kI(e.shapeInfo.logicalShape,t.logicalShape),c=s-o,f=["x","y","z","w","u","v"];l=0===o?"":s<2&&h.length>=1?"coords = 0;":h.map((function(e){return"coords.".concat(f[e+c]," = 0;")})).join("\n");var d;return d=s<2&&o>0?"coords":e.shapeInfo.logicalShape.map((function(e,t){return"coords."+f[t+c]})).join(", "),"\n    float ".concat(i,"() {\n      ").concat(u," coords = getOutputCoords();\n      ").concat(l,"\n      return get").concat(n,"(").concat(d,");\n    }\n  ")}(e,t)),n}(e,t,n)})).join("\n"),h=t.texShape,c=mI(),f=function(e){return"\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ".concat(e.texture2D,"(textureSampler, uv).r;\n    }\n  ")}(c),d=function(e){return"".concat(e.version,"\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ").concat(e.varyingFs," vec2 resultUV;\n    ").concat(e.defineOutput,"\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ").concat(e.defineSpecialNaN,"\n    ").concat(e.defineSpecialInf,"\n    ").concat(e.defineRound,"\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ").concat(wI,"\n    ").concat(CI,"\n    ").concat(TI,"\n  ")}(c);return t.isPacked?(o=function(e,t){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return r=t,1===(n=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)])[0]?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ".concat(n[1],".0);\n      }\n    "):1===n[1]?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ".concat(n[0],".0);\n      }\n    "):"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(".concat(n[0],", ").concat(n[1],"));\n      return 2 * (resTexRC.x * ").concat(n[1]," + resTexRC.y);\n    }\n  ");case 2:return function(e,t){var r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(a.arraysEqual(e,t))return"\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(".concat(r[0],", ").concat(r[1],"));\n      }\n    ");var n=Math.ceil(e[1]/2);return"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(".concat(r[0],", ").concat(r[1],"));\n\n      int index = resTexRC.x * ").concat(r[1]," + resTexRC.y;\n      int r = 2 * (index / ").concat(n,");\n      int c = imod(index, ").concat(n,") * 2;\n\n      return ivec2(r, c);\n    }\n  ")}(e,t);case 3:return function(e,t){var r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],a=Math.ceil(e[2]/2),n=a*Math.ceil(e[1]/2);return"\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(".concat(r[0],", ").concat(r[1],"));\n      int index = resTexRC.x * ").concat(r[1]," + resTexRC.y;\n\n      int b = index / ").concat(n,";\n      index -= b * ").concat(n,";\n\n      int r = 2 * (index / ").concat(a,");\n      int c = imod(index, ").concat(a,") * 2;\n\n      return ivec3(b, r, c);\n    }\n  ")}(e,t);default:return function(e,t){for(var r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],a=Math.ceil(e[e.length-1]/2),n=a*Math.ceil(e[e.length-2]/2),i=n,o="",s="b, r, c",l=2;l<e.length-1;l++)i*=e[e.length-l-1],o="\n      int b".concat(l," = index / ").concat(i,";\n      index -= b").concat(l," * ").concat(i,";\n    ")+o,s="b".concat(l,", ")+s;return"\n    ivec".concat(e.length," getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(").concat(r[0],", ").concat(r[1],"));\n      int index = resTexRC.x * ").concat(r[1]," + resTexRC.y;\n\n      ").concat(o,"\n\n      int b = index / ").concat(n,";\n      index -= b * ").concat(n,";\n\n      int r = 2 * (index / ").concat(a,");\n      int c = imod(index, ").concat(a,") * 2;\n\n      return ivec").concat(e.length,"(").concat(s,");\n    }\n  ")}(e,t)}var r,n}(t.logicalShape,h),s=function(e){return"\n    void setOutput(vec4 val) {\n      ".concat(e.output," = val;\n    }\n  ")}(c)):(o=function(e,t){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return 1===(r=t)[0]?"\n      int getOutputCoords() {\n        return int(resultUV.x * ".concat(r[1],".0);\n      }\n    "):1===r[1]?"\n      int getOutputCoords() {\n        return int(resultUV.y * ".concat(r[0],".0);\n      }\n    "):"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(".concat(r[0],", ").concat(r[1],"));\n      return resTexRC.x * ").concat(r[1]," + resTexRC.y;\n    }\n  ");case 2:return function(e,t){return a.arraysEqual(e,t)?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(".concat(t[0],", ").concat(t[1],"));\n      }\n    "):1===e[1]?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(".concat(t[0],", ").concat(t[1],"));\n        int index = resTexRC.x * ").concat(t[1]," + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    "):1===e[0]?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(".concat(t[0],", ").concat(t[1],"));\n        int index = resTexRC.x * ").concat(t[1]," + resTexRC.y;\n        return ivec2(0, index);\n      }\n    "):"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(".concat(t[0],", ").concat(t[1],"));\n      int index = resTexRC.x * ").concat(t[1]," + resTexRC.y;\n      int r = index / ").concat(e[1],";\n      int c = index - r * ").concat(e[1],";\n      return ivec2(r, c);\n    }\n  ")}(e,t);case 3:return function(e,t){var r=yI(["r","c","d"],e);return"\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(".concat(t[0],", ").concat(t[1],"));\n      int index = resTexRC.x * ").concat(t[1]," + resTexRC.y;\n      ").concat(r,"\n      return ivec3(r, c, d);\n    }\n  ")}(e,t);case 4:return function(e,t){var r=yI(["r","c","d","d2"],e);return"\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(".concat(t[0],", ").concat(t[1],"));\n      int index = resTexRC.x * ").concat(t[1]," + resTexRC.y;\n      ").concat(r,"\n      return ivec4(r, c, d, d2);\n    }\n  ")}(e,t);case 5:return function(e,t){var r=yI(["r","c","d","d2","d3"],e);return"\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(".concat(t[0],",\n                             ").concat(t[1],"));\n\n      int index = resTexRC.x * ").concat(t[1]," + resTexRC.y;\n\n      ").concat(r,"\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  ")}(e,t);case 6:return function(e,t){var r=yI(["r","c","d","d2","d3","d4"],e);return"\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(".concat(t[0],", ").concat(t[1],"));\n      int index = resTexRC.x * ").concat(t[1]," + resTexRC.y;\n\n      ").concat(r,"\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  ")}(e,t);default:throw new Error(e.length+"-D output sampling is not yet supported")}var r}(t.logicalShape,h),s=function(e){return"\n    void setOutput(float val) {\n      ".concat(e.output," = vec4(val, 0, 0, 0);\n    }\n  ")}(c)),n&&(d+=SI),[d,f,s,l,o,u,r].join("\n")}(o,l,i,t.packedInputs),h=e.createProgram(u),c=null,f=e.getUniformLocation(h,"NAN",!1);1===ht().getNumber("WEBGL_VERSION")&&(c=e.getUniformLocation(h,"INFINITY",!1));for(var d={},v=0;v<t.variableNames.length;v++){var p=t.variableNames[v];d[p]=e.getUniformLocation(h,p,false),d["offset"+p]=e.getUniformLocation(h,"offset"+p,false)}return{program:t,source:u,webGLProgram:h,uniformLocations:d,inShapeInfos:s,outShapeInfo:l,infLoc:c,nanLoc:f}}(i.gpgpu,e,c,d)})),g=null!=this.activeTimers;if(g&&(f=this.startTimer()),function(e,t,r,n,i){bA(t.inShapeInfos,r),bA([t.outShapeInfo],[n]);var o=n.texData.texture,s=n.texData.texShape;n.texData.isPacked?e.setOutputPackedMatrixTexture(o,s[0],s[1]):e.setOutputMatrixTexture(o,s[0],s[1]),e.setProgram(t.webGLProgram),1===ht().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN),r.forEach((function(r,n){var i=t.program.variableNames[n],o=t.uniformLocations[i],s=t.uniformLocations["offset"+i];if(null!=o)if(r.isUniform)if(a.sizeFromShape(r.shape)<2)e.gl.uniform1f(o,r.uniformValues[0]);else{var l=r.uniformValues;l instanceof Float32Array||(l=new Float32Array(l)),e.gl.uniform1fv(o,l)}else null!=r.texData.slice&&null!=s&&e.gl.uniform1i(s,r.texData.slice.flatOffset),e.setInputMatrixTexture(r.texData.texture,o,n)})),null!=i&&i(e,t.webGLProgram),e.executeProgram()}(this.gpgpu,p,c,d,n),h.forEach((function(e){return i.disposeIntermediateTensorInfo(e)})),g&&(f=this.endTimer(f),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(f)})),!ht().getBool("WEBGL_LAZILY_UNPACK")&&l.isPacked&&!1===o){var _=this.unpackTensor(s);return this.disposeIntermediateTensorInfo(s),_}return s}},{key:"compileAndRun",value:function(e,t,r,a){var n=arguments.length>4&&void 0!==arguments[4]&&arguments[4],i=this.runWebGLProgram(e,t,r=r||t[0].dtype,a,n);return gs().makeTensorFromDataId(i.dataId,i.shape,i.dtype)}},{key:"getAndSaveBinary",value:function(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}},{key:"getTextureManager",value:function(){return this.textureManager}},{key:"dispose",value:function(){var e=this;this.disposed||(ht().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach((function(t){e.gpgpu.deleteProgram(e.binaryCache[t].webGLProgram),delete e.binaryCache[t]})),this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}},{key:"floatPrecision",value:function(){var e=this;return null==this.floatPrecisionValue&&(this.floatPrecisionValue=ys((function(){if(!ht().get("WEBGL_RENDER_FLOAT32_ENABLED")){var t=ht().getBool("DEBUG");ht().set("DEBUG",!1);var r=e.abs(qs(1e-8)).dataSync()[0];if(ht().set("DEBUG",t),r>0)return 32}return 16}))),this.floatPrecisionValue}},{key:"epsilon",value:function(){return 32===this.floatPrecision()?1e-7:1e-4}},{key:"uploadToGPU",value:function(e){var t=this.texData.get(e),r=t.shape,n=t.dtype,i=t.values,o=t.texture,s=t.usage,l=t.isPacked;if(null==o){var u,h=null!=this.activeTimers;h&&(u=a.now());var c=t.texShape;if(null==c&&(c=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=ht().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t&&(r*=2,1===(e=e.map((function(t,r){return r>=e.length-2?a.nearestLargerEven(e[r]):e[r]}))).length&&(e=[2,e[0]])),2!==e.length){var n=a.squeezeShape(e);e=n.newShape}var i=a.sizeFromShape(e);if(e.length<=1&&i<=r)return[1,i];if(2===e.length&&e[0]<=r&&e[1]<=r)return e;if(3===e.length&&e[0]*e[1]<=r&&e[2]<=r)return[e[0]*e[1],e[2]];if(3===e.length&&e[0]<=r&&e[1]*e[2]<=r)return[e[0],e[1]*e[2]];if(4===e.length&&e[0]*e[1]*e[2]<=r&&e[3]<=r)return[e[0]*e[1]*e[2],e[3]];if(4===e.length&&e[0]<=r&&e[1]*e[2]*e[3]<=r)return[e[0],e[1]*e[2]*e[3]];if(t){var o,s=GS(e),l=2,u=2;return e.length&&(l=(o=_slicedToArray(HS(e),2))[0],u=o[1]),i=s*(l/2)*(u/2),a.sizeToSquarishShape(i).map((function(e){return 2*e}))}return a.sizeToSquarishShape(i)}(r,l),t.texShape=c),null!=i){var f,d,v=jS(r),p=c[1],g=c[0],_=i instanceof Uint8Array;l?(p=(f=_slicedToArray(RS(c[0],c[1]),2))[0],g=f[1],d=new uA(v,[g,p],_)):d=new lA(v,[g,p],_);var m=this.makeTensorInfo([g,p],n);this.texData.get(m.dataId).usage=_?kS.PIXELS:kS.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(m.dataId),p,g,i);var y=this.runWebGLProgram(d,[m],n,null,!0),b=this.texData.get(y.dataId);t.texture=b.texture,t.texShape=b.texShape,t.isPacked=b.isPacked,t.usage=b.usage,this.disposeIntermediateTensorInfo(m),this.texData.delete(y.dataId),t.values=null,h&&(this.uploadWaitMs+=a.now()-u)}else{var x=this.acquireTexture(c,s,n,l);t.texture=x}}}},{key:"convertAndCacheOnCPU",value:function(e,t){var r=this.texData.get(e),a=r.dtype;return this.releaseGPUData(e),null!=t&&(r.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){for(var r="int32"===t?new Int32Array(e.length):new Uint8Array(e.length),a=0;a<r.length;++a)r[a]=Math.round(e[a]);return r}throw new Error("Unknown dtype "+t)}(t,a)),r.values}},{key:"acquireTexture",value:function(e,t,r,a){if(this.numBytesInGPU+=this.computeBytes(e,r),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){var n=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn("High memory usage in GPU: ".concat(n," MB, most likely due to a memory leak"))}return this.textureManager.acquireTexture(e,t,a)}},{key:"computeBytes",value:function(e,t){return e[0]*e[1]*a.bytesPerElement(t)}},{key:"tryRunOnCpuOrThrow",value:function(e,t){if(this.shouldExecuteOnCPU(e))try{return t()}catch(r){if(ht().getBool("IS_TEST"))throw new Error("CPU forwarding failed")}return null}}]),o}(ge);function IR(e){var t=e.inputs,r=e.backend,a=t.x;return r.incRef(a.dataId),{dataId:a.dataId,shape:a.shape,dtype:a.dtype}}i.isBrowser()&&Rs("webgl",(function(){return new SR}),2);var AR={kernelName:kr,backendName:"webgl",kernelFunc:IR};function RR(e){var t=e.inputs,r=e.backend,a=t.real,n=t.imag,i=r.makeTensorInfo(a.shape,"complex64"),o=r.texData.get(i.dataId),s=IR({inputs:{x:a},backend:r});r.texData.get(s.dataId).complexParentRefCount++;var l=IR({inputs:{x:n},backend:r});return r.texData.get(l.dataId).complexParentRefCount++,o.complexTensorInfos={real:s,imag:l},i}var NR={kernelName:Pt,backendName:"webgl",kernelFunc:RR};function ER(e){return function(t){var r=t.inputs,a=t.backend,n=r.x,i=a,o=new rR(n.shape,e);return i.runWebGLProgram(o,[n],n.dtype)}}function FR(e){var t=e.opSnippet,r=e.packedOpSnippet,a=e.checkOutOfBounds,n=void 0!==a&&a,i=e.supportsComplex,o=void 0!==i&&i,s=e.cpuKernelImpl,l=e.dtype;return function(e){var a=e.inputs,i=e.backend,u=a.a,h=a.b,c=i;if(o&&"complex64"===u.dtype){var f=c.texData.get(u.dataId),d=c.texData.get(h.dataId),v=[[f.complexTensorInfos.real,d.complexTensorInfos.real],[f.complexTensorInfos.imag,d.complexTensorInfos.imag]].map((function(e){var r=_slicedToArray(e,2),a=r[0],n=r[1],i={dataId:a.dataId,dtype:a.dtype,shape:u.shape},o={dataId:n.dataId,dtype:n.dtype,shape:h.shape},s=new LI(t,u.shape,h.shape);return c.runWebGLProgram(s,[i,o],zn(a.dtype,n.dtype))})),p=_slicedToArray(v,2),g=p[0],_=p[1],m=RR({inputs:{real:g,imag:_},backend:c});return c.disposeIntermediateTensorInfo(g),c.disposeIntermediateTensorInfo(_),m}var y,b=l||zn(u.dtype,h.dtype);if(c.shouldExecuteOnCPU([u,h])&&null!=s){var x=c.texData.get(u.dataId),k=c.texData.get(h.dataId),w=_slicedToArray(s(u.shape,h.shape,x.values,k.values,b),2),C=w[0],T=w[1],S=c.makeTensorInfo(T,b);return c.texData.get(S.dataId).values=C,S}return y=ht().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=r?new BI(r,u.shape,h.shape,n):new LI(t,u.shape,h.shape),c.runWebGLProgram(y,[u,h],b)}}var MR="return a + b;",DR=FR({opSnippet:MR,packedOpSnippet:MR,supportsComplex:!0,cpuKernelImpl:eI}),OR={kernelName:mt,backendName:"webgl",kernelFunc:DR},LR=FR({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),zR={kernelName:At,backendName:"webgl",kernelFunc:LR},BR={kernelName:Rt,backendName:"webgl",kernelFunc:function(e){var t=e.inputs,r=e.backend,n=e.attrs,i=t.x;JS(i,"avgPool");var o=n.filterSize,s=n.strides,l=n.pad,u=n.dimRoundingMode;a.assert(g.eitherStridesOrDilationsAreOne(s,1),(function(){return"Error in avgPool: Either strides or dilations must be 1. Got strides ".concat(s," and dilations '1'")}));var h=g.computePool2DInfo(i.shape,o,s,1,l,u);if(1===h.filterWidth&&1===h.filterHeight&&a.arraysEqual(h.inShape,h.outShape))return IR({inputs:{x:i},backend:r});var c=new MA(h,"avg",!1);return r.runWebGLProgram(c,[i],"float32")}},PR={kernelName:Nt,backendName:"webgl",kernelFunc:function(e){var t=e.inputs,r=e.backend,a=e.attrs,n=t.dy,i=t.input,o=i;JS([n,i],"avgPoolBackprop");var s=a.filterSize,l=a.strides,u=a.pad,h=g.computePool2DInfo(o.shape,s,l,1,u),c=new MI(h);return r.runWebGLProgram(c,[n],o.dtype)}},VR=function e(t,r,a,n,i,o){_classCallCheck(this,e),this.outputShape=[],this.variableNames=["x","mean","variance"],g.assertAndGetBroadcastShape(t,r),g.assertAndGetBroadcastShape(t,a);var s="0.0";null!=n&&(g.assertAndGetBroadcastShape(t,n),this.variableNames.push("offset"),s="getOffsetAtOutCoords()");var l="1.0";null!=i&&(g.assertAndGetBroadcastShape(t,i),this.variableNames.push("scale"),l="getScaleAtOutCoords()"),this.outputShape=t,this.userCode="\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ".concat(s,";\n        float scale = ").concat(l,";\n        float inv = scale * inversesqrt(variance + float(").concat(o,"));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    ")},UR=function e(t,r,a,n,i,o){_classCallCheck(this,e),this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],g.assertAndGetBroadcastShape(t,r),g.assertAndGetBroadcastShape(t,a);var s="vec4(0.0)";null!=n&&(g.assertAndGetBroadcastShape(t,n),this.variableNames.push("offset"),s="getOffsetAtOutCoords()");var l="vec4(1.0)";null!=i&&(g.assertAndGetBroadcastShape(t,i),this.variableNames.push("scale"),l="getScaleAtOutCoords()"),this.outputShape=t,this.userCode="\n      void main() {\n        vec4 offset = ".concat(s,";\n        vec4 scale = ").concat(l,";\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(").concat(o,"));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    ")},WR={kernelName:_r,backendName:"webgl",kernelFunc:function(e){var t=e.inputs,r=e.backend,n=e.attrs,i=t.x,o=t.mean,s=t.variance,l=t.offset,u=t.scale;a.assert(o.shape.length===s.shape.length,(function(){return"Batch normalization gradient requires mean and variance to have equal ranks."})),a.assert(null==l||o.shape.length===l.shape.length,(function(){return"Batch normalization gradient requires mean and offset to have equal ranks."})),a.assert(null==u||o.shape.length===u.shape.length,(function(){return"Batch normalization gradient requires mean and scale to have equal ranks."}));var h=n.varianceEpsilon;null==h&&(h=.001);var c=[i,o,s],f=null;null!=l&&(f=l.shape,c.push(l));var d=null;null!=u&&(d=u.shape,c.push(u));var v=ht().getBool("WEBGL_PACK_NORMALIZATION")?new UR(i.shape,o.shape,s.shape,f,d,h):new VR(i.shape,o.shape,s.shape,f,d,h);return r.runWebGLProgram(v,c,c[0].dtype)}},GR=FR({opSnippet:"return float(a != b);",dtype:"bool"}),HR={kernelName:$r,backendName:"webgl",kernelFunc:GR};function jR(e){var t=e.inputs,r=e.backend,a=t.input;return IR({inputs:{x:r.texData.get(a.dataId).complexTensorInfos.real},backend:r})}var qR={kernelName:ca,backendName:"webgl",kernelFunc:jR},XR={kernelName:Lt,backendName:"webgl",kernelFunc:function e(t){var r=t.inputs,n=t.backend,i=t.attrs,o=r.x,s=i.dtype;if("complex64"===s){if("complex64"===o.dtype)return IR({inputs:{x:o},backend:n});var l=ph(o.shape),u=e({inputs:{x:o},backend:n,attrs:{dtype:"float32"}}),h=RR({inputs:{real:u,imag:l},backend:n});return l.dispose(),n.disposeIntermediateTensorInfo(u),h}if("complex64"===o.dtype){var c=jR({inputs:{input:o},backend:n}),f=e({inputs:{x:c},backend:n,attrs:{dtype:s}});return n.disposeIntermediateTensorInfo(c),f}if(!a.hasEncodingLoss(o.dtype,s)){var d=IR({inputs:{x:o},backend:n});return{dataId:d.dataId,shape:d.shape,dtype:s}}if("int32"===s)return function(e,t){var r=new rR(e.shape,"return float(int(x));"),a=t.runWebGLProgram(r,[e],"int32");return{dataId:a.dataId,shape:a.shape,dtype:a.dtype}}(o,n);if("bool"===s){var v=n.makeTensorInfo([],"bool",a.getTypedArrayFromDType("bool",1)),p=GR({inputs:{a:o,b:v},backend:n});return n.disposeIntermediateTensorInfo(v),p}throw new Error("Error in Cast: failed to cast ".concat(o.dtype," to ").concat(s))}},KR=function e(t){_classCallCheck(this,e),this.outputShape=[],this.outputShape=g.computeOutShape(t,1),this.variableNames=t.map((function(e,t){return"T"+t}));var r=new Array(t.length-1);r[0]=t[0][1];for(var a=1;a<r.length;a++)r[a]=r[a-1]+t[a][1];for(var n=["if (yC < ".concat(r[0],") setOutput(getT0(yR, yC));")],i=1;i<r.length;i++)n.push("else if (yC < ".concat(r[i],") setOutput(getT").concat(i,"(yR, yC-").concat(r[i-1],"));"));n.push("else setOutput(getT".concat(r.length,"(yR, yC-").concat(r[r.length-1],"));")),this.userCode="\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ".concat(n.join("\n        "),"\n      }\n    ")},QR=function e(t,r){_classCallCheck(this,e),this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=g.computeOutShape(t,r);var a=this.outputShape,n=a.length,i=RI(n),o=_I("coords",n),s=["x","y","z","w","u","v"].slice(0,n);this.variableNames=t.map((function(e,t){return"T"+t}));var l=new Array(t.length-1);l[0]=t[0][r];for(var u=1;u<l.length;u++)l[u]=l[u-1]+t[u][r];for(var h=s[r],c=s.slice(-2),f=s.join(),d="if (".concat(h," < ").concat(l[0],") {\n        return getChannel(\n            getT0(").concat(f,"), vec2(").concat(c.join(),"));\n        }"),v=1;v<l.length;v++){var p=l[v-1];d+="\n        if (".concat(h," < ").concat(l[v],"  && ").concat(h," >= ").concat(l[v-1],") {\n          return getChannel(\n            getT").concat(v,"(").concat(YR(s,h,p),"),\n            vec2(").concat(YR(c,h,p),"));\n        }")}var _=l[l.length-1];d+="\n        return getChannel(\n          getT".concat(l.length,"(").concat(YR(s,h,_),"),\n          vec2(").concat(YR(c,h,_),"));"),this.userCode="\n      float getValue(".concat(s.map((function(e){return"int "+e})),") {\n        ").concat(d,"\n      }\n\n      void main() {\n        ").concat(i," coords = getOutputCoords();\n        vec4 result = vec4(getValue(").concat(o,"), 0., 0., 0.);\n\n        ").concat(o[n-1]," = ").concat(o[n-1]," + 1;\n        if (").concat(o[n-1]," < ").concat(a[n-1],") {\n          result.g = getValue(").concat(o,");\n        }\n\n        ").concat(o[n-2]," = ").concat(o[n-2]," + 1;\n        if (").concat(o[n-2]," < ").concat(a[n-2],") {\n          result.a = getValue(").concat(o,");\n        }\n\n        ").concat(o[n-1]," = ").concat(o[n-1]," - 1;\n        if (").concat(o[n-2]," < ").concat(a[n-2]," &&\n            ").concat(o[n-1]," < ").concat(a[n-1],") {\n          result.b = getValue(").concat(o,");\n        }\n        setOutput(result);\n      }\n    ")};function YR(e,t,r){var a=e.indexOf(t);return e.map((function(e,t){return t===a?"".concat(e," - ").concat(r):e})).join()}function JR(e){var t=e.inputs,r=e.backend,a=t.input;return IR({inputs:{x:r.texData.get(a.dataId).complexTensorInfos.imag},backend:r})}var ZR={kernelName:Cr,backendName:"webgl",kernelFunc:JR};function $R(e){var t=e.inputs,r=e.backend,n=e.attrs,i=t.x,o=n.shape,s=r,l=a.sizeFromShape(i.shape),u=a.inferFromImplicitShape(o,l),h=a.sizeFromShape(u);a.assert(l===h,(function(){return"The new shape (".concat(u,") has ").concat(h," elements and the old shape (").concat(i.shape,") has ").concat(l," elements. The new shape and old shape must have the same number of elements.")}));var c=s.texData.get(i.dataId);return!c.isPacked||XS(i.shape,u)||null!==c.texture&&XS(c.shape,u)?(s.incRef(i.dataId),{dataId:i.dataId,shape:u,dtype:i.dtype}):function(e,t,r){var a=[GS(e.shape)].concat(_toConsumableArray(HS(e.shape))),n={dtype:e.dtype,shape:a,dataId:e.dataId},i=[GS(t)].concat(_toConsumableArray(HS(t))),o=new LA(i,a),s=r.runWebGLProgram(o,[n],e.dtype,null,!0);return{dataId:s.dataId,shape:t,dtype:s.dtype}}(i,u,s)}var eN={kernelName:va,backendName:"webgl",kernelFunc:$R},tN={kernelName:Vt,backendName:"webgl",kernelFunc:function(e){var t=e.inputs,r=e.backend,n=e.attrs.axis,i=a.parseAxisParam(n,t[0].shape)[0],o=g.computeOutShape(t.map((function(e){return e.shape})),i);if(0===a.sizeFromShape(o))return r.makeTensorInfo(o,t[0].dtype,[]);var s=t.filter((function(e){return a.sizeFromShape(e.shape)>0}));if(1===s.length)return s[0];var l=s.map((function(e){return e.shape}));return g.assertParamsConsistent(l,i),function e(t,r,n){var i=t[0].dtype;if("complex64"===i){var o=t.map((function(e){return jR({inputs:{input:e},backend:n})})),s=t.map((function(e){return JR({inputs:{input:e},backend:n})})),l=e(o,r,n),u=e(s,r,n),h=RR({inputs:{real:l,imag:u},backend:n});return o.forEach((function(e){return n.disposeIntermediateTensorInfo(e)})),s.forEach((function(e){return n.disposeIntermediateTensorInfo(e)})),n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),h}if(t.length>ht().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){var c=Math.floor(t.length/2),f=e(t.slice(0,c),r,n),d=e(t.slice(c),r,n),v=e([f,d],r,n);return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(d),v}if(ht().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&t[0].shape.length>1){var p=new QR(t.map((function(e){return e.shape})),r);return n.runWebGLProgram(p,t,i)}var _=g.computeOutShape(t.map((function(e){return e.shape})),r),m=t.map((function(e){return $R({inputs:{x:e},attrs:{shape:[-1,a.sizeFromShape(e.shape.slice(r))]},backend:n})})),y=new KR(m.map((function(e){return e.shape}))),b=n.runWebGLProgram(y,m,i);m.forEach((function(e){return n.disposeIntermediateTensorInfo(e)}));var x=$R({inputs:{x:b},attrs:{shape:_},backend:n});return n.disposeIntermediateTensorInfo(b),x}(s,i,r)}},rN=ER("if (isnan(x)) return x;\n  return cos(x);\n"),aN={kernelName:Xt,backendName:"webgl",kernelFunc:rN},nN=FR({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),iN={kernelName:ir,backendName:"webgl",kernelFunc:nN},oN=function e(t,r,a){_classCallCheck(this,e),this.variableNames=["real","imag"];var n=r[1];this.outputShape=r;var i,o=a?"2.0 * "+Math.PI:"-2.0 * "+Math.PI,s=a?n+".0":"1.0";if("real"===t)i="return real * expR - imag * expI;";else{if("imag"!==t)throw new Error('FFT component must be either "real" or "imag", got '.concat(t,"."));i="return real * expI + imag * expR;"}this.userCode="\n      const float exponentMultiplier = ".concat(o,";\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ").concat(i,"\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(").concat(n,");\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ").concat(n,"; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ").concat(s,";\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    ")};function sN(e,t,r){var n=r.texData.get(e.dataId),i=a.sizeFromShape(e.shape),o=e.shape[e.shape.length-1],s=$R({inputs:{x:e},backend:r,attrs:{shape:[i/o,o]}}).shape,l=new oN("real",s,t),u=new oN("imag",s,t),h=[{dataId:n.complexTensorInfos.real.dataId,dtype:n.complexTensorInfos.real.dtype,shape:s},{dataId:n.complexTensorInfos.imag.dataId,dtype:n.complexTensorInfos.imag.dtype,shape:s}],c=r.runWebGLProgram(l,h,"float32"),f=r.runWebGLProgram(u,h,"float32"),d=RR({inputs:{real:c,imag:f},backend:r});r.disposeIntermediateTensorInfo(c),r.disposeIntermediateTensorInfo(f);var v=$R({inputs:{x:d},backend:r,attrs:{shape:e.shape}});return r.disposeIntermediateTensorInfo(v),v}var lN,uN={kernelName:fr,backendName:"webgl",kernelFunc:function(e){var t=e.inputs,r=e.backend;return sN(t.input,!1,r)}},hN=function e(t){_classCallCheck(this,e),this.variableNames=["Image"],this.outputShape=[];var r=t[2];this.outputShape=t,this.userCode="\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ".concat(r," - x;\n          float outputValue;\n          if(coordX >= 0 && coordX < ").concat(r,") {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    ")},cN={kernelName:vr,backendName:"webgl",kernelFunc:function(e){var t=e.inputs,r=e.backend,a=t.image,n=r,i=new hN(a.shape);return n.runWebGLProgram(i,[a],a.dtype)}},fN=function e(t){_classCallCheck(this,e),this.variableNames=["A"];var r=mI(),a=_slicedToArray(t,2),n=a[0],i=a[1];this.outputShape=t,this.userCode="\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(".concat(i,".0, ").concat(n,".0);\n\n        vec4 values = ").concat(r.texture2D,"(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    ")},dN=function e(t){_classCallCheck(this,e),this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;var r=mI(),a=_slicedToArray(t,2),n=a[0],i=a[1];this.outputShape=t,this.userCode="\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(".concat(i,".0, ").concat(n,".0);\n            vec4 values = ").concat(r.texture2D,"(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ").concat(r.output," = result;\n      }\n    ")},vN={kernelName:Za,backendName:"webgl",kernelFunc:function(e){var t=e.inputs,r=e.backend,a=e.attrs,n=t.pixels,i=a.numChannels,o="undefined"!=typeof HTMLVideoElement&&n instanceof HTMLVideoElement,s="undefined"!=typeof HTMLImageElement&&n instanceof HTMLImageElement,l=_slicedToArray(o?[n.videoWidth,n.videoHeight]:[n.width,n.height],2),u=l[0],h=l[1],c=[h,u],f=[h,u,i];(s||o)&&(null==lN&&(lN=document.createElement("canvas").getContext("2d")),lN.canvas.width=u,lN.canvas.height=h,lN.drawImage(n,0,0,u,h),n=lN.canvas);var d=r.makeTensorInfo(c,"int32");r.texData.get(d.dataId).usage=kS.PIXELS,r.gpgpu.uploadPixelDataToTexture(r.getTexture(d.dataId),n);var v=ht().getBool("WEBGL_PACK")?new dN(f):new fN(f),p=r.runWebGLProgram(v,[d],"int32");return r.disposeData(d.dataId),p}},pN={kernelName:wr,backendName:"webgl",kernelFunc:function(e){var t=e.inputs,r=e.backend;return sN(t.input,!0,r)}},gN=function e(t,r){_classCallCheck(this,e),this.variableNames=["x"];var n=t.windowSize,i=t.batchSize,o=t.inSize,s=t.outSize;this.outputShape=[i,s];var l=4*Math.floor(n/4),u=n%4,h="sumValue += dot(values, ones);";if(null!=r){var c=1/r;h="sumValue += dot(values * ".concat(a.isInt(c)?c.toPrecision(2):c,", ones);")}var f="";o%n>0&&(f="\n        if (inIdx < 0 || inIdx >= ".concat(o,") {\n          return 0.0;\n        }\n      ")),this.userCode="\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ".concat(f,"\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ").concat(n,";\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ").concat(l,"; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ").concat(h,"\n        }\n\n        int inIdx = inOffset + ").concat(l,";\n        if (").concat(1===u,") {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ").concat(h,"\n        } else if (").concat(2===u,") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ").concat(h,"\n        } else if (").concat(3===u,") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ").concat(h,"\n        }\n        setOutput(sumValue);\n      }\n    ")};function _N(e,t,r,a){for(var n=function(e){for(var t=[];0===t.length||1!==t[t.length-1].outSize;){var r=t.length?t[t.length-1].outSize:e[1],a=g.computeOptimalWindowSize(r);t.push({inSize:r,windowSize:a,outSize:Math.ceil(r/a)})}return t}(e.shape),i=e,o=0;o<n.length;o++){var s,l,u=n[o],h=u.inSize,c=u.windowSize,f=u.outSize;s="mean"===r?0===o?new gN({windowSize:c,inSize:h,batchSize:e.shape[0],outSize:f},h):new gN({windowSize:c,inSize:h,batchSize:e.shape[0],outSize:f}):new OA({windowSize:c,inSize:h,batchSize:e.shape[0],outSize:f},r),l=i,i=a.runWebGLProgram(s,[i],t),l.dataId!==e.dataId&&a.disposeIntermediateTensorInfo(l)}return i}var mN=function e(t,r){_classCallCheck(this,e),this.variableNames=["A"];for(var a=new Array(t.length),n=0;n<a.length;n++)a[n]=t[r[n]];this.outputShape=a,this.rank=a.length;var i=RI(this.rank),o=function(e){var t=e.length;if(t>6)throw Error("Transpose for rank ".concat(t," is not yet supported"));for(var r=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],a=new Array(t),n=0;n<e.length;n++)a[e[n]]=r[n];return a.join()}(r);this.userCode="\n    void main() {\n      ".concat(i," resRC = getOutputCoords();\n      setOutput(getA(").concat(o,"));\n    }\n    ")},yN=function e(t,r){_classCallCheck(this,e),this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;for(var a=new Array(t.length),n=0;n<a.length;n++)a[n]=t[r[n]];if(this.outputShape=a,this.rank=a.length,this.rank>6)throw Error("Packed transpose for rank ".concat(this.rank," is not yet supported."));for(var i=RI(this.rank),o=gI("rc",this.rank),s=new Array(this.rank),l=0;l<r.length;l++)s[r[l]]=o[l];var u="vec2(".concat(s.slice(-2).join(),")"),h="++".concat(o[this.rank-1]," < ").concat(a[this.rank-1]),c="getChannel(getA(".concat(s.join(),"), ").concat(u,")");this.userCode="\n    void main() {\n      ".concat(i," rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ").concat(c,";\n      if(").concat(h,") {\n        result[1] = ").concat(c,";\n      }\n      --").concat(o[this.rank-1],";\n      if(++").concat(o[this.rank-2]," < ").concat(a[this.rank-2],") {\n        result[2] = ").concat(c,";\n        if(").concat(h,") {\n          result[3] = ").concat(c,";\n        }\n      }\n      setOutput(result);\n    }\n    ")};function bN(e,t,r){var a=ht().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new yN(e.shape,t):new mN(e.shape,t);return r.runWebGLProgram(a,[e],e.dtype)}for(var xN={kernelName:Pr,backendName:"webgl",kernelFunc:function(e){var t=e.inputs,r=e.attrs,n=e.backend,i=t.x,o=r.reductionIndices,s=r.keepDims,l=n,u=i.shape.length,h=a.parseAxisParam(o,i.shape),c=h,f=g.getAxesPermutation(c,u),d=null!=f,v=l.shouldExecuteOnCPU([i]),p=i;if(d){if(v){for(var _=l.texData.get(p.dataId).values,m=new Array(u),y=0;y<m.length;y++)m[y]=i.shape[f[y]];var b=cI(_,i.shape,i.dtype,f,m);p=l.makeTensorInfo(m,i.dtype),l.texData.get(p.dataId).values=b}else p=bN(i,f,l);c=g.getInnerMostAxes(c.length,u)}g.assertAxesAreInnerMostDims("max",c,u);var x,k=_slicedToArray(g.computeOutAndReduceShapes(p.shape,c),2),w=k[0],C=k[1],T=w;if(s&&(T=g.expandShapeToKeepDim(w,h)),v){var S=l.texData.get(p.dataId),I=oI(S.values,a.sizeFromShape(C),T,i.dtype);x=l.makeTensorInfo(T,i.dtype),l.texData.get(x.dataId).values=I}else x=function(e,t,r,n){var i=a.sizeFromShape(t),o=$R({inputs:{x:e},attrs:{shape:[a.sizeFromShape(e.shape)/i,i]},backend:n}),s=_N(o,e.dtype,"max",n),l=$R({inputs:{x:s},attrs:{shape:r},backend:n});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(s),l}(p,C,T,l);return d&&l.disposeIntermediateTensorInfo(p),x}},kN={kernelName:Ur,backendName:"webgl",kernelFunc:function(e){var t=e.inputs,r=e.backend,n=e.attrs,i=t.x;JS(i,"maxPool");var o=n.filterSize,s=n.strides,l=n.pad,u=n.dimRoundingMode;a.assert(g.eitherStridesOrDilationsAreOne(s,1),(function(){return"Error in maxPool: Either strides or dilations must be 1. Got strides ".concat(s," and dilations '1'")}));var h=g.computePool2DInfo(i.shape,o,s,1,l,u);if(1===h.filterWidth&&1===h.filterHeight&&a.arraysEqual(h.inShape,h.outShape))return IR({inputs:{x:i},backend:r});var c=new MA(h,"max",!1);return r.runWebGLProgram(c,[i],i.dtype)}},wN={kernelName:Wr,backendName:"webgl",kernelFunc:function(e){var t=e.inputs,r=e.backend,a=e.attrs,n=t.dy,i=t.input,o=i;JS([i,t.output],"maxPoolBackprop");var s=a.filterSize,l=a.strides,u=a.pad,h=a.dimRoundingMode,c=g.computePool2DInfo(o.shape,s,l,1,u,h),f=new MA(c,"max",!0),d=r.runWebGLProgram(f,[o],o.dtype),v=new TA(c),p=r.runWebGLProgram(v,[n,d],o.dtype);return r.disposeIntermediateTensorInfo(d),p}},CN={kernelName:jr,backendName:"webgl",kernelFunc:function(e){var t=e.inputs,r=e.attrs,n=e.backend,i=t.x,o=r.filterSize,s=r.strides,l=r.pad,u=r.includeBatchInIndex,h=n;a.assert(4===i.shape.length,(function(){return"Error in maxPool: input must be rank 4 but got rank ".concat(i.shape.length,".")}));var c=[1,1];a.assert(g.eitherStridesOrDilationsAreOne(s,c),(function(){return"Error in maxPool: Either strides or dilations must be 1. Got strides ".concat(s," and dilations '").concat(c,"'")}));var f=g.computePool2DInfo(i.shape,o,s,c,l),d=_slicedToArray(function(e,t,r,a){var n=new MA(r,"max",!1),i=a.runWebGLProgram(n,[e],"float32");return n=new MA(r,"max",!0,!0,t),[i,a.runWebGLProgram(n,[e],"float32")]}(i,u,f,h),2);return[d[0],d[1]]}},TN={kernelName:qr,backendName:"webgl",kernelFunc:function(e){var t=e.inputs,r=e.attrs,n=e.backend,i=t.x,o=r.keepDims,s=r.axis,l=n,u=i.shape.length,h=a.parseAxisParam(s,i.shape),c=h,f=g.getAxesPermutation(c,u),d=null!=f,v=l.shouldExecuteOnCPU([i]),p=[],_=i;if(d){if(v){for(var m=l.texData.get(_.dataId).values,y=new Array(u),b=0;b<y.length;b++)y[b]=i.shape[f[b]];var x=cI(m,i.shape,i.dtype,f,y);_=l.makeTensorInfo(y,i.dtype),l.texData.get(_.dataId).values=x}else _=bN(i,f,l);p.push(_),c=g.getInnerMostAxes(c.length,u)}g.assertAxesAreInnerMostDims("sum",c,u);var k=_slicedToArray(g.computeOutAndReduceShapes(_.shape,c),2),w=k[0],C=k[1],T=w;o&&(T=g.expandShapeToKeepDim(w,h));for(var S=function(e,t,r,n){var i=a.sizeFromShape(t),o=$R({inputs:{x:e},attrs:{shape:[a.sizeFromShape(e.shape)/i,i]},backend:n}),s=_N(o,"float32","mean",n),l=$R({inputs:{x:s},attrs:{shape:r},backend:n});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(s),l}(_,C,T,l),I=0,A=p;I<A.length;I++){var R=A[I];l.disposeIntermediateTensorInfo(R)}return S}},SN=function e(t,r,a){_classCallCheck(this,e),this.variableNames=["x"],this.outputShape=r.map((function(e,r){return e[0]+t[r]+e[1]}));var n=t.length,i=RI(n),o=r.map((function(e){return e[0]})).join(","),s=r.map((function(e,r){return e[0]+t[r]})).join(","),l=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,n),u="reflect"===a?0:1;this.userCode=1!==n?"\n      ".concat(i," start = ").concat(i,"(").concat(o,");\n      ").concat(i," end = ").concat(i,"(").concat(s,");\n\n      void main() {\n        ").concat(i," outC = getOutputCoords();\n        for (int i = 0; i < ").concat(n,"; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ").concat(u,";\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ").concat(u,";\n          }\n        }\n        ").concat(i," coords = outC - start;\n        setOutput(getX(").concat(l,"));\n      }\n    "):"\n        int start = ".concat(o,";\n        int end = ").concat(s,";\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ").concat(u,";\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ").concat(u,";\n          }\n          setOutput(getX(outC - start));\n        }\n      ")},IN=function e(t,r,a){_classCallCheck(this,e),this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=r.map((function(e,r){return e[0]+t[r]+e[1]}));var n=t.length,i=RI(n),o=r.map((function(e){return e[0]})).join(","),s=r.map((function(e,r){return e[0]+t[r]})).join(","),l=_I("rc",n),u=_I("source",n),h="".concat(l[n-1]," < ").concat(this.outputShape[n-1]),c=1===n?"source":"vec2(".concat(u.slice(-2).join(),")"),f="reflect"===a?0:1,d="";if(1===n){var v="\n        ".concat(i," source = rc;\n        if (source < start) {\n          source = start * 2 - source - ").concat(f,";\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ").concat(f,";\n        }\n        source -= start;\n      ");d="\n        ".concat(i," rc = outputLoc;\n        ").concat(v,"\n        result[0] = getChannel(getX(").concat(u.join(),"), ").concat(c,");\n        ").concat(l[n-1]," += 1;\n        if(").concat(h,") {\n          ").concat(v,"\n          result[1] = getChannel(getX(").concat(u.join(),"), ").concat(c,");\n        }\n      ")}else{var p="\n        ".concat(i," source = rc;\n        ").concat(i," lt = ").concat(i,"(lessThan(source, start));\n        ").concat(i," gte = ").concat(i,"(greaterThanEqual(source, end));\n        ").concat(i," orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ").concat(f,") +\n                gte * ((end - 1) * 2 - source + ").concat(f,");\n        source -= start;\n      ");d="\n        ".concat(i," rc = outputLoc;\n        ").concat(p,"\n        result[0] = getChannel(getX(").concat(u.join(),"), ").concat(c,");\n        ").concat(l[n-1]," += 1;\n        if(").concat(h,") {\n          ").concat(p,"\n          result[1] = getChannel(getX(").concat(u.join(),"), ").concat(c,");\n        }\n        rc = outputLoc;\n        ").concat(l[n-2]," += 1;\n        if(").concat(l[n-2]," < ").concat(this.outputShape[n-2],") {\n          ").concat(p,"\n          result[2] = getChannel(getX(").concat(u.join(),"), ").concat(c,");\n          ").concat(l[n-1]," += 1;\n          if(").concat(h,") {\n            ").concat(p,"\n            result[3] = getChannel(getX(").concat(u.join(),"), ").concat(c,");\n          }\n        }\n      ")}this.userCode="\n      const ".concat(i," start = ").concat(i,"(").concat(o,");\n      const ").concat(i," end = ").concat(i,"(").concat(s,");\n\n      void main() {\n        ").concat(i," outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ").concat(d,"\n        setOutput(result);\n      }\n    ")},AN={kernelName:Qr,backendName:"webgl",kernelFunc:function(e){var t=e.inputs,r=e.backend,a=e.attrs,n=t.x,i=a.paddings,o=a.mode,s=ht().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new IN(n.shape,i,o):new SN(n.shape,i,o);return r.runWebGLProgram(s,[n],n.dtype)}},RN=function e(t,r,a){_classCallCheck(this,e),this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=g.assertAndGetBroadcastShape(r,a),this.userCode="\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ".concat(t,"\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    ")},NN="return a * b;",EN={kernelName:Jr,backendName:"webgl",kernelFunc:function(e){var t,r=e.inputs,a=e.backend,n=r.a,i=r.b,o=g.upcastType(n.dtype,i.dtype);if("complex64"===n.dtype){var s=a.texData.get(n.dataId),l=a.texData.get(i.dataId),u=new RN("return areal * breal - aimag * bimag;",n.shape,i.shape),h=new RN("return areal * bimag + aimag * breal;",n.shape,i.shape),c=[{dataId:s.complexTensorInfos.real.dataId,dtype:s.complexTensorInfos.real.dtype,shape:n.shape},{dataId:s.complexTensorInfos.imag.dataId,dtype:s.complexTensorInfos.imag.dtype,shape:n.shape},{dataId:l.complexTensorInfos.real.dataId,dtype:l.complexTensorInfos.real.dtype,shape:i.shape},{dataId:l.complexTensorInfos.imag.dataId,dtype:l.complexTensorInfos.imag.dtype,shape:i.shape}],f=a.runWebGLProgram(u,c,"float32"),d=a.runWebGLProgram(h,c,"float32"),v=RR({inputs:{real:f,imag:d},backend:a});return a.disposeIntermediateTensorInfo(f),a.disposeIntermediateTensorInfo(d),v}if(a.shouldExecuteOnCPU([n,i])){var p=a.texData.get(n.dataId),_=a.texData.get(i.dataId),m=_slicedToArray(sI(n.shape,i.shape,p.values,_.values,o),2),y=m[0],b=m[1],x=a.makeTensorInfo(b,o);return a.texData.get(x.dataId).values=y,x}return t=ht().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new BI(NN,n.shape,i.shape):new LI(NN,n.shape,i.shape),a.runWebGLProgram(t,[n,i],o)}},FN={kernelName:ea,backendName:"webgl",kernelFunc:function(e){var t=e.inputs,r=e.backend,a=e.attrs;g.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");var n=t.boxes,i=t.scores,o=a.maxOutputSize,s=a.iouThreshold,l=a.scoreThreshold,u=r,h=u.readSync(n.dataId),c=u.readSync(i.dataId);return _.nonMaxSuppressionV3Impl(h,c,o,s,l)}},MN=_.nonMaxSuppressionV4Impl,DN={kernelName:ta,backendName:"webgl",kernelFunc:function(e){var t=e.inputs,r=e.backend,a=e.attrs;g.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");var n=t.boxes,i=t.scores,o=a.maxOutputSize,s=a.iouThreshold,l=a.scoreThreshold,u=a.padToMaxOutputSize,h=r,c=h.readSync(n.dataId),f=h.readSync(i.dataId),d=MN(c,f,o,s,l,u);return[d.selectedIndices,d.validOutputs]}},ON=_.nonMaxSuppressionV5Impl,LN={kernelName:ra,backendName:"webgl",kernelFunc:function(e){var t=e.inputs,r=e.backend,a=e.attrs;g.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");var n=t.boxes,i=t.scores,o=a.maxOutputSize,s=a.iouThreshold,l=a.scoreThreshold,u=a.softNmsSigma,h=r,c=h.readSync(n.dataId),f=h.readSync(i.dataId),d=ON(c,f,o,s,l,u);return[d.selectedIndices,d.selectedScores]}},zN=function e(t,r,a,n){_classCallCheck(this,e),this.variableNames=["Image"],this.outputShape=[];var i=t[1],o=t[2],s=Math.sin(r).toFixed(3),l=Math.cos(r).toFixed(3);this.outputShape=t;var u,h=_slicedToArray(g.getImageCenter(n,i,o),2),c=h[0],f=h[1],d=c.toFixed(3),v=f.toFixed(3);u="number"==typeof a?"float outputValue = ".concat(a.toFixed(2),";"):"\n        vec3 fill = vec3(".concat(a.join(","),");\n        float outputValue = fill[coords[3]];"),this.userCode="\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - ".concat(d,") * ").concat(l," - (float(y) - ").concat(v,") * ").concat(s,";\n          float coordYFloat = (float(x) - ").concat(d,") * ").concat(s," + (float(y) - ").concat(v,") * ").concat(l,";\n          int coordX = int(round(coordXFloat + ").concat(d,"));\n          int coordY = int(round(coordYFloat + ").concat(v,"));\n          ").concat(u,"\n          if(coordX >= 0 && coordX < ").concat(o," && coordY >= 0 && coordY < ").concat(i,") {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    ")},BN={kernelName:$a,backendName:"webgl",kernelFunc:function(e){var t=e.inputs,r=e.attrs,a=e.backend,n=t.image,i=r.radians,o=r.fillValue,s=r.center,l=a,u=new zN(n.shape,i,o,s);return l.runWebGLProgram(u,[n],n.dtype)}},PN=ER("if (isnan(x)) return x;\n  return sin(x);\n"),VN={kernelName:Ia,backendName:"webgl",kernelFunc:PN},UN=ER("return x * x;"),WN={kernelName:Ba,backendName:"webgl",kernelFunc:UN},GN=FR({opSnippet:"return (a - b) * (a - b);",packedOpSnippet:"return (a - b) * (a - b);"}),HN={kernelName:za,backendName:"webgl",kernelFunc:GN},jN="return a - b;",qN=FR({opSnippet:jN,packedOpSnippet:jN,supportsComplex:!0,cpuKernelImpl:hI}),XN={kernelName:Pa,backendName:"webgl",kernelFunc:qN},KN=ER("return tan(x);"),QN=0,YN=[OR,zR,BR,PR,WR,XR,NR,tN,aN,iN,uN,cN,vN,AR,pN,ZR,xN,kN,wN,CN,TN,AN,EN,FN,DN,LN,HR,qR,eN,BN,VN,WN,XN,HN,{kernelName:Wa,backendName:"webgl",kernelFunc:KN},{kernelName:qa,backendName:"webgl",kernelFunc:function(e){for(var t,r=e.inputs,a=e.attrs,n=e.backend,i=r.x,o=a.perm,s=n,l=new Array(i.shape.length),u=0;u<l.length;u++)l[u]=i.shape[o[u]];if(s.shouldExecuteOnCPU([i])){var h=s.texData.get(i.dataId),c=cI(h.values,i.shape,i.dtype,o,l);t=s.makeTensorInfo(l,i.dtype),s.texData.get(t.dataId).values=c}else t=bN(i,o,s);return t}},{kernelName:Xa,backendName:"webgl",kernelFunc:function(e){var t=e.inputs,r=e.attrs,a=e.backend,n=r.axis,i=t.x;JS(i,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");var o=a.readSync(i.dataId),s=fI(o,n,i.shape,i.dtype),l=s.outputValues,u=s.outputShape,h=s.indices;return[a.makeTensorInfo(u,i.dtype,l),a.makeTensorInfo([h.length],"int32",h)]}}];QN<YN.length;QN++){un(YN[QN])}function JN(e){return"VIDEO"===e.tagName}function ZN(e){return"CANVAS"===e.tagName}var $N=r("QKAY"),eE=function(){function e(t,r,a,n){_classCallCheck(this,e),this.pupilTurnFlame=0,this.videoWidth=640,this.videoHeight=480,this.flipPoseHorizontal=!1,this.guiState={algorithm:"single-pose",input:{architecture:"MobileNetV1",outputStride:16,inputResolution:500,multiplier:.75,quantBytes:2},singlePoseDetection:{minPoseConfidence:.05,minPartConfidence:.5},multiPoseDetection:{maxPoseDetections:1,minPoseConfidence:.15,minPartConfidence:.1,nmsRadius:30},output:{showVideo:!0,showSkeleton:!1,showPoints:!0,showBoundingBox:!1},net:null,camera:void 0,architecture:void 0,inputResolution:void 0,changeToInputResolution:void 0,outputStride:void 0,multiplier:void 0,changeToOutputStride:void 0,changeToMultiplier:void 0,quantBytes:void 0,changeToQuantBytes:void 0,changeToArchitecture:void 0},this.ctrack=new $N.a.tracker({faceDetection:{useWebWorkers:!1}}),this.ctrack.init(),this.nonCheatingFlag=!0,this.videoElementId=t,this.canvasElementIdTFJS=r,this.canvasElementIdCLM=a,this.cheatLog=n}return _createClass(e,[{key:"setupCamera",value:function(e){return Object(ve.a)(this,void 0,void 0,regeneratorRuntime.mark((function t(){var r;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(navigator.mediaDevices&&navigator.mediaDevices.getUserMedia){t.next=2;break}throw new Error("Browser API navigator.mediaDevices.getUserMedia not available");case 2:if(r=document.getElementById(e),t.t0=JN(r),!t.t0){t.next=10;break}return r.width=this.videoWidth,r.height=this.videoHeight,t.next=9,navigator.mediaDevices.getUserMedia({audio:!1,video:{facingMode:"user"}});case 9:r.srcObject=t.sent;case 10:return t.abrupt("return",r);case 11:case"end":return t.stop()}}),t,this)})))}},{key:"loadVideo",value:function(e){return Object(ve.a)(this,void 0,void 0,regeneratorRuntime.mark((function t(){var r;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.setupCamera(e);case 2:if(r=t.sent,t.t0=JN(r),!t.t0){t.next=7;break}return t.next=7,r.play();case 7:return t.abrupt("return",r);case 8:case"end":return t.stop()}}),t,this)})))}},{key:"bindPage",value:function(e){return Object(ve.a)(this,void 0,void 0,regeneratorRuntime.mark((function t(){var r,a,n,i,o,s;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=this.guiState.input,t.next=3,function(e){return void 0===e&&(e=e_),vg(this,void 0,void 0,(function(){return pg(this,(function(t){return"ResNet50"===(e=function(e){if(null==(e=e||e_).architecture&&(e.architecture="MobileNetV1"),t_.indexOf(e.architecture)<0)throw new Error("Invalid architecture "+e.architecture+". Should be one of "+t_);if(null==e.inputResolution&&(e.inputResolution=257),qg(e.inputResolution),null==e.outputStride&&(e.outputStride=16),r_[e.architecture].indexOf(e.outputStride)<0)throw new Error("Invalid outputStride "+e.outputStride+". Should be one of "+r_[e.architecture]+" for architecutre "+e.architecture+".");if(null==e.multiplier&&(e.multiplier=1),a_[e.architecture].indexOf(e.multiplier)<0)throw new Error("Invalid multiplier "+e.multiplier+". Should be one of "+a_[e.architecture]+" for architecutre "+e.architecture+".");if(null==e.quantBytes&&(e.quantBytes=4),n_.indexOf(e.quantBytes)<0)throw new Error("Invalid quantBytes "+e.quantBytes+". Should be one of "+n_+" for architecutre "+e.architecture+".");return e}(e)).architecture?[2,u_(e)]:"MobileNetV1"===e.architecture?[2,l_(e)]:[2,null]}))}))}({architecture:r.architecture,outputStride:r.outputStride,inputResolution:r.inputResolution,multiplier:r.multiplier,quantBytes:r.quantBytes});case 3:return a=t.sent,i=document.getElementById(this.canvasElementIdTFJS),o=document.getElementById(this.canvasElementIdCLM),t.prev=5,t.next=8,this.loadVideo(this.videoElementId);case 8:n=t.sent,t.next=15;break;case 11:throw t.prev=11,t.t0=t.catch(5),(s=document.getElementById("info")).textContent="this browser does not support video capture,or this device does not have a camera",s.style.display="block",t.t0;case 15:this.guiState.net=a,this.TFJSDetect(n,i,e),this.CLMDetect(n,i,o);case 16:case"end":return t.stop()}}),t,this,[[5,11]])})))}},{key:"TFJSDetect",value:function(e,t,r){return Object(ve.a)(this,void 0,void 0,regeneratorRuntime.mark((function a(){var n,i,o,s;return regeneratorRuntime.wrap((function(a){for(;;)switch(a.prev=a.next){case 0:ZN(t)&&(n=t.getContext("2d"),t.width=this.videoWidth,t.height=this.videoHeight,r=r||+this.guiState.singlePoseDetection.minPoseConfidence,i=this.guiState,o=this.flipPoseHorizontal,s=this,function t(){return Object(ve.a)(this,void 0,void 0,regeneratorRuntime.mark((function a(){var l;return regeneratorRuntime.wrap((function(a){for(;;)switch(a.prev=a.next){case 0:return a.next=2,i.net.estimatePoses(e,{flipHorizontal:o,decodingMethod:"single-person"});case 2:l=a.sent,n.clearRect(0,0,s.videoWidth,s.videoHeight),l.forEach((function(e){var t=e.score,a=e.keypoints;t>=r&&(s.TFJSPositions=s.parsePosition(a,"TFJS"))})),requestAnimationFrame(t);case 4:case"end":return a.stop()}}),a)})))}());case 1:case"end":return a.stop()}}),a,this)})))}},{key:"CLMDetect",value:function(e,t,r){if(ZN(t)&&ZN(r)){t.getContext("2d");var a=r.getContext("2d");t.width=this.videoWidth,t.height=this.videoHeight,r.width=this.videoWidth,r.height=this.videoHeight,this.ctrack.start(e);var n=this;!function e(){return Object(ve.a)(this,void 0,void 0,regeneratorRuntime.mark((function t(){var i,o,s,l,u,h,c,f,d,v;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(a.clearRect(0,0,n.videoWidth,n.videoHeight),n.TFJSPositions){for(i=0,o=Object.entries(n.TFJSPositions);i<o.length;i++)s=_slicedToArray(o[i],2),s[0],l=s[1],d=l.y,v=l.x,(f=a).beginPath(),f.arc(v,d,3,0,2*Math.PI),f.fillStyle="aqua",f.fill();u=n.parsePosition(n.ctrack.getCurrentPosition(),"CLM"),h=!1,n.ctrack.getCurrentPosition()&&(c=n.checkAllDistance(u,n.TFJSPositions),Object.values(c).every((function(e){return e<.1}))&&(h=!0),h&&n.ctrack.draw(r)),n.cheatDetect(u,n.TFJSPositions,h)}requestAnimationFrame(e);case 2:case"end":return t.stop()}}),t)})))}()}}},{key:"parsePosition",value:function(e,t){return e&&("CLM"===t?e={nose:{x:e[62][0],y:e[62][1]},rightEye:{x:e[27][0],y:e[27][1]},leftEye:{x:e[32][0],y:e[32][1]},rightEar:{x:e[1][0],y:e[1][1]},leftEar:{x:e[13][0],y:e[13][1]}}:"TFJS"===t&&(e={nose:e[0].position,leftEye:e[1].position,rightEye:e[2].position,leftEar:e[3].position,rightEar:e[4].position})),e}},{key:"measureRelativityPositions",value:function(e){var t=this.calculateTwoPointDistance(e.leftEar,e.rightEar);return{nose:0,leftEye:-this.calculateTwoPointDistance(e.leftEye,e.nose)/t,rightEye:this.calculateTwoPointDistance(e.rightEye,e.nose)/t,leftEar:-this.calculateTwoPointDistance(e.leftEar,e.nose)/t,rightEar:this.calculateTwoPointDistance(e.rightEar,e.nose)/t}}},{key:"measureCheatDegree",value:function(e,t,r){var a,n,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1,o=this.calculateTwoPointDistance(e.leftEar,e.rightEar);if(a=this.measureRelativityPositions(e),r){var s=this.calculateTwoPointDistance(t.leftEye,e.leftEye)/o,l=this.calculateTwoPointDistance(t.rightEye,e.rightEye)/o;a.leftPupilTurn=s,a.rightPupilTurn=l,(n=Math.max(Math.abs(l)-.03*i,Math.abs(s)-.03*i))>0?(this.pupilTurnFlame+=1,n*=.1*this.pupilTurnFlame):this.pupilTurnFlame=0}var u=this.calculateTwoPointDistance(e.leftEye,e.leftEar)/o,h=this.calculateTwoPointDistance(e.rightEye,e.rightEar)/o;return{relativityPosition:a,headTurnDegree:Math.abs(u-h)-.15,pupilTurnDegree:n,leftHeadTurn:u,rightHeadTurn:h}}},{key:"calculateTwoPointDistance",value:function(e,t){var r=Math.pow(e.x-t.x,2),a=Math.pow(e.y-t.y,2);return Math.sqrt(r+a)}},{key:"checkAllDistance",value:function(e,t){for(var r=this.calculateTwoPointDistance(e.leftEar,e.rightEar),a=this.measureRelativityPositions(e),n={nose:this.calculateTwoPointDistance(t.nose,e.nose)/r,leftEye:-this.calculateTwoPointDistance(t.leftEye,e.nose)/r,rightEye:this.calculateTwoPointDistance(t.rightEye,e.nose)/r,leftEar:-this.calculateTwoPointDistance(t.leftEar,e.nose)/r,rightEar:this.calculateTwoPointDistance(t.rightEar,e.nose)/r},i={},o=0,s=Object.entries(e);o<s.length;o++){var l=_slicedToArray(s[o],2),u=l[0];l[1];i[u]=Math.abs(a[u]-n[u])}return i}},{key:"cheatDetect",value:function(e,t,r){var a=this.measureCheatDegree(t,e,r,.8),n=0,i=a.headTurnDegree,o=a.pupilTurnDegree;i=20*i-2,o=20*o-2,this.nonCheatingFlag&&((n=1/(1+Math.exp(-(r?.9*i+.7*o:i))))>.8&&this.callBackend(n))}},{key:"callBackend",value:function(e){return Object(ve.a)(this,void 0,void 0,regeneratorRuntime.mark((function t(){var r,a,n,i=this;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:r=document.getElementById(this.canvasElementIdCLM),a=document.getElementById(this.videoElementId),n=[],this.nonCheatingFlag=!1,ZN(r)&&JN(a)&&function(){r.width=i.videoWidth,r.height=i.videoHeight;for(var t=r.getContext("2d"),o=0;o<3;o++)setTimeout((function(){t.drawImage(a,0,0,r.width,r.height);var e=r.toDataURL("image/jpeg");n.push(e)}),200*o);setTimeout((function(){var t={studentId:localStorage.getItem("studentId"),studentName:localStorage.getItem("studentName"),cheatTime:Date.now(),cheatProbability:e,cheatImages:n};console.log(t),i.cheatLog(localStorage.getItem("teacherIp"),t),i.nonCheatingFlag=!0}),600)}(),console.log("someone cheat!!!!!!");case 3:case"end":return t.stop()}}),t,this)})))}}]),e}();function tE(e,t){1&e&&(G.Rb(0,"div",21),G.Bc(1," \uff01\u7121\u6cd5\u6b63\u78ba\u8b58\u5225 "),G.Qb())}var rE,aE,nE,iE=((rE=function(){function e(t){_classCallCheck(this,e),this.studentService=t,this.isShownAlert=!1,this.display=!1}return _createClass(e,[{key:"ngOnInit",value:function(){var e=this;this.examData={examName:localStorage.getItem("examName"),examStartTime:localStorage.getItem("examStartTime"),examEndTime:localStorage.getItem("examEndTime")};var t=this.studentService;new eE("videoElement","facePainting","facePainting",(function(e,r){t.cheatLog(e,r).subscribe((function(e){console.log(e)}))})).bindPage(),this.sTtConnection=Z(1e3).pipe(Object(K.a)((function(t){return e.studentService.sTtConnection(localStorage.getItem("teacherIp"))}))).subscribe((function(t){e.status=t.connectionStatus,e.time=t.connectionTime}),(function(e){return console.log(e)}));var r=document.querySelector("#videoElement"),a=!0,n=this;navigator.mediaDevices.getUserMedia&&navigator.mediaDevices.getUserMedia({video:!0}).then((function(e){r.srcObject=e})).catch((function(e){console.log("Something went wrong!")})),$("#pip-request").on("click",(function(){a?(r.requestPictureInPicture(),a=!1):(document.exitPictureInPicture(),a=!0)})),$("#sensitivity").on("change",(function(e){var t={sensitivity:$("#sensitivity").val()};n.studentService.setSensitivity(t).subscribe((function(e){console.log(""+e.message)}))}))}}]),e}()).\u0275fac=function(e){return new(e||rE)(G.Mb(j.a))},rE.\u0275cmp=G.Gb({type:rE,selectors:[["app-studentExamScreen"]],decls:36,vars:6,consts:[[1,"row"],[1,"col-md-12"],[1,"card"],[1,"card-header"],[1,"card-title"],[1,"card-body"],[1,"col-sm-6"],[1,"text-left"],[1,"col-sm-6","text-right"],[1,""],[1,"row","justify-content-center"],["autoplay","true","id","videoElement",2,"background-color","#666","position","relative"],["id","facePainting",2,"position","absolute"],[1,"row","justify-content-center","mt-2"],["class","alert alert-danger w-50 text-center","role","alert",4,"ngIf"],["id","pip-request",1,"btn","btn-primary"],[1,"card-footer"],[1,"col-sm-3"],[1,"form-group"],["for","formControlRange"],["type","range","id","sensitivity","name","sensitivity","min","0","max","1","step","0.05",1,"form-control-range"],["role","alert",1,"alert","alert-danger","w-50","text-center"]],template:function(e,t){1&e&&(G.Rb(0,"div",0),G.Rb(1,"div",1),G.Rb(2,"div",2),G.Rb(3,"div",3),G.Rb(4,"h4",4),G.Bc(5,"\u6e96\u5099\u8003\u8a66"),G.Qb(),G.Qb(),G.Rb(6,"div",5),G.Rb(7,"div",0),G.Rb(8,"div",6),G.Rb(9,"h5",7),G.Bc(10),G.Qb(),G.Qb(),G.Rb(11,"div",8),G.Rb(12,"h5",9),G.Bc(13),G.Qb(),G.Qb(),G.Qb(),G.Rb(14,"div",10),G.Nb(15,"video",11),G.Nb(16,"canvas",12),G.Qb(),G.Rb(17,"div",13),G.zc(18,tE,2,0,"div",14),G.Rb(19,"button",15),G.Bc(20,"\u6d6e\u7a97"),G.Qb(),G.Qb(),G.Qb(),G.Rb(21,"div",16),G.Nb(22,"hr"),G.Rb(23,"div",0),G.Rb(24,"h6",17),G.Bc(25,"\u9023\u7dda\u72c0\u614b\uff1a"),G.Rb(26,"span"),G.Bc(27),G.Qb(),G.Qb(),G.Rb(28,"h6",17),G.Bc(29),G.Qb(),G.Rb(30,"div",6),G.Rb(31,"form"),G.Rb(32,"div",18),G.Rb(33,"label",19),G.Bc(34,"\u9748\u654f\u5ea6\uff1a"),G.Qb(),G.Nb(35,"input",20),G.Qb(),G.Qb(),G.Qb(),G.Qb(),G.Qb(),G.Qb(),G.Qb(),G.Qb()),2&e&&(G.zb(10),G.Dc("\u8003\u8a66\u540d\u7a31\uff1a",t.examData.examName,""),G.zb(3),G.Ec("\u8003\u8a66\u6642\u9593\uff1a",t.examData.examStartTime,"~",t.examData.examEndTime,""),G.zb(5),G.jc("ngIf",t.isShownAlert),G.zb(9),G.Cc(t.status),G.zb(2),G.Dc(" ping\uff1a",t.time,""))},directives:[re.l,V.o,V.i,V.j],encapsulation:2}),rE),oE=function(e){return[e]},sE=[{path:"index",component:(aE=function(){function e(){_classCallCheck(this,e)}return _createClass(e,[{key:"ngOnInit",value:function(){"9"==localStorage.getItem("auth")?(this.page="\u958b\u555f\u8003\u5834",this.path="/openExam"):"1"==localStorage.getItem("auth")&&(this.page="\u9032\u5165\u8003\u5834",this.path="/enterExam")}}]),e}(),aE.\u0275fac=function(e){return new(e||aE)},aE.\u0275cmp=G.Gb({type:aE,selectors:[["app-enterexam"]],decls:5,vars:4,consts:[[1,"row"],[3,"routerLink"],["type","button",1,"btn","text-warning","col-12","h1","mb-1","block"]],template:function(e,t){1&e&&(G.Rb(0,"div",0),G.Rb(1,"a",1),G.Rb(2,"button",2),G.Rb(3,"p"),G.Bc(4),G.Qb(),G.Qb(),G.Qb(),G.Qb()),2&e&&(G.zb(1),G.jc("routerLink",G.mc(2,oE,t.path)),G.zb(3),G.Cc(t.page))},directives:[P.b],styles:[".block[_ngcontent-%COMP%]{margin-top:10%;padding:70px 0}a[_ngcontent-%COMP%]{width:100%}"]}),aE)},{path:"openExam",component:H},{path:"enterExam",component:X},{path:"teacherRecord",component:de},{path:"studentRecord",component:he},{path:"teacherExamScreen",component:se},{path:"studentExamScreen",component:iE}],lE=r("1kSV"),uE=((nE=function e(){_classCallCheck(this,e)}).\u0275mod=G.Kb({type:nE}),nE.\u0275inj=G.Jb({factory:function(e){return new(e||nE)},imports:[[re.b,P.c.forChild(sE),V.e,V.l,lE.g]]}),nE)},PDX0:function(e,t){(function(t){e.exports=t}).call(this,{})},QKAY:function QKAY(module,__webpack_exports__,__webpack_require__){"use strict";(function(module){var commonjsGlobal="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function createCommonjsModule(e,t){return e(t={exports:{}},t.exports),t.exports}for(var numeric1_2_6=createCommonjsModule((function(module,exports){var numeric=exports;void 0!==commonjsGlobal&&(commonjsGlobal.numeric=numeric),numeric.version="1.2.6",numeric.bench=function(e,t){var r,a,n;for(void 0===t&&(t=15),a=.5,r=new Date;;){for(n=a*=2;n>3;n-=4)e(),e(),e(),e();for(;n>0;)e(),n--;if(new Date-r>t)break}for(n=a;n>3;n-=4)e(),e(),e(),e();for(;n>0;)e(),n--;return 1e3*(3*a-1)/(new Date-r)},numeric._myIndexOf=function(e){var t,r=this.length;for(t=0;t<r;++t)if(this[t]===e)return t;return-1},numeric.myIndexOf=Array.prototype.indexOf?Array.prototype.indexOf:numeric._myIndexOf,numeric.Function=Function,numeric.precision=4,numeric.largeArray=50,numeric.prettyPrint=function(e){var t=[];return function e(r){var a;if(void 0===r)return t.push(Array(numeric.precision+8).join(" ")),!1;if("string"==typeof r)return t.push('"'+r+'"'),!1;if("boolean"==typeof r)return t.push(r.toString()),!1;if("number"==typeof r){var n=function e(t){if(0===t)return"0";if(isNaN(t))return"NaN";if(t<0)return"-"+e(-t);if(isFinite(t)){var r=Math.floor(Math.log(t)/Math.log(10)),a=t/Math.pow(10,r),n=a.toPrecision(numeric.precision);return 10===parseFloat(n)&&(r++,n=(a=1).toPrecision(numeric.precision)),parseFloat(n).toString()+"e"+r.toString()}return"Infinity"}(r),i=r.toPrecision(numeric.precision),o=parseFloat(r.toString()).toString(),s=[n,i,o,parseFloat(i).toString(),parseFloat(o).toString()];for(a=1;a<s.length;a++)s[a].length<n.length&&(n=s[a]);return t.push(Array(numeric.precision+8-n.length).join(" ")+n),!1}if(null===r)return t.push("null"),!1;if("function"==typeof r){t.push(r.toString());var l=!1;for(a in r)r.hasOwnProperty(a)&&(t.push(l?",\n":"\n{"),l=!0,t.push(a),t.push(": \n"),e(r[a]));return l&&t.push("}\n"),!0}if(r instanceof Array){if(r.length>numeric.largeArray)return t.push("...Large Array..."),!0;for(l=!1,t.push("["),a=0;a<r.length;a++)a>0&&(t.push(","),l&&t.push("\n ")),l=e(r[a]);return t.push("]"),!0}for(a in t.push("{"),l=!1,r)r.hasOwnProperty(a)&&(l&&t.push(",\n"),l=!0,t.push(a),t.push(": \n"),e(r[a]));return t.push("}"),!0}(e),t.join("")},numeric.parseDate=function(e){return function e(t){if("string"==typeof t)return Date.parse(t.replace(/-/g,"/"));if(!(t instanceof Array))throw new Error("parseDate: parameter must be arrays of strings");var r,a=[];for(r=0;r<t.length;r++)a[r]=e(t[r]);return a}(e)},numeric.parseFloat=function(e){return function e(t){if("string"==typeof t)return parseFloat(t);if(!(t instanceof Array))throw new Error("parseFloat: parameter must be arrays of strings");var r,a=[];for(r=0;r<t.length;r++)a[r]=e(t[r]);return a}(e)},numeric.parseCSV=function(e){var t,r,a,n=e.split("\n"),i=[],o=/(([^'",]*)|('[^']*')|("[^"]*")),/g,s=/^\s*(([+-]?[0-9]+(\.[0-9]*)?(e[+-]?[0-9]+)?)|([+-]?[0-9]*(\.[0-9]+)?(e[+-]?[0-9]+)?))\s*$/,l=0;for(r=0;r<n.length;r++){var u,h=(n[r]+",").match(o);if(h.length>0){for(i[l]=[],t=0;t<h.length;t++)u=(a=h[t]).substr(0,a.length-1),i[l][t]=s.test(u)?parseFloat(u):u;l++}}return i},numeric.toCSV=function(e){var t,r,a,n,i;for(a=numeric.dim(e)[0],i=[],t=0;t<a;t++){for(n=[],r=0;r<a;r++)n[r]=e[t][r].toString();i[t]=n.join(", ")}return i.join("\n")+"\n"},numeric.getURL=function(e){var t=new XMLHttpRequest;return t.open("GET",e,!1),t.send(),t},numeric.imageURL=function(e){function t(e,t,r){void 0===t&&(t=0),void 0===r&&(r=e.length);var a,n=[0,1996959894,3993919788,2567524794,124634137,1886057615,3915621685,2657392035,249268274,2044508324,3772115230,2547177864,162941995,2125561021,3887607047,2428444049,498536548,1789927666,4089016648,2227061214,450548861,1843258603,4107580753,2211677639,325883990,1684777152,4251122042,2321926636,335633487,1661365465,4195302755,2366115317,997073096,1281953886,3579855332,2724688242,1006888145,1258607687,3524101629,2768942443,901097722,1119000684,3686517206,2898065728,853044451,1172266101,3705015759,2882616665,651767980,1373503546,3369554304,3218104598,565507253,1454621731,3485111705,3099436303,671266974,1594198024,3322730930,2970347812,795835527,1483230225,3244367275,3060149565,1994146192,31158534,2563907772,4023717930,1907459465,112637215,2680153253,3904427059,2013776290,251722036,2517215374,3775830040,2137656763,141376813,2439277719,3865271297,1802195444,476864866,2238001368,4066508878,1812370925,453092731,2181625025,4111451223,1706088902,314042704,2344532202,4240017532,1658658271,366619977,2362670323,4224994405,1303535960,984961486,2747007092,3569037538,1256170817,1037604311,2765210733,3554079995,1131014506,879679996,2909243462,3663771856,1141124467,855842277,2852801631,3708648649,1342533948,654459306,3188396048,3373015174,1466479909,544179635,3110523913,3462522015,1591671054,702138776,2966460450,3352799412,1504918807,783551873,3082640443,3233442989,3988292384,2596254646,62317068,1957810842,3939845945,2647816111,81470997,1943803523,3814918930,2489596804,225274430,2053790376,3826175755,2466906013,167816743,2097651377,4027552580,2265490386,503444072,1762050814,4150417245,2154129355,426522225,1852507879,4275313526,2312317920,282753626,1742555852,4189708143,2394877945,397917763,1622183637,3604390888,2714866558,953729732,1340076626,3518719985,2797360999,1068828381,1219638859,3624741850,2936675148,906185462,1090812512,3747672003,2825379669,829329135,1181335161,3412177804,3160834842,628085408,1382605366,3423369109,3138078467,570562233,1426400815,3317316542,2998733608,733239954,1555261956,3268935591,3050360625,752459403,1541320221,2607071920,3965973030,1969922972,40735498,2617837225,3943577151,1913087877,83908371,2512341634,3803740692,2075208622,213261112,2463272603,3855990285,2094854071,198958881,2262029012,4057260610,1759359992,534414190,2176718541,4139329115,1873836001,414664567,2282248934,4279200368,1711684554,285281116,2405801727,4167216745,1634467795,376229701,2685067896,3608007406,1308918612,956543938,2808555105,3495958263,1231636301,1047427035,2932959818,3654703836,1088359270,936918e3,2847714899,3736837829,1202900863,817233897,3183342108,3401237130,1404277552,615818150,3134207493,3453421203,1423857449,601450431,3009837614,3294710456,1567103746,711928724,3020668471,3272380065,1510334235,755167117],i=-1;for(a=t;a<r;a++)i=i>>>8^n[255&(i^e[a])];return-1^i}var r,a,n,i,o,s,l,u,h,c,f=e[0].length,d=e[0][0].length,v=[137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,d>>24&255,d>>16&255,d>>8&255,255&d,f>>24&255,f>>16&255,f>>8&255,255&f,8,2,0,0,0,-1,-2,-3,-4,-5,-6,-7,-8,73,68,65,84,8,29];for(c=t(v,12,29),v[29]=c>>24&255,v[30]=c>>16&255,v[31]=c>>8&255,v[32]=255&c,r=1,a=0,l=0;l<f;l++){for(v.push(l<f-1?0:1),s=3*d+1+(0===l)>>8&255,v.push(o=3*d+1+(0===l)&255),v.push(s),v.push(255&~o),v.push(255&~s),0===l&&v.push(0),u=0;u<d;u++)for(n=0;n<3;n++)a=(a+(r=(r+(o=(o=e[n][l][u])>255?255:o<0?0:Math.round(o)))%65521))%65521,v.push(o);v.push(0)}return v.push((h=(a<<16)+r)>>24&255),v.push(h>>16&255),v.push(h>>8&255),v.push(255&h),v[33]=(i=v.length-41)>>24&255,v[34]=i>>16&255,v[35]=i>>8&255,v[36]=255&i,c=t(v,37),v.push(c>>24&255),v.push(c>>16&255),v.push(c>>8&255),v.push(255&c),v.push(0),v.push(0),v.push(0),v.push(0),v.push(73),v.push(69),v.push(78),v.push(68),v.push(174),v.push(66),v.push(96),v.push(130),"data:image/png;base64,"+function(e){var t,r,a,n,i,o,s,l=e.length,u="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",h="";for(t=0;t<l;t+=3)i=((3&(r=e[t]))<<4)+((a=e[t+1])>>4),o=((15&a)<<2)+((n=e[t+2])>>6),s=63&n,t+1>=l?o=s=64:t+2>=l&&(s=64),h+=u.charAt(r>>2)+u.charAt(i)+u.charAt(o)+u.charAt(s);return h}(v)},numeric._dim=function(e){for(var t=[];"object"==typeof e;)t.push(e.length),e=e[0];return t},numeric.dim=function(e){var t;return"object"==typeof e?"object"==typeof(t=e[0])?"object"==typeof t[0]?numeric._dim(e):[e.length,t.length]:[e.length]:[]},numeric.mapreduce=function(e,t){return Function("x","accum","_s","_k",'if(typeof accum === "undefined") accum = '+t+';\nif(typeof x === "number") { var xi = x; '+e+'; return accum; }\nif(typeof _s === "undefined") _s = numeric.dim(x);\nif(typeof _k === "undefined") _k = 0;\nvar _n = _s[_k];\nvar i,xi;\nif(_k < _s.length-1) {\n    for(i=_n-1;i>=0;i--) {\n        accum = arguments.callee(x[i],accum,_s,_k+1);\n    }    return accum;\n}\nfor(i=_n-1;i>=1;i-=2) { \n    xi = x[i];\n    '+e+";\n    xi = x[i-1];\n    "+e+";\n}\nif(i === 0) {\n    xi = x[i];\n    "+e+"\n}\nreturn accum;")},numeric.mapreduce2=function(e,t){return Function("x","var n = x.length;\nvar i,xi;\n"+t+";\nfor(i=n-1;i!==-1;--i) { \n    xi = x[i];\n    "+e+";\n}\nreturn accum;")},numeric.same=function e(t,r){var a,n;if(!(t instanceof Array&&r instanceof Array))return!1;if((n=t.length)!==r.length)return!1;for(a=0;a<n;a++)if(t[a]!==r[a]){if("object"!=typeof t[a])return!1;if(!e(t[a],r[a]))return!1}return!0},numeric.rep=function(e,t,r){void 0===r&&(r=0);var a,n=e[r],i=Array(n);if(r===e.length-1){for(a=n-2;a>=0;a-=2)i[a+1]=t,i[a]=t;return-1===a&&(i[0]=t),i}for(a=n-1;a>=0;a--)i[a]=numeric.rep(e,t,r+1);return i},numeric.dotMMsmall=function(e,t){var r,a,n,i,o,s,l,u,h,c,f;for(i=e.length,o=t.length,s=t[0].length,l=Array(i),r=i-1;r>=0;r--){for(u=Array(s),h=e[r],n=s-1;n>=0;n--){for(c=h[o-1]*t[o-1][n],a=o-2;a>=1;a-=2)c+=h[a]*t[a][n]+h[f=a-1]*t[f][n];0===a&&(c+=h[0]*t[0][n]),u[n]=c}l[r]=u}return l},numeric._getCol=function(e,t,r){var a;for(a=e.length-1;a>0;--a)r[a]=e[a][t],r[--a]=e[a][t];0===a&&(r[0]=e[0][t])},numeric.dotMMbig=function(e,t){var r,a,n=numeric._getCol,i=t.length,o=Array(i),s=e.length,l=t[0].length,u=new Array(s),h=numeric.dotVV;for(--i,r=--s;-1!==r;--r)u[r]=Array(l);for(r=--l;-1!==r;--r)for(n(t,r,o),a=s;-1!==a;--a)u[a][r]=h(e[a],o);return u},numeric.dotMV=function(e,t){var r,a=e.length,n=Array(a),i=numeric.dotVV;for(r=a-1;r>=0;r--)n[r]=i(e[r],t);return n},numeric.dotVM=function(e,t){var r,a,n,i,o,s,l;for(n=e.length,i=t[0].length,o=Array(i),a=i-1;a>=0;a--){for(s=e[n-1]*t[n-1][a],r=n-2;r>=1;r-=2)s+=e[r]*t[r][a]+e[l=r-1]*t[l][a];0===r&&(s+=e[0]*t[0][a]),o[a]=s}return o},numeric.dotVV=function(e,t){var r,a,n=e.length,i=e[n-1]*t[n-1];for(r=n-2;r>=1;r-=2)i+=e[r]*t[r]+e[a=r-1]*t[a];return 0===r&&(i+=e[0]*t[0]),i},numeric.dot=function(e,t){var r=numeric.dim;switch(1e3*r(e).length+r(t).length){case 2002:return t.length<10?numeric.dotMMsmall(e,t):numeric.dotMMbig(e,t);case 2001:return numeric.dotMV(e,t);case 1002:return numeric.dotVM(e,t);case 1001:return numeric.dotVV(e,t);case 1e3:return numeric.mulVS(e,t);case 1:return numeric.mulSV(e,t);case 0:return e*t;default:throw new Error("numeric.dot only works on vectors and matrices")}},numeric.diag=function(e){var t,r,a,n,i=e.length,o=Array(i);for(t=i-1;t>=0;t--){for(n=Array(i),r=t+2,a=i-1;a>=r;a-=2)n[a]=0,n[a-1]=0;for(a>t&&(n[a]=0),n[t]=e[t],a=t-1;a>=1;a-=2)n[a]=0,n[a-1]=0;0===a&&(n[0]=0),o[t]=n}return o},numeric.getDiag=function(e){var t,r=Math.min(e.length,e[0].length),a=Array(r);for(t=r-1;t>=1;--t)a[t]=e[t][t],a[--t]=e[t][t];return 0===t&&(a[0]=e[0][0]),a},numeric.identity=function(e){return numeric.diag(numeric.rep([e],1))},numeric.pointwise=function(e,t,r){void 0===r&&(r="");var a,n,i=[],o=/\[i\]$/,s="",l=!1;for(a=0;a<e.length;a++)o.test(e[a])?s=n=e[a].substring(0,e[a].length-3):n=e[a],"ret"===n&&(l=!0),i.push(n);return i[e.length]="_s",i[e.length+1]="_k",i[e.length+2]='if(typeof _s === "undefined") _s = numeric.dim('+s+');\nif(typeof _k === "undefined") _k = 0;\nvar _n = _s[_k];\nvar i'+(l?"":", ret = Array(_n)")+";\nif(_k < _s.length-1) {\n    for(i=_n-1;i>=0;i--) ret[i] = arguments.callee("+e.join(",")+",_s,_k+1);\n    return ret;\n}\n"+r+"\nfor(i=_n-1;i!==-1;--i) {\n    "+t+"\n}\nreturn ret;",Function.apply(null,i)},numeric.pointwise2=function(e,t,r){void 0===r&&(r="");var a,n,i=[],o=/\[i\]$/,s="",l=!1;for(a=0;a<e.length;a++)o.test(e[a])?s=n=e[a].substring(0,e[a].length-3):n=e[a],"ret"===n&&(l=!0),i.push(n);return i[e.length]="var _n = "+s+".length;\nvar i"+(l?"":", ret = Array(_n)")+";\n"+r+"\nfor(i=_n-1;i!==-1;--i) {\n"+t+"\n}\nreturn ret;",Function.apply(null,i)},numeric._biforeach=function e(t,r,a,n,i){var o;if(n!==a.length-1)for(o=a[n]-1;o>=0;o--)e("object"==typeof t?t[o]:t,"object"==typeof r?r[o]:r,a,n+1,i);else i(t,r)},numeric._biforeach2=function e(t,r,a,n,i){if(n===a.length-1)return i(t,r);var o,s=a[n],l=Array(s);for(o=s-1;o>=0;--o)l[o]=e("object"==typeof t?t[o]:t,"object"==typeof r?r[o]:r,a,n+1,i);return l},numeric._foreach=function e(t,r,a,n){var i;if(a!==r.length-1)for(i=r[a]-1;i>=0;i--)e(t[i],r,a+1,n);else n(t)},numeric._foreach2=function e(t,r,a,n){if(a===r.length-1)return n(t);var i,o=r[a],s=Array(o);for(i=o-1;i>=0;i--)s[i]=e(t[i],r,a+1,n);return s},numeric.ops2={add:"+",sub:"-",mul:"*",div:"/",mod:"%",and:"&&",or:"||",eq:"===",neq:"!==",lt:"<",gt:">",leq:"<=",geq:">=",band:"&",bor:"|",bxor:"^",lshift:"<<",rshift:">>",rrshift:">>>"},numeric.opseq={addeq:"+=",subeq:"-=",muleq:"*=",diveq:"/=",modeq:"%=",lshifteq:"<<=",rshifteq:">>=",rrshifteq:">>>=",bandeq:"&=",boreq:"|=",bxoreq:"^="},numeric.mathfuns=["abs","acos","asin","atan","ceil","cos","exp","floor","log","round","sin","sqrt","tan","isNaN","isFinite"],numeric.mathfuns2=["atan2","pow","max","min"],numeric.ops1={neg:"-",not:"!",bnot:"~",clone:""},numeric.mapreducers={any:["if(xi) return true;","var accum = false;"],all:["if(!xi) return false;","var accum = true;"],sum:["accum += xi;","var accum = 0;"],prod:["accum *= xi;","var accum = 1;"],norm2Squared:["accum += xi*xi;","var accum = 0;"],norminf:["accum = max(accum,abs(xi));","var accum = 0, max = Math.max, abs = Math.abs;"],norm1:["accum += abs(xi)","var accum = 0, abs = Math.abs;"],sup:["accum = max(accum,xi);","var accum = -Infinity, max = Math.max;"],inf:["accum = min(accum,xi);","var accum = Infinity, min = Math.min;"]},function(){var e,t;for(e=0;e<numeric.mathfuns2.length;++e)numeric.ops2[t=numeric.mathfuns2[e]]=t;for(e in numeric.ops2)if(numeric.ops2.hasOwnProperty(e)){t=numeric.ops2[e];var r,a,n="";-1!==numeric.myIndexOf.call(numeric.mathfuns2,e)?(n="var "+t+" = Math."+t+";\n",r=function(e,r,a){return e+" = "+t+"("+r+","+a+")"},a=function(e,r){return e+" = "+t+"("+e+","+r+")"}):(r=function(e,r,a){return e+" = "+r+" "+t+" "+a},a=numeric.opseq.hasOwnProperty(e+"eq")?function(e,r){return e+" "+t+"= "+r}:function(e,r){return e+" = "+e+" "+t+" "+r}),numeric[e+"VV"]=numeric.pointwise2(["x[i]","y[i]"],r("ret[i]","x[i]","y[i]"),n),numeric[e+"SV"]=numeric.pointwise2(["x","y[i]"],r("ret[i]","x","y[i]"),n),numeric[e+"VS"]=numeric.pointwise2(["x[i]","y"],r("ret[i]","x[i]","y"),n),numeric[e]=Function("var n = arguments.length, i, x = arguments[0], y;\nvar VV = numeric."+e+"VV, VS = numeric."+e+"VS, SV = numeric."+e+'SV;\nvar dim = numeric.dim;\nfor(i=1;i!==n;++i) { \n  y = arguments[i];\n  if(typeof x === "object") {\n      if(typeof y === "object") x = numeric._biforeach2(x,y,dim(x),0,VV);\n      else x = numeric._biforeach2(x,y,dim(x),0,VS);\n  } else if(typeof y === "object") x = numeric._biforeach2(x,y,dim(y),0,SV);\n  else '+a("x","y")+"\n}\nreturn x;\n"),numeric[t]=numeric[e],numeric[e+"eqV"]=numeric.pointwise2(["ret[i]","x[i]"],a("ret[i]","x[i]"),n),numeric[e+"eqS"]=numeric.pointwise2(["ret[i]","x"],a("ret[i]","x"),n),numeric[e+"eq"]=Function("var n = arguments.length, i, x = arguments[0], y;\nvar V = numeric."+e+"eqV, S = numeric."+e+'eqS\nvar s = numeric.dim(x);\nfor(i=1;i!==n;++i) { \n  y = arguments[i];\n  if(typeof y === "object") numeric._biforeach(x,y,s,0,V);\n  else numeric._biforeach(x,y,s,0,S);\n}\nreturn x;\n')}for(e=0;e<numeric.mathfuns2.length;++e)delete numeric.ops2[t=numeric.mathfuns2[e]];for(e=0;e<numeric.mathfuns.length;++e)numeric.ops1[t=numeric.mathfuns[e]]=t;for(e in numeric.ops1)numeric.ops1.hasOwnProperty(e)&&(n="",t=numeric.ops1[e],-1!==numeric.myIndexOf.call(numeric.mathfuns,e)&&Math.hasOwnProperty(t)&&(n="var "+t+" = Math."+t+";\n"),numeric[e+"eqV"]=numeric.pointwise2(["ret[i]"],"ret[i] = "+t+"(ret[i]);",n),numeric[e+"eq"]=Function("x",'if(typeof x !== "object") return '+t+"x\nvar i;\nvar V = numeric."+e+"eqV;\nvar s = numeric.dim(x);\nnumeric._foreach(x,s,0,V);\nreturn x;\n"),numeric[e+"V"]=numeric.pointwise2(["x[i]"],"ret[i] = "+t+"(x[i]);",n),numeric[e]=Function("x",'if(typeof x !== "object") return '+t+"(x)\nvar i;\nvar V = numeric."+e+"V;\nvar s = numeric.dim(x);\nreturn numeric._foreach2(x,s,0,V);\n"));for(e=0;e<numeric.mathfuns.length;++e)delete numeric.ops1[t=numeric.mathfuns[e]];for(e in numeric.mapreducers)numeric.mapreducers.hasOwnProperty(e)&&(numeric[e+"V"]=numeric.mapreduce2((t=numeric.mapreducers[e])[0],t[1]),numeric[e]=Function("x","s","k",t[1]+'if(typeof x !== "object") {    xi = x;\n'+t[0]+';\n    return accum;\n}if(typeof s === "undefined") s = numeric.dim(x);\nif(typeof k === "undefined") k = 0;\nif(k === s.length-1) return numeric.'+e+"V(x);\nvar xi;\nvar n = x.length, i;\nfor(i=n-1;i!==-1;--i) {\n   xi = arguments.callee(x[i]);\n"+t[0]+";\n}\nreturn accum;\n"))}(),numeric.truncVV=numeric.pointwise(["x[i]","y[i]"],"ret[i] = round(x[i]/y[i])*y[i];","var round = Math.round;"),numeric.truncVS=numeric.pointwise(["x[i]","y"],"ret[i] = round(x[i]/y)*y;","var round = Math.round;"),numeric.truncSV=numeric.pointwise(["x","y[i]"],"ret[i] = round(x/y[i])*y[i];","var round = Math.round;"),numeric.trunc=function(e,t){return"object"==typeof e?"object"==typeof t?numeric.truncVV(e,t):numeric.truncVS(e,t):"object"==typeof t?numeric.truncSV(e,t):Math.round(e/t)*t},numeric.inv=function(e){var t,r,a,n,i,o,s,l=numeric.dim(e),u=Math.abs,h=l[0],c=l[1],f=numeric.clone(e),d=numeric.identity(h);for(o=0;o<c;++o){var v=-1,p=-1;for(i=o;i!==h;++i)(s=u(f[i][o]))>p&&(v=i,p=s);for(r=f[v],f[v]=f[o],f[o]=r,n=d[v],d[v]=d[o],d[o]=n,e=r[o],s=o;s!==c;++s)r[s]/=e;for(s=c-1;-1!==s;--s)n[s]/=e;for(i=h-1;-1!==i;--i)if(i!==o){for(a=d[i],e=(t=f[i])[o],s=o+1;s!==c;++s)t[s]-=r[s]*e;for(s=c-1;s>0;--s)a[s]-=n[s]*e,a[--s]-=n[s]*e;0===s&&(a[0]-=n[0]*e)}}return d},numeric.det=function(e){var t=numeric.dim(e);if(2!==t.length||t[0]!==t[1])throw new Error("numeric: det() only works on square matrices");var r,a,n,i,o,s,l,u,h=t[0],c=1,f=numeric.clone(e);for(a=0;a<h-1;a++){for(n=a,r=a+1;r<h;r++)Math.abs(f[r][a])>Math.abs(f[n][a])&&(n=r);for(n!==a&&(l=f[n],f[n]=f[a],f[a]=l,c*=-1),i=f[a],r=a+1;r<h;r++){for(s=(o=f[r])[a]/i[a],n=a+1;n<h-1;n+=2)u=n+1,o[n]-=i[n]*s,o[u]-=i[u]*s;n!==h&&(o[n]-=i[n]*s)}if(0===i[a])return 0;c*=i[a]}return c*f[a][a]},numeric.transpose=function(e){var t,r,a,n,i,o=e.length,s=e[0].length,l=Array(s);for(r=0;r<s;r++)l[r]=Array(o);for(t=o-1;t>=1;t-=2){for(n=e[t],a=e[t-1],r=s-1;r>=1;--r)(i=l[r])[t]=n[r],i[t-1]=a[r],(i=l[--r])[t]=n[r],i[t-1]=a[r];0===r&&((i=l[0])[t]=n[0],i[t-1]=a[0])}if(0===t){for(a=e[0],r=s-1;r>=1;--r)l[r][0]=a[r],l[--r][0]=a[r];0===r&&(l[0][0]=a[0])}return l},numeric.negtranspose=function(e){var t,r,a,n,i,o=e.length,s=e[0].length,l=Array(s);for(r=0;r<s;r++)l[r]=Array(o);for(t=o-1;t>=1;t-=2){for(n=e[t],a=e[t-1],r=s-1;r>=1;--r)(i=l[r])[t]=-n[r],i[t-1]=-a[r],(i=l[--r])[t]=-n[r],i[t-1]=-a[r];0===r&&((i=l[0])[t]=-n[0],i[t-1]=-a[0])}if(0===t){for(a=e[0],r=s-1;r>=1;--r)l[r][0]=-a[r],l[--r][0]=-a[r];0===r&&(l[0][0]=-a[0])}return l},numeric._random=function e(t,r){var a,n,i=t[r],o=Array(i);if(r===t.length-1){for(n=Math.random,a=i-1;a>=1;a-=2)o[a]=n(),o[a-1]=n();return 0===a&&(o[0]=n()),o}for(a=i-1;a>=0;a--)o[a]=e(t,r+1);return o},numeric.random=function(e){return numeric._random(e,0)},numeric.norm2=function(e){return Math.sqrt(numeric.norm2Squared(e))},numeric.linspace=function(e,t,r){if(void 0===r&&(r=Math.max(Math.round(t-e)+1,1)),r<2)return 1===r?[e]:[];var a,n=Array(r);for(a=--r;a>=0;a--)n[a]=(a*t+(r-a)*e)/r;return n},numeric.getBlock=function(e,t,r){var a=numeric.dim(e);return function e(n,i){var o,s=t[i],l=r[i]-s,u=Array(l);if(i===a.length-1){for(o=l;o>=0;o--)u[o]=n[o+s];return u}for(o=l;o>=0;o--)u[o]=e(n[o+s],i+1);return u}(e,0)},numeric.setBlock=function(e,t,r,a){var n=numeric.dim(e);return function e(a,i,o){var s,l=t[o],u=r[o]-l;if(o===n.length-1)for(s=u;s>=0;s--)a[s+l]=i[s];for(s=u;s>=0;s--)e(a[s+l],i[s],o+1)}(e,a,0),e},numeric.getRange=function(e,t,r){var a,n,i,o,s=t.length,l=r.length,u=Array(s);for(a=s-1;-1!==a;--a)for(u[a]=Array(l),i=u[a],o=e[t[a]],n=l-1;-1!==n;--n)i[n]=o[r[n]];return u},numeric.blockMatrix=function(e){var t=numeric.dim(e);if(t.length<4)return numeric.blockMatrix([e]);var r,a,n,i,o,s=t[0],l=t[1];for(r=0,a=0,n=0;n<s;++n)r+=e[n][0].length;for(i=0;i<l;++i)a+=e[0][i][0].length;var u=Array(r);for(n=0;n<r;++n)u[n]=Array(a);var h,c,f,d,v,p=0;for(n=0;n<s;++n){for(h=a,i=l-1;-1!==i;--i)for(h-=(o=e[n][i])[0].length,f=o.length-1;-1!==f;--f)for(c=u[p+f],d=(v=o[f]).length-1;-1!==d;--d)c[h+d]=v[d];p+=e[n][0].length}return u},numeric.tensor=function(e,t){if("number"==typeof e||"number"==typeof t)return numeric.mul(e,t);var r=numeric.dim(e),a=numeric.dim(t);if(1!==r.length||1!==a.length)throw new Error("numeric: tensor product is only defined for vectors");var n,i,o,s,l=r[0],u=a[0],h=Array(l);for(i=l-1;i>=0;i--){for(n=Array(u),s=e[i],o=u-1;o>=3;--o)n[o]=s*t[o],n[--o]=s*t[o],n[--o]=s*t[o],n[--o]=s*t[o];for(;o>=0;)n[o]=s*t[o],--o;h[i]=n}return h},numeric.T=function(e,t){this.x=e,this.y=t},numeric.t=function(e,t){return new numeric.T(e,t)},numeric.Tbinop=function(e,t,r,a,n){var i;if("string"!=typeof n)for(i in n="",numeric)numeric.hasOwnProperty(i)&&(e.indexOf(i)>=0||t.indexOf(i)>=0||r.indexOf(i)>=0||a.indexOf(i)>=0)&&i.length>1&&(n+="var "+i+" = numeric."+i+";\n");return Function(["y"],"var x = this;\nif(!(y instanceof numeric.T)) { y = new numeric.T(y); }\n"+n+"\nif(x.y) {  if(y.y) {    return new numeric.T("+a+");\n  }\n  return new numeric.T("+r+");\n}\nif(y.y) {\n  return new numeric.T("+t+");\n}\nreturn new numeric.T("+e+");\n")},numeric.T.prototype.add=numeric.Tbinop("add(x.x,y.x)","add(x.x,y.x),y.y","add(x.x,y.x),x.y","add(x.x,y.x),add(x.y,y.y)"),numeric.T.prototype.sub=numeric.Tbinop("sub(x.x,y.x)","sub(x.x,y.x),neg(y.y)","sub(x.x,y.x),x.y","sub(x.x,y.x),sub(x.y,y.y)"),numeric.T.prototype.mul=numeric.Tbinop("mul(x.x,y.x)","mul(x.x,y.x),mul(x.x,y.y)","mul(x.x,y.x),mul(x.y,y.x)","sub(mul(x.x,y.x),mul(x.y,y.y)),add(mul(x.x,y.y),mul(x.y,y.x))"),numeric.T.prototype.reciprocal=function(){var e=numeric.mul,t=numeric.div;if(this.y){var r=numeric.add(e(this.x,this.x),e(this.y,this.y));return new numeric.T(t(this.x,r),t(numeric.neg(this.y),r))}return new T(t(1,this.x))},numeric.T.prototype.div=function(e){if(e instanceof numeric.T||(e=new numeric.T(e)),e.y)return this.mul(e.reciprocal());var t=numeric.div;return this.y?new numeric.T(t(this.x,e.x),t(this.y,e.x)):new numeric.T(t(this.x,e.x))},numeric.T.prototype.dot=numeric.Tbinop("dot(x.x,y.x)","dot(x.x,y.x),dot(x.x,y.y)","dot(x.x,y.x),dot(x.y,y.x)","sub(dot(x.x,y.x),dot(x.y,y.y)),add(dot(x.x,y.y),dot(x.y,y.x))"),numeric.T.prototype.transpose=function(){var e=numeric.transpose,t=this.x,r=this.y;return r?new numeric.T(e(t),e(r)):new numeric.T(e(t))},numeric.T.prototype.transjugate=function(){var e=numeric.transpose,t=this.x,r=this.y;return r?new numeric.T(e(t),numeric.negtranspose(r)):new numeric.T(e(t))},numeric.Tunop=function(e,t,r){return"string"!=typeof r&&(r=""),Function("var x = this;\n"+r+"\nif(x.y) {  "+t+";\n}\n"+e+";\n")},numeric.T.prototype.exp=numeric.Tunop("return new numeric.T(ex)","return new numeric.T(mul(cos(x.y),ex),mul(sin(x.y),ex))","var ex = numeric.exp(x.x), cos = numeric.cos, sin = numeric.sin, mul = numeric.mul;"),numeric.T.prototype.conj=numeric.Tunop("return new numeric.T(x.x);","return new numeric.T(x.x,numeric.neg(x.y));"),numeric.T.prototype.neg=numeric.Tunop("return new numeric.T(neg(x.x));","return new numeric.T(neg(x.x),neg(x.y));","var neg = numeric.neg;"),numeric.T.prototype.sin=numeric.Tunop("return new numeric.T(numeric.sin(x.x))","return x.exp().sub(x.neg().exp()).div(new numeric.T(0,2));"),numeric.T.prototype.cos=numeric.Tunop("return new numeric.T(numeric.cos(x.x))","return x.exp().add(x.neg().exp()).div(2);"),numeric.T.prototype.abs=numeric.Tunop("return new numeric.T(numeric.abs(x.x));","return new numeric.T(numeric.sqrt(numeric.add(mul(x.x,x.x),mul(x.y,x.y))));","var mul = numeric.mul;"),numeric.T.prototype.log=numeric.Tunop("return new numeric.T(numeric.log(x.x));","var theta = new numeric.T(numeric.atan2(x.y,x.x)), r = x.abs();\nreturn new numeric.T(numeric.log(r.x),theta.x);"),numeric.T.prototype.norm2=numeric.Tunop("return numeric.norm2(x.x);","var f = numeric.norm2Squared;\nreturn Math.sqrt(f(x.x)+f(x.y));"),numeric.T.prototype.inv=function(){var e=this;if(void 0===e.y)return new numeric.T(numeric.inv(e.x));var t,r,a,n,i,o,s,l,u,h,c,f,d,v,p,g,_,m,y=e.x.length,b=numeric.identity(y),x=numeric.rep([y,y],0),k=numeric.clone(e.x),w=numeric.clone(e.y);for(u=0;u<y;u++){for(f=(v=k[u][u])*v+(p=w[u][u])*p,c=u,h=u+1;h<y;h++)(d=(v=k[h][u])*v+(p=w[h][u])*p)>f&&(c=h,f=d);for(c!==u&&(m=k[u],k[u]=k[c],k[c]=m,m=w[u],w[u]=w[c],w[c]=m,m=b[u],b[u]=b[c],b[c]=m,m=x[u],x[u]=x[c],x[c]=m),i=b[u],o=x[u],v=(t=k[u])[u],p=(r=w[u])[u],h=u+1;h<y;h++)t[h]=((g=t[h])*v+(_=r[h])*p)/f,r[h]=(_*v-g*p)/f;for(h=0;h<y;h++)i[h]=((g=i[h])*v+(_=o[h])*p)/f,o[h]=(_*v-g*p)/f;for(h=u+1;h<y;h++){for(s=b[h],l=x[h],v=(a=k[h])[u],p=(n=w[h])[u],c=u+1;c<y;c++)a[c]-=(g=t[c])*v-(_=r[c])*p,n[c]-=_*v+g*p;for(c=0;c<y;c++)s[c]-=(g=i[c])*v-(_=o[c])*p,l[c]-=_*v+g*p}}for(u=y-1;u>0;u--)for(i=b[u],o=x[u],h=u-1;h>=0;h--)for(s=b[h],l=x[h],v=k[h][u],p=w[h][u],c=y-1;c>=0;c--)s[c]-=v*(g=i[c])-p*(_=o[c]),l[c]-=v*_+p*g;return new numeric.T(b,x)},numeric.T.prototype.get=function(e){var t,r=this.x,a=this.y,n=0,i=e.length;if(a){for(;n<i;)r=r[t=e[n]],a=a[t],n++;return new numeric.T(r,a)}for(;n<i;)r=r[t=e[n]],n++;return new numeric.T(r)},numeric.T.prototype.set=function(e,t){var r,a=this.x,n=this.y,i=0,o=e.length,s=t.x,l=t.y;if(0===o)return l?this.y=l:n&&(this.y=void 0),this.x=a,this;if(l){for(n||(n=numeric.rep(numeric.dim(a),0),this.y=n);i<o-1;)a=a[r=e[i]],n=n[r],i++;return a[r=e[i]]=s,n[r]=l,this}if(n){for(;i<o-1;)a=a[r=e[i]],n=n[r],i++;return a[r=e[i]]=s,n[r]=s instanceof Array?numeric.rep(numeric.dim(s),0):0,this}for(;i<o-1;)a=a[r=e[i]],i++;return a[r=e[i]]=s,this},numeric.T.prototype.getRows=function(e,t){var r,a,n=t-e+1,i=Array(n),o=this.x,s=this.y;for(r=e;r<=t;r++)i[r-e]=o[r];if(s){for(a=Array(n),r=e;r<=t;r++)a[r-e]=s[r];return new numeric.T(i,a)}return new numeric.T(i)},numeric.T.prototype.setRows=function(e,t,r){var a,n=this.x,i=this.y,o=r.x,s=r.y;for(a=e;a<=t;a++)n[a]=o[a-e];if(s)for(i||(i=numeric.rep(numeric.dim(n),0),this.y=i),a=e;a<=t;a++)i[a]=s[a-e];else if(i)for(a=e;a<=t;a++)i[a]=numeric.rep([o[a-e].length],0);return this},numeric.T.prototype.getRow=function(e){var t=this.x,r=this.y;return r?new numeric.T(t[e],r[e]):new numeric.T(t[e])},numeric.T.prototype.setRow=function(e,t){var r=this.x,a=this.y,n=t.x,i=t.y;return r[e]=n,i?(a||(a=numeric.rep(numeric.dim(r),0),this.y=a),a[e]=i):a&&(a=numeric.rep([n.length],0)),this},numeric.T.prototype.getBlock=function(e,t){var r=this.x,a=this.y,n=numeric.getBlock;return a?new numeric.T(n(r,e,t),n(a,e,t)):new numeric.T(n(r,e,t))},numeric.T.prototype.setBlock=function(e,t,r){r instanceof numeric.T||(r=new numeric.T(r));var a=this.x,n=this.y,i=numeric.setBlock,o=r.x,s=r.y;if(s)return n||(this.y=numeric.rep(numeric.dim(this),0),n=this.y),i(a,e,t,o),i(n,e,t,s),this;i(a,e,t,o),n&&i(n,e,t,numeric.rep(numeric.dim(o),0))},numeric.T.rep=function(e,t){var r=numeric.T;t instanceof r||(t=new r(t));var a=t.x,n=t.y,i=numeric.rep;return n?new r(i(e,a),i(e,n)):new r(i(e,a))},numeric.T.diag=function(e){e instanceof numeric.T||(e=new numeric.T(e));var t=e.x,r=e.y,a=numeric.diag;return r?new numeric.T(a(t),a(r)):new numeric.T(a(t))},numeric.T.eig=function(){if(this.y)throw new Error("eig: not implemented for complex matrices.");return numeric.eig(this.x)},numeric.T.identity=function(e){return new numeric.T(numeric.identity(e))},numeric.T.prototype.getDiag=function(){var e=numeric,t=this.x,r=this.y;return r?new e.T(e.getDiag(t),e.getDiag(r)):new e.T(e.getDiag(t))},numeric.house=function(e){var t=numeric.clone(e),r=(e[0]>=0?1:-1)*numeric.norm2(e);t[0]+=r;var a=numeric.norm2(t);if(0===a)throw new Error("eig: internal error");return numeric.div(t,a)},numeric.toUpperHessenberg=function(e){var t=numeric.dim(e);if(2!==t.length||t[0]!==t[1])throw new Error("numeric: toUpperHessenberg() only works on square matrices");var r,a,n,i,o,s,l,u,h,c,f=t[0],d=numeric.clone(e),v=numeric.identity(f);for(a=0;a<f-2;a++){for(i=Array(f-a-1),r=a+1;r<f;r++)i[r-a-1]=d[r][a];if(numeric.norm2(i)>0){for(o=numeric.house(i),s=numeric.getBlock(d,[a+1,a],[f-1,f-1]),l=numeric.tensor(o,numeric.dot(o,s)),r=a+1;r<f;r++)for(u=d[r],h=l[r-a-1],n=a;n<f;n++)u[n]-=2*h[n-a];for(s=numeric.getBlock(d,[0,a+1],[f-1,f-1]),l=numeric.tensor(numeric.dot(s,o),o),r=0;r<f;r++)for(u=d[r],h=l[r],n=a+1;n<f;n++)u[n]-=2*h[n-a-1];for(s=Array(f-a-1),r=a+1;r<f;r++)s[r-a-1]=v[r];for(l=numeric.tensor(o,numeric.dot(o,s)),r=a+1;r<f;r++)for(c=v[r],h=l[r-a-1],n=0;n<f;n++)c[n]-=2*h[n]}}return{H:d,Q:v}},numeric.epsilon=2220446049250313e-31,numeric.QRFrancis=function(e,t){void 0===t&&(t=1e4),e=numeric.clone(e),numeric.clone(e);var r,a,n,i,o,s,l,u,h,c,f,d,v,p,g,_,m=numeric.dim(e)[0],y=numeric.identity(m);if(m<3)return{Q:y,B:[[0,m-1]]};var b=numeric.epsilon;for(_=0;_<t;_++){for(p=0;p<m-1;p++)if(Math.abs(e[p+1][p])<b*(Math.abs(e[p][p])+Math.abs(e[p+1][p+1]))){var x=numeric.QRFrancis(numeric.getBlock(e,[0,0],[p,p]),t),k=numeric.QRFrancis(numeric.getBlock(e,[p+1,p+1],[m-1,m-1]),t);for(c=Array(p+1),v=0;v<=p;v++)c[v]=y[v];for(f=numeric.dot(x.Q,c),v=0;v<=p;v++)y[v]=f[v];for(c=Array(m-p-1),v=p+1;v<m;v++)c[v-p-1]=y[v];for(f=numeric.dot(k.Q,c),v=p+1;v<m;v++)y[v]=f[v-p-1];return{Q:y,B:x.B.concat(numeric.add(k.B,p+1))}}var w,C,T;for(s=(n=e[m-2][m-2])+(i=e[m-1][m-1]),o=n*i-e[m-2][m-1]*e[m-1][m-2],l=numeric.getBlock(e,[0,0],[2,2]),s*s>=4*o?(w=.5*(s+Math.sqrt(s*s-4*o)),C=.5*(s-Math.sqrt(s*s-4*o)),l=numeric.add(numeric.sub(numeric.dot(l,l),numeric.mul(l,w+C)),numeric.diag(numeric.rep([3],w*C)))):l=numeric.add(numeric.sub(numeric.dot(l,l),numeric.mul(l,s)),numeric.diag(numeric.rep([3],o))),a=numeric.house(r=[l[0][0],l[1][0],l[2][0]]),f=numeric.tensor(a,numeric.dot(a,c=[e[0],e[1],e[2]])),v=0;v<3;v++)for(h=e[v],d=f[v],g=0;g<m;g++)h[g]-=2*d[g];for(c=numeric.getBlock(e,[0,0],[m-1,2]),f=numeric.tensor(numeric.dot(c,a),a),v=0;v<m;v++)for(h=e[v],d=f[v],g=0;g<3;g++)h[g]-=2*d[g];for(f=numeric.tensor(a,numeric.dot(a,c=[y[0],y[1],y[2]])),v=0;v<3;v++)for(u=y[v],d=f[v],g=0;g<m;g++)u[g]-=2*d[g];for(p=0;p<m-2;p++){for(g=p;g<=p+1;g++)if(Math.abs(e[g+1][g])<b*(Math.abs(e[g][g])+Math.abs(e[g+1][g+1]))){for(x=numeric.QRFrancis(numeric.getBlock(e,[0,0],[g,g]),t),k=numeric.QRFrancis(numeric.getBlock(e,[g+1,g+1],[m-1,m-1]),t),c=Array(g+1),v=0;v<=g;v++)c[v]=y[v];for(f=numeric.dot(x.Q,c),v=0;v<=g;v++)y[v]=f[v];for(c=Array(m-g-1),v=g+1;v<m;v++)c[v-g-1]=y[v];for(f=numeric.dot(k.Q,c),v=g+1;v<m;v++)y[v]=f[v-g-1];return{Q:y,B:x.B.concat(numeric.add(k.B,g+1))}}for(T=Math.min(m-1,p+3),r=Array(T-p),v=p+1;v<=T;v++)r[v-p-1]=e[v][p];for(a=numeric.house(r),c=numeric.getBlock(e,[p+1,p],[T,m-1]),f=numeric.tensor(a,numeric.dot(a,c)),v=p+1;v<=T;v++)for(h=e[v],d=f[v-p-1],g=p;g<m;g++)h[g]-=2*d[g-p];for(c=numeric.getBlock(e,[0,p+1],[m-1,T]),f=numeric.tensor(numeric.dot(c,a),a),v=0;v<m;v++)for(h=e[v],d=f[v],g=p+1;g<=T;g++)h[g]-=2*d[g-p-1];for(c=Array(T-p),v=p+1;v<=T;v++)c[v-p-1]=y[v];for(f=numeric.tensor(a,numeric.dot(a,c)),v=p+1;v<=T;v++)for(u=y[v],d=f[v-p-1],g=0;g<m;g++)u[g]-=2*d[g]}}throw new Error("numeric: eigenvalue iteration does not converge -- increase maxiter?")},numeric.eig=function(e,t){var r,a,n,i,o,s,l,u,h,c,f,d,v,p,g,_,m,y=numeric.toUpperHessenberg(e),b=numeric.QRFrancis(y.H,t),x=numeric.T,k=b.B,w=numeric.dot(b.Q,numeric.dot(y.H,numeric.transpose(b.Q))),C=new x(numeric.dot(b.Q,y.Q)),T=k.length,S=Math.sqrt;for(a=0;a<T;a++)if((r=k[a][0])===k[a][1]);else{if(o=w[r][r],l=w[i=r+1][r],u=w[i][i],0===(s=w[r][i])&&0===l)continue;(c=(h=-o-u)*h-4*(o*u-s*l))>=0?((g=(o-(f=h<0?-.5*(h-S(c)):-.5*(h+S(c))))*(o-f)+s*s)>(_=l*l+(u-f)*(u-f))?(v=(o-f)/(g=S(g)),p=s/g):(v=l/(_=S(_)),p=(u-f)/_),n=new x([[p,-v],[v,p]]),C.setRows(r,i,n.dot(C.getRows(r,i)))):(f=-.5*h,d=.5*S(-c),(g=(o-f)*(o-f)+s*s)>(_=l*l+(u-f)*(u-f))?(v=(o-f)/(g=S(g+d*d)),p=s/g,f=0,d/=g):(v=l/(_=S(_+d*d)),p=(u-f)/_,f=d/_,d=0),n=new x([[p,-v],[v,p]],[[f,d],[d,-f]]),C.setRows(r,i,n.dot(C.getRows(r,i))))}var I=C.dot(e).dot(C.transjugate()),A=numeric.T.identity(m=e.length);for(i=0;i<m;i++)if(i>0)for(a=i-1;a>=0;a--){var R=I.get([a,a]),N=I.get([i,i]);numeric.neq(R.x,N.x)||numeric.neq(R.y,N.y)?(f=I.getRow(a).getBlock([a],[i-1]),d=A.getRow(i).getBlock([a],[i-1]),A.set([i,a],I.get([a,i]).neg().sub(f.dot(d)).div(R.sub(N)))):A.setRow(i,A.getRow(a))}for(i=0;i<m;i++)f=A.getRow(i),A.setRow(i,f.div(f.norm2()));return A=A.transpose(),A=C.transjugate().dot(A),{lambda:I.getDiag(),E:A}},numeric.ccsSparse=function(e){var t,r,a,n=e.length,i=[];for(r=n-1;-1!==r;--r)for(a in t=e[r]){for(a=parseInt(a);a>=i.length;)i[i.length]=0;0!==t[a]&&i[a]++}var o=i.length,s=Array(o+1);for(s[0]=0,r=0;r<o;++r)s[r+1]=s[r]+i[r];var l=Array(s[o]),u=Array(s[o]);for(r=n-1;-1!==r;--r)for(a in t=e[r])0!==t[a]&&(i[a]--,l[s[a]+i[a]]=r,u[s[a]+i[a]]=t[a]);return[s,l,u]},numeric.ccsFull=function(e){var t,r,a,n=e[0],i=e[1],o=e[2],s=numeric.ccsDim(e),l=s[1],u=numeric.rep([s[0],l],0);for(t=0;t<l;t++)for(a=n[t+1],r=n[t];r<a;++r)u[i[r]][t]=o[r];return u},numeric.ccsTSolve=function(e,t,r,a,n){var i,o,s,l,u,h,c,f=e[0],d=e[1],v=e[2],p=Math.max,g=0;function _(e){var t;if(0===r[e]){for(r[e]=1,t=f[e];t<f[e+1];++t)_(d[t]);n[g]=e,++g}}for(void 0===a&&(r=numeric.rep([f.length-1],0)),void 0===a&&(a=numeric.linspace(0,r.length-1)),void 0===n&&(n=[]),i=a.length-1;-1!==i;--i)_(a[i]);for(n.length=g,i=n.length-1;-1!==i;--i)r[n[i]]=0;for(i=a.length-1;-1!==i;--i)r[o=a[i]]=t[o];for(i=n.length-1;-1!==i;--i){for(l=p(f[(o=n[i])+1],s=f[o]),u=s;u!==l;++u)if(d[u]===o){r[o]/=v[u];break}for(c=r[o],u=s;u!==l;++u)(h=d[u])!==o&&(r[h]-=c*v[u])}return r},numeric.ccsDFS=function(e){this.k=Array(e),this.k1=Array(e),this.j=Array(e)},numeric.ccsDFS.prototype.dfs=function(e,t,r,a,n,i){var o,s,l,u=0,h=n.length,c=this.k,f=this.k1,d=this.j;if(0===a[e])for(a[e]=1,d[0]=e,c[0]=s=t[e],f[0]=l=t[e+1];;)if(s>=l){if(n[h]=d[u],0===u)return;++h,s=c[--u],l=f[u]}else 0===a[o=i[r[s]]]?(a[o]=1,c[u]=s,d[++u]=o,s=t[o],f[u]=l=t[o+1]):++s},numeric.ccsLPSolve=function(e,t,r,a,n,i,o){var s,l,u,h,c,f,d,v,p,g=e[0],_=e[1],m=e[2],y=t[0],b=t[1],x=t[2];for(l=y[n],u=y[n+1],a.length=0,s=l;s<u;++s)o.dfs(i[b[s]],g,_,r,a,i);for(s=a.length-1;-1!==s;--s)r[a[s]]=0;for(s=l;s!==u;++s)r[h=i[b[s]]]=x[s];for(s=a.length-1;-1!==s;--s){for(f=g[(h=a[s])+1],d=c=g[h];d<f;++d)if(i[_[d]]===h){r[h]/=m[d];break}for(p=r[h],d=c;d<f;++d)(v=i[_[d]])!==h&&(r[v]-=p*m[d])}return r},numeric.ccsLUP1=function(e,t){var r,a,n,i,o,s,l,u=e[0].length-1,h=[numeric.rep([u+1],0),[],[]],c=[numeric.rep([u+1],0),[],[]],f=h[0],d=h[1],v=h[2],p=c[0],g=c[1],_=c[2],m=numeric.rep([u],0),y=numeric.rep([u],0),b=numeric.ccsLPSolve,x=(Math,Math.abs),k=numeric.linspace(0,u-1),w=numeric.linspace(0,u-1),C=new numeric.ccsDFS(u);for(void 0===t&&(t=1),r=0;r<u;++r){for(b(h,e,m,y,r,w,C),i=-1,o=-1,a=y.length-1;-1!==a;--a)(n=y[a])<=r||(s=x(m[n]))>i&&(o=n,i=s);for(x(m[r])<t*i&&(a=k[r],k[r]=i=k[o],w[i]=r,k[o]=a,w[a]=o,i=m[r],m[r]=m[o],m[o]=i),o=p[r],l=m[r],d[i=f[r]]=k[r],v[i]=1,++i,a=y.length-1;-1!==a;--a)s=m[n=y[a]],y[a]=0,m[n]=0,n<=r?(g[o]=n,_[o]=s,++o):(d[i]=k[n],v[i]=s/l,++i);f[r+1]=i,p[r+1]=o}for(a=d.length-1;-1!==a;--a)d[a]=w[d[a]];return{L:h,U:c,P:k,Pinv:w}},numeric.ccsDFS0=function(e){this.k=Array(e),this.k1=Array(e),this.j=Array(e)},numeric.ccsDFS0.prototype.dfs=function(e,t,r,a,n,i,o){var s,l,u,h=0,c=n.length,f=this.k,d=this.k1,v=this.j;if(0===a[e])for(a[e]=1,v[0]=e,f[0]=l=t[i[e]],d[0]=u=t[i[e]+1];;){if(isNaN(l))throw new Error("Ow!");if(l>=u){if(n[c]=i[v[h]],0===h)return;++c,l=f[--h],u=d[h]}else 0===a[s=r[l]]?(a[s]=1,f[h]=l,v[++h]=s,l=t[s=i[s]],d[h]=u=t[s+1]):++l}},numeric.ccsLPSolve0=function(e,t,r,a,n,i,o,s){var l,u,h,c,f,d,v,p,g,_=e[0],m=e[1],y=e[2],b=t[0],x=t[1],k=t[2];for(u=b[n],h=b[n+1],a.length=0,l=u;l<h;++l)s.dfs(x[l],_,m,r,a,i,o);for(l=a.length-1;-1!==l;--l)r[o[c=a[l]]]=0;for(l=u;l!==h;++l)r[c=x[l]]=k[l];for(l=a.length-1;-1!==l;--l){for(p=o[c=a[l]],d=_[c+1],v=f=_[c];v<d;++v)if(m[v]===p){r[p]/=y[v];break}for(g=r[p],v=f;v<d;++v)r[m[v]]-=g*y[v];r[p]=g}},numeric.ccsLUP0=function(e,t){var r,a,n,i,o,s,l,u=e[0].length-1,h=[numeric.rep([u+1],0),[],[]],c=[numeric.rep([u+1],0),[],[]],f=h[0],d=h[1],v=h[2],p=c[0],g=c[1],_=c[2],m=numeric.rep([u],0),y=numeric.rep([u],0),b=numeric.ccsLPSolve0,x=(Math,Math.abs),k=numeric.linspace(0,u-1),w=numeric.linspace(0,u-1),C=new numeric.ccsDFS0(u);for(void 0===t&&(t=1),r=0;r<u;++r){for(b(h,e,m,y,r,w,k,C),i=-1,o=-1,a=y.length-1;-1!==a;--a)(n=y[a])<=r||(s=x(m[k[n]]))>i&&(o=n,i=s);for(x(m[k[r]])<t*i&&(a=k[r],k[r]=i=k[o],w[i]=r,k[o]=a,w[a]=o),o=p[r],l=m[k[r]],d[i=f[r]]=k[r],v[i]=1,++i,a=y.length-1;-1!==a;--a)s=m[k[n=y[a]]],y[a]=0,m[k[n]]=0,n<=r?(g[o]=n,_[o]=s,++o):(d[i]=k[n],v[i]=s/l,++i);f[r+1]=i,p[r+1]=o}for(a=d.length-1;-1!==a;--a)d[a]=w[d[a]];return{L:h,U:c,P:k,Pinv:w}},numeric.ccsLUP=numeric.ccsLUP0,numeric.ccsDim=function(e){return[numeric.sup(e[1])+1,e[0].length-1]},numeric.ccsGetBlock=function(e,t,r){var a=numeric.ccsDim(e),n=a[0],i=a[1];void 0===t?t=numeric.linspace(0,n-1):"number"==typeof t&&(t=[t]),void 0===r?r=numeric.linspace(0,i-1):"number"==typeof r&&(r=[r]);var o,s,l,u,h=t.length,c=r.length,f=numeric.rep([i],0),d=[],v=[],p=[f,d,v],g=e[0],_=e[1],m=e[2],y=numeric.rep([n],0),b=0,x=numeric.rep([n],0);for(s=0;s<c;++s){var k=g[u=r[s]],w=g[u+1];for(o=k;o<w;++o)x[l=_[o]]=1,y[l]=m[o];for(o=0;o<h;++o)x[t[o]]&&(d[b]=o,v[b]=y[t[o]],++b);for(o=k;o<w;++o)x[l=_[o]]=0;f[s+1]=b}return p},numeric.ccsDot=function(e,t){var r,a,n,i,o,s,l,u,h,c,f=e[0],d=e[1],v=e[2],p=t[0],g=t[1],_=t[2],m=numeric.ccsDim(e),y=numeric.ccsDim(t),b=m[0],x=y[1],k=numeric.rep([b],0),w=numeric.rep([b],0),C=Array(b),T=numeric.rep([x],0),S=[],I=[],A=[T,S,I];for(n=0;n!==x;++n){for(o=p[n+1],u=0,a=p[n];a<o;++a)for(c=_[a],s=f[(h=g[a])+1],r=f[h];r<s;++r)0===w[l=d[r]]&&(C[u]=l,w[l]=1,u+=1),k[l]=k[l]+v[r]*c;for(T[n+1]=o=(i=T[n])+u,a=u-1;-1!==a;--a)S[c=i+a]=r=C[a],I[c]=k[r],w[r]=0,k[r]=0;T[n+1]=T[n]+u}return A},numeric.ccsLUPSolve=function(e,t){var r=e.L,a=e.U,n=t[0],i=!1;"object"!=typeof n&&(n=(t=[[0,t.length],numeric.linspace(0,t.length-1),t])[0],i=!0);var o,s,l,u,h,c=t[1],f=t[2],d=r[0].length-1,v=n.length-1,p=numeric.rep([d],0),g=Array(d),_=numeric.rep([d],0),m=Array(d),y=numeric.rep([v+1],0),b=[],x=[],k=numeric.ccsTSolve,w=0;for(o=0;o<v;++o){for(u=0,l=n[o+1],s=n[o];s<l;++s)m[u]=h=e.Pinv[c[s]],_[h]=f[s],++u;for(m.length=u,k(r,_,p,m,g),s=m.length-1;-1!==s;--s)_[m[s]]=0;if(k(a,p,_,g,m),i)return _;for(s=g.length-1;-1!==s;--s)p[g[s]]=0;for(s=m.length-1;-1!==s;--s)b[w]=h=m[s],x[w]=_[h],_[h]=0,++w;y[o+1]=w}return[y,b,x]},numeric.ccsbinop=function(e,t){return void 0===t&&(t=""),Function("X","Y","var Xi = X[0], Xj = X[1], Xv = X[2];\nvar Yi = Y[0], Yj = Y[1], Yv = Y[2];\nvar n = Xi.length-1,m = Math.max(numeric.sup(Xj),numeric.sup(Yj))+1;\nvar Zi = numeric.rep([n+1],0), Zj = [], Zv = [];\nvar x = numeric.rep([m],0),y = numeric.rep([m],0);\nvar xk,yk,zk;\nvar i,j,j0,j1,k,p=0;\n"+t+"for(i=0;i<n;++i) {\n  j0 = Xi[i]; j1 = Xi[i+1];\n  for(j=j0;j!==j1;++j) {\n    k = Xj[j];\n    x[k] = 1;\n    Zj[p] = k;\n    ++p;\n  }\n  j0 = Yi[i]; j1 = Yi[i+1];\n  for(j=j0;j!==j1;++j) {\n    k = Yj[j];\n    y[k] = Yv[j];\n    if(x[k] === 0) {\n      Zj[p] = k;\n      ++p;\n    }\n  }\n  Zi[i+1] = p;\n  j0 = Xi[i]; j1 = Xi[i+1];\n  for(j=j0;j!==j1;++j) x[Xj[j]] = Xv[j];\n  j0 = Zi[i]; j1 = Zi[i+1];\n  for(j=j0;j!==j1;++j) {\n    k = Zj[j];\n    xk = x[k];\n    yk = y[k];\n"+e+"\n    Zv[j] = zk;\n  }\n  j0 = Xi[i]; j1 = Xi[i+1];\n  for(j=j0;j!==j1;++j) x[Xj[j]] = 0;\n  j0 = Yi[i]; j1 = Yi[i+1];\n  for(j=j0;j!==j1;++j) y[Yj[j]] = 0;\n}\nreturn [Zi,Zj,Zv];")},function(){var k,A,B,C;for(k in numeric.ops2)A=isFinite(eval("1"+numeric.ops2[k]+"0"))?"[Y[0],Y[1],numeric."+k+"(X,Y[2])]":"NaN",B=isFinite(eval("0"+numeric.ops2[k]+"1"))?"[X[0],X[1],numeric."+k+"(X[2],Y)]":"NaN",C=isFinite(eval("1"+numeric.ops2[k]+"0"))&&isFinite(eval("0"+numeric.ops2[k]+"1"))?"numeric.ccs"+k+"MM(X,Y)":"NaN",numeric["ccs"+k+"MM"]=numeric.ccsbinop("zk = xk "+numeric.ops2[k]+"yk;"),numeric["ccs"+k]=Function("X","Y",'if(typeof X === "number") return '+A+';\nif(typeof Y === "number") return '+B+";\nreturn "+C+";\n")}(),numeric.ccsScatter=function(e){var t,r=e[0],a=e[1],n=e[2],i=numeric.sup(a)+1,o=r.length,s=numeric.rep([i],0),l=Array(o),u=Array(o),h=numeric.rep([i],0);for(t=0;t<o;++t)h[a[t]]++;for(t=0;t<i;++t)s[t+1]=s[t]+h[t];var c,f,d=s.slice(0);for(t=0;t<o;++t)l[c=d[f=a[t]]]=r[t],u[c]=n[t],d[f]=d[f]+1;return[s,l,u]},numeric.ccsGather=function(e){var t,r,a,n,i=e[0],o=e[1],s=e[2],l=i.length-1,u=o.length,h=Array(u),c=Array(u),f=Array(u);for(n=0,t=0;t<l;++t)for(a=i[t+1],r=i[t];r!==a;++r)c[n]=t,h[n]=o[r],f[n]=s[r],++n;return[h,c,f]},numeric.sdim=function e(t,r,a){if(void 0===r&&(r=[]),"object"!=typeof t)return r;var n;for(n in void 0===a&&(a=0),a in r||(r[a]=0),t.length>r[a]&&(r[a]=t.length),t)t.hasOwnProperty(n)&&e(t[n],r,a+1);return r},numeric.sclone=function e(t,r,a){void 0===r&&(r=0),void 0===a&&(a=numeric.sdim(t).length);var n,i=Array(t.length);if(r===a-1){for(n in t)t.hasOwnProperty(n)&&(i[n]=t[n]);return i}for(n in t)t.hasOwnProperty(n)&&(i[n]=e(t[n],r+1,a));return i},numeric.sdiag=function(e){var t,r,a=e.length,n=Array(a);for(t=a-1;t>=1;t-=2)r=t-1,n[t]=[],n[t][t]=e[t],n[r]=[],n[r][r]=e[r];return 0===t&&(n[0]=[],n[0][0]=e[t]),n},numeric.sidentity=function(e){return numeric.sdiag(numeric.rep([e],1))},numeric.stranspose=function(e){var t,r,a,n=[];for(t in e)if(e.hasOwnProperty(t))for(r in a=e[t])a.hasOwnProperty(r)&&("object"!=typeof n[r]&&(n[r]=[]),n[r][t]=a[r]);return n},numeric.sLUP=function(e,t){throw new Error("The function numeric.sLUP had a bug in it and has been removed. Please use the new numeric.ccsLUP function instead.")},numeric.sdotMM=function(e,t){var r,a,n,i,o,s,l,u=e.length,h=numeric.stranspose(t),c=h.length,f=Array(u);for(n=u-1;n>=0;n--){for(l=[],r=e[n],o=c-1;o>=0;o--){for(i in s=0,a=h[o],r)r.hasOwnProperty(i)&&i in a&&(s+=r[i]*a[i]);s&&(l[o]=s)}f[n]=l}return f},numeric.sdotMV=function(e,t){var r,a,n,i,o=e.length,s=Array(o);for(a=o-1;a>=0;a--){for(n in i=0,r=e[a])r.hasOwnProperty(n)&&t[n]&&(i+=r[n]*t[n]);i&&(s[a]=i)}return s},numeric.sdotVM=function(e,t){var r,a,n,i,o=[];for(r in e)if(e.hasOwnProperty(r))for(a in i=e[r],n=t[r])n.hasOwnProperty(a)&&(o[a]||(o[a]=0),o[a]+=i*n[a]);return o},numeric.sdotVV=function(e,t){var r,a=0;for(r in e)e[r]&&t[r]&&(a+=e[r]*t[r]);return a},numeric.sdot=function(e,t){var r=numeric.sdim(e).length,a=numeric.sdim(t).length;switch(1e3*r+a){case 0:return e*t;case 1001:return numeric.sdotVV(e,t);case 2001:return numeric.sdotMV(e,t);case 1002:return numeric.sdotVM(e,t);case 2002:return numeric.sdotMM(e,t);default:throw new Error("numeric.sdot not implemented for tensors of order "+r+" and "+a)}},numeric.sscatter=function(e){var t,r,a,n,i=e.length,o=[];for(r=e[0].length-1;r>=0;--r)if(e[i-1][r]){for(n=o,a=0;a<i-2;a++)n[t=e[a][r]]||(n[t]=[]),n=n[t];n[e[a][r]]=e[a+1][r]}return o},numeric.sgather=function e(t,r,a){var n,i,o;for(i in void 0===r&&(r=[]),void 0===a&&(a=[]),n=a.length,t)if(t.hasOwnProperty(i))if(a[n]=parseInt(i),"number"==typeof(o=t[i])){if(o){if(0===r.length)for(i=n+1;i>=0;--i)r[i]=[];for(i=n;i>=0;--i)r[i].push(a[i]);r[n+1].push(o)}}else e(o,r,a);return a.length>n&&a.pop(),r},numeric.cLU=function(e){var t,r,a,n,i,o,s=e[0],l=e[1],u=e[2],h=s.length,c=0;for(t=0;t<h;t++)s[t]>c&&(c=s[t]);c++;var f,d=Array(c),v=Array(c),p=numeric.rep([c],1/0),g=numeric.rep([c],-1/0);for(a=0;a<h;a++)(r=l[a])<p[t=s[a]]&&(p[t]=r),r>g[t]&&(g[t]=r);for(t=0;t<c-1;t++)g[t]>g[t+1]&&(g[t+1]=g[t]);for(t=c-1;t>=1;t--)p[t]<p[t-1]&&(p[t-1]=p[t]);for(t=0;t<c;t++)v[t]=numeric.rep([g[t]-p[t]+1],0),d[t]=numeric.rep([t-p[t]],0);for(a=0;a<h;a++)v[t=s[a]][l[a]-p[t]]=u[a];for(t=0;t<c-1;t++)for(n=t-p[t],y=v[t],r=t+1;p[r]<=t&&r<c;r++)if(o=g[t]-t,f=(b=v[r])[i=t-p[r]]/y[n]){for(a=1;a<=o;a++)b[a+i]-=f*y[a+n];d[r][t-p[r]]=f}var _,m,y=[],b=[],x=[],k=[],w=[],C=[];for(h=0,_=0,t=0;t<c;t++){for(n=p[t],i=g[t],m=v[t],r=t;r<=i;r++)m[r-n]&&(y[h]=t,b[h]=r,x[h]=m[r-n],h++);for(m=d[t],r=n;r<t;r++)m[r-n]&&(k[_]=t,w[_]=r,C[_]=m[r-n],_++);k[_]=t,w[_]=t,C[_]=1,_++}return{U:[y,b,x],L:[k,w,C]}},numeric.cLUsolve=function(e,t){var r,a,n=e.L,i=e.U,o=numeric.clone(t),s=n[1],l=n[2],u=i[1],h=i[2],c=i[0].length,f=o.length;for(a=0,r=0;r<f;r++){for(;s[a]<r;)o[r]-=l[a]*o[s[a]],a++;a++}for(a=c-1,r=f-1;r>=0;r--){for(;u[a]>r;)o[r]-=h[a]*o[u[a]],a--;o[r]/=h[a],a--}return o},numeric.cgrid=function(e,t){"number"==typeof e&&(e=[e,e]);var r,a,n,i=numeric.rep(e,-1);if("function"!=typeof t)switch(t){case"L":t=function(t,r){return t>=e[0]/2||r<e[1]/2};break;default:t=function(e,t){return!0}}for(n=0,r=1;r<e[0]-1;r++)for(a=1;a<e[1]-1;a++)t(r,a)&&(i[r][a]=n,n++);return i},numeric.cdelsq=function(e){var t,r,a,n,i,o=[[-1,0],[0,-1],[0,1],[1,0]],s=numeric.dim(e),l=s[0],u=s[1],h=[],c=[],f=[];for(t=1;t<l-1;t++)for(r=1;r<u-1;r++)if(!(e[t][r]<0)){for(a=0;a<4;a++)e[n=t+o[a][0]][i=r+o[a][1]]<0||(h.push(e[t][r]),c.push(e[n][i]),f.push(-1));h.push(e[t][r]),c.push(e[t][r]),f.push(4)}return[h,c,f]},numeric.cdotMV=function(e,t){var r,a,n,i=e[0],o=e[1],s=e[2],l=i.length;for(n=0,a=0;a<l;a++)i[a]>n&&(n=i[a]);for(n++,r=numeric.rep([n],0),a=0;a<l;a++)r[i[a]]+=s[a]*t[o[a]];return r},numeric.Spline=function(e,t,r,a,n){this.x=e,this.yl=t,this.yr=r,this.kl=a,this.kr=n},numeric.Spline.prototype._at=function(e,t){var r,a,n,i=this.x,o=this.yl,s=this.yr,l=this.kr,u=numeric.add,h=numeric.sub,c=numeric.mul;r=h(c(this.kl[t],i[t+1]-i[t]),h(s[t+1],o[t])),a=u(c(l[t+1],i[t]-i[t+1]),h(s[t+1],o[t]));var f=(n=(e-i[t])/(i[t+1]-i[t]))*(1-n);return u(u(u(c(1-n,o[t]),c(n,s[t+1])),c(r,f*(1-n))),c(a,f*n))},numeric.Spline.prototype.at=function(e){if("number"==typeof e){var t,r,a,n=this.x,i=n.length,o=Math.floor;for(t=0,r=i-1;r-t>1;)n[a=o((t+r)/2)]<=e?t=a:r=a;return this._at(e,t)}i=e.length;var s,l=Array(i);for(s=i-1;-1!==s;--s)l[s]=this.at(e[s]);return l},numeric.Spline.prototype.diff=function(){var e,t,r,a=this.x,n=this.yl,i=this.yr,o=this.kl,s=this.kr,l=n.length,u=o,h=s,c=Array(l),f=Array(l),d=numeric.add,v=numeric.mul,p=numeric.div,g=numeric.sub;for(e=l-1;-1!==e;--e)t=a[e+1]-a[e],r=g(i[e+1],n[e]),c[e]=p(d(v(r,6),v(o[e],-4*t),v(s[e+1],-2*t)),t*t),f[e+1]=p(d(v(r,-6),v(o[e],2*t),v(s[e+1],4*t)),t*t);return new numeric.Spline(a,u,h,c,f)},numeric.Spline.prototype.roots=function(){function e(e){return e*e}var t=[],r=this.x,a=this.yl,n=this.yr,i=this.kl,o=this.kr;"number"==typeof a[0]&&(a=[a],n=[n],i=[i],o=[o]);var s,l,u,h,c,f,d,v,p,g,_,m,y,b,x,k,w,C,T,S,I,A,R,N=a.length,E=r.length-1,F=(t=Array(N),Math.sqrt);for(s=0;s!==N;++s){for(h=a[s],c=n[s],f=i[s],d=o[s],v=[],l=0;l!==E;l++){for(l>0&&c[l]*h[l]<0&&v.push(r[l]),y=(g=d[l+1]/(k=r[l+1]-r[l]))+3*(_=h[l])+2*(p=f[l]/k)-3*(m=c[l+1]),b=3*(g+p+2*(_-m)),(x=e(p-g+3*(_-m))+12*g*_)<=0?w=(C=y/b)>r[l]&&C<r[l+1]?[r[l],C,r[l+1]]:[r[l],r[l+1]]:(C=(y-F(x))/b,T=(y+F(x))/b,w=[r[l]],C>r[l]&&C<r[l+1]&&w.push(C),T>r[l]&&T<r[l+1]&&w.push(T),w.push(r[l+1])),C=this._at(I=w[0],l),u=0;u<w.length-1;u++)if(T=this._at(A=w[u+1],l),0!==C)if(0===T||C*T>0)I=A,C=T;else{for(var M=0;!((R=(C*A-T*I)/(C-T))<=I||R>=A);)if((S=this._at(R,l))*T>0)A=R,T=S,-1===M&&(C*=.5),M=-1;else{if(!(S*C>0))break;I=R,C=S,1===M&&(T*=.5),M=1}v.push(R),C=this._at(I=w[u+1],l)}else v.push(I),I=A,C=T;0===T&&v.push(A)}t[s]=v}return"number"==typeof this.yl[0]?t[0]:t},numeric.spline=function(e,t,r,a){var n,i=e.length,o=[],s=[],l=[],u=numeric.sub,h=numeric.mul,c=numeric.add;for(n=i-2;n>=0;n--)s[n]=e[n+1]-e[n],l[n]=u(t[n+1],t[n]);"string"!=typeof r&&"string"!=typeof a||(r=a="periodic");var f=[[],[],[]];switch(typeof r){case"undefined":o[0]=h(3/(s[0]*s[0]),l[0]),f[0].push(0,0),f[1].push(0,1),f[2].push(2/s[0],1/s[0]);break;case"string":o[0]=c(h(3/(s[i-2]*s[i-2]),l[i-2]),h(3/(s[0]*s[0]),l[0])),f[0].push(0,0,0),f[1].push(i-2,0,1),f[2].push(1/s[i-2],2/s[i-2]+2/s[0],1/s[0]);break;default:o[0]=r,f[0].push(0),f[1].push(0),f[2].push(1)}for(n=1;n<i-1;n++)o[n]=c(h(3/(s[n-1]*s[n-1]),l[n-1]),h(3/(s[n]*s[n]),l[n])),f[0].push(n,n,n),f[1].push(n-1,n,n+1),f[2].push(1/s[n-1],2/s[n-1]+2/s[n],1/s[n]);switch(typeof a){case"undefined":o[i-1]=h(3/(s[i-2]*s[i-2]),l[i-2]),f[0].push(i-1,i-1),f[1].push(i-2,i-1),f[2].push(1/s[i-2],2/s[i-2]);break;case"string":f[1][f[1].length-1]=0;break;default:o[i-1]=a,f[0].push(i-1),f[1].push(i-1),f[2].push(1)}o="number"!=typeof o[0]?numeric.transpose(o):[o];var d=Array(o.length);if("string"==typeof r)for(n=d.length-1;-1!==n;--n)d[n]=numeric.ccsLUPSolve(numeric.ccsLUP(numeric.ccsScatter(f)),o[n]),d[n][i-1]=d[n][0];else for(n=d.length-1;-1!==n;--n)d[n]=numeric.cLUsolve(numeric.cLU(f),o[n]);return d="number"==typeof t[0]?d[0]:numeric.transpose(d),new numeric.Spline(e,t,t,d,d)},numeric.fftpow2=function e(t,r){var a=t.length;if(1!==a){var n,i,o=Math.cos,s=Math.sin,l=Array(a/2),u=Array(a/2),h=Array(a/2),c=Array(a/2);for(i=a/2,n=a-1;-1!==n;--n)h[--i]=t[n],c[i]=r[n],--n,l[i]=t[n],u[i]=r[n];e(l,u),e(h,c),i=a/2;var f,d,v,p=-6.283185307179586/a;for(n=a-1;-1!==n;--n)-1==--i&&(i=a/2-1),d=o(f=p*n),v=s(f),t[n]=l[i]+d*h[i]-v*c[i],r[n]=u[i]+d*c[i]+v*h[i]}},numeric._ifftpow2=function e(t,r){var a=t.length;if(1!==a){var n,i,o=Math.cos,s=Math.sin,l=Array(a/2),u=Array(a/2),h=Array(a/2),c=Array(a/2);for(i=a/2,n=a-1;-1!==n;--n)h[--i]=t[n],c[i]=r[n],--n,l[i]=t[n],u[i]=r[n];e(l,u),e(h,c),i=a/2;var f,d,v,p=6.283185307179586/a;for(n=a-1;-1!==n;--n)-1==--i&&(i=a/2-1),d=o(f=p*n),v=s(f),t[n]=l[i]+d*h[i]-v*c[i],r[n]=u[i]+d*c[i]+v*h[i]}},numeric.ifftpow2=function(e,t){numeric._ifftpow2(e,t),numeric.diveq(e,e.length),numeric.diveq(t,t.length)},numeric.convpow2=function(e,t,r,a){var n,i,o,s,l;for(numeric.fftpow2(e,t),numeric.fftpow2(r,a),n=e.length-1;-1!==n;--n)e[n]=(i=e[n])*(o=r[n])-(s=t[n])*(l=a[n]),t[n]=i*l+s*o;numeric.ifftpow2(e,t)},numeric.T.prototype.fft=function(){var e,t,r=this.x,a=this.y,n=r.length,i=Math.log,o=i(2),s=Math.ceil(i(2*n-1)/o),l=Math.pow(2,s),u=numeric.rep([l],0),h=numeric.rep([l],0),c=Math.cos,f=Math.sin,d=-3.141592653589793/n,v=numeric.rep([l],0),p=numeric.rep([l],0);for(Math.floor(n/2),e=0;e<n;e++)v[e]=r[e];if(void 0!==a)for(e=0;e<n;e++)p[e]=a[e];for(u[0]=1,e=1;e<=l/2;e++)u[e]=c(t=d*e*e),h[e]=f(t),u[l-e]=c(t),h[l-e]=f(t);var g=new numeric.T(v,p),_=new numeric.T(u,h);return g=g.mul(_),numeric.convpow2(g.x,g.y,numeric.clone(_.x),numeric.neg(_.y)),(g=g.mul(_)).x.length=n,g.y.length=n,g},numeric.T.prototype.ifft=function(){var e,t,r=this.x,a=this.y,n=r.length,i=Math.log,o=i(2),s=Math.ceil(i(2*n-1)/o),l=Math.pow(2,s),u=numeric.rep([l],0),h=numeric.rep([l],0),c=Math.cos,f=Math.sin,d=3.141592653589793/n,v=numeric.rep([l],0),p=numeric.rep([l],0);for(Math.floor(n/2),e=0;e<n;e++)v[e]=r[e];if(void 0!==a)for(e=0;e<n;e++)p[e]=a[e];for(u[0]=1,e=1;e<=l/2;e++)u[e]=c(t=d*e*e),h[e]=f(t),u[l-e]=c(t),h[l-e]=f(t);var g=new numeric.T(v,p),_=new numeric.T(u,h);return g=g.mul(_),numeric.convpow2(g.x,g.y,numeric.clone(_.x),numeric.neg(_.y)),(g=g.mul(_)).x.length=n,g.y.length=n,g.div(n)},numeric.gradient=function(e,t){var r=t.length,a=e(t);if(isNaN(a))throw new Error("gradient: f(x) is a NaN!");var n,i,o,s,l,u,h,c,f,d=Math.max,v=numeric.clone(t),p=Array(r),g=(d=Math.max,Math.abs),_=Math.min,m=0;for(n=0;n<r;n++)for(var y=d(1e-6*a,1e-8);;){if(++m>20)throw new Error("Numerical gradient fails");if(v[n]=t[n]+y,i=e(v),v[n]=t[n]-y,o=e(v),v[n]=t[n],isNaN(i)||isNaN(o))y/=16;else{if(p[n]=(i-o)/(2*y),s=t[n]-y,l=t[n],u=t[n]+y,h=(i-a)/y,c=(a-o)/y,f=d(g(p[n]),g(a),g(i),g(o),g(s),g(l),g(u),1e-8),!(_(d(g(h-p[n]),g(c-p[n]),g(h-c))/f,y/f)>.001))break;y/=16}}return p},numeric.uncmin=function(e,t,r,a,n,i,o){var s=numeric.gradient;void 0===o&&(o={}),void 0===r&&(r=1e-8),void 0===a&&(a=function(t){return s(e,t)}),void 0===n&&(n=1e3);var l,u,h=(t=numeric.clone(t)).length,c=e(t);if(isNaN(c))throw new Error("uncmin: f(x0) is a NaN!");var f=Math.max,d=numeric.norm2;r=f(r,numeric.epsilon);var v,p,g,_,m,y,b,x,k,w,C=o.Hinv||numeric.identity(h),T=numeric.dot,S=numeric.sub,I=numeric.add,A=numeric.tensor,R=numeric.div,N=numeric.mul,E=numeric.all,F=numeric.isFinite,M=numeric.neg,D=0,O="";for(p=a(t);D<n;){if("function"==typeof i&&i(D,t,c,p,C)){O="Callback returned true";break}if(!E(F(p))){O="Gradient has Infinity or NaN";break}if(!E(F(v=M(T(C,p))))){O="Search direction has Infinity or NaN";break}if((w=d(v))<r){O="Newton step smaller than tol";break}for(k=1,u=T(p,v),m=t;D<n&&!(k*w<r)&&(m=I(t,_=N(v,k)),(l=e(m))-c>=.1*k*u||isNaN(l));)k*=.5,++D;if(k*w<r){O="Line search step size smaller than tol";break}if(D===n){O="maxit reached during line search";break}x=T(y=S(g=a(m),p),_),b=T(C,y),C=S(I(C,N((x+T(y,b))/(x*x),A(_,_))),R(I(A(b,_),A(_,b)),x)),t=m,c=l,p=g,++D}return{solution:t,f:c,gradient:p,invHessian:C,iterations:D,message:O}},numeric.Dopri=function(e,t,r,a,n,i,o){this.x=e,this.y=t,this.f=r,this.ymid=a,this.iterations=n,this.events=o,this.message=i},numeric.Dopri.prototype._at=function(e,t){function r(e){return e*e}var a,n,i,o,s,l,u,h,c,f=this.x,d=this.y,v=this.f,p=(Math,numeric.add),g=numeric.mul,_=numeric.sub;return s=d[t+1],l=this.ymid[t],u=_(v[t],g(o=d[t],1/((a=f[t])-(i=a+.5*((n=f[t+1])-a)))+2/(a-n))),h=_(v[t+1],g(s,1/(n-i)+2/(n-a))),p(p(p(p(g(o,(c=[r(e-n)*(e-i)/r(a-n)/(a-i),r(e-a)*r(e-n)/r(a-i)/r(n-i),r(e-a)*(e-i)/r(n-a)/(n-i),(e-a)*r(e-n)*(e-i)/r(a-n)/(a-i),(e-n)*r(e-a)*(e-i)/r(a-n)/(n-i)])[0]),g(l,c[1])),g(s,c[2])),g(u,c[3])),g(h,c[4]))},numeric.Dopri.prototype.at=function(e){var t,r,a,n=Math.floor;if("number"!=typeof e){var i=e.length,o=Array(i);for(t=i-1;-1!==t;--t)o[t]=this.at(e[t]);return o}var s=this.x;for(t=0,r=s.length-1;r-t>1;)s[a=n(.5*(t+r))]<=e?t=a:r=a;return this._at(e,t)},numeric.dopri=function(e,t,r,a,n,i,o){void 0===n&&(n=1e-6),void 0===i&&(i=1e3);var s,l,u,h,c,f,d,v,p,g,_,m,y,b=[e],x=[r],k=[a(e,r)],w=[],C=[3/40,9/40],T=[44/45,-56/15,32/9],S=[19372/6561,-25360/2187,64448/6561,-212/729],I=[9017/3168,-355/33,46732/5247,49/176,-5103/18656],A=[35/384,0,500/1113,125/192,-2187/6784,11/84],R=[.10013431883002395,0,.3918321794184259,-.02982460176594817,.05893268337240795,-.04497888809104361,5618549.5/235043384],N=[.2,.3,.8,8/9,1,1],E=[-71/57600,0,71/16695,-71/1920,17253/339200,-22/525,1/40],F=0,M=(t-e)/10,D=0,O=numeric.add,L=numeric.mul,z=(Math,Math.min),B=Math.abs,P=numeric.norminf,V=Math.pow,U=numeric.any,W=numeric.lt,G=numeric.and,H=new numeric.Dopri(b,x,k,w,-1,"");for("function"==typeof o&&(_=o(e,r));e<t&&D<i;)if(++D,e+M>t&&(M=t-e),s=a(e+N[0]*M,O(r,L(.2*M,k[F]))),l=a(e+N[1]*M,O(O(r,L(C[0]*M,k[F])),L(C[1]*M,s))),u=a(e+N[2]*M,O(O(O(r,L(T[0]*M,k[F])),L(T[1]*M,s)),L(T[2]*M,l))),h=a(e+N[3]*M,O(O(O(O(r,L(S[0]*M,k[F])),L(S[1]*M,s)),L(S[2]*M,l)),L(S[3]*M,u))),c=a(e+N[4]*M,O(O(O(O(O(r,L(I[0]*M,k[F])),L(I[1]*M,s)),L(I[2]*M,l)),L(I[3]*M,u)),L(I[4]*M,h))),f=a(e+M,p=O(O(O(O(O(r,L(k[F],M*A[0])),L(l,M*A[2])),L(u,M*A[3])),L(h,M*A[4])),L(c,M*A[5]))),(g="number"==typeof(d=O(O(O(O(O(L(k[F],M*E[0]),L(l,M*E[2])),L(u,M*E[3])),L(h,M*E[4])),L(c,M*E[5])),L(f,M*E[6])))?B(d):P(d))>n){if(e+(M=.2*M*V(n/g,.25))===e){H.msg="Step size became too small";break}}else{if(w[F]=O(O(O(O(O(O(r,L(k[F],M*R[0])),L(l,M*R[2])),L(u,M*R[3])),L(h,M*R[4])),L(c,M*R[5])),L(f,M*R[6])),b[++F]=e+M,x[F]=p,k[F]=f,"function"==typeof o){var j,q,X=e,K=e+.5*M;if(m=o(K,w[F-1]),U(y=G(W(_,0),W(0,m)))||(X=K,_=m,m=o(K=e+M,p),y=G(W(_,0),W(0,m))),U(y)){for(var Q,Y,J=0,Z=1,$=1;;){if("number"==typeof _)q=($*m*X-Z*_*K)/($*m-Z*_);else for(q=K,v=_.length-1;-1!==v;--v)_[v]<0&&m[v]>0&&(q=z(q,($*m[v]*X-Z*_[v]*K)/($*m[v]-Z*_[v])));if(q<=X||q>=K)break;Y=o(q,j=H._at(q,F-1)),U(Q=G(W(_,0),W(0,Y)))?(K=q,m=Y,y=Q,$=1,-1===J?Z*=.5:Z=1,J=-1):(X=q,_=Y,Z=1,1===J?$*=.5:$=1,J=1)}return p=H._at(.5*(e+q),F-1),H.f[F]=a(q,j),H.x[F]=q,H.y[F]=j,H.ymid[F-1]=p,H.events=y,H.iterations=D,H}}e+=M,r=p,_=m,M=z(.8*M*V(n/g,.25),4*M)}return H.iterations=D,H},numeric.LU=function(e,t){t=t||!1;var r,a,n,i,o,s,l,u,h,c=Math.abs,f=e.length,d=f-1,v=new Array(f);for(t||(e=numeric.clone(e)),n=0;n<f;++n){for(l=n,h=c((s=e[n])[n]),a=n+1;a<f;++a)h<(i=c(e[a][n]))&&(h=i,l=a);for(v[n]=l,l!=n&&(e[n]=e[l],e[l]=s,s=e[n]),o=s[n],r=n+1;r<f;++r)e[r][n]/=o;for(r=n+1;r<f;++r){for(u=e[r],a=n+1;a<d;++a)u[a]-=u[n]*s[a],u[++a]-=u[n]*s[a];a===d&&(u[a]-=u[n]*s[a])}}return{LU:e,P:v}},numeric.LUsolve=function(e,t){var r,a,n,i,o,s=e.LU,l=s.length,u=numeric.clone(t),h=e.P;for(r=l-1;-1!==r;--r)u[r]=t[r];for(r=0;r<l;++r)for(n=h[r],h[r]!==r&&(o=u[r],u[r]=u[n],u[n]=o),i=s[r],a=0;a<r;++a)u[r]-=u[a]*i[a];for(r=l-1;r>=0;--r){for(i=s[r],a=r+1;a<l;++a)u[r]-=u[a]*i[a];u[r]/=i[r]}return u},numeric.solve=function(e,t,r){return numeric.LUsolve(numeric.LU(e,r),t)},numeric.echelonize=function(e){var t,r,a,n,i,o,s,l,u=numeric.dim(e),h=u[0],c=u[1],f=numeric.identity(h),d=Array(h),v=Math.abs,p=numeric.diveq;for(e=numeric.clone(e),t=0;t<h;++t){for(a=0,i=e[t],o=f[t],r=1;r<c;++r)v(i[a])<v(i[r])&&(a=r);for(d[t]=a,p(o,i[a]),p(i,i[a]),r=0;r<h;++r)if(r!==t){for(l=(s=e[r])[a],n=c-1;-1!==n;--n)s[n]-=i[n]*l;for(s=f[r],n=h-1;-1!==n;--n)s[n]-=o[n]*l}}return{I:f,A:e,P:d}},numeric.__solveLP=function(e,t,r,a,n,i,o){var s,l,u,h,c=numeric.sum,f=numeric.mul,d=numeric.sub,v=numeric.dot,p=numeric.div,g=numeric.add,_=e.length,m=r.length,y=!1,b=1,x=(numeric.transpose(t),numeric.transpose),k=Math.sqrt,w=Math.abs,C=Math.min,T=numeric.all,S=numeric.gt,I=Array(_),A=Array(m),R=(numeric.rep([m],1),numeric.solve),N=d(r,v(t,i)),E=v(e,e);for(u=0;u<n;++u){var F,M;for(F=m-1;-1!==F;--F)A[F]=p(t[F],N[F]);var D=x(A);for(F=_-1;-1!==F;--F)I[F]=c(D[F]);b=.25*w(E/v(e,I));var O=100*k(E/v(I,I));for((!isFinite(b)||b>O)&&(b=O),h=g(e,f(b,I)),l=v(D,A),F=_-1;-1!==F;--F)l[F][F]+=1;M=R(l,p(h,b),!0);var L=p(N,v(t,M)),z=1;for(F=m-1;-1!==F;--F)L[F]<0&&(z=C(z,-.999*L[F]));if(s=d(i,f(M,z)),!T(S(N=d(r,v(t,s)),0)))return{solution:i,message:"",iterations:u};if(i=s,b<a)return{solution:s,message:"",iterations:u};if(o){var B=v(e,h),P=v(t,h);for(y=!0,F=m-1;-1!==F;--F)if(B*P[F]<0){y=!1;break}}else y=!(i[_-1]>=0);if(y)return{solution:s,message:"Unbounded",iterations:u}}return{solution:i,message:"maximum iteration count exceeded",iterations:u}},numeric._solveLP=function(e,t,r,a,n){var i=e.length,o=r.length,s=numeric.sub,l=numeric.dot,u=numeric.rep([i],0).concat([1]),h=numeric.rep([o,1],-1),c=numeric.blockMatrix([[t,h]]),f=r,d=numeric.rep([i],0).concat(Math.max(0,numeric.sup(numeric.neg(r)))+1),v=numeric.__solveLP(u,c,f,a,n,d,!1),p=numeric.clone(v.solution);if(p.length=i,numeric.inf(s(r,l(t,p)))<0)return{solution:NaN,message:"Infeasible",iterations:v.iterations};var g=numeric.__solveLP(e,t,r,a,n-v.iterations,p,!0);return g.iterations+=v.iterations,g},numeric.solveLP=function(e,t,r,a,n,i,o){if(void 0===o&&(o=1e3),void 0===i&&(i=numeric.epsilon),void 0===a)return numeric._solveLP(e,t,r,i,o);var s,l=a.length,u=a[0].length,h=t.length,c=numeric.echelonize(a),f=numeric.rep([u],0),d=c.P,v=[];for(s=d.length-1;-1!==s;--s)f[d[s]]=1;for(s=u-1;-1!==s;--s)0===f[s]&&v.push(s);var p=numeric.getRange,g=numeric.linspace(0,l-1),_=numeric.linspace(0,h-1),m=p(a,g,v),y=p(t,_,d),b=p(t,_,v),x=numeric.dot,k=numeric.sub,w=x(y,c.I),C=k(b,x(w,m)),T=k(r,x(w,n)),S=Array(d.length),I=Array(v.length);for(s=d.length-1;-1!==s;--s)S[s]=e[d[s]];for(s=v.length-1;-1!==s;--s)I[s]=e[v[s]];var A=k(I,x(S,x(c.I,m))),R=numeric._solveLP(A,C,T,i,o),N=R.solution;if(N!=N)return R;var E=x(c.I,k(n,x(m,N))),F=Array(e.length);for(s=d.length-1;-1!==s;--s)F[d[s]]=E[s];for(s=v.length-1;-1!==s;--s)F[v[s]]=N[s];return{solution:F,message:R.message,iterations:R.iterations}},numeric.MPStoLP=function(e){e instanceof String&&e.split("\n");var t,r,a,n,i=0,o=["Initial state","NAME","ROWS","COLUMNS","RHS","BOUNDS","ENDATA"],s=e.length,l=0,u={},h=[],c=0,f={},d=0,v=[],p=[],g=[];function _(r){throw new Error("MPStoLP: "+r+"\nLine "+t+": "+e[t]+"\nCurrent state: "+o[i]+"\n")}for(t=0;t<s;++t){var m=(a=e[t]).match(/\S*/g),y=[];for(r=0;r<m.length;++r)""!==m[r]&&y.push(m[r]);if(0!==y.length){for(r=0;r<o.length&&a.substr(0,o[r].length)!==o[r];++r);if(r<o.length){if(i=r,1===r&&(n=y[1]),6===r)return{name:n,c:v,A:numeric.transpose(p),b:g,rows:u,vars:f}}else switch(i){case 0:case 1:_("Unexpected line");case 2:switch(y[0]){case"N":0===l?l=y[1]:_("Two or more N rows");break;case"L":u[y[1]]=c,h[c]=1,g[c]=0,++c;break;case"G":u[y[1]]=c,h[c]=-1,g[c]=0,++c;break;case"E":u[y[1]]=c,h[c]=0,g[c]=0,++c;break;default:_("Parse error "+numeric.prettyPrint(y))}break;case 3:f.hasOwnProperty(y[0])||(f[y[0]]=d,v[d]=0,p[d]=numeric.rep([c],0),++d);var b=f[y[0]];for(r=1;r<y.length;r+=2)if(y[r]!==l){var x=u[y[r]];p[b][x]=(h[x]<0?-1:1)*parseFloat(y[r+1])}else v[b]=parseFloat(y[r+1]);break;case 4:for(r=1;r<y.length;r+=2)g[u[y[r]]]=(h[u[y[r]]]<0?-1:1)*parseFloat(y[r+1]);break;case 5:break;case 6:_("Internal error")}}}_("Reached end of file without ENDATA")},numeric.seedrandom={pow:Math.pow,random:Math.random},function(e,t,r,a,n,i,o){function s(e){var t,r=this,a=e.length,n=0,i=r.i=r.j=r.m=0;for(r.S=[],r.c=[],a||(e=[a++]);n<256;)r.S[n]=n++;for(n=0;n<256;n++)i=h(i+(t=r.S[n])+e[n%a]),r.S[n]=r.S[i],r.S[i]=t;r.g=function(e){var t=r.S,a=h(r.i+1),n=t[a],i=h(r.j+n),o=t[i];t[a]=o,t[i]=n;for(var s=t[h(n+o)];--e;)a=h(a+1),i=h(i+(n=t[a])),t[a]=o=t[i],t[i]=n,s=256*s+t[h(n+o)];return r.i=a,r.j=i,s},r.g(256)}function l(e,t,r,a,n){if(r=[],n=typeof e,t&&"object"==n)for(a in e)if(a.indexOf("S")<5)try{r.push(l(e[a],t-1))}catch(i){}return r.length?r:e+("string"!=n?"\0":"")}function u(e,t,r,a){for(e+="",r=0,a=0;a<e.length;a++)t[h(a)]=h((r^=19*t[h(a)])+e.charCodeAt(a));for(a in e="",t)e+=String.fromCharCode(t[a]);return e}function h(e){return 255&e}t.seedrandom=function(r,a){var h,c=[];return r=u(l(a?[r,e]:arguments.length?r:[(new Date).getTime(),e,window],3),c),u((h=new s(c)).S,e),t.random=function(){for(var e=h.g(6),t=o,r=0;e<n;)e=256*(e+r),t*=256,r=h.g(1);for(;e>=i;)e/=2,t/=2,r>>>=1;return(e+r)/t},r},o=t.pow(256,6),n=t.pow(2,n),i=2*n,u(t.random(),e)}([],numeric.seedrandom,0,0,52),function(e){function t(e){if("object"!=typeof e)return e;var r,a=[],n=e.length;for(r=0;r<n;r++)a[r+1]=t(e[r]);return a}function r(e){if("object"!=typeof e)return e;var t,a=[],n=e.length;for(t=1;t<n;t++)a[t-1]=r(e[t]);return a}e.solveQP=function(e,a,n,i,o,s){e=t(e),a=t(a),n=t(n);var l,u,h,c,f,d=[],v=[],p=[],g=[],_=[];if(o=o||0,s=s?t(s):[void 0,0],i=i?t(i):[],u=e.length-1,h=n[1].length-1,!i)for(l=1;l<=h;l+=1)i[l]=0;for(l=1;l<=h;l+=1)v[l]=0;for(c=Math.min(u,h),l=1;l<=u;l+=1)p[l]=0;for(d[1]=0,l=1;l<=2*u+c*(c+5)/2+2*h+1;l+=1)g[l]=0;for(l=1;l<=2;l+=1)_[l]=0;return function(e,t,r,a,n,i,o,s,l,u,h,c,f,d,v,p){var g,_,m,y,b,x,k,w,C,T,S,I,A,R,N,E,F,M,D,O,L,z,B,P,V,U,W;A=Math.min(a,u),m=2*a+A*(A+5)/2+2*u+1,P=1e-60;do{V=1+.1*(P+=P),U=1+.2*P}while(V<=1||U<=1);for(g=1;g<=a;g+=1)v[g]=t[g];for(g=a+1;g<=m;g+=1)v[g]=0;for(g=1;g<=u;g+=1)c[g]=0;if(b=[],0===p[1]){if(function(e,t,r,a){var n,i,o,s,l,u;for(i=1;i<=r;i+=1){if(a[1]=i,u=0,(o=i-1)<1){if((u=e[i][i]-u)<=0)break;e[i][i]=Math.sqrt(u)}else{for(s=1;s<=o;s+=1){for(l=e[s][i],n=1;n<s;n+=1)l-=e[n][i]*e[n][s];e[s][i]=l/=e[s][s],u+=l*l}if((u=e[i][i]-u)<=0)break;e[i][i]=Math.sqrt(u)}a[1]=0}}(e,0,a,b),0!==b[1])return void(p[1]=2);!function(e,t,r,a){var n,i,o,s;for(i=1;i<=r;i+=1){for(s=0,n=1;n<i;n+=1)s+=e[n][i]*a[n];a[i]=(a[i]-s)/e[i][i]}for(o=1;o<=r;o+=1)for(a[i=r+1-o]=a[i]/e[i][i],s=-a[i],n=1;n<i;n+=1)a[n]=a[n]+s*e[n][i]}(e,0,a,t),function(e,t,r){var a,n,i,o,s;for(i=1;i<=r;i+=1){for(e[i][i]=1/e[i][i],s=-e[i][i],a=1;a<i;a+=1)e[a][i]=s*e[a][i];if(r<(o=i+1))break;for(n=o;n<=r;n+=1)for(s=e[i][n],e[i][n]=0,a=1;a<=i;a+=1)e[a][n]=e[a][n]+s*e[a][i]}}(e,0,a)}else{for(_=1;_<=a;_+=1)for(n[_]=0,g=1;g<=_;g+=1)n[_]=n[_]+e[g][_]*t[g];for(_=1;_<=a;_+=1)for(t[_]=0,g=_;g<=a;g+=1)t[_]=t[_]+e[_][g]*n[g]}for(i[1]=0,_=1;_<=a;_+=1)for(n[_]=t[_],i[1]=i[1]+v[_]*n[_],v[_]=0,g=_+1;g<=a;g+=1)e[g][_]=0;for(i[1]=-i[1]/2,p[1]=0,R=(T=(C=(S=(w=(k=a)+a)+A)+A+1)+A*(A+1)/2)+u,g=1;g<=u;g+=1){for(E=0,_=1;_<=a;_+=1)E+=o[_][g]*o[_][g];v[R+g]=Math.sqrt(E)}function G(){for(d[1]=d[1]+1,m=T,g=1;g<=u;g+=1){for(m+=1,E=-s[g],_=1;_<=a;_+=1)E+=o[_][g]*n[_];if(Math.abs(E)<P&&(E=0),g>h)v[m]=E;else if(v[m]=-Math.abs(E),E>0){for(_=1;_<=a;_+=1)o[_][g]=-o[_][g];s[g]=-s[g]}}for(g=1;g<=f;g+=1)v[T+c[g]]=0;for(I=0,N=0,g=1;g<=u;g+=1)v[T+g]<N*v[R+g]&&(I=g,N=v[T+g]/v[R+g]);return 0===I?999:0}function H(){for(g=1;g<=a;g+=1){for(E=0,_=1;_<=a;_+=1)E+=e[_][g]*o[_][I];v[g]=E}for(y=k,g=1;g<=a;g+=1)v[y+g]=0;for(_=f+1;_<=a;_+=1)for(g=1;g<=a;g+=1)v[y+g]=v[y+g]+e[g][_]*v[_];for(z=!0,g=f;g>=1;g-=1){for(E=v[g],y=(m=C+g*(g+3)/2)-g,_=g+1;_<=f;_+=1)E-=v[m]*v[w+_],m+=_;if(v[w+g]=E/=v[y],c[g]<h)break;if(E<0)break;z=!1,x=g}if(!z)for(F=v[S+x]/v[w+x],g=1;g<=f&&!(c[g]<h)&&!(v[w+g]<0);g+=1)(N=v[S+g]/v[w+g])<F&&(F=N,x=g);for(E=0,g=k+1;g<=k+a;g+=1)E+=v[g]*v[g];if(Math.abs(E)<=P){if(z)return p[1]=1,999;for(g=1;g<=f;g+=1)v[S+g]=v[S+g]-F*v[w+g];return v[S+f+1]=v[S+f+1]+F,700}for(E=0,g=1;g<=a;g+=1)E+=v[k+g]*o[g][I];for(M=-v[T+I]/E,B=!0,z||F<M&&(M=F,B=!1),g=1;g<=a;g+=1)n[g]=n[g]+M*v[k+g],Math.abs(n[g])<P&&(n[g]=0);for(i[1]=i[1]+M*E*(M/2+v[S+f+1]),g=1;g<=f;g+=1)v[S+g]=v[S+g]-M*v[w+g];if(v[S+f+1]=v[S+f+1]+M,!B){for(E=-s[I],_=1;_<=a;_+=1)E+=n[_]*o[_][I];if(I>h)v[T+I]=E;else if(v[T+I]=-Math.abs(E),E>0){for(_=1;_<=a;_+=1)o[_][I]=-o[_][I];s[I]=-s[I]}return 700}for(c[f+=1]=I,m=C+(f-1)*f/2+1,g=1;g<=f-1;g+=1)v[m]=v[g],m+=1;if(f===a)v[m]=v[a];else{for(g=a;g>=f+1&&0!==v[g]&&(D=Math.max(Math.abs(v[g-1]),Math.abs(v[g])),O=Math.min(Math.abs(v[g-1]),Math.abs(v[g])),N=v[g-1]>=0?Math.abs(D*Math.sqrt(1+O*O/(D*D))):-Math.abs(D*Math.sqrt(1+O*O/(D*D))),O=v[g]/N,1!=(D=v[g-1]/N));g-=1)if(0===D)for(v[g-1]=O*N,_=1;_<=a;_+=1)N=e[_][g-1],e[_][g-1]=e[_][g],e[_][g]=N;else for(v[g-1]=N,L=O/(1+D),_=1;_<=a;_+=1)e[_][g]=L*(e[_][g-1]+(N=D*e[_][g-1]+O*e[_][g]))-e[_][g],e[_][g-1]=N;v[m]=v[f]}return 0}function j(){if(0===v[y=(m=C+x*(x+1)/2+1)+x])return 798;if(D=Math.max(Math.abs(v[y-1]),Math.abs(v[y])),O=Math.min(Math.abs(v[y-1]),Math.abs(v[y])),N=v[y-1]>=0?Math.abs(D*Math.sqrt(1+O*O/(D*D))):-Math.abs(D*Math.sqrt(1+O*O/(D*D))),O=v[y]/N,1==(D=v[y-1]/N))return 798;if(0===D){for(g=x+1;g<=f;g+=1)N=v[y-1],v[y-1]=v[y],v[y]=N,y+=g;for(g=1;g<=a;g+=1)N=e[g][x],e[g][x]=e[g][x+1],e[g][x+1]=N}else{for(L=O/(1+D),g=x+1;g<=f;g+=1)v[y]=L*(v[y-1]+(N=D*v[y-1]+O*v[y]))-v[y],v[y-1]=N,y+=g;for(g=1;g<=a;g+=1)e[g][x+1]=L*(e[g][x]+(N=D*e[g][x]+O*e[g][x+1]))-e[g][x+1],e[g][x]=N}return 0}function q(){for(y=m-x,g=1;g<=x;g+=1)v[y]=v[m],m+=1,y+=1;return v[S+x]=v[S+x+1],c[x]=c[x+1],(x+=1)<f?797:0}function X(){return v[S+f]=v[S+f+1],v[S+f+1]=0,c[f]=0,f-=1,d[2]=d[2]+1,0}for(f=0,d[1]=0,d[2]=0,W=0;;){if(999===(W=G()))return;for(;0!==(W=H());){if(999===W)return;if(700===W)if(x===f)X();else{for(;j(),797===(W=q()););X()}}}}(e,a,0,u,p,d,n,i,0,h,o,v,0,_,g,s),f="",1===s[1]&&(f="constraints are inconsistent, no solution!"),2===s[1]&&(f="matrix D in quadratic function is not positive definite!"),{solution:r(p),value:r(d),unconstrained_solution:r(a),iterations:r(_),iact:r(v),message:f}}}(numeric),numeric.svd=function(e){var t,r=numeric.epsilon,a=1e-64/r,n=0,i=0,o=0,s=0,l=0,u=numeric.clone(e),h=u.length,c=u[0].length;if(h<c)throw"Need more rows than columns";var f=new Array(c),d=new Array(c);for(i=0;i<c;i++)f[i]=d[i]=0;var v=numeric.rep([c,c],0);function p(e,t){return(e=Math.abs(e))>(t=Math.abs(t))?e*Math.sqrt(1+t*t/e/e):0==t?e:t*Math.sqrt(1+e*e/t/t)}var g=0,_=0,m=0,y=0,b=0,x=0,k=0;for(i=0;i<c;i++){for(f[i]=_,k=0,l=i+1,o=i;o<h;o++)k+=u[o][i]*u[o][i];if(k<=a)_=0;else for(g=u[i][i],_=Math.sqrt(k),g>=0&&(_=-_),m=g*_-k,u[i][i]=g-_,o=l;o<c;o++){for(k=0,s=i;s<h;s++)k+=u[s][i]*u[s][o];for(g=k/m,s=i;s<h;s++)u[s][o]+=g*u[s][i]}for(d[i]=_,k=0,o=l;o<c;o++)k+=u[i][o]*u[i][o];if(k<=a)_=0;else{for(g=u[i][i+1],_=Math.sqrt(k),g>=0&&(_=-_),m=g*_-k,u[i][i+1]=g-_,o=l;o<c;o++)f[o]=u[i][o]/m;for(o=l;o<h;o++){for(k=0,s=l;s<c;s++)k+=u[o][s]*u[i][s];for(s=l;s<c;s++)u[o][s]+=k*f[s]}}(b=Math.abs(d[i])+Math.abs(f[i]))>y&&(y=b)}for(i=c-1;-1!=i;i+=-1){if(0!=_){for(m=_*u[i][i+1],o=l;o<c;o++)v[o][i]=u[i][o]/m;for(o=l;o<c;o++){for(k=0,s=l;s<c;s++)k+=u[i][s]*v[s][o];for(s=l;s<c;s++)v[s][o]+=k*v[s][i]}}for(o=l;o<c;o++)v[i][o]=0,v[o][i]=0;v[i][i]=1,_=f[i],l=i}for(i=c-1;-1!=i;i+=-1){for(_=d[i],o=l=i+1;o<c;o++)u[i][o]=0;if(0!=_){for(m=u[i][i]*_,o=l;o<c;o++){for(k=0,s=l;s<h;s++)k+=u[s][i]*u[s][o];for(g=k/m,s=i;s<h;s++)u[s][o]+=g*u[s][i]}for(o=i;o<h;o++)u[o][i]=u[o][i]/_}else for(o=i;o<h;o++)u[o][i]=0;u[i][i]+=1}for(r*=y,s=c-1;-1!=s;s+=-1)for(var w=0;w<50;w++){var C=!1;for(l=s;-1!=l;l+=-1){if(Math.abs(f[l])<=r){C=!0;break}if(Math.abs(d[l-1])<=r)break}if(!C){n=0,k=1;var T=l-1;for(i=l;i<s+1&&(g=k*f[i],f[i]=n*f[i],!(Math.abs(g)<=r));i++)for(m=p(g,_=d[i]),d[i]=m,n=_/m,k=-g/m,o=0;o<h;o++)u[o][T]=(b=u[o][T])*n+(x=u[o][i])*k,u[o][i]=-b*k+x*n}if(x=d[s],l==s){if(x<0)for(d[s]=-x,o=0;o<c;o++)v[o][s]=-v[o][s];break}if(w>=49)throw"Error: no convergence.";for(y=d[l],_=p(g=(((b=d[s-1])-x)*(b+x)+((_=f[s-1])-(m=f[s]))*(_+m))/(2*m*b),1),g=g<0?((y-x)*(y+x)+m*(b/(g-_)-m))/y:((y-x)*(y+x)+m*(b/(g+_)-m))/y,n=1,k=1,i=l+1;i<s+1;i++){for(b=d[i],m=k*(_=f[i]),_*=n,x=p(g,m),f[i-1]=x,g=y*(n=g/x)+_*(k=m/x),_=-y*k+_*n,m=b*k,b*=n,o=0;o<c;o++)v[o][i-1]=(y=v[o][i-1])*n+(x=v[o][i])*k,v[o][i]=-y*k+x*n;for(x=p(g,m),d[i-1]=x,g=(n=g/x)*_+(k=m/x)*b,y=-k*_+n*b,o=0;o<h;o++)u[o][i-1]=(b=u[o][i-1])*n+(x=u[o][i])*k,u[o][i]=-b*k+x*n}f[l]=0,f[s]=g,d[s]=y}for(i=0;i<d.length;i++)d[i]<r&&(d[i]=0);for(i=0;i<c;i++)for(o=i-1;o>=0;o--)if(d[o]<d[i]){for(n=d[o],d[o]=d[i],d[i]=n,s=0;s<u.length;s++)t=u[s][i],u[s][i]=u[s][o],u[s][o]=t;for(s=0;s<v.length;s++)t=v[s][i],v[s][i]=v[s][o],v[s][o]=t;i=o}return{U:u,S:d,V:v}}})),performanceNow=createCommonjsModule((function(e){(function(){var t,r,a,n,i,o;"undefined"!=typeof performance&&null!==performance&&performance.now?e.exports=function(){return performance.now()}:"undefined"!=typeof process&&null!==process&&process.hrtime?(e.exports=function(){return(t()-i)/1e6},r=process.hrtime,n=(t=function(){var e;return 1e9*(e=r())[0]+e[1]})(),o=1e9*process.uptime(),i=n-o):Date.now?(e.exports=function(){return Date.now()-a},a=Date.now()):(e.exports=function(){return(new Date).getTime()-a},a=(new Date).getTime())}).call(commonjsGlobal)})),root="undefined"==typeof window?commonjsGlobal:window,vendors=["moz","webkit"],suffix="AnimationFrame",raf=root["request"+suffix],caf=root["cancel"+suffix]||root["cancelRequest"+suffix],i=0;!raf&&i<vendors.length;i++)raf=root[vendors[i]+"Request"+suffix],caf=root[vendors[i]+"Cancel"+suffix]||root[vendors[i]+"CancelRequest"+suffix];if(!raf||!caf){var last=0,id=0,queue=[],frameDuration=1e3/60;raf=function(e){if(0===queue.length){var t=performanceNow(),r=Math.max(0,frameDuration-(t-last));last=r+t,setTimeout((function(){var e=queue.slice(0);queue.length=0;for(var t=0;t<e.length;t++)if(!e[t].cancelled)try{e[t].callback(last)}catch(r){setTimeout((function(){throw r}),0)}}),Math.round(r))}return queue.push({handle:++id,callback:e,cancelled:!1}),id},caf=function(e){for(var t=0;t<queue.length;t++)queue[t].handle===e&&(queue[t].cancelled=!0)}}var index=function(e){return raf.call(root,e)},cancel=function(){caf.apply(root,arguments)},polyfill=function(){root.requestAnimationFrame=raf,root.cancelAnimationFrame=caf};index.cancel=cancel,index.polyfill=polyfill;var promise=createCommonjsModule((function(e){!function(t){var r=setTimeout;function a(){}function n(e){if("object"!=typeof this)throw new TypeError("Promises must be constructed via new");if("function"!=typeof e)throw new TypeError("not a function");this._state=0,this._handled=!1,this._value=void 0,this._deferreds=[],h(e,this)}function i(e,t){for(;3===e._state;)e=e._value;0!==e._state?(e._handled=!0,n._immediateFn((function(){var r=1===e._state?t.onFulfilled:t.onRejected;if(null!==r){var a;try{a=r(e._value)}catch(n){return void s(t.promise,n)}o(t.promise,a)}else(1===e._state?o:s)(t.promise,e._value)}))):e._deferreds.push(t)}function o(e,t){try{if(t===e)throw new TypeError("A promise cannot be resolved with itself.");if(t&&("object"==typeof t||"function"==typeof t)){var r=t.then;if(t instanceof n)return e._state=3,e._value=t,void l(e);if("function"==typeof r)return void h((a=r,i=t,function(){a.apply(i,arguments)}),e)}e._state=1,e._value=t,l(e)}catch(o){s(e,o)}var a,i}function s(e,t){e._state=2,e._value=t,l(e)}function l(e){2===e._state&&0===e._deferreds.length&&n._immediateFn((function(){e._handled||n._unhandledRejectionFn(e._value)}));for(var t=0,r=e._deferreds.length;t<r;t++)i(e,e._deferreds[t]);e._deferreds=null}function u(e,t,r){this.onFulfilled="function"==typeof e?e:null,this.onRejected="function"==typeof t?t:null,this.promise=r}function h(e,t){var r=!1;try{e((function(e){r||(r=!0,o(t,e))}),(function(e){r||(r=!0,s(t,e))}))}catch(a){if(r)return;r=!0,s(t,a)}}n.prototype.catch=function(e){return this.then(null,e)},n.prototype.then=function(e,t){var r=new this.constructor(a);return i(this,new u(e,t,r)),r},n.all=function(e){var t=Array.prototype.slice.call(e);return new n((function(e,r){if(0===t.length)return e([]);var a=t.length;function n(i,o){try{if(o&&("object"==typeof o||"function"==typeof o)){var s=o.then;if("function"==typeof s)return void s.call(o,(function(e){n(i,e)}),r)}t[i]=o,0==--a&&e(t)}catch(l){r(l)}}for(var i=0;i<t.length;i++)n(i,t[i])}))},n.resolve=function(e){return e&&"object"==typeof e&&e.constructor===n?e:new n((function(t){t(e)}))},n.reject=function(e){return new n((function(t,r){r(e)}))},n.race=function(e){return new n((function(t,r){for(var a=0,n=e.length;a<n;a++)e[a].then(t,r)}))},n._immediateFn="function"==typeof setImmediate&&function(e){setImmediate(e)}||function(e){r(e,0)},n._unhandledRejectionFn=function(e){"undefined"!=typeof console&&console&&console.warn("Possible Unhandled Promise Rejection:",e)},n._setImmediateFn=function(e){n._immediateFn=e},n._setUnhandledRejectionFn=function(e){n._unhandledRejectionFn=e},e.exports?e.exports=n:t.Promise||(t.Promise=n)}(commonjsGlobal)}));function emitEvent(e){var t=new CustomEvent(e,{bubbles:!0,cancelable:!0});document.dispatchEvent(t)}function FFT(){var e,t,r=0,a=null,n=null;function i(e,t,i){for(var o,s,l,u,h,c,f,d,v,p=r>>2,g=0;g<r;g++)g<(u=a[g])&&(h=e[g],e[g]=e[u],e[u]=h,h=t[g],t[g]=t[u],t[u]=h);for(var _=1;_<r;_<<=1){s=0,o=r/(_<<1);for(var m=0;m<_;m++){c=n[s+p],f=i*n[s];for(var y=m;y<r;y+=_<<1)v=c*t[l=y+_]-f*e[l],e[l]=e[y]-(d=c*e[l]+f*t[l]),e[y]+=d,t[l]=t[y]-v,t[y]+=v;s+=o}}}this.init=function(i){if(0===i||0!=(i&i-1))throw new Error("init: radix-2 required");r=i,a="undefined"!=typeof Uint8Array?new Uint8Array(r):new Array(r),"undefined"!=typeof Float64Array?(n=new Float64Array(1.25*r),e=new Float64Array(r*r),t=new Float64Array(r*r)):(n=new Array(1.25*r),e=new Array(r*r),t=new Array(r*r)),function(){var e=0,t=0,n=0;for(a[0]=0;++e<r;){for(n=r>>1;n<=t;)t-=n,n>>=1;a[e]=t+=n}}(),function(){var e=r>>1,t=r>>2,a=r>>3,i=e+t,o=Math.sin(Math.PI/r),s=2*o*o,l=Math.sqrt(s*(2-s)),u=n[t]=1,h=n[0]=0;o=2*s;for(var c=1;c<a;c++)s+=o*(u-=s),l-=o*(h+=l),n[c]=h,n[t-c]=u;0!==a&&(n[a]=Math.sqrt(.5));for(var f=0;f<t;f++)n[e-f]=n[f];for(var d=0;d<i;d++)n[d+e]=-n[d]}()},this.fft1d=function(e,t){i(e,t,1)},this.ifft1d=function(e,t){var a=1/r;i(e,t,-1);for(var n=0;n<r;n++)e[n]*=a,t[n]*=a},this.fft2d=function(a,n){for(var i=0,o=0;o<r;o++){i=o*r;for(var s=0;s<r;s++)e[s]=a[s+i],t[s]=n[s+i];this.fft1d(e,t);for(var l=0;l<r;l++)a[l+i]=e[l],n[l+i]=t[l]}for(var u=0;u<r;u++){for(var h=0;h<r;h++)e[h]=a[i=u+h*r],t[h]=n[i];this.fft1d(e,t);for(var c=0;c<r;c++)a[i=u+c*r]=e[c],n[i]=t[c]}},this.ifft2d=function(a,n){for(var i=0,o=0;o<r;o++){i=o*r;for(var s=0;s<r;s++)e[s]=a[s+i],t[s]=n[s+i];this.ifft1d(e,t);for(var l=0;l<r;l++)a[l+i]=e[l],n[l+i]=t[l]}for(var u=0;u<r;u++){for(var h=0;h<r;h++)e[h]=a[i=u+h*r],t[h]=n[i];this.ifft1d(e,t);for(var c=0;c<r;c++)a[i=u+c*r]=e[c],n[i]=t[c]}}}!function(){if("function"==typeof window.CustomEvent)return!1;function e(e,t){t=t||{bubbles:!1,cancelable:!1,detail:void 0};var r=document.createEvent("CustomEvent");return r.initCustomEvent(e,t.bubbles,t.cancelable,t.detail),r}e.prototype=window.Event.prototype,window.CustomEvent=e}();var left_eye_filter={real:[1.5419219943717721,.40010880110578706,-.7904364126534296,-1.2685464969238938,.39878117336167285,-1.0673489992245377,-.07988083822940402,-.45374680224191505,-.04347409793890079,-.31125662385352687,.17092430376098702,-.29613086164846153,.5616469648110296,-1.559786848789493,.6451303799749266,-1.2899747976234162,1.1761667998175334,-1.289974797623355,.6451303799749047,-1.5597868487894897,.561646964811025,-.29613086164845964,.17092430376099094,-.3112566238535296,-.04347409793890079,-.4537468022419118,-.07988083822940466,-1.0673489992245357,.39878117336167307,-1.2685464969238942,-.7904364126534301,.40010880110578717,-1.3820969331049027,.06956047126920577,-1.9786339579213206,-1.9807415717551982,-.7866727441045088,-1.2217002325587256,-.19150029104902774,-.3513161729077324,-.17646388464205803,-.1667209502050344,-.09229861292456652,-.028899376452253527,-.1314555696102146,-.32892265898101813,-.40987148655061206,.11741827111366547,-.6725433018260514,-.46007833291519956,-.67215259521101,-.4487190743247301,-.03474931672918458,.005563928130243397,-.1767590236098159,-.2619620808503219,-.3630125430638704,-.33546767337818123,-.6458889740799838,-1.1981932989987978,.12372650763830917,-1.4996172161865935,-2.408429802301389,-2.050529127959172,-1.7249706159518585,-2.277646289702639,-3.125963174341959,-2.9656385065342015,-2.848083508696201,-1.426096450031019,-.6179259082917354,-.2611655301498782,-.38519889843539723,-.17511899827006483,-.32808050503227176,.007680087103746304,-.18710828510427668,.1976534820339281,-.5544445310046505,.1458356759032838,-.6984497111751529,-.9018857723352662,-.5350001638458337,-.0444207518616698,.014727914354086128,-.28084584584371913,-.2989040874868585,-.3943138014933655,-.39569215798819307,-.743519999882583,-.8250219837063175,-1.851491897104155,-.7430237866893424,.21156442062863762,-3.3061472495599986,-1.7990472945779568,-2.219376425173228,-2.343880246691925,-3.361597106712331,-3.538324908586371,-2.263967374508659,-2.027175780678075,-.7524258340587223,-.3014341101683938,-.3625272253546275,-.2548943100464769,-.1892849156146708,-.1179891518538482,.027920290231533224,-.03547210749814382,-.2900872185756226,-.3604588674139817,-.391561438074338,-.8222225740287656,-.4497991497169593,-.09813633035547625,.06562858246622937,-.3360730432730313,-.3216120132349778,-.41856090178723965,-.6402842542962905,-.7766428172010218,-1.3946448661671447,-2.2603422126144683,-.38769722219534525,-.9534159393947865,-1.412952994959813,-2.360233685802043,-1.275639243727802,-2.0983496132652038,-2.568245461005427,-2.879105394693038,-2.1809972632688095,-.8428129384777686,-.759989367937187,-.18584599820380068,-.3010574835530826,-.16098142942852958,-.1379212574041719,-.08979002287112871,-.12321821342876504,-.1128661923016878,-.3924098378001975,-.5780902167586397,-.48685989567066695,-.5356535944329623,-.05103668985052638,-.006854703392511769,-.1896340515783942,-.22514761090777807,-.3555582346088891,-.4667060397658552,-.5617954148525789,-.7495095888115163,-1.477207542226035,-1.5836466114968029,-2.3846549454186694,-1.4884613952536236,-1.8237453905245253,-1.6712324532934877,-1.5169157844507295,-1.6930052820597281,-2.1023566589276004,-2.2062031109308458,-1.7945281756942255,-.2645739883891265,.22038139379151148,-.43479836723775234,-.19830827357221226,-.18018565146479498,-.09706087918479574,-.10088329756370379,-.06306970995727253,-.17970932516041177,-.1943040732581543,-.3797056039227762,-.4730230160625181,-.3036696794805218,-.0647323910189154,-.08902516330269715,-.08200020008302734,-.22965854401457736,-.32035624605031326,-.3183678319655244,-.4013205823631112,-.6560174703347086,-.5904048375141748,-1.8503084663080034,-1.8694842425148914,-1.9326778896298584,-1.630157842292352,-1.43320067851183,-1.305707665299106,-1.364200787821644,-1.5357935460809622,-1.616199233695124,-.7400351866837052,-.2942382417321069,.025934598230976654,-.043349004411304674,-.2540802180302247,-.0669656864849775,-.07571749869863525,.007057189465364498,-.04217135665833811,-.03693831566176801,-.3422156158175605,-.20400167508805764,-.3741711609707977,-.25039909487805356,-.07087453139452493,-.0569972852039487,-.06723820695040318,-.17397285212300442,-.20428337307808273,-.23651154356493315,-.3335649893327657,-.07339749754226077,-.703679598066816,-.8240368002159505,-1.6058616381755235,-1.6192427030685497,-1.5705638815427956,-1.4659201063980019,-.9550417954995102,-.9723752616273987,-1.0460191987834688,-.9146566894126572,-.6054823236139852,.01898438364933451,-.19419044456729498,-.03962785112430722,.0012357796666701798,-.07811082244532508,.004862636492025052,-.04044908966237959,-.0035054269587873454,-.1338754472473073,-.10031131456276647,-.2596867467568419,-.20555329767005767,-.26509289948725284,-.038788452621647145,-.07699989187225126,-.0716614330389765,-.14182240789719938,-.1654673053291095,-.19859450279267193,-.05338232636581037,-.2156585383674445,-.0450973572847935,-.6244981857994951,-.9262490674491722,-1.0411254782363617,-1.122035196738675,-1.0607692164246043,-.5772381177353403,-.6318773589638808,-.5481331120442192,-.5532025210173874,-.301972995874824,-.04721324975783839,.08280893046738329,-.06771513448322243,-.01022881748368659,.04203831125895655,-.06337176739998067,.029161890169972702,-.09139631658683613,-.003460073507075481,-.12424052925006424,-.244329964180121,-.265216641753595,-.22745980283820413,-.14361316535317664,-.0007590420310057794,-.02093616845786214,-.14205665196423617,-.19024248288823023,-.0796861223622452,-.15016133237735926,.049598910651295514,-.11760486834511712,-.1837522251545049,-.3859420549411461,-.5354251643699984,-.5734099173080799,-.5275362142401814,-.23151163972118355,-.2229509691994926,-.33704349161770436,-.26165852514054583,-.13898866968588663,.034596483191139484,-.012631210076789067,.04737131007634562,-.03865183933075155,-.001997076145443002,.0630488452583755,-.1124891762554399,.08556992539656616,-.210436590518682,-.19223333969456,-.3908299483003586,-.1929436800716272,-.4102559543993857,-.17178084419175166,-.010933041190555012,-.0895129361520745,-.21569610281495066,-.09144756671688016,-.19525258909505316,-.029753598134641936,-.021307245660079924,.02908712794055101,.03751129065309784,-.2060099012070584,-.26967580750352926,-.21000923681194664,-.2820901885828563,-.11925518789339556,-.24869348141289982,-.21025892926356746,-.15567029136726124,-.04054672910839591,-.00502661531005471,.030710887069787196,-.006110434024585828,.0369376092260571,-.05486266136790032,.013297880203253048,.19659447375886394,-.2499491329142558,-.06295969900286576,-.5305502909595601,-.38784811281629444,-.5389128507596239,-.41886712861154285,-.09923009726032588,-.16474199810952628,-.28693665642627014,-.00956679808502211,-.3261995499345093,-.08627491478166284,-.07325316175571477,.01563417403869033,.08244053654753179,.025411878261881942,-.11318909242737961,-.1270560226842935,-.21657212936164139,-.1399387354961119,-.3751027523762283,-.2647292311107622,-.24460131567533192,-.14127652303494026,-.05042868659104518,.04134784037419077,-.006178044515300064,.007399034521025015,-.01406273903701438,.14348925152561878,-.015321787554403667,.0017746672356015968,.2516513542736105,-.626463828190993,-.4816713433080564,-1.045863293770664,-.6951259178849319,-.44532127384388254,-.2847972402536839,-.3947095508731798,.2022722834472047,-.5390991207348895,-.12025629051789474,-.1899243750597305,-.04847480672159513,.06076477135322776,.09064815178251616,.09160820891269728,.0036582478916540977,-.2249253000526313,-.27295314658024766,-.3555973802525736,-.6290292501441295,-.57166411974881,-.3725889517312918,-.22157638610464933,.022494427132080854,.014769425415166171,.003526808789406817,-.011346909674078769,.05092117084834829,.09030854179921963,.37260817254533324,-.2590987139215991,-.42379280974334355,-.09538064780856813,-1.190608374889352,-.7859991441489247,-.9527791435273028,-.6365977835942234,-.9802601500895275,.481731982859161,-.6009200901805519,-.10265418316164113,-.39913639006279306,-.17310908908773887,-.0194191171632387,.05404796528917988,.1388529643463832,.15661099050146,-.10898263774416243,-.332912314567376,-.5956902786588871,-.6935308158494897,-1.0999707493347484,-.7439208475373669,-.4907478121415816,-.06519055673385296,.012289768389229717,.024577513704595676,.004030280469609632,.036047756292976456,.058236765637246286,.1389384625679062,.03694467603693463,.41686279554239464,-.8523228638818582,-1.298831512762498,-.4735277967730517,-.8176363254154679,-.7738445780362183,-1.425624000451928,.5258899353236068,-.8982172402290268,.1591911967653899,-.5504659677234687,-.3098001604127102,-.16709614007114884,-.046029700131955266,.04479326815042398,.1689242242845459,.14412365934528507,-.008825007131336736,-.3677854512466631,-.793938445177321,-1.1610479066529615,-.7652321000885066,-.630098580320484,-.13947023057344932,-.017173105577524262,.039030007688455846,.0144912730838054,.03979254294383725,.054072846696920814,.11729310469925348,.053609281522667675,.008154949871808708,-.3091081345284555,.25944224899607843,-1.3584842180322938,-1.5885570490138659,-.6575958279461822,-1.139869490652734,.7092826408059469,-1.9674198903133462,.37712664425406606,-.8433603839057895,-.47788074719428036,-.1834200008666372,-.18811394573901796,-.05505002764598565,.045043056834335606,.1148630355985436,.22023958716404868,.14735402009444676,-.27894427087198,-.7308053695312964,-.7679430569329723,-.37355919765840223,.12353986794322802,.09050534837631184,.14069908672094206,.08737321438027885,.023353946735568523,.03140055992039659,.07955023044620224,.08492716138218544,.04077715825534942,-.16274954314482293,-.41184413435479567,-.7187128882257487,.5530290745634285,-1.5309493464500674,-2.9026104205694736,.4204330359950835,-1.713810626479367,.295138882491271,-1.2517216433630918,-.6676994217651684,-.28576739334390183,-.24127777006787937,-.10778095858902549,-.03609242500919886,.021519213385077923,.13414694961717147,.16917378957839613,.17307922682581758,.07624675882901567,-.04790483513427262,-.27544262702406924,.6182624956656319,.269874231236934,.2085883517320696,.2607342621072197,.12070625812911842,.06294558209330968,.08364957391650543,.04968809534578587,.01956435760784307,-.04603581747659695,-.13409074070830324,-.4902720181429455,-.4775645732142016,-.7440367513542755,-.3080068432033089,-.04371243884270504,-4.735594317158907,-.043712438842706695,-.3080068432033096,-.7440367513542757,-.47756457321420304,-.49027201814294813,-.13409074070830412,-.046035817476598156,.01956435760784307,.049688095345786006,.08364957391650606,.06294558209331085,.12070625812911921,.2607342621072207,.2085883517320702,.269874231236934,-.3735591976583676,-.2754426270240343,-.04790483513427313,.07624675882901252,.17307922682581853,.169173789578395,.13414694961716844,.02151921338507657,-.03609242500919986,-.1077809585890261,-.24127777006787943,-.2857673933439015,-.667699421765169,-1.2517216433630949,.2951388824912743,-1.7138106264793713,.4204330359950768,-2.902610420569474,-1.5309493464500692,.5530290745634223,-.7187128882257502,-.41184413435479833,-.16274954314482265,.04077715825534866,.08492716138218645,.07955023044620314,.03140055992039842,.023353946735571576,.08737321438028138,.14069908672095732,.09050534837633403,.1235398679432393,-.7652321000884781,-.7679430569329614,-.730805369531285,-.27894427087197604,.1473540200944477,.22023958716404682,.11486303559854165,.04504305683433383,-.05505002764598645,-.18811394573901843,-.18342000086663854,-.4778807471942804,-.8433603839057915,.37712664425406617,-1.9674198903133469,.709282640805937,-1.1398694906527307,-.657595827946194,-1.588557049013867,-1.3584842180322987,.2594422489960773,-.3091081345284578,.008154949871808691,.05360928152266728,.11729310469925426,.0540728466969212,.03979254294383871,.01449127308380731,.039030007688458185,-.017173105577517028,-.13947023057343994,-.6300985803204511,-1.0999707493347308,-1.1610479066529467,-.793938445177313,-.3677854512466584,-.00882500713133401,.1441236593452856,.168924224284544,.04479326815042012,-.04602970013195615,-.16709614007115095,-.30980016041271097,-.5504659677234705,.15919119676539073,-.8982172402290286,.5258899353236033,-1.4256240004519327,-.7738445780362169,-.8176363254154656,-.4735277967730568,-1.2988315127625027,-.8523228638818583,.41686279554239525,.036944676036935756,.13893846256790574,.058236765637246675,.036047756292977066,.004030280469611113,.02457751370459911,.012289768389232913,-.06519055673384466,-.49074781214156804,-.7439208475373563,-.629029250144129,-.6935308158494856,-.595690278658883,-.3329123145673749,-.10898263774416028,.15661099050145985,.13885296434638142,.054047965289177706,-.019419117163239467,-.17310908908773912,-.39913639006279433,-.10265418316163986,-.6009200901805531,.48173198285915786,-.9802601500895259,-.6365977835942213,-.9527791435273002,-.7859991441489246,-1.190608374889349,-.09538064780857,-.4237928097433449,-.25909871392159683,.37260817254533357,.09030854179921953,.05092117084834837,-.011346909674079158,.003526808789408155,.014769425415168456,.022494427132082863,-.22157638610464575,-.37258895173129003,-.5716641197488066,-.37510275237622537,-.3555973802525706,-.2729531465802467,-.22492530005262792,.0036582478916564426,.09160820891269639,.09064815178251497,.06076477135322488,-.04847480672159565,-.18992437505973167,-.12025629051789351,-.5390991207348887,.20227228344720258,-.394709550873178,-.28479724025368247,-.4453212738438783,-.6951259178849327,-1.04586329377066,-.4816713433080586,-.6264638281909916,.2516513542736103,.0017746672356018336,-.0153217875544032,.14348925152561842,-.01406273903701487,.007399034521024359,-.00617804451529856,.04134784037419488,-.050428686591041855,-.1412765230349349,-.2446013156753272,-.26472923111076024,-.11925518789339257,-.13993873549610955,-.2165721293616384,-.1270560226842922,-.11318909242737903,.025411878261882927,.08244053654753017,.015634174038688685,-.0732531617557155,-.08627491478166197,-.326199549934509,-.00956679808502389,-.28693665642627003,-.16474199810952764,-.09923009726032403,-.4188671286115432,-.5389128507596231,-.3878481128162946,-.5305502909595622,-.06295969900286663,-.24994913291425488,.1965944737588636,.013297880203252755,-.054862661367901897,.03693760922605668,-.0061104340245862225,.030710887069788338,-.005026615310052167,-.040546729108393256,-.15567029136725916,-.21025892926356554,-.2486934814128962,-.2315116397211769,-.2820901885828492,-.21000923681193823,-.26967580750352416,-.20600990120705304,.03751129065309909,.029087127940549885,-.02130724566008323,-.0297535981346421,-.19525258909505444,-.09144756671688208,-.2156961028149504,-.08951293615207585,-.010933041190555782,-.17178084419175305,-.41025595439938806,-.19294368007162768,-.39082994830036216,-.19223333969456258,-.2104365905186827,.08556992539656708,-.11248917625543933,.06304884525837423,-.001997076145445627,-.0386518393307522,.04737131007634562,-.012631210076786959,.0345964831911426,-.13898866968588444,-.26165852514053983,-.33704349161769737,-.22295096919948695,-.5772381177353403,-.5275362142401814,-.5734099173080794,-.5354251643699987,-.38594205494114614,-.1837522251545064,-.11760486834511884,.04959891065129376,-.15016133237735926,-.07968612236224891,-.1902424828882312,-.1420566519642383,-.02093616845786258,-.0007590420310084487,-.14361316535317845,-.2274598028382093,-.265216641753595,-.2443299641801253,-.12424052925006639,-.003460073507076083,-.09139631658683596,.029161890169972428,-.06337176739998052,.042038311258955005,-.01022881748368659,-.06771513448322196,.08280893046738375,-.047213249757837236,-.3019729958748239,-.5532025210173874,-.548133112044219,-.6318773589638805,-.9550417954995029,-1.060769216424599,-1.1220351967386673,-1.0411254782363524,-.9262490674491646,-.6244981857994925,-.045097357284792555,-.21565853836744897,-.05338232636581171,-.19859450279267432,-.16546730532911214,-.14182240789720132,-.07166143303897729,-.07699989187225306,-.038788452621649434,-.2650928994872585,-.20555329767005678,-.2596867467568408,-.10031131456276626,-.13387544724730568,-.0035054269587865765,-.04044908966237997,.004862636492024128,-.07811082244532547,.0012357796666695618,-.0396278511243066,-.19419044456729473,.018984383649339364,-.6054823236139799,-.9146566894126499,-1.046019198783463,-.9723752616273926,-1.3057076652991049,-1.4659201063979992,-1.5705638815427927,-1.6192427030685486,-1.6058616381755215,-.8240368002159525,-.7036795980668187,-.07339749754226939,-.3335649893327653,-.23651154356493967,-.2042833730780847,-.17397285212300875,-.06723820695040342,-.056997285203952995,-.07087453139452611,-.25039909487805306,-.3741711609707976,-.2040016750880539,-.3422156158175576,-.03693831566176366,-.042171356658337315,.00705718946536539,-.07571749869863496,-.0669656864849772,-.25408021803022474,-.04334900441130162,.025934598230977574,-.2942382417321012,-.7400351866837027,-1.6161992336951192,-1.5357935460809593,-1.3642007878216427,-1.5169157844507262,-1.4332006785118279,-1.630157842292349,-1.932677889629856,-1.8694842425148879,-1.8503084663080056,-.5904048375141792,-.6560174703347134,-.40132058236311047,-.31836783196552787,-.32035624605031593,-.22965854401457814,-.08200020008302822,-.08902516330269802,-.06473239101891355,-.3036696794805129,-.4730230160625184,-.3797056039227587,-.19430407325814622,-.1797093251603995,-.06306970995727144,-.10088329756370083,-.09706087918479443,-.18018565146479387,-.19830827357221226,-.43479836723774673,.22038139379151372,-.2645739883891143,-1.79452817569422,-2.206203110930839,-2.102356658927595,-1.6930052820597257,-1.2756392437278008,-1.6712324532934884,-1.8237453905245253,-1.4884613952536252,-2.384654945418673,-1.5836466114968115,-1.4772075422260404,-.749509588811526,-.561795414852579,-.46670603976586306,-.3555582346088905,-.22514761090777982,-.18963405157839525,-.006854703392512414,-.05103668985052919,-.5356535944329562,-.48685989567066656,-.5780902167586235,-.3924098378001862,-.11286619230167973,-.12321821342876334,-.08979002287112711,-.13792125740417074,-.16098142942852883,-.301057483553083,-.18584599820379807,-.7599893679371835,-.8428129384777584,-2.1809972632688073,-2.879105394693035,-2.5682454610054237,-2.0983496132652038,-2.219376425173226,-2.3602336858020396,-1.4129529949598048,-.9534159393947887,-.38769722219534936,-2.260342212614477,-1.394644866167148,-.7766428172010335,-.6402842542962903,-.41856090178724664,-.3216120132349809,-.3360730432730346,.06562858246623078,-.09813633035547877,-.44979914971695495,-.822222574028781,-.391561438074338,-.3604588674139763,-.2900872185756239,-.03547210749813554,.027920290231535812,-.117989151853845,-.1892849156146684,-.25489431004647656,-.3625272253546275,-.30143411016838906,-.7524258340587202,-2.027175780678063,-2.263967374508654,-3.538324908586366,-3.361597106712324,-2.343880246691923,-1.7249706159518579,-1.7990472945779559,-3.3061472495599995,.21156442062862166,-.743023786689344,-1.8514918971041745,-.8250219837063265,-.7435199998826033,-.3956921579881928,-.3943138014933833,-.29890408748686254,-.28084584584372846,.01472791435408881,-.04442075186168376,-.5350001638458372,-.9018857723352869,-.6984497111751535,.14583567590324595,-.5544445310046473,.1976534820339324,-.18710828510427244,.007680087103749638,-.3280805050322698,-.17511899827005836,-.38519889843539723,-.2611655301498714,-.6179259082917326,-1.4260964500310052,-2.8480835086962,-2.9656385065341997,-3.1259631743419583,-2.2776462897026373,-1.3820969331049018,-2.0505291279591713,-2.408429802301388,-1.4996172161865962,.12372650763830863,-1.1981932989988076,-.6458889740799882,-.33546767337818667,-.36301254306387043,-.2619620808503318,-.176759023609821,.005563928130235761,-.034749316729180774,-.44871907432473696,-.6721525952110092,-.4600783329152383,-.6725433018260518,.11741827111366224,-.409871486550618,-.32892265898101625,-.1314555696102148,-.028899376452251727,-.09229861292456465,-.1667209502050334,-.17646388464205828,-.3513161729077252,-.1915002910490266,-1.22170023255872,-.7866727441045076,-1.980741571755196,-1.978633957921319,.06956047126920993],bottom:{real:[4103.3252596935745,31959.928439656338,10854.93487005055,5174.7646941682715,2670.3793024702013,1512.8812431609856,751.7211981350827,487.34157279751093,286.27976884850017,202.21445228809756,139.363320073941,96.32667662587427,67.41651339270402,55.03603936156373,42.61745504949191,37.32784123540667,35.19880020906027,37.32784123540659,42.6174550494918,55.036039361563766,67.41651339270402,96.32667662587428,139.36332007394108,202.21445228809804,286.27976884850017,487.34157279751093,751.7211981350829,1512.8812431609856,2670.3793024702018,5174.764694168275,10854.93487005055,31959.928439656363,12454.694619943468,7821.583390276555,5473.1790170642225,2925.2286142376206,1403.2127508507554,917.0553055607355,556.7335087890582,335.5815491134937,222.7562369115075,161.71079893305554,119.4497628246793,75.60900751432125,55.49608708093657,43.99882948912511,34.72502996512234,29.983374804996487,29.18733660878197,30.714909872552553,33.13572852856229,38.78004056055656,50.11926248444739,62.42660929674013,93.91676536356728,123.96413175241418,177.16967383039952,250.50030243800805,399.94920918463373,596.1485322845399,914.2463340693114,1871.621027127744,4518.422312124804,13565.815861293135,16084.742683461694,10028.519769850123,2736.2851033168113,1377.4551350842332,614.0817483175045,382.39730464420114,237.0105878631189,156.24359018004319,129.95938769710136,95.53783206710068,72.00409286489193,47.80430165384308,38.41781199466849,32.4520486224145,26.753427300507923,23.7729362481657,23.138404805980134,23.598476471031617,24.755859033283485,28.71332398916273,33.39553720167712,40.85058654989144,58.64988180671874,74.87296871197377,93.46512922636781,123.19419955144703,174.7570612705884,262.71291650117263,321.82068054258934,657.052536352664,2163.593226520231,10212.960963472207,3792.0213246064613,2759.3366542985627,1627.1011647050395,788.4497720201678,362.8509317865861,253.90720770691448,163.04342130809295,117.95146004773997,90.7661067039026,66.20774509684053,48.204553381452804,35.4292065515689,28.049881805648454,23.25027473117818,20.7789366420614,19.004228801577,17.585642163629327,17.6981813264345,18.806836162280465,20.329571180523736,23.456998427374465,27.472702254518477,37.19312003574272,49.11725258408396,59.57482901261523,73.59994664128709,112.97176733843995,181.91972084309376,284.0343016488693,486.2964820369405,857.0528785536101,2037.977143592303,2057.7285052573056,2152.595270625315,1395.1090523951752,736.2529768000007,343.98700964912916,189.68478304615005,127.37774106216496,91.12789293157843,73.66725513376396,55.964360327653644,39.48256704253295,28.14219415335706,21.278934963706885,18.193385040510105,16.473354788100497,15.086583853495943,14.403945056404867,14.533202056236952,15.306988390608382,16.092687824041843,18.097466979870337,20.289280537832838,26.201109009342694,34.023571220637564,41.620492531599325,50.685682074964014,82.56070198163133,127.19888958323958,237.89761616945128,410.06312322518994,1062.2303232610248,1612.0404058137353,2295.1409914972487,1787.3905923922546,1192.2295048012345,614.2488252588063,260.82616895243024,126.23242010647614,84.15107628881098,67.70941499278271,60.1225715594723,42.830591238304876,28.733103940874788,20.365121706656215,16.211112474155353,14.072758594539286,13.483685068827034,12.859628868618824,11.868475605254234,11.903201306554562,12.816996745648828,13.065794209061782,14.312459824747068,16.296926608708432,20.657711991677495,27.65339007023543,33.59311041396786,40.672720076575544,55.85662461850217,103.16047843117397,179.23484372919035,453.7513605151255,902.2628504825688,1683.7179352249004,1784.083505146898,1577.4265763170067,936.6630912289419,441.2089233758718,176.43359667751182,98.09397174153568,65.99594469503664,53.24029570749545,45.85166507919449,32.40748535978308,22.496202298890402,16.9656137144178,13.731573445856062,12.28236966845588,11.747735381447885,11.213125876643861,10.807806034266576,10.840341477375139,11.066245600125107,11.119452781179984,12.424913044930788,14.61002755646222,16.887227742677396,22.29462391228396,27.97815738132312,31.99125039297179,44.05265888187653,76.10956832779837,159.13944268405785,318.3920712827857,686.0032317807187,1336.6568589814267,1043.0649603599104,984.7874618280729,618.0395600950327,289.32426118556657,132.98214831862998,71.52004843088118,52.57629039600819,41.525598741467476,33.63391272281399,27.03125566244968,19.489513580793098,14.812681614273632,12.21137274400836,10.893625186679536,10.482989068673637,10.105487112246305,9.711689924381735,9.948806980482882,10.161347795217756,10.513274350469635,11.294150924355744,12.914730156139361,14.478861048855546,19.021661277112585,23.907610167423496,27.23573455134931,38.74297641398302,62.86922312590263,111.92503010834605,213.21062569137553,433.61330953226366,726.7026984582077,562.2186141052522,539.290746631297,362.9446461846826,211.46669660189423,107.79772661917396,60.67666837556757,41.743276533116536,34.42369696468284,31.26708433258414,25.313030406949355,18.452791878453507,13.956644256748325,11.043046695375654,10.111101652499672,9.455036044447306,9.242959346939653,8.952191122239926,9.232112416401021,9.190804166916982,9.566282735322787,10.506864865879585,11.825879962774797,13.52813582962821,15.999059082232355,19.794027285196304,22.4788452877151,32.16327238486775,47.951984523863096,81.30924286665513,150.93744536633105,263.8463052599166,439.2795103319926,309.78719189559973,306.63257299287005,244.19689848939953,151.98869039704036,91.33048200427616,57.35275332201335,38.70916070606743,33.08708644900138,29.826655436967027,23.987725148031473,16.89184234468231,13.041947079601194,10.535809562752126,9.535947162168391,8.937448349685543,8.567264312291233,8.457273589565943,8.46028044009711,8.55434575263303,9.382376333669994,10.37723041770863,11.799673812944503,12.361176855966248,14.786798351390814,16.739331260686697,20.5901480313592,25.753571174908508,38.3828930678668,63.23013835373618,105.62437218489313,175.68359833526657,256.05708017959813,224.80770864957879,228.96753655549054,172.54966320095522,116.2654682194649,80.46990226978717,53.84433487661021,37.483534347728245,31.075867215997253,26.284110672635684,20.645029038002825,15.025930043703783,11.738276392873866,10.201438772469425,8.820344522727998,8.494550985699536,8.19687284093449,8.179077730441959,7.908377156922052,8.678547729507404,9.647371515689038,10.339435934253908,10.728035799158873,11.983620383388951,13.687783504221503,16.433795900162693,18.309125668572698,22.485075799802843,31.76468437638305,49.270779583367755,77.72985195627992,123.50059845139852,179.77043479461938,159.57955623939222,154.5332986938033,127.96891349444883,91.96783661678981,66.92174464641701,48.818287955893446,36.59106165352678,27.834277069623926,23.04190215218159,18.3587138942453,13.567338391039883,11.281789781943191,9.60382954556472,8.733327756377252,8.338123667351045,7.899208806186968,7.710432242677591,7.998386998564103,8.543643849090227,9.443215884480004,9.787034441091842,10.423788563863184,11.253535869282553,13.327727562718719,15.178485067808285,17.337135682195893,21.668177060872456,29.324826866357235,41.49275321863635,60.042185621507166,90.31813491621534,130.8805255687621,104.24612656823803,108.8028525877362,89.55574556015725,69.78566957523967,56.746590174428,44.171218069814536,32.39838941697333,25.18225275923646,21.610810960419155,16.972539478480535,13.238333358456819,10.614964653675054,9.380692794630786,8.749281483242108,8.135298996501481,7.634398163782139,7.485286988947929,7.8316993609624435,8.385395741527464,9.231574230561463,9.838944162951421,10.386606043801919,11.354519695989614,13.10793814373473,15.240615596988986,17.58979203150065,21.461767190818147,26.661531554562984,36.12333702897858,50.32073186927438,69.0656097199978,87.4422608573542,76.67764327657595,72.68914763671407,65.50785565022079,58.29765840635796,49.55859874114894,39.192968104211104,29.954333787314212,23.9458863540046,19.99476230299754,16.735792774046942,12.901585018586687,10.289994503175569,9.397776582267992,8.670419628780323,7.8828328381527575,7.534147883901947,7.43129292000411,7.798515976625768,8.186906091241408,9.142118635191288,9.830770779287306,10.340589147553608,11.281171263863113,12.984935438318947,15.107976469419242,18.19770629294057,20.668346478928893,25.76149613251493,32.2514242661345,39.95295492008993,51.36943807862585,65.56929956266247,55.46884946872952,55.86542097352833,55.10113878297366,50.53184836867472,43.70147053696678,35.86638144085743,28.439396618258566,22.42863349391925,18.94503035808276,15.596977301337661,12.206893729284205,10.050508612628137,9.547393948232287,8.646327628083018,7.910774588392556,7.275551408966156,7.5482842032534565,7.544387941964139,7.96361878033256,8.992201544757735,9.635199784998907,10.0402383165895,11.706284711344862,13.336194440398188,15.639893484781382,17.791763978880017,20.83131115781941,25.6818621728188,31.387128642704546,37.14316604955522,44.038766386780296,52.90450693740585,48.059389050535145,50.072432061388255,49.11501031551525,44.16042346883115,38.44095318130842,32.35840674752788,26.251111011761232,21.08192257046498,17.515101530242855,14.10261621013594,11.438986216849498,10.422223192105227,9.76207732514108,8.774631916934416,7.5939451837729885,7.260594980680288,7.476691949602524,7.419064545103371,8.018735722916306,8.926634451217284,9.69756437118481,10.35689464395745,11.451859179394017,13.10319606057651,15.460942026724263,18.825021564083144,22.773162722002358,26.906890973713775,31.803276985208164,37.82902190094245,42.388788349798304,44.62010567979956,48.85927778095382,46.13611029220518,41.908361785717766,39.52102274454999,35.05229493371635,29.18134316630342,23.802472557875006,19.95574653975907,16.22743816874862,13.086681034223906,11.226909204888067,10.616041272149978,9.83854928426482,8.656300584619567,7.8952678290472065,7.276214992565685,7.309404620848296,7.276214992565686,7.895267829047208,8.656300584619574,9.838549284264822,10.61604127214999,11.226909204888063,13.086681034223904,16.22743816874862,19.955746539759044,23.80247255787499,29.181343166303414,35.05229493371636,39.52102274454999,41.908361785717766,46.13611029220517,48.05938905053505,44.620105679799494,42.388788349798226,37.82902190094255,31.803276985208186,26.906890973713825,22.77316272200237,18.825021564083173,15.460942026724263,13.103196060576508,11.451859179394024,10.35689464395744,9.69756437118482,8.926634451217275,8.0187357229163,7.419064545103367,7.476691949602523,7.260594980680292,7.593945183772996,8.774631916934418,9.762077325141082,10.42222319210523,11.438986216849505,14.102616210135931,17.51510153024284,21.08192257046497,26.251111011761218,32.358406747527845,38.44095318130838,44.16042346883106,49.115010315515164,50.07243206138801,55.46884946872923,52.90450693740565,44.03876638678024,37.143166049555234,31.387128642704567,25.681862172818796,20.831311157819414,17.79176397888002,15.639893484781378,13.336194440398192,11.706284711344864,10.040238316589498,9.635199784998912,8.99220154475773,7.963618780332553,7.544387941964129,7.548284203253456,7.275551408966155,7.910774588392558,8.646327628083021,9.547393948232287,10.05050861262814,12.206893729284213,15.596977301337661,18.94503035808276,22.42863349391924,28.439396618258566,35.86638144085739,43.70147053696676,50.531848368674645,55.10113878297363,55.86542097352813,76.67764327657582,65.56929956266234,51.369438078625784,39.95295492009,32.251424266134514,25.76149613251495,20.668346478928903,18.19770629294057,15.107976469419244,12.98493543831895,11.28117126386311,10.340589147553612,9.830770779287295,9.142118635191292,8.18690609124141,7.79851597662576,7.431292920004107,7.5341478839019365,7.882832838152761,8.670419628780317,9.397776582267994,10.289994503175565,12.9015850185867,16.735792774046928,19.99476230299755,23.945886354004585,29.95433378731421,39.19296810421109,49.55859874114887,58.297658406357826,65.50785565022066,72.68914763671383,104.24612656823788,87.44226085735421,69.06560971999775,50.32073186927437,36.123337028978554,26.661531554563005,21.461767190818144,17.589792031500657,15.24061559698899,13.107938143734735,11.354519695989618,10.386606043801917,9.838944162951416,9.231574230561453,8.38539574152746,7.831699360962437,7.48528698894793,7.634398163782137,8.135298996501476,8.749281483242111,9.380692794630788,10.614964653675061,13.238333358456819,16.97253947848054,21.610810960419155,25.182252759236462,32.39838941697333,44.171218069814465,56.74659017442797,69.78566957523961,89.55574556015718,108.80285258773613,159.5795562393919,130.8805255687619,90.31813491621534,60.0421856215072,41.49275321863639,29.32482686635726,21.668177060872456,17.3371356821959,15.178485067808294,13.327727562718726,11.253535869282553,10.423788563863175,9.787034441091842,9.443215884480002,8.543643849090223,7.998386998564096,7.710432242677589,7.89920880618696,8.338123667351045,8.733327756377253,9.603829545564714,11.28178978194319,13.567338391039879,18.358713894245295,23.041902152181613,27.834277069623926,36.59106165352677,48.81828795589338,66.92174464641698,91.96783661678955,127.96891349444861,154.53329869380323,224.80770864957842,179.77043479461912,123.50059845139837,77.72985195627996,49.27077958336772,31.764684376383045,22.485075799802868,18.309125668572733,16.433795900162703,13.6877835042215,11.983620383388955,10.72803579915886,10.339435934253904,9.647371515689025,8.678547729507397,7.908377156922045,8.179077730441955,8.19687284093449,8.494550985699535,8.820344522727986,10.201438772469423,11.73827639287387,15.02593004370379,20.645029038002832,26.28411067263568,31.075867215997253,37.483534347728245,53.84433487661013,80.46990226978717,116.26546821946468,172.54966320095502,228.96753655548974,309.78719189559854,256.05708017959756,175.68359833526623,105.62437218489312,63.23013835373606,38.382893067866796,25.7535711749085,20.590148031359234,16.739331260686704,14.786798351390802,12.36117685596625,11.799673812944498,10.377230417708628,9.382376333669995,8.55434575263302,8.4602804400971,8.457273589565942,8.567264312291222,8.93744834968554,9.535947162168387,10.53580956275212,13.041947079601202,16.89184234468233,23.987725148031487,29.826655436966995,33.087086449001376,38.7091607060674,57.35275332201325,91.33048200427605,151.98869039704,244.1968984893988,306.63257299286875,562.2186141052522,439.2795103319928,263.8463052599166,150.93744536633125,81.30924286665515,47.95198452386317,32.16327238486775,22.47884528771512,19.794027285196304,15.999059082232373,13.52813582962822,11.82587996277479,10.50686486587958,9.566282735322787,9.190804166916978,9.232112416401021,8.952191122239926,9.242959346939646,9.455036044447304,10.111101652499666,11.043046695375656,13.956644256748326,18.452791878453535,25.31303040694941,31.26708433258414,34.42369696468283,41.74327653311653,60.67666837556751,107.79772661917396,211.46669660189391,362.9446461846827,539.2907466312969,1043.064960359907,726.7026984582062,433.6133095322625,213.2106256913756,111.92503010834588,62.869223125902685,38.742976413983,27.235734551349324,23.9076101674235,19.021661277112635,14.478861048855546,12.91473015613936,11.29415092435573,10.513274350469626,10.161347795217747,9.948806980482875,9.71168992438174,10.105487112246305,10.48298906867363,10.893625186679529,12.211372744008356,14.812681614273641,19.489513580793123,27.031255662449723,33.63391272281395,41.52559874146754,52.57629039600815,71.52004843088102,132.98214831862995,289.32426118556515,618.0395600950308,984.7874618280689,1784.083505146894,1336.6568589814267,686.003231780718,318.39207128278593,159.1394426840578,76.10956832779843,44.05265888187656,31.991250392971853,27.978157381323108,22.294623912284028,16.8872277426774,14.610027556462216,12.424913044930783,11.119452781179971,11.066245600125109,10.840341477375128,10.807806034266576,11.213125876643852,11.747735381447885,12.282369668455885,13.73157344585606,16.96561371441783,22.496202298890438,32.407485359783124,45.85166507919449,53.24029570749542,65.99594469503667,98.09397174153547,176.43359667751176,441.208923375871,936.6630912289413,1577.4265763170022,2295.1409914972464,1683.7179352249,902.2628504825688,453.7513605151263,179.23484372919026,103.16047843117398,55.856624618502074,40.67272007657553,33.59311041396785,27.65339007023547,20.65771199167747,16.296926608708404,14.312459824747059,13.065794209061782,12.816996745648842,11.903201306554557,11.868475605254236,12.859628868618808,13.483685068827036,14.072758594539282,16.21111247415536,20.36512170665626,28.733103940874788,42.830591238304876,60.12257155947228,67.70941499278264,84.15107628881094,126.23242010647601,260.82616895243,614.2488252588045,1192.2295048012338,1787.3905923922525,2057.728505257306,1612.0404058137367,1062.2303232610243,410.0631232251907,237.8976161694511,127.19888958323968,82.56070198163133,50.68568207496404,41.620492531599325,34.0235712206376,26.201109009342684,20.289280537832823,18.09746697987034,16.092687824041846,15.306988390608383,14.533202056236956,14.40394505640487,15.08658385349593,16.47335478810048,18.1933850405101,21.278934963706888,28.14219415335708,39.482567042533006,55.964360327653644,73.66725513376396,91.12789293157849,127.37774106216477,189.68478304614982,343.98700964912905,736.2529767999998,1395.109052395176,2152.5952706253147,3792.021324606458,2037.977143592301,857.0528785536089,486.29648203694126,284.03430164886925,181.91972084309373,112.97176733844,73.59994664128712,59.574829012615204,49.11725258408404,37.19312003574272,27.472702254518456,23.45699842737447,20.329571180523697,18.806836162280476,17.698181326434526,17.585642163629327,19.004228801577025,20.77893664206141,23.250274731178163,28.04988180564844,35.429206551568925,48.20455338145283,66.20774509684051,90.7661067039026,117.95146004774013,163.04342130809306,253.9072077069139,362.850931786586,788.4497720201659,1627.1011647050398,2759.3366542985605,16084.74268346169,10212.960963472211,2163.5932265202296,657.0525363526643,321.82068054258923,262.71291650117286,174.75706127058845,123.19419955144714,93.46512922636784,74.87296871197394,58.64988180671873,40.850586549891496,33.39553720167711,28.713323989162756,24.75585903328349,23.59847647103166,23.138404805980127,23.77293624816566,26.753427300507926,32.45204862241451,38.4178119946685,47.80430165384316,72.004092864892,95.53783206710088,129.95938769710136,156.24359018004333,237.01058786311899,382.3973046442005,614.0817483175048,1377.4551350842296,2736.2851033168104,10028.51976985012,12454.694619943462,13565.815861293133,4518.422312124801,1871.6210271277425,914.2463340693118,596.14853228454,399.9492091846334,250.50030243800833,177.16967383039946,123.96413175241405,93.91676536356745,62.42660929674012,50.119262484447404,38.78004056055657,33.13572852856233,30.714909872552628,29.187336608781973,29.983374804996448,34.725029965122346,43.998829489125086,55.49608708093662,75.60900751432128,119.44976282467937,161.7107989330556,222.75623691150756,335.5815491134934,556.7335087890583,917.0553055607353,1403.2127508507556,2925.2286142376206,5473.1790170642225,7821.583390276545],imag:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},imag:[0,1.2364045139795619,-1.417097645517349,-.563991130501104,.4461220475293454,-.22857396866743723,-.12233724123958876,-.2217506337025343,-.08184765447899214,-.0821445284202198,-.016319194688300422,-.2278226981680879,-.31553723757062957,-.3462773758278895,1.228987349434353,.2371473197924402,0,-.2371473197924659,-1.2289873494343397,.34627737582788415,.31553723757063035,.2278226981680877,.01631919468830003,.08214452842021792,.08184765447899214,.22175063370252604,.12233724123959235,.22857396866743548,-.4461220475293452,.5639911305011042,1.4170976455173483,-1.2364045139795607,1.3606412475160685,1.4411916754234004,-.3363973770718067,-.400592898897314,.07786945045374206,.11933000679564014,-.37020072416606636,-.12600631152419078,-.2929172313060311,-.05068339188231875,-.2123566898458312,-.16517843825664788,-.3743892093980239,.24863698196016526,.3956337373323095,.6330846638456997,-.4264395724952261,-.28749903579454716,-.4230156803297583,.2797162376269552,.37808744252168813,.15296582393741,.10558339349178479,.08813592215903832,.16705843369252343,.44192642538865684,.2991522518142107,-.047649837051313024,-.9104604552681237,2.0668504460046964,1.0236217631956717,.09577502733112331,.7432738853191639,-.03456213195457008,.8636112375382173,.14688086473050152,-.480409603699644,.725531558693561,-.8786532261255596,-.4386512882244577,-.4857318707028599,-.32017932907631874,-.2830749986604581,-.26990648117356825,.02650526715020339,.07048596936827395,.5437098167860802,-.06793846381419581,.03776680164210118,-.5672727000472354,.7031723596162832,-.02113335643666033,.3877841945469715,-.021237638325898506,.22272564345822293,-.028529610958430065,.3838911656921847,.5401519230094508,.6089048453513496,-.5885198019984432,-.4425799571579083,-.3105478087846587,.29452233058397137,1.420373052298152,.5504297333386854,1.0635980503754177,-.3322328231573132,.34444399750770754,1.481298784591465,.2820348699677993,-.5064081488092492,-.6315271726552403,-.629560147993244,-.381439099170168,-.2602400449478186,-.19111004712688462,-.0074049384249937926,.04814578185161191,.1775395908501845,-.010766872600667563,-.3055754310904166,-.1279044678178969,.26497067484017217,.49718432792560446,.10847923107858634,.1836279844437401,.07579332872568043,.06091583791907436,.19352569039908019,.7248413105946724,.4476986361937191,.6572778182386981,-2.7705947112358387,-1.8545676439466314,1.253480431944275,-.3320127176659218,-.8817924518615257,-.49191197464707653,.25061306335904526,.36434278784189494,1.1059306596340364,.5161851914994362,-.5625934272912334,-.7981852522367001,-.5061427531741151,-.3345019295861077,-.24220392956380443,-.2936321736893144,-.008975674876931768,.015702042401798396,.004328761309678161,.11769772351691517,.14847974776257877,-.07040420542590121,.15992872157624444,.12352253662711207,.22950814490677918,.17507285276321555,.13747467644410705,-.011397583876153142,.1103654239578318,.24404333943616102,1.1434123865171273,-.6056618650285197,-1.3365493166122577,-1.133825005706898,-1.8155993788135394,-1.0591766157447149,-.6901024725301684,-.4661262670583974,-.20353239335470796,.5166385012265062,.2659701357580968,-.10657803670351902,-.6973013864661958,-.6010674473512339,-.335428005062553,-.3056428917979951,-.2667283201489782,-.19552146385155383,-.07081825322981734,.24716165183995586,.2487100107308503,.08790627274965952,-.06639276489870762,.11463822183417864,-.0973871145489355,.203187369929616,.14292038700683402,.20736891492564988,.013685307258532538,-.024371827339033106,-.07233585420108031,.49291782026044645,.048917424863979306,.2263553910474094,.10839909954530379,-1.1957108711898896,-1.074771579950879,-1.1175823884839045,-.23901621577757862,-.12877260884038383,.23623861798820722,.17111767858219226,.4620869054676118,-.23679486634226876,-.5317886241837987,-.34021620386249335,-.23658495591681358,-.22275756609764855,-.20572232603908905,-.1449473312771276,.04256966078595399,.07773307076521871,.20558191361174552,.03171963561705125,-.031869312918226284,.00924466716916557,.05690796487103113,.006811401556527948,.20608602740074444,.023033890597355222,.06494462602113064,-.08971160087534784,.051877409795188095,-.22207073062343796,.2424827691685977,.8293224240232046,-.0013771249391571728,-.05913901763736715,-.220679259578907,-.040068334939789486,.3067700518158289,.3449025548727411,.2222188244136875,.30818729583490434,.04165627319971488,.04389672863559383,-.30032839778423015,-.2424624650890286,-.178099692406481,-.14126159805998126,-.15553553242798068,-.11510723629505018,.024565620333015844,.09932497386133324,.11314958231531824,.10920785431914558,-.002747867764731495,-.002197448124614016,-.0699406561715515,.1465617772621658,.07877018936108643,.10241250352514093,-.021646587213105684,.019211160710794505,-.26281055993233693,-.05514681914050946,.35375643597531126,.22411418130009836,.3875457037899096,.25423051056794166,.30581901500051717,.08591146266209009,.39107302489471046,.24699055160378858,.29387297238508514,.15373347718831995,-.002984582508486469,-.01726020797163449,.0728272552276582,-.06208913525822485,-.11929552297831249,-.14454547803177953,-.09526826450768199,-.10089614648569632,.048761457544342565,.09609679137720413,.10529567915508571,.012037966893712556,.07634310058801329,-.20546035926376272,.13459193297647368,.025732944443593878,.15693288111736364,.04376164797318158,.08347929962968435,-.15251693996845875,-.10657849804550705,.03864181635108452,-.10231188547257405,.21957600785318707,.264774413728534,.35686545376814865,.2942848550600693,.4993413545698925,.1828568991437829,.23675610338446562,.10353827744151976,.06310794909144525,.03846587209017991,.136617176259979,.09812275535485428,-.003990620093458214,-.09009439550122221,-.16647262366552176,-.19237746196753996,.02664719406199056,.04850938386374907,.1654716680991411,-.03591479523938604,.09927373929001723,-.11264804489487676,.14792025966567318,-.09379152614028652,.10021979561886898,.008044972903133957,.2539938219386156,-.10951630791791984,-.03354812223332894,-.024275040060575473,-.15565555640319179,-.035231426543991154,.06348517358735144,.22814734409189322,.10684932807789806,.2355554633425988,.10407564589066262,.015525256999673128,-.011913601076877599,-.003929592004374066,.04470159355949418,.16547295203389104,.15907957720488838,.07466463078185209,-.04243906497357175,-.11246394245376416,-.1697242715154008,-.2153029085609272,-.1519575050165171,.40553391670472716,-.05507255324487554,.18488826926783164,-.03502892748503212,.3700138711951932,-.15325722566754377,.2716892969482076,-.05970121628039784,.48380889084850937,-.13017614472815323,.04767342132995452,.07130558425889642,-.15733503034508964,-.07959356603951166,-.07548582078045694,.06620598245919887,-.0012785498169557718,.06382739270218783,-.0024400785561267094,.050942947866382475,-.16777938781510365,-.09287604949663145,-.010378011540593757,.1594331602275639,.19523869399925237,.18464942262011227,.06328512198243717,-.07722165855118322,-.1491589460269398,-.17912928670535297,-.11490318286815507,-.11189726101521234,-.20487634390276235,.7649837592101456,-.23800865420158882,.7408363358679637,-.08384674801899719,.46372256496136105,-.1683495959766098,.8086039606875512,-.25555617026146216,.19463913189037535,.3009779498087988,-.16302064990391507,-.10690976611351247,-.13497815095121923,-.04977220128469868,-.07945189422396105,.04040760416145534,-.09194915079908203,-.14731166465811507,-.2649992211995451,-.15560186997026057,-.06949686732786686,.16530147427910571,.22324548858793775,.26718136730575287,.1916641951249017,.06093692301766854,-.08862623473412004,-.14658150061325853,-.1598833096185107,-.18630425886720847,.20226767939927157,-.0861423758749425,-.7776631130885305,1.4090153420038987,-.3038886842868152,1.2888777036518135,-.07447075817772283,1.2482190395029773,-.80123249840126,.47055407026248136,.7557719984574562,-.11037652666672627,-.05445836926306743,-.1991810754488677,-.10899116252888987,-.15332031366957818,.04365448634854576,-.022154991408309264,-.1523944889888934,-.19372066727324463,-.023769000914279543,.24457812931884867,.5172290601462988,.4305115414461968,.4535547011943914,.3493581281435395,.2107669845089832,.06395623914002005,-.043266091906771414,-.12307402164456596,-.17588597679362872,-.05716033563257766,-.0784239564694168,.14377922602722487,-.28610637890062873,-1.3867297053543113,2.707602155025657,-.12637740826622818,2.0046873376560574,-1.442367549533677,.4151690191416874,1.1637625900709285,.02187980097289477,.2119473473283329,-.11885489129254229,-.1159981397382039,-.1889926920183694,-.058557612447368006,-.043992442353640485,-.026879139952720663,-.0192982065162415,.11425895652801879,-.10204731321609413,1.0976378910336273,.7808329817202355,.7892686156410853,.6558593420029429,.41963945036689065,.2149537780289469,.10907743849349204,-.015003791740152183,-.0981083523247832,-.09998346191476838,-.14074054993981988,-.04922222307913471,-.6022563234411543,.1482255131870283,-.20779420774376042,-2.0348285284263787,4.025186119425146,-2.7420491756647705,.8073118378409511,1.5256751899261984,-.015777910213839702,.5648106146365885,.09474509067016074,.03230544111585742,-.15496296066268442,-.07089892296474551,-.15185446167165811,-.09901337883732231,-.03383919809283262,.20170996830425536,.31395340400286426,.9180493845319551,.9083748013224733,1.1212514777242175,.8111537128593137,.6546125277251835,.4481201828101785,.2933813386224918,.08094250654372658,-.004887613580663216,-.04204543783114793,-.048279129686226115,-.13748504879992385,-.22867414001479172,-.6520602138291955,-1.4414816884582773,.3490015618927237,1.2663064061664397,-4.451906943808227,2.3981175155339263,2.0366543361516527,-.11574419894478603,.9938253915317542,.4025305949854213,.2978752123577735,-.04812880127462812,.001834095689180732,-.06357806485663896,-.1491109787327997,-.17638384543546787,-.15061392115741762,-.13638564133647435,.3292785127452974,.4564601274895542,0,-.09838020244848457,.2889284460821786,.3998138477400701,.45036129401449043,.22152969012775114,.11073273247786891,.024117745722163984,-.005028012954253469,-.08710696057267951,-.08365344819547284,-.5152142695871454,-.8612426220912759,-.7893985113030451,-.7442322593539389,-1.1208061672534484,0,1.1208061672534437,.7442322593539381,.7893985113030426,.8612426220912766,.5152142695871439,.08365344819547249,.08710696057267933,.005028012954253469,-.02411774572216354,-.11073273247786865,-.22152969012775126,-.45036129401449054,-.39981384774006945,-.2889284460821784,.09838020244848424,-.9083748013224145,-.4564601274895271,-.32927851274525655,.13638564133649642,.15061392115742586,.17638384543547556,.14911097873280194,.0635780648566394,-.0018340956891807838,.04812880127462774,-.2978752123577729,-.40253059498541977,-.993825391531751,.11574419894478773,-2.0366543361516536,-2.39811751553392,4.451906943808238,-1.2663064061664346,-.34900156189272086,1.441481688458285,.6520602138291958,.22867414001479336,.13748504879992438,.04827912968622815,.042045437831148495,.004887613580664909,-.08094250654372509,-.2933813386224868,-.44812018281017507,-.6546125277251672,-.8111537128592801,-1.1212514777241573,-1.0976378910335893,-.9180493845319213,-.31395340400284805,-.2017099683042456,.033839198092839695,.09901337883732686,.1518544616716597,.07089892296474593,.15496296066268506,-.032305441115858605,-.09474509067015939,-.5648106146365897,.01577791021384034,-1.5256751899262007,-.8073118378409491,2.742049175664779,-4.02518611942514,2.03482852842639,.20779420774376556,-.14822551318702654,.6022563234411564,.04922222307913573,.14074054993982205,.09998346191477035,.09810835232478354,.015003791740153814,-.10907743849349157,-.21495377802894516,-.4196394503668887,-.6558593420029402,-.789268615641069,-.7808329817202074,-.24457812931883488,.10204731321609872,-.11425895652800651,.019298206516249916,.026879139952725083,.04399244235364598,.058557612447370934,.18899269201837068,.11599813973820411,.11885489129254237,-.21194734732833254,-.02187980097289353,-1.1637625900709312,-.4151690191416833,1.4423675495336772,-2.0046873376560503,.12637740826623128,-2.7076021550256497,1.3867297053543175,.2861063789006335,-.143779226027226,.07842395646942202,.05716033563257912,.1758859767936318,.12307402164456618,.04326609190677271,-.06395623914001951,-.21076698450897985,-.3493581281435364,-.4535547011943848,-.4305115414461896,-.5172290601462894,.15560186997025938,.02376900091427863,.1937206672732435,.15239448898889424,.022154991408310377,-.043654486348542874,.15332031366958024,.10899116252889095,.1991810754488677,.054458369263066984,.11037652666672665,-.7557719984574531,-.4705540702624809,.8012324984012641,-1.2482190395029769,.07447075817773094,-1.2888777036518133,.3038886842868241,-1.4090153420038936,.7776631130885349,.08614237587494372,-.2022676793992712,.1863042588672104,.15988330961851227,.14658150061325848,.08862623473412022,-.060936923017667906,-.19166419512490052,-.26718136730575015,-.22324548858793625,-.16530147427910316,.06949686732786675,.16777938781510615,.2649992211995447,.14731166465811715,.0919491507990829,-.04040760416145386,.07945189422396387,.049772201284700876,.13497815095122018,.10690976611351256,.16302064990391416,-.3009779498087981,-.19463913189037552,.2555561702614637,-.8086039606875491,.16834959597661264,-.46372256496135666,.08384674801899664,-.7408363358679616,.23800865420159104,-.7649837592101448,.20487634390276502,.11189726101521356,.11490318286815554,.1791292867053549,.14915894602693922,.0772216585511834,-.06328512198243683,-.18464942262010964,-.19523869399925042,-.15943316022756263,.01037801154059478,.09287604949663382,-.015525256999667727,-.050942947866376924,.0024400785561280833,-.06382739270218761,.0012785498169549515,-.06620598245919762,.07548582078045817,.079593566039512,.1573350303450895,-.07130558425889703,-.0476734213299555,.13017614472815361,-.48380889084851014,.05970121628039872,-.27168929694820493,.1532572256675474,-.37001387119519286,.03502892748503371,-.18488826926782947,.05507255324487735,-.4055339167047277,.15195750501651886,.2153029085609278,.1697242715154005,.11246394245376394,.04243906497357169,-.07466463078185144,-.159079577204887,-.16547295203388937,-.04470159355949411,.003929592004374638,.011913601076878649,-.1828568991437799,-.10407564589066134,-.23555546334259525,-.10684932807789757,-.22814734409189458,-.06348517358734926,.035231426543992535,.15565555640319106,.02427504006057549,.03354812223332628,.10951630791791925,-.2539938219386176,-.008044972903134084,-.10021979561886678,.09379152614028896,-.14792025966567243,.11264804489487593,-.09927373929001457,.03591479523938799,-.1654716680991405,-.04850938386374761,-.02664719406199113,.192377461967541,.16647262366552154,.09009439550122157,.003990620093459625,-.09812275535485344,-.1366171762599761,-.03846587209018027,-.0631079490914464,-.10353827744152141,-.2367561033844639,-.39107302489471046,-.4993413545698927,-.2942848550600695,-.35686545376814893,-.2647744137285342,-.21957600785318782,.10231188547257429,-.038641816351083894,.10657849804550705,.15251693996845886,-.08347929962968535,-.043761647973181945,-.1569328811173635,-.02573294444359092,-.13459193297646968,.2054603592637699,-.07634310058801329,-.012037966893705314,-.10529567915508307,-.09609679137720112,-.048761457544342024,.10089614648569795,.0952682645076824,.14454547803178003,.11929552297831249,.062089135258225896,-.07282725522765716,.017260207971635976,.0029845825084865137,-.15373347718831978,-.29387297238508514,-.24699055160378858,-.3067700518158321,-.08591146266209564,-.3058190150005192,-.25423051056794305,-.3875457037899132,-.22411418130009808,-.3537564359753084,.055146819140510416,.2628105599323362,-.019211160710796572,.021646587213104713,-.10241250352514171,-.07877018936108618,-.14656177726216213,.06994065617155748,.002197448124624663,.002747867764730379,-.10920785431913549,-.11314958231531393,-.0993249738613295,-.024565620333014605,.11510723629505158,.15553553242798132,.1412615980599799,.1780996924064803,.24246246508902825,.300328397784228,-.04389672863558922,-.04165627319971637,-.30818729583490695,-.22221882441369153,-.3449025548727439,.23901621577757753,.04006833493978915,.22067925957890494,.05913901763736636,.0013771249391555669,-.8293224240232032,-.2424827691685955,.2220707306234446,-.05187740979518813,.08971160087534878,-.06494462602113076,-.023033890597353883,-.20608602740074317,-.006811401556518173,-.05690796487102039,-.009244667169144016,.03186931291822486,-.03171963561703066,-.2055819136117401,-.07773307076521087,-.042569660785952056,.14494733127713064,.20572232603908944,.2227575660976475,.23658495591681294,.3402162038624952,.5317886241837994,.2367948663422716,-.4620869054676115,-.17111767858219507,-.23623861798820922,.12877260884038208,.690102472530167,1.1175823884838996,1.0747715799508781,1.1957108711898863,-.10839909954530788,-.2263553910474054,-.04891742486397395,-.49291782026044056,.07233585420108059,.024371827339035017,-.013685307258532536,-.2073689149256469,-.1429203870068314,-.20318736992960118,.09738711454895084,-.11463822183415182,.06639276489870634,-.08790627274963889,-.24871001073084317,-.24716165183994784,.07081825322981992,.19552146385155544,.2667283201489779,.3056428917979906,.3354280050625516,.6010674473512297,.6973013864661962,.10657803670352221,-.26597013575809814,-.5166385012265116,.20353239335470413,.46612626705839527,.8817924518615256,1.0591766157447142,1.81559937881354,1.1338250057069015,1.336549316612259,.6056618650285254,-1.143412386517127,-.24404333943615408,-.11036542395783162,.0113975838761526,-.1374746764441064,-.17507285276321236,-.229508144906775,-.1235225366270939,-.15992872157622667,.07040420542593133,-.14847974776257952,-.11769772351689584,-.0043287613096706385,-.01570204240179094,.008975674876936093,.2936321736893157,.24220392956380496,.33450192958610414,.5061427531741152,.7981852522366981,.5625934272912321,-.5161851914994344,-1.105930659634037,-.36434278784189805,-.2506130633590454,.49191197464707476,-.5504297333386833,.33201271766592266,-1.2534804319442674,1.8545676439466376,2.7705947112358396,-.6572778182386966,-.4476986361937145,-.724841310594671,-.19352569039907921,-.06091583791907576,-.07579332872568335,-.18362798444373865,-.10847923107858076,-.4971843279255892,-.26497067484015147,.1279044678179279,.3055754310904159,.010766872600696822,-.17753959085018053,-.04814578185160058,.007404938424997059,.1911100471268881,.260240044947818,.38143909917016594,.6295601479932434,.6315271726552409,.5064081488092473,-.28203486996779953,-1.481298784591466,-.34444399750770943,.33223282315731145,-1.0635980503754157,-.7432738853191642,-1.4203730522981521,-.29452233058397176,.3105478087846589,.4425799571579111,.5885198019984471,-.608904845351347,-.5401519230094439,-.3838911656921845,.02852961095842791,-.22272564345822352,.021237638325899852,-.387784194546968,.021133356436687064,-.703172359616261,.5672727000473203,-.037766801642101375,.06793846381428098,-.5437098167860644,-.0704859693682512,-.02650526715020184,.26990648117357596,.2830749986604576,.3201793290763222,.48573187070286,.4386512882244713,.8786532261255616,-.7255315586935562,.48040960369964236,-.14688086473049994,-.8636112375382178,.034562131954569586,-1.3606412475160699,-.0957750273311256,-1.0236217631956728,-2.0668504460046977,.9104604552681247,.04764983705131218,-.29915225181420874,-.4419264253886607,-.16705843369252318,-.08813592215903708,-.1055833934917848,-.1529658239374068,-.37808744252168625,-.2797162376269429,.42301568032977793,.28749903579456393,.42643957249522774,-.6330846638456163,-.39563373733228846,-.2486369819601503,.3743892093980236,.1651784382566546,.21235668984583117,.05068339188231969,.2929172313060312,.12600631152419559,.3702007241660689,-.11933000679563836,-.07786945045374266,.4005928988973134,.33639737707180556,-1.4411916754233998],height:32,width:32,top:{real:[6327.007467982786,12787.448651417644,-8580.13577826938,-6564.429625192605,1064.8969915597925,-1614.7722808334524,-60.04811942184231,-221.12968025641604,-12.445754708845573,-62.94058771358334,23.82057845345795,-28.525301748952867,37.86428012515434,-85.844490405628,27.49381496964307,-48.15197444336273,41.39966019930714,-48.151974443360345,27.493814969642067,-85.84449040562787,37.86428012515403,-28.52530174895269,23.82057845345851,-62.94058771358404,-12.445754708845573,-221.12968025641445,-60.048119421842806,-1614.7722808334493,1064.8969915597932,-6564.429625192613,-8580.135778269385,12787.448651417659,-17213.595236981997,544.0730266990294,-10829.417860945707,-5794.121923108305,-1103.8692252742003,-1120.3666800727638,-106.61462896985108,-117.89522553300084,-39.30843089365121,-26.96057805653429,-11.02504742288635,-2.1850531713376355,-7.295269738362588,-14.472211987615461,-14.23279965231924,3.5205960317557246,-19.62974773437861,-14.131264529804582,-22.272265924680642,-17.401343902608428,-1.7416101263052008,.34733716754184635,-16.60063574625633,-32.47390190466588,-64.31481385096977,-84.0347536394093,-258.3227844043639,-714.3011765913042,113.1165060355228,-2806.7151144576005,-10882.302955904926,-27817.100568112113,-27745.70849411807,-22841.4208450087,-8553.526467468835,-4085.033989629072,-1748.9561003744159,-545.3354386545253,-146.45498278007594,-40.80544006189128,-50.06021298226216,-16.73048944848435,-23.62313915150434,.36714120063527833,-7.188290919780933,6.414260409354566,-14.833291452397129,3.4669422259569203,-16.161012153790594,-21.28313017801196,-13.244388638951026,-1.2754674400463286,.4918466117149978,-11.472717532816317,-17.53068940264937,-29.523444921912187,-36.98341868022681,-91.5973512360268,-144.17841735614732,-486.41083616652156,-239.1204206916959,139.0089391760282,-7153.157795026505,-18373.599790964956,-8415.922731585739,-6467.554677983386,-5469.658567600724,-2789.7914675082047,-821.4826713748977,-514.7145420030545,-122.6780822655295,-35.554593402553344,-32.90518481960786,-16.87597750619218,-9.124394819051188,-4.180262031874417,.783160840973908,-.8247362446257293,-6.027703935454679,-6.850242789892616,-6.885859335051412,-14.551844205848809,-8.459298914659914,-1.9950695133570466,1.5394495557011576,-9.232834653609892,-11.961754213185406,-20.558561534905806,-38.14482496917136,-57.16086990533409,-157.5554953403844,-411.2008243286849,-110.1193097574614,-463.64281724562954,-1210.9754315912523,-4810.1023052011815,-2624.9192342435695,-4516.897453633137,-3582.982491421491,-2119.74991736369,-750.2347266447723,-159.86878938364373,-96.80572891910141,-16.935754226078267,-22.178078450833883,-9.009222722598976,-5.445485292050662,-2.526888256673675,-2.621952349894846,-2.0534180946008638,-6.464306480423622,-8.721406530014862,-7.012703187407293,-7.7847619200438425,-.7812180190370879,-.11031060182209244,-3.431895986699017,-4.568083040130742,-9.316020064156948,-15.87900618307528,-23.382201868158507,-37.98940473063752,-121.95929165874175,-201.43809047465336,-567.3037269017944,-610.3631285378248,-1937.2376557226703,-2694.0942422163184,-3481.535597542074,-3026.0617140239533,-2506.491638388831,-1355.157669171596,-468.0599091435185,-33.397814851582154,18.54533148158398,-29.439943085485314,-11.922803368680741,-7.717457984896304,-2.788860330209426,-2.054500633053642,-1.0224301618297007,-2.5290059501700397,-2.6199349314032494,-4.882873145781677,-5.6140621268617785,-3.6146413255535528,-.829674845027506,-1.1631844631411599,-1.17362456930955,-3.7427284368684024,-6.617827065642342,-8.803949843157813,-13.481606634721874,-26.682014936266803,-32.97802138197703,-190.87870662958537,-335.07671606134033,-876.9552218570499,-1470.8308615232113,-2413.1056871868645,-2329.4915082040015,-2151.926578142459,-1438.5211303616525,-713.0815238595347,-130.56706965452,-28.862997769748436,1.7115783105395304,-2.3079138134833856,-11.650001060370576,-2.170189504369732,-1.7033561682904694,.11972955037883275,-.5790790812653609,-.45369004788794814,-4.0202584980239315,-2.2874964618085922,-4.043969331388718,-2.714411694103757,-.7843149712055903,-.6337786214807561,-.8354288746558204,-2.5417481635934216,-3.449779845211915,-5.2729359146939485,-9.332533768451485,-2.348077722091996,-30.998957295773433,-62.717085150656224,-255.55592612696097,-515.5540381395323,-1077.4118984564277,-1959.4321649356718,-996.1706325647543,-957.5829658424543,-646.4812454670936,-264.6323709027533,-80.5183401631437,1.357764038030833,-10.209813205700032,-1.6455702447745924,.04156410545341299,-2.111433611523795,.09477041994978236,-.5991594867560358,-.04280607522064791,-1.4583889440112543,-1.0515624140257636,-2.624261072572436,-1.9962698899057387,-2.637358088895228,-.39414295752688255,-.8095209882094745,-.8093550401978136,-1.831598128086258,-2.395778121988731,-3.7775973636187947,-1.2762438485839673,-5.873618704707699,-1.7472058496177199,-39.26171578474986,-103.67045476207605,-221.97901463800724,-486.52939506954147,-770.8638520171584,-324.5340145618874,-340.76561269504333,-198.9419784129981,-116.98390967138687,-32.55200245568722,-2.8647426984892057,3.4567160839115996,-2.331005269373194,-.31982529888503974,1.0641170511547686,-1.1693860348016079,.407002126956675,-1.0092937918537679,-.03498515495516123,-1.1746986822405672,-2.25833192615608,-2.3742700657768196,-2.0999344700147127,-1.3199204785521135,-.00726121067659493,-.21997349279604808,-1.6799449140427334,-2.573626149077699,-1.274902979707558,-2.9722975102588807,1.1149262389696764,-3.782557414370513,-8.811283856834226,-31.380656277665604,-80.81570649485545,-151.2920880811312,-231.73584987382,-71.71934076037124,-68.36402933689453,-82.30497530908133,-39.76913656733262,-12.693902195545155,1.984203566270604,-.4889435407745263,1.5673786316984977,-1.1528550937233366,-.047905313676576855,1.0650111541187497,-1.4670778837513785,.9015484382771278,-2.0067122081730173,-1.7180755446076856,-3.3483434682482898,-1.6317774897434336,-3.470880426438495,-1.4694727348954268,-.10257790692130256,-.9288963638157178,-2.5451436559397584,-1.1303995452351283,-2.8871606625355204,-.49805533537312113,-.4387193422815815,.7490974196906504,1.439791857975526,-13.026034555561825,-28.484337861014367,-36.89517840676591,-72.2311900358384,-26.809485534889244,-56.94273379652035,-36.28010742942203,-18.09907931367515,-3.2627913287121535,-.2706547580504817,1.1511525903295716,-.1898870363801409,.9708722088802537,-1.132641237042418,.1998130176636337,2.307680270293133,-2.549840775656603,-.5553262362525304,-4.506786497033707,-3.1791416623515807,-4.407810096297031,-3.312559231697057,-.8611731352773999,-1.5893272599995412,-2.966763176308445,-.10263295233944174,-3.9090515756474873,-1.1809123553765606,-1.20382750933502,.286248057198718,1.853681713247669,.8072002923997494,-5.576914824230862,-9.876045833403877,-26.746787584056406,-25.156847324745275,-59.858730768373135,-40.90948134422029,-31.301364606284917,-12.99289618826553,-3.374775686900119,2.018530777741562,-.2260612077575776,.20594677690592242,-.3240322568825497,2.6342781156582364,-.20787587650621794,.020021422684959465,2.4168167113542753,-5.471113939106749,-4.016235227521675,-8.261492540220937,-5.359721289980835,-3.561851886896915,-2.433206189931258,-3.72732750056158,1.9796458045760836,-5.619455249505039,-1.3533084788499918,-2.5312603283156982,-.7357741299886245,1.05348708564852,1.9641802030644013,2.686394865901931,.1517907769810002,-13.505006616733285,-24.652619118640313,-46.54077201833177,-65.57386282564879,-62.198686950727755,-33.36748135977328,-15.462856466374785,1.276482037672726,.652383510779166,.11426292455840634,-.28574074744887695,1.1004477970868616,1.5327652909312646,4.932711200240519,-2.7503236900904393,-3.9754701567757182,-.834512135731142,-9.685955117463603,-6.000630422824884,-7.13182532638587,-4.985642454964987,-8.219869288149797,4.4471445589999075,-5.912419213682183,-1.066228559248251,-4.532002002354178,-2.2691032318803455,-.2959592999178123,.95069246916244,2.9800299945570488,4.175488865046039,-3.9368165535394617,-16.75239131732446,-41.14171229985143,-60.64390251212476,-84.34316473215777,-54.07497231667312,-32.1478368384324,-3.8004568077904586,.609063700223492,.9632657107050296,.12072436644318041,.8631954755084683,1.1644302862121145,2.3252453178811563,.4766448788746544,4.289515874709642,-8.009939850720517,-11.261414242734404,-3.732740466180737,-6.1601929909303115,-5.750665733944118,-11.117751544185502,4.305411514823387,-8.211608570347876,1.5649721654809707,-5.692142411938895,-3.494908667188049,-2.1697325908161673,-.6954156264880039,.8151347377023449,3.491384396197289,3.712841092827461,-.2846190491444036,-14.694115553922865,-40.78417179777688,-76.1290979979302,-42.44654416844914,-35.20072244442639,-7.684968530920968,-.867788767062698,1.7056687310546401,.5197495279873948,1.131675911228874,1.212780060538119,2.222121429321137,.8361427470500683,.09954660645280876,-3.106693968311659,2.4769973579809332,-11.745899626687375,-12.566716735550758,-4.784372252544112,-8.604058870064595,5.351103402740868,-15.66778198729919,3.3911987930307137,-8.125945789685659,-4.798036588740434,-2.1471667518999764,-2.508724157326058,-.860976568717486,.8013954360837776,2.3927476350849495,5.65616272254561,4.625019584724071,-10.360873371570062,-32.18376694299341,-40.627648783043085,-17.95302681367091,6.185941644460162,4.4451711191118575,6.213331251274599,3.3587096432927233,.7556965076296271,.8242995843017912,1.6770717987294814,1.487507854284298,.5750646130151693,-1.8616897808321822,-4.292331488605052,-7.016130789435238,4.852626568656962,-11.625945416074895,-21.07467865045702,3.143448295571389,-12.714871655934468,2.366640700254353,-11.17366154497929,-6.475058123170597,-2.9596627855411386,-2.763079045935563,-1.4122750319888788,-.5580228906711165,.4050996560161985,3.054950312292098,4.5519407117959005,5.504486591127148,2.884340309618711,-2.0306279174386637,-12.290279126535582,30.20785901727286,12.45094729737127,8.741596108674122,10.304484703022888,4.231031360287155,1.8368366318675937,1.9910666876255574,.991563036763885,.31747940339256003,-.6024560594659747,-1.5054245711483085,-5.204747979185773,-4.698542589986817,-6.440605765726458,-2.431796520269472,-.318061102868901,-34.61437498430425,-.3180611028689131,-2.431796520269478,-6.440605765726465,-4.6985425899868325,-5.2047479791858065,-1.505424571148318,-.6024560594659905,.31747940339256003,.9915630367638866,1.9910666876255707,1.836836631867627,4.231031360287185,10.30448470302293,8.741596108674146,12.450947297371268,-17.95302681366921,-12.290279126534008,-2.0306279174386814,2.8843403096185996,5.504486591127181,4.5519407117958774,3.0549503122920303,.40509965601617365,-.558022890671132,-1.4122750319888866,-2.763079045935566,-2.9596627855411324,-6.4750581231706095,-11.173661544979305,2.3666407002543774,-12.714871655934495,3.1434482955713383,-21.074678650457034,-11.625945416074918,4.852626568656909,-7.016130789435253,-4.292331488605082,-1.8616897808321802,.5750646130151582,1.4875078542843145,1.6770717987294999,.8242995843018388,.7556965076297252,3.3587096432928165,6.21333125127526,4.445171119112939,6.185941644460696,-42.44654416844733,-40.62764878304236,-32.18376694299287,-10.36087337156992,4.625019584724104,5.656162722545562,2.392747635084909,.8013954360837462,-.8609765687174984,-2.5087241573260646,-2.1471667518999924,-4.798036588740434,-8.125945789685682,3.391198793030713,-15.66778198729918,5.351103402740785,-8.604058870064568,-4.7843722525441965,-12.56671673555077,-11.745899626687423,2.4769973579809226,-3.1066939683116837,.09954660645280862,.8361427470500621,2.2221214293211515,1.2127800605381271,1.1316759112289154,.5197495279874628,1.7056687310547414,-.8677887670623313,-7.684968530920446,-35.20072244442443,-84.3431647321563,-76.12909799792908,-40.784171797776416,-14.694115553922703,-.28461904914431585,3.712841092827477,3.4913843961972515,.8151347377022745,-.6954156264880174,-2.169732590816195,-3.494908667188057,-5.692142411938915,1.5649721654809774,-8.211608570347895,4.3054115148233585,-11.117751544185527,-5.750665733944103,-6.160192990930285,-3.732740466180779,-11.261414242734437,-8.009939850720519,4.289515874709647,.47664487887466933,2.3252453178811465,1.164430286212123,.8631954755084824,.12072436644322472,.9632657107051639,.6090637002236494,-3.800456807789966,-32.147836838431445,-54.074972316672174,-65.57386282564865,-60.643902512124406,-41.14171229985112,-16.752391317324395,-3.936816553539381,4.175488865046039,2.98002999455701,.9506924691624021,-.295959299917824,-2.26910323188035,-4.532002002354194,-1.0662285592482377,-5.912419213682192,4.447144558999873,-8.21986928814978,-4.9856424549649665,-7.1318253263858535,-6.000630422824882,-9.685955117463573,-.8345121357311588,-3.9754701567757316,-2.7503236900904167,4.932711200240523,1.5327652909312637,1.1004477970868634,-.2857407474488868,.11426292455844969,.6523835107792659,1.2764820376728394,-15.462856466374522,-33.367481359773095,-62.19868695072734,-59.85873076837255,-46.54077201833131,-24.652619118640224,-13.50500661673309,.15179077698109764,2.686394865901908,1.9641802030643754,1.0534870856484704,-.7357741299886327,-2.5312603283157147,-1.353308478849978,-5.619455249505026,1.979645804576063,-3.7273275005615623,-2.4332061899312447,-3.561851886896878,-5.35972128998084,-8.261492540220898,-4.016235227521694,-5.471113939106738,2.416816711354272,.020021422684962133,-.20787587650621156,2.6342781156582284,-.3240322568825613,.20594677690590416,-.22606120775752253,2.01853077774176,-3.3747756868998953,-12.992896188264998,-31.301364606284267,-40.909481344219984,-26.809485534888527,-25.156847324744817,-26.74678758405601,-9.876045833403781,-5.576914824230828,.8072002923997806,1.8536817132476344,.28624805719868845,-1.2038275093350328,-1.1809123553765482,-3.9090515756474855,-.10263295233946072,-2.9667631763084428,-1.589327259999552,-.8611731352773833,-3.3125592316970565,-4.407810096297022,-3.179141662351582,-4.5067864970337235,-.5553262362525373,-2.549840775656593,2.30768027029313,.19981301766362944,-1.1326412370424508,.9708722088802425,-.18988703638015317,1.1511525903296145,-.27065475805034434,-3.2627913287119403,-18.099079313674878,-36.28010742942166,-56.94273379651932,-71.7193407603689,-72.2311900358364,-36.895178406764366,-28.484337861013827,-13.026034555561461,1.4397918579755735,.7490974196906212,-.4387193422816503,-.49805533537312413,-2.8871606625355364,-1.130399545235152,-2.5451436559397544,-.9288963638157319,-.10257790692130979,-1.4694727348954375,-3.47088042643851,-1.6317774897434372,-3.3483434682483164,-1.7180755446077083,-2.006712208173023,.9015484382771369,-1.4670778837513718,1.0650111541187297,-.047905313676639846,-1.1528550937233546,1.5673786316984972,-.48894354077444435,1.9842035662707793,-12.693902195544938,-39.769136567331614,-82.30497530907938,-68.36402933689251,-324.5340145618874,-231.73584987382011,-151.29208808113108,-80.8157064948556,-31.380656277665615,-8.811283856834311,-3.7825574143705687,1.114926238969638,-2.9722975102588807,-1.2749029797076188,-2.573626149077714,-1.679944914042758,-.21997349279605258,-.007261210676620465,-1.3199204785521295,-2.09993447001476,-2.3742700657768196,-2.2583319261561177,-1.1746986822405874,-.0349851549551673,-1.009293791853766,.40700212695667115,-1.169386034801607,1.0641170511547318,-.31982529888503974,-2.3310052693731778,3.456716083911618,-2.864742698489133,-32.55200245568721,-116.98390967138671,-198.9419784129981,-340.7656126950431,-996.1706325647434,-770.863852017153,-486.52939506953675,-221.97901463800537,-103.67045476207502,-39.261715784749725,-1.7472058496176825,-5.873618704707824,-1.2762438485839995,-3.7775973636188502,-2.3957781219887693,-1.831598128086283,-.8093550401978216,-.8095209882094927,-.3941429575269055,-2.637358088895282,-1.9962698899057312,-2.6242610725724247,-1.0515624140257607,-1.4583889440112356,-.042806075220638506,-.5991594867560418,.09477041994976447,-2.111433611523809,.04156410545339216,-1.645570244774569,-10.20981320570001,1.357764038031177,-80.51834016314297,-264.63237090274987,-646.481245467088,-957.5829658424444,-2329.4915082039943,-1959.4321649356684,-1077.4118984564245,-515.5540381395323,-255.55592612696057,-62.717085150656416,-30.998957295773568,-2.348077722092276,-9.332533768451471,-5.272935914694109,-3.4497798452119492,-2.5417481635934838,-.8354288746558232,-.6337786214808031,-.7843149712056035,-2.714411694103749,-4.043969331388717,-2.2874964618085487,-4.020258498023898,-.4536900478878949,-.5790790812653498,.1197295503788481,-1.7033561682904654,-2.170189504369725,-11.650001060370577,-2.3079138134832218,1.7115783105395919,-28.86299776974782,-130.5670696545195,-713.0815238595312,-1438.5211303616488,-2151.926578142451,-3481.535597542063,-2413.1056871868605,-1470.8308615232086,-876.9552218570503,-335.07671606133954,-190.87870662958562,-32.978021381977214,-26.682014936266988,-13.48160663472185,-8.803949843157923,-6.6178270656423885,-3.7427284368684086,-1.1736245693095617,-1.1631844631411714,-.8296748450274833,-3.6146413255534444,-5.614062126861783,-4.8828731457814465,-2.619934931403141,-2.5290059501698665,-1.0224301618296836,-2.0545006330535864,-2.788860330209389,-7.717457984896257,-11.922803368680738,-29.439943085484902,18.545331481584157,-33.39781485158058,-468.0599091435166,-1355.1576691715877,-2506.491638388823,-3026.0617140239456,-2624.9192342435676,-2694.0942422163216,-1937.2376557226696,-610.3631285378265,-567.3037269017948,-201.4380904746546,-121.9592916587422,-37.98940473063803,-23.38220186815851,-15.879006183075566,-9.31602006415698,-4.568083040130774,-3.431895986699037,-.11031060182210287,-.7812180190371311,-7.784761920043757,-7.012703187407289,-8.721406530014612,-6.46430648042343,-2.0534180946007163,-2.62195234989481,-2.526888256673632,-5.445485292050623,-9.009222722598933,-22.17807845083391,-16.93575422607804,-96.80572891910084,-159.86878938364163,-750.2347266447713,-2119.7499173636857,-3582.9824914214882,-4516.897453633135,-8415.922731585722,-4810.102305201169,-1210.9754315912437,-463.6428172456313,-110.11930975746253,-411.2008243286865,-157.55549534038482,-57.16086990533496,-38.144824969171324,-20.558561534906186,-11.961754213185522,-9.232834653609975,1.5394495557011911,-1.995069513357094,-8.459298914659838,-14.5518442058491,-6.885859335051412,-6.850242789892523,-6.027703935454709,-.8247362446255362,.7831608409739802,-4.180262031874306,-9.124394819051078,-16.875977506192154,-32.90518481960786,-35.55459340255284,-122.67808226552924,-514.7145420030503,-821.4826713748957,-2789.7914675081947,-5469.658567600714,-6467.554677983375,-27745.70849411805,-18373.599790964956,-7153.157795026502,139.0089391760178,-239.12042069169632,-486.41083616652713,-144.17841735614894,-91.5973512360294,-36.9834186802268,-29.52344492191359,-17.530689402649603,-11.472717532816715,.49184661171508715,-1.2754674400467305,-13.244388638951113,-21.283130178012485,-16.161012153790605,3.4669422259560148,-14.833291452397047,6.414260409354707,-7.18829091978077,.3671412006354383,-23.623139151504223,-16.730489448483766,-50.06021298226216,-40.80544006189026,-146.45498278007528,-545.3354386545192,-1748.9561003744159,-4085.033989629059,-8553.52646746883,-22841.42084500867,-17213.59523698198,-27817.100568112102,-10882.302955904914,-2806.7151144576032,113.11650603552238,-714.3011765913102,-258.32278440436545,-84.03475363941075,-64.31481385096976,-32.473901904667066,-16.600635746256838,.34733716754136956,-1.7416101263050108,-17.401343902608698,-22.27226592468065,-14.131264529805808,-19.62974773437863,3.5205960317556224,-14.232799652319452,-14.47221198761537,-7.295269738362605,-2.1850531713375,-11.025047422886134,-26.960578056534132,-39.30843089365128,-117.89522553299832,-106.61462896985047,-1120.3666800727583,-1103.8692252741987,-5794.121923108299,-10829.417860945698,544.0730266990613],imag:[0,39515.399789254865,-15382.502646592808,-2918.5213899411633,1191.3150820979915,-345.8052698718326,-91.96349756116432,-108.0683025974378,-23.43132760503778,-16.61081082295881,-2.2742971526945692,-21.94540337447156,-21.27242040257718,-19.057735286082725,52.37631312091274,8.852197502614422,0,-8.852197502615361,-52.376313120912044,19.05773528608244,21.27242040257723,21.945403374471546,2.2742971526945164,16.61081082295847,23.43132760503778,108.06830259743377,91.96349756116703,345.8052698718299,-1191.315082097991,2918.521389941166,15382.502646592799,-39515.399789254865,16946.371225111547,11272.40087069651,-1841.163065584854,-1171.8258105148211,109.267405778432,109.43221584454041,-206.10314812122442,-42.28539321936541,-65.24914017226911,-8.196051793926907,-25.36595623631852,-12.488977779350739,-20.777136166915728,10.939736173955986,13.738393384077787,18.982014759380824,-12.446635345723246,-8.830506972875275,-14.016932746731957,10.847407040619599,18.949463773817904,9.549137726694633,9.916050792857149,10.925693066643545,29.5976882079218,110.70270321520633,119.64570653889598,-28.406380421737747,-832.3851335439583,3868.3607546707453,4625.155413999855,1299.266384884336,11955.36918869557,-346.60702359457474,2363.08656433282,202.32180136864196,-295.0107693483969,277.4413124787238,-208.25011765184485,-68.53645210929017,-63.125416501511275,-30.589238972650307,-20.382558491276782,-12.902690844348575,1.0182743702449766,2.287414105137245,14.546101055958879,-1.6150967690531892,.8738635446220925,-13.38677146472326,17.407635810762027,-.6068089103442856,12.950261495215786,-.8675699825474084,13.062832664150156,-2.136096668655318,35.88043741028102,66.54358379132412,106.41042136702396,-154.61175360170367,-142.4313830070681,-204.04622542072212,637.2265195104327,14506.214536688893,2087.241286517743,2934.8250858413794,-540.5764135125077,271.5767913086672,537.4906442433505,71.61068630950663,-82.56651716015784,-74.48955207450676,-57.14272356927949,-25.254222647826957,-12.544755138678799,-6.770877333738462,-.2077076475991805,1.1194026551973495,3.6890839097334878,-.20461611038051675,-5.373740185152839,-2.2636764639022453,4.983260069528009,10.10754418440443,2.544597152813191,5.044756942220222,2.818990373202739,2.9920185974422946,11.529259915073515,53.34828178316849,50.5773061658137,119.57179721034167,-786.9439339579221,-901.8697209507841,1074.2990124084633,-676.634329985113,-1814.4894639161919,-1058.8873901892568,349.63255334068964,268.2484621242063,380.4257804868011,97.91247606120596,-71.66187990477866,-72.73694020539094,-37.286147332183255,-18.72018651765236,-9.562832886967836,-8.263453641636948,-.1909928019616089,.2856733033383343,.0713092208473309,1.775656575203522,2.1386941287610384,-1.0231985430634363,2.4480270844924137,1.987809621173889,4.1535160740617325,3.5521022242715827,3.6019889835361654,-.38778650675348675,4.593463303583732,12.369503115173785,94.4009292853464,-77.03951669454163,-317.9618963149653,-464.9398230309893,-1928.5847150696218,-1707.435501473529,-1583.8824730375936,-833.1497046070991,-242.65732454029356,317.3445924618518,69.37197156554217,-13.453603503282046,-58.67866216881051,-40.69792523135727,-20.16679423742438,-13.090865763493372,-7.663932546815518,-3.9818184076004774,-1.1480426683317846,3.4782462601712654,3.3535274581593777,1.130442042784202,-.7879809105656911,1.364561831917687,-1.248210330241836,2.654804361380871,2.0455422971726147,3.3794759874708187,.2827071358643787,-.6739636481307105,-2.4299863370655714,20.048308524208917,2.7323622379310764,23.350930435926227,19.428895667387472,-542.5554345851384,-969.7264693441342,-1881.693511581832,-426.42488803140975,-203.1293354864958,221.2759941924873,75.49864673782753,81.52765470923214,-23.22814892751923,-35.0958926310836,-18.113211298120703,-10.84781416147373,-7.219012562090457,-4.627971063973636,-2.4591204313834965,.5845484236475059,.9547463106026568,2.4151219203224654,.35567626693527166,-.3444373524655358,.10021534895843374,.6297575158661224,.07573905798146836,2.560600970229473,.33652577635989583,1.0967346902818458,-2.0000864020848046,1.451434335785166,-7.104320348324592,10.682010714917043,63.119371696969466,-.21915489532378957,-18.829394319190524,-151.38668525810633,-53.557614725234764,319.9810919368852,339.6557115911443,137.34002448547074,89.16606167421133,5.539540701045855,3.139496157974919,-15.790153056071546,-10.068399035154068,-5.990189510359599,-3.818478372445559,-3.031311871551015,-1.7050468427375405,.29997994657424726,1.0820090369221063,1.186145834536469,1.1035985643781976,-.026686439684276222,-.021861987241408937,-.7106913323848779,1.5408441736495715,.8896424069841912,1.3226298476418663,-.3134179284404904,.3654281917809065,-6.283172414744601,-1.5019641274621849,13.705577255286178,14.08988446983488,43.37606456504579,54.20464622802869,132.60719521227122,62.432091745032416,219.8685340702529,133.19971898528303,106.65962198554573,32.50951057813668,-.3217312093221928,-1.0472919151881939,3.040048254115993,-2.137337576928337,-3.730023177462626,-3.658884080605465,-1.7579654575817145,-1.4081716233776314,.5384750525967524,.9716444260939648,.9955744417358943,.11126643861839057,.6834380273282822,-1.8968331338371984,1.2370080984335854,.24616862215977253,1.6488725749132858,.5175199959040523,1.1293193043526017,-2.440127533596657,-2.1096176983280075,.8686234113923286,-3.2906850406637935,10.529105330387669,21.528607110729595,53.86435993126087,77.64597170154937,219.35042572397626,56.6467253044894,72.59713315254464,25.283726226154087,9.591694536051858,3.513106638710965,7.835371209588592,3.7982495059531924,-.1320379920173739,-2.687214491416787,-3.993299541160216,-3.249609758225802,.3475312947763441,.5110856303949012,1.5779290838292743,-.32098662744154494,.8505043637670686,-.9526953350056799,1.2514468795435802,-.8023251432711297,.9402998385797201,.0834845375200434,2.9970442493787712,-1.3537504507858638,-.49606931853204594,-.4063479369404129,-3.2049709482453,-.9073350510942371,2.436744629198272,14.425788131967863,11.285893196605656,41.38323140755873,26.64930600456886,3.49019745229235,-2.7278278900775033,-.6780497768719117,5.197251705350807,13.315592278460391,8.56553402704958,2.798694252472001,-1.3188307478897958,-2.9560147101356677,-3.503962513889325,-3.235126442242444,-1.7837191938553947,4.13702942142299,-.485758893366084,1.5705428299533406,-.2871276643491235,3.026372213847224,-1.2120159426024513,2.35786853116133,-.5759598133955007,5.0023110313506045,-1.3965343408401143,.5713001835955326,.9760153999777991,-2.585611776637107,-1.4572886030272592,-1.697304402058907,2.103012136644805,-.06299514621758302,4.961293785496401,-.301351161950073,9.158035887659205,-26.77416025365113,-14.352442298363405,-1.328062861082634,14.662722831107068,13.065714024917916,9.014268684358106,2.3156698002103213,-2.1494090398895276,-3.4369058394752816,-3.2885833247038136,-1.5589303641797962,-1.2624013759488528,-1.9675974847606275,6.6808538974877765,-1.9845455926326385,5.852020908231505,-.6464946693693394,3.7090325345277484,-1.4383189901623872,7.635821765818129,-2.5011370399824613,2.0288771570791524,3.387066154036441,-2.1726948090167277,-1.6227282885568253,-2.3401345171732064,-1.0784728701462345,-2.329913042321786,1.6766227476276099,-5.520827980018438,-13.304914803323909,-34.683237345909106,-16.2208922311743,-7.561457411183358,14.803696771258469,15.579335900760762,15.161631552742872,8.466040959037517,1.9742581617985508,-2.2318082441740326,-3.1677451000476946,-2.7136257844502993,-2.4663578849843404,2.147064267404146,-.8080751646824499,-6.8039934755458935,11.462761097859508,-2.320007213313432,9.647619505490004,-.5832325892308606,10.466810618341768,-7.39663728492945,4.629755222962074,7.84990600691447,-1.2532724460122664,-.7138369357089525,-3.035642205111053,-1.9171318821546592,-3.2905248775997,1.1638954652799918,-.8003122215164804,-7.6686022187651925,-13.379436000591463,-2.0784151782651223,18.75367455316294,37.59693951497317,28.201887912811504,26.441177038828386,17.31369928962457,8.260583701281336,1.91576653498145,-1.0360449197814665,-2.460835808457071,-2.9435912594789997,-.7374589298546507,-.806982080987579,1.3512050433752707,-2.4806623635392717,-10.931358459008862,20.399475046734903,-.9391475392972903,15.633586230850142,-11.808527677086202,3.795524426649309,11.440683264496995,.22625003249094855,2.3910143241324033,-1.5433230899620785,-1.7524971656611896,-3.4392335008624597,-1.2102890230410412,-1.1333111335531953,-.8668905465240005,-.7710203749819823,5.869418392294464,-6.691170849830921,60.884710948918006,43.6215632338163,43.48959952748494,33.141784821271486,18.338861076357606,7.709614194939609,3.102096535420124,-.33651454595896624,-1.858665713174497,-1.559439785993801,-1.7180049365163976,-.49470837698954684,-5.749978377706704,1.2816063498557866,-1.6438131382345036,-14.80449956699707,30.38324880041191,-20.687082737158004,6.429123713414993,13.719178799652914,-.15202331710012035,5.670833174690743,1.1091130063870853,.43083164420390874,-2.423604198850752,-1.2614169037455483,-3.163327541785472,-2.542847948565205,-1.0621152637056996,7.492146846575477,13.826120615216594,48.56895003285198,43.655937980459306,56.143788442077074,39.839822974553684,28.907966432346075,17.226166967005444,9.493352687280801,2.124830724849576,-.10304029106189502,-.73643011249607,-.6808620369242278,-1.5726895782452095,-2.38329292549688,-6.365462228048634,-12.648471231222512,2.6502987300645,9.194137936615347,-33.28553680715055,17.791788634489134,16.331392880531652,-1.0332061538290742,9.637685708097134,4.168966963233515,3.4112249849533103,-.6306411192619769,.02835684712188818,-1.1968584419289052,-3.3957285823190806,-4.745940898656516,-4.790016252397657,-5.15933541309157,13.957717184896774,20.367299127198688,0,-4.5388798707327584,12.10851784859719,15.801052170121357,15.786196904526062,6.464533909142766,2.6357128260629894,.48128762074186304,-.08159176932681525,-1.1399410088753745,-.939169667566381,-5.469535949937741,-8.47337798315448,-6.833270794890364,-5.875913014616271,-8.155226637929625,0,8.15522663792959,5.875913014616266,6.833270794890349,8.473377983154487,5.469535949937732,.9391696675663769,1.139941008875372,.08159176932681525,-.48128762074185355,-2.635712826062981,-6.464533909142767,-15.786196904526072,-15.80105217012133,-12.108517848597181,4.538879870732742,-43.65593798045641,-20.367299127197448,-13.957717184895019,5.1593354130924185,4.790016252397922,4.745940898656731,3.395728582319133,1.1968584419289152,-.028356847121888983,.6306411192619719,-3.411224984953306,-4.168966963233496,-9.637685708097113,1.0332061538290882,-16.33139288053165,-17.79178863448908,33.28553680715062,-9.194137936615315,-2.6502987300644807,12.648471231222583,6.365462228048637,2.383292925496898,1.5726895782452166,.680862036924256,.7364301124960793,.10304029106193066,-2.124830724849536,-9.493352687280627,-17.22616696700529,-28.907966432345297,-39.839822974551964,-56.14378844207378,-60.88471094891558,-48.56895003285002,-13.82612061521586,-7.492146846575117,1.0621152637059226,2.542847948565322,3.163327541785505,1.261416903745556,2.4236041988507613,-.43083164420392467,-1.1091130063870698,-5.6708331746907525,.1520233171001266,-13.719178799652925,-6.429123713414971,20.687082737158036,-30.38324880041186,14.804499566997148,1.6438131382345447,-1.2816063498557717,5.749978377706724,.49470837698955733,1.7180049365164254,1.5594397859938318,1.8586657131745035,.33651454595900265,-3.102096535420111,-7.709614194939538,-18.33886107635751,-33.1417848212713,-43.48959952748401,-43.621563233814584,-18.75367455316185,6.691170849831209,-5.8694183922938254,.77102037498232,.8668905465241434,1.133311133553338,1.2102890230411023,3.4392335008624833,1.7524971656611932,1.5433230899620796,-2.3910143241323984,-.22625003249093578,-11.44068326449701,-3.795524426649273,11.808527677086207,-15.633586230850069,.9391475392973129,-20.39947504673482,10.931358459008916,2.4806623635393117,-1.3512050433752816,.8069820809876324,.7374589298546702,2.943591259479049,2.4608358084570767,1.036044919781497,-1.9157665349814337,-8.2605837012812,-17.313699289624388,-26.441177038827938,-28.201887912810978,-37.59693951497237,16.22089223117415,2.078415178265043,13.379436000591378,7.6686022187652325,.8003122215165199,-1.1638954652799158,3.290524877599744,1.917131882154679,3.035642205111054,.713836935708947,1.253272446012271,-7.849906006914436,-4.629755222962067,7.396637284929479,-10.46681061834176,.5832325892309236,-9.647619505490004,2.3200072133134997,-11.462761097859458,6.803993475545934,.8080751646824615,-2.147064267404143,2.4663578849843657,2.7136257844503273,3.1677451000476933,2.2318082441740374,-1.9742581617985304,-8.466040959037452,-15.161631552742712,-15.579335900760643,-14.803696771258227,7.561457411183342,26.774160253651477,34.683237345909006,13.304914803324097,5.520827980018494,-1.6766227476275497,2.3299130423218712,1.078472870146282,2.3401345171732237,1.6227282885568277,2.172694809016716,-3.3870661540364337,-2.0288771570791524,2.5011370399824764,-7.635821765818108,1.4383189901624107,-3.7090325345277098,.646494669369335,-5.852020908231483,1.984545592632657,-6.680853897487771,1.9675974847606519,1.2624013759488664,1.5589303641798025,3.2885833247038483,3.436905839475272,2.1494090398895325,-2.3156698002103084,-9.014268684357965,-13.06571402491778,-14.662722831106908,1.328062861082763,14.352442298363767,-3.49019745229113,-9.158035887658194,.30135116195024236,-4.9612937854963866,.06299514621754256,-2.103012136644765,1.6973044020589363,1.457288603027268,2.5856117766371063,-.9760153999778071,-.5713001835955446,1.396534340840117,-5.002311031350611,.5759598133955085,-2.357868531161305,1.2120159426024788,-3.02637221384722,.28712766434913656,-1.5705428299533217,.4857588933660993,-4.137029421422994,1.783719193855416,3.235126442242455,3.5039625138893205,2.956014710135662,1.3188307478897938,-2.7986942524719765,-8.56553402704949,-13.315592278460258,-5.19725170535079,.6780497768720096,2.7278278900777337,-56.64672530448825,-26.649306004568476,-41.383231407558036,-11.285893196605604,-14.42578813196792,-2.4367446291981882,.9073350510942723,3.2049709482452906,.4063479369404134,.4960693185320061,1.3537504507858567,-2.9970442493787934,-.0834845375200447,-.9402998385796996,.8023251432711498,-1.2514468795435723,.9526953350056726,-.8505043637670447,.3209866274415623,-1.577929083829268,-.5110856303948855,-.3475312947763517,3.2496097582258234,3.9932995411602126,2.687214491416765,.13203799201742056,-3.798249505953158,-7.8353712095884145,-3.513106638710994,-9.591694536052009,-25.283726226154414,-72.5971331525438,-219.8685340702529,-219.35042572397646,-77.64597170154943,-53.86435993126099,-21.52860711072962,-10.52910533038772,3.290685040663801,-.8686234113923152,2.1096176983280075,2.4401275335966615,-1.1293193043526162,-.5175199959040564,-1.6488725749132833,-.24616862215974425,-1.2370080984335483,1.8968331338372646,-.6834380273282822,-.11126643861832354,-.9955744417358692,-.9716444260939339,-.5384750525967466,1.408171623377654,1.757965457581725,3.6588840806054854,3.730023177462626,2.1373375769283727,-3.0400482541159497,1.047291915188283,.3217312093221976,-32.5095105781366,-106.65962198554575,-133.199718985283,-319.98109193688754,-62.432091745036324,-132.60719521227176,-54.20464622802902,-43.37606456504613,-14.089884469834875,-13.705577255286062,1.5019641274622118,6.283172414744585,-.3654281917809468,.31341792844047633,-1.322629847641876,-.8896424069841873,-1.5408441736495315,.7106913323849381,.021861987241514846,.0266864396842654,-1.1035985643780957,-1.186145834536423,-1.082009036922065,-.29997994657423205,1.7050468427375622,3.031311871551031,3.818478372445528,5.99018951035957,10.06839903515407,15.790153056071421,-3.1394961579745826,-5.539540701046052,-89.16606167421166,-137.3400244854728,-339.65571159114575,426.42488803140685,53.55761472523432,151.38668525810476,18.829394319190286,.2191548953235339,-63.1193716969694,-10.682010714916952,7.104320348324818,-1.4514343357851665,2.0000864020848317,-1.0967346902818478,-.3365257763598761,-2.5606009702294568,-.07573905798135958,-.6297575158660037,-.1002153489582,.34443735246552043,-.35567626693504045,-2.415121920322402,-.9547463106025608,-.5845484236474793,2.4591204313835524,4.627971063973652,7.219012562090432,10.8478141614737,18.11321129812079,35.095892631083665,23.22814892751946,-81.52765470923207,-75.49864673782862,-221.27599419248904,203.12933548649244,1583.8824730375886,1881.6935115818235,969.7264693441334,542.5554345851378,-19.428895667388197,-23.350930435925818,-2.7323622379307726,-20.048308524208668,2.4299863370655803,.6739636481307644,-.2827071358643783,-3.3794759874707645,-2.045542297172576,-2.6548043613806773,1.248210330242034,-1.3645618319173671,.787980910565676,-1.130442042783935,-3.353527458159282,-3.4782462601711517,1.1480426683318268,3.981818407600519,7.663932546815509,13.09086576349318,20.166794237424288,40.69792523135695,58.67866216881051,13.453603503282435,-69.37197156554245,-317.3445924618542,242.65732454028887,833.1497046070945,1814.4894639161919,1707.4355014735293,1928.5847150696216,464.93982303099165,317.9618963149654,77.03951669454241,-94.40092928534638,-12.369503115173439,-4.593463303583724,.3877865067534687,-3.6019889835361467,-3.5521022242715157,-4.153516074061658,-1.987809621173597,-2.4480270844921423,1.0231985430638744,-2.1386941287610495,-1.775656575203229,-.07130922084720692,-.28567330333819857,.19099280196170093,8.26345364163699,9.562832886967872,18.72018651765216,37.28614733218326,72.7369402053908,71.66187990477839,-97.91247606120552,-380.4257804868011,-268.24846212420823,-349.6325533406899,1058.8873901892528,-2087.2412865177334,676.6343299851142,-1074.2990124084556,901.8697209507884,786.9439339579222,-119.57179721034137,-50.57730616581321,-53.34828178316841,-11.529259915073451,-2.9920185974423683,-2.818990373202848,-5.044756942220179,-2.5445971528130604,-10.107544184404102,-4.9832600695276215,2.2636764639027978,5.373740185152825,.20461611038107308,-3.6890839097334074,-1.119402655197085,.20770764759927202,6.770877333738589,12.544755138678777,25.25422264782682,57.14272356927944,74.48955207450695,82.56651716015759,-71.61068630950653,-537.4906442433507,-271.57679130866813,540.5764135125049,-2934.825085841371,-11955.36918869557,-14506.214536688902,-637.2265195104331,204.04622542072232,142.43138300706894,154.61175360170483,-106.41042136702355,-66.54358379132336,-35.88043741028101,2.1360966686551617,-13.062832664150186,.8675699825474646,-12.950261495215663,.6068089103450538,-17.40763581076148,13.386771464725289,-.8738635446220966,1.6150967690552112,-14.54610105595846,-2.2874141051365076,-1.018274370244917,12.902690844348964,20.382558491276768,30.589238972650698,63.12541650151129,68.53645210929236,208.25011765184536,-277.4413124787215,295.01076934839597,-202.32180136863923,-2363.0865643328207,346.6070235945696,-16946.371225111554,-1299.266384884367,-4625.155413999856,-3868.3607546707453,832.3851335439597,28.40638042173725,-119.64570653889508,-110.70270321520742,-29.59768820792175,-10.925693066643381,-9.916050792857169,-9.54913772669443,-18.949463773817815,-10.847407040619126,14.016932746732627,8.830506972875813,12.446635345723296,-18.9820147593783,-13.73839338407706,-10.939736173955323,20.777136166915735,12.48897777935125,25.36595623631853,8.196051793927062,65.24914017226915,42.28539321936699,206.10314812122587,-109.43221584453876,-109.26740577843286,1171.8258105148195,1841.1630655848473,-11272.40087069649]}},right_eye_filter={real:[1.8229079259010603,.09781049864858246,-.5584009213724859,-.9997046284235658,.18757876559092043,-.8161769486311446,-.17457078018685562,.1382218261307309,-.13830885288846723,.14088352498892928,-.11242245121823281,.6419014453075046,-.18081689212517704,.8475744542340304,-2.0367692338977426,2.3450651085370726,-3.222777163962479,2.3450651085369945,-2.03676923389771,.8475744542340385,-.18081689212518082,.6419014453075054,-.11242245121823641,.1408835249889417,-.13830885288846723,.13822182613073003,-.17457078018684977,-.8161769486311367,.18757876559091927,-.9997046284235627,-.5584009213724851,.09781049864858132,-1.0960340088024074,-1.91191994525123,-2.409570266538848,-.5516235280495324,-.5050532801402159,-1.3068505835636635,-.4943718744397559,.23127204626685588,.0433507943550392,-.07178740615443681,.07085444983720594,.17221102955705567,.44602122877614064,.0741482055919004,-.015611524439393865,-.7989672475729291,-.6715596106043705,-.49375784053273253,.028167647498424205,-.3191891366103583,.5358217017440822,.20183473326047152,.12710467168208503,-.0714002635141921,.07456060444801779,-.12451483496807111,.051358135035693774,-.7728239811338444,-.42160647485916963,-1.1311602269894514,-1.4625324828122208,.3337871926813808,-1.77011609742092,-1.4302518240108344,-3.0428213499062116,-.6063122548783355,-.13683987631719793,-2.369242408538352,-.34105804260324346,-.2596965785205799,.2361043379661986,-.2768516857968317,.16986402710259335,.073612585805397,.5770491101708912,-.059867579479423505,.5168021952817504,-1.0666730319382505,-.005655209467068683,-.7580993906074581,-.06470132025004456,-.19832318162238824,.37732986906226257,.20777584924550152,.15451076629740465,-.013991851319401968,.13841341497021592,-.08688394903692853,.2526142361971455,-1.199138513843388,-1.9867837341406693,-2.275962773839737,-3.1079150257531585,-2.3995834975192567,-2.293769234372572,-2.1872173045799017,-1.3988308931230504,-2.207395781381544,-1.9667941627002865,-1.6748432066635108,-.9265077203256434,-.0541972372500527,-.18026213329416008,-.15232124758200827,-.016555865669302033,.31289505893870784,.4280654296827472,.23124350286854853,-.08736638276460744,-.12552132795947232,-.12547908619418155,-.38089709050886683,-.2844407665876804,-.11944152964360766,.12056136689031131,.21189843131890268,.1658159847015422,.13376820638890077,.22205496825803592,.15120100371874812,.12380717441381156,-1.235259678432226,-2.222275911684921,-3.378285680998969,-3.415076124219421,-2.7282977589825297,-1.5576789730825455,-1.6478932560447972,-2.067907968457094,-2.004290735457912,-2.6427456963680775,-1.930947467983862,-.16864865516592528,-.22642518078963322,-.13321306237600422,-.20692971953006373,-.068344938706069,.14493915164047724,.4650583247482101,.32789481378377733,.1852927254910838,-.1356638873386786,-.03585192275390197,-.17203834043005656,-.15954900238018477,-.05958171313143122,-.017228379259871054,.12402459410135006,.1524538089963059,.1627194606370896,.24817234249560427,.26053579199245763,-.04769125558408293,-.8145999303179203,-2.074066074419681,-3.154489159895426,-2.9212825837849565,-2.40774190894317,-1.6411629435379833,-1.576697627349694,-1.8007661961299257,-2.0001525985045707,-1.5107274159689619,-1.2839600483166405,-.631967111188135,.3107157406422172,-.21370915949408273,-.16393119308951343,-.0974817040158397,.13767875532837173,.23695911940697742,.3615877419673283,-.0006696253821662316,-.1026502520704758,-.18176695609293456,-.059120611570986824,-.13702193484548986,-.00735380131579763,.020281061259494877,.1503250145998206,.16876214929227357,.18780650312631536,.16308782299108887,.18583847563977354,.4490729609236465,-.020800703185301726,-1.4297091333258476,-2.4259185480628145,-2.4053777736536626,-1.982130703567588,-1.3372642957080885,-1.2989780551182537,-1.3731553217305845,-1.2269479805895975,-1.2032897772528626,-.22206046284030648,-.1841554828910981,-.23415549346578352,.07793632568988745,-.21633114300736572,-.05944972221175794,.013318329293146938,.2877543730088398,.21963323601338633,.16649953505637383,-.18974789333555656,-.1737958013223644,-.23416130311702454,-.13478379984035538,-.13112027137758978,.033522350558872455,.13259733500476653,.171380750952115,.15737574769334917,.09247716245660553,.13448891283084696,.4116145942481744,.35609170613712005,-.5531644985020381,-1.540851379466907,-1.8005308506197801,-1.5719273509294158,-.9404057795331605,-.8389941648002093,-.7733641692859126,-.6656241101650995,-.4002640865408188,-.3675097145491356,.2414435659750552,-.0656771881779108,-.21341675767851534,-.041369287190265204,-.08740484292179958,.04460147122538273,.19583406251777175,.1830038441344799,.012219595757112435,-.034593273427629516,-.14926486203867156,-.036665364495836496,-.1306231554860259,-.08638162405193898,.0020423415177502173,.11239290885891448,.12781279786870536,.10954302373131516,.14996801038078228,.12965098836907352,.14324588543961356,.0567484033157079,-.07934259271000402,-.7714589827483544,-1.1705860882999304,-1.0754357146023004,-.5463269466436349,-.37732231762995055,-.29185933229148303,-.18245346577017127,-.15252816280103537,.00992307413149221,-.05334501261419268,.10643359538216246,-.06963530217299803,-.20853401810086858,.03871878333386132,.024793140061197767,.2221501854940542,.1909069391112047,.13458393481660855,-.1226120784542075,-.06040684690366743,-.08306038338398455,-.0169256864349541,-.03335293819594764,.0564744224029561,.04873056181166667,.09209822163153716,.13542751998114597,.15540921558269635,.10094403852684107,.050489672984821425,.08984099886151299,.018445471788018183,-.4428032483123847,-.6455947552354269,-.6412340959287646,-.2557177936173176,-.15489773108593363,-.10375533557574061,-.07401894727409025,-.07402176527738832,-.034956034554291714,.06533170031918539,-.07929977184739372,.03572542409731947,-.10252861876832269,-.22107962950770202,.20755848067860572,.23157078159613848,.34013467279608883,.23914223921471078,.04359196404412921,-.20186945117744784,.04172561648658725,-.038784831650455286,.07624815101935192,-.060276976551200255,-.0031358189183758184,.13054366560393055,.16122088670834137,.12129220423951546,.06462405927184613,.06315363352353807,.0368689547736123,.025599835220982206,-.17872521900892777,-.3757789408279771,-.33418602947194676,-.19087946198724595,-.09243055938719592,-.15843188266072916,-.1178716916883143,-.07983285707762743,-.0384556097211695,.015668866487966955,.005265676601997658,-.12562510603385343,-.024970842739258457,-.030574039563531708,-.21969881405226874,.5919138706078211,.39965780946904006,.2262476397429311,.07714378169383113,.07854251680850119,-.0038697706067326258,.21858339549378,.08387013381984681,-.1914992924369444,.05367331518054547,.22201073984886688,.16922848807595664,.12511007660405662,.09511163485538424,.0841953956240581,.010195208908487656,-.01658912331368151,-.07692269919160621,-.17023093289451025,-.26998035777525775,-.28189859430096476,-.32749231042729776,-.240474927671948,-.27714150491609907,-.16857870511456344,-.056310601502134704,.026291702225850644,-.028508101274427284,-.06630706179098649,-.27187198211633473,.06621925794626239,.32825613521942065,-.2130375838630078,1.1917438602108388,.2807025357241521,.23447144426975483,.1651152909709915,.40113579910945835,.017152293761210982,-.1450564820739392,.13833755803781553,.2361453534315919,.16033553043559276,.17442784770871,.17988585089228476,.143828955260344,.07132752932041192,.016244981011210025,-.013577696292888701,-.024045478766089354,-.11184718959298219,-.1466657480521107,.008087681789972736,-.16842937423863127,-.4354348937994489,-.2997528685170986,-.22753898297998879,-.06903603291657966,.014977564920406507,-.02042087790603848,-.13524198281736244,-.1573938044754166,-.3340126093430992,.46815371603113554,.9302172976832263,-.26733338229185055,1.4166629302294091,.6066447960893963,.3603810860087503,.4605515924213614,-.32071019427276837,.15916183580862947,.5514216292911032,.20419289205444074,.051921880744650394,.24679565757292954,.2706202610478356,.15590400545853877,.08185944105119965,-.04098023110727716,.019596242113331462,.09436442791977376,.06527851980277598,-.029838116901178446,.15435464918439099,-.03938665594416125,-.07779640601620462,-.28158476919608044,-.03311012802272485,.018548614200940845,.06704610765103773,-.0442452017815352,-.1525534131110006,-.22929077462390082,-.08530271071238826,-.04930239368333223,.8574436846312782,1.8448220136861364,-.6874455683197501,1.810880881855317,.6623703970370957,-.31567909429421087,.8323221790747578,.9786336592299799,.30994126117364096,-.041163173314528664,.17633262873947353,.23161854928102976,.2508770436670255,.19868696729956423,.09356988769444988,.03236232444292232,-.002750766613633768,.21821986304703905,.37880734420129814,.40096920495374666,.9356115419306689,.6132603995532996,.1638528799494483,.1009541629695858,.05660159184623324,.15561323638878471,.07300029281297159,-.005544245314691569,-.13817032242271102,-.11770539535407684,-.09624545727844742,.4644289412509608,.45587938373772585,1.3432089992982477,2.5059762271849535,-.9382969763987489,.6492144586928863,.7978253203448007,1.3025551528258366,.9417497410073223,.0999214696597348,.2871278626692066,.1585368007924338,.130717335778855,.17042917695126153,.1998644332453962,.13725228360851915,.029723534135295476,.09814363533870286,.19047751491127032,.4933533797343521,.7808930441209985,.2968658742882804,.38131881367791126,.4064367365251492,.19053499830856688,.20033550195294633,.13287714582076576,.10533560171090586,.0008548789781538824,-.04943529640626747,-.08130941155497949,.05794771671040313,.48207744089263116,1.2538880645112733,1.2204758332556214,.8779386387662574,1.8796293205435075,-.45285576127696725,2.2308682152547137,1.2382711063757557,-.03520793699594507,.8817567227830668,.5591603196165794,.18718127547628777,.01176467325227445,.06874700659527258,.13522321325294812,.17151312046437606,.10315365060575944,-.0011239413451798732,.14993420590829387,.3895911022808224,.3884586226441047,.6971673018273219,.5180206439350141,.2883776700148891,.10583936790249669,.0710166156702107,.16001776032454934,.10715662619027419,.05618871675953212,-.03582584015504452,.006146991796811139,.08949387784356472,.68387295014826,1.1016519558168656,1.3182383587355595,.6663538204015352,.5486367363209722,4.054777023104894,.5486367363209715,.6663538204015342,1.3182383587355562,1.101651955816866,.6838729501482614,.08949387784356506,.006146991796810629,-.03582584015504452,.05618871675953043,.10715662619027334,.16001776032454856,.07101661567021002,.10583936790249539,.2883776700148883,.5180206439350135,.2968658742883096,.388458622644122,.38959110228084654,.14993420590831108,-.001123941345177488,.10315365060576374,.17151312046437922,.13522321325295103,.06874700659527355,.011764673252275867,.18718127547628682,.5591603196165779,.881756722783062,-.035207936995944634,1.2382711063757532,2.2308682152547106,-.45285576127696175,1.8796293205435037,.8779386387662579,1.2204758332556218,1.2538880645112747,.4820774408926327,.05794771671040518,-.08130941155497955,-.04943529640626837,.0008548789781495917,.10533560171090255,.132877145820761,.20033550195294705,.19053499830855697,.40643673652513423,.38131881367792647,.9356115419306881,.7808930441210271,.49335337973436416,.1904775149112758,.0981436353387047,.029723534135297252,.13725228360851988,.19986443324539666,.17042917695126267,.13071733577885625,.15853680079243432,.28712786266920415,.09992146965973223,.9417497410073171,1.3025551528258328,.7978253203448017,.6492144586928862,-.9382969763987445,2.505976227184955,1.3432089992982421,.45587938373772335,.46442894125096235,-.09624545727844717,-.11770539535407766,-.13817032242271216,-.005544245314694519,.07300029281296944,.1556132363887834,.05660159184623321,.10095416296958591,.16385287994945555,.613260399553306,.15435464918440814,.40096920495376004,.37880734420131523,.218219863047049,-.0027507666136306606,.03236232444292454,.09356988769444934,.19868696729956342,.2508770436670255,.2316185492810306,.17633262873947425,-.041163173314526666,.30994126117363635,.9786336592299767,.8323221790747578,-.3156790942942159,.662370397037097,1.810880881855315,-.6874455683197483,1.8448220136861369,.8574436846312773,-.0493023936833296,-.08530271071238829,-.2292907746239018,-.15255341311100187,-.04424520178153933,.0670461076510356,.018548614200940294,-.03311012802272051,-.2815847691960758,-.07779640601620005,-.039386655944146774,.008087681789976134,-.02983811690117316,.0652785198027806,.09436442791977824,.019596242113334855,-.04098023110727665,.08185944105119855,.15590400545853553,.2706202610478356,.24679565757292907,.05192188074465168,.20419289205443947,.5514216292910992,.15916183580862936,-.3207101942727711,.46055159242136157,.36038108600874996,.606644796089398,1.416662930229405,-.2673333822918505,.9302172976832263,.4681537160311345,-.3340126093430979,-.1573938044754171,-.13524198281736302,-.02042087790604074,.014977564920405115,-.06903603291657855,-.2275389829799863,-.29975286851709465,-.4354348937994427,-.16842937423862725,-.28189859430095965,-.1466657480521052,-.1118471895929717,-.024045478766081197,-.01357769629288397,.01624498101121273,.07132752932040962,.14382895526034015,.1798858508922834,.17442784770871067,.16033553043559218,.23614535343159299,.13833755803781575,-.14505648207394348,.01715229376121234,.40113579910946,.16511529097099317,.23447144426975502,.2807025357241538,1.1917438602108381,-.21303758386300692,.3282561352194251,.06621925794626213,-.2718719821163353,-.06630706179098739,-.028508101274429792,.026291702225849072,-.056310601502134,-.1685787051145608,-.27714150491609657,-.24047492767194564,-.3274923104272947,-.19087946198724157,-.2699803577752515,-.17023093289450597,-.07692269919160243,-.016589123313677224,.01019520890848913,.08419539562405712,.09511163485538146,.12511007660405613,.1692284880759545,.22201073984886613,.053673315180547035,-.19149929243694658,.08387013381984704,.21858339549377928,-.0038697706067313737,.0785425168085006,.07714378169383322,.2262476397429297,.3996578094690411,.5919138706078217,-.21969881405226852,-.0305740395635305,-.024970842739259945,-.1256251060338537,.005265676601996701,.015668866487966397,-.038455609721168606,-.07983285707762636,-.11787169168831266,-.15843188266072725,-.09243055938719412,-.25571779361731145,-.33418602947193976,-.3757789408279684,-.17872521900892277,.025599835220983438,.0368689547736149,.0631536335235363,.06462405927184454,.12129220423951372,.1612208867083402,.1305436656039314,-.003135818918377517,-.060276976551199596,.07624815101935135,-.03878483165045592,.04172561648658526,-.20186945117744698,.043591964044126186,.23914223921470992,.3401346727960877,.23157078159613964,.20755848067860685,-.22107962950770196,-.1025286187683216,.03572542409731814,-.07929977184739355,.06533170031918509,-.034956034554288036,-.07402176527738524,-.07401894727408691,-.10375533557573537,-.15489773108592672,-.5463269466436349,-.641234095928764,-.6455947552354269,-.44280324831238616,.018445471788017767,.08984099886151031,.05048967298482026,.10094403852683856,.15540921558269635,.13542751998114574,.09209822163153619,.04873056181166658,.056474422402955825,-.03335293819594981,-.01692568643495722,-.08306038338399054,-.06040684690366743,-.1226120784542102,.13458393481660744,.19090693911120402,.22215018549405383,.02479314006119874,.038718783333861403,-.20853401810086775,-.06963530217299803,.1064335953821621,-.05334501261419192,.00992307413149367,-.15252816280103507,-.1824534657701707,-.291859332291483,-.3773223176299495,-.9404057795331534,-1.0754357146022915,-1.1705860882999222,-.7714589827483473,-.07934259271000449,.05674840331570382,.14324588543960787,.12965098836906794,.14996801038078103,.10954302373131049,.12781279786870486,.11239290885891398,.002042341517751725,-.08638162405194173,-.13062315548602732,-.03666536449584196,-.149264862038672,-.03459327342763485,.012219595757109143,.18300384413447635,.1958340625177715,.0446014712253844,-.08740484292179726,-.04136928719026287,-.21341675767851565,-.0656771881779069,.24144356597505726,-.36750971454912684,-.40026408654081164,-.6656241101650917,-.7733641692859056,-.8389941648002021,-1.3372642957080858,-1.5719273509294132,-1.8005308506197781,-1.5408513794669076,-.5531644985020383,.3560917061371113,.4116145942481696,.1344889128308404,.09247716245660478,.1573757476933456,.17138075095211283,.1325973350047658,.03352235055887238,-.13112027137759125,-.13478379984035713,-.23416130311702804,-.1737958013223642,-.18974789333555622,.16649953505637016,.21963323601338522,.28775437300883855,.013318329293152468,-.05944972221175441,-.21633114300735917,.07793632568988698,-.2341554934657765,-.18415548289109335,-.2220604628402971,-1.203289777252857,-1.2269479805895944,-1.3731553217305832,-1.2989780551182524,-1.64116294353798,-1.9821307035675826,-2.4053777736536572,-2.4259185480628087,-1.4297091333258454,-.020800703185307738,.44907296092364196,.1858384756397643,.16308782299108818,.18780650312631128,.1687621492922723,.15032501459981898,.020281061259495404,-.007353801315796421,-.13702193484548603,-.059120611570979247,-.18176695609293375,-.10265025207047287,-.0006696253821684415,.3615877419673271,.2369591194069768,.13767875532837892,-.09748170401583293,-.1639311930895031,-.2137091594940832,.3107157406422304,-.6319671111881267,-1.283960048316625,-1.5107274159689543,-2.0001525985045667,-1.800766196129921,-1.5766976273496909,-1.557678973082544,-2.4077419089431698,-2.921282583784955,-3.1544891598954266,-2.074066074419682,-.8145999303179303,-.04769125558408684,.26053579199245114,.24817234249560396,.16271946063708537,.1524538089963024,.12402459410134949,-.017228379259870755,-.05958171313142866,-.15954900238017725,-.17203834043004781,-.03585192275390215,-.13566388733867182,.1852927254910774,.32789481378377766,.4650583247482103,.14493915164048596,-.06834493870606016,-.20692971953005135,-.13321306237600447,-.22642518078961474,-.16864865516591712,-1.9309474679838514,-2.6427456963680735,-2.0042907354579094,-2.067907968457093,-1.6478932560447959,-2.2937692343725686,-2.7282977589825266,-3.4150761242194196,-3.378285680998969,-2.222275911684919,-1.2352596784322352,.12380717441380877,.15120100371873849,.22205496825803597,.13376820638889372,.16581598470153905,.21189843131890046,.1205613668903118,-.11944152964360859,-.2844407665876833,-.3808970905088692,-.1254790861941803,-.12552132795948226,-.08736638276460633,.2312435028685467,.42806542968274885,.31289505893871633,-.016555865669298363,-.15232124758199445,-.18026213329416074,-.054197237250036744,-.9265077203256314,-1.6748432066634964,-1.966794162700286,-2.2073957813815404,-1.3988308931230464,-2.187217304579897,-1.7701160974209202,-2.3995834975192563,-3.1079150257531603,-2.2759627738397428,-1.9867837341406698,-1.1991385138433992,.25261423619714135,-.08688394903694385,.13841341497021575,-.013991851319408978,.15451076629740176,.20777584924549833,.37732986906226257,-.1983231816223982,-.06470132025005006,-.7580993906075129,-.005655209467068792,-1.0666730319382445,.5168021952817432,-.05986757947942188,.5770491101708914,.07361258580540825,.16986402710259826,-.27685168579682035,.23610433796619823,-.25969657852055217,-.3410580426032341,-2.3692424085383355,-.13683987631719494,-.6063122548783239,-3.0428213499062093,-1.4302518240108333,-1.0960340088024054,.33378719268138207,-1.462532482812221,-1.1311602269894572,-.42160647485916913,-.7728239811338516,.051358135035689895,-.12451483496808054,.07456060444801794,-.0714002635141984,.12710467168208478,.20183473326046905,.5358217017440833,-.3191891366103783,.028167647498415164,-.4937578405327754,-.671559610604369,-.7989672475729755,-.01561152443937639,.07414820559189893,.44602122877613765,.17221102955705844,.07085444983721219,-.07178740615442418,.04335079435503895,.23127204626685866,-.49437187443974595,-1.3068505835636535,-.5050532801402167,-.5516235280495194,-2.409570266538846,-1.9119199452512292],bottom:{real:[4046.4241509904555,28839.973879370627,10191.512031448321,4381.745580729326,2071.954841391502,1107.282586745483,528.3455155315031,308.973302997304,185.81061014820492,130.08108126519062,87.65365496956511,59.09553675383809,43.5062694558484,34.57522231168169,30.79809745290528,25.523061346781674,25.951646714603154,25.52306134678159,30.79809745290521,34.575222311681706,43.50626945584836,59.09553675383802,87.65365496956517,130.08108126519082,185.81061014820492,308.9733029973038,528.3455155315033,1107.2825867454833,2071.954841391503,4381.745580729332,10191.512031448323,28839.973879370646,13493.224333003216,16392.51995145616,4871.835388507577,1571.3337493887716,567.6409664515353,373.6703632325283,244.24660034041102,142.79597933554817,106.13580676907658,75.85834762271053,58.06132256419008,39.85453847302155,30.569538051408923,25.094853941398878,22.929757321982656,20.808198660555963,22.04888812794956,23.622937534136554,29.13868315116802,38.08298107447914,54.39934218587819,77.82662149201184,121.61239162949131,177.63416429867098,254.30481783551838,430.47940336338183,664.6352580903059,1219.8477670929726,1935.5749815900854,3358.0980991141623,6069.217591691605,8660.703929170162,15384.540019848313,11175.737303494303,2216.879483433469,674.5985908630485,308.5763093759745,222.13525013253278,144.62539946693838,89.35178904734964,66.20028378403181,53.5880480094322,38.10483512466045,27.11271894406526,23.0333116325101,19.85886354561889,19.408029208714364,19.38215160767772,20.87171121755368,24.726583224259915,29.429525390428484,39.688247321389746,54.02667736866649,71.50918951653236,109.7023701375058,145.30501493896827,183.8476594317636,237.38092500065588,353.51632607639505,531.2703272946572,719.1706536370991,1367.9024800373177,2857.732229334478,8625.014975132006,3926.861100346452,2444.3527388912776,1028.8359899085383,585.5616655429562,332.57137935864864,180.13762334769046,105.17011934648103,61.496465220623485,45.504823244138095,37.90846017249317,30.846794326525625,21.222093075405745,18.718288087401802,17.679602313216872,17.409839934721365,17.794391783727544,18.55926931620083,21.34840958130715,24.39997962145603,30.767061622228063,38.103008129659166,44.81251118779231,61.577721983396955,87.29148588450872,106.99539363556599,134.18057082099898,169.37440787587974,269.99443977661724,364.5624879914471,674.5083954608231,1521.022929703357,2634.7343778883865,2024.849011267275,1926.8239401023498,1491.9478410044117,611.8362791883309,316.43682665588744,155.99683828976544,89.67337986475002,50.013293885425135,37.52800970717606,32.4518569290627,24.96614670350918,19.130394004010906,15.343856356149828,14.843145659919786,14.861292517540363,15.036681247518919,15.312687438440403,17.138709070816013,19.446116741695533,22.850207518010233,27.457440287528367,32.58150530830809,40.985078317877736,54.412823137373685,75.7624376442659,94.73305934658734,128.1467358253355,182.29010502256293,275.9549807303486,527.3269557849401,1132.5867520786235,1866.4077869841046,2266.7457843108455,2107.849516989544,1234.6592459623437,673.7095428348114,266.6693703142779,139.47307538222793,66.73073111331448,41.917980917088734,31.2590211502941,26.786032891522527,20.35627716260823,16.038244917569745,14.499148814332527,13.459360575928033,13.144389071570192,12.567429683418663,12.230328765246885,13.466217665828195,15.328301760046475,17.144679989146308,19.68756841312236,24.07413404470534,32.72703461228699,43.026808431859955,59.19377390623037,78.82051256303095,92.99417854470647,120.42091176843755,201.9182636225097,436.44287859172925,877.8862778005057,1439.6385876846614,1649.991139346905,1699.4038415062987,1039.2560892520887,495.5166152968933,235.81544665938515,113.58561083280532,60.921551746622946,35.725757089786256,25.024628727892466,22.490208420088727,17.75982379192019,13.543616943986416,12.938917306264663,11.956364952724385,11.421939705679733,11.372903592178258,11.032765269291394,11.408229662647633,12.481114469594095,13.60275540468532,14.91952183557448,17.807798659576154,23.277252196336814,31.950664619854233,47.416694920263616,56.268912844615144,64.959626427587,85.07080953900385,130.82046704446515,257.6757193526242,627.4672126329166,1194.1693767483914,1080.1900960853154,902.674413704009,600.0405579473822,333.23520458042,166.5653831933532,88.94630554757107,50.71739323274513,31.897215329939996,23.060146944216118,18.57978056254417,15.572760511446054,13.273777678692191,12.224913053368416,11.68638594982613,10.392044527527784,10.422646713468026,10.113778554702394,10.225072497047023,10.776357928238541,11.471833692521193,12.585855785544721,15.131216045563061,18.856673404562432,24.858220592568422,32.65728080220338,43.03798769624031,51.536289299313914,59.08796022590117,89.41884663641925,168.4478105078281,382.14409608709747,745.2779764237599,544.9352379585605,546.6325594355021,362.69938393816085,222.4530875664997,124.7835476428534,69.15551045543614,41.705006957506896,26.952419331651356,19.77855541151112,17.743475715717917,14.471795156401063,12.765457059373892,11.899864411981882,10.85818004844373,10.325708895539952,9.569271974525638,9.211348082086339,9.068032997029013,9.773443256037565,10.488284402310196,11.32319714067481,13.23504887223821,16.674941080314653,20.771526297093455,27.56941781857049,33.10306848160457,37.13160941522371,47.9647604307364,66.57881750760357,119.94841754808802,237.18123750436465,409.50889944188236,307.01018353832677,288.6676029163843,236.16368190120858,154.32114106589464,92.30377324569548,55.468009578938926,35.843010431224045,24.692475316947775,18.31794202383119,15.815283825259236,13.970653175227845,12.321358605090134,11.166914874614415,10.532076178141539,9.973858270077274,9.439553232293433,8.852477993151703,8.596032516390286,8.723315099425728,9.460546505870271,10.702831587760128,11.695932356823622,14.406509159208545,18.893042693096525,25.031728162044864,28.237283751764654,32.11015444012318,38.78178298956029,56.41249717617234,92.1569459348398,157.10935603874077,244.2492508143064,218.20881258539546,216.90433976724358,169.13695858014356,112.62100758585845,68.70530790516959,45.982361360241526,32.725373555898344,22.221572369125827,17.135020014783734,14.281960328360523,12.699315839076576,11.637118060780567,11.004832210877884,10.393382355075936,9.625960216653379,8.765201384599987,8.56501202823621,8.585447651774187,8.185151868753188,9.127087262857684,9.83839770401408,11.693775785132257,13.287947209975439,16.544820171465705,21.672488061489553,27.762087103200397,29.796933806391767,35.44318849026896,51.826480475596476,76.69213661877438,114.45554660359461,172.81330831382385,150.57608076172548,151.07347077509746,119.80060075739978,84.30708089677061,55.59442395215062,38.954469932130465,27.855857296119165,21.147383956632677,16.095362427853317,14.114901096214023,12.272097096384341,11.279235865220194,10.45557624282722,10.21340372397941,9.435254000412767,9.059591562681522,8.428576772270588,8.218967691673965,8.248320783896837,8.727213385180734,9.38534177467142,10.436988631508529,11.737372360714012,14.160123000210135,18.9595792421897,24.173697545434358,27.627516713161423,33.591531685669004,45.29743998493664,65.89753949730466,88.61094452128638,122.51594786973793,102.9717174324289,99.77114417163114,80.2546364501959,61.009511746666256,44.78691291380718,34.27102450032318,25.65851527359349,19.184194785168692,15.369946764821139,13.384363033613122,12.174478369218367,10.905903566261369,10.181651684644681,9.640875595253302,9.574230453297359,8.97633087224121,8.549303268806982,8.064448476431524,8.427686598834292,8.72909633979811,9.121092688430965,10.045472592156113,11.11042960636143,12.723025686618605,15.905816263070196,20.70949104573221,24.791931496783274,30.865414152401307,41.83571418562319,55.039237230593706,69.94725096238655,86.30565695416685,70.24607741665449,70.16319096773124,60.94158545735483,46.98868155158853,37.426824229947464,31.10511465478153,24.71795750943227,18.191253220796238,14.40571246916225,12.794837539520243,11.45286867499644,10.555233980671725,10.138595490186225,9.761793932644013,9.29451140670217,9.19785195708974,8.526970468266507,8.369498694773359,8.390085060120985,8.901978011001628,9.499322405169718,10.189344774081897,11.038776504531349,12.139382952337165,14.296273465828305,18.325479810549485,23.245126565071455,28.658675517780157,38.227879918404916,50.026933715114076,59.913478880080035,67.14288472835021,60.67320096274469,56.006191670589025,48.95238380733793,41.87728990082497,35.56375265114289,29.381802508508265,23.323351055229473,18.385352146785323,14.386074460433269,11.971768024825069,10.813949701229296,10.104265892334448,9.787383736052597,9.787645018242003,9.37365706088819,9.106783751430337,8.878274256847538,8.410860465515668,8.514529191196903,9.144463863378933,9.590368756917496,10.050972673200409,10.599176866339214,12.029252308933458,13.885440808202775,16.9338405396521,20.94976745380013,27.39267044577291,35.24694581160402,44.844494652773115,53.52792012053346,59.51190645761453,53.048047546158344,49.66790259120493,45.161821768091436,39.040569237963304,34.15349837076654,28.812200326236947,21.915204963295363,16.82529154292102,14.19448100676546,11.707465544074312,10.438485210613589,9.815124564873926,9.283134914271356,9.082142057825001,9.047050535951438,9.09240899822194,8.846694431391352,8.473593906264338,8.498070251525021,9.011344572210785,9.28987103872928,9.957567886683233,10.426127211956205,11.223822839806607,13.77325124182781,16.688691177663944,20.746301629724744,26.320191080313084,33.9798684365786,42.0788988747152,48.313306819757166,52.481937610238305,49.070609767594966,49.766679020971374,46.54427285231858,40.229040805773415,32.55983963778149,26.180018982316895,21.083604085221012,16.97356072267355,13.301411970448795,11.264067238060504,10.255581922596939,9.653621368211203,9.215377406296422,8.746811076118282,8.435654271837505,8.73238467436222,8.845859907838124,8.73238467436222,8.435654271837503,8.74681107611829,9.215377406296428,9.653621368211212,10.255581922596944,11.264067238060512,13.301411970448795,16.973560722673543,21.08360408522101,26.18001898231688,32.559839637781494,40.22904080577338,46.54427285231857,49.76667902097133,53.048047546158344,52.4819376102382,48.31330681975705,42.0788988747152,33.97986843657858,26.320191080313087,20.746301629724748,16.68869117766396,13.773251241827822,11.22382283980661,10.426127211956201,9.957567886683226,9.289871038729279,9.011344572210792,8.498070251525027,8.473593906264336,8.84669443139135,9.092408998221947,9.04705053595144,9.082142057825006,9.283134914271354,9.815124564873928,10.438485210613582,11.707465544074319,14.19448100676546,16.825291542921,21.915204963295366,28.81220032623694,34.15349837076655,39.04056923796328,45.16182176809137,49.667902591205,60.67320096274468,59.51190645761457,53.5279201205334,44.84449465277307,35.24694581160401,27.392670445772925,20.949767453800135,16.933840539652095,13.88544080820277,12.029252308933453,10.599176866339214,10.0509726732004,9.590368756917488,9.144463863378933,8.51452919119691,8.410860465515672,8.878274256847535,9.106783751430338,9.373657060888185,9.787645018242001,9.787383736052602,10.10426589233446,10.813949701229305,11.971768024825074,14.386074460433273,18.385352146785333,23.323351055229466,29.38180250850825,35.56375265114288,41.87728990082496,48.952383807337874,56.00619167058891,70.24607741665429,67.14288472835011,59.913478880079964,50.02693371511406,38.22787991840492,28.65867551778019,23.24512656507147,18.325479810549478,14.296273465828305,12.139382952337156,11.038776504531354,10.189344774081897,9.499322405169723,8.901978011001633,8.390085060120985,8.369498694773357,8.526970468266507,9.197851957089739,9.294511406702163,9.761793932644014,10.138595490186225,10.555233980671725,11.452868674996441,12.794837539520238,14.405712469162248,18.19125322079625,24.717957509432264,31.105114654781534,37.42682422994745,46.98868155158849,60.941585457354776,70.16319096773115,102.97171743242879,86.3056569541668,69.94725096238649,55.039237230593784,41.83571418562317,30.865414152401325,24.791931496783278,20.709491045732214,15.905816263070196,12.723025686618604,11.110429606361421,10.045472592156107,9.121092688430974,8.729096339798112,8.427686598834294,8.064448476431526,8.549303268806982,8.976330872241213,9.574230453297362,9.640875595253306,10.181651684644681,10.905903566261369,12.174478369218367,13.384363033613125,15.369946764821144,19.18419478516869,25.658515273593498,34.27102450032314,44.78691291380715,61.00951174666618,80.25463645019579,99.77114417163101,150.57608076172505,122.51594786973776,88.61094452128623,65.89753949730463,45.297439984936574,33.591531685669025,27.627516713161402,24.173697545434354,18.9595792421897,14.160123000210131,11.737372360714007,10.436988631508525,9.385341774671417,8.727213385180733,8.248320783896826,8.218967691673969,8.42857677227059,9.05959156268152,9.435254000412765,10.213403723979411,10.455576242827226,11.27923586522019,12.272097096384336,14.114901096214016,16.09536242785333,21.1473839566327,27.85585729611916,38.95446993213041,55.594423952150585,84.30708089677043,119.80060075739968,151.0734707750972,218.20881258539524,172.81330831382382,114.45554660359451,76.69213661877443,51.82648047559643,35.44318849026896,29.796933806391745,27.762087103200372,21.67248806148955,16.544820171465698,13.287947209975444,11.693775785132251,9.838397704014087,9.127087262857684,8.18515186875319,8.58544765177418,8.565012028236207,8.765201384599994,9.625960216653379,10.393382355075921,11.004832210877884,11.637118060780562,12.699315839076572,14.281960328360505,17.13502001478374,22.221572369125806,32.72537355589832,45.98236136024148,68.70530790516956,112.62100758585837,169.13695858014344,216.90433976724287,307.01018353832563,244.24925081430612,157.1093560387404,92.15694593483975,56.412497176172316,38.7817829895603,32.11015444012317,28.237283751764654,25.031728162044857,18.893042693096504,14.406509159208543,11.695932356823613,10.702831587760132,9.460546505870267,8.72331509942572,8.596032516390284,8.852477993151705,9.439553232293427,9.973858270077281,10.53207617814155,11.166914874614413,12.321358605090143,13.970653175227838,15.815283825259229,18.317942023831186,24.692475316947778,35.84301043122402,55.46800957893881,92.30377324569537,154.32114106589427,236.1636819012079,288.66760291638354,544.9352379585605,409.5088994418828,237.18123750436465,119.9484175480882,66.57881750760357,47.964760430736455,37.13160941522369,33.10306848160456,27.56941781857049,20.771526297093434,16.674941080314646,13.235048872238199,11.323197140674804,10.488284402310184,9.773443256037565,9.068032997029011,9.211348082086339,9.569271974525646,10.325708895539957,10.85818004844373,11.899864411981884,12.765457059373892,14.471795156401072,17.743475715717903,19.77855541151112,26.952419331651342,41.70500695750688,69.15551045543599,124.7835476428534,222.45308756649936,362.6993839381608,546.6325594355021,1080.190096085312,745.2779764237579,382.1440960870959,168.44781050782805,89.41884663641922,59.087960225901135,51.53628929931389,43.03798769624031,32.657280802203374,24.858220592568383,18.8566734045624,15.131216045563052,12.585855785544725,11.471833692521184,10.776357928238532,10.22507249704702,10.113778554702403,10.422646713468026,10.39204452752778,11.686385949826136,12.224913053368411,13.273777678692191,15.572760511446033,18.57978056254414,23.06014694421612,31.897215329939918,50.717393232745025,88.94630554757079,166.56538319335294,333.23520458041884,600.0405579473809,902.6744137040065,1649.9911393469013,1194.1693767483896,627.4672126329157,257.67571935262464,130.82046704446515,85.0708095390039,64.95962642758694,56.2689128446152,47.416694920263595,31.950664619854226,23.277252196336782,17.807798659576147,14.919521835574468,13.60275540468532,12.48111446959408,11.408229662647638,11.032765269291394,11.37290359217827,11.42193970567975,11.956364952724407,12.938917306264656,13.543616943986398,17.75982379192014,22.490208420088635,25.024628727892473,35.72575708978623,60.92155174662291,113.58561083280503,235.81544665938503,495.516615296892,1039.2560892520876,1699.403841506296,2266.7457843108423,1439.6385876846614,877.8862778005042,436.4428785917297,201.91826362250967,120.42091176843758,92.99417854470644,78.82051256303102,59.19377390623031,43.02680843185989,32.72703461228695,24.074134044705318,19.68756841312234,17.1446799891463,15.32830176004647,13.466217665828177,12.230328765246888,12.567429683418707,13.144389071570203,13.459360575928054,14.499148814332536,16.03824491756973,20.356277162608194,26.786032891522385,31.259021150294068,41.91798091708869,66.7307311133144,139.47307538222745,266.6693703142776,673.7095428348102,1234.659245962343,2107.8495169895405,2024.849011267276,1866.4077869841062,1132.5867520786235,527.3269557849405,275.9549807303485,182.29010502256293,128.14673582533564,94.7330593465875,75.76243764426589,54.41282313737368,40.98507831787773,32.58150530830807,27.457440287528364,22.85020751801021,19.446116741695526,17.13870907081601,15.312687438440404,15.036681247518965,14.861292517540395,14.843145659919811,15.343856356149836,19.130394004010878,24.966146703509185,32.45185692906261,37.528009707176075,50.013293885425036,89.67337986474986,155.9968382897651,316.4368266558874,611.8362791883301,1491.9478410044112,1926.8239401023493,3926.8611003464503,2634.734377888386,1521.0229297033557,674.508395460824,364.56248799144686,269.9944397766174,169.37440787587963,134.18057082099915,106.99539363556599,87.2914858845087,61.577721983396906,44.81251118779232,38.103008129659166,30.767061622228066,24.399979621456033,21.348409581307155,18.55926931620083,17.794391783727576,17.409839934721397,17.67960231321689,18.71828808740179,21.222093075405763,30.846794326525586,37.90846017249308,45.504823244138095,61.496465220623335,105.17011934648093,180.13762334768973,332.5713793586485,585.5616655429553,1028.835989908537,2444.352738891274,15384.54001984831,8625.01497513201,2857.732229334476,1367.90248003732,719.1706536370989,531.2703272946578,353.516326076395,237.38092500065625,183.84765943176362,145.3050149389683,109.70237013750581,71.50918951653222,54.02667736866647,39.68824732138969,29.429525390428473,24.726583224260004,20.871711217553678,19.38215160767773,19.408029208714364,19.85886354561895,23.033311632510113,27.11271894406525,38.10483512466044,53.58804800943198,66.20028378403181,89.35178904734937,144.6253994669383,222.13525013253218,308.5763093759745,674.5985908630483,2216.8794834334685,11175.737303494294,13493.224333003214,8660.703929170164,6069.217591691604,3358.098099114159,1935.5749815900851,1219.8477670929722,664.635258090306,430.47940336338263,254.30481783551838,177.63416429867087,121.61239162949126,77.82662149201184,54.399342185878204,38.082981074479164,29.138683151168006,23.622937534136597,22.04888812794956,20.80819866055599,22.92975732198266,25.094853941398917,30.56953805140891,39.85453847302151,58.06132256419004,75.85834762271038,106.13580676907651,142.795979335548,244.246600340411,373.6703632325282,567.6409664515357,1571.3337493887695,4871.835388507573,16392.519951456165],imag:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},imag:[0,-1.343901621327011,1.721833324939457,1.3937858919791224,-.904784867734521,.9956083728012485,.13374486301187097,.7978179059888694,.08123543012206277,.47338465820086184,-.07853466443921621,.2950011933196759,-.6247916276373429,.2951717097474046,-1.8712573358384692,.14096520515743682,0,-.14096520515741828,1.8712573358384816,-.2951717097473781,.6247916276373373,-.29500119331966146,.07853466443922305,-.4733846582008596,-.08123543012206277,-.79781790598886,-.1337448630118737,-.9956083728012485,.9047848677345208,-1.3937858919791226,-1.7218333249394557,1.3439016213270112,1.5871307700950068,.5637011092588632,1.2603198064423482,2.9317402483699255,-.8409084656280159,.2839544102155089,1.0393523450590114,.8310491123379952,.5733425968094368,.30043904784975134,.29266755430531527,.08293010406402415,-.3650283542031338,-.7621355462343821,-.5431683864795783,-.6602817924610193,.20250391456576916,-.059393044635645806,.9730252602081445,-.01782962412134724,.18933865423621773,.011846708470834844,.014269719747672759,-.16281560265463554,-.24410560657714067,-.34963232308526365,-.32234943120999277,-.6691127915152365,.14162995430492473,-.9690987495763558,-1.0446282489208472,1.3612809629252947,.7046490796090316,1.644656498115789,1.457626495523533,-.6840361527612806,-.681474708971962,.7311857387294264,1.2398159392319572,1.2736175855463174,.6555066385893611,.4589733287486102,.2494812924962717,.2295941880121868,-.6735544911252082,-.7891737944140509,-.833663158873984,-.02279594414115591,.157531969600533,.5083619532158246,.16292155588892338,.14047533322536612,-.029004083819245446,.042892010327960466,-.0847803286744503,-.1321705591443332,-.30971168558439593,-.44061350110378666,-.593809888932934,-.4671902772630274,-1.2068396187631398,-.9496940875254227,.2896061689589903,-.40038203546320883,.5562024927443893,.14065731983379595,1.390858139437829,-.6783334205276503,-2.0926714021100303,1.5120873610545131,1.7251253398279642,1.0499886203647506,.6413261932720733,.43315407205712014,.32584150801434064,.17968537990933128,-.27887473465086693,-.7264668532809715,-.9520027428255372,-.38747270801185796,.31172559850957127,.3167238274644899,.25925756638025876,.20404659434537992,.19201780058118942,.0025274006864131854,-.20254250312507205,-.301466819890184,-.45156398868756126,-.7158395939816518,-.7863634374888125,-1.3089140888320636,.4139391942136343,-.9230837800112506,-.9608676869506684,.994894967509791,-.39381772120025876,-.5926473858270555,-1.1161873115341066,-.38954314931717815,.15776662530084892,.39428020304678685,1.7089894615168126,.9286849101064603,.350973234838865,.3212528804707568,.23669588269358602,.19592809956108717,-.3264696987509312,-.5617213523679232,-.7659613758273989,-.4848448097808058,.0035984972735877987,.36234031342999445,.02584515038201295,.3813234596441356,.2917223569671276,.10460468586389386,-.14942504329756173,-.2340648419056832,-.5970258341713899,-.6479171630934003,-1.1972380302487249,-.37081056871520385,.31028937719203986,-.11181138224479611,.05022415004119631,-.5924281903599851,-.4703174557375312,-.5556706599080107,-.18073895078348806,-.07286620180284567,.9080135456055427,1.3448759333642528,.5639174664677074,.6882456370936582,.270544474915452,.1855550606492347,.21628766080629094,.08922769637111864,-.1330464412169812,-.5104407538921645,-.5748295632952253,-.499928421733889,-.008888226974178647,-.026119953804469152,.16649307508904443,.18021017930701566,.24129551707937363,.05141476622049072,-.05440923791370335,-.21354052285348152,-.34065461819243753,-.8321595295545801,-.6545515144341882,-.5171174887453374,-.34193161983249143,.2599196779142151,-.3192283896931117,-.2509623323107447,-.019538834540300996,.23386297177233037,.39736821511961345,.7260382384711854,.8168297825020705,1.0763583447726135,.806113881274012,-.023349196100613815,.09911450222934183,.11136104528246665,.11912886110102348,.1510441091194204,-.10294245821664937,-.34339582552474845,-.46071517851602106,-.2745498847774613,-.021291149638310566,.03581857177521538,.08165077597052256,.19593247304969552,.16021249355536668,.07341110181145782,-.09441366146062889,-.14774431296435828,-.3788677957633147,-.38953231590523063,-.6289222156301494,-.8021965599423332,.19764870263775744,-.2862016389005325,.04173881161878554,-.04750283167130345,.42759360787810174,.4435334033074589,.612327609854575,.7020782016690547,.7219260366639536,.6392879141687147,.3258926130651039,.17268517789923485,-.1183225223006091,.04939158090533926,.12347320818582375,.06469798143401673,-.006710209168704759,-.2737081974258909,-.26939466873920287,-.25176222060999,.00813102285298534,.013089808045657288,.185105158015618,.11713478908555769,.20974664985683705,.04874577836816892,-.006935953460316863,-.18083894269546222,-.1590773470203919,-.3049032697254573,-.4952504311071168,-.2063397715454307,-.28929558460304977,.01725566086804829,.08925055891284024,.3434977458343078,.3827720504358852,.5677210207032581,.4881147517750161,.43659704639067964,.38858095560717315,.35469216713625445,.11095078972724678,-.05035409898656247,.010426074631633324,-.023032548262322892,.0685580235114857,.1199625535177883,-.004434755204994449,-.14323623171577524,-.2742488887234425,-.15059247824174998,-.18695930341705305,.06813688020408373,.04916201156820307,.16362595169702937,.07832572097557808,.11153460033842358,-.10346450949096449,-.03925026108281402,-.12027128091306288,-.23113762225192683,-.07885965728132803,-.2598298090974699,-.112193082069427,-.19372413199270677,.1843821378255476,.22544536191476028,.22838873802709003,.11856768480607156,.2001101062269439,.16443500436191505,.1344103610721337,.1560099579732318,.02998498079292612,-.01795042558889614,-.095997178609832,.04581555915567668,.05060040141112804,.0625550701522621,.09536267957415628,-.2588472108186818,-.19352665675464722,-.35758313393883445,.05724199410125697,-.07448979769121256,.15760636776309309,.07711029442456042,.21793581355625327,-.0853841567280578,.0542780951185194,-.06351351655225722,-.13925876777247995,-.05309048214962413,-.08855066431481835,.09705317802047587,.021982682491266895,-.0320570437725536,.011606155190390474,.20297398899260674,.08713770793778194,.14235450986309658,-.006634429052264465,.06944355111332648,.037974760198136455,.02723212012252952,-.030406089689394462,-.06289143982632239,-.033462702565164315,-.13091343010011852,.18662643567548856,.14580799486104234,-.055902479292620696,-.12813917376287484,-.4370654490609753,-.09792671156559801,-.17130544619864244,.30727693305691806,-.2953735036217468,.2205640575182558,-.16529753202987246,.3404745588343642,-.0020829156573361745,-.1477566402016345,-.07451855199653255,-.1485032050753669,-.057283952975165524,.06466541846880637,.23511892751228192,.11870789775778592,.0625549454189092,-.03129802431166904,.0064402102662661845,-.07908206366482008,.0553675188881671,.025089334126077875,.06380009174949475,.01598882409357055,-.0485453569421806,-.11558972094679192,-.09748734332934658,-.0004949292816682794,-.18157168721539482,.3394228896917068,.3052238631985539,-.5463958953710175,.013830571830100688,-.38850732372171304,.223075916963486,-.31865288748874443,.25745374979707547,-.8188534714960727,.5085516891060978,.20195166784419227,-.06978574367189032,.05088417995496527,-.18377202523753672,-.17303565260659334,-.15924096907201105,.0921469322051947,.26379835890783954,.35934781180257075,.24329566614587647,.18564601960109514,.24223475523068938,.2896764687039265,.15967526911861643,.2236525476678126,.12185893624650075,.07010515076512246,-.045495054958742086,-.13016925945874308,-.12331107551299306,-.09658598904032947,.22919036999990153,-.39865574246315477,.3675558227752026,.4559731496763589,-.9322732995444801,.3211078437592451,-.5916002406790702,.39469180639349893,-1.5810043928614619,.7192616842627553,-.09592034339847655,-.08487714593751221,.4039957386289845,-.04174339774265379,-.1030386108486746,-.21220001866353477,-.17318676777643013,.015792824133968684,.3799471493407144,.4573031649737595,.4849146321923636,.278045596991639,.330997517931827,.07346181941874468,.3044571730020384,.3481533243335257,.27336662525128713,.05011351109495184,-.05940584463270739,-.1626114347474223,-.10891422081227681,-.07507029717115797,.15348950297637756,.6313299455118446,-.9360445989877769,.4232569705540574,1.1782712312395338,-1.6700526640562563,.6730754801286777,-2.036587646020969,.696651869739933,-.3990336398782886,-.7775110416888031,.5628167675812451,.04446899108365955,.08127813274590998,-.07099339435842372,-.09185286036621106,-.10956166698887557,.07294149309473505,.3516732889665791,.6348806757989582,.5619968460520506,.6062770727450226,-.01897019762481933,.37668655809680845,.2231700372991837,.17596357423928666,.182021098919622,.038230887694388455,-.10475039750351335,-.1512317199312191,-.11278544639649389,.05411089572076022,.23852479976301316,.30802887330694756,.9587111952302938,-1.4503952980081434,-.06145839150349969,2.138997807668353,-3.5142346308062073,1.6764175122847729,-.6325266075787294,-1.1970497991660358,.46027494328631885,-.38868529039399474,.06306613375883041,.08502403448097447,.047630852690686495,-.022775175196356016,.011847923870825085,.13095780969018636,.39870906011464996,.5410013327184018,.6285964225750199,.12859489098386362,-.17371304193339687,-.7713566279215256,-.3569696489220254,-.15350152251372465,-.08110842702990148,-.12890403553126065,-.14048874638904316,-.18368108831833277,-.13143015225876853,.03731818798640201,.398153506664189,.446850695599386,.29854169122462937,1.0193515924216456,-2.1696976832709978,-1.5476694374721527,4.111501359710062,-1.6066056279080296,-1.1129988398741206,.9464135190271308,-.6646448718237143,-.22405122030787003,-.1684513504650424,.10281428632219461,.12776142939872864,.10903691838775739,.0974771489483065,.19622512970077355,.3758189010900003,.5815217498439217,.575882448967759,.5683582142796539,0,-.07566059104010174,-.5319087481065502,-.4906650633876551,-.2538852177443554,-.17759782612549996,-.17342105765811164,-.1717237906748887,-.17163733194043357,-.009691726103346027,.23320936684713756,.6154416324788491,.2303178322389413,.4504667163321609,-.2542218615438303,-1.2338903723029762,0,1.233890372302968,.2542218615438289,-.45046671633216256,-.23031783223894184,-.61544163247885,-.2332093668471385,.009691726103345007,.17163733194043357,.17172379067488885,.17342105765811225,.17759782612550043,.25388521774435546,.4906650633876564,.5319087481065498,.07566059104010284,.17371304193345374,-.5683582142795844,-.5758824489677223,-.5815217498439111,-.37581890108999716,-.1962251297007692,-.09747714894830553,-.1090369183877569,-.12776142939873006,-.10281428632219579,.1684513504650413,.22405122030786861,.6646448718237126,-.9464135190271386,1.112998839874119,1.6066056279080259,-4.111501359710058,1.5476694374721462,2.169697683270998,-1.0193515924216472,-.2985416912246324,-.44685069559938834,-.39815350666419097,-.03731818798640415,.13143015225876697,.18368108831833294,.14048874638904385,.12890403553126736,.0811084270299098,.15350152251374438,.3569696489220662,.7713566279215556,.018970197624865574,-.1285948909838308,-.6285964225750031,-.5410013327183986,-.39870906011464824,-.13095780969018578,-.011847923870824886,.02277517519635736,-.04763085269068705,-.08502403448097469,-.06306613375883256,.38868529039399197,-.4602749432863225,1.1970497991660347,.6325266075787281,-1.6764175122847713,3.5142346308062082,-2.138997807668362,.06145839150349631,1.4503952980081398,-.9587111952302971,-.30802887330694667,-.2385247997630148,-.0541108957207615,.11278544639649313,.15123171993121864,.1047503975035141,-.03823088769438403,-.18202109891961496,-.1759635742392747,-.2231700372991606,-.3766865580967669,-.33099751793180054,-.6062770727449965,-.5619968460520336,-.6348806757989502,-.35167328896657507,-.07294149309473368,.1095616669888755,.0918528603662118,.07099339435842339,-.08127813274590924,-.044468991083660724,-.5628167675812489,.7775110416888034,.3990336398782871,-.6966518697399285,2.0365876460209633,-.6730754801286755,1.6700526640562572,-1.17827123123954,-.42325697055405653,.9360445989877786,-.6313299455118465,-.15348950297637845,.0750702971711561,.10891422081227575,.16261143474742193,.05940584463270852,-.05011351109494761,-.2733666252512826,-.3481533243335174,-.3044571730020204,-.07346181941872514,-.24223475523068566,-.278045596991634,-.48491463219235625,-.45730316497375445,-.37994714934071183,-.015792824133968708,.17318676777642958,.21220001866353638,.10303861084867472,.04174339774265514,-.40399573862898636,.08487714593751182,.0959203433984764,-.719261684262751,1.5810043928614652,-.3946918063934955,.59160024067907,-.32110784375924395,.932273299544479,-.4559731496763611,-.3675558227752009,.39865574246315755,-.22919036999990147,.09658598904032888,.12331107551299252,.1301692594587433,.045495054958742745,-.07010515076512172,-.12185893624649984,-.223652547667811,-.15967526911861513,-.28967646870392255,-.006440210266261173,-.18564601960108706,-.2432956661458719,-.3593478118025666,-.2637983589078372,-.0921469322051936,.15924096907201093,.17303565260659445,.18377202523753683,-.05088417995496395,.06978574367189057,-.20195166784419286,-.5085516891060973,.8188534714960719,-.25745374979707175,.3186528874887527,-.22307591696348483,.3885073237217165,-.013830571830101068,.546395895371022,-.305223863198555,-.3394228896917048,.18157168721539607,.0004949292816654663,.09748734332934587,.11558972094679136,.04854535694218131,-.015988824093569717,-.06380009174949508,-.025089334126078205,-.055367518888164394,.07908206366482075,-.08713770793777711,.03129802431166981,-.06255494541890674,-.1187078977577844,-.23511892751228033,-.06466541846880579,.05728395297516605,.14850320507536743,.07451855199653275,.14775664020163706,.0020829156573371555,-.34047455883436323,.16529753202987046,-.22056405751825445,.29537350362174863,-.30727693305691484,.17130544619864224,.0979267115656023,.4370654490609771,.12813917376287753,.055902479292622584,-.14580799486104357,-.18662643567548898,.13091343010011883,.03346270256516358,.06289143982632284,.03040608968939467,-.02723212012252924,-.03797476019813689,-.06944355111332663,.006634429052265361,-.14235450986309153,-.22838873802708684,-.2029739889926063,-.011606155190393872,.032057043772551565,-.021982682491265355,-.09705317802047468,.08855066431481819,.05309048214962463,.13925876777248047,.06351351655226015,-.054278095118517826,.08538415672805795,-.21793581355625447,-.07711029442455894,-.1576063677630919,.07448979769121587,-.057241994101257694,.3575831339388394,.1935266567546499,.25884721081868634,-.09536267957415476,-.06255507015225903,-.050600401411129904,-.04581555915567774,.09599717860983221,.0179504255888953,-.029984980792924155,-.15600995797322956,-.13441036107213314,-.16443500436191227,-.20011010622694014,-.1185676848060674,-.3827720504358852,-.22544536191476122,-.18438213782554774,.19372413199270522,.11219308206942717,.25982980909746933,.07885965728132813,.23113762225192824,.12027128091306288,.03925026108281611,.10346450949096535,-.11153460033842286,-.07832572097557809,-.16362595169702793,-.049162011568201006,-.06813688020407746,.18695930341705305,.15059247824175628,.2742488887234457,.14323623171577923,.004434755204995782,-.11996255351778637,-.0685580235114842,.023032548262321723,-.010426074631633324,.05035409898656467,-.11095078972724633,-.35469216713625396,-.38858095560717304,-.43659704639067964,-.4881147517750165,-.5677210207032584,-.4275936078781049,-.34349774583431025,-.08925055891284522,-.017255660868053985,.2892955846030494,.20633977154543065,.49525043110711575,.30490326972545867,.15907734702039197,.1808389426954664,.006935953460319154,-.04874577836816606,-.20974664985683683,-.11713478908555536,-.18510515801561447,-.013089808045645399,-.008131022852986567,.2517622206100028,.2693946687392072,.273708197425899,.006710209168707876,-.06469798143401254,-.12347320818582255,-.0493915809053365,.11832252230060807,-.17268517789922963,-.32589261306509937,-.639287914168712,-.7219260366639526,-.7020782016690555,-.6123276098545748,-.44353340330746277,.01953883454029997,.04750283167129971,-.041738811618788646,.2862016389005296,-.19764870263775797,.8021965599423365,.6289222156301542,.3895323159052357,.37886779576331475,.14774431296436413,.09441366146063283,-.07341110181145313,-.16021249355536557,-.19593247304968892,-.08165077597051315,-.03581857177519336,.021291149638310077,.27454988477748077,.46071517851603194,.3433958255247594,.10294245821665464,-.15104410911941546,-.11912886110102075,-.1113610452824651,-.09911450222934172,.02334919610061857,-.8061138812740085,-1.0763583447726097,-.8168297825020715,-.7260382384711874,-.39736821511961523,-.23386297177233123,.4703174557375292,.2509623323107428,.31922838969310624,-.25991967791422005,.34193161983249054,.517117488745342,.6545515144341917,.8321595295545877,.3406546181924375,.21354052285348993,.05440923791370753,-.051414766220484194,-.24129551707937194,-.18021017930700467,-.16649307508903324,.02611995380449984,.008888226974177819,.4999284217339134,.5748295632952383,.510440753892181,.13304644121698647,-.08922769637111018,-.21628766080628836,-.18555506064923225,-.27054447491545125,-.688245637093645,-.5639174664677029,-1.344875933364252,-.9080135456055456,.07286620180284165,.18073895078348665,.5556706599080086,.3938177212002582,.5924281903599832,-.05022415004119711,.11181138224479518,-.31028937719204,.3708105687152074,1.1972380302487284,.6479171630934083,.5970258341713901,.2340648419056917,.1494250432975659,-.10460468586388726,-.2917223569671256,-.38132345964412656,-.02584515038199919,-.36234031342997136,-.0035984972735878563,.484844809780835,.7659613758274156,.5617213523679431,.32646969875093934,-.19592809956107882,-.23669588269358457,-.32125288047075495,-.3509732348388646,-.9286849101064518,-1.7089894615168075,-.3942802030467882,-.1577666253008498,.3895431493171764,1.1161873115341048,.5926473858270547,-.5562024927443876,-.9948949675097908,.9608676869506646,.923083780011243,-.4139391942136339,1.3089140888320632,.7863634374888133,.7158395939816597,.4515639886875609,.3014668198901915,.2025425031250778,-.0025274006864056797,-.1920178005811869,-.20404659434537004,-.25925756638025355,-.31672382746446043,-.3117255985095709,.387472708011902,.9520027428255602,.7264668532809944,.2788747346508717,-.17968537990931685,-.3258415080143367,-.4331540720571135,-.6413261932720714,-1.0499886203647348,-1.7251253398279605,-1.5120873610545145,2.092671402110029,.678333420527655,-1.3908581394378237,-.14065731983379445,-.704649079609032,.4003820354632061,-.2896061689589916,.9496940875254203,1.2068396187631385,.4671902772630277,.5938098889329356,.44061350110379105,.30971168558439566,.1321705591443394,.08478032867445422,-.042892010327952576,.02900408381925063,-.1404753332253544,-.16292155588890503,-.5083619532157557,-.15753196960053273,.022795944141262008,.8336631588740234,.7891737944140912,.6735544911252132,-.2295941880121686,-.24948129249626083,-.4589733287485918,-.6555066385893606,-1.2736175855462932,-1.2398159392319503,-.7311857387294178,.681474708971963,.6840361527612938,-1.4576264955235338,-1.6446564981157907,-1.587130770095007,-1.361280962925294,1.044628248920846,.9690987495763536,-.1416299543049248,.6691127915152362,.32234943120999365,.34963232308526704,.244105606577141,.16281560265463482,-.014269719747667968,-.011846708470826806,-.18933865423621368,.017829624121361812,-.9730252602081131,.05939304463575307,-.2025039145657705,.6602817924610479,.5431683864796097,.7621355462344159,.36502835420313695,-.08293010406400844,-.29266755430530383,-.30043904784973247,-.5733425968094366,-.8310491123379783,-1.039352345059011,-.28395441021550044,.840908465628016,-2.9317402483699175,-1.2603198064423498,-.5637011092588653],height:32,width:32,top:{real:[7376.258656397969,2820.8522261533344,-5690.949708539517,-4380.451337629613,388.6547315083493,-903.738522922329,-92.23368885456094,42.706854165930984,-25.699252344104405,18.326281263011424,-9.854238749915744,37.93351045351143,-7.866668430967025,29.305075180843883,-62.72861735466191,59.85324062738893,-83.63637439904494,59.853240627386725,-62.728617354660756,29.305075180844177,-7.866668430967183,37.93351045351143,-9.854238749916066,18.326281263013065,-25.699252344104405,42.70685416593069,-92.23368885455788,-903.7385229223205,388.6547315083471,-4380.4513376296045,-5690.949708539511,2820.8522261533035,-14789.032757371706,-31341.18584811776,-11739.029695619593,-866.7846665811339,-286.68893204831016,-488.3313322508757,-120.74864963582691,33.024718339611894,4.6010715329524166,-5.445674010995977,4.113903067106239,6.8633911029603265,13.634662924808397,1.860738389345556,-.35796846682150263,-16.62506921077511,-14.807142725465134,-11.664010623894898,.8207681555703734,-12.155673848711613,29.148348103795893,15.708115389403888,15.457503110539639,-12.683126140048403,18.96112093185931,-53.601071866945205,34.13442733448511,-942.7276077420217,-816.050944813798,-3798.5470080468217,-8876.42787310433,2890.8320511623124,-27232.42194054986,-15984.118662988652,-6745.568222360413,-409.0173927639226,-42.225544009425754,-526.2922550452712,-49.32565565290618,-23.20435390028933,15.630174176003303,-14.835941429972856,6.4726407463551725,1.9958373496876167,13.291351981828791,-1.1889020916883648,10.030112101155916,-20.67441842084843,-.1180338988714332,-18.74520767411604,-1.9041291470929314,-7.871099481794243,20.38587909738803,14.857882580655026,16.95019727458754,-2.033086164989526,25.446982376231624,-20.62459219009594,89.30325669500957,-637.0667107212057,-1428.8365567175017,-3113.2951228079887,-8881.588935127695,-20696.443600183225,-9007.313179629116,-5346.330609000281,-1439.1675666408983,-1292.5663502582722,-654.0994476037728,-301.7022747283896,-97.440927522084,-3.3329385156017457,-8.202796513162015,-5.774263947387032,-.5106953831985463,6.640288063631823,8.012652033059101,4.0882931682311625,-1.521034739607415,-2.233575686924605,-2.3288001542285928,-8.13154709651151,-6.9403489082507335,-3.674864902798056,4.593750742744353,9.495700824153968,10.21057060635477,11.67682549979278,23.75885873750166,20.28823698768961,20.9697668571251,-333.51324485695324,-810.1584353673162,-2278.682054098889,-5194.409091620209,-7188.339898707115,-3154.0647285180166,-3175.2001764803263,-3085.2108289353805,-1226.2977859942123,-836.2620618172178,-301.22169990911055,-15.123294918373254,-11.324269109892445,-4.999221097969336,-6.7152536525607,-1.7063097661780617,2.7727430774894133,7.135788132168215,4.866990482124882,2.7536893948953045,-2.039934630711028,-.5489892871976103,-2.9485150656567436,-3.1026085263061316,-1.3614545093317587,-.47304719477880164,4.040907971073893,6.248331301572371,8.854025232654797,18.80214162335462,24.681352644731625,-6.111478730512031,-148.49350684902615,-572.3488635999528,-1663.447165744248,-3308.605953472853,-4493.828247899506,-3720.0991836319017,-3323.4413322476125,-2223.332633868252,-1347.5218927383742,-402.86472873295924,-179.0778566066358,-42.17162736915355,13.024576486879551,-6.680339136637107,-4.3910663300422375,-1.9843645852297727,2.2081255979025864,3.4357055351949564,4.866739798973896,-.008801816555391827,-1.2900498248809058,-2.223069631674785,-.7961310239517896,-2.1003135650570957,-.12607857026311342,.39928478103703097,3.6189445517483683,5.523084701132182,8.08071443227348,9.653783720993834,14.647883903859292,41.76117110773358,-2.5048396429986766,-288.68438568639834,-1058.7748743456032,-2111.6481404168812,-2853.5518466904464,-2206.474238883325,-2207.488296900341,-1427.060029597421,-607.9731104871157,-283.75431628355585,-25.222873313531675,-11.21903778037437,-8.365382280797615,1.9503276148055415,-4.8653324939916756,-1.0558165909594248,.18037835028025548,3.723230036877415,2.6260151255238955,1.901747650437611,-2.157984497724208,-1.9174482807780493,-2.671365924063863,-1.6822520344543337,-1.783596980145315,.50013744114288,2.3612666445612516,3.9892729615099713,5.028259733848998,4.384961399296521,7.567544914645971,26.73833027450421,30.29300971120987,-72.36523804645397,-397.03998761961856,-1129.7740740979677,-1877.1475049531305,-1015.8170093531105,-757.3385658121136,-464.0498676348327,-221.8093865245269,-66.67014095320897,-32.688631361988044,12.245388279073117,-2.09491941357581,-4.921421792424727,-.7686322780239969,-1.3611346863617457,.5920300131883174,2.3940543871676745,2.138653552857357,.12698658321630202,-.36055346759858353,-1.509631760657328,-.37490601010058217,-1.4076418772333708,-.9909556252137327,.02570461580723476,1.7006413859335137,2.41012418633353,2.72304464828999,4.897547426352959,5.579917642233582,7.382361392952302,3.3531473980019464,-7.094723129271724,-129.95057654055665,-447.33256260550814,-801.4985531526427,-297.712804672423,-206.25666421819534,-105.85720001872387,-40.587336797783266,-19.033005269759897,.6862352568504775,-2.224754122223199,2.868642893715354,-1.3772856826259623,-3.700118286073842,.5603303011127165,.3164957648182627,2.6435570864758695,2.072901917366745,1.3896745329326239,-1.1733083260901866,-.5564284933709801,-.7531942972718523,-.16542223594150865,-.3498151014517736,.639471018274414,.6449513671490333,1.5357324193076427,2.8130362926385226,4.284541597255651,3.341557420163751,1.8747628167747612,4.309201987250532,1.2280777000161127,-53.113548920223614,-153.12296297306594,-262.5910689083988,-78.50796675246865,-44.71395672976317,-24.503242066462356,-11.422688403833899,-6.832488237410147,-1.9389416594991726,2.3416848160301655,-1.9581076589813595,.6544162473914797,-1.6215192060328243,-3.0886268279599727,2.557402471968773,2.5859312055320047,3.582324284715654,2.385170800316441,.411488665094779,-1.7870448740379692,.3586747560851346,-.33833230756510146,.7213491787051987,-.6451343286468626,-.036676325952571386,1.880678514199683,3.0459530955995717,3.0361534846987768,1.8248078988499765,2.0278729258957484,1.4298438030821454,1.444150632114136,-16.470770345398158,-59.03838740640355,-81.62468733113072,-41.65158074717607,-20.04858945819673,-26.796686775361913,-13.274828683787613,-5.48494102646779,-1.7682797425272327,.5127695090162155,.11701161368370352,-2.1525887062494076,-.35663258536781867,-.3882693848937121,-2.5566610369397282,6.513912829330354,4.153796425003821,2.177850779277181,.6761807821160477,.6727176011927574,-.03322371296847739,1.7891382881043305,.7654900301212932,-1.8840461990319548,.6276437133660342,2.9500669911593334,2.799854903105731,2.7114466415734606,2.640497491382968,2.5087646302130264,.3613507110411972,-.8597558755237771,-5.89936615548755,-19.483874473281006,-46.656198806892085,-42.44718550207896,-49.47539998840752,-28.80904080219163,-23.364991274814315,-9.372036001443622,-2.193549633075087,.7323779052753541,-.6028717635248831,-1.067236191051992,-3.837446138403733,.8126491631670523,3.702478373345459,-2.227430700667376,12.171761179906976,2.648499723117314,2.1242155181960216,1.3916869062247985,3.2969221728544564,.1414776211221006,-1.2659388719629114,1.2983452624583423,2.4646463691490883,1.8819178233751466,2.469919778217255,3.410560044540994,3.476877662739366,1.970602508408192,.5456937943711528,-.6150348829608226,-1.584537886719974,-9.910885111885545,-17.96889314262851,.8328024839604734,-16.804391379900096,-34.94566909960443,-18.287776152890835,-10.19076861522101,-2.365935575489219,.38430207827148843,-.39175809943359,-2.078662076271716,-2.1066158183404973,-4.0664292874937455,5.105639281222473,9.471148516042044,-2.577327881134023,13.563457368659881,5.445444411621721,3.0810071966308192,3.71409458782056,-2.7028450063821525,1.3893389983926554,5.029567791169772,2.0512141006459763,.5768744010433312,3.139987490646312,4.304436149290965,3.228692605037394,2.0294536549063102,-1.2648718051872285,.8198227841656076,5.193746134405688,4.566053007097891,-2.575198281431435,10.842808636227273,-2.7634934625905125,-4.741036325511608,-13.231297049532179,-1.239206941737581,.576956771407574,1.6572428400911725,-.8048756694131317,-2.197640605466401,-2.9337382106235617,-.9769607434101947,-.5203983011347634,8.693274674091336,18.008772340009436,-6.389470676234774,16.656214263229323,5.648012814589276,-2.642075767662634,6.983253879862469,8.71177531529134,2.944231966553327,-.4194257648970201,1.9464964791115495,2.8117062685871983,3.586606822562346,3.6410340078674697,2.1750438821370093,.9274613552108363,-.10515597578954901,10.916870623975495,22.695665816423684,26.922229107827643,56.766547106622895,34.3463794813641,8.02098906722306,4.227686749372474,2.0129650120803855,4.572197379285084,1.7026114564114816,-.10193290249876912,-1.9877285465951933,-1.4091416884493304,-1.0407935339809435,4.692713510495082,4.461866465996299,13.14685287043932,23.49016175637019,-8.54486765868434,5.763904015786262,6.710397445275458,11.090643871879529,8.611796474987928,.95828374077,2.885914301402635,1.6803595914225926,1.5724318132354216,2.366484248547459,3.3844724421254813,2.8754034241014996,.8142069750518306,3.4592633965370854,8.541867898911974,26.408180301615612,46.47243379513072,15.748155014076561,18.939305693948317,18.355423454953527,7.438594793720825,6.84215823955665,3.828482944166501,2.3084513014265475,.01438358804135348,-.7017083759025844,-.9519271341888802,.604886383870369,4.7316501322768225,11.640012070252736,11.084534895769892,7.942755232382746,17.090358547431578,-4.006276541512437,18.90347131446114,10.522914852414784,-.3172708519471489,8.191406242187256,5.567876842121583,1.9515757898119943,.13204460835173984,.9468697939602826,2.2566984460298456,3.5582629306092612,2.7150237945754423,-.038191379039643265,6.309066288275824,18.822434458740766,20.387061197767007,34.21042461069561,25.78016711295075,13.422328957688888,4.257816250206805,2.3122896178400203,4.189268002804536,2.259247881703766,.9537225958470233,-.4765342590896943,.06924012891108702,.917811795795561,6.601850524692877,10.152138543237006,11.530381877152177,5.6211304516254526,4.790907028041365,35.86798950390679,4.790907028041358,5.621130451625443,11.530381877152157,10.152138543237017,6.601850524692898,.917811795795565,.06924012891108133,-.4765342590896943,.9537225958469944,2.2592478817037476,4.189268002804514,2.3122896178399985,4.257816250206748,13.422328957688848,25.78016711295069,15.74815501407811,20.387061197767874,18.82243445874189,6.309066288276548,-.03819137903956219,2.7150237945755555,3.5582629306093274,2.2566984460298958,.946869793960297,.1320446083517558,1.951575789811984,5.567876842121564,8.19140624218721,-.3172708519471452,10.522914852414772,18.90347131446111,-4.006276541512388,17.090358547431556,7.942755232382751,11.084534895769902,11.640012070252746,4.7316501322768385,.60488638387039,-.9519271341888812,-.7017083759025972,.014383588041281273,2.308451301426475,3.8284829441663635,6.842158239556676,7.438594793720435,18.355423454952824,18.9393056939491,56.76654710662406,46.47243379513245,26.408180301616227,8.54186789891221,3.4592633965371484,.8142069750518798,2.875403424101515,3.384472442125488,2.3664842485474735,1.572431813235436,1.6803595914225982,2.8859143014026083,.9582837407699747,8.61179647498788,11.090643871879506,6.710397445275469,5.763904015786259,-8.544867658684302,23.490161756370185,13.146852870439265,4.461866465996277,4.692713510495103,-1.0407935339809418,-1.4091416884493408,-1.98772854659521,-.1019329024988234,1.7026114564114307,4.572197379285043,2.0129650120803833,4.227686749372477,8.020989067223404,34.346379481364394,10.842808636228447,26.9222291078285,22.695665816424683,10.916870623975989,-.10515597578943024,.9274613552109011,2.175043882136998,3.6410340078674537,3.5866068225623455,2.8117062685872063,1.9464964791115584,-.41942576489699973,2.944231966553285,8.711775315291318,6.983253879862468,-2.642075767662676,5.648012814589287,16.6562142632293,-6.389470676234752,18.008772340009443,8.693274674091327,-.5203983011347356,-.9769607434101951,-2.9337382106235728,-2.1976406054664195,-.8048756694132073,1.657242840091119,.5769567714075567,-1.2392069417374179,-13.231297049531948,-4.741036325511325,-2.763493462589494,.8328024839608222,-2.5751982814309775,4.566053007098211,5.1937461344059415,.8198227841657492,-1.2648718051872136,2.029453654906283,3.2286926050373275,4.304436149290965,3.1399874906463054,.576874401043345,2.051214100645962,5.02956779116974,1.3893389983926545,-2.7028450063821756,3.7140945878205622,3.081007196630816,5.4454444116217395,13.563457368659845,-2.5773278811340234,9.471148516042044,5.105639281222461,-4.06642928749373,-2.1066158183405044,-2.0786620762717254,-.39175809943363327,.38430207827145285,-2.3659355754891784,-10.190768615220893,-18.28777615289057,-34.94566909960389,-16.804391379899673,-42.447185502078064,-17.968893142627813,-9.910885111884598,-1.5845378867194357,-.6150348829606075,.5456937943712441,1.970602508408127,3.4768776627392723,3.410560044540968,2.469919778217264,1.881917823375139,2.4646463691490985,1.2983452624583438,-1.2659388719629485,.1414776211221116,3.2969221728544715,1.391686906224813,2.124215518196023,2.6484997231173293,12.171761179906973,-2.227430700667368,3.702478373345508,.8126491631670488,-3.837446138403738,-1.0672361910520076,-.6028717635249369,.7323779052753103,-2.1935496330750563,-9.372036001443469,-23.364991274814056,-28.809040802191326,-49.47539998840697,-41.65158074717507,-46.656198806891,-19.4838744732805,-5.899366155487263,-.8597558755235543,.3613507110412495,2.5087646302129953,2.640497491382889,2.711446641573449,2.7998549031056945,2.950066991159325,.6276437133660522,-1.8840461990319775,.7654900301212954,1.789138288104325,-.033223712968466615,.6727176011927521,.6761807821160666,2.177850779277167,4.153796425003827,6.51391282933036,-2.5566610369397242,-.38826938489369667,-.3566325853678395,-2.152588706249413,.11701161368368215,.5127695090161969,-1.76827974252719,-5.484941026467714,-13.274828683787417,-26.79668677536157,-20.048589458196275,-78.50796675246646,-81.62468733112892,-59.03838740640205,-16.47077034539769,1.4441506321142048,1.429843803082246,2.0278729258956907,1.8248078988499317,3.036153484698732,3.045953095599546,1.8806785141996951,-.036676325952591224,-.6451343286468558,.721349178705193,-.3383323075651067,.35867475608511745,-1.7870448740379619,.4114886650947502,2.385170800316434,3.582324284715646,2.585931205532017,2.5574024719687887,-3.08862682795997,-1.6215192060328063,.6544162473914552,-1.9581076589813555,2.341684816030153,-1.9389416594989646,-6.832488237409854,-11.422688403833355,-24.50324206646105,-44.71395672976105,-297.712804672423,-262.5910689083989,-153.12296297306594,-53.11354892022388,1.2280777000160852,4.309201987250408,1.8747628167747172,3.341557420163666,4.284541597255651,2.813036292638515,1.5357324193076258,.6449513671490316,.6394710182744104,-.34981510145179595,-.16542223594153913,-.7531942972719063,-.5564284933709801,-1.1733083260902135,1.3896745329326132,2.0729019173667376,2.6435570864758655,.3164957648182751,.5603303011127181,-3.7001182860738244,-1.3772856826259623,2.8686428937153425,-2.224754122223166,.6862352568505768,-19.033005269759858,-40.587336797783074,-105.85720001872383,-206.25666421819477,-1015.8170093530997,-801.4985531526338,-447.3325626055032,-129.9505765405554,-7.094723129271765,3.3531473980017035,7.382361392952007,5.579917642233341,4.897547426352917,2.7230446482898696,2.4101241863335168,1.700641385933505,.025704615807253747,-.9909556252137635,-1.4076418772333852,-.37490601010063784,-1.5096317606573337,-.36055346759863915,.12698658321626774,2.1386535528573165,2.39405438716767,.5920300131883396,-1.3611346863617075,-.7686322780239524,-4.921421792424735,-2.0949194135756803,12.245388279073195,-32.688631361987156,-66.67014095320768,-221.8093865245236,-464.0498676348275,-757.3385658121049,-2206.474238883316,-1877.1475049531243,-1129.7740740979648,-397.03998761961947,-72.365238046454,30.293009711209137,26.738330274503873,7.567544914645611,4.3849613992964835,5.028259733848883,3.9892729615099154,2.361266644561238,.5001374411428784,-1.783596980145335,-1.6822520344543537,-2.6713659240639043,-1.9174482807780469,-2.1579844977242066,1.9017476504375719,2.626015125523887,3.7232300368773963,.18037835028033014,-1.0558165909593593,-4.865332493991508,1.9503276148055297,-8.365382280797357,-11.219037780374073,-25.22287331353055,-283.7543162835544,-607.9731104871125,-1427.0600295974182,-2207.488296900335,-3720.099183631889,-2853.5518466904387,-2111.648140416873,-1058.7748743456016,-288.6843856863979,-2.5048396429994018,41.76117110773314,14.647883903858578,9.653783720993783,8.080714432273291,5.523084701132133,3.618944551748326,.3992847810370409,-.12607857026309263,-2.100313565057036,-.7961310239516864,-2.223069631674776,-1.2900498248808734,-.008801816555420883,4.866739798973889,3.4357055351949497,2.2081255979026997,-1.9843645852296314,-4.391066330041937,-6.680339136637114,13.024576486880093,-42.171627369152944,-179.07785660663302,-402.86472873295685,-1347.5218927383694,-2223.332633868245,-3323.4413322476003,-3154.064728518015,-4493.828247899509,-3308.6059534728515,-1663.4471657442498,-572.3488635999529,-148.49350684902797,-6.111478730512539,24.681352644731046,18.802141623354593,8.854025232654564,6.248331301572226,4.040907971073872,-.4730471947787934,-1.361454509331699,-3.102608526305984,-2.948515065656593,-.5489892871976132,-2.039934630710932,2.753689394895215,4.866990482124894,7.135788132168221,2.7727430774895763,-1.706309766177841,-6.715253652560278,-4.999221097969348,-11.324269109891496,-15.123294918372496,-301.2216999091082,-836.2620618172166,-1226.2977859942089,-3085.2108289353782,-3175.200176480323,-9007.3131796291,-7188.339898707104,-5194.409091620202,-2278.6820540988915,-810.158435367315,-333.5132448569559,20.969766857124615,20.288236987688347,23.75885873750167,11.676825499792164,10.210570606354567,9.49570082415387,4.593750742744372,-3.6748649027980855,-6.9403489082508045,-8.131547096511563,-2.3288001542285697,-2.2335756869247856,-1.5210347396073984,4.088293168231135,8.012652033059126,6.64028806363201,-.5106953831984324,-5.774263947386494,-8.202796513162045,-3.3329385156007563,-97.44092752208263,-301.70227472838576,-654.0994476037723,-1292.5663502582681,-1439.1675666408923,-5346.33060900026,-27232.421940549855,-20696.44360018323,-8881.588935127695,-3113.2951228080024,-1428.8365567175017,-637.0667107212123,89.30325669500809,-20.62459219009961,25.446982376231595,-2.0330861649905447,16.950197274587225,14.857882580654767,20.385879097388024,-7.871099481794626,-1.9041291470930921,-18.74520767411746,-.11803389887143546,-20.674418420848326,10.030112101155776,-1.1889020916883362,13.291351981828802,1.995837349687921,6.472640746355359,-14.835941429972186,15.63017417600328,-23.204353900286776,-49.325655652904786,-526.2922550452662,-42.22554400942483,-409.0173927639147,-6745.568222360406,-15984.118662988625,-14789.032757371675,2890.832051162324,-8876.42787310433,-3798.5470080468367,-816.0509448137971,-942.7276077420302,34.13442733448254,-53.60107186694936,18.961120931859348,-12.683126140049515,15.4575031105396,15.708115389403696,29.148348103795954,-12.15567384871238,.8207681555701095,-11.664010623895932,-14.807142725465098,-16.625069210776097,-.357968466821102,1.860738389345522,13.634662924808296,6.863391102960431,4.1139030671066,-5.445674010995009,4.601071532952386,33.02471833961225,-120.74864963582446,-488.33133225087175,-286.68893204831085,-866.7846665811124,-11739.029695619576,-31341.18584811775],imag:[0,-38758.087655514835,17548.08504726914,6107.2151726624015,-1874.673387120311,1102.4198144208276,70.66349859769723,246.50443360377355,15.094404836632346,61.578388193120794,-6.883850379905633,17.433253862249003,-27.18235290574834,10.205627484635695,-57.63116578861708,3.5978635789949243,0,-3.597863578994439,57.63116578861733,-10.205627484634785,27.18235290574807,-17.43325386224813,6.883850379906236,-61.5783881931206,-15.094404836632346,-246.50443360377048,-70.66349859769869,-1102.4198144208278,1874.6733871203112,-6107.21517266241,-17548.085047269135,38758.087655514864,21415.51152670408,9240.481680183884,6140.0706338628515,4606.742396705084,-477.33409412636456,106.10534760670754,253.8582768364973,118.670471872242,60.85217906744696,22.7908097312226,16.992665274593527,3.3051410229913314,-11.158748163655874,-19.12568021630007,-12.454719286949617,-13.739274709476872,4.4649861577325,-1.403038183390045,28.35267475528794,-.6790052379783438,10.299898240809684,.9219892960858738,1.7353747463970652,-28.921613512340663,-62.07723181322848,-150.50951383829744,-214.24479740751684,-816.215744663207,274.1353961963593,-3254.328668806272,-6340.0761451284025,11789.65138431164,10840.701965194425,18380.24897742693,3231.3822724351476,-461.44982475214084,-210.28695062763435,162.42212696600188,179.30887547689923,113.80000983072934,43.39472549693249,24.59548477602943,9.50644351725762,6.2249226907652995,-15.514190495563678,-15.67209469704693,-16.179758937655365,-.4418344453840365,3.28796177703477,12.57005414423841,4.794704065681184,5.575219767602969,-1.566994278876134,3.0671728952871886,-9.300602996623944,-19.205045070959127,-56.93976849335746,-104.59324045979437,-209.921490323403,-248.20433151041027,-867.9236374610348,-1299.0888976028032,827.6168828481927,-3453.30105164401,2184.1299326736716,343.8161049808456,1430.9649107108667,-397.20604751762147,-695.9626147441301,272.38382351444113,181.43163787734565,64.57058867431132,29.183435066681643,16.420203889130576,10.051165980763317,3.81329985672547,-5.220057623492661,-12.843645059741645,-16.57421537000831,-6.894841171864867,5.785399335493025,6.761549992871188,6.325879336386598,6.277914142030076,7.316455816584333,.11325917153592484,-12.472105947256997,-26.315486653091728,-48.31526672127188,-96.05176533673017,-133.189841599909,-353.39952612993443,150.90670251969735,-622.6277593313,-1461.5017842629939,2621.2839732861958,-797.4214233918754,-1141.9271710506443,-1665.2932495998289,-238.3366310615267,49.92317026240907,61.50646507554549,153.25086116745172,46.446591336114025,13.171326963991907,10.42525251508628,5.909384131444669,3.748181741060674,-5.009304162269796,-8.337711853484214,-11.383176063308646,-7.290456859187921,.05510266399852992,6.210045216504963,.5025878115353007,8.7133201843541,8.009949196961943,3.408178127748358,-6.12419710220284,-12.736128845291272,-45.232132533425755,-61.3791750629996,-153.42214558232837,-67.5950975145708,85.62589910386124,-58.961155821254636,56.88320697106799,-1105.7125877167775,-1066.0901100808514,-1171.2701320923616,-223.1510166903665,-49.090655504704266,242.13940044346495,187.57398243385657,37.63062482495811,28.849867481961542,8.456955463477327,4.970283957738858,4.402811570225055,1.43105564783055,-1.929060150422355,-6.870206159283182,-7.555783429793225,-6.282815286883121,-.1087059380343404,-.35173698335235887,2.55205609592295,3.0896458550054593,4.750522000279903,1.2377659738692817,-1.7806530124299274,-9.187967169255963,-20.16463244939638,-65.5912406537027,-60.86948040000092,-62.27175948611826,-69.04223895420877,113.44009243151515,-280.2462227959351,-361.29505764988915,-32.2389038646619,397.42763261597736,412.9673372382922,359.76401050336045,192.6210800054142,122.25882006598455,49.109708531705785,-.8341677081323136,2.4803036198391495,2.5045331182816137,2.1157075816863125,2.045683555559115,-1.3319639541688315,-4.10576581321596,-5.262260990501468,-3.122429370817716,-.23490025627283884,.40862649299968534,1.019092681419275,2.6652215067301066,2.390293795931129,1.3072901204360872,-2.1976906085986245,-4.720528993014994,-17.96465868682184,-21.918559933832515,-40.85455217934482,-68.24351076369831,25.856495589804037,-73.74721318359471,26.189735785049756,-56.7264268907042,461.88238037931336,400.3662547887042,367.42140066372616,233.95717316464078,120.24788693419019,56.86229814651989,16.52842380846973,5.508176303740889,-2.7285347510623343,.9176847348583501,1.922818700657754,.8587866218152932,-.08203172365733125,-3.1986596327501684,-2.7995613930163934,-2.624028681216124,.08223536455831822,.1338442362392752,1.9947594371394528,1.3437508199980643,2.6398410865992954,.7375829037978984,-.13078900915043976,-4.49533432925064,-5.195033590914489,-13.12242317098767,-25.523369493146305,-12.192196214097944,-25.868477512213353,2.906678292088343,34.10657416101557,256.00130492151595,208.58597838816522,310.3347945923577,177.03891975992664,97.122360992021,48.48851018711319,24.52891787285255,4.627203457515712,-1.3571647909533122,.2062126948263101,-.40867746076362715,.9921576725859489,1.531376825664169,-.05277298563976486,-1.5552847934304939,-2.8318141898835965,-1.44106038161314,-1.7221472209588695,.6178674780052442,.48048213041449506,1.7161555169971148,.8868975797919587,1.4761658864245926,-1.7252645996654892,-.8152878302494553,-3.3158091950668926,-7.6513645380807835,-2.928185992788675,-12.462674546124116,-7.4696827367159715,-23.236903073402107,43.7319836231637,92.32188204199035,70.11766837978374,34.22664935631408,47.258739472197036,25.375797504306092,12.406583490274283,8.653561843269081,1.0747519793409035,-.44324044078252567,-1.7584707522262704,.724586071659981,.7069206586421795,.7707634519125917,1.064906925019734,-2.726198542841819,-1.9302074459527443,-3.37542502778594,.506733493065497,-.6403167230929973,1.374850007673434,.729505526484903,2.3325303094340692,-.9986473214357906,.7819578744693423,-1.1999635798104886,-3.4858876190620522,-1.4991310089769327,-2.843375506924322,3.7638952884372583,1.240098013963287,-2.9542792497780144,1.823435568047936,49.57624474623547,19.014215780516388,30.877310974744532,-1.1221271518157558,7.8208026967228905,2.609067592037944,1.2521971880796572,-.9950506434595828,-1.3975466814991453,-.5733840782028455,-1.8697004151394911,2.370028050564138,1.696784850403636,-.6151974047873662,-1.3317994275810727,-4.207174624734692,-.8583473478041032,-1.4672332071937433,2.6381100233578914,-2.417676985149717,2.013107400019082,-1.626262859601891,3.9814331515508763,-.027677673297514374,-2.444607041276003,-1.6150024285043403,-4.122758914406767,-1.7068861549694658,2.2919486155920237,12.185386506158462,9.103962312567619,7.15976047067928,-5.408715124986016,.9697416211757905,-11.947201833901593,6.633062025249099,2.115208521813355,3.546929348907518,.6228361674031171,-1.3522725353705505,-2.4444202103018355,-1.5690941230144015,-.006985877860368016,-2.2282653754616524,3.828430830887377,3.1912913728027457,-5.5805618725494135,.13049495818795365,-3.5197176720292105,1.8802124921714005,-2.6189977871286096,2.1235611153433935,-7.146308976942236,4.772931412347173,2.1077672614040215,-.8191012589463181,.7205262469271351,-3.484240274988763,-4.182911530688638,-4.399432534457007,3.095356592907991,11.949390330752637,23.68013662152991,21.558658775121675,22.744598059672118,24.94332876792813,28.90135272218845,12.814680673201753,13.644932734111247,5.45768556544121,2.4025753394703617,-1.167335562531859,-2.4971924284976894,-1.8952846661475429,-1.292741941276348,2.790273201996955,-4.347701083439493,3.742325362160104,4.395980410805589,-8.925799415294772,2.882370251254919,-5.057769871464573,3.1829717367300585,-13.324209534416688,6.278504535455041,-.8748983428436319,-.8526310432157135,4.488566215307324,-.5311023217265213,-1.6389132121610095,-4.394554386416681,-4.293634482862569,.4874520575309819,15.895360345460416,25.16961738329208,33.91844547329262,23.996907911576923,23.2512772693596,5.15431566471437,18.55410282660839,16.359265688234956,10.23124463361384,1.5587865083621433,-1.4683911434431964,-2.958105786087343,-1.5689869488245065,-.9605122563484721,1.7578951205789273,6.663835293882251,-9.490177549910648,4.131747327103883,10.951455398944859,-15.360897164532773,5.739294741971535,-17.045217645164048,5.844968444410362,-3.5521886878464675,-7.3858280585812945,5.734734089519626,.4908832539545151,.9866663790534967,-1.0149409800154179,-1.6832477381822215,-2.5467748158366237,2.090406582384414,13.443724261124899,31.761133485201317,33.67118616661112,40.70719160876065,-1.150982612793645,21.09677957250432,10.924705320167561,7.368877610403945,6.47335333926665,1.1232923919614803,-2.443130294149275,-2.7804484266994756,-1.6225398299131664,.6478030911844409,2.579395187133014,3.112405638409599,9.383274359768524,-14.19595431303103,-.5760898854676106,19.47939047921927,-31.200338855208866,14.100113777774123,-5.385666264437839,-10.946378631138824,4.4142064356850845,-3.906665232225006,.6684491059860498,1.0227755630951,.6613753856807533,-.38567118503773246,.24821124990411303,3.587284123143521,14.053276636456639,24.260931372233497,33.64745909564876,7.652927123158831,-9.215137707870635,-38.31166585868664,-16.121399661234683,-5.99278681782985,-2.770136530421177,-3.714008894587047,-3.0788396721523017,-3.0904878618769733,-1.8655827999533823,.43690140001808947,4.156119490868076,4.385895239208535,2.7714027971729753,9.257895969243517,-19.629364588289473,-14.072043519544888,36.373196183604975,-13.61372365841147,-9.458342331116125,8.528458327752043,-6.174465145795059,-2.2310052363098367,-1.75629520897435,1.153969335081464,1.7596902661237352,1.8196834579374304,2.022290334087173,5.164682908483578,12.770276815017757,24.46979490512981,27.822785449092486,29.82854034209125,0,-3.7653763488297254,-24.75730590440647,-19.738984856989376,-8.266461976159446,-4.649514459183804,-3.656340919703911,-2.914764188547905,-2.2830188616483764,-.10916825448095578,2.391697766817782,5.941240494184604,2.1224657474819093,3.9401472638367774,-2.144527732326695,-10.774805376941604,0,10.774805376941531,2.144527732326683,-3.940147263836795,-2.1224657474819155,-5.941240494184617,-2.3916977668177926,.10916825448094437,2.2830188616483764,2.9147641885479065,3.6563409197039234,4.649514459183814,8.26646197615945,19.73898485698941,24.75730590440644,3.7653763488297773,9.215137707873652,-29.828540342087546,-27.822785449090652,-24.46979490512937,-12.770276815017642,-5.164682908483464,-2.022290334087153,-1.8196834579374237,-1.7596902661237566,-1.1539693350814775,1.7562952089743382,2.231005236309821,6.1744651457950415,-8.52845832775212,9.45834233111612,13.613723658411436,-36.37319618360493,14.07204351954484,19.629364588289484,-9.257895969243535,-2.7714027971730033,-4.385895239208558,-4.156119490868093,-.4369014000181147,1.8655827999533605,3.090487861876973,3.0788396721523177,3.7140088945872396,2.770136530421462,5.992786817830616,16.121399661236502,38.31166585868818,1.1509826127964509,-7.652927123156882,-33.647459095647825,-24.260931372233326,-14.053276636456571,-3.5872841231435073,-.2482112499041089,.3856711850377551,-.6613753856807607,-1.0227755630951023,-.6684491059860727,3.906665232224975,-4.4142064356851165,10.946378631138813,5.385666264437834,-14.100113777774116,31.200338855208855,-19.47939047921935,.5760898854675786,14.195954313030994,-9.383274359768562,-3.112405638409594,-2.579395187133034,-.6478030911844564,1.6225398299131557,2.780448426699469,2.4431302941492916,-1.1232923919613498,-6.473353339266396,-7.368877610403441,-10.924705320166419,-21.09677957250195,-23.25127726935768,-40.70719160875883,-33.67118616661006,-31.7611334852009,-13.443724261124748,-2.090406582384377,2.5467748158366237,1.6832477381822348,1.0149409800154132,-.986666379053487,-.49088325395452825,-5.734734089519665,7.385828058581301,3.5521886878464564,-5.844968444410324,17.045217645163998,-5.7392947419715155,15.360897164532778,-10.951455398944907,-4.131747327103875,9.490177549910666,-6.66383529388227,-1.7578951205789377,.960512256348448,1.5689869488244914,2.958105786087338,1.4683911434432237,-1.5587865083620118,-10.231244633613667,-16.359265688234554,-18.554102826607274,-5.154315664712993,-24.943328767927714,-23.996907911576475,-33.91844547329208,-25.169617383291836,-15.895360345460304,-.487452057530983,4.293634482862555,4.394554386416715,1.6389132121610113,.5311023217265384,-4.4885662153073405,.852631043215709,.8748983428436312,-6.278504535455005,13.324209534416719,-3.1829717367300314,5.05776987146457,-2.8823702512549096,8.925799415294765,-4.395980410805612,-3.742325362160086,4.3477010834395236,-2.7902732019969543,1.2927419412763401,1.8952846661475349,2.4971924284976934,1.1673355625318764,-2.4025753394703346,-5.457685565441166,-13.644932734111133,-12.814680673201632,-28.901352722188015,-.9697416211750332,-22.744598059671098,-21.55865877512123,-23.680136621529623,-11.949390330752514,-3.0953565929079563,4.399432534457,4.182911530688664,3.484240274988765,-.7205262469271163,.8191012589463207,-2.1077672614040264,-4.772931412347166,7.146308976942229,-2.1235611153433602,2.618997787128679,-1.8802124921713912,3.5197176720292407,-.1304949581879572,5.580561872549461,-3.191291372802759,-3.828430830887353,2.228265375461667,.006985877860328306,1.5690941230143916,2.4444202103018267,1.3522725353705702,-.6228361674030838,-3.546929348907534,-2.1152085218133783,-6.633062025248768,11.947201833901675,-19.01421578051531,5.4087151249861485,-7.159760470678993,-9.103962312567507,-12.18538650615837,-2.2919486155920032,1.7068861549694805,4.122758914406779,1.615002428504344,2.4446070412760443,.027677673297527423,-3.981433151550863,1.6262628596018724,-2.0131074000190696,2.4176769851497326,-2.638110023357861,1.4672332071937413,.8583473478041416,4.2071746247347095,1.331799427581099,.6151974047873869,-1.6967848504036496,-2.3700280505641422,1.8697004151394931,.5733840782028331,1.397546681499154,.9950506434595889,-1.2521971880796428,-2.609067592037973,-7.820802696722901,1.1221271518159068,-30.877310974743335,-70.1176683797825,-49.57624474623531,-1.8234355680484657,2.954279249777826,-1.2400980139631994,-3.7638952884372125,2.8433755069243154,1.499131008976947,3.4858876190620642,1.1999635798105424,-.7819578744693196,.9986473214357916,-2.332530309434083,-.7295055264848886,-1.3748500076734225,.6403167230930256,-.5067334930655034,3.375425027785985,1.930207445952772,2.72619854284187,-1.0649069250197167,-.7707634519125544,-.7069206586422051,-.7245860716599976,1.7584707522262737,.443240440782505,-1.0747519793408324,-8.653561843268937,-12.406583490274217,-25.375797504305602,-47.25873947219602,-34.226649356312784,-208.58597838816522,-92.32188204199083,-43.731983623163735,23.236903073401958,7.469682736715982,12.462674546124104,2.928185992788677,7.651364538080827,3.3158091950668926,.8152878302494978,1.7252645996655027,-1.4761658864245817,-.8868975797919583,-1.7161555169970975,-.4804821304144749,-.6178674780051872,1.7221472209588695,1.4410603816132017,2.8318141898836315,1.5552847934305372,.05277298563978073,-1.5313768256641445,-.9921576725859278,.40867746076360606,-.2062126948263101,1.3571647909533708,-4.627203457515691,-24.528917872852457,-48.48851018711318,-97.12236099202084,-177.03891975992676,-310.3347945923578,-461.88238037931535,-256.0013049215171,-34.106574161017335,-2.906678292089301,25.868477512213314,12.192196214097933,25.52336949314624,13.12242317098773,5.195033590914491,4.495334329250737,.13078900915048275,-.7375829037978546,-2.6398410865992936,-1.3437508199980366,-1.9947594371394133,-.13384423623915356,-.08223536455833068,2.624028681216258,2.7995613930164374,3.1986596327502643,.0820317236573693,-.8587866218152375,-1.9228187006577324,-.9176847348582973,2.728534751062311,-5.50817630374071,-16.528423808469462,-56.862298146519464,-120.24788693418984,-233.9571731646403,-367.42140066372525,-400.36625478870656,32.23890386466014,56.72642689069964,-26.189735785051667,73.74721318359408,-25.85649558980411,68.24351076369864,40.85455217934509,21.91855993383282,17.96465868682183,4.720528993015179,2.197690608598713,-1.3072901204360032,-2.39029379593111,-2.6652215067300165,-1.0190926814191563,-.4086264929994344,.23490025627283342,3.122429370817941,5.262260990501599,4.105765813216099,1.331963954168899,-2.0456835555590454,-2.1157075816862583,-2.504533118281568,-2.4803036198391473,.8341677081324829,-49.10970853170554,-122.25882006598383,-192.6210800054143,-359.76401050336045,-412.9673372382936,-397.42763261597815,1066.0901100808455,361.29505764988636,280.2462227959299,-113.44009243151743,69.04223895420859,62.27175948611885,60.869480400001216,65.59124065370337,20.164632449396354,9.18796716925631,1.7806530124300617,-1.2377659738691233,-4.750522000279865,-3.0896458550052697,-2.552056095922777,.35173698335277165,.10870593803433028,6.282815286883449,7.555783429793403,6.870206159283416,1.9290601504224327,-1.4310556478304128,-4.402811570224995,-4.970283957738766,-8.456955463477293,-28.849867481960956,-37.63062482495777,-187.57398243385583,-242.13940044346546,49.09065550470147,223.15101669036463,1171.270132092355,797.4214233918746,1105.712587716775,-56.883206971068894,58.961155821254195,-85.62589910386123,67.59509751457145,153.422145582329,61.37917506300045,45.23213253342577,12.736128845291734,6.124197102203009,-3.4081781277481404,-8.009949196961886,-8.713320184353885,-.502587811535033,-6.210045216504566,-.05510266399853082,7.290456859188381,11.383176063308918,8.337711853484521,5.009304162269923,-3.7481817410605087,-5.909384131444633,-10.425252515086191,-13.171326963991898,-46.44659133611351,-153.250861167451,-61.50646507554556,-49.92317026240935,238.33663106152528,1665.293249599826,1141.9271710506428,-2184.1299326736644,-2621.2839732861944,1461.5017842629866,622.6277593312957,-150.9067025196971,353.39952612993454,133.18984159990904,96.05176533673138,48.31526672127185,26.31548665309238,12.47210594725734,-.11325917153558851,-7.316455816584236,-6.277914142029773,-6.325879336386472,-6.761549992870561,-5.785399335493018,6.894841171865663,16.57421537000874,12.843645059742064,5.220057623492746,-3.813299856725167,-10.051165980763182,-16.420203889130285,-29.183435066681557,-64.5705886743102,-181.43163787734505,-272.3838235144402,695.9626147441294,397.20604751762363,-1430.9649107108592,-343.8161049808414,-10840.70196519443,3453.3010516439876,-827.616882848196,1299.088897602802,867.9236374610335,248.20433151041067,209.92149032340356,104.5932404597956,56.93976849335743,19.20504507096003,9.300602996624374,-3.0671728952866175,1.5669942788764133,-5.575219767602496,-4.794704065680643,-12.570054144236753,-3.2879617770347638,.4418344453860932,16.17975893765613,15.672094697047777,15.5141904955638,-6.224922690764802,-9.506443517257205,-24.595484776028343,-43.39472549693245,-113.80000983072682,-179.30887547689812,-162.42212696599955,210.28695062763467,461.44982475214965,-3231.3822724351485,-18380.248977426934,-21415.51152670408,-11789.651384311637,6340.076145128395,3254.3286688062612,-274.13539619635947,816.2157446632062,214.24479740751747,150.50951383829917,62.077231813228565,28.921613512340514,-1.735374746396482,-.921989296085248,-10.299898240809465,.679005237978899,-28.35267475528701,1.4030381833925814,-4.464986157732529,13.739274709477487,12.454719286950338,19.12568021630095,11.158748163655963,-3.305141022990702,-16.992665274592852,-22.790809731221124,-60.8521790674469,-118.67047187223945,-253.85827683649717,-106.10534760670436,477.3340941263651,-4606.7423967050645,-6140.070633862854,-9240.48168018392]}},mouth_filter={real:[4.634089151999296,.7844322938332674,-1.1596739705934982,3.99333650697934,1.0745202382104644,-.8656673984377853,-.9793198402653664,-.5584811302493011,-.3507978465550091,-.2844107277454577,-.08814236292249976,.027465161121858393,-.014037496255053593,-.004551261004420112,-.009717329721969425,.0018722497460425004,.0003442470754354086,.0018722497460384895,-.00971732972196023,-.004551261004423991,-.014037496255053029,.02746516112186332,-.08814236292250524,-.28441072774544834,-.3507978465550091,-.5584811302492986,-.9793198402653659,-.8656673984377845,1.0745202382104642,3.9933365069793414,-1.1596739705934984,.7844322938332663,-.641460120747133,-1.4031948309962614,-.7262152854672136,2.8301862310857646,.2290189260637008,-2.487189394667696,-.8229247877690783,-.038551737265843086,-.20580868221576679,-.2850592867303046,-.18459030185549916,.058925447647408556,.008694333491579526,-.008600101734962382,-.004854517003603619,-.0004539351773376722,.0009219435427983815,.0017350493936515445,-.0021057925479370247,-.006027538445016255,-.01880365799458189,-.023918178864192268,-.02075717372475532,-.18669623657203888,-.4341370562550853,-.3648050484476391,-.3216150714186278,-1.8059188349376913,.7063901150285793,3.4760111666249314,-.5602942662325473,-.8831364418861832,-3.195882770527733,-4.13223918108782,.7790414814509841,5.061292384502565,1.5447671531259652,-2.8176609661232312,-.6374890195765597,.3691459960086436,-.00037729870766316427,-.17990982199486863,-.03256951045523579,.008508906317592067,-.014523430514595712,-.012452101483067112,-.0012625852907501049,.00028475514852645983,.0011591891684665802,.00039450549224649017,-.002943469227087628,-.010724474299968166,.006126215888163524,.029252238624593387,-.12159824966625053,-.3107693078486412,-.4136447035413494,.022306497695738548,.07436691304800991,-2.671809212188217,-.7771906111787475,3.976289807640388,3.207935449343302,-4.401230089942919,-2.566081699385831,-2.553218193276197,2.0684625359523285,4.9974951908094045,2.143461857355776,-1.7847370377532255,-.28821333774369,.10766200451394388,.18782859841053653,-.0193108917008963,-.006256720927446059,-.006437187190313089,.0021510630118947156,-.011505776785749768,-.002999231926397348,.00030084525589988385,.0010941864062154283,.0003028882149976747,-.0032329177128834767,-.010312595680378463,-.006834080237665061,.019823041367851263,-.007895052454447368,-.23245655665346024,-.14923618615195547,.05641908141962149,.16707514445150673,-2.184956285901395,-.5408888606564619,4.051653834823219,4.240622601012528,-1.7936849281843577,-2.9840428724267536,-3.2115132203593,-1.9470763746691873,4.151869311494347,2.486229447467814,-.30639511041804085,.024820417007377235,.2757710085726073,.05525978458989932,-.14220319122433717,-.08642751724431888,.023244530667997254,.012523451759435138,-.005854686598788948,-.0029976575640192626,-3555580955012693e-20,.00047377824955015626,.0009959620642497164,-.0009891981657287328,-.009758054750674029,-.020619695697678356,-.003701524175126409,-.003593154009926945,-.045481667679613515,.09030548991011282,.19683301699858768,.20611623580645685,-.9023367246203237,.06530682818789532,4.778833310824648,2.90263773237818,-3.2466266324527706,-2.1436478188271333,-2.2561432890218653,-1.9115416020763942,2.2130343552583907,1.991599398095366,-.05649573908332922,-.2528646737117784,.14962266633073235,-.00992240782187535,-.1479065510292869,-.07230224268075354,.005831852376050549,.002268606405267462,-.00013275302826153175,-.0006310274336930969,9150978648176796e-20,.0003197274601145269,.0005335386797852833,-.0005879102342076279,-.005240875243933554,-.009186076660159815,.015159206837947898,.016910593952452414,-.09901788058463483,-.09983912805765208,.28004861021942,.3730027305003697,-.08526059144020254,.4118969503661739,2.9117111935410587,.660455592787651,-2.6585359534260435,-1.484629636420711,-1.542921538821994,-1.005759811438559,1.6171176031175611,1.3492912586213337,-.4285789742706764,-.5000605867377985,.0277131696617224,.11528070486941493,-.039483986090959794,-.04467291098970881,-.009211603020620907,.0005030322344725036,.00117999940390684,-.0004218477462483022,4668492787763195e-21,.0003154741570421968,.0001689251312381811,-.0012866387173093054,-.002113986757118998,-.0022343140961022454,.009225955563893159,-.0022666885302687536,-.0775371445465696,-.14256276290766454,.02794617379150273,.115246314279082,-.3242302049719249,.3084111937816441,1.9739342660507115,.8892192476393134,-1.5931958725731872,-1.0137169086218167,-.9822075545246289,-.552710782290491,1.084545546778825,1.0070569814426842,-.18251897039350226,-.37931318856894325,-.013449845022921075,.07576451530119738,-.03536912397937072,-.015619619770784467,.003123860549792537,.002840986374306701,-.00016094314378723183,-.001044210904420302,-9894109705724881e-20,.00016280791369542986,.00021650467324038706,-.00047567037374047843,-.0009232845910597663,-.0014357330004678133,-.00013185634410259166,-.008798056861491687,-.057667801386191805,-.014139365016219003,.15150048657312606,-.0631568216976208,-.5270354549056385,-.11064525699952842,1.3541882686537436,1.0048741532970387,-.8264105229116342,-.5578834243278299,-.5469280538647021,-.22545269169536206,.6740428991302807,.6374636053138222,.053213891179403915,-.1632304777054518,-.05067162930818387,.005833316698649947,-.012742844783306895,-.00715961601984566,-.0009337735719244645,.001222206196653114,.00017574396951624128,-.0005642074481669886,-60828659546840626e-21,9287129044466804e-20,.00015000413209498726,4777345737973158e-20,-.000326961738278439,.00024195810565667486,.0008069468543876286,.002416256214300178,-.021930873945379376,-.011688581845023685,.11525275913926007,-.020751088469611444,-.3358848290662982,-.021354414893159417,.8127755863807554,.7262450255448635,-.35235216014446363,-.262404547454645,-.25116485949546724,-.04741694933416732,.4158122686113258,.36754912691134745,.031499405618264475,-.1182059528936131,-.027325517544006306,.017104517731676545,-.0028988620733824016,-.007663004156626558,-.002937770251221402,.0008578440198834375,8323301800622004e-20,-6662617693461511e-20,30121602117794285e-21,27157707030347298e-21,53948506612911946e-21,41294414526828764e-21,-.0004553693594539587,-.00011944277202748304,.001701190526917767,.0001873685257440868,-.0020488748359166246,-.00585606517976919,.014332522459211712,-.02484159185287883,-.16044866683911937,.06313306842167594,.4788490370685087,.4692297706881396,-.1005858110717496,-.10558450478212159,-.09457265972563605,.030818986514241645,.17934859926238414,.1371890527220369,-.010905020288841244,-.05427060295960378,-.00730908104572425,.01494907224279079,.0034945285778568377,-.0038412851930084225,-.0011597829517094804,.00044322180186623985,5455121694442779e-20,-9279462424996922e-21,9507885190619462e-21,4200799803523239e-21,40012008897297825e-22,-11774818209916229e-21,-.00027037083981188163,-.00035658526841883775,.0010094103856456143,-.0005290499699426922,-.007468209882087681,-.0022588127195562607,.01821063404239867,-.009508805432907743,-.08565117475386126,-.014342078173992242,.19289673419785613,.23928297364621173,.03914952025170177,-.061014517221157215,-.05736656592266169,-.008006465521422522,.07628924212143612,.062033108089888676,-.002667484924925014,-.0246273437917321,-.005372625137310909,.008065311386827924,.003010829724923111,-.0014118319882570156,-.0004224591430003595,.0002628806189511801,39126968311475854e-21,-25576892658974124e-21,-1309983173701899e-20,6.801480541426069e-7,6975522236215794e-21,4114046508307493e-21,-6137075555430566e-20,-.00013364764935139172,.00021919093935820536,-.0003468738012346682,-.0034793424266583023,.0004035246240741906,.01373845906597586,.0021423976061818307,-.037152134230387414,-.017035854478310443,.07316876401329736,.09355872729895164,.001337949029101016,-.028771535917646113,-.027836987718903094,-.005604457313736932,.030982713752819017,.02581213989119773,.0007489249278141597,-.007918779820161995,-.002052401353006265,.0023870007142673053,.00047709621801237946,-.00019244333515306637,2364174882971905e-21,7863007338347215e-20,10976829691696413e-21,-4947843344860727e-21,-29053042363364555e-22,23830467829361056e-22,3902367137310874e-21,-26460791618778472e-22,10608628096643537e-21,33021940418689286e-21,.0001912157704189101,6744417554786651e-20,-.0009611582867201079,.0008700824433074122,.006748472189696884,.0013604220025846133,-.013837221190936331,-.007504997730019378,.030023800478366884,.03975095856333811,-.00010247159736706737,-.01163043609268417,-.009626682958985564,-.00012449081323135682,.009896662293294292,.008071845289262908,.001158720450950982,-.0023373825953736087,-.0008071121564679781,.0006310569712201902,.0002505504276275349,-.00015724082609640453,-29456254661901335e-21,22436391551144613e-21,5761402105694336e-21,9.283623811527878e-8,-2.983219466927386e-7,3.946914817524284e-7,-1.897541367332826e-7,2.3086718690330816e-7,-3237987845418275e-21,2913669617854417e-21,9134041606690386e-20,.0001372070597261884,-.00027185621825451397,-.00025621479435585686,.001222650455527893,8519300212965707e-20,-.004064865703922135,-.0002922158904863416,.011494835522638509,.01340946760762054,-.0005424133851379836,-.003990441696268225,-.002867593424518791,.00011970246178788614,.0032259655922311906,.0027177896529416603,.0002903975153386597,-.0005604564767737224,-.00011868935035429348,8693262596010879e-20,40585244752836994e-21,-3968539962639957e-20,-3367570219465958e-20,18041324860728306e-22,7.152741534115013e-7,-2.587487777809714e-7,-3.51875885820411e-7,-4.961297544842871e-7,4.739283672425875e-8,-2.7763787498630026e-7,-8.416577840620988e-7,3.076152606776989e-7,1927255849211769e-20,35189855392011486e-22,-9867805313318345e-20,-6263293993642404e-20,.00017511504940116496,-9481629674849642e-20,-.0010867114051789507,.00038291262596998446,.0037605600166853263,.003351397629679482,-.0010579625982184212,-.0008390052002158238,-.0005261917184453804,.0005577130695074325,.001283544793351508,.0008015192740031828,6149189800009521e-20,-.00011622895984693472,-2362760140891841e-20,3979172224729024e-20,7029078796257478e-21,-8705139388114963e-21,-17451721719085544e-22,-1971994185063341e-21,-7.510397197877928e-8,-6.311010307616012e-8,-6.552744337836665e-8,-1.271443792432593e-7,9.324605121808825e-8,1.5092375607837617e-7,-4.063360621580998e-7,4.884248263707688e-7,6200605205347868e-21,9962508509707863e-21,-8421841039830522e-21,-21130341683092213e-21,-86580287858942e-19,-.00010846093496444906,-.00019573231564846473,.00038253737826254207,.0014355018795734822,.0012361430930244762,-3833056265541349e-20,-.0004569355827924844,-.00013724958223101865,.0005563817789235216,.0008124065993596201,.00038839544015797694,5265422759948157e-21,-20620767185676097e-21,14058588768839616e-21,24456681475752488e-22,-13038942789126752e-22,32957272146113247e-22,2136839449678527e-21,-3.852178679624797e-8,-3.994963138602985e-7,-2.803297067646553e-8,-4.284183182277093e-8,-2.708778766944344e-8,-4.284183188748842e-8,-2.803297059707543e-8,-3.9949631385981395e-7,-3.852178674647e-8,21368394496269648e-22,32957272146716597e-22,-13038942788497014e-22,24456681475752488e-22,14058588768888149e-21,-2062076718571035e-20,5265422759768765e-21,.00038839544015800736,.0008124065993596922,.0005563817789236077,-.0001372495822309712,-.0008390052002159655,-3833056265530287e-20,.001236143093025543,.0014355018795735538,.00038253737826226555,-.00019573231564817955,-.0001084609349642516,-8658028785851946e-21,-21130341683048624e-21,-8421841039854421e-21,9962508509573061e-21,6200605205511509e-21,4.884248263265511e-7,-4.0633606237408006e-7,1.5092375605026055e-7,9.324605144389865e-8,-1.271443792431322e-7,-6.55274434871341e-8,-6.311010304725215e-8,-7.510397195070611e-8,-19719941850259958e-22,-17451721718998097e-22,-8705139387950486e-21,7029078796332105e-21,39791722247395916e-21,-23627601408864216e-21,-.0001162289598470872,6149189800000526e-20,.000801519274003285,.0012835447933512035,.0005577130695069316,-.0005261917184453106,-.003990441696267554,-.001057962598218309,.003351397629679451,.0037605600166856607,.00038291262597007754,-.0010867114051789164,-9481629674837293e-20,.00017511504940131815,-6263293993629258e-20,-986780531331397e-19,35189855391400817e-22,19272558492233388e-21,3.0761526064323095e-7,-8.4165778419494e-7,-2.776378750472164e-7,4.739283683147069e-8,-4.961297544844503e-7,-3.5187588609488416e-7,-2.58748777781678e-7,7.152741534536303e-7,1804132486106339e-21,-33675702194604274e-21,-39685399626282394e-21,4058524475290039e-20,8693262596008916e-20,-.00011868935035428417,-.0005604564767739365,.000290397515338342,.0027177896529417466,.003225965592230869,.00011970246178728064,-.0028675934245188605,-.011630436092684446,-.0005424133851379863,.013409467607620592,.011494835522638138,-.0002922158904861642,-.00406486570392197,8519300212997122e-20,.001222650455528094,-.0002562147943558541,-.0002718562182545189,.00013720705972611116,9134041606696929e-20,29136696178498302e-22,-32379878454707733e-22,2.308671868622591e-7,-1.8975413675430027e-7,3.946914817523183e-7,-2.983219466241522e-7,9.283623809198153e-8,5761402105795633e-21,2243639155115928e-20,-29456254661848962e-21,-.00015724082609634113,.00025055042762756014,.0006310569712201816,-.0008071121564679325,-.002337382595373471,.001158720450951047,.008071845289262677,.009896662293293411,-.00012449081323185037,-.009626682958985515,-.028771535917645582,-.00010247159736742938,.03975095856333772,.03002380047836699,-.007504997730019033,-.013837221190936397,.001360422002584686,.006748472189696948,.0008700824433074983,-.0009611582867201148,6744417554780089e-20,.0001912157704189886,33021940418677224e-21,10608628096553211e-21,-26460791619305373e-22,3902367137246281e-21,2383046782935803e-21,-29053042364313164e-22,-4947843344860017e-21,10976829691639238e-21,7863007338347967e-20,23641748829703282e-22,-.00019244333515297128,.000477096218012395,.0023870007142673287,-.0020524013530060455,-.007918779820161715,.0007489249278142589,.02581213989119763,.030982713752818712,-.005604457313737466,-.027836987718902747,-.061014517221157166,.0013379490291006914,.09355872729895073,.07316876401329696,-.017035854478310443,-.03715213423038752,.0021423976061819595,.013738459065975945,.00040352462407424605,-.003479342426658237,-.00034687380123471886,.00021919093935825583,-.00013364764935140623,-6137075555434376e-20,4114046508316066e-21,6975522236187713e-21,6.801480541420502e-7,-13099831737122968e-21,-25576892658968157e-21,3912696831142943e-20,.0002628806189511862,-.00042245914300031615,-.0014118319882569644,.003010829724923217,.008065311386827836,-.005372625137310698,-.024627343791731683,-.002667484924924777,.06203310808988808,.07628924212143504,-.008006465521422947,-.05736656592266142,-.10558450478212106,.039149520251701674,.23928297364621154,.19289673419785586,-.014342078173991857,-.08565117475386118,-.0095088054329079,.018210634042398706,-.002258812719556187,-.007468209882087701,-.0005290499699428646,.0010094103856456574,-.00035658526841884875,-.0002703708398118182,-11774818209899307e-21,4001200889696883e-21,4200799803522836e-21,9507885190670247e-21,-9279462424982197e-21,545512169444116e-19,.0004432218018662688,-.0011597829517094238,-.003841285193008305,.0034945285778569305,.014949072242790728,-.007309081045724124,-.05427060295960367,-.01090502028884107,.13718905272203655,.17934859926238284,.030818986514240795,-.09457265972563568,-.2624045474546435,-.1005858110717494,.46922977068813976,.4788490370685089,.0631330684216766,-.16044866683911846,-.024841591852878687,.014332522459211764,-.005856065179769227,-.0020488748359166085,.00018736852574399146,.0017011905269178167,-.00011944277202752463,-.00045536935945402705,4129441452679187e-20,5394850661287712e-20,27157707030347085e-21,30121602117749643e-21,-6662617693466178e-20,8323301800625065e-20,.0008578440198834165,-.0029377702512214973,-.007663004156626477,-.0028988620733823725,.017104517731676455,-.027325517544006247,-.11820595289361274,.03149940561826459,.3675491269113462,.41581226861132453,-.04741694933416768,-.2511648594954663,-.5578834243278299,-.35235216014446413,.7262450255448635,.8127755863807552,-.021354414893159278,-.3358848290662981,-.020751088469611285,.11525275913925997,-.011688581845023685,-.021930873945379303,.0024162562143002332,.0008069468543876767,.00024195810565667153,-.0003269617382785359,4777345737981407e-20,.00015000413209503944,9287129044466804e-20,-6082865954691704e-20,-.0005642074481671269,.00017574396951636955,.0012222061966531885,-.0009337735719245047,-.007159616019845526,-.01274284478330687,.005833316698649947,-.0506716293081837,-.16323047770545204,.05321389117940345,.6374636053138221,.6740428991302817,-.22545269169536208,-.5469280538647021,-1.0137169086218165,-.826410522911635,1.0048741532970369,1.3541882686537434,-.1106452569995289,-.5270354549056377,-.06315682169762069,.15150048657312606,-.014139365016218914,-.05766780138619183,-.008798056861491592,-.00013185634410271281,-.00143573300046789,-.0009232845910599582,-.0004756703737402313,.00021650467324065207,.00016280791369542935,-9894109705727961e-20,-.0010442109044203046,-.00016094314378705795,.002840986374306793,.0031238605497927777,-.01561961977078436,-.0353691239793702,.07576451530119743,-.013449845022920601,-.37931318856894264,-.18251897039350262,1.007056981442683,1.084545546778823,-.5527107822904915,-.9822075545246276,-1.4846296364207112,-1.593195872573186,.8892192476393116,1.9739342660507089,.30841119378164455,-.32423020497192495,.11524631427908204,.027946173791502632,-.14256276290766468,-.07753714454656983,-.002266688530268584,.00922595556389295,-.0022343140961023017,-.002113986757118863,-.001286638717309387,.00016892513123889085,.0003154741570421954,4668492787631832e-21,-.00042184774624882054,.0011799994039063304,.0005030322344726728,-.009211603020620632,-.044672910989708575,-.03948398609095928,.11528070486941518,.027713169661722662,-.5000605867377983,-.42857897427067776,1.3492912586213337,1.6171176031175631,-1.0057598114385595,-1.542921538821994,-2.143647818827132,-2.658535953426042,.6604555927876489,2.9117111935410573,.411896950366174,-.085260591440202,.3730027305003694,.2800486102194187,-.09983912805765198,-.09901788058463504,.016910593952451765,.015159206837948214,-.009186076660159786,-.005240875243933095,-.000587910234208083,.000533538679785546,.0003197274601145269,9150978648180744e-20,-.0006310274336939812,-.00013275302826212034,.0022686064052679666,.005831852376050361,-.07230224268075294,-.14790655102928651,-.009922407821875265,.14962266633073282,-.2528646737117785,-.05649573908333014,1.9915993980953646,2.213034355258391,-1.9115416020763922,-2.256143289021865,-2.9840428724267536,-3.246626632452768,2.902637732378178,4.7788333108246475,.06530682818789552,-.9023367246203219,.20611623580645633,.19683301699858602,.09030548991011267,-.04548166767961341,-.00359315400992807,-.003701524175126041,-.02061969569767819,-.009758054750673735,-.0009891981657294052,.0009959620642513028,.00047377824955015637,-3555580955030948e-20,-.002997657564020394,-.005854686598788986,.012523451759435134,.02324453066799726,-.08642751724431853,-.1422031912243366,.05525978458989915,.2757710085726067,.02482041700737748,-.3063951104180418,2.486229447467813,4.151869311494343,-1.947076374669187,-3.2115132203593006,-2.5660816993858284,-1.7936849281843579,4.240622601012526,4.051653834823222,-.5408888606564615,-2.1849562859013973,.1670751444515067,.05641908141962089,-.1492361861519553,-.23245655665346052,-.007895052454447478,.01982304136785135,-.006834080237665613,-.010312595680378572,-.0032329177128843376,.00030288821499861344,.0010941864062154279,.000300845255900019,-.0029992319263979755,-.011505776785751019,.0021510630118943804,-.006437187190312738,-.006256720927446368,-.019310891700895682,.18782859841053667,.10766200451394509,-.2882133377436886,-1.7847370377532281,2.1434618573557747,4.9974951908094,2.0684625359523268,-2.553218193276198,-3.1958827705277333,-4.4012300899429215,3.2079354493433048,3.9762898076403923,-.7771906111787469,-2.6718092121882195,.07436691304800956,.02230649769573629,-.41364470354134925,-.31076930784863965,-.12159824966625225,.02925223862459385,.006126215888163498,-.010724474299966393,-.0029434692270879645,.00039450549224720385,.0011591891684665805,.00028475514852767235,-.0012625852907517934,-.012452101483067435,-.014523430514596241,.008508906317591708,-.032569510455234915,-.17990982199486819,-.00037729870766311575,.36914599600864506,-.6374890195765606,-2.8176609661232312,1.5447671531259644,5.061292384502564,.7790414814509846,-4.132239181087822,-.6414601207471337,-.8831364418861835,-.5602942662325467,3.4760111666249305,.7063901150285783,-1.805918834937694,-.321615071418629,-.36480504844764006,-.4341370562550854,-.1866962365720416,-.02075717372475496,-.023918178864192875,-.0188036579945808,-.006027538445015406,-.002105792547937667,.00173504939364955,.0009219435427983818,-.00045393517734262397,-.004854517003600706,-.008600101734964675,.008694333491579725,.058925447647409854,-.18459030185549863,-.2850592867303041,-.20580868221576676,-.03855173726584271,-.8229247877690758,-2.4871893946676935,.22901892606369992,2.830186231085761,-.7262152854672138,-1.4031948309962614],bottom:{real:[5678.1086041894205,20900.18095010153,3447.0499761258557,3006.2920785513897,1095.893903110946,386.81104976321694,202.8746518150621,112.96922946840166,74.1575795981121,62.41331559167534,46.93121306523181,32.70344442111712,23.138509584976408,18.532485453515367,13.839857335386801,11.995391672846374,11.011316958211436,11.995391672846273,13.839857335386798,18.532485453515342,23.138509584976408,32.703444421117176,46.93121306523187,62.41331559167557,74.1575795981121,112.96922946840168,202.8746518150621,386.8110497632174,1095.8939031109464,3006.2920785513907,3447.0499761258566,20900.180950101545,11652.541375531215,6105.997676743737,3079.1167046754913,1776.9919423314705,759.6359173617328,370.96222186223144,186.7255065372885,104.06222158598892,72.77622691509018,54.13204733326223,40.617443247446026,26.90529733912283,20.596051003825067,16.964451546104712,12.574490983994691,10.149549151428955,9.456590806505238,9.976865753609388,12.029240511903456,15.043219420350251,20.838711299344116,30.55361456673147,44.40616386235552,58.56586141233153,70.13283587506174,104.51314473208357,189.56857349608143,377.16693201205015,884.1270089569301,2239.7595640192126,3145.1913405539117,6958.57407595036,9609.510642612793,4992.66087693942,1669.5618690661463,1059.1995113905639,549.1627979092727,278.9492383050029,170.62516999169446,111.93749936902557,73.27025198501791,52.99804226348363,37.1425467686779,24.977928698897,19.757351140056166,15.549412568397655,12.28744495322669,10.159177492646036,9.2913516551568,9.470740464444594,11.366894624691977,14.908412193461192,19.162809661823754,25.525875481280988,36.84658597962618,51.02203820902725,67.24730622946205,96.04385328662893,163.05718048491738,294.7698036282343,519.2351467039468,957.5703947344355,1368.5173470150648,3871.635585616455,5303.479827448212,3579.2066474003154,1207.1822867649944,879.86972928318,366.8852848474137,208.17182668800805,144.26637111917213,100.24198689599578,68.8181171714087,48.74457566630013,36.07983597894852,24.716276003836366,18.3829469088219,14.338503983471835,11.518473012854098,9.438998154290486,8.68554477575729,9.311149912848768,10.931731847155714,14.242659983217518,18.454273027639637,22.997981877882626,32.77535405493718,47.78443053413782,65.98233363630344,97.03921983999892,143.27997074170094,205.80805308530745,348.18684046898466,831.79281380406,1177.2730197279227,2733.3936378292215,3938.2641458688445,2819.7837494548567,820.3646271709737,471.375875031461,271.87929154854345,194.2701704157619,144.96617790506966,97.57679477120183,61.3119854017338,44.97129033826018,31.99456115711602,22.17888295501289,16.262756648609532,13.335771300720145,10.777277796853795,9.487237267421916,8.417922066711588,8.861550499416428,10.464447670423642,13.467380568991793,17.38086060460302,22.603085253093905,31.97609952936357,44.35670827935971,58.842492346581366,84.94360631088193,129.92857886018368,172.62888515328848,240.5800338500775,441.25082967480506,690.433249973267,1627.6849016299075,3510.6104569290264,2572.5928689582997,734.8496523828304,346.49155817100205,245.54955425961745,154.38419406683067,123.89126600552243,73.59283233646991,51.17681501405671,38.82351935658649,27.703018951863196,20.40402437294096,15.615914454631133,12.262838166368205,10.911393710353273,9.283100585377444,8.075802171650052,8.956035252138228,10.337739417364297,12.597356227543543,15.877991319670912,20.72637001773071,27.911545681671033,37.940376333065345,53.07587763393232,72.52038224079779,117.05897406186033,158.1266906527397,212.38391288711696,299.4867836696948,458.16531800810117,1452.428405553594,1811.7186422893874,1492.3389942582992,530.6523397479768,291.7696699108661,187.69065022036725,128.13046637777484,90.24516666546559,62.18605129748434,41.71026796673959,31.806783986884078,25.068630438788546,18.54255326241466,14.666394584276578,11.150365108371181,9.960676409836836,8.55252573747062,7.703013874435423,8.286347770022205,9.814492991323037,11.655898242076917,14.231766288773079,17.885476571421012,23.41308296098225,31.608461656401264,43.352221767718426,55.67641268585088,83.62026845099376,126.42534521303489,156.87210807500801,246.58019931340195,341.8826656952369,826.9835845406182,1404.2471167163787,1228.1386668678601,466.96068651596903,262.22064771032797,169.28009741248692,115.01657309947615,81.65638336581607,54.57935153074288,37.96052931128009,27.27027576498051,21.626986342929015,16.174148423485327,13.175385803191114,10.818108303701184,9.065785066362263,7.627579207821866,7.610701632113583,7.115802452704004,8.901126539273568,10.779707882412266,12.420331822356596,16.59830630324467,21.01203349353848,26.831312912868523,33.05177460907913,46.309734418779385,65.38320130208703,99.00247790521989,128.56748384849996,196.60807492406175,298.23398084325686,608.3625625870363,1076.3354380676617,975.850985820027,374.17471043828004,222.04753134206624,153.76758510324842,111.73984833658845,72.541074744398,46.502855765338275,35.06292130326583,24.451970593539095,20.281233326031273,15.065285185027921,11.707355473726542,9.74590294873012,8.114918006499499,7.096468111189281,6.67969820668914,6.587891450865514,7.818605119903106,9.54274635440958,11.594349559722247,14.318362157023484,17.8369152266786,22.844712934499004,29.434722992970055,39.99208797032299,55.28417554284476,86.77349231350205,121.99890155292813,175.66007701025202,246.61763210131207,451.5481073835745,628.040196235289,603.2938841078131,273.4211243626902,189.2849519360518,134.97815383583696,92.53793289958462,56.66597652017423,40.65405084235827,31.171413996879973,21.026413392061954,18.00341753039012,13.721993308218343,10.669689426212042,8.356205196082156,7.386888239801643,6.517599896433226,6.058499886687237,6.563882642693142,7.133679508828778,8.613838618839619,10.802606348653876,13.366335355351938,15.820551075574965,19.84516301549211,26.999239022736937,35.45845828087051,46.36309058448381,68.28146532850205,105.62610076866049,153.51240187831726,202.14938057052223,301.9853933671321,397.56324291610815,405.30563382951226,215.91082743746526,149.29333201310212,99.68010411133722,70.84414471218992,48.69670511438433,36.63705653603757,25.596184359277657,19.02307727771527,15.749761366858216,11.951033594401437,10.086463061934033,8.350629388119184,7.202239302975744,6.080777960262786,5.761268315012427,6.027372518289653,6.616549654230065,7.436545271508516,8.678329707766515,11.615060741665609,13.833866336064673,18.575864228781477,23.246005390172172,31.555902400033563,40.67766950058933,56.667715144820136,81.40820710822457,111.98547216305556,158.44613292857147,210.62780774515824,290.55794842865595,312.2562114669174,170.30250321119885,113.87454497096817,82.35425818333391,59.81860353409389,44.07044665600381,32.89377820490469,22.4965398710333,17.094011041557415,14.588382118274911,11.200549789992062,9.574583047751457,8.087405619242082,6.792599936861302,5.496191080596358,5.197170302313163,5.419942630651153,5.767860329309939,7.002053410482667,8.26429520320773,10.213916707261937,12.095005343850676,15.601004576857186,19.781090153028195,26.29348154312569,36.51556709004455,48.7408643730755,65.51772697359655,85.61686709192507,121.65124801185172,164.28464153081055,206.40983634767443,220.41852448872194,129.1056378165026,92.68914658233268,70.79106659924526,51.94356373034489,38.624038300983216,28.74288745792487,20.6631866841911,16.243037999103294,13.92500717092327,11.024255100844002,8.413995029686147,7.040147025381352,6.285688883641814,5.356080411446604,4.998534821439756,5.25099810618907,5.58096385535777,6.822302978819239,8.563400720638853,9.756320349629956,11.812088062444902,14.805264064130581,17.93575786748271,22.626272918294738,31.174402898500958,43.3023123072588,56.326841577080955,74.05099753610281,101.37453317449018,126.60409524008277,162.42301117619624,177.05193776506522,115.72813424994953,82.32606696648455,61.307330817502205,44.340846370849256,33.378870891164695,24.521965532974615,18.92394541612011,15.051214231467789,12.320737648353592,9.799975697099192,7.714567062664442,6.815255212600584,5.790991468644493,5.52549512713441,4.903702971198334,5.497726193903705,5.421043366592692,6.298858076371289,7.943078732352952,9.377851733747853,11.242198007971071,14.240421326197554,17.651811381705546,21.65902489648891,29.131550319460956,38.48508619988707,50.09231717784205,64.4932691398826,88.47403316985431,111.97252766350397,138.89119149223308,144.08748993083097,100.36203094373164,71.13075605018649,51.595222833795184,37.837750442044026,29.957897076201892,23.30758721647872,17.870061723923296,13.548228816751676,10.730279953947793,8.794138360854445,7.518939289315107,6.705955395914339,5.428620024764695,4.999797681915652,4.676270375800014,5.243183653118418,5.230872922380635,6.188105512403826,7.526151057968344,8.58301440056036,10.380584080562716,13.063097810243177,16.764705389876635,21.077788907239153,26.94625960151893,35.064067560413655,44.05394442010765,58.89519929139968,80.48050259180935,105.53062749300898,125.53124807748995,123.85180136306964,91.38685374872499,64.04380874388134,47.37724689060619,36.91779508742116,29.98630636615422,21.922248103539825,16.586233036173578,13.010233921941435,10.477074169109398,8.698555889337047,7.253735136999216,6.347024549002974,5.356926823245913,5.009657551484697,4.723715178338234,5.0872350526917325,5.223561398000081,6.241954700641649,7.152186377107882,7.932055855788007,9.974158228854499,13.174966641491576,15.965377755431728,19.87195953345976,25.954935810295414,33.85428376681964,44.1133188893869,56.69989223438384,81.03385717253579,104.09119566434012,123.77824150517087,114.20520067738279,85.22969325973847,60.29515709869259,46.590785285134146,36.201434834295654,27.092016678743615,20.190577794974832,15.811850117592071,12.818302458338326,10.737776338076218,8.44173952770926,7.256366062006143,6.172304178446841,5.431932326904466,5.446236553247722,4.806438682985975,5.446236553247728,5.431932326904464,6.172304178446841,7.256366062006148,8.441739527709267,10.737776338076216,12.81830245833833,15.811850117592071,20.190577794974825,27.092016678743608,36.20143483429564,46.590785285134125,60.29515709869255,85.22969325973847,114.20520067738286,125.53124807748999,104.09119566434013,81.03385717253583,56.69989223438384,44.113318889386896,33.854283766819655,25.95493581029537,19.871959533459762,15.965377755431739,13.174966641491576,9.974158228854503,7.932055855788011,7.152186377107889,6.241954700641652,5.2235613980000775,5.087235052691731,4.723715178338238,5.009657551484697,5.356926823245915,6.347024549002971,7.25373513699922,8.698555889337047,10.477074169109407,13.010233921941426,16.58623303617357,21.92224810353982,29.986306366154224,36.91779508742115,47.37724689060615,64.04380874388131,91.38685374872492,123.85180136306961,138.891191492233,105.53062749300904,80.48050259180923,58.89519929139969,44.05394442010761,35.06406756041363,26.94625960151893,21.077788907239164,16.76470538987663,13.063097810243177,10.38058408056272,8.583014400560364,7.526151057968346,6.188105512403833,5.230872922380638,5.243183653118417,4.676270375800014,4.99979768191565,5.428620024764696,6.7059553959143425,7.518939289315103,8.79413836085444,10.730279953947782,13.548228816751662,17.870061723923293,23.30758721647872,29.957897076201906,37.837750442044026,51.59522283379521,71.13075605018645,100.36203094373161,144.08748993083097,162.4230111761963,111.97252766350395,88.47403316985432,64.49326913988264,50.09231717784207,38.48508619988706,29.131550319460946,21.6590248964889,17.651811381705546,14.240421326197549,11.24219800797108,9.377851733747859,7.943078732352953,6.29885807637129,5.421043366592696,5.4977261939037065,4.903702971198332,5.525495127134404,5.790991468644487,6.8152552126005865,7.71456706266444,9.79997569709919,12.320737648353587,15.051214231467785,18.92394541612011,24.52196553297462,33.37887089116468,44.340846370849256,61.30733081750221,82.32606696648458,115.72813424994952,177.05193776506513,206.40983634767417,126.60409524008281,101.37453317449015,74.05099753610281,56.326841577080955,43.302312307258816,31.174402898500965,22.62627291829474,17.93575786748271,14.805264064130563,11.812088062444909,9.756320349629952,8.563400720638858,6.822302978819243,5.580963855357768,5.250998106189071,4.998534821439756,5.356080411446606,6.285688883641807,7.040147025381352,8.413995029686149,11.024255100844005,13.925007170923264,16.243037999103286,20.663186684191096,28.742887457924876,38.62403830098324,51.94356373034486,70.79106659924523,92.6891465823327,129.10563781650256,220.41852448872183,290.5579484286558,164.28464153081066,121.65124801185169,85.61686709192507,65.51772697359652,48.74086437307553,36.51556709004454,26.29348154312569,19.78109015302819,15.601004576857186,12.095005343850689,10.213916707261948,8.26429520320773,7.002053410482677,5.7678603293099435,5.419942630651146,5.1971703023131655,5.496191080596355,6.7925999368613,8.087405619242078,9.574583047751446,11.20054978999206,14.588382118274911,17.094011041557405,22.496539871033306,32.89377820490469,44.07044665600381,59.81860353409384,82.35425818333394,113.87454497096807,170.30250321119888,312.2562114669173,397.5632429161083,210.62780774515818,158.44613292857147,111.98547216305556,81.40820710822456,56.66771514482015,40.677669500589346,31.555902400033585,23.246005390172176,18.5758642287815,13.833866336064665,11.615060741665616,8.678329707766514,7.436545271508522,6.616549654230062,6.027372518289661,5.761268315012427,6.080777960262785,7.20223930297574,8.350629388119183,10.086463061934035,11.951033594401432,15.749761366858216,19.023077277715267,25.59618435927765,36.63705653603754,48.696705114384315,70.84414471218994,99.68010411133719,149.2933320131021,215.91082743746531,405.3056338295121,628.0401962352888,301.9853933671322,202.14938057052214,153.5124018783174,105.62610076866049,68.28146532850205,46.36309058448382,35.4584582808705,26.99923902273696,19.845163015492105,15.820551075574963,13.366335355351934,10.802606348653876,8.613838618839624,7.133679508828785,6.563882642693131,6.058499886687237,6.517599896433232,7.386888239801645,8.356205196082152,10.669689426212047,13.721993308218325,18.00341753039013,21.026413392061936,31.17141399687996,40.65405084235825,56.665976520174254,92.5379328995846,134.978153835837,189.28495193605173,273.4211243626903,603.2938841078127,1076.3354380676617,451.5481073835747,246.61763210131207,175.66007701025202,121.99890155292813,86.77349231350213,55.28417554284478,39.992087970322984,29.434722992970055,22.844712934499,17.836915226678613,14.318362157023493,11.594349559722259,9.542746354409577,7.818605119903106,6.58789145086551,6.67969820668914,7.096468111189283,8.114918006499497,9.745902948730114,11.707355473726548,15.065285185027918,20.281233326031277,24.451970593539112,35.06292130326583,46.50285576533829,72.54107474439797,111.73984833658835,153.7675851032484,222.04753134206618,374.17471043828004,975.8509858200265,1404.247116716379,608.3625625870361,298.2339808432568,196.60807492406164,128.56748384850005,99.00247790521995,65.38320130208704,46.3097344187794,33.05177460907913,26.831312912868544,21.012033493538468,16.598306303244666,12.420331822356601,10.779707882412263,8.901126539273562,7.115802452704002,7.610701632113586,7.627579207821871,9.065785066362265,10.81810830370118,13.175385803191121,16.17414842348535,21.62698634292904,27.270275764980493,37.9605293112801,54.579351530742926,81.65638336581611,115.0165730994761,169.28009741248692,262.22064771032797,466.9606865159688,1228.1386668678595,1811.7186422893876,826.9835845406185,341.88266569523705,246.58019931340198,156.87210807500793,126.42534521303487,83.62026845099378,55.67641268585091,43.352221767718426,31.608461656401282,23.413082960982216,17.885476571420995,14.231766288773079,11.65589824207691,9.814492991323034,8.286347770022209,7.703013874435423,8.552525737470617,9.96067640983684,11.150365108371185,14.666394584276583,18.542553262414668,25.068630438788542,31.80678398688409,41.71026796673957,62.18605129748433,90.24516666546555,128.13046637777475,187.69065022036725,291.769669910866,530.6523397479768,1492.3389942582987,3510.6104569290255,1452.4284055535948,458.16531800810117,299.48678366969483,212.38391288711682,158.12669065273965,117.05897406186025,72.52038224079779,53.07587763393235,37.94037633306532,27.91154568167104,20.726370017730687,15.877991319670903,12.597356227543528,10.337739417364284,8.95603525213823,8.075802171650054,9.283100585377436,10.911393710353279,12.262838166368201,15.615914454631143,20.404024372940963,27.703018951863204,38.82351935658651,51.17681501405669,73.59283233646987,123.89126600552244,154.38419406683062,245.54955425961754,346.491558171002,734.8496523828308,2572.5928689582984,3938.2641458688445,1627.6849016299093,690.433249973267,441.25082967480483,240.5800338500775,172.6288851532884,129.92857886018368,84.94360631088196,58.84249234658136,44.356708279359744,31.976099529363548,22.603085253093905,17.38086060460301,13.467380568991784,10.46444767042364,8.86155049941641,8.417922066711593,9.487237267421909,10.777277796853792,13.335771300720136,16.262756648609525,22.178882955012895,31.994561157116046,44.9712903382602,61.31198540173379,97.57679477120189,144.96617790506969,194.27017041576195,271.87929154854334,471.37587503146125,820.3646271709738,2819.7837494548558,5303.479827448214,2733.393637829224,1177.2730197279232,831.7928138040597,348.18684046898477,205.80805308530728,143.2799707417008,97.0392198399989,65.98233363630345,47.784430534137826,32.775354054937196,22.99798187788262,18.45427302763963,14.242659983217516,10.931731847155714,9.311149912848757,8.68554477575729,9.438998154290482,11.518473012854098,14.33850398347184,18.38294690882191,24.716276003836377,36.079835978948545,48.744575666300136,68.81811717140873,100.2419868959958,144.26637111917196,208.17182668800794,366.88528484741386,879.869729283181,1207.1822867649948,3579.206647400314,9609.510642612793,3871.635585616455,1368.5173470150646,957.5703947344349,519.2351467039468,294.7698036282341,163.05718048491758,96.04385328662897,67.24730622946208,51.02203820902724,36.84658597962616,25.525875481280988,19.16280966182375,14.908412193461192,11.366894624691964,9.470740464444583,9.2913516551568,10.159177492646041,12.287444953226698,15.549412568397658,19.757351140056148,24.977928698897006,37.142546768677924,52.99804226348364,73.27025198501791,111.93749936902559,170.62516999169443,278.949238305003,549.162797909273,1059.199511390564,1669.5618690661465,4992.660876939416,11652.54137553122,6958.57407595036,3145.1913405539112,2239.759564019211,884.1270089569299,377.1669320120499,189.56857349608163,104.51314473208359,70.13283587506172,58.56586141233153,44.406163862355506,30.553614566731444,20.83871129934411,15.043219420350246,12.029240511903463,9.976865753609394,9.456590806505236,10.149549151428952,12.574490983994684,16.964451546104694,20.596051003825067,26.905297339122818,40.61744324744603,54.13204733326223,72.77622691509019,104.06222158598892,186.7255065372885,370.96222186223156,759.635917361733,1776.9919423314723,3079.1167046754904,6105.997676743737],imag:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},imag:[0,-.027073229785536494,.5901192988693814,-.9644676127054844,-.6435513043684985,-.6829115331705075,-.33645866529024865,.1935415439422136,-.12487037453098428,-.012369715566745995,.009821656947174946,.001542130029622399,.02081828830073528,.0037303920674802314,-.003883765217723355,.0006069307833895878,0,-.0006069307833869235,.003883765217723578,-.0037303920674795358,-.020818288300735933,-.0015421300296204468,-.009821656947175919,.012369715566746212,.12487037453098428,-.1935415439422141,.33645866529024965,.682911533170507,.6435513043684981,.9644676127054836,-.5901192988693817,.027073229785536425,-2.356307432098977,2.587940347586387,2.1627258263390448,-3.1655869149224403,-.41468157127337424,.7347719953591375,-1.211933554911916,-.10726288955095604,.30943623202091536,.23604949314849888,-1983168313462914e-20,-.015096007795395092,.004417252491343731,.0012110563015863107,-.00040440768488355977,.000567757389230058,-.0005394293684455165,.0008757592919714687,-.002003234803528005,.00426038521803142,-.006208767078144233,.017375416518930226,-.014179868174360925,-.10125602185153701,-.15414023444697653,-.0358003963960097,-.9621107867681807,-.9605345505025396,-1.1229487194040586,-2.1710672351706557,1.4940913514434742,2.721723671160099,1.1141581132568867,-.841736803219896,-5.280137930470969,1.1933011924316357,3.239740520240387,.5838233530507139,-1.2090975123731194,.11812270190565496,.29294962083792114,.3880856379559003,.017661918975066655,-.007528799574903376,-.01833433605761641,.008066808502342615,.0016882901545514294,.00017988558455360213,-.00046271928878641557,-.00012883481246306377,-.001503708333697518,-.0051624614514164694,.005133734466588424,.01635194779532648,-.020739891572331103,.034224425977121886,.14660089916526936,.2579692221979365,-1.297902949650936,-.81053000193538,2.2824415889165404,1.3538813012752462,-3.6141509401212817,-1.364170834350039,-2.525115924658619,-3.1276611078214884,-3.252000824045553,1.0086268501795932,2.576303003859745,.407729723972842,-.2975902384778692,-.0494962237459273,-.03251108057442876,.06713074400583147,-.0201042966896933,-.01057748453125613,.009368038924123134,.009420380399277449,20439677469712496e-21,-.0004604215069295604,9792756390863383e-20,-.00040743814870436565,-.0007444276756590308,-.005313406106324482,-.008145792801664794,-.016837193889943817,.0009032287522820004,.15679003542803616,.24794675857842086,.3081518049446281,-.6522903778756209,-1.340871786671726,2.650867362162943,3.2598446139294937,-1.6423378558800314,-3.9986185110220567,.17392931664300956,.21368421587766026,-1.2315545205448162,-1.742271976628461,1.3054063480052003,1.3750287394245329,-.3502225984293912,-.6224763958828862,-.048937158811492604,.04621371934939938,-.07124817285142081,-.03163818247427977,.009288322138823076,.00589473134051025,.0020720238780862037,.00012946526299033534,-7130655653596095e-20,-.0003880911286883059,.0011018135930776953,.0010417550100125584,.007204075602470576,-.02451231341789871,-.016921302325211343,.019764169882346385,.06258743950423488,-.08728292900258337,-.10008726366432093,-.14363219386863416,1.74690534215911,1.042390648919584,-1.364603392172089,-.6832120976500584,.6689283878072149,.7320877283879961,-.32755194356284695,-.30510623667849596,1.5181969873975902,.3427855602261544,-.7431358427778345,-.3570569990766632,.1310185858494092,.08359045749501881,-.021674632648672316,-.02469255214616152,-.004303489386532218,.0020376676236782713,.002149386520661087,.00038855444421157756,-.0002374605390013383,-.00029830757497495967,-.0001970006488720256,-.0008798249142148044,.007480568970943,.010808720951461402,-.0357981771162344,-.09154171642070627,.00920107640750832,-.19110346978313567,-.6257943092402674,-.13482498836119824,1.785974669626095,1.1747425146844421,-1.173327779558617,.27670322508415535,.3356270851657698,.2710437571302265,-.04917488399628335,-.09917627706172702,.47021789966195177,.19299106678658604,-.25337707381982333,-.21158932458700433,-.0038282192087294945,.07942642110626252,.00492762807522141,-.012631915096635613,-.002085758492304744,.0014730403106953706,.0005628222038354892,-5275302542796766e-20,-.0001104394847276082,-.00013701607546798722,.0002414171366719811,-.00017599692518015115,.0033313264069332665,-.002641595347408199,-.03455140111402242,-.06761433595406231,.057375162080317274,.10414416266224315,-.4897526648425265,-.7572635790435928,.48971199898009016,1.1084142254331173,.07444266944177236,.13102742771679016,-.24374357403537103,-.2835664388260767,-.6520378418759146,-.3685028492139317,.37230089042480646,.4991450162764402,.03144937434939515,-.2399287515678561,-.08609207689152655,.032374807759909224,.0062294082126362945,-.006091793021644244,-.0010414824560445231,.00015455144974867572,-8998084242691725e-20,-15754152380049444e-21,2.760348450088792e-7,-849255802822784e-19,-9538306571273261e-20,.0012356709589061894,.001982516064942067,-.002517283385234882,-.028888564425605757,-.016030883614829267,.06926075485332472,.01050151756755099,-.24153406544338693,-.2847803977366839,.37357513895849587,.5650775022620796,-.29338428828582186,-.5501221349190477,-.1325676957723277,-.09330684787486831,-.2666866763405996,-.24770054522287138,.1944884297335735,.335914872615766,.06235746981204858,-.1546651423691924,-.03904218756455085,.014396528935747412,-.0017849945305527066,-.004079829332167153,-.0019408045705910123,.0008489503374664237,.00039593785796133193,55592435290972645e-21,-4196563644218682e-21,-6285292982400746e-20,-.00034629566400638584,-4824134743206145e-21,.0005751200811331312,.00033489534843084444,-.0031901125163299256,-.010909574115055,.01692045877708555,-.06078620927575318,-.21998547499285445,.011288166830458734,.39450427611204475,.321564638169156,-.16694523801433098,-.28285607915278405,-.008643196177164006,-.016216948868002824,-.12426113686156882,-.131052745257654,.01783418219228005,.12470331491202472,.03733815149147147,-.05376656389013382,-.017697451862990946,.008764198507650423,.002017711239854182,-.003290394241803426,-.000988798848055997,.0007282635434483188,.00023394715134995964,11123369888840513e-21,-35001088996629374e-21,-3138815545488478e-21,-.000158385967784067,-.0003344519075645515,-.0001142558275417929,-.0008847304395787205,-.005503554703673921,-.00718828294403152,.005675466444331685,-.02416567152013357,-.1299491286669429,-.03043154404819853,.1938385123446293,.16309710351628273,-.07415002601418613,-.12085880532211579,-.04459501328781723,-.043366337948898985,-.09025701903746017,-.07338487102500908,.023239798472538018,.07639283896145152,.011216629301030985,-.0359133520966744,-.01357375954538888,.0067665755556069575,.0030103388508484073,-.0006514168760721264,-.00041655443776571915,.00013094293222966718,3229221596799438e-20,-1526253885399206e-20,-15127801448997461e-21,-6484569455970776e-21,-15492547416280305e-21,-9130808221291799e-20,.00016667120940429337,-.00041873515724890633,-.004902747172790411,-.003075534798824412,.009273813673723761,.0020660684229551027,-.04064403555503323,-.03323397176665684,.045775294033398174,.05716734954522341,-.02508375199406394,-.0767251452400631,-.029192878339710793,-.027962636418086263,-.036204190826297326,-.02072342388456853,.024267798198958853,.039127433373256276,.006667244744646227,-.015463651616642567,-.007692451841204994,.002747162689368753,.0010462542577807969,-.0003229360368416571,-.00014335933849004065,2766440238214689e-21,13817898707968035e-21,25461973861614876e-22,-29451008005958465e-22,-4.092213715905222e-7,3320878038416438e-21,22930933947507775e-22,.00019381368934935658,.00021177469863592545,-.0013059386478791995,-.0007473954471473123,.007400989142391346,.004050897694794256,-.024179081541404416,-.025786109831526915,.024427880538049996,.04951327324560642,.018107593495138536,-.019155633990847833,-.010866608608631909,-.011586446122093948,-.017758841021731874,-.007715199561440257,.00990834425863341,.016798455246852806,.005138503748119508,-.0053053978312845055,-.003429495076402552,.0006116966274444585,.00033799731924544067,-.00024058911609197694,-.00010154505453872226,19807787751332398e-21,11566718045558844e-21,23526983774034052e-22,-31629035250083664e-22,-1906633619859879e-21,-14241006555052951e-21,-330200303448997e-19,5290853973260344e-20,51357289146045035e-21,-.00039743496113234163,-.0006343205168911938,.0027089055320300356,.0013503752362499016,-.008288463063230112,-.009258934255387725,.008804972429009492,.02275670271313029,.011156251045765241,-.008345093031839768,-.004940669431738527,-.005800145590866721,-.007660359819079003,-.005302182077907032,.001845870794973378,.0051951770049388935,.001795161616712868,-.0014758375936677148,-.0009117499635695499,.00015619540664616496,.00011997798601084234,-7415390708438721e-20,-47705175525428954e-21,1049884054100156e-20,5701674360308773e-21,-11348311617650734e-22,-103925320562205e-20,-1.5023935068766505e-7,-4599943901272893e-21,-1708345992084472e-20,-9696763357441846e-21,8878907587721923e-21,-.00012444306086311345,-.00019783492062566108,.0006062498980952343,.0003345096593112143,-.0029572761111825215,-.0037574725417352365,.000992336165459151,.006128000465849098,.0032489106979224094,-.0026668961742810043,-.002438546997304683,-.002905573129275835,-.003533084148713472,-.0021581469455770066,.0004512779738536844,.0018583554775031736,.0007285298435105804,-.00040485086541622897,-.00029259265207938966,.00012119187628647567,5798766987054399e-20,-2689854721032224e-20,-12650266391968962e-21,14661018807957155e-22,15771327546691322e-22,-3.698251896381977e-7,-2.95255815126064e-7,-1.495621091456335e-7,1.1697432596209132e-7,-2292178667976115e-21,-2.2344957140311543e-7,90079557167444e-19,-4795139786492691e-20,-8939511172058766e-20,.00025656486918183087,.00025588309866116956,-.0007398377921297984,-.0015213421071961196,-9240330108667715e-20,.0017855278470929681,.0015458463998575377,-.0006136902721295195,-.0002650462841391821,-.0008703690254052181,-.0012627180005201106,-.0008042195507731516,.00014616084301033664,.0005880267885424399,.00023126432473923958,-.00010449095558686259,-.00010228145451208669,19325523686774618e-21,30323974870826362e-21,12683141406816166e-22,-12058446868057975e-22,8.814376877175333e-7,3.3549731120851134e-7,9.105679926165996e-8,2.0577319091974112e-8,9.283025942782679e-8,-6.470483994715781e-7,-4.5648010846713924e-7,2103388123856688e-21,732796229427314e-20,-24374370669839543e-21,-2589867431711574e-20,.0001125714428440936,.00014693728608109456,-.0002392458880004518,-.0005012377270009061,-7443520838038597e-20,.0006844439756502559,.000832077708244806,.0004882895630099605,0,-.0004333086846600954,-.0006465149337464556,-.0004135205525089448,5823257835556509e-20,.00026030164250996835,.00011785219152459624,-5047942915405733e-20,-4154319183356831e-20,775503552757304e-20,8578788970901274e-21,5.074268522214453e-8,-15265704867968537e-22,7.612742091585594e-7,3.432277360658854e-7,-2.4467237539618118e-8,0,2.4467237179738174e-8,-3.4322773619012653e-7,-7.612742091921715e-7,1526570486753494e-21,-5.074268506979446e-8,-8578788970889695e-21,-7755035527569227e-21,4154319183356831e-20,50479429154150824e-21,-.00011785219152460185,-.00026030164250998353,-5823257835557963e-20,.0004135205525090498,.0006465149337465323,.0004333086846601974,.0002650462841403281,-.0004882895630100106,-.0008320777082443153,-.0006844439756492786,7443520838062753e-20,.0005012377270007821,.00023924588800066727,-.00014693728608088972,-.000112571442844023,2589867431722904e-20,24374370669918344e-21,-7327962294092794e-21,-21033881238922216e-22,4.5648010853483173e-7,6.470483993356496e-7,-9.28302595716479e-8,-2.0577319091885375e-8,-9.105679955012225e-8,-3.35497311276606e-7,-8.814376876871839e-7,12058446867643514e-22,-12683141406445925e-22,-3032397487090597e-20,-19325523686839914e-21,.00010228145451204714,.00010449095558694352,-.00023126432473908535,-.0005880267885422517,-.00014616084301019596,.0008042195507736376,.0012627180005203068,.0008703690254049552,.0024385469973038903,.0006136902721293607,-.001545846399856955,-.0017855278470920858,9240330108662681e-20,.001521342107196109,.000739837792129673,-.0002558830986612646,-.0002565648691818949,893951117205118e-19,4795139786497207e-20,-9007955716616503e-21,2.234495713888465e-7,22921786679921674e-22,-1.1697432602157082e-7,1.4956210883105962e-7,2.9525581512599554e-7,3.6982518948350376e-7,-15771327547503337e-22,-14661018806631417e-22,12650266391950919e-21,26898547210308593e-21,-57987669870649895e-21,-.00012119187628649009,.0002925926520794114,.00040485086541640515,-.000728529843510411,-.0018583554775031031,-.0004512779738534315,.0021581469455775027,.003533084148713233,.0029055731292758334,.004940669431739408,.002666896174281276,-.003248910697921659,-.00612800046584773,-.000992336165458837,.003757472541735064,.0029572761111822826,-.00033450965931128095,-.0006062498980952801,.0001978349206256149,.00012444306086323596,-8878907587627067e-21,9696763357407648e-21,17083459920778764e-21,4599943901176715e-21,1.50239350319166e-7,1039253205622084e-21,1134831161608397e-21,-5701674360361638e-21,-104988405409158e-19,47705175525396455e-21,7415390708440185e-20,-.00011997798601094042,-.0001561954066460971,.0009117499635695794,.0014758375936678126,-.0017951616167126566,-.005195177004938604,-.0018458707949728875,.00530218207790768,.007660359819079508,.005800145590866926,.010866608608631407,.008345093031839288,-.011156251045764934,-.02275670271313004,-.00880497242900997,.00925893425538742,.00828846306322987,-.0013503752362499656,-.0027089055320300547,.0006343205168911506,.0003974349611324022,-5135728914582959e-20,-52908539732616404e-21,3302003034476244e-20,14241006554950027e-21,19066336197302612e-22,31629035250082296e-22,-2352698377375767e-21,-11566718045553533e-21,-1980778775134491e-20,.0001015450545386955,.0002405891160920911,-.00033799731924550203,-.0006116966274444732,.003429495076402614,.005305397831284527,-.0051385037481194926,-.016798455246852688,-.00990834425863296,.007715199561440763,.01775884102173201,.011586446122093877,.029192878339711306,.019155633990847316,-.018107593495138137,-.04951327324560528,-.024427880538050034,.02578610983152671,.024179081541404305,-.004050897694794173,-.007400989142391216,.0007473954471472543,.0013059386478792266,-.0002117746986358277,-.00019381368934936018,-22930933947504607e-22,-33208780385072546e-22,4.092213713989788e-7,29451008005957237e-22,-25461973862464916e-22,-13817898708041393e-21,-2766440238097494e-21,.00014335933849003848,.0003229360368416904,-.001046254257780874,-.002747162689368661,.007692451841205041,.015463651616642399,-.0066672447446463326,-.03912743337325591,-.024267798198958437,.020723423884568916,.03620419082629698,.02796263641808593,.04459501328781619,.07672514524006353,.02508375199406461,-.05716734954522297,-.045775294033398015,.03323397176665664,.04064403555503332,-.0020660684229550407,-.009273813673723708,.00307553479882429,.00490274717279044,.0004187351572489531,-.00016667120940430416,9130808221291303e-20,1549254741618293e-20,6484569455921929e-21,15127801448997605e-21,15262538853884928e-21,-3229221596802505e-20,-.00013094293222960533,.0004165544377657112,.0006514168760721156,-.0030103388508485036,-.006766575555606901,.013573759545388975,.035913352096674386,-.011216629301031098,-.07639283896145119,-.023239798472537657,.07338487102500925,.09025701903746076,.043366337948898895,.008643196177164695,.12085880532211546,.07415002601418648,-.16309710351628132,-.1938385123446288,.030431544048198395,.12994912866694291,.024165671520133634,-.005675466444331592,.007188282944031584,.005503554703674014,.0008847304395788092,.00011425582754175175,.0003344519075645258,.0001583859677839329,3138815545460048e-21,35001088996629286e-21,-11123369889024881e-21,-.000233947151349965,-.0007282635434482989,.000988798848055947,.003290394241803499,-.002017711239854204,-.00876419850765046,.017697451862991015,.053766563890133824,-.03733815149147147,-.12470331491202422,-.01783418219227963,.13105274525765467,.12426113686156864,.016216948868002876,.1325676957723277,.28285607915278405,.1669452380143309,-.321564638169156,-.39450427611204497,-.01128816683045884,.2199854749928545,.06078620927575355,-.01692045877708555,.010909574115054964,.0031901125163300605,-.0003348953484307534,-.0005751200811331908,4824134743154272e-21,.00034629566400617116,6285292982385847e-20,4196563644218682e-21,-55592435290969e-18,-.0003959378579614673,-.0008489503374664796,.0019408045705911188,.004079829332167385,.0017849945305527092,-.014396528935747516,.03904218756455085,.15466514236919257,-.06235746981204847,-.3359148726157663,-.19448842973357355,.24770054522287124,.26668667634059967,.09330684787486825,.24374357403537067,.5501221349190479,.2933842882858228,-.5650775022620788,-.3735751389584949,.284780397736683,.24153406544338699,-.010501517567550396,-.06926075485332467,.01603088361482913,.02888856442560565,.0025172833852350443,-.0019825160649420428,-.0012356709589064721,9538306571267618e-20,8492558028191072e-20,-2.7603484500895416e-7,1575415238022084e-20,8998084242646396e-20,-.00015455144974887674,.001041482456044473,.006091793021644366,-.006229408212636259,-.03237480775990959,.08609207689152654,.23992875156785606,-.03144937434939536,-.4991450162764392,-.37230089042480613,.3685028492139316,.6520378418759155,.2835664388260763,-.3356270851657694,-.13102742771679063,-.07444266944177194,-1.108414225433116,-.4897119989800905,.7572635790435917,.4897526648425272,-.10414416266224276,-.0573751620803173,.06761433595406217,.03455140111402254,.002641595347408143,-.0033313264069329894,.00017599692518009282,-.00024141713667201988,.00013701607546791344,.00011043948472760822,52753025427777066e-21,-.0005628222038358042,-.001473040310695623,.0020857584923045986,.01263191509663575,-.004927628075221602,-.07942642110626258,.003828219208729548,.21158932458700425,.2533770738198234,-.19299106678658623,-.4702178996619516,.09917627706172702,.04917488399628373,-.2710437571302268,-.6689283878072138,-.27670322508415546,1.1733277795586157,-1.1747425146844417,-1.7859746696260967,.1348249883611979,.6257943092402684,.19110346978313578,-.009201076407508389,.09154171642070574,.03579817711623483,-.01080872095146141,-.007480568970943008,.0008798249142151562,.00019700064887198773,.00029830757497410965,.00023746053900133802,-.00038855444421207136,-.002149386520661688,-.0020376676236788177,.004303489386532551,.02469255214616217,.021674632648672077,-.08359045749501866,-.13101858584940929,.3570569990766635,.7431358427778344,-.3427855602261542,-1.5181969873975907,.3051062366784956,.3275519435628456,-.7320877283879972,-.1739293166430094,.6832120976500574,1.3646033921720888,-1.0423906489195836,-1.74690534215911,.14363219386863219,.10008726366432133,.08728292900258416,-.06258743950423491,-.019764169882346593,.016921302325211187,.02451231341789838,-.007204075602470608,-.0010417550100130558,-.0011018135930777443,.0003880911286887635,7130655653596091e-20,-.0001294652629900706,-.002072023878086452,-.0058947313405104855,-.009288322138823244,.03163818247427968,.0712481728514214,-.046213719349399086,.04893715881149251,.6224763958828862,.35022259842939113,-1.375028739424532,-1.3054063480052007,1.7422719766284596,1.2315545205448166,-.21368421587766057,2.52511592465862,3.998618511022057,1.6423378558800306,-3.2598446139294928,-2.6508673621629413,1.3408717866717237,.6522903778756212,-.308151804944626,-.24794675857842133,-.1567900354280353,-.0009032287522819449,.016837193889943952,.008145792801665074,.005313406106322907,.0007444276756593883,.0004074381487042835,-9792756390863333e-20,.0004604215069290903,-20439677469763416e-21,-.009420380399277433,-.009368038924124633,.01057748453125583,.02010429668969378,-.06713074400583184,.032511080574428954,.049496223745927104,.29759023847787003,-.4077297239728414,-2.576303003859742,-1.0086268501795939,3.252000824045553,3.127661107821488,-1.1141581132568867,1.3641708343500387,3.614150940121283,-1.3538813012752458,-2.282441588916541,.8105300019353767,1.2979029496509369,-.25796922219793567,-.14660089916526964,-.034224425977123246,.020739891572330926,-.016351947795325953,-.0051337344665883956,.005162461451415738,.0015037083336985342,.0001288348124592733,.00046271928878641655,-.00017988558455328343,-.0016882901545534784,-.008066808502341562,.018334336057616227,.0075287995749028155,-.01766191897506652,-.3880856379559012,-.2929496208379211,-.11812270190565234,1.2090975123731191,-.5838233530507149,-3.2397405202403844,-1.1933011924316363,5.280137930470969,.8417368032198966,2.356307432098976,-2.7217236711600976,-1.4940913514434744,2.1710672351706584,1.1229487194040595,.9605345505025428,.962110786768179,.03580039639601351,.15414023444697636,.10125602185153926,.014179868174359136,-.01737541651892931,.006208767078144257,-.004260385218028646,.0020032348035250135,-.0008757592919680961,.0005394293684455174,-.0005677573892316519,.00040440768488539494,-.0012110563015865644,-.004417252491344408,.015096007795395007,19831683135784154e-21,-.23604949314850127,-.3094362320209155,.10726288955095381,1.2119335549119155,-.7347719953591406,.414681571273373,3.165586914922437,-2.162725826339043,-2.5879403475863874],height:32,width:32,top:{real:[26312.86148654806,16394.776884218503,-3997.4541326480944,12005.135907922067,1177.5601778241692,-334.8497151355127,-198.67917160941846,-63.09118295690562,-26.0143192287494,-17.75101650843531,-4.136628014388824,.8982053702657227,-.324806741646628,-.08434617835956747,-.13448645703297074,.02245836901316695,.0037906136595566063,.022458369013118644,-.13448645703284343,-.08434617835963924,-.32480674164661494,.8982053702658853,-4.136628014389087,-17.751016508434784,-26.0143192287494,-63.091182956905335,-198.67917160941835,-334.84971513551284,1177.5601778241696,12005.135907922073,-3997.454132648096,16394.77688421849,-7474.640597759217,-8567.904378081994,-2236.1016166727777,5029.218127936877,173.97100199359824,-922.653304038107,-153.6610478382718,-4.01177942588299,-14.977979358030328,-15.430842802070819,-7.497586109644668,1.585406689794443,.1790689360368364,-.1458960091743404,-.06104308029346263,-.004607237393951323,.008718442830944043,.017310354876342828,-.02533108502730846,-.09067358339297628,-.39184400032069594,-.7307868181546736,-.9217464577408652,-10.93402591728189,-30.447262913620346,-38.126922827402865,-60.96811030366962,-681.1328664362251,624.5385795569597,7785.429255085771,-1762.2326743166159,-6145.370350036236,-30710.86949592911,-20630.868893573344,1300.6579518513645,5360.918420669898,848.328651928997,-785.9843803018139,-108.77167233308913,41.321279695295864,-.027644771384101652,-9.534868349699865,-1.2097145653165393,.21253485530640887,-.28694451643507407,-.19362286330376682,-.015513947258845627,.0028928780958250894,.010770434199071796,.0037362591288644677,-.0334581045353286,-.15988488342210658,.11739550901211815,.746689000680089,-4.48048036129955,-15.856083499246324,-27.81649204924017,2.1424019920280393,12.12605916297551,-787.5686768088281,-403.5446810123271,3807.5774006807187,4390.115310530876,-17039.95903670892,-13609.16252827678,-9138.495529637588,2497.011334238651,4397.1447406314655,786.4046140955403,-371.53196930683333,-41.579492344426484,10.792253245683401,12.926010493557772,-.9413012216980668,-.22574146482830848,-.15910329528413825,.03954287714519109,-.16497562627541082,-.03454657200349826,.002839677815166053,.009503605024209057,.0028202375766785176,-.035341389521162114,-.14687879382002816,-.1261179825986674,.45588994614236095,-.2587631394768133,-11.107804183612142,-9.846951825287812,5.474863645049449,23.93852180867734,-449.68159927787053,-188.33038343684237,3370.1365438276152,4992.370575020496,-4902.846970969287,-11751.949054213763,-9055.77278992859,-1597.312584178899,1957.0910297219173,675.954300804676,-59.52343031546897,3.5981209875694646,26.908851107336638,3.3880871060788613,-6.3950609995768,-2.7652104861310596,.5155377250297187,.20366584836429452,-.07807676151884048,-.03230658830727563,-.0003373264014373202,.00398822838161625,.00882576812785189,-.010351412440947377,-.13141543694038546,-.35838805663068013,-.08366586649677031,-.11489505024575582,-2.0174170653233996,5.313800098890094,16.719706304911163,26.780389598343444,-155.76938280407634,15.711518936085053,2108.6641632789715,2004.0776030609009,-5284.485150872925,-7525.512448747633,-5804.138136685775,-1404.695681801157,766.7977220394387,489.03634446603957,-8.722049146589729,-31.327724554225572,11.011155797013167,-.5077972295941442,-5.742252846851467,-2.0029903992471274,.11899325802032906,.03542636355588493,-.0016279289016664685,-.006885388771059224,.000849494552456665,.0025820557167290517,.004778391224536287,-.00607766280204007,-.06602117239194515,-.14585644547184912,.31419533009862166,.4720008156080655,-3.7567756530835696,-5.29904934386644,20.30923225911653,43.66331695464585,-13.481975167534534,87.48028602503862,872.0190203286597,302.5978466997831,-3861.3331359414924,-2689.7311891987174,-2302.561977465082,-533.7087971643554,471.8258692686618,253.24935366729582,-54.914023853010136,-45.12805099298314,1.7233725901997559,4.808389091497919,-1.2558586165362935,-1.1198886962259056,-.17080663964208292,.007377669239384073,.01315742418122162,-.004201888894598299,3992740472254069e-20,.0024301018087218612,.0013997723845362102,-.01262770667339704,-.024640414526077212,-.03179823603143843,.16501061208698242,-.05307016660588926,-2.4508298603470875,-6.180412513391736,1.555942705006216,9.636927738004433,-40.99091559206867,48.38111412245632,486.7331047543382,304.00864677044143,-1317.5468335758922,-1423.509046098827,-1206.287076601419,-258.09420634314597,284.3902357476953,170.47470391854262,-20.992706500305374,-30.97334314149571,-.7340838195400219,2.876061103846032,-.9645257644832244,-.3378053034644997,.05052578418661497,.037431091543099905,-.0017411003602284265,-.009466591623426206,-.0007546810547129563,.0012390824544828156,.0015406044848658253,-.004234002187647549,-.009952738183956748,-.0178322802741179,-.0021885919874408454,-.18486506545171935,-1.5473028239900652,-.467331105631569,7.015947297517321,-4.129395186655558,-52.177815979563,-14.225382292199997,266.2443485847607,299.68761898427294,-502.7572234674145,-600.469699914582,-533.7202805364983,-84.35869563264292,149.66956177052822,98.02123918031671,5.946112129786316,-11.84091428379497,-2.356375469113162,.20453312434178955,-.31158766591945325,-.14520584302328118,-.01406756515928424,.014308802406409332,.0017127836707298723,-.004578497180531428,-.0004316686427205439,.0006203521922361554,.0009882109394230678,.00037352179846464215,-.0031201129359879932,.002805346855791697,.01155415730259296,.043098557260407636,-.5010045196848754,-.34405016878893097,4.609198482319736,-1.1472068176591008,-29.145899633206373,-2.605215160270938,142.77222209569624,179.1048285252311,-159.1039510457467,-164.80060347644744,-151.5262236364136,-12.964795600796743,78.70700527851547,49.61110259446742,2.9148898834797565,-6.698255751214301,-1.110892979527785,.533172003431064,-.06095267232150821,-.13796026336886294,-.040312063728343,.009152929268289546,.0006955121775491756,-.0004921601228612518,.00019632055084333887,.00016453496496604428,.00035411166615570894,.00029458111873911975,-.003922478174300769,-.0012902932474049059,.02273868308613074,.002964273331489508,-.040660255117105054,-.1581093035213153,.5082091496795981,-1.1517329733377961,-10.955670081779706,6.668499846942682,73.50926581750615,94.8545074898556,-30.375445723654334,-41.97651812287158,-38.3308317930417,6.6541528790739966,26.77554997576392,13.67501905826837,-.7725568354320362,-2.6427995487036586,-.26778321549867995,.3826392091266334,.06647668718575507,-.06049932513192856,-.01386060501809406,.004470540332767673,.00045553699537380387,-6683290898779943e-20,57815338715827767e-21,24201934805748865e-21,241167282829134e-19,-7790866935544309e-20,-.0020106249903568347,-.0030945645282710967,.011724362942541916,-.007318806569286237,-.13872845280170487,-.0525083726541943,.5746529904846611,-.3867960447452294,-4.853656372771019,-1.1675628703507077,21.601631857858344,37.913461849891526,8.24597762489062,-17.728252948144338,-17.91306653987751,-1.363521120172412,8.687402732758557,5.108690599549352,-.15956522315726163,-1.085338040852596,-.17672593964480066,.18144159918607325,.051467156562084934,-.02059634453149716,-.004731774665412903,.002516972317792379,.0003164356633861367,-.00017373359946045594,-7199917835031686e-20,3534845268166042e-21,37806930339121046e-21,2372924564820286e-20,-.000429721308232924,-.0011045036274546954,.0022387979975912117,-.00419544047957511,-.054281237122749564,.007982156967778375,.3612319198822241,.07823086352208347,-1.8108271356936088,-1.1161504624718657,6.26448034380691,11.381535938317967,.21980447663235644,-5.9387280202325705,-6.135787759211294,-.7235670361053693,2.8717612965534967,1.827268914106814,.03890182971715875,-.3058552550709899,-.0589919411079518,.049323041374202826,.007749491998403548,-.0026797748220028393,2606326701289029e-20,.0006615930466323916,772784949021142e-19,-3110060391079221e-20,-15561043109534526e-21,11911742325626112e-21,20491322447673862e-21,-14767672160855649e-21,7237527506491667e-20,.0002827801083782971,.0018655623121081823,.0007966565408703923,-.014230202242318532,.015605588027909496,.15269277354560382,.04241034362055825,-.5991836734745446,-.4227328181751537,2.2232923752479885,4.029734867596904,-.01297332387246361,-1.889050451466077,-1.7044228721383259,-.014407089546523855,.8147532827024284,.49486328945653796,.05137864550237867,-.07801919187423113,-.019791976482152574,.011942087677832957,.003771088162007893,-.0019373229659441914,-.0002886705798141979,.000173087047265503,392654257327213e-19,5.376138629066281e-7,-16483764627679784e-22,19354497917760563e-22,-1043216287920153e-21,1251541032126094e-21,-2039562589130497e-20,23143507174682374e-21,.0008565768791742647,.001542508933533323,-.003871347088090998,-.00452265522317206,.02648141665598214,.002481804228406049,-.156436707006408,-.01463777107064738,.7413395210802084,1.1863896819067066,-.06073539777241771,-.5542372017749815,-.4131843386810684,.012013582173996683,.22946537156729221,.14022496275890783,.010987988714373856,-.01679009744687791,-.002766362385049895,.001553491391729881,.0005498581824953059,-.00042583544807556255,-.00029614878449876606,13565162632662745e-21,47965965686279184e-22,-14046487964451716e-22,-17593082382469076e-22,-2320036873447806e-21,2.4848934678754374e-7,-14522884424931378e-22,-5208267173112263e-21,23151589195966712e-22,.00016541664707348802,3652912526796185e-20,-.0012890410598031484,-.0010500227857359876,.003691038045758511,-.0025549445466396393,-.038104522129866786,.016868811542239164,.2214789316299516,.2697221656216033,-.11164745685412412,-.1053213699265967,-.06516979219178952,.05096764271682823,.08220309725960867,.03797377653202822,.002270145289904118,-.0034852771985896215,-.0005179701401778565,.0006599947781042485,914499593950683e-19,-9120439102171607e-20,-15180477673862282e-21,-14304323510152094e-21,-4.766867538769436e-7,-3.3807620398649656e-7,-3.2827005154992035e-7,-6.005938340717767e-7,4.743645802817471e-7,7.883595062921859e-7,-25363312932279684e-22,34933053894102948e-22,4918354682850915e-20,9936763623213565e-20,-.00011095747475971185,-.0003373538870719122,-.00017205199767281925,-.0028150966049269007,-.006626377356299838,.01687499335440554,.08139280187407189,.10016944284496203,-.003989874097288895,-.056558682919194136,-.015674616081580436,.04742024835295937,.0489841835364029,.018095648558125472,.0001906158589192804,-.0005586581685228259,.0002838510302248157,38670538186828884e-21,-16713711240799624e-21,3538878170180732e-20,18038642046719724e-21,-2.7952818635613013e-7,-2465812767314031e-21,-1.5227319963665806e-7,-2.3332675048126655e-7,-1.3019579049092348e-7,-2.3332675083373355e-7,-1.5227319920541638e-7,-24658127673110402e-22,-2.7952818599492315e-7,18038642046284464e-21,3538878170245518e-20,-16713711239992412e-21,38670538186828884e-21,.0002838510302257955,-.0005586581685237537,.00019061585891278605,.01809564855812688,.04898418353640722,.0474202483529667,-.01567461608157503,-.10532136992661453,-.00398987409727738,.10016944284504853,.08139280187407594,.01687499335439334,-.006626377356290186,-.002815096604921771,-.00017205199767197964,-.00033735388707121654,-.00011095747476002673,9936763623079115e-20,491835468298072e-19,34933053890940453e-22,-25363312945761086e-22,7.883595061453216e-7,4.743645814304976e-7,-6.005938340711767e-7,-3.28270052094808e-7,-3.380762038316387e-7,-4.7668675369876225e-7,-14304323509881206e-21,-15180477673786216e-21,-912043910199929e-19,9144995939603915e-20,.000659994778106001,-.0005179701401766683,-.0034852771985941946,.0022701452899007964,.037973776532033036,.08220309725958914,.05096764271678241,-.06516979219178086,-.5542372017748879,-.11164745685411237,.26972216562160034,.22147893162997134,.01686881154224325,-.03810452212986556,-.0025549445466363117,.0036910380457617423,-.0010500227857337837,-.001289041059802577,3652912526732795e-20,.0001654166470744811,23151589193372615e-22,-5208267173934304e-21,-1452288442811783e-21,2.4848934734967557e-7,-2320036873448569e-21,-17593082396192173e-22,-14046487964490078e-22,4796596568910436e-21,13565162632914686e-21,-.0002961487844982795,-.00042583544807430477,.0005498581824961642,.0015534913917295296,-.002766362385049678,-.016790097446884332,.010987988714361836,.14022496275891236,.22946537156726918,.012013582173935911,-.4131843386810784,-1.8890504514661226,-.060735397772418,1.1863896819067115,.741339521080185,-.0146377710706385,-.1564367070064016,.0024818042284152,.02648141665598648,-.004522655223172011,-.0038713470880910664,.001542508933532456,.0008565768791748787,2314350717464594e-20,-20395625891635653e-21,12515410319035661e-22,-10432162880357027e-22,19354497917755154e-22,-1648376462389003e-21,5.376138627717133e-7,39265425733411684e-21,.00017308704726561608,-.00028867057981368457,-.0019373229659434092,.003771088162008273,.011942087677832796,-.019791976482151457,-.0780191918742265,.05137864550238155,.4948632894565238,.8147532827023561,-.014407089546580973,-1.7044228721383166,-5.938728020232454,-.012973323872509449,4.029734867596863,2.2232923752479965,-.42273281817513425,-.5991836734745476,.04241034362056052,.1526927735456053,.015605588027911042,-.014230202242318617,.0007966565408696177,.0018655623121089473,.000282780108378194,7237527506430049e-20,-14767672161149705e-21,2049132244733469e-20,11911742325624598e-21,-15561043110042614e-21,-3110060391078771e-20,7727849490171168e-20,.0006615930466324551,26063267012872924e-21,-.002679774822001514,.007749491998403798,.0493230413742033,-.058991941107945506,-.3058552550709792,.03890182971716388,1.827268914106806,2.8717612965534687,-.7235670361054382,-6.135787759211214,-17.728252948144313,.21980447663230326,11.381535938317855,6.264480343806875,-1.1161504624718652,-1.810827135693615,.07823086352208816,.3612319198822263,.007982156967779472,-.054281237122748544,-.004195440479575726,.00223879799759173,-.0011045036274548153,-.0004297213082331914,2372924564825233e-20,378069303389688e-19,353484526816315e-20,-7199917835088831e-20,-.00017373359946041533,.0003164356633857611,.0025169723177924353,-.004731774665412416,-.020596344531496415,.05146715656208672,.18144159918607133,-.17672593964479372,-1.0853380408525777,-.1595652231572473,5.108690599549304,8.687402732758427,-1.3635211201724846,-17.913066539877416,-41.9765181228714,8.245977624890596,37.9134618498915,21.601631857858315,-1.1675628703506762,-4.853656372771017,-.38679604474523593,.5746529904846626,-.0525083726541926,-.13872845280170543,-.007318806569288617,.011724362942542425,-.0030945645282711917,-.002010624990356365,-7790866935533109e-20,2411672828271513e-20,2420193480574654e-20,5781533871613657e-20,-6683290898769336e-20,.0004555369953736686,.004470540332767965,-.013860605018093377,-.060499325131926705,.06647668718575682,.3826392091266317,-.2677832154986751,-2.642799548703653,-.7725568354320241,13.67501905826833,26.775549975763717,6.654152879073815,-38.33083179304154,-164.80060347644644,-30.37544572365428,94.85450748985559,73.50926581750625,6.66849984694275,-10.955670081779644,-1.15173297333779,.5082091496795998,-.1581093035213164,-.040660255117104735,.0029642733314879993,.0227386830861314,-.0012902932474053552,-.003922478174301361,.0002945811187388569,.0003541116661554798,.00016453496496604298,.0001963205508430481,-.0004921601228615968,.000695512177549431,.009152929268289325,-.040312063728344255,-.13796026336886155,-.060952672321507556,.533172003431061,-1.1108929795277824,-6.698255751214283,2.914889883479767,49.61110259446726,78.70700527851518,-12.964795600796847,-151.5262236364129,-600.469699914582,-159.10395104574698,179.1048285252311,142.7722220956962,-2.6052151602709213,-29.145899633206394,-1.1472068176590924,4.609198482319731,-.34405016878893097,-.5010045196848737,.04309855726040865,.011554157302593657,.0028053468557916613,-.003120112935988917,.0003735217984652871,.000988210939423411,.0006203521922361554,-.00043166864272108633,-.004578497180532551,.001712783670731121,.014308802406410212,-.014067565159284841,-.1452058430232785,-.31158766591945286,.20453312434178955,-2.356375469113155,-11.840914283794984,5.9461121297862585,98.02123918031668,149.66956177052836,-84.35869563264293,-533.7202805364981,-1423.509046098827,-502.75722346741475,299.68761898427243,266.24434858476053,-14.225382292200068,-52.17781597956295,-4.129395186655552,7.0159472975173225,-.46733110563156605,-1.5473028239900675,-.18486506545171727,-.002188591987442856,-.01783228027411886,-.009952738183958814,-.004234002187645347,.0015406044848677103,.001239082454482812,-.0007546810547131915,-.00946659162342623,-.0017411003602265445,.03743109154310113,.05052578418661893,-.3378053034644978,-.9645257644832096,2.8760611038460344,-.7340838195399966,-30.97334314149568,-20.992706500305406,170.47470391854245,284.39023574769476,-258.0942063431461,-1206.2870766014166,-2689.731189198718,-1317.5468335758917,304.008646770441,486.73310475433766,48.38111412245636,-40.990915592068674,9.636927738004438,1.5559427050062113,-6.180412513391741,-2.4508298603470964,-.05307016660588521,.16501061208697854,-.031798236031439234,-.024640414526075623,-.012627706673397836,.001399772384542092,.0024301018087218504,39927404721417186e-21,-.004201888894603463,.013157424181215942,.0073776692393865565,-.17080663964207793,-1.1198886962258996,-1.2558586165362777,4.808389091497927,1.7233725901997718,-45.1280509929831,-54.91402385301027,253.24935366729582,471.8258692686622,-533.7087971643556,-2302.561977465081,-7525.512448747628,-3861.333135941492,302.5978466997821,872.0190203286596,87.48028602503858,-13.481975167534443,43.66331695464579,20.309232259116435,-5.2990493438664386,-3.7567756530835754,.4720008156080474,.3141953300986279,-.14585644547184853,-.06602117239193928,-.0060776628020447684,.00477839122453864,.002582055716729052,.0008494945524570308,-.006885388771068876,-.0016279289016736856,.03542636355589284,.11899325802032523,-2.0029903992471114,-5.742252846851455,-.5077972295941396,11.011155797013195,-31.327724554225593,-8.722049146589868,489.03634446603934,766.7977220394388,-1404.695681801156,-5804.13813668577,-11751.949054213763,-5284.485150872927,2004.0776030608997,2108.66416327897,15.711518936085099,-155.76938280407595,26.780389598343376,16.71970630491103,5.313800098890085,-2.0174170653233965,-.1148950502457917,-.083665866496762,-.3583880566306771,-.13141543694038144,-.010351412440954411,.00882576812786593,.003988228381616253,-.0003373264014390519,-.03230658830728782,-.07807676151884095,.20366584836429438,.515537725029719,-2.765210486131051,-6.395060999576777,3.3880871060788507,26.908851107336602,3.5981209875695015,-59.52343031546918,675.9543008046753,1957.0910297219166,-1597.3125841788988,-9055.772789928587,-13609.162528276773,-4902.846970969293,4992.370575020496,3370.136543827617,-188.33038343684228,-449.6815992778706,23.93852180867731,5.474863645049389,-9.846951825287803,-11.107804183612158,-.258763139476817,.45588994614236283,-.12611798259867754,-.1468787938200297,-.03534138952117152,.002820237576687255,.009503605024209053,.002839677815167327,-.03454657200350549,-.16497562627542883,.039542877145184945,-.15910329528412964,-.2257414648283198,-.941301221698037,12.926010493557788,10.792253245683524,-41.579492344426235,-371.5319693068337,786.4046140955402,4397.1447406314655,2497.0113342386503,-9138.495529637588,-30710.869495929113,-17039.959036708926,4390.115310530879,3807.5774006807205,-403.54468101232675,-787.5686768088284,12.126059162975466,2.1424019920278234,-27.81649204924017,-15.856083499246239,-4.480480361299612,.7466890006801008,.11739550901211765,-.15988488342208015,-.03345810453533239,.0037362591288712223,.010770434199071798,.0028928780958374094,-.015513947258866389,-.19362286330377187,-.2869445164350843,.21253485530639998,-1.2097145653165073,-9.534868349699844,-.0276447713840981,41.321279695296035,-108.77167233308927,-785.9843803018143,848.3286519289969,5360.918420669898,1300.6579518513656,-20630.86889357334,-7474.640597759228,-6145.370350036238,-1762.2326743166138,7785.429255085764,624.5385795569586,-681.1328664362256,-60.9681103036699,-38.12692282740297,-30.44726291362034,-10.93402591728205,-.9217464577408491,-.7307868181546915,-.3918440003206731,-.09067358339296347,-.025331085027316205,.017310354876322938,.008718442830944044,-.00460723739400158,-.061043080293425964,-.14589600917437914,.17906893603684051,1.5854066897944772,-7.497586109644648,-15.430842802070792,-14.977979358030328,-4.011779425882951,-153.66104783827134,-922.6533040381063,173.9710019935976,5029.218127936876,-2236.101616672778,-8567.904378081994],imag:[0,-565.8354014213912,2034.1707150791078,-2899.4713440958676,-705.2639507965342,-264.15772704109196,-68.25893457091972,21.864239089276673,-9.260084738727535,-.7720349614465771,.4609422748414816,.05043296371389182,.4817041633893655,.0691334367264865,-.053750756537428696,.007280372465065588,0,-.007280372465033566,.05375075653743176,-.06913343672647353,-.4817041633893806,-.05043296371382806,-.4609422748415279,.7720349614465933,9.260084738727535,-21.864239089276733,68.25893457091992,264.1577270410921,705.263950796534,2899.471344095866,-2034.1707150791096,565.8354014213901,-27456.96984600504,15801.95774991386,6659.285219513658,-5625.222440567115,-315.00701580725445,272.57265196057085,-226.29890693046426,-11.162014580405042,22.51960143730463,12.7778423361071,-.0008055122642221316,-.4061625783688211,.09097795760848884,.020544905947865743,-.005085220787426488,.005762481528077454,-.005101162806400798,.008737332888475351,-.02409739325345404,.0640899096500634,-.12938270466632,.5308817792558131,-.6296735496972713,-5.93014614292113,-10.810291764213344,-3.741612010002125,-182.38596939283659,-362.2818695046165,-992.8292924987254,-4862.668604102225,4699.203180556507,18939.315780035107,10706.514246895442,-4202.506406116029,-8815.516952124164,1263.9440399653656,1779.1449685952537,162.8570796381694,-206.3024685851984,13.222359870031848,21.464492537709937,20.567779042237813,.656008651556013,-.18805381897022255,-.36223791541012046,.1254341335131833,.020744772339125268,.00182748958184843,-.00429928762973864,-.0012201610716230688,-.017092494175410845,-.07696410325057065,.09837677643757826,.4173977832999109,-.7641941980280222,1.7461999698867376,9.858515559681356,24.776358129244393,-211.6323955131393,-238.91976950528434,1185.1238932642693,1296.4366520857086,-4946.028256286779,-5281.5723471297015,-13391.901368395223,-11194.545427930107,-3925.757791332957,887.4602336152653,945.2076614243302,84.87784143442383,-42.93226378569121,-4.96159981214052,-2.2373513523401476,3.2722596307272758,-.7253597270362521,-.26143602710083624,.1722121621819326,.1350741618808597,.00023543387332632535,-.004345917754103765,.0008505542411092727,-.0037937176827999176,-.008137883729905931,-.0756770365251313,-.15032468438850372,-.38722147995532397,.029603642148641713,7.4921225563560006,16.360105748561345,29.902810744114234,-93.46014625711202,-275.9622118519256,922.9971313338667,2711.515323984423,-1933.4800470053665,-10929.798398133844,684.9795916506339,602.5432794468298,-1010.3237650874754,-821.2649775260339,354.9129530786252,267.1270675345742,-50.77043151029089,-60.73925153098176,-3.000434366652563,2.078290590472712,-2.279554023627556,-.7016995460063911,.15105372261757208,.07861078903623217,.022330776935849336,.0012282676678784887,-.0006002530357652831,-.0034390891352469423,.011529870687322991,.014029711179492978,.1252130338315626,-.5540539099353221,-.5410772473174091,.8766735178549457,3.6828009300200657,-7.414126758856101,-13.004195929909718,-24.795065499663313,420.2705463495199,459.95573868102485,-942.1675549819201,-1112.054015955898,2348.3469931726836,1883.3636695028392,-240.70143186447856,-105.71673535442261,372.7925935337724,52.9206724532619,-92.06804037582678,-26.276835867611968,6.705113931418523,3.245275744583783,-.600452759040842,-.5038274358203952,-.06720292211650014,.02498758830601471,.02345280256265949,.003606989988511503,-.0019176843365481997,-.0026716531574556067,-.0020365413730906823,-.01108346786223183,.11877640918683252,.22402554985838732,-.9991824559003271,-3.473127171176343,.48835520550537315,-13.858896676215748,-73.25483981341625,-21.319429226850428,379.31228865246607,351.8198573628928,-537.578095249213,401.891624020517,608.0618470520731,404.4891679157129,-26.0947672494631,-28.936629621288695,88.25550333280712,24.72803539410956,-22.866056256077933,-13.157904592767515,-.15967604903152702,2.526299018978182,.12352888715752443,-.2342279584856657,-.030590557055647175,.016424937283601903,.005606089848676537,-.00045117160770213557,-.0008507168831422649,-.00113536285141135,.002369386795852434,-.0020514022508182662,.04741065885509241,-.047246191697244096,-.8089548207007815,-2.137185145427012,2.4873407504647034,5.798373379205432,-40.953249308721645,-95.73730939784454,76.82215362963292,273.3130006291081,25.450658270222483,108.35753184636786,-342.276211057315,-348.25890814832445,-304.47603827676795,-96.6290558039785,63.023130997866865,57.409949251798395,2.568042168489272,-13.095155674154295,-3.268100808309773,.8828699354509555,.134723326339215,-.09852956449722618,-.013721933165641624,.0016719543218752051,-.0008157469775326423,-.0001201660451309225,2100818845429297e-21,-.0006043136524699474,-.0008490167376128788,.013320171975788974,.024623507369733132,-.04178264068019722,-.6070074832910723,-.4301296545392609,2.2891908586667724,.4863224895474325,-15.79227042219643,-28.193965034765785,48.02961564424754,111.09879990264463,-87.49716421234633,-334.6737117352032,-142.68730890272883,-91.05357948244952,-99.78740989749116,-55.00129457882243,29.906016170654414,37.53507692009013,4.523477878507358,-7.192370807520064,-1.3689331500831903,.3520235021859304,-.0362018905598291,-.061463792395340174,-.022721689012942182,.00827378759723945,.0032130032530252534,.00039450994426574093,-2803177864854437e-20,-.0004140682790494289,-.0027075490516005737,-4603549423391104e-20,.006668143259473342,.004795152883535397,-.05690176651734323,-.24922608889607248,.498049017017482,-2.4309674287383847,-12.16171561638105,.9795136576963396,48.129088343602525,56.48606910456777,-41.17163928968426,-127.72312720337817,-5.428274623206183,-9.783586070955227,-33.97561975527628,-24.806312587182678,2.407224987485921,11.539786987684712,2.1158028157224305,-2.185828622008404,-.5516545987111455,.18427966087195025,.03632569790685596,-.04515076776742678,-.01055017661375372,.006085519605880044,.001728141461042112,7249767443549539e-20,-.00021205409372000895,-20602816877647228e-21,-.0011298747328672136,-.002880914757524112,-.0012342607279736744,-.011825603754497111,-.08706926828669412,-.14265264682578704,.15323327509603407,-.8568774554258768,-6.0248432237602145,-2.077910419819851,20.474406237761055,25.037428100181106,-14.989381828055835,-36.497593867080774,-17.72933810059155,-17.576621089243332,-19.487467662417078,-10.955871914675358,2.3165455312690852,5.4119853383600915,.5462128894496687,-1.3157595111644833,-.34743645177227866,.1287210896998103,.0474121185342446,-.0077851049698980206,-.004201560949808625,.0010934558980435574,.00023257626702487,-9280810988100937e-20,-8715532316390815e-20,-39084915731858744e-21,-.00010250720925033233,-.0006790166870309861,.001446427708002653,-.004863634286116947,-.06782394906790153,-.057130716853855026,.21557912264683496,.06519665350656248,-1.6533046454778435,-1.8832932452039048,3.726484617110755,6.401912631132283,-3.974423502798775,-16.160449140843355,-8.482222839113716,-8.73150691053847,-6.165664324454357,-2.359870465095735,1.9985565184181031,2.3405484242614913,.2938284538614533,-.5086579265157565,-.17305354955167165,.04696002934502403,.015263156905378368,-.0036170611596276912,-.0013726058920436061,2237332432783488e-20,9385945789129954e-20,13994387363258527e-21,-15306190418175455e-21,-2217956357257008e-21,1915436069625878e-20,16056362425269958e-21,.0016017335432058808,.0021630491325728405,-.015795334924840046,-.011660119791667443,.14639963344722604,.10651220377116319,-.8829128742008107,-1.256837282007682,1.6004592076355926,4.239171334755254,2.2028113471748907,-3.1469764634818462,-2.242974904561942,-2.5538673583000224,-2.2927664969925643,-.7151152630622848,.7014222583011671,.8725716306862452,.1984697655771137,-.1524924527841292,-.07086429699622016,.00993581156350367,.004706615094245603,-.0026523157902845263,-.0008543995841780177,.00013944973801692797,727047910391884e-19,12601241693252589e-21,-1580988340660887e-20,-10011729527080636e-21,-794785428476636e-19,-.0002252726513827109,.0004530770272741257,.0005010581651973888,-.004694536759989586,-.009391282753869927,.04858627370837515,.03055395863749701,-.2583878869424789,-.400933262759176,.49595628709938333,1.6851565365398353,1.1309597417418693,-1.056522952990393,-.8024784063291578,-1.026927016182452,-.886519149545294,-.43650779681426854,.11316541147379869,.23035854544536424,.05992046783303331,-.0361904386041879,-.01725390654373966,.0023509305274026565,.001478217289217426,-.0007267064872719463,-.0003680247758271001,7155227772332322e-20,33018347577537154e-21,-6270504054453194e-21,-509618903223624e-20,-8.259748136306607e-7,-24936495372693928e-21,-.00010760628949477799,-7702215479715575e-20,83265078915305e-18,-.0013990135309411168,-.0028172526227442643,.010701408851355284,.007245153039137615,-.08615003784145343,-.14460665466238934,.049708417947223346,.3952147833333318,.28744423285388176,-.29861910565037264,-.3386926979654547,-.4186567390078249,-.35458750065998923,-.15351062390629316,.023283787620964443,.07031599079037064,.02182522206883144,-.009436096855355645,-.005228648752625107,.0016419352706606338,.0006222239315880406,-.00023654954587354915,-9511658499487789e-20,983161381848219e-20,8561654453709157e-21,-18490511258670774e-22,-13806960215566987e-22,-7.841816057982982e-7,6.118778342888296e-7,-14184243450717458e-21,-16817152282181301e-22,7731541363642721e-20,-.0004977635173173894,-.0011677770881636529,.004301234445225634,.005393449938510381,-.019935861209744145,-.053344442429226806,-.0040707298903069475,.10515901839488417,.12441049519027374,-.06476311950418363,-.033271590846292554,-.10779677164705558,-.11539582523941379,-.051505283097805894,.006924698345039851,.021708652485324127,.006934762893192616,-.0022906766529511625,-.0016964640398162575,.00025142958382895784,.00031770653382385736,11032501437955532e-21,-874687797444703e-20,5594506642359602e-21,1797234545539756e-21,4.56163382035201e-7,9.720139452426724e-8,4.722493497117076e-7,-33798970421174713e-22,-284932815879587e-20,15043823885218312e-21,5812580622728298e-20,-.0002431138297897298,-.0003412141701868545,.0017972456094799462,.002919931802959911,-.006209611665928852,-.016969044244524348,-.003283584083881931,.03880789965984274,.06742646616636051,.050826644444124935,0,-.049486105286858977,-.05510226949105056,-.024933286677064983,.002713101554763883,.009423292948584742,.0031928535384108483,-.0010192088413809152,-.0006568747226787571,9940639096759055e-20,9211711722109293e-20,4.28356531581886e-7,-11077354271652886e-21,4698815982133191e-21,18643898350265165e-22,-1.3325436344526307e-7,0,1.332543614852719e-7,-18643898357013856e-22,-4698815982340655e-21,11077354271338259e-21,-4.2835653029578673e-7,-9211711722096857e-20,-994063909675417e-19,.0006568747226787571,.0010192088413828024,-.003192853538410999,-.009423292948585288,-.0027131015547645593,.024933286677071297,.05510226949105709,.049486105286870655,.033271590846436425,-.050826644444130153,-.06742646616632078,-.03880789965978733,.003283584083892587,.01696904424452016,.006209611665934435,-.002919931802955841,-.0017972456094788201,.00034121417018834725,.00024311382979051588,-581258062258525e-19,-15043823885472467e-21,28493281592184042e-22,33798970414074387e-22,-4.7224935044335926e-7,-9.720139452384815e-8,-4.5616338348029835e-7,-17972345459045348e-22,-559450664216697e-20,8746877974146394e-21,-11032501437633476e-21,-.0003177065338246917,-.00025142958382980715,.0016964640398156006,.002290676652952936,-.006934762893187993,-.021708652485317177,-.006924698345033181,.051505283097836994,.11539582523943163,.10779677164702299,.3386926979653444,.06476311950416691,-.12441049519022664,-.10515901839483223,.004070729890304727,.0533444424292264,.019935861209740766,-.005393449938512387,-.004301234445226706,.0011677770881626617,.0004977635173178583,-7731541363532951e-20,16817152281107408e-22,14184243450816806e-21,-6.118778345999597e-7,7.841816041489295e-7,13806960215563787e-22,1849051125093638e-21,-856165445414997e-20,-9831613817593162e-21,9511658499474217e-20,.000236549545873429,-.0006222239315891763,-.0016419352706608273,.005228648752625495,.009436096855359751,-.021825222068826373,-.07031599079036797,-.02328378762095141,.15351062390632836,.35458750065996514,.41865673900782463,.8024784063293012,.298619105650403,-.28744423285381543,-.3952147833332439,-.049708417947207637,.14460665466238265,.08615003784144645,-.007245153039139054,-.010701408851356092,.0028172526227436055,.0013990135309424952,-832650789144155e-19,770221547968841e-19,.00010760628949436256,2493649537217256e-20,8.259748116047541e-7,5096189032236405e-21,6270504053587473e-21,-3301834757784326e-20,-7155227772273876e-20,.0003680247758268492,.0007267064872720896,-.0014782172892186336,-.0023509305274016343,.01725390654374022,.0361904386041903,-.05992046783302622,-.2303585454453514,-.11316541147376862,.436507796814322,.8865191495453523,1.026927016182488,2.2429749045618363,1.0565229529903326,-1.1309597417418378,-1.6851565365398167,-.49595628709941025,.40093326275916286,.25838788694247145,-.030553958637498463,-.04858627370837549,.009391282753869277,.004694536759990304,-.0005010581651952867,-.000453077027274237,.00022527265138177463,7947854284708915e-20,10011729526400015e-21,15809883406608184e-21,-12601241693104561e-21,-7270479103915493e-20,-.00013944973801701606,.0008543995841777928,.002652315790285786,-.004706615094246455,-.009935811563503904,.07086429699622142,.15249245278412987,-.1984697655771132,-.8725716306862386,-.7014222583011349,.7151152630623318,2.292766496992581,2.5538673583000056,8.48222283911386,3.1469764634817636,-2.202811347174842,-4.239171334755157,-1.6004592076355943,1.256837282007673,.8829128742008066,-.10651220377116098,-.14639963344722345,.011660119791666538,.01579533492484039,-.0021630491325718448,-.0016017335432059105,-16056362425267762e-21,-19154360696782612e-21,22179563562188507e-22,1530619041817482e-20,-1399438736372572e-20,-938594578917978e-19,-22373324326887067e-21,.001372605892043584,.0036170611596280633,-.015263156905379492,-.04696002934502243,.17305354955167276,.5086579265157509,-.29382845386145795,-2.3405484242614674,-1.9985565184180694,2.359870465095777,6.165664324454299,8.731506910538362,17.729338100591146,16.16044914084344,3.9744235027988806,-6.401912631132234,-3.7264846171107413,1.8832932452038942,1.653304645477848,-.06519665350656056,-.21557912264683374,.05713071685385284,.06782394906790187,.004863634286117494,-.0014464277080027464,.0006790166870309499,.00010250720924968801,39084915731564376e-21,8715532316390898e-20,928081098803579e-19,-.0002325762670250908,-.0010934558980430407,.004201560949808545,.007785104969897888,-.04741211853424612,-.1287210896998092,.347436451772281,1.3157595111644818,-.546212889449674,-5.41198533836007,-2.3165455312690484,10.955871914675381,19.487467662417213,17.57662108924329,5.428274623206613,36.49759386708069,14.9893818280559,-25.037428100180914,-20.474406237761002,2.0779104198198417,6.024843223760218,.856877455425879,-.15323327509603168,.1426526468257883,.08706926828669556,.011825603754498296,.00123426072797323,.0028809147575238926,.0011298747328662582,20602816877460582e-21,.0002120540937200084,-724976744366971e-19,-.0017281414610421523,-.006085519605879876,.010550176613753189,.04515076776742772,-.03632569790685638,-.1842796608719509,.5516545987111475,2.1858286220084038,-2.1158028157224313,-11.539786987684664,-2.4072249874858644,24.80631258718279,33.97561975527624,9.783586070955252,142.68730890272883,127.72312720337824,41.17163928968424,-56.48606910456776,-48.129088343602554,-.9795136576963499,12.161715616381057,2.430967428738399,-.498049017017482,.24922608889607162,.05690176651734568,-.004795152883534096,-.00666814325947404,4603549423341601e-20,.0027075490515988954,.000414068279048447,2803177864854437e-20,-.00039450994426571523,-.0032130032530263515,-.008273787597239988,.022721689012943438,.06146379239534364,.03620189055982916,-.3520235021859332,1.3689331500831903,7.192370807520073,-4.523477878507348,-37.53507692009012,-29.906016170654418,55.00129457882238,99.78740989749119,91.05357948244942,342.2762110573145,334.67371173520326,87.49716421234662,-111.0987999026444,-48.02961564424746,28.193965034765707,15.792270422196436,-.4863224895474051,-2.2891908586667706,.4301296545392576,.6070074832910698,.041782640680199906,-.02462350736973284,-.013320171975792017,.0008490167376123761,.0006043136524673308,-2100818845429868e-21,.0001201660451322299,.0008157469775285331,-.001671954321877379,.013721933165640972,.09852956449722827,-.13472332633921438,-.882869935450965,3.268100808309773,13.095155674154302,-2.568042168489291,-57.40994925179825,-63.02313099786681,96.62905580397846,304.47603827676824,348.25890814832377,-608.0618470520724,-108.3575318463683,-25.45065827022236,-273.3130006291078,-76.82215362963294,95.7373093978444,40.95324930872171,-5.7983733792054135,-2.4873407504647047,2.1371851454270088,.808954820700783,.04724619169724304,-.04741065885508847,.0020514022508175854,-.002369386795852814,.0011353628514107392,.0008507168831422651,.00045117160770050525,-.005606089848679676,-.016424937283604724,.030590557055645055,.23422795848566832,-.12352888715752926,-2.526299018978185,.15967604903152918,13.157904592767508,22.86605625607793,-24.72803539410957,-88.2555033328071,28.936629621288684,26.094767249463303,-404.4891679157133,-2348.346993172679,-401.8916240205173,537.5780952492123,-351.8198573628927,-379.3122886524662,21.319429226850364,73.25483981341633,13.858896676215757,-.4883552055053771,3.4731271711763214,.9991824559003392,-.22402554985838727,-.11877640918683258,.011083467862236249,.0020365413730902885,.002671653157447994,.001917684336548198,-.0036069899885160838,-.023452802562666058,-.024987588306021404,.06720292211650539,.5038274358204086,.6004527590408355,-3.2452757445837785,-6.705113931418524,26.276835867611975,92.0680403758268,-52.920672453261844,-372.79259353377256,105.71673535442247,240.70143186447768,-1883.363669502841,-684.9795916506332,1112.0540159558975,942.16755498192,-459.9557386810245,-420.2705463495199,24.795065499662957,13.004195929909772,7.41412675885617,-3.682800930020067,-.8766735178549556,.5410772473174038,.5540539099353147,-.1252130338315631,-.014029711179499669,-.011529870687323501,.0034390891352509903,.0006002530357652831,-.0012282676678759762,-.022330776935852007,-.07861078903623528,-.15105372261757474,.7016995460063893,2.2795540236275773,-2.0782905904726996,3.000434366652557,60.73925153098181,50.77043151029089,-267.12706753457417,-354.9129530786252,821.2649775260338,1010.3237650874759,-602.5432794468305,13391.901368395234,10929.798398133857,1933.4800470053663,-2711.5153239844217,-922.9971313338666,275.9622118519249,93.46014625711196,-29.902810744114028,-16.36010574856138,-7.492122556355961,-.02960364214863991,.38722147995532696,.1503246843885088,.07567703652510885,.00813788372990984,.0037937176827991482,-.0008505542411092683,.004345917754099326,-.00023543387332691185,-.13507416188085952,-.17221216218196025,.26143602710082897,.7253597270362697,-3.2722596307272944,2.2373513523401622,4.961599812140501,42.93226378569129,-84.87784143442366,-945.2076614243296,-887.4602336152668,3925.7577913329583,11194.545427930101,-10706.514246895442,5281.572347129701,4946.02825628678,-1296.4366520857075,-1185.1238932642696,238.9197695052832,211.6323955131397,-24.776358129244326,-9.85851555968138,-1.7461999698868065,.7641941980280155,-.41739778329989746,-.09837677643757771,.07696410325055975,.017092494175422378,.001220161071587169,.004299287629738649,-.0018274895818451932,-.020744772339150463,-.12543413351316696,.3622379154101165,.18805381897020862,-.6560086515560082,-20.567779042237863,-21.46449253770993,-13.222359870031557,206.3024685851983,-162.85707963816978,-1779.1449685952532,-1263.9440399653668,8815.516952124166,4202.50640611603,27456.96984600504,-18939.315780035096,-4699.203180556507,4862.6686041022285,992.8292924987259,362.2818695046175,182.38596939283644,3.741612010002524,10.810291764213327,5.930146142921261,.6296735496971917,-.5308817792557847,.12938270466632043,-.06408990965002163,.02409739325341807,-.008737332888441708,.005101162806400806,-.00576248152809363,.005085220787449562,-.020544905947870024,-.09097795760850277,.4061625783688185,.0008055122642690454,-12.777842336107227,-22.519601437304647,11.16201458040481,226.29890693046417,-272.5726519605721,315.0070158072536,5625.222440567115,-6659.285219513651,-15801.957749913861]}},nose_filter={real:[3.0408379415611857,.3782226136313794,1.1747173276627942,.877915728669575,.2742957852453699,-.26015038230887205,-.04589694540462394,.18194913988848616,-.19035992880648842,-.05006447220662765,-.016354960260506177,.07301390320491648,.15053197342937383,-.47378158951033317,-.33333577915227425,-.30434085338299055,.2637228440630788,-.3043408533829945,-.33333577915227836,-.4737815895103303,.15053197342937505,.07301390320491558,-.016354960260505706,-.05006447220662877,-.19035992880648842,.1819491398884854,-.04589694540462493,-.2601503823088735,.2742957852453695,.8779157286695746,1.1747173276627942,.3782226136313796,1.5638480130127614,-1.0502161590016221,-.28144140655806793,.660078762090635,.25575295594566605,-.11471557758718753,.22751157962613866,-.29100003355994186,.2924299486585318,.1495006131107875,-.02214037256893809,.034503572794411914,-.1741288940590147,.060297128338254534,-.49717312826403576,-.10585857030501357,.08278017743008333,-.11056584899062352,-.7249941619639279,-.1561286375130836,-.36586758725441215,-.19718551141955715,-.04343432877571885,-.060442748560529294,.1383233017601592,-.07171439916436274,.31725814504248484,.16801904131477274,.5867500433912975,1.515502516107282,.9923275265012264,-1.0129349058609656,-1.6725083187014358,-.6607722409175779,2.2217962254133496,.983904929170131,-.16319024909703178,.6727165127601918,.16380771710007475,.2198937373567962,-.12296413131763459,-.18224776807046256,-.011168077595514938,.10364961453623285,.1359801303077682,-.2633959372271572,.039396952561874886,-.3386669625362648,-.00431018414096014,.17740469505625342,-.10830858623812685,-.3318605121146624,.12060535717228799,.0847034747306358,-.08626242606474008,-.1297477439897661,-.28426475792188655,.21965961682575447,.249559991006423,.4680408859416745,-.46946217188769823,-.31724338121882617,1.7716903674840139,.5657788112446531,.7151259504708923,.4910867492003736,.9231011957591465,-1.093993495771964,.18102793706565934,.3548459552618665,.48676804973393767,-.09792392205621177,-7820006368423637e-20,-.016095705887683227,-.08426320972768339,.008033164669753148,-.04485316816646984,.006217070245597755,-.15890945005602863,.22815908460498888,.17110516400703918,-.29052216822588434,-.18224178792918044,-.018421573557969844,.032535239746583795,-.08121081614537759,-.02917591511509403,.09292986204084308,.16824405476099044,-.2467922762570458,.00030176170486908785,.023943010115746295,-.43281940369171445,-.5716683662381382,1.2482467538506352,.7438533137124667,.5478774521600256,.9289894130003817,.5447330180533513,-.4877077226718825,-.40370312470951597,.3909652762329985,.12644205243911047,.0424168022733412,.04921969358643031,-.07774818656606704,-.04361457599167721,-.00416350617181571,.07897222152752259,.05394497327097297,.11232623315704468,-.07044562563150354,-.07205720117764265,.12706805404252855,-.13757198545862262,-.316392239894439,-.02924048624466061,.10973045554309782,.04102655016489614,.01891084247324943,-.05692236942047649,.030805208457151782,-.1512000567754726,-.058122663069861934,-.30506910575481916,-.7903386881329538,.026308878650124864,1.7521122327973906,.6456622051479368,.40042515638418263,-.334612088484084,-.5536942957177082,-.030140868003777126,.27230784814155334,.008194429787378334,-.030645866021173498,.023928227792328404,.09070651048741973,-.021569631345745226,-.006412781536769337,-.026343653609827326,.00793656086939748,-.187914504113454,.14319521757460194,.17003550871316017,-.24661106106331201,-.21167593067635404,-.09820675094642621,-.04859275944736512,.002812925595011044,.04986893975541695,.03902323739410261,-.0036267311717218496,-.12930461632538415,-.06741132095183786,.01080120538703819,.07493129145102806,.0657071501308885,-.22930577035731903,-.3489467290456117,.37107135970432037,.49136473213042475,.10645611255411164,-.27741376367012294,-.015474080963115254,.13417678111594294,-.00046677178847574514,-.06415224549575138,.038292630722847554,.017696001575747813,.005215763190194701,-.023883294001795573,.0006051884889793161,-.08839509351423595,-.117577580272467,-.019555697374511325,.025650630137194243,-.043746931993730094,-.08846438922222799,-.07444223373636531,-.009910405282542814,.06487167324863496,.03524540038796406,-.006516309042701568,-.0652868815022504,.023130909787941502,-.028452880392855154,-.09863825695148282,-.23382813425811513,-.07793324996210348,.06957578883921661,.8663549110069351,.3366879287386472,.342535292159714,-.019122146869457048,-.0165213645474579,.09816142594631652,-.011130337821465129,-.09254353938682904,-.004697312064988421,-.008688517253163962,.04191586562399075,.004043623749362439,-.037907101781325205,-.03902357631677511,-.03769096399730089,-.11419210623041842,-.0767327261839726,.12573571356763677,.012633232837618465,-.09894200529309495,-.06188860116512567,-.009001290088071785,-.014247675993027883,.027023228844142398,-.005028277416555645,-.03166737161574289,-.033818612421867206,-.01148054478950835,.002410610826462259,.08440238506225944,.06982454502965495,.043930202648898894,.07887205982729704,.05505335977604347,.0133618922103162,.06845383453783666,.08170149012888928,-.02303497290340257,-.04240668227306069,.03514872971871225,-.037569795749083354,-.0041828274568459145,.012961699649937737,-.015475583648045266,-.027857672235467607,.011169867646763214,-.052725469767566695,-.007014873006769892,.053188940442296044,-.09528942369836853,.016377276604450954,-.015232023889946105,-.07768220186100935,-.04820769301430424,.014396940553395536,.021075876818278678,-.0024069559974744716,-.01675825964935249,.03186587970698775,.03282462316832693,-.07418273257242147,-.0800368653632972,.055652716802045685,.11130862970905192,.07295297283810102,.03509839696826377,.07024247972129444,.040747896169172335,-.022459274904977577,.014257984954846613,.019887732012022184,-.04081100434571369,.00881916198202256,.012579825412037176,.0010521231241174983,.006430724322423028,-.0107697788586532,-.0653135355342319,-.06276957327196686,.11452944472315789,.040092306883550234,.12236977033818973,.1362440389652974,.027359429809611827,-.0259369720098807,-.02141908253190829,-.02797214703330133,.00803207985016095,.0013100558771969473,-.005256186606445598,-.009737528949062902,.028455863356249757,.05642570174166461,-.0014166564531825356,-.03252893302731624,-.01961911263034095,.06570068946378961,-.02757449361247655,-.03281004271094684,-.021337213333243964,.01959299008029563,-.0197597500925572,-.030135000999364853,.03169848862163001,.02352205471086472,-.021766544372719836,-.002982743443279076,.007837350887812254,-.0028057606437618767,-.03323255078204348,-.07083081897710564,.05908045566984465,.36951320092865036,.09141112866594404,.1640423341726465,.06259827020745422,.04498640351980994,-.08151089674102797,-.04234161800714717,-.019737461729971092,-.004897400116936683,.01654258945512711,.008801297726757945,-.013696041496545335,-.0020268100930256635,.015845305908809133,.01645861261947946,.0005947400127468152,-.07852906625699135,-.013402803779002156,-.003601329999506423,.03757359158202504,-.007663649465542595,-.0021144243161753088,.032140257903604356,.0203960516207237,-.013294834505552555,.0021732333351695376,.015223562704661827,-.01560949450401263,.01506060958955546,.09924124830572909,-.19173261262163863,.2450151004066432,.26383919410790774,.33963060937430933,.34586223870135113,.1799263961717959,.13137374163691276,-.03649385871696803,-.041981936023927684,-.06025893230575421,-.009907901040571007,-.01002457918175982,.016637976300589805,.03162910623031014,-.011441752446030828,-.010113005489671789,-.027490450999295705,-.018258671855796018,.06129626392127453,.10180457538537498,.0976474425888894,.0632464597546009,.0018146068702083835,-.012539173975430248,-.008345642545901014,.020763503842579332,.03599616230766787,-.01567557540926648,-.02966274712552258,.0213127701286804,.08274253615935892,-.10682054954404013,-.033729052458342255,-.12662108035586636,.18053751384272299,.7094059953008747,-.21337246968950196,.09763637724258438,.1534595963462679,-.1169011010733575,.030098075283007168,.03418607642912205,-.021402902917041923,.004634909602610389,.011776544425663813,-.008967393462662933,.025701507905379287,-.0293335209574718,.0051215906448292756,-9620791778747625e-20,-.027988212781709806,.09369529674769571,.10174972110658871,.1657472048824174,.09791737794265405,.007579036411405063,.031051039914505564,.0156926018464825,-.015197940538429407,.02615442788343286,.03817892786043429,.07391023019778703,.0062621769249755375,.14786394857966245,-.24133125024592791,.3194460948677117,.5071563706514025,.3628700351691248,1.3060302403517683,-.5146783421531846,-.23826829822593068,-.009346884510492325,.16015106243072727,.02805086056222977,-.0035899004350242064,-.005543580364317014,-.02673292092466164,-.010772744125100176,-.024390993371714485,.012627431507206405,-.008720378793527347,.017390054254405412,.12375300108425245,.24623032442851775,.3222060858193874,.14931322115435106,-.030460558403777184,.017160725214558258,-.009483975390035431,-.04093798312300821,.021461267056132466,.05260524273481167,.08258391915651302,.060994911510484674,.19212485777257118,.030490864773295545,.1759282405498893,.2988664581273196,-.3440942993173739,1.3210609586317499,.059297195869563314,.664508151802211,-.1883702247397409,.3431030805221454,.41335445680081984,.18880277280085617,-.0025387166530481263,-.027056960212979365,-.014992917126512385,-.06582507050815357,.005992440061786605,.01605849168664445,.09631821867793273,.11648035795043635,.08310567318064768,.3267135114890813,.21720864831216413,.29412476851730657,.14853499339159934,.01897098102580162,-.006319176952692685,-.01818046447321878,-.03325569084071112,.04208810691484625,.1159854409909094,.13859711550376397,-.01128947190338442,.08665386837365273,.5559656926196751,.3768055607681325,.8848889918243579,-1.1019114795534606,1.0072326177374842,-.25696609936231163,.2259560500510676,.20124367647634336,.25020565573121023,.15194580903531119,.054188690404279045,-.03158847298103453,-.07246900626544177,-.025752917138555535,-.0471489088024604,.07929355690286198,.16429646904639772,.19502382977708654,.21468548823411557,.26510515339808566,.4121092848683291,.2413785630078775,.03924506370665969,.01328784964664576,.0639384949592911,-.05680891882903846,-.03915972562302279,.028736615885883075,.07567485585281981,.10715382591497533,.2994107520295937,.24751816611443234,-.14971685838339424,.9272502035304818,-.5803073077758771,1.4965419400087898,-.5803073077758782,.9272502035304832,-.1497168583833956,.24751816611443228,.29941075202959394,.10715382591497527,.07567485585281959,.028736615885883075,-.039159725623022994,-.05680891882903847,.06393849495929133,.013287849646645755,.03924506370665942,.24137856300787733,.41210928486832976,.326713511489085,.21468548823411696,.1950238297770854,.1642964690463976,.07929355690286159,-.04714890880246026,-.025752917138555938,-.07246900626544235,-.03158847298103462,.0541886904042793,.15194580903531177,.25020565573121106,.2012436764763436,.2259560500510681,-.25696609936231096,1.007232617737484,-1.1019114795534584,.884888991824356,.3768055607681309,.555965692619678,.08665386837365335,-.011289471903383815,.13859711550376486,.11598544099090989,.042088106914846005,-.033255690840710936,-.018180464473218153,-.0063191769526928735,.018970981025801085,.1485349933915988,.2941247685173069,.21720864831216452,.24623032442851894,.08310567318064788,.11648035795043606,.09631821867793225,.01605849168664411,.00599244006178636,-.06582507050815366,-.014992917126512623,-.027056960212979545,-.002538716653047571,.18880277280085703,.41335445680082034,.3431030805221454,-.18837022473973905,.6645081518022098,.05929719586956184,1.3210609586317497,-.34409429931737384,.2988664581273206,.1759282405498891,.030490864773296485,.19212485777257224,.06099491151048541,.08258391915651307,.05260524273481172,.021461267056132546,-.04093798312300816,-.0094839753900352,.017160725214558203,-.030460558403777944,.14931322115435064,.3222060858193871,.09369529674769708,.1237530010842532,.017390054254405134,-.008720378793527876,.012627431507206037,-.024390993371714388,-.010772744125100247,-.026732920924662094,-.005543580364316986,-.0035899004350241582,.02805086056223034,.16015106243072863,-.009346884510491546,-.23826829822592965,-.514678342153184,1.3060302403517683,.3628700351691248,.5071563706514024,.3194460948677121,-.24133125024592691,.1478639485796626,.006262176924976706,.0739102301977875,.03817892786043468,.026154427883432977,-.015197940538429256,.015692601846482655,.03105103991450549,.007579036411404823,.09791737794265432,.16574720488241704,.10174972110658852,.10180457538537414,-.027988212781709362,-9620791778727375e-20,.0051215906448293215,-.02933352095747186,.025701507905379183,-.008967393462662796,.01177654442566399,.004634909602610413,-.021402902917041607,.03418607642912222,.030098075283007585,-.1169011010733573,.15345959634626896,.09763637724258231,-.21337246968950468,.7094059953008736,.18053751384272154,-.12662108035586525,-.033729052458342325,-.1068205495440398,.0827425361593592,.021312770128680637,-.02966274712552271,-.015675575409266458,.03599616230766798,.0207635038425793,-.008345642545901005,-.012539173975430275,.001814606870208027,.06324645975460065,.09764744258888952,-.013402803779000846,.06129626392127332,-.018258671855796015,-.02749045099929539,-.010113005489671634,-.01144175244603072,.03162910623031008,.016637976300589583,-.010024579181759814,-.009907901040570755,-.06025893230575406,-.041981936023927795,-.03649385871696789,.13137374163691345,.17992639617179582,.345862238701351,.3396306093743105,.2638391941079055,.24501510040664315,-.19173261262163757,.09924124830572889,.01506060958955588,-.015609494504012908,.015223562704661735,.002173233335169546,-.013294834505552418,.02039605162072387,.03214025790360414,-.002114424316175266,-.00766364946554255,.037573591582025015,-.0036013299995066783,-.027574493612477238,-.0785290662569907,.0005947400127465092,.016458612619479316,.015845305908809258,-.002026810093025809,-.013696041496545191,.008801297726758145,.016542589455127047,-.00489740011693653,-.019737461729970797,-.042341618007146614,-.08151089674102786,.044986403519810654,.06259827020745319,.16404233417264671,.09141112866594406,.36951320092864953,.05908045566984523,-.07083081897710557,-.033232550782043346,-.0028057606437617323,.007837350887812152,-.0029827434432791976,-.02176654437271973,.02352205471086483,.03169848862162995,-.030135000999364715,-.0197597500925572,.019592990080295483,-.021337213333244086,-.03281004271094604,.03509839696826556,.06570068946378826,-.019619112630341284,-.03252893302731594,-.001416656453182401,.056425701741664544,.028455863356249663,-.00973752894906295,-.005256186606445511,.00131005587719705,.008032079850161055,-.02797214703330162,-.021419082531907708,-.025936972009880058,.02735942980961241,.13624403896529816,.12236977033819048,.04009230688355046,.11452944472315811,-.062769573271967,-.065313535534232,-.010769778858653123,.006430724322423077,.0010521231241173155,.012579825412037126,.008819161982022697,-.040811004345713484,.019887732012021993,.014257984954846677,-.022459274904977573,.04074789616917183,.0702424797212939,.05505335977604347,.07295297283810104,.11130862970905199,.05565271680204555,-.08003686536329738,-.07418273257242172,.03282462316832692,.03186587970698777,-.01675825964935249,-.002406955997474462,.021075876818278654,.014396940553395566,-.048207693014304456,-.0776822018610092,-.015232023889946197,.01637727660445112,-.09528942369836853,.05318894044229575,-.007014873006770006,-.052725469767566646,.011169867646763318,-.027857672235467666,-.015475583648045285,.012961699649937817,-.0041828274568459145,-.03756979574908331,.03514872971871221,-.04240668227306084,-.023034972903402475,.08170149012888943,.06845383453783664,.013361892210316275,.33668792873864783,.07887205982729592,.043930202648898596,.06982454502965493,.08440238506225957,.0024106108264623457,-.011480544789508253,-.033818612421867275,-.03166737161574274,-.00502827741655568,.027023228844142416,-.014247675993027993,-.009001290088071238,-.0618886011651253,-.09894200529309476,.01263323283761883,.12573571356763666,-.07673272618397192,-.11419210623041808,-.037690963997301666,-.03902357631677525,-.03790710178132505,.004043623749362313,.04191586562399077,-.008688517253163995,-.004697312064988438,-.09254353938682865,-.011130337821465186,.09816142594631627,-.016521364547457937,-.01912214686945752,.3425352921597138,.3710713597043204,.8663549110069338,.06957578883921638,-.07793324996210346,-.23382813425811527,-.09863825695148333,-.02845288039285465,.02313090978794155,-.06528688150225045,-.006516309042701882,.03524540038796402,.06487167324863516,-.009910405282542379,-.07444223373636433,-.0884643892222283,-.043746931993730226,.025650630137194336,-.019555697374510583,-.11757758027246727,-.08839509351423645,.0006051884889788229,-.023883294001795972,.005215763190194649,.017696001575747886,.03829263072284757,-.06415224549575124,-.00046677178847581285,.1341767811159426,-.015474080963115183,-.2774137636701229,.10645611255411111,.491364732130425,.645662205147937,-.34894672904561197,-.22930577035731828,.06570715013088865,.07493129145102859,.010801205387038527,-.06741132095183788,-.1293046163253841,-.0036267311717218076,.0390232373941025,.04986893975541658,.002812925595011048,-.04859275944736474,-.09820675094642502,-.21167593067635238,-.24661106106331246,.17003550871316073,.14319521757460188,-.18791450411345456,.007936560869396415,-.02634365360982748,-.00641278153676982,-.021569631345745438,.09070651048741984,.023928227792328456,-.030645866021173446,.008194429787378174,.2723078481415532,-.030140868003777244,-.5536942957177085,-.3346120884840844,.40042515638418175,.547877452160026,1.7521122327973908,.02630887865012415,-.7903386881329546,-.305069105754819,-.05812266306986232,-.1512000567754718,.03080520845715192,-.05692236942047645,.018910842473248434,.04102655016489636,.10973045554309671,-.029240486244660805,-.3163922398944391,-.13757198545862218,.1270680540425267,-.07205720117764353,-.07044562563150432,.11232623315704422,.05394497327097227,.07897222152752154,-.00416350617181658,-.04361457599167779,-.07774818656606759,.04921969358643038,.04241680227334132,.12644205243911066,.39096527623299887,-.4037031247095156,-.48770772267188234,.5447330180533501,.9289894130003811,.7151259504708923,.7438533137124658,1.2482467538506357,-.5716683662381389,-.432819403691714,.023943010115746077,.00030176170486927514,-.2467922762570443,.16824405476099039,.0929298620408442,-.029175915115095267,-.0812108161453773,.03253523974658334,-.018421573557966798,-.18224178792918325,-.2905221682258862,.1711051640070395,.22815908460498383,-.15890945005602886,.0062170702455973175,-.04485316816647018,.0080331646697509,-.0842632097276826,-.016095705887684088,-7820006368420517e-20,-.09792392205621189,.48676804973393806,.35484595526186524,.18102793706565945,-1.0939934957719641,.9231011957591454,.4910867492003743,-1.6725083187014362,.5657788112446521,1.7716903674840145,-.3172433812188264,-.46946217188769945,.468040885941674,.2495599910064237,.2196596168257534,-.28426475792188616,-.12974774398976752,-.0862624260647399,.08470347473063304,.12060535717228706,-.33186051211466344,-.10830858623812538,.1774046950562415,-.004310184140959981,-.3386669625362712,.0393969525618715,-.26339593722715154,.1359801303077666,.1036496145362314,-.01116807759551522,-.18224776807046214,-.12296413131763473,.21989373735679868,.16380771710007386,.6727165127601912,-.16319024909703136,.9839049291701306,2.2217962254133496,-.660772240917578,1.5638480130127614,-1.0129349058609651,.9923275265012277,1.515502516107282,.5867500433912969,.16801904131477496,.31725814504248523,-.07171439916435922,.13832330176015895,-.06044274856052339,-.04343432877572056,-.19718551141955432,-.36586758725441343,-.15612863751307984,-.7249941619639332,-.11056584899062098,.08278017743008294,-.10585857030502534,-.49717312826403764,.06029712833825185,-.1741288940590143,.034503572794408806,-.022140372568936324,.14950061311078439,.2924299486585319,-.2910000335599442,.2275115796261395,-.11471557758718894,.255752955945665,.6600787620906332,-.2814414065580684,-1.050216159001623],bottom:{real:[5837.242024063461,16421.19056905325,8527.227518211732,3938.41845467232,969.2100004376409,269.87346390668256,193.53992011404216,135.14631901451781,58.523829955616236,29.311524302602624,20.863281166035843,14.808244655557742,11.401757474781434,9.638649393665329,8.053859109417678,7.471439806212464,7.271177617526248,7.471439806212424,8.053859109417665,9.638649393665327,11.401757474781416,14.808244655557761,20.863281166035858,29.311524302602734,58.523829955616236,135.1463190145178,193.53992011404216,269.87346390668273,969.2100004376406,3938.4184546723186,8527.22751821173,16421.19056905326,14982.474506443205,4755.19857866802,3083.864201169168,1502.8058566448747,596.268512932032,262.3552053688135,201.52671733896852,108.13603201941604,57.999252895466505,28.992297197792773,19.233600066307524,13.871180161098291,10.761421361485239,8.850682851250665,7.812558492626262,7.123450122935638,6.6618841738486525,7.176288470960696,8.141688980401993,8.866363260774406,11.328672883224474,14.773155762512141,20.0580565285724,28.68834409907191,57.995376649220766,126.94075502116374,211.30702516808583,262.5444859553627,752.9602476197267,2141.536802332785,3891.366197365788,5583.546099008517,9500.652808667768,4225.384857328793,1708.1934289355966,562.9450489663958,526.4142021082113,290.26438540271903,151.3473221830423,89.3045970775778,50.1610416734142,27.913649363990057,19.253723232543383,14.310501425792925,10.62253810462022,8.652074761601527,7.679643289534405,6.9311889072641995,6.5442165971044535,6.83524729637813,7.253158781826729,8.812570019717482,10.256278085266516,13.962876672312342,18.680978544191657,27.64161128084435,51.70590284164593,92.38303510862865,175.23999552329536,238.6238705323166,446.2130896894364,589.8495064414341,1459.800700420838,2983.642166781685,6639.698067031166,3615.9230624353354,1045.9683029029898,541.9569824673339,551.2292078912385,269.0174810237252,121.81702466062521,78.61930436899455,46.26647526114716,26.895860643920866,18.966790938143397,14.141216689343503,10.624588727031869,8.51206745844691,7.508407817845805,7.127942028564302,6.550522644160282,6.597661457074558,7.5671769464103935,8.42937533661321,10.446992271959362,13.755112829750516,18.515159362788847,25.868606557166544,43.59302593302384,76.84786004620612,125.0365119439001,241.77755195523335,523.0849929966005,633.3655585428983,855.6947679023069,2473.0066947172836,2803.949655269216,1850.6397468329815,645.7731463695902,447.0056397685769,381.6372474267435,196.7755433249871,93.58681681613771,72.61236574074685,43.711482900929944,27.782222145016455,18.647268962291367,13.844325818813939,10.350953817244738,8.7140342291789,7.351664195270592,6.886474159529909,6.1226840838853605,6.718650713141449,7.014879626817314,7.902004601266044,9.653604858655545,13.744699851401226,17.87227996094296,25.02588903079783,38.77546859762585,68.22861611587423,97.80666785184185,178.52012140604563,362.80035213144055,506.96305099601244,508.39785887877764,1271.7627571663681,1970.0713813014595,1211.9708052435174,448.82610946730466,388.9148370038566,294.26646682781944,147.68595350614527,76.56381892160427,57.53338100926053,37.094893522892434,25.168957624787666,17.405368368923924,12.931100650610183,10.211256703797424,8.378308200770265,6.884564767216135,6.295463031189576,6.1711525716900475,6.285263765474588,7.131800245728804,7.812646461498566,9.356258005810218,12.456351018938477,17.12365920646733,22.851195586808732,34.22708028584924,57.27396559547706,82.12680179596266,114.0182287640494,248.69630423497404,396.25330408596494,382.77662480077174,646.8612706088028,1066.195953557621,770.7452163454607,344.77171326148743,328.2115248838793,223.6732358532505,124.39997807543456,66.04212498002366,49.833499278727395,36.08081235450254,24.010000461569632,16.241873057458708,11.94801819096188,9.663620823552634,8.173481426927411,6.8263151892657215,6.109400553448764,5.556036412886669,6.08951612256523,6.737155385092935,7.561498049402431,9.303546039908396,11.904089289656403,15.753116847312391,22.11618678180766,33.401673308199264,45.775772578430164,60.54280760491739,91.41224059968123,164.58197575163385,289.9799614501007,367.09809735899603,433.5172945888932,538.9971467870731,436.9735160339028,214.4570000321332,226.27353228768246,190.72528880002966,104.24105887361294,63.0962910283184,44.89569211557344,34.378771692376986,22.743616534455565,14.943130070579064,11.306154107321404,9.490726177732828,8.057539867813432,6.624991765631065,5.80530835366394,5.67275940871921,5.680399455258072,6.45122342172424,7.309182096903841,8.905316851708879,11.147020821533502,13.978280110937801,19.308076160210224,27.380246565144393,39.45337202937899,53.82390657707432,70.344986096435,125.18491111128095,220.27402210338624,239.0209596497513,253.5280561179115,337.90351459641266,301.96557555412664,163.1486266603976,176.1964602722083,155.2640157056349,91.40217063585646,57.9223709952281,44.13290601551937,31.477476121951593,19.994026988386896,14.669539930994308,10.52228821405147,8.949924507684104,7.416085875937713,6.0652235290917815,5.533683634797245,5.345334549972072,5.525199888029565,6.049359333226362,7.498954463790416,8.644145711066678,10.17217183387787,12.922358897606493,16.497840703497662,24.47352534302224,36.89322569574956,46.488420049270196,60.00894968185993,101.55324863109907,172.57213254679178,186.99209153386954,177.69050334329205,224.71115213821386,219.35401697656656,131.98987419085088,139.58612051732652,133.97255559613592,83.71766714607698,52.48988401855501,39.948149447326976,29.992243301791387,19.792293237610107,13.550533437330548,10.191515700191694,8.725128556525828,7.013096609958828,6.041290502053927,5.169560945388304,5.23354642177383,5.274893760174123,5.915118914176224,6.64049249933847,8.252563319435486,9.86505065394757,11.857247340871206,15.821441128307118,21.809722446513074,33.20484260444123,45.292100524348356,53.58823709974399,86.04657086533335,138.34470513151498,144.28338780744133,137.47961624149846,184.36194031651988,195.75342807998493,111.69248606852764,108.22432115257934,110.31477193613289,70.73795275871473,45.31608419986612,35.221165127538775,25.132656234698317,17.80870832888929,13.205138111505544,9.831975695829131,8.385186971565917,6.697914777469541,5.557794982618686,5.064013606215784,4.915924071395172,5.174737523892124,5.621849200313962,6.392652273833619,7.8838556827841355,9.58804953889033,11.2702077240605,14.675031755421674,19.961485602094882,28.340133288775018,38.07180730248544,46.21180594207289,70.89628817363239,115.46517347822648,119.73189294718243,110.21299532100423,137.4907868217927,145.21239507063157,90.73647550020203,84.82013466298467,87.02888773526917,58.59278092655856,39.14047570270828,30.030590426700837,23.561748558876776,17.07171690133644,12.059539847971436,9.13034699170641,7.8824915696444915,6.557457716388455,5.450832747202711,4.631948788952135,4.85569366970317,5.095213989565805,5.36260614825461,6.023150477726759,7.392912454090475,8.869713914539098,10.839689611405708,13.484775054138881,18.12552087046162,25.51326521840107,33.81482175872351,43.00066071296376,59.28906756969899,89.52310048000626,96.00283450164133,88.24840395150595,114.22377327036351,136.39754784126862,85.13393713749406,70.75761358115078,72.94113644504662,50.41713140464106,35.29732697897046,27.270836476117434,20.337170678571646,15.328073102208975,11.22762600822461,8.889470339904383,7.306673249055975,6.111757001079701,5.224039680082537,4.692794475404797,4.446269195676172,4.8997943453914665,5.030120352863074,5.850405985335514,6.902103078533902,8.693648104841767,10.014300550884089,12.783989981758968,16.915182814597465,23.037925870268026,29.781501040175886,36.13778662893932,46.659613314406016,72.54209688440005,80.09830912470618,76.77256948716943,87.96931966600367,100.35528192635977,66.39074370667048,56.29722089299507,57.44977691289374,42.311817158751616,30.3950154293208,24.633397231162515,18.800000277532757,13.90634472463726,10.685561612392762,8.772663355326253,7.37657782226477,6.023800684787688,5.208207432749892,4.58867196645594,4.61664103539597,4.611514826957056,4.992077230917985,5.644512472351516,6.798068303404396,7.497596200534023,9.606658686908084,12.06652313244911,16.25166382630045,21.003823940677318,27.62293357307126,33.836788273738165,41.87785442344717,58.53283536970373,68.23932029676797,62.32614973900864,71.58383095513956,81.61139186167428,61.29060695836405,49.963935495056425,49.74402774735454,38.555965139546075,28.313241453630848,22.404376161451804,17.69007471646092,13.348861556136391,10.46674681432143,8.150736425345137,6.780493336316558,5.7303247473649055,4.973796153764103,4.6591603640435,4.369127354240186,4.587644085680502,4.877527941931284,5.564315782428927,6.510642451461139,7.651725877469773,9.397827067443549,12.208065227131403,15.316902707006163,20.982661610009878,26.31786929803148,32.313264556083666,38.06286011366607,50.10516748474813,58.219661124046276,59.8611576800925,61.01902036645045,69.64280516822298,57.634563900118565,46.96752310990223,43.85887184820529,34.95764055706675,26.50503998364094,21.71545909517323,16.236775633007202,12.875777825381771,9.983473961099762,7.8930497070448,6.682971556980369,5.667219370450012,5.079424691551845,4.681264046528276,4.618663229753943,4.621109290436842,5.08978657739574,5.56918107107971,6.503518731799128,7.20143269985937,9.170362043794405,12.475838151915292,15.6623920524898,19.528853843427893,25.07702804540938,30.833489267211636,39.11329640738612,46.77099142791858,55.937485646720255,57.570245344451905,57.63781758903021,59.86039156661088,52.77619568232774,43.83929696702742,39.83301283219751,33.59821343802381,26.072700016436322,20.27697550152119,16.195672497297036,12.239826665071417,9.687521348716507,7.737954389393363,6.378678225480716,5.595025932784059,5.123290382827299,4.578659230973724,4.5178908466513406,4.578659230973722,5.123290382827298,5.5950259327840595,6.378678225480715,7.737954389393368,9.687521348716508,12.239826665071421,16.195672497297036,20.276975501521182,26.072700016436304,33.598213438023805,39.83301283219751,43.839296967027416,52.77619568232774,59.860391566610836,61.01902036645044,57.57024534445192,55.937485646720255,46.77099142791852,39.113296407386116,30.833489267211636,25.07702804540937,19.528853843427893,15.662392052489803,12.475838151915296,9.1703620437944,7.201432699859367,6.503518731799129,5.569181071079711,5.0897865773957385,4.6211092904368405,4.618663229753942,4.681264046528273,5.079424691551845,5.667219370450009,6.68297155698037,7.893049707044798,9.983473961099765,12.875777825381764,16.23677563300721,21.71545909517325,26.50503998364096,34.957640557066775,43.85887184820525,46.96752310990224,57.63456390011859,69.64280516822295,71.58383095513962,59.86115768009248,58.21966112404624,50.10516748474814,38.06286011366608,32.313264556083666,26.317869298031482,20.982661610009867,15.316902707006161,12.2080652271314,9.397827067443544,7.651725877469773,6.510642451461139,5.564315782428928,4.877527941931286,4.587644085680501,4.369127354240187,4.659160364043497,4.973796153764102,5.730324747364904,6.780493336316559,8.150736425345137,10.466746814321423,13.348861556136386,17.69007471646092,22.40437616145178,28.31324145363085,38.55596513954604,49.74402774735451,49.96393549505642,61.29060695836407,81.61139186167424,87.96931966600363,62.32614973900866,68.23932029676796,58.53283536970371,41.87785442344717,33.83678827373816,27.622933573071283,21.00382394067731,16.251663826300444,12.066523132449106,9.606658686908084,7.49759620053402,6.798068303404393,5.644512472351519,4.992077230917984,4.61151482695706,4.616641035395972,4.588671966455937,5.208207432749891,6.023800684787687,7.376577822264771,8.772663355326259,10.685561612392764,13.906344724637258,18.80000027753276,24.633397231162533,30.395015429320793,42.31181715875161,57.44977691289373,56.29722089299503,66.3907437066705,100.35528192635975,114.2237732703635,76.77256948716945,80.09830912470622,72.54209688440005,46.659613314406,36.13778662893932,29.781501040175893,23.037925870268033,16.91518281459747,12.783989981758975,10.014300550884082,8.693648104841765,6.902103078533901,5.850405985335523,5.030120352863068,4.899794345391461,4.446269195676173,4.692794475404802,5.224039680082533,6.111757001079703,7.306673249055973,8.889470339904381,11.22762600822461,15.32807310220897,20.33717067857165,27.270836476117438,35.29732697897047,50.41713140464108,72.94113644504664,70.75761358115082,85.13393713749407,136.39754784126856,137.49078682179265,88.248403951506,96.00283450164132,89.52310048000622,59.28906756969897,43.00066071296374,33.814821758723504,25.51326521840107,18.125520870461624,13.484775054138884,10.839689611405714,8.869713914539101,7.3929124540904745,6.023150477726761,5.362606148254609,5.095213989565807,4.855693669703173,4.6319487889521325,5.45083274720271,6.55745771638845,7.882491569644493,9.130346991706412,12.059539847971436,17.071716901336433,23.561748558876776,30.030590426700826,39.14047570270828,58.592780926558504,87.02888773526915,84.82013466298463,90.73647550020199,145.21239507063157,184.36194031652002,110.2129953210042,119.73189294718252,115.4651734782265,70.8962881736324,46.21180594207288,38.07180730248544,28.340133288775018,19.961485602094882,14.675031755421674,11.270207724060505,9.588049538890328,7.883855682784136,6.392652273833623,5.621849200313961,5.174737523892125,4.915924071395175,5.064013606215786,5.557794982618686,6.697914777469534,8.385186971565918,9.831975695829147,13.205138111505548,17.808708328889303,25.13265623469832,35.221165127538775,45.3160841998661,70.73795275871471,110.3147719361329,108.2243211525794,111.69248606852767,195.75342807998487,224.71115213821398,137.47961624149852,144.2833878074414,138.3447051315149,86.04657086533334,53.58823709974399,45.29210052434834,33.20484260444123,21.80972244651307,15.82144112830712,11.857247340871208,9.86505065394757,8.252563319435486,6.640492499338464,5.915118914176224,5.274893760174123,5.23354642177383,5.16956094538831,6.041290502053925,7.013096609958833,8.725128556525835,10.191515700191694,13.550533437330545,19.792293237610103,29.992243301791408,39.94814944732701,52.489884018555,83.71766714607696,133.97255559613592,139.5861205173265,131.9898741908509,219.35401697656653,337.90351459641266,177.69050334329216,186.99209153386957,172.57213254679186,101.55324863109904,60.00894968185994,46.48842004927018,36.89322569574956,24.47352534302224,16.497840703497666,12.922358897606497,10.172171833877869,8.644145711066678,7.498954463790413,6.04935933322636,5.525199888029563,5.345334549972072,5.533683634797246,6.065223529091781,7.416085875937713,8.949924507684111,10.522288214051471,14.669539930994311,19.99402698838689,31.477476121951593,44.13290601551936,57.92237099522811,91.40217063585641,155.2640157056349,176.1964602722083,163.14862666039767,301.96557555412653,538.9971467870728,253.5280561179116,239.02095964975135,220.2740221033861,125.18491111128091,70.34498609643492,53.82390657707433,39.45337202937895,27.380246565144397,19.308076160210238,13.978280110937792,11.147020821533506,8.905316851708882,7.309182096903844,6.451223421724239,5.680399455258068,5.672759408719208,5.805308353663939,6.624991765631067,8.05753986781343,9.49072617773283,11.306154107321403,14.943130070579077,22.74361653445556,34.378771692377,44.895692115573446,63.09629102831839,104.241058873613,190.72528880002952,226.27353228768243,214.45700003213315,436.97351603390234,1066.195953557621,433.5172945888933,367.098097358996,289.97996145010086,164.58197575163376,91.4122405996812,60.542807604917364,45.77577257843016,33.401673308199264,22.11618678180764,15.753116847312398,11.904089289656401,9.303546039908392,7.561498049402436,6.737155385092932,6.08951612256523,5.556036412886668,6.1094005534487605,6.826315189265727,8.17348142692741,9.663620823552627,11.948018190961893,16.241873057458722,24.01000046156964,36.080812354502534,49.833499278727416,66.04212498002366,124.39997807543459,223.67323585325056,328.21152488387946,344.7717132614875,770.7452163454602,1970.0713813014588,646.861270608803,382.7766248007717,396.2533040859646,248.69630423497387,114.01822876404945,82.12680179596269,57.273965595476994,34.22708028584923,22.85119558680874,17.12365920646733,12.456351018938475,9.356258005810217,7.812646461498566,7.131800245728804,6.285263765474588,6.1711525716900475,6.295463031189579,6.884564767216139,8.378308200770256,10.211256703797417,12.931100650610194,17.405368368923916,25.168957624787648,37.094893522892434,57.53338100926052,76.56381892160427,147.68595350614524,294.26646682781944,388.9148370038566,448.8261094673048,1211.9708052435162,2803.949655269216,1271.7627571663686,508.3978588787775,506.96305099601244,362.8003521314405,178.52012140604566,97.80666785184182,68.22861611587415,38.77546859762585,25.02588903079784,17.872279960942965,13.74469985140124,9.653604858655543,7.902004601266046,7.014879626817316,6.718650713141439,6.122684083885363,6.8864741595299055,7.351664195270594,8.714034229178903,10.350953817244736,13.844325818813926,18.64726896229136,27.782222145016434,43.71148290092994,72.61236574074687,93.58681681613766,196.7755433249871,381.6372474267434,447.0056397685771,645.7731463695901,1850.6397468329806,6639.698067031165,2473.006694717284,855.694767902307,633.3655585428982,523.0849929966007,241.7775519552335,125.03651194390012,76.8478600462061,43.59302593302385,25.868606557166554,18.515159362788847,13.755112829750496,10.44699227195936,8.429375336613218,7.567176946410392,6.597661457074561,6.55052264416028,7.127942028564301,7.508407817845802,8.512067458446909,10.624588727031863,14.141216689343507,18.966790938143404,26.89586064392087,46.26647526114716,78.61930436899458,121.81702466062518,269.01748102372505,551.2292078912383,541.9569824673345,1045.9683029029893,3615.9230624353345,9500.652808667768,2983.6421667816867,1459.8007004208382,589.8495064414337,446.2130896894364,238.62387053231652,175.23999552329542,92.38303510862855,51.705902841645944,27.641611280844312,18.680978544191667,13.962876672312348,10.25627808526652,8.812570019717501,7.25315878182674,6.8352472963781254,6.544216597104452,6.931188907264199,7.679643289534406,8.652074761601519,10.622538104620222,14.310501425792921,19.253723232543386,27.913649363990046,50.161041673414196,89.30459707757784,151.3473221830423,290.2643854027191,526.4142021082113,562.945048966396,1708.193428935596,4225.384857328791,14982.4745064432,5583.546099008519,3891.3661973657854,2141.536802332784,752.9602476197266,262.54448595536314,211.3070251680859,126.94075502116375,57.99537664922077,28.688344099071898,20.0580565285724,14.773155762512143,11.328672883224492,8.866363260774417,8.141688980402005,7.176288470960711,6.661884173848655,7.123450122935626,7.812558492626261,8.850682851250665,10.76142136148522,13.871180161098282,19.233600066307527,28.99229719779277,57.999252895466505,108.13603201941609,201.52671733896852,262.35520536881353,596.2685129320319,1502.8058566448742,3083.8642011691672,4755.198578668018],imag:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},imag:[0,-.13871927675086548,-.5582757149609217,-.8538326372408309,-.4670119338361595,.047809537946767316,-.3426920474802197,.1583158937413706,.20589774809377467,-.21944378817656213,-.12654666933988368,-.19544466487854822,-.09644626945019073,-.2265628704083768,.10840537931386109,-.055457499657790024,0,.055457499657784036,-.10840537931384955,.22656287040837902,.09644626945018958,.19544466487854698,.1265466693398799,.21944378817656165,-.20589774809377467,-.15831589374137045,.34269204748022014,-.04780953794676766,.4670119338361596,.8538326372408298,.5582757149609219,.1387192767508655,-1.279550584464304,-.8069590311966991,-.5066002982483182,-1.4561178571661,-.13414323846201096,-.2505529731115498,-.640274048196847,-.19951473048424853,.3313791296331769,-.04749824375932937,-.24064979253244873,.1395435157196932,.17789090203786645,-.044374683774468404,-.36806933922228663,.19528135326361654,.3299964626914292,-.13015393203002068,.1959681784626765,.28571835588367483,.2270580105241475,-.14508578389537852,.23457709892354506,.21163882649779878,-.20150153854805303,.060946718066345364,.3100404128586439,-.2625838718707748,.13955938857309563,-.2449447076348287,.06851005109099272,-1.1758121586434307,-1.368201172600149,-1.6899938281650106,-.7501926868865519,.6891128285175293,.44086751164178845,-.2315595903433902,-.545103158770842,.26585764990704713,.2624959582084973,-.04514609184617117,.011517786678353055,-.05790784432037342,.07685412425301096,.0035092112107953564,-.23588030048916386,-.04827784038071106,-.21489820671404902,.2681728717818591,-.027468417557455105,.2987317445654509,.07289920747928859,.023829771073631354,.006649117012129198,.004829873646791909,-.13057930804766787,-.2694620959312879,.39240115086507854,.8531772106141665,-.11752989424299426,.9999870738966831,.5578743616729666,-1.0314907737559058,-1.5043263157657751,-1.3830149751777026,-.20446853801739454,-.2836403310191183,.6830314716152905,.03902721990981517,-.18273076418691683,-.013466871818696777,.028891896132398606,-.06862124221450072,-.02679286952467542,.18842973810535804,.06839228253508749,-.17097210848547728,-.23288712244734344,-.3141661235870828,.2728416921191384,-.07243899022541153,.1202436118466384,.06744326225711779,-.004045232640019184,-.15231382612170316,.020438609938141238,.10773227995476008,-.1646961578394999,-.034526357222664054,.3404569968631755,.3582562672018631,.5020328221472785,-.9005057884056485,1.1141651843864948,-1.0547694551235964,.15113295529591572,-.4201199738298069,-1.1306687523196075,.5990489956312235,.1278247611955642,-.26469201284371935,-.0028564673365734715,.2587885502662681,.0007864520134104085,-.17181320075266995,.013143422355015144,.05023839674084175,.07215692285898792,.04160467398259256,-.0112715468909201,-.016101389694688766,-.3126936366227507,.0949743341513004,-.06786938796696873,.14811752790953986,.010724993842567176,-.07149566160435743,-.037154193600070516,.05779163337935353,.09493793106291729,-.1272883333159909,-.01740846979628495,.6200376238621287,.07441700456397177,-.12904495334293709,-1.4636084587609224,-.0367437300827803,-.77470195486186,-.60686918965332,.6287263620045662,-.46894237369717673,-.18368617361305525,.26816260026693856,.13447215443394772,.04100815493405749,-.017107991149299187,-.0680369475996533,-.01240601732954733,.05935692746192456,.12615835751185028,.053672308552617974,.03774974359224236,-.10597138547480481,.022172258797336697,-.058681894939636686,.12792055300624736,-.06015432347010594,.03229830899926915,-.015701976416949814,.0007367446231764113,.07712597645572114,.05564408487662822,-.06598174001891982,-.14567847379973994,.039540586335773356,.2491706386704154,-.6432675339043068,.3675466403998282,-.0696498769749482,.2952063874323651,-.011417685121456805,-1.0450941798657123,-.17374602795438093,.19930768818407893,-.1556206112582631,.05581712853807612,.1790093649902748,.005237402448426343,-.04259609882328368,-.02083426192853383,.03668659345054796,.0007688026095817875,.06171969247781091,.027700064466885506,.10661165850403151,-.13945785164947772,-.05054425815546071,-.11937846922953205,.03439955883717337,.02521789889898339,-.004746861819041827,-.02825685744844651,.029239764799856467,.046539635523190424,-.03331642390248576,-.15842957449053302,.1474114560630888,.1752194519195491,-.07562928201952297,-.9196871674688946,-.4550470204476488,-.12177128356890227,-.10462001130261206,.1804016527269576,-.047005347129142915,-.19200701617075638,.1133507155810588,.14315736053243958,-.06754552046591941,-.0022066601859379556,.008400134072988386,.00493380069781825,.016196236751475263,.0664195740691833,-.012240235365542763,.01443312883853778,.023674926554515096,-.017114978073907605,-.1437989861779111,.08430372577238564,.005677992326511777,.048321020114327755,.022849248448590556,.012395399307186424,.023865191872962568,-.006037515267849562,-.021897165586045375,-.09217332722109582,-.17587869380621102,.09199292532210088,.014980171338571357,.0086063527817299,.098130362913165,.130338354535672,.09420330567759944,-.19730813245926024,-.10041080102702246,.07593204274580358,.02113428762188104,-.05957553232524452,.008299212542201392,.015272751179096435,.009024853611406095,-.019251438395354602,-.015788972597383853,.003250945662643008,.03296897547944033,-.015058032290062954,.017643635220692015,-.06885700316953144,.030070570566209365,-.12793975070954616,-.04353483487601328,.0017423598025251587,.028592812647173952,.0036967486190428137,.009045316783825322,-.016259252101333162,-.005207681729782719,.018046490267575967,-.026168992315517926,-.08307703486887791,.032798990212655046,-.027546636940189637,-.12409557570816734,-.008835607182220642,-.034333260533212014,.05617729507532258,.05799439311344064,-.032566171451921935,-.010465798382464413,.020079425427313443,-.017396471253638312,-.017870360905994483,.010919865739753416,.012363627500514531,-.01431321541581572,.03420155792081711,.10796975372596095,.21064351401911494,-.04601640195702946,-.0838033070266082,-.15128619138644472,-.07074541532788599,-.06951503451164355,.07063841806481566,-.008001903562601612,.02654845111893607,.019862790828204354,-.00386983557629617,-.020866890117519677,-.004808443274984591,-.00364516409639753,-.0026341276434262537,-.0023099396961399252,.04390810066375783,.09677203374284404,.04918905117971889,.07060077152873424,-.02677362863360314,-.05973226936448265,.013552286601009756,.0032289712715403013,-.023046337829044056,-.0104051517231316,.01942709625934166,.018256051683800133,-.05675987022201821,-.03296056009139303,-.0173990042730968,.12185282737260948,.03798423433754776,-.12270039394272629,-.055947445070994896,.04621845892784341,-.1857137618225036,-.06381089208694728,.07053672326645595,.03906718120738633,.01577517031413787,-.004745657011912422,-.01980141197527725,.02463719909248731,.019457415538283646,-.0067710516924983765,-.02834601701232055,-.006509832922919529,-.0013352981567293612,-.023151697315085987,-.06519950655383687,-.1042256990435297,-.023224778901070588,.00729635443120975,-.03470838640090929,-.0023809918522597964,.01616754166381201,-.005434023698746317,.002720810988399538,.006684196401156055,-.023932611476630623,-.03900580321070505,.016396390506166533,.05806798387241651,.15112210885707694,.0919535398253341,-.308789816469042,.23773808023122034,-.11496619447060334,-.15410637679425881,.16398523681965352,-.04216012313160585,-.005783889905293601,.021159112170606904,-.0008919402495326755,-.043632529695206895,.025594278576058532,.04827977682701759,.008656372871138766,-.025123508323013247,-.021222695138498154,.012727342518660707,.002732727307553498,.01672722282524492,-.062351999721191126,-.0950864851349935,.009789315676701096,.020526538310240195,-.0017729650965628652,.004236734242614828,.00969181616596509,-.014518052118829046,-.004581035374341906,-.06945150463938297,-.03628959076218118,.22708969966074724,.3665342673930222,-.5962576209185034,.3677477205864991,.2627894192943519,-.10703484463450727,-.13950623949894417,-.08080613749345363,-.018761372187400087,-.1480711283584217,.015533054933596769,-.01315617033162085,.03305379581498845,.012901798319361097,.00377273404398293,-.008705072547776149,-.026200884444946355,-.0699831200027948,-.04585110256530889,-.008021591507498945,-.04806311981862181,-.05590918830230712,.015567334119352533,-.06911372306398904,-.007247424342862186,.04252656204416145,.039806904605142766,-.027582495505149615,.004926143375425349,-.04754279011762625,-.07412235121492936,.22223052073714245,-.007741727367060801,-.08082528642091588,.6239051855537013,-.1898873716577621,-.013310214088767865,-.13538196037364333,-.38370084094404533,-.32853605615928166,-.2309534981672577,.002457368089255563,-.060148519255615616,.030360401196840837,-.008421474591235168,.033027304906486414,.0307398640217227,.009703992699996455,-.06069855739203631,-.04746519227839175,-.053530300822357386,-.04617423408269824,.005211204463466864,.020596160958060543,-.15878906772803425,-.02193329327109424,.007934242380394899,.027919450264392773,.007043080701302528,.020085011074200358,-.07593504311206385,-.04165227277395796,.16889959178925665,.18647295463827135,.014154913289577202,.06052110757646851,-.6363731233683723,.9019195738157793,.27922666018549325,-.48673882008850766,-.3337003135725931,-.3513559741645329,-.2622745616761345,-.1719749232535629,-.005731502793172811,-.04469091820910031,.053283308768024513,.03946559994643804,-.014174493080162808,-.04946368453866596,-.022857667990750397,-.1688130409012578,-.08081252690949967,.0005823444604532637,.08433842597437612,-.1251823168088108,-.04050640633805026,-.08374410530080309,-.001350704062862842,.030200114248426838,.04229988913026935,.011310849850443803,.08175917844592068,.03528956306363411,-.12268118169149339,.0581572497684168,.1945303065955717,-.3201969513996092,1.2621857571853639,.24947885513851267,-.8682713800974683,-.26346017480935824,-.4031200027249898,-.22820944406317872,.0813299683314989,.00388713671617719,-.10891614598123801,.00043800911235750134,-.04328929752692221,.012593343881888895,-.004268663667086969,-.008833188472774969,-.02414166683120631,-.03923653338217388,-.25435751708422283,0,.1310658190076192,.22441332039311174,-.09476844701896146,.0024812204443016074,.03628626839204586,.0056698536823630895,-.010705526315732189,.08204491851289233,.0010532751265284197,.015101105715477795,.09065350545022463,.27613653682211553,.17494988738073455,.3095682126985193,.0345404763627059,0,-.034540476362701966,-.3095682126985185,-.1749498873807341,-.27613653682211575,-.09065350545022713,-.015101105715478274,-.0010532751265287738,-.08204491851289233,.010705526315732109,-.0056698536823632534,-.03628626839204598,-.002481220444301584,.09476844701896192,-.224413320393112,-.13106581900761924,-.00058234446045053,.254357517084223,.03923653338217307,.024141666831206714,.008833188472774717,.004268663667086584,-.012593343881888968,.04328929752692242,-.00043800911235742604,.1089161459812379,-.0038871367161778295,-.08132996833150016,.22820944406317803,.4031200027249902,.26346017480936107,.8682713800974723,-.24947885513851314,-1.2621857571853632,.3201969513996075,-.194530306595574,-.05815724976841667,.1226811816914933,-.0352895630636345,-.08175917844592065,-.011310849850443772,-.04229988913026883,-.030200114248426623,.0013507040628626303,.08374410530080267,.040506406338050895,.12518231680881103,-.08433842597437564,.04617423408269629,.08081252690949875,.16881304090125832,.02285766799075026,.04946368453866589,.014174493080162815,-.039465599946438334,-.053283308768024965,.04469091820910013,.005731502793172531,.1719749232535624,.26227456167613394,.3513559741645329,.3337003135725934,.48673882008850966,-.2792266601854941,-.9019195738157806,.6363731233683764,-.060521107576467635,-.014154913289577215,-.18647295463827063,-.16889959178925743,.041652272773958374,.07593504311206452,-.020085011074200423,-.007043080701302525,-.02791945026439252,-.00793424238039499,.021933293271094115,.1587890677280339,-.02059616095805995,-.005211204463467397,.008021591507499164,.05353030082235833,.0474651922783904,.060698557392036064,-.00970399269999631,-.030739864021722747,-.03302730490648645,.008421474591235165,-.03036040119684083,.060148519255615165,-.0024573680892551967,.23095349816725866,.3285360561592826,.38370084094404566,.13538196037364647,.01331021408876858,.1898873716577617,-.6239051855536973,.08082528642091671,.00774172736706095,-.22223052073714233,.07412235121492945,.047542790117626306,-.004926143375424972,.027582495505149737,-.039806904605142586,-.04252656204416143,.0072474243428623,.0691137230639886,-.015567334119352927,.055909188302305984,.04806311981862192,-.0027327273075535455,.04585110256530835,.0699831200027951,.026200884444945973,.008705072547775906,-.0037727340439829347,-.012901798319361227,-.033053795814988754,.01315617033162081,-.01553305493359669,.14807112835842184,.018761372187400604,.08080613749345414,.13950623949894433,.10703484463450816,-.26278941929435246,-.36774772058649907,.5962576209185069,-.3665342673930213,-.2270896996607477,.03628959076218108,.06945150463938327,.0045810353743422905,.014518052118829408,-.009691816165965116,-.004236734242614894,.0017729650965627938,-.020526538310240098,-.00978931567670096,.09508648513499297,.06235199972119075,-.01672722282524514,.06519950655383722,-.012727342518659639,.021222695138497675,.02512350832301345,-.008656372871138747,-.048279776827017555,-.025594278576058595,.04363252969520693,.0008919402495326742,-.02115911217060702,.005783889905293781,.042160123131606046,-.16398523681965352,.15410637679425865,.1149661944706041,-.23773808023122042,.30878981646904247,-.09195353982533305,-.1511221088570756,-.05806798387241584,-.016396390506166002,.03900580321070508,.023932611476630637,-.006684196401155907,-.0027208109883995707,.005434023698746266,-.016167541663812044,.002380991852259873,.03470838640090904,-.007296354431210057,.023224778901069786,.10422569904352962,-.04918905117971928,.023151697315084544,.0013352981567299367,.006509832922919474,.02834601701232067,.006771051692498271,-.019457415538283694,-.024637199092487305,.019801411975277225,.004745657011912749,-.015775170314137797,-.03906718120738624,-.07053672326645621,.06381089208694683,.18571376182250354,-.04621845892784342,.05594744507099499,.1227003939427266,-.03798423433754704,-.12185282737260873,.01739900427309727,.03296056009139282,.05675987022201823,-.01825605168379989,-.019427096259341584,.010405151723131587,.02304633782904404,-.00322897127154033,-.013552286601009622,.05973226936448246,.02677362863360303,-.07060077152873463,.008835607182220432,-.09677203374284288,-.043908100663758234,.0023099396961402566,.0026341276434262424,.00364516409639781,.004808443274984581,.020866890117519587,.0038698355762962896,-.01986279082820429,-.026548451118935872,.008001903562601734,-.0706384180648158,.06951503451164305,.07074541532788536,.15128619138644453,.08380330702660829,.04601640195702959,-.21064351401911435,-.10796975372596025,-.03420155792081658,.01431321541581594,-.012363627500514576,-.010919865739753575,.017870360905994497,.017396471253638378,-.02007942542731345,.01046579838246435,.03256617145192176,-.05799439311344054,-.05617729507532285,.03433326053321245,-.130338354535672,.12409557570816747,.02754663694018964,-.03279899021265514,.08307703486887798,.026168992315518,-.018046490267575984,.005207681729782772,.016259252101333162,-.009045316783825131,-.0036967486190426836,-.02859281264717387,-.0017423598025251908,.04353483487601341,.12793975070954686,-.030070570566209584,.06885700316953144,-.017643635220692303,.015058032290063167,-.03296897547944007,-.0032509456626426633,.015788972597383943,.019251438395354474,-.009024853611406113,-.015272751179096435,-.008299212542201484,.05957553232524453,-.02113428762188115,-.07593204274580363,.10041080102702246,.19730813245926007,-.09420330567759928,.12177128356890216,-.09813036291316408,-.008606352781730114,-.014980171338571052,-.09199292532210057,.17587869380621152,.09217332722109572,.02189716558604548,.006037515267849643,-.02386519187296254,-.012395399307185896,-.022849248448590303,-.04832102011432769,-.005677992326511827,-.08430372577238573,.1437989861779114,.017114978073907855,-.02367492655451382,-.014433128838537597,.01224023536554338,-.06641957406918292,-.016196236751474646,-.0049338006978182185,-.008400134072988485,.0022066601859378697,.06754552046591947,-.1431573605324398,-.11335071558105927,.19200701617075636,.04700534712914311,-.1804016527269583,.10462001130261284,-.2952063874323646,.4550470204476488,.9196871674688951,.07562928201952356,-.17521945191954877,-.14741145606308895,.15842957449053352,.03331642390248584,-.04653963552319055,-.029239764799856394,.02825685744844656,.00474686181904234,-.02521789889898306,-.03439955883717374,.11937846922953181,.050544258155460854,.1394578516494776,-.10661165850403005,-.027700064466883865,-.06171969247781083,-.0007688026095812998,-.036686593450547596,.02083426192853413,.04259609882328336,-.005237402448426355,-.17900936499027453,-.05581712853807628,.1556206112582631,-.19930768818407885,.17374602795438115,1.0450941798657116,.011417685121456564,.7747019548618601,.06964987697494884,-.3675466403998272,.6432675339043074,-.24917063867041553,-.03954058633577317,.14567847379973992,.0659817400189202,-.05564408487662822,-.07712597645572139,-.0007367446231761105,.015701976416950342,-.032298308999268784,.0601543234701064,-.12792055300624763,.05868189493963719,-.022172258797336572,.105971385474807,-.03774974359224228,-.053672308552617946,-.12615835751184992,-.05935692746192366,.012406017329547145,.0680369475996537,.017107991149299284,-.04100815493405788,-.13447215443394772,-.2681626002669388,.18368617361305564,.4689423736971773,-.6287263620045653,.6068691896533199,-.15113295529591578,.036743730082780514,1.463608458760923,.1290449533429373,-.07441700456397135,-.6200376238621289,.017408469796284774,.1272883333159911,-.09493793106291715,-.05779163337935424,.03715419360007,.07149566160435859,-.010724993842566222,-.1481175279095394,.06786938796697012,-.09497433415130044,.31269363662275046,.01610138969469304,.011271546890921311,-.0416046739825933,-.07215692285898725,-.05023839674084114,-.013143422355014638,.1718132007526696,-.0007864520134103385,-.2587885502662679,.0028564673365731054,.26469201284371935,-.12782476119556443,-.5990489956312219,1.130668752319608,.4201199738298067,1.5043263157657745,1.0547694551235969,-1.114165184386494,.9005057884056495,-.5020328221472783,-.35825626720186354,-.34045699686317654,.03452635722266466,.16469615783949973,-.10773227995476188,-.02043860993814084,.15231382612170388,.00404523264002093,-.0674432622571157,-.120243611846639,.0724389902254128,-.2728416921191381,.31416612358708496,.23288712244734694,.17097210848547523,-.0683922825350877,-.1884297381053561,.026792869524674363,.068621242214501,-.028891896132398506,.01346687181869554,.18273076418691644,-.03902721990981482,-.6830314716152913,.28364033101911773,.20446853801739462,1.3830149751777017,1.3682011726001495,1.0314907737559074,-.5578743616729661,-.9999870738966836,.11752989424299397,-.8531772106141676,-.392401150865078,.2694620959312899,.13057930804766765,-.004829873646791958,-.006649117012130222,-.023829771073630532,-.07289920747928642,-.29873174456544577,.027468417557455698,-.26817287178186705,.21489820671404794,.048277840380711166,.23588030048916517,-.0035092112107956196,-.07685412425301093,.05790784432037204,-.011517786678353752,.04514609184617035,-.2624959582084973,-.2658576499070465,.5451031587708403,.2315595903433905,-.4408675116417886,-.689112828517529,.750192686886552,1.6899938281650098,1.2795505844643045,1.1758121586434311,-.0685100510909925,.24494470763482898,-.13955938857309558,.2625838718707741,-.31004041285864437,-.06094671806634362,.20150153854805294,-.21163882649779717,-.23457709892354675,.14508578389537688,-.22705801052414679,-.2857183558836735,-.19596817846267664,.13015393203001066,-.32999646269142935,-.19528135326362211,.3680693392222917,.044374683774465004,-.17789090203786717,-.13954351571969323,.24064979253244634,.04749824375933088,-.33137912963317673,.1995147304842484,.640274048196846,.2505529731115497,.13414323846201037,1.4561178571660989,.506600298248318,.8069590311966988],height:32,width:32,top:{real:[17750.107020847583,6210.865615966279,10017.081922566327,3457.5995074393513,265.850218137708,-70.20768481034305,-8.882891147089472,24.58975650378648,-11.140592103834141,-1.46746599378154,-.34121813437428317,1.0812077419156148,1.7163290532419633,-4.566614630463569,-2.684639401420383,-2.273864366622347,1.917575640981823,-2.273864366622364,-2.6846394014204122,-4.5666146304635395,1.7163290532419744,1.0812077419156028,-.34121813437427356,-1.4674659937815784,-11.140592103834141,24.589756503786372,-8.882891147089664,-70.20768481034348,265.8502181377076,3457.5995074393486,10017.081922566325,6210.865615966285,23430.31298691556,-4993.986386578701,-867.9270784111233,991.9702295167051,152.49743471969379,-30.09622891688864,45.84966179865908,-31.46758894668901,16.96071854645447,4.334366206560186,-.4258390713100009,.4786052744328573,-1.8738744001784808,.5336707597630499,-3.884194145524758,-.7540782456530397,.5514719539298555,-.7934524273933928,-5.902676979317489,-1.384293215600769,-4.144794214579823,-2.913052274311734,-.8712082218639676,-1.7340023689981476,8.022111984944255,-9.103479975813322,67.03887483927257,44.11247283269986,441.79945796279685,3245.5044122716786,3861.5097933424754,-5655.768742169554,-15889.920855591003,-2792.017020916347,3795.2577126849956,553.8844085299576,-85.90566477025423,195.26564512659746,24.791859336013662,19.6375216145314,-6.168008915359045,-5.087200295288675,-.21502707506361318,1.4832779566036471,1.4444541156654906,-2.278921340791467,.30255454236990775,-2.3473646939882187,-.02820677859184775,1.2126049622480428,-.7855793734203073,-2.9245439997897638,1.236962081731878,1.1827041713801927,-1.6114665304853286,-3.5864367039316236,-14.698165954413065,20.29282209316159,43.7328917067592,111.68572777077691,-209.48016621032312,-187.12585183373633,2586.314839382015,1688.0815183011628,4748.220391025409,1775.7319020900284,965.534591135915,-592.8974138074635,99.78788635488837,95.45976503600482,59.29663551844352,-7.698710633143011,-.003618041311866854,-.4329078625206647,-1.598202682681902,.1135987222961578,-.47654646487314006,.05292012132443119,-1.193156957130263,1.6263047283546588,1.120828251360869,-1.916766911729648,-1.3790558562903064,-.15528235781115707,.339895398198906,-1.1170639390757935,-.5401967179111659,2.403966038546336,7.33426744227294,-18.965458306286095,.03773123101507536,5.788882372224528,-226.40133474887324,-362.0750540837246,1068.1182163210274,1839.5542246985658,1536.22079311388,1719.2247320855465,351.77395499971544,-218.0081025930205,-154.06814929171503,76.93240465195194,11.83330919947551,3.0799843602247936,2.1514657945922595,-2.1600173905506583,-.8132927291931007,-.05764093599125942,.8174378178766071,.4700783435753993,.8257847464902618,-.485121980563267,-.4411834787796781,.8537258719103306,-.9650509180144995,-2.500132935450727,-.2822761000809063,1.5082121759974054,.7332379903786944,.47326064521443867,-2.2071915479661444,2.1017967421924912,-14.788373732218277,-10.376064867674437,-110.67917899227207,-400.67251265606825,13.375377575225066,2228.271084047331,1272.0006323499422,485.3035992226992,-150.18264185504094,-215.33992676901764,-8.869446734595165,40.21604419999191,.627396838406635,-1.763160286154926,.8876150621479377,2.2829883187502253,-.37542737915458396,-.08292432350233894,-.2690018095258665,.06649495301798529,-1.293709574268377,.9014801984840545,1.049315066873844,-1.550015566266476,-1.5096304544124948,-.7672546252768676,-.45464639460382006,.03503878860161394,.8539387293596101,.891727630123107,-.12413241898971583,-7.405788146756412,-5.5362761946156125,1.231534306746803,18.635135255424384,26.03667534143711,-87.77288882471544,-225.72012452523,395.63478219787083,378.7170167703935,36.70305631243881,-91.05039439794716,-3.4611377608751717,16.691588629055683,-.030826600791664327,-3.196930879641269,1.3816292236713215,.42488100600164197,.0847137636329082,-.28535803119354425,.005848312084274873,-.7224956550701193,-.802621622131051,-.11947358836291604,.1425158350557394,-.2663976476885841,-.5959983362374907,-.5628948051906861,-.09220191182028845,.7722381907211653,.5552249106419074,-.14411590791637013,-2.1806910872492855,1.0588352659849944,-1.722617263430356,-9.016744076782127,-38.48389632251889,-22.599080819691828,25.54113970512769,375.57983717352784,181.47383294778024,149.67885098073037,-4.100878251797606,-3.738347514365787,18.721866312633942,-1.1602382001305473,-5.839154093942011,-.21088907624048864,-.29870055099180226,.9533183744618138,.06042439564320553,-.42858353450158043,-.37036207729837234,-.3036964450645726,-.7565217634765898,-.4454571363152239,.7132684521528351,.07176180892895631,-.6382969819391779,-.4523550556385587,-.08015934030842575,-.15881914095274483,.37773826228539636,-.0970863633135215,-.8670604429090952,-1.3342582973973045,-.6179277702044148,.16957438507140327,10.565905071599056,15.380533375221102,10.50023919474786,19.996280010030237,18.60272375866586,4.034831471780333,11.168149094486143,14.395513359675057,-3.576502394652771,-3.876062809222843,2.0358977627782506,-1.6580642648165547,-.13166485139511078,.2591565726162201,-.22701969228044258,-.29312645623416966,.09996947219935386,-.3910166116454323,-.042546772814251566,.29433076927773894,-.5093538487418168,.09048772686114162,-.09214398588257239,-.5825352944026844,-.416714322810017,.14644815319126417,.2723500443275419,-.039709576626662156,-.41013369223337515,1.1756350920235048,1.5259648698081887,-4.451627866201312,-8.128003687892722,9.604108020551694,20.813833475064627,12.963050463991683,7.8870012209429445,15.407970089260955,5.378309688910911,-3.135003053617967,1.9101786820520572,1.6649545288728531,-2.142164884787256,.3523092008580216,.37729718445187704,.02082392939460398,.08713974495724808,-.10976037032555666,-.5698689940173911,-.4402090815221931,.6919056466115241,.20725962387572397,.6404278736867182,.7186728309989674,.16183428074791173,-.17223426808716463,-.17676233483878773,-.27594664738318686,.0952383574449861,.02072697193586424,-.11463597101365795,-.3233331161098237,1.2888258236383847,3.023753883451761,-.12189842989060286,-4.500205647906865,-2.8307120360813536,9.032505574283658,-5.083687145641661,-6.422678336118566,-2.383206402964554,2.120438050789215,-2.1797923249754283,-2.131688277076892,1.4364513793862836,.8284741731103675,-.5470510771368747,-.053118808001264,.1034933009018914,-.027586170457780668,-.2786611518494937,-.4744187891270259,.32835706009268834,1.8712198771790323,.4493701678023156,.8488760221500451,.3519180353068138,.2875824347525097,-.6426201464805843,-.4059735310092979,-.2224452936424687,-.07186950223505165,.3302146612298864,.24942995069051274,-.5214330526633183,-.09366255470033667,1.1233733739102922,1.9003965613191238,.07120934753760759,-8.654923611944618,-1.842762037193103,-.5229577546680441,3.409295272037012,-.6500317796772334,-.1840159964371442,1.8831870902689825,.7983111628921199,-.3992517298270185,.05120517740303382,.2598923527237304,-.18824332097783142,.13750859145926242,.7822683031309051,-1.2572785001190825,1.335536332855691,1.2220896356262305,1.6491421999762639,1.7622421170936717,.9648743983441674,.7912838147011229,-.26979590260649117,-.37236776211072153,-.6531881225090838,-.13360581679076858,-.1817007191765827,.4244891020544192,1.0695325895656689,-.49200291489349485,-.5995906658098875,-2.461030407050638,-1.7528842523917616,5.409297459242755,11.628502736704702,13.318871722095572,5.384420128917242,.12839725172390623,-.9146215998500353,-.4207633568928546,.7328961843606323,.9816454560601925,-.31879685258307294,-.45467275635234927,.23929181220408463,.735537321037087,-.7805028518028965,-.2061437725020578,-.6614735481139654,.8472254475644475,3.1542100241342745,-1.0454812204468338,.4911227283477408,.8978009409713777,-.8068634496024236,.2616620751435001,.3423496440167225,-.27361449647202374,.07840034325728802,.2713071574863611,-.26706243773596255,.9287956087265937,-1.3686907450256593,.37153092475944227,-.00770609153918559,-2.1487270106054996,8.242311510799118,10.211121947580189,11.004080199445575,5.512476255300478,.43541395104991965,1.3138259234516578,.4769768752500237,-.3743769063787195,.4917032514672482,.5309293320442569,.7897723185645854,.05493597003430254,1.0907299238052364,-1.4537313504920895,1.663741525652943,2.3271742206176285,1.6752406948773604,6.0227778178364675,-2.569314033109529,-1.3449083811022362,-.06354075932635939,1.2007479971921078,.26947504329539196,-.043317616642408706,-.0900924044749603,-.5614935645216418,-.29757479536733583,-.825312878504854,.5288097384008399,-.5104284962829919,1.1866854822445434,7.713048076228817,17.626109919920186,26.29568713002228,9.15149795145862,-1.521929375229722,.8536435912377126,-.365663824522519,-1.1590870007863963,.4808263000269652,.9305906744563816,1.1024013035834523,.638418295742183,1.5659590764611497,.20674310541385973,1.0081259505833966,1.4865008399227626,-1.6031905208728288,5.771883570976741,.2720344299284404,3.2411570780563994,-1.0481514144590243,2.2338214812745694,3.1628749936702945,1.7743358086362808,-.03099281849361625,-.4144288271295417,-.31459130661253104,-1.7323756021672925,.19363530105298493,.6112321227052172,4.826040478690415,6.7814469674820135,4.974801806376985,19.935738411546794,15.127019575257112,16.951752765718286,6.976320734749117,.8320458256453673,-.22090351652873133,-.48187393778382737,-.7221625941331894,.6833751487943774,1.493402769177877,1.3836806937153638,-.0891083628996989,.5791053376434419,3.1507795425198797,1.9139554692796912,4.14239902259602,-5.089358033057332,4.654532007457709,-1.3079026033800338,1.258390156840345,1.3087920196200225,1.8018391908724931,1.3933980798910508,.6760493311480307,-.49475104816844406,-1.4152366315362725,-.645806625334661,-1.4537653735214031,3.1014323943375786,7.6843087454063586,10.909142678924193,12.359496229531475,15.280082473470735,24.669023160454167,12.739042274822818,1.7204760023261643,.5292950854871518,2.1482192005482723,-1.481161898887601,-.7940407971043247,.46540881956838565,.9262471185427797,1.0380549761479756,2.3168267428989626,1.5788387366050483,-.8376697052300492,4.750572050222373,-2.6570294115495297,6.761213132395551,-2.6570294115495336,4.750572050222378,-.837669705230057,1.5788387366050476,2.3168267428989657,1.0380549761479752,.9262471185427773,.46540881956838565,-.7940407971043286,-1.4811618988876,2.148219200548279,.5292950854871515,1.7204760023261518,12.73904227482281,24.669023160454188,19.935738411547018,12.35949622953156,10.909142678924129,7.684308745406342,3.101432394337563,-1.4537653735213987,-.6458066253346709,-1.4152366315362839,-.4947510481684456,.676049331148034,1.3933980798910552,1.8018391908724987,1.3087920196200247,1.2583901568403484,-1.30790260338003,4.654532007457706,-5.08935803305732,4.142399022596009,1.913955469279683,3.1507795425198943,.5791053376434462,-.0891083628996941,1.383680693715373,1.4934027691778826,.6833751487943738,-.7221625941331862,-.4818739377838111,-.22090351652873805,.832045825645343,6.976320734749093,16.951752765718314,15.127019575257133,17.626109919920285,4.974801806376996,6.781446967481992,4.826040478690392,.6112321227052044,.193635301052977,-1.7323756021672947,-.31459130661253587,-.4144288271295444,-.030992818493609464,1.7743358086362877,3.162874993670298,2.2338214812745694,-1.0481514144590143,3.241157078056395,.27203442992843363,5.771883570976741,-1.6031905208728274,1.4865008399227673,1.0081259505833953,.20674310541386615,1.5659590764611582,.6384182957421902,1.1024013035834526,.9305906744563824,.48082630002696636,-1.159087000786395,-.3656638245225098,.8536435912377094,-1.5219293752297598,9.151497951458596,26.295687130022237,8.242311510799235,7.713048076228867,1.1866854822445243,-.5104284962830227,.5288097384008245,-.8253128785048506,-.297574795367338,-.5614935645216511,-.0900924044749598,-.043317616642408116,.26947504329539745,1.2007479971921178,-.06354075932635406,-1.3449083811022313,-2.5693140331095257,6.022777817836472,1.675240694877361,2.327174220617627,1.6637415256529449,-1.4537313504920832,1.0907299238052377,.05493597003431282,.7897723185645906,.5309293320442623,.4917032514672505,-.37437690637871607,.4769768752500283,1.3138259234516545,.43541395104990577,5.512476255300489,11.004080199445557,10.211121947580168,11.628502736704604,-2.1487270106054663,-.007706091539169374,.37153092475944555,-1.3686907450256616,.9287956087265901,-.26706243773595856,.27130715748636525,.07840034325728844,-.27361449647201985,.34234964401672396,.26166207514350365,-.8068634496024222,.8978009409713853,.49112272834772974,-1.045481220446846,3.15421002413427,.8472254475644415,-.661473548113959,-.2061437725020583,-.7805028518028938,.7355373210370894,.23929181220408727,-.45467275635235105,-.31879685258307255,.9816454560601955,.7328961843606313,-.4207633568928543,-.9146215998500377,.12839725172388108,5.38442012891722,13.318871722095585,-1.8427620371929223,5.4092974592426515,-1.752884252391761,-2.461030407050609,-.5995906658098782,-.49200291489348996,1.0695325895656664,.42448910205441354,-.18170071917658262,-.13360581679076522,-.6531881225090824,-.3723677621107227,-.26979590260649017,.7912838147011273,.9648743983441668,1.7622421170936722,1.6491421999762705,1.2220896356262196,1.3355363328556904,-1.257278500119075,.7822683031309038,.13750859145926628,-.18824332097783478,.25989235272372874,.05120517740303401,-.39925172982701423,.7983111628921264,1.8831870902689678,-.18401599643714045,-.6500317796772292,3.409295272037008,-.5229577546680811,-5.083687145641791,-8.654923611944545,.07120934753757101,1.9003965613191072,1.1233733739103013,-.09366255470034336,-.5214330526633129,.24942995069051838,.33021466122988513,-.0718695022350494,-.22244529364246549,-.40597353100929245,-.6426201464805834,.2875824347525145,.351918035306808,.8488760221500463,.44937016780231587,1.871219877179029,.32835706009269156,-.47441878912702484,-.27866115184949264,-.027586170457779294,.1034933009018901,-.053118808001266206,-.5470510771368722,.8284741731103715,1.4364513793862805,-2.131688277076882,-2.1797923249754287,2.120438050789201,-2.383206402964568,-6.422678336118408,7.88700122094335,9.032505574283476,-2.830712036081403,-4.500205647906819,-.12189842989059124,3.023753883451757,1.28882582363838,-.3233331161098253,-.11463597101365604,.02072697193586587,.09523835744498739,-.27594664738318975,-.17676233483878293,-.1722342680871602,.16183428074791517,.7186728309989714,.640427873686722,.20725962387572536,.6919056466115251,-.44020908152219435,-.5698689940173924,-.10976037032555588,.08713974495724872,.02082392939460036,.3772971844518759,.35230920085802736,-2.142164884787245,1.6649545288728365,1.9101786820520659,-3.135003053617966,5.3783096889108455,15.40797008926083,18.60272375866586,12.963050463991696,20.813833475064644,9.604108020551676,-8.128003687892736,-4.451627866201328,1.5259648698081876,1.1756350920235052,-.41013369223337515,-.039709576626662,.2723500443275417,.14644815319126442,-.41671432281001886,-.5825352944026828,-.09214398588257292,.09048772686114251,-.5093538487418168,.2943307692777374,-.042546772814252246,-.3910166116454319,.09996947219935487,-.29312645623417033,-.22701969228044291,.2591565726162216,-.13166485139511078,-1.6580642648165524,2.0358977627782484,-3.8760628092228537,-3.5765023946527563,14.395513359675084,11.168149094486147,4.034831471780354,181.47383294778047,19.996280010029963,10.50023919474779,15.38053337522109,10.565905071599067,.1695743850714092,-.6179277702044097,-1.3342582973973056,-.8670604429090915,-.09708636331352224,.37773826228539636,-.1588191409527461,-.08015934030842092,-.45235505563855616,-.6382969819391766,.07176180892895834,.7132684521528342,-.4454571363152199,-.7565217634765878,-.3036964450645788,-.3703620772983737,-.42858353450157866,.0604243956432037,.953318374461814,-.29870055099180354,-.21088907624048941,-5.839154093941986,-1.1602382001305538,18.721866312633882,-3.7383475143657954,-4.100878251797706,149.67885098073012,395.6347821978709,375.57983717352744,25.5411397051276,-22.599080819691835,-38.48389632251889,-9.016744076782171,-1.7226172634303247,1.0588352659849967,-2.1806910872492873,-.14411590791637696,.5552249106419069,.7722381907211674,-.09220191182028437,-.5628948051906791,-.5959983362374925,-.26639764768858487,.1425158350557399,-.11947358836291141,-.8026216221310536,-.7224956550701233,.005848312084270103,-.28535803119354936,.08471376363290742,.42488100600164375,1.381629223671322,-3.1969308796412634,-.030826600791668796,16.691588629055648,-3.4611377608751566,-91.05039439794719,36.70305631243863,378.7170167703935,1272.0006323499422,-225.72012452523026,-87.77288882471514,26.03667534143715,18.6351352554245,1.231534306746842,-5.536276194615616,-7.405788146756401,-.12413241898971436,.891727630123105,.8539387293596038,.03503878860161398,-.4546463946038164,-.7672546252768583,-1.509630454412483,-1.550015566266479,1.0493150668738473,.9014801984840544,-1.2937095742683813,.0664949530179763,-.2690018095258679,-.08292432350234526,-.37542737915458746,2.2829883187502267,.8876150621479396,-1.7631602861549227,.6273968384066227,40.21604419999188,-8.8694467345952,-215.33992676901772,-150.18264185504114,485.3035992226977,1536.2207931138814,2228.271084047332,13.3753775752247,-400.67251265606865,-110.679178992272,-10.376064867674508,-14.788373732218197,2.1017967421924983,-2.207191547966143,.47326064521441386,.7332379903786985,1.5082121759973919,-.2822761000809081,-2.5001329354507282,-.9650509180144967,.8537258719103169,-.4411834787796837,-.48512198056327205,.8257847464902586,.4700783435753934,.817437817876596,-.05764093599127141,-.8132927291931111,-2.160017390550672,2.151465794592262,3.0799843602248034,11.833309199475522,76.93240465195203,-154.06814929171483,-218.00810259302057,351.7739549997146,1719.2247320855445,4748.220391025408,1839.554224698564,1068.1182163210278,-362.07505408372486,-226.40133474887313,5.788882372224479,.03773123101509879,-18.96545830628597,7.334267442272939,2.4039660385463657,-.5401967179111887,-1.117063939075788,.3398953981989011,-.15528235781113153,-1.3790558562903272,-1.9167669117296613,1.1208282513608707,1.6263047283546224,-1.193156957130264,.05292012132442746,-.4765464648731435,.11359872229612604,-1.5982026826818876,-.4329078625206879,-.003618041311865411,-7.698710633143024,59.29663551844356,95.45976503600443,99.78788635488839,-592.8974138074643,965.5345911359134,1775.7319020900306,-15889.920855591006,1688.0815183011607,2586.3148393820165,-187.12585183373636,-209.48016621032366,111.68572777077674,43.73289170675933,20.292822093161472,-14.69816595441305,-3.5864367039316574,-1.611466530485326,1.1827041713801545,1.236962081731869,-2.9245439997897797,-.7855793734202979,1.2126049622479607,-.028206778591846705,-2.347364693988263,.3025545423698818,-2.278921340791416,1.4444541156654738,1.483277956603626,-.2150270750636187,-5.08720029528866,-6.168008915359052,19.637521614531632,24.791859336013527,195.26564512659732,-85.905664770254,553.8844085299576,3795.257712684994,-2792.017020916346,23430.312986915553,-5655.768742169554,3861.509793342478,3245.504412271677,441.7994579627963,44.11247283270051,67.03887483927267,-9.103479975812874,8.02211198494424,-1.7340023689979776,-.8712082218640018,-2.913052274311693,-4.144794214579845,-1.3842932156007377,-5.902676979317541,-.7934524273933764,.5514719539298532,-.7540782456531224,-3.8841941455247726,.5336707597630261,-1.8738744001784735,.4786052744328138,-.42583907130996707,4.334366206560095,16.960718546454476,-31.46758894668928,45.84966179865925,-30.096228916889014,152.4974347196931,991.9702295167021,-867.9270784111243,-4993.986386578703],imag:[0,-2277.9356791272003,-4760.5440393641,-3362.7502157108247,-452.6326365977277,12.902525613472081,-66.32459149303926,21.395810280639775,12.049924797684376,-6.432231930192483,-2.6401787430633603,-2.8941924141450355,-1.0996569736184965,-2.1837600734887777,.8730816516968187,-.4143473704962265,0,.41434737049617953,-.8730816516967246,2.1837600734887985,1.0996569736184816,2.8941924141450213,2.640178743063284,6.432231930192494,-12.049924797684376,-21.39581028063975,66.32459149303935,-12.902525613472182,452.63263659772764,3362.7502157108197,4760.544039364101,2277.9356791272016,-19170.834011440937,-3837.2504381898657,-1562.2865240696121,-2188.2624437144,-79.98538931763022,-65.73387671644744,-129.0323271304431,-21.57473128398986,19.219741943874205,-1.3770831994436832,-4.628561865608997,1.935633246860916,1.914358953204174,-.39274625271235863,-2.8755632420164114,1.391076979912747,2.198398212230069,-.9340221618772395,1.5955119590990243,2.5332827335358816,2.5722659267438073,-2.1433748844126024,4.705160710516987,6.0715674792926295,-11.686157623491814,7.736622407403881,65.5137173230452,-68.9399476604814,105.08267177765576,-524.55810593663,266.59769699529215,-6565.201391560311,-12998.804313286138,-7140.874330507554,-1281.4742181751476,387.93265499317204,232.0789193763446,-67.21350217512955,-82.49990339348469,23.74231030494058,13.167070698799225,-1.2601921779485123,.22176027695648487,-.8286902887112986,.8163858633748259,.03036195775005164,-1.8114765667849664,-.33462283171345614,-1.4063404110660631,1.8330278968089115,-.19923279402973898,2.6325944160953934,.7476745441031245,.33273215463055067,.1242120122414053,.13350548988021607,-6.751721015042069,-24.893726268864828,68.76437592093231,203.5884482467179,-52.44337724103917,589.8418819857724,814.3853839170243,-3077.5993672243876,-9988.272530974133,-5000.875744438487,-213.8676097071096,-153.72085790515706,376.50689706328353,10.499004391497454,-22.259718007212538,-1.058756094412357,1.3367261976572533,-1.845627367813951,-.5081747549074722,2.6646257572641145,.726639874038269,-1.4553261209412862,-1.748611490859247,-2.2393579162674944,1.787255682497424,-.4779279337995983,.9099046875190019,.5685045714908853,-.042260514128558184,-2.0950938638350283,.3784241201585649,2.7868839636562086,-7.179603879766707,-2.653276667752605,42.569555354666804,86.61832325668642,262.60583525697274,-570.3493516446566,953.3853188584327,-2608.4519239039555,423.7691979018007,-777.4907220078727,-730.1555176872118,267.7782795448585,48.782690015655945,-52.08491464110734,-.2673276853691823,18.791248861451912,.034376983736590996,-4.773352510756985,.2450889317389604,.6955167330950534,.7468929761078751,.3625445531781404,-.08286462770329087,-.11088180406499534,-1.914524352082348,.6380993778757686,-.4760955869340491,1.1704253870693357,.1035348526676573,-.9826864094292438,-.6640301497435355,1.4462870038602533,3.6812627646537175,-8.684706829846188,-1.702664423174063,110.68919188818327,26.998515460375977,-65.42102326237345,-744.0954066709206,-46.729307478653496,-1526.2181503116453,-735.5077404616152,282.18880697804167,-182.37864683063907,-54.0526813142352,39.603849315110104,10.295701682078779,2.359337802307917,-.6346191100738395,-1.7124190510555728,-.21593130161202514,.7675504033211141,1.2882353738829533,.4496831429006712,.25989055470659483,-.6671389396205737,.13682839189736165,-.3688311879534851,.9123038313637193,-.4699644624025633,.3021913121485442,-.19558932994062075,.01261576384947006,1.762420772813289,1.9045345605049635,-3.7790359077733253,-11.964107143689581,4.5083476182968525,61.96781696120042,-254.89688572081204,140.68826246910922,-45.053807917761794,314.747855744751,-8.800126189101572,-360.31891091191073,-57.02544877742448,44.579795546563595,-19.359200628613657,3.6862817789376683,8.920663061128309,.18896973496668307,-1.022732352408107,-.33838743748909134,.4383320859115699,.007429416907156167,.504464760143059,.1890893708139402,.6513333254686208,-.7748329018274454,-.3077900749407771,-.8042712968338931,.2601121970475906,.2346158834364472,-.05650706693953473,-.4451335771232274,.6466720997697505,1.554501701628272,-1.5250850436867627,-9.59177124730927,13.475211488788412,28.8379635870378,-21.930976284520067,-337.61540934331555,-197.27075321520147,-65.63437440423792,-45.71617418640904,38.68839724466203,-10.636065931319841,-36.620593610799475,11.815798616251305,9.03269848300071,-3.0325028906240825,-.07586226673501913,.19104942819406223,.07372642556981186,.18311714867084192,.6303699903322625,-.09862618444928073,.09561935970760504,.13744024889930673,-.09708915289878234,-.8168356827516692,.5438621702414317,.041501479859297266,.4303139947158866,.254701048212831,.17326636360277617,.46079094226119127,-.1653086566745448,-.8639170202551628,-4.961128553246363,-12.372184270457062,11.516126179313906,3.2997425925449804,2.057098700973387,24.878800155519915,44.04178808431685,28.44615541803764,-32.190550839656126,-17.692027714058376,11.789513877445387,1.9317197634824401,-3.450756085581017,.36626836712779354,.480747660556516,.18044316667269442,-.2824097442697313,-.16613612027343372,.029095718259237995,.24450075339721422,-.09133033174751364,.09763429547907566,-.36806371804963284,.1661459131254051,-.7739535250454471,-.3264657443238585,.015061212014132833,.29085100346092985,.04777071240950242,.14922819541222396,-.39792121836056477,-.1921281774085053,.8389528199741381,-1.5703737430868945,-8.436742777573645,5.660191686379234,-5.151003256170212,-22.05060531025986,-1.985459469757478,-7.531138613863072,7.414834109374134,8.095212346461937,-4.362973215395906,-.8761722254011065,1.0539667118389069,-.6949568334964709,-.5359722121834076,.21612918483653182,.16753374785242167,-.14587335963051168,.2984129896925935,.7572023138336264,1.2725586605629424,-.23788459440434945,-.4385884976219189,-.7980185869448654,-.418467544297231,-.4616140652658238,.5829480178646468,-.07893918397306843,.3147915514342539,.3142579757323138,-.08440003983266144,-.692881801996411,-.2177844961762289,-.19533791786522492,-.22665765093841067,-.3195679261340593,6.3352095159571435,13.304182061875538,9.068588917821575,13.820343051841526,-2.9904131431626517,-6.464484302874146,1.4950174056035006,.22841081726546483,-1.0443697855595202,-.36648156701751267,.4882545319244275,.32511669967392476,-.7495219254728813,-.3240674257394919,-.14589390394899102,.816159853135446,.21110858701983537,-.6213564644140027,-.275033391957563,.23916839371037824,-1.0440547633891395,-.40792084439497517,.5561013465692207,.37457806876122546,.17778944632276653,-.06964266735015433,-.395265600045646,.6982215061431774,.740778974977921,-.3129025268374792,-2.009627390680164,-.7516589877591736,-.15987777595408992,-2.551617907860878,-8.96433145647966,-15.134863386021781,-2.1073345817546003,.6188777654040759,-3.020632263557078,-.13950893398737912,.6328052716649578,-.16318694006603662,.06410706438489891,.11411070867346804,-.2886162817684455,-.35613651800395313,.12924440993745664,.38077834891929796,.8237413397844878,.42592408743381815,-1.499388757097531,1.2113263922466315,-.6165184213094926,-.9282058970090798,1.2123284995709924,-.37394823077908607,-.0626955713199254,.28532586796592635,-.016166881608109255,-1.113208302263574,.8654659680925351,2.0760623026361933,.5132282760654556,-2.249134360011389,-2.0374388890600263,1.1231676638159473,.3121424243877217,2.2815521755579042,-5.308271224660933,-6.728092771971708,.7140438104778886,1.0348891792697787,-.06258092873568138,.11553928672311624,.19710411955257187,-.22253376417909151,-.05143415191355815,-.6173870905535266,-.26515618204121805,1.3879170617746586,1.914789556971131,-2.7981144693643607,1.635105361823879,1.2876141106871726,-.538398150461572,-.8161681385562726,-.5577322903580001,-.1631047677612218,-1.4828287822897712,.1985744186572128,-.22253902629935005,.7614908977166794,.38423492006819204,.1363382578891905,-.40617531895308634,-1.9006670978622686,-5.605529579495267,-3.520106957758509,-.705653947553275,-4.823387939658201,-3.7118525914264513,.8763976476322485,-3.9705679716456896,-.3066516936670704,1.2925955094882555,.9805792936814742,-.5185509231518588,.06850464794165309,-.508021413026953,-.6502504343138331,1.639300730699956,-.04663462261514044,-.42095485749155304,2.862896234676761,-.8766418320987102,-.06138024962032572,-.6758372018583059,-2.165804182360429,-2.233410549901899,-1.7315960703588726,.023607096501577673,-.7257834989804465,.49340703388266716,-.17688316963519096,.9123110495294448,1.0401382704665323,.4063823936166456,-3.5528586670065754,-3.2389924588328527,-3.336337544628424,-3.3053285670589143,.4252936495393003,1.2623512061316915,-7.933726737283649,-1.0910503490681764,.3059123726272148,.7904901365883903,.15779582936744363,.35530534658354934,-1.0136463777621887,-.4359637933660717,1.3766560550226186,1.2643786263280588,.08111224992006862,.30101965208538256,-2.9649644331404845,3.940601481283172,1.2809925361642973,-2.3740821954043603,-1.8568139214134618,-2.2875531209700912,-2.0068530505793203,-1.6161905886738603,-.0699705599485395,-.6845264460955596,1.1180256373411306,1.0386505011587546,-.45802414484767806,-1.8827293053017495,-1.1452872829873149,-9.828238034590992,-4.837531415856278,.03553408849268729,5.873564568328072,-7.214828237282292,-1.9024855757814658,-3.672921982430532,-.04721742712852893,.8004552356650778,.9185615121387268,.1836517312402891,1.0527130168554166,.35231243394437906,-.9683286652099518,.38866324603453256,1.1024459216780036,-1.6264163010988006,5.908624805151913,1.1522588148293589,-4.01237694118883,-1.340956061423007,-2.245048288549614,-1.484164394238348,.5856922934209832,.03564645100107093,-1.3588202093923047,.006860270440306241,-.8453903643879284,.31580363771161246,-.13161779536446233,-.3454951189579537,-1.1291296924180168,-2.1947930228924113,-14.643424663744323,0,7.845651246794636,11.843681310787776,-4.154582091968257,.09883448579737673,1.2191537903053737,.14782839419733967,-.21707569483499198,1.328772630302227,.012891904979339022,.146292284007916,.7014726904124609,1.7613861146868823,.9788491568328603,1.5860078469473597,.1581490709403331,0,-.158149070940315,-1.586007846947355,-.978849156832858,-1.7613861146868832,-.7014726904124806,-.14629228400792066,-.012891904979343359,-1.328772630302227,.21707569483499028,-.14782839419734384,-1.2191537903053777,-.0988344857973758,4.154582091968275,-11.843681310787789,-7.845651246794633,-.03553408849252048,14.643424663744339,2.194793022892366,1.1291296924180338,.3454951189579438,.13161779536445045,-.3158036377116142,.8453903643879325,-.006860270440305063,1.3588202093923036,-.03564645100107677,-.5856922934209922,1.484164394238344,2.2450482885496172,1.3409560614230207,4.012376941188847,-1.1522588148293609,-5.908624805151906,1.6264163010987922,-1.102445921678016,-.3886632460345318,.9683286652099508,-.3523124339443831,-1.0527130168554157,-.18365173124028866,-.9185615121387165,-.8004552356650727,.04721742712852156,3.67292198243051,1.9024855757814958,7.21482823728231,-5.873564568328037,3.3053285670587775,4.837531415856222,9.828238034591017,1.1452872829873084,1.8827293053017478,.4580241448476783,-1.0386505011587623,-1.1180256373411397,.6845264460955567,.06997055994853607,1.6161905886738546,2.006853050579316,2.2875531209700912,1.856813921413464,2.374082195404371,-1.280992536164301,-3.9406014812831787,2.9649644331405014,-.3010196520853782,-.08111224992006867,-1.264378626328054,-1.3766560550226248,.4359637933660757,1.0136463777621971,-.3553053465835505,-.15779582936744335,-.7904901365883831,-.305912372627218,1.0910503490681696,7.93372673728363,-1.2623512061316555,-.42529364953934357,.7056539475532939,3.336337544628484,3.2389924588327594,3.552858667006559,-.4063823936166395,-1.0401382704665338,-.9123110495294464,.17688316963519082,-.4934070338826668,.7257834989804409,-.02360709650157415,1.7315960703588795,2.2334105499019046,2.165804182360432,.6758372018583214,.061380249620329064,.8766418320987087,-2.862896234676741,.4209548574915572,.04663462261514133,-1.6393007306999556,.6502504343138344,.5080214130269537,-.06850464794164784,.5185509231518611,-.9805792936814706,-1.2925955094882546,.3066516936670752,3.9705679716456634,-.8763976476322699,3.7118525914263776,4.823387939658211,-.31214242438772705,3.520106957758469,5.605529579495292,1.900667097862241,.40617531895307485,-.13633825788919066,-.384234920068196,-.7614908977166867,.2225390262993494,-.1985744186572119,1.4828287822897714,.16310476776122626,.5577322903580035,.8161681385562749,.5383981504615758,-1.287614110687174,-1.6351053618238793,2.7981144693643794,-1.9147895569711246,-1.387917061774662,.26515618204121727,.617387090553529,.05143415191356246,.22253376417909698,-.19710411955257243,-.11553928672311804,.06258092873567889,-1.0348891792697743,-.7140438104778788,6.728092771971674,5.308271224660902,-2.2815521755579335,8.964331456479705,-1.1231676638158536,2.03743888905998,2.2491343600114058,-.5132282760654543,-2.076062302636191,-.865465968092537,1.1132083022635748,.016166881608109234,-.285325867965928,.06269557131992738,.373948230779088,-1.2123284995709924,.9282058970090792,.6165184213094966,-1.2113263922466326,1.4993887570975342,-.42592408743381316,-.8237413397844804,-.38077834891929335,-.1292444099374525,.3561365180039534,.28861628176844567,-.11411070867346547,-.06410706438489967,.163186940066035,-.6328052716649591,.13950893398738348,3.0206322635570557,-.6188777654041017,2.1073345817545266,15.134863386021769,-9.068588917821655,2.5516179078607184,.15987777595415892,.7516589877591673,2.0096273906801727,.3129025268374742,-.7407789749779229,-.6982215061431771,.3952656000456455,.06964266735015913,-.1777894463227658,-.3745780687612245,-.5561013465692228,.40792084439497267,1.044054763389139,-.23916839371037832,.2750333919575636,.6213564644140045,-.21110858701983135,-.8161598531354401,.14589390394899499,.3240674257394903,.7495219254728818,-.3251166996739207,-.4882545319244257,.3664815670175123,1.0443697855595189,-.22841081726546683,-1.4950174056034862,6.464484302874131,2.9904131431626397,-13.820343051841599,1.9854594697574315,-13.304182061875386,-6.335209515957204,.3195679261341049,.22665765093840967,.19533791786523994,.2177844961762284,.692881801996408,.08440003983266403,-.31425797573231284,-.3147915514342516,.07893918397306962,-.5829480178646479,.46161406526582016,.41846754429722727,.7980185869448644,.4385884976219195,.23788459440435036,-1.2725586605629382,-.7572023138336219,-.29841298969258917,.14587335963051393,-.16753374785242225,-.21612918483653495,.5359722121834085,.6949568334964742,-1.0539667118389073,.8761722254011011,4.362973215395883,-8.09521234646192,-7.414834109374171,7.531138613863165,-44.04178808431685,22.050605310259897,5.151003256170214,-5.660191686379251,8.436742777573649,1.5703737430868991,-.8389528199741386,.19212817740850727,.39792121836056477,-.14922819541222082,-.04777071240950075,-.2908510034609289,-.01506121201413311,.3264657443238593,.7739535250454511,-.16614591312540627,.36806371804963284,-.09763429547907729,.09133033174751491,-.2445007533972123,-.02909571825923493,.16613612027343472,.2824097442697295,-.1804431666726947,-.480747660556516,-.36626836712779753,3.450756085581019,-1.9317197634824488,-11.789513877445398,17.692027714058376,32.19055083965611,-28.446155418037584,65.63437440423782,-24.8788001555197,-2.0570987009734387,-3.2997425925449106,-11.516126179313863,12.372184270457085,4.9611285532463585,.8639170202551659,.16530865667454706,-.46079094226119116,-.1732663636027687,-.25470104821282824,-.4303139947158862,-.04150147985929765,-.5438621702414322,.8168356827516703,.09708915289878373,-.1374402488992993,-.09561935970760387,.09862618444928568,-.6303699903322589,-.18311714867083492,-.07372642556981146,-.19104942819406445,.0758622667350162,3.0325028906240856,-9.032698483000724,-11.815798616251362,36.620593610799446,10.636065931319884,-38.68839724466217,45.71617418640933,-314.74785574475044,197.27075321520152,337.61540934331566,21.930976284520245,-28.83796358703773,-13.475211488788421,9.591771247309294,1.5250850436867665,-1.554501701628276,-.6466720997697484,.4451335771232284,.056507066939540815,-.23461588343644407,-.2601121970475936,.8042712968338912,.307790074940778,.7748329018274447,-.6513333254686114,-.18908937081392915,-.5044647601430582,-.007429416907151449,-.43833208591156614,.3383874374890965,1.0227323524080993,-.18896973496668346,-8.920663061128298,-3.6862817789376785,19.35920062861366,-44.57979554656358,57.025448777424586,360.31891091191056,8.800126189101382,1526.2181503116453,45.05380791776222,-140.68826246910882,254.89688572081207,-61.9678169612004,-4.508347618296833,11.964107143689583,3.779035907773343,-1.904534560504963,-1.7624207728132955,-.01261576384946491,.19558932994062728,-.3021913121485407,.4699644624025669,-.9123038313637213,.36883118795348824,-.13682839189736087,.6671389396205878,-.2598905547065944,-.4496831429006705,-1.2882353738829488,-.7675504033211031,.21593130161202181,1.7124190510555817,.6346191100738432,-2.3593378023079388,-10.295701682078779,-39.60384931511013,54.052681314235315,182.3786468306393,-282.1888069780413,735.5077404616143,-423.7691979018009,46.72930747865378,744.0954066709207,65.42102326237357,-26.998515460375824,-110.68919188818332,1.7026644231740455,8.68470682984619,-3.681262764653712,-1.4462870038602713,.6640301497435265,.9826864094292609,-.10353485266764806,-1.1704253870693322,.47609558693405896,-.638099377875768,1.9145243520823476,.11088180406502474,.08286462770329978,-.362544553178147,-.7468929761078681,-.6955167330950445,-.24508893173895085,4.773352510756971,-.03437698373658793,-18.7912488614519,.26732768536914786,52.08491464110734,-48.78269001565601,-267.7782795448579,730.1555176872121,777.4907220078719,9988.272530974127,2608.451923903957,-953.385318858432,570.3493516446571,-262.60583525697274,-86.61832325668658,-42.569555354666946,2.6532766677526505,7.1796038797667014,-2.786883963656256,-.37842412015855753,2.0950938638350354,.042260514128576405,-.5685045714908681,-.9099046875190062,.4779279337996068,-1.7872556824974217,2.239357916267509,1.748611490859272,1.4553261209412682,-.726639874038271,-2.664625757264088,.5081747549074523,1.8456273678139588,-1.3367261976572486,1.0587560944122603,22.259718007212488,-10.499004391497355,-376.5068970632838,153.72085790515695,213.8676097071096,5000.875744438484,12998.804313286144,3077.5993672243935,-814.3853839170239,-589.8418819857724,52.443377241039045,-203.5884482467181,-68.76437592093224,24.89372626886499,6.75172101504206,-.13350548988021724,-.12421201224142447,-.33273215463053935,-.7476745441031024,-2.632594416095354,.19923279402974362,-1.8330278968089646,1.4063404110660558,.33462283171345686,1.8114765667849764,-.03036195775005389,-.8163858633748258,.8286902887112786,-.22176027695649836,1.260192177948489,-13.167070698799225,-23.74231030494054,82.49990339348442,67.21350217512965,-232.0789193763447,-387.93265499317204,1281.4742181751474,7140.874330507548,19170.83401144094,6565.201391560317,-266.59769699529113,524.5581059366303,-105.08267177765569,68.93994766048132,-65.5137173230453,-7.73662240740366,11.686157623491809,-6.071567479292581,-4.705160710517021,2.1433748844125784,-2.5722659267438033,-2.5332827335358727,-1.5955119590990279,.9340221618771696,-2.1983982122300714,-1.3910769799127845,2.875563242016451,.39274625271232855,-1.9143589532041787,-1.9356332468609148,4.628561865608953,1.3770831994437265,-19.219741943874194,21.574731283989856,129.0323271304429,65.73387671644744,79.98538931762987,2188.2624437143977,1562.286524069611,3837.2504381898625]}},face_filter={real:[2.591935953853891,1.348008577031251,-.20482945082417442,2.2477358192448036,.9354084388748214,.7431437038374807,.44299233336869565,.5364686452543544,-.033677232548862526,-.1522853308878499,-.003111345323840015,.052610669730581504,-.009042177602927646,.14571584983663624,.4405710365418128,-.48335213540388067,-1.3567864542305328,-.4833521354038822,.44057103654181745,.14571584983663588,-.009042177602927639,.05261066973058391,-.0031113453238437146,-.1522853308878454,-.033677232548862526,.536468645254354,.4429923333686956,.7431437038374823,.9354084388748215,2.2477358192448023,-.20482945082417423,1.3480085770312495,2.015210638832999,.8561113487865346,-1.3363494489312076,-.5214856856793162,1.2207493971968164,.8888018554921059,-.1285135757355211,-.1350280522901679,.04130090496769948,.44502243372725686,.029355734210915238,-.514439763199465,.08745222381708008,1.214870800319445,1.118908072709358,-.27220544444671846,-.36088426941083585,-.09348594752755632,-.9769818787641994,-.683491006253959,.024322257871818426,.6051281166939971,.15343788102432432,-.4299366545774243,-.15452787333937706,.9156200895039931,1.19600272916941,.7236482520664509,.5420001169208633,2.340026643850203,-.0336083749457483,.5889816141314532,2.026988327725381,2.818789893714468,-3.5895244227646144,-3.531433237259689,2.0122812700890154,.9309318199522797,-.9630540034089701,-.7361266762847282,-.053915776695886194,.4273024289884242,.029936824487282035,-.3516829302919025,.2510842049188495,.8544524900293714,.16931894270710782,.009238574633350012,.686725698694183,.41915906104063394,-1.098448870305092,-.6369785190090863,.11186355371520935,.47269360156783113,.15279475225563477,-.02610644023700699,-.03226275117308416,.1454266230078033,.7198133190370014,1.4137393979172745,.608577113128749,-3.0736342072317173,-2.5537641666010327,.6337650914909162,1.2343577579270657,.25345561236901865,-2.0331393954447585,1.159193858429254,3.017044771870936,.49021233060315667,-.684375328954414,-.329275838633818,-.09284792777273311,-.1474089549804324,-.19413825853994604,.3691960823964432,.3054625765508249,-.552564495000317,-1.2130125640575424,.0669618839178975,-.13876096422777703,.3790222467836734,.22718444978554084,.19963817528635963,.027529920247751867,-.24231535965414738,-.016338923407765684,.45136614923078927,.2897566078397231,-.730940554917991,-1.5465072446477164,-.07076989233207973,3.1701479989789885,.024916786279245037,-2.871773070372937,-1.1681626968077414,-.9460041010371844,-.8587251724417785,2.9516513032863374,2.8131952593882126,-1.5261742763882251,-1.0558844683361728,1.1680212024537544,.9845068510873982,.06406726571926906,-.43727283330478184,-.044395094277671916,.6179734700494115,.24878996343187737,-.6389127834052382,-.7586499302584196,-.3230461946645466,-.7338756447157126,-.043145833390571785,.9239181288868988,.899460985370458,.14871674926559622,-.5482282895418322,-.2672861314212731,.309011363128886,.2141868997801377,-.5210515711382034,-1.0686411834884146,-1.3047927124000203,1.0355627592914096,2.967274684384917,1.947121812881294,.3603087555803319,.22471825920653532,1.3679256644146878,2.378479538742755,.7377644017725042,-2.220295200370375,-.986671530921888,.6094442758995167,.29273424438530327,-.05406455321306649,-.1955430963609566,.13452976853580562,.17688857701463095,-.02907863269662225,-.037177619339377604,.22892611971691484,-.22870850340942314,-.41029268509332983,.06121534900576046,.37818604838169356,.34148146887082653,.09993824558644403,-.09925433838142396,-.11254516916626593,-.2039622085642743,-.20060216516957027,.30792957356810446,1.1721236672075155,.5613641754106787,-2.324960087766699,-2.4287881268668112,2.0674326900187423,2.8441511789848586,.050947133476877834,.30280142076825006,.2344198558506899,-.6942021193743784,.5001721083381983,.9824320425486297,-.30253127598451673,-.3521780252206647,-.25522460504160704,.1267215637102088,.11584743671788442,-.2780694670329302,-.2822047158728992,.2622813962834421,.4614518667727294,.08891377992394393,.3155266824029234,.08370176736304921,-.20838882493274438,-.4502862328664914,-.21994207603667223,.24344265380915428,.14566519323380012,-.26341476824800764,-.2501486044122161,.23269603050324755,.6550747273367771,.5891693947304917,-1.2014518968451928,-1.470695947253781,.7327016024754474,1.4639339636380404,.4618049191807075,.4627405202124886,-1.2522772114725254,-1.0527125117724863,1.1798416267497167,.8831199054956721,.0044403719443055645,-.32008851183583215,-.08803912681404771,.1343567710878925,-.043849665988197006,-.3005538990034163,-.17300527880436442,.2226801182957643,.14506301721613848,.13541851865273877,.312529191840112,.13643782704324722,-.2095508102885523,-.37861030355575276,-.2528547956358855,.07656668484101714,.11737705239518459,.013018358464219467,-.04151687435317732,.02539685951545335,-.19237103418038187,-.20754469441764836,.8354358458184308,.96010698083026,-1.052325769700115,-1.33376499327856,.31064795509136994,.20053594173979683,-.09959261069001354,.046946926411794127,-.2693342598358002,-.25886956646489134,.16667582025681255,.16264384177267197,.10611595375861864,-.009840446283874638,-.13572606372513804,-.02258793083641232,.1626410940258704,.008404233415462523,-.3166768587738564,.013183667319477316,.009511483946181471,.06473581323996976,.10654247281867815,.2133121635505107,.10213744987583113,-.12973084349572184,-.0980854077359512,.07159999111733754,.09601288712563749,-.07062229032498574,-.21061961456993025,.12811225495378645,.611164351713058,.2793101223093252,-.5707680731068852,-.5021838884925864,-.4292211936011942,-.4486524346795565,.488654222807675,.5325596193896186,-.37999327914266867,-.37733114800401457,.013506411710477314,.170066818452864,.060998910324659567,-.1365679354763767,-.09068659393937568,.3743991900961478,.47466547775213164,-.4058122944660423,-.4933460399621819,-.3807436086745039,-.49035943457716413,-.12412531843683997,.3044094397307464,.5945657163530786,.3987714048284257,-.17295292843566973,-.26272159996092964,-.046183226771098686,.047879446168886036,-.01767919625538646,.11122639164092249,.28368537020126805,-.25549013964140954,-.47047462219224784,.42895932921703384,.49142711950580215,-.37646529147307217,-.2985208724149509,-.1416351202280051,.03624824270039387,.16977635036237812,.13499908156480836,-.01898512351822966,-.06931980142573659,-.04806515147602384,-.09144565423759694,.06348078027146783,.36025783734460454,.07952841509470242,-.1753773206782209,.12374069460012149,-.28367021291499456,-.3947284775676721,-.2665809890749859,.18834221718468977,.2781965194293328,.17697914055115227,-.04471849441598082,-.1052242965370093,-.05691899057683679,-.03857490424724246,.004472003676478891,.07502915725700189,-.012042674487198736,-.25791041993690383,.009446144474925764,.4514964084333483,.15522942660639183,.16359187166611067,.27184060163390095,-.26140872283435745,-.36468827084356714,.09256469643453995,.17076044356298117,-.08195216613405097,-.09481240289501351,.05687217117351184,.14314060902527834,.09005737829603709,-.4975231063672491,-.9039950447662686,.6838532144823399,1.5206479363861476,.9719450012405945,.3722337652684309,.0508854181775678,-.35886815857743665,-.8543036182405586,-.5431451742148268,.3550562539706387,.4163516012301683,.1097676276443619,.0031094617237012487,.012467253683817481,-.13435478466038733,-.3025207327612856,.06422768024628195,.26667168729095614,-.26695175931487575,-.3907043501678708,.46272484969502237,.4478152924484996,-.02777275619946918,-.36406380803433314,-.36482553236919035,-.17145017383338396,-.002276856052904647,.19648856692552516,.19795501524240586,.11579620326491886,-.20236218758832794,-1.3218815146594056,-.8951012670691179,.9168572007614602,1.0573193754484274,1.0300227650328617,1.2681463254528202,.541997943301319,-.8182545342334215,-1.115889579299406,-.4889202414797142,.3701102983727497,.5255744145017802,.12007696462970571,.005387185536187444,.0980933520274576,.04581367667589274,-.13973686519943007,-.1315893019053164,-.41025099029328865,-.7830737855834251,-.4305805131944959,-.14586342722110873,-.20332028656079115,-.5099111638385512,-.22496834802938576,-.23147407593468516,-.0020062182884880236,.35659057442027225,.21055136817067865,-.09070865795318951,-.09323655583197665,-.39644071531856356,-.157600464897638,.8521709297040498,-.006060772398080865,-1.1445855838899712,-.40779542231222293,.5719233746736145,.38110042075214373,.18372151232217485,.4553455144848944,.44338161640444884,-.33392303093222925,-.300332511734043,-.018826279470074956,-.0031918185582147274,.016996498806762936,.19478439409652604,.1483942673498718,-.16993496725014728,-.25233000300477815,-.17163872305028913,-.1689625921408603,-.3504835591240217,-.566661171565308,-.043075182629207294,.46189562289598257,.12201955959263491,.048431387757678836,.1008273185138992,-.19670456422152316,-.1664202664475642,-.15046897531292064,.1609200706656915,1.4039223524989202,1.717887524118693,-.07985019381975775,-1.5066376684783904,-1.9250211671886128,-1.0545407692185655,-.5117674935366009,1.7285428258292277,1.5863083779089326,.24208315366337785,-.8883786039184965,-.8044978292356761,-.06304921898835014,.18072374426616816,.041279056588780935,-.12639978427416398,-.05841363818060028,.18149778190196758,.37146508613201623,.6000519754710418,.38887239681739694,.1152103935846736,-.0800815407939111,.7973754858062889,.6016467310372599,.13967291436025694,-.17870113794821088,-.40389823435739103,-.33510874790612805,-.06268274906423316,.04212518172009522,.2275017878236976,1.088358328162009,.679765186013865,-.6792087414350455,-.677698317996765,.007129765269377491,-.21574274789108602,.7334613749374814,.6988401131682075,.12589091429626179,-.6834849210005094,-.4128541028855074,-.18770950063360772,-.15148842977747803,.047869931187020834,.21018250411743153,.06876363937389554,.009840196421356001,-.019137710950301583,-.440142797947338,-.21656678437317,.36831896296176964,.3196548900379982,.24180664285441536,-.20287221126440233,-.5618143827987885,-.15470815549218525,.11910006502983214,-.0029256323011974715,-.04650506403640628,-.11603914651892111,-.1530756736046411,.4224212238432043,.15967260300989697,-.8389569177082798,-1.4824802915019837,-.3796952323863866,.8958313207579505,1.77383273304373,.8958313207579488,-.37969523238638764,-1.4824802915019843,-.8389569177082784,.15967260300989483,.42242122384320435,-.15307567360464003,-.11603914651892111,-.04650506403640602,-.002925632301197385,.11910006502983216,-.15470815549218528,-.5618143827987871,-.20287221126440275,.2418066428544156,.11521039358467118,.36831896296176875,-.2165667843731702,-.44014279794733774,-.019137710950301947,.009840196421355883,.0687636393738958,.2101825041174313,.04786993118702068,-.15148842977747892,-.18770950063360678,-.4128541028855055,-.6834849210005076,.12589091429626098,.6988401131682093,.7334613749374853,-.21574274789108297,.00712976526938085,-.6776983179967644,-.6792087414350481,.6797651860138616,1.0883583281620088,.22750178782369845,.04212518172009507,-.06268274906423292,-.33510874790612777,-.4038982343573906,-.1787011379482107,.13967291436025678,.6016467310372583,.7973754858062901,-.0800815407939108,-.35048355912402274,.38887239681739855,.6000519754710422,.3714650861320155,.18149778190196694,-.058413638180600004,-.12639978427416418,.041279056588780526,.1807237442661683,-.06304921898834956,-.8044978292356768,-.8883786039184968,.24208315366337824,1.5863083779089293,1.7285428258292255,-.5117674935365991,-1.0545407692185644,-1.9250211671886148,-1.506637668478394,-.07985019381976269,1.7178875241186904,1.403922352498921,.160920070665691,-.15046897531292144,-.1664202664475644,-.19670456422152255,.10082731851389957,.048431387757679,.122019559592635,.4618956228959828,-.04307518262920681,-.566661171565308,-.1458634272211089,-.16896259214085926,-.17163872305028846,-.25233000300477826,-.1699349672501478,.14839426734987166,.19478439409652576,.016996498806763023,-.003191818558214667,-.01882627947007429,-.3003325117340433,-.3339230309322298,.4433816164044498,.4553455144848962,.18372151232217931,.3811004207521446,.5719233746736119,-.40779542231222243,-1.1445855838899728,-.006060772398081642,.8521709297040503,-.15760046489763638,-.39644071531856373,-.09323655583197697,-.0907086579531898,.21055136817067863,.3565905744202728,-.0020062182884879754,-.23147407593468516,-.22496834802938495,-.5099111638385512,-.20332028656079207,.46272484969502153,-.43058051319449625,-.7830737855834261,-.4102509902932877,-.1315893019053165,-.13973686519943013,.04581367667589293,.098093352027458,.005387185536187404,.12007696462970524,.5255744145017812,.37011029837274845,-.48892024147971336,-1.1158895792994052,-.8182545342334215,.5419979433013187,1.268146325452819,1.0300227650328604,1.0573193754484311,.9168572007614638,-.8951012670691166,-1.3218815146594056,-.20236218758832747,.11579620326491913,.19795501524240555,.19648856692552533,-.002276856052904625,-.17145017383338415,-.36482553236918996,-.36406380803433286,-.02777275619946951,.4478152924484997,.1635918716661118,-.39070435016787175,-.26695175931487636,.26667168729095614,.06422768024628231,-.3025207327612863,-.13435478466038722,.012467253683817804,.0031094617237012916,.10976762764436168,.41635160123016834,.35505625397063934,-.5431451742148266,-.8543036182405604,-.3588681585774384,.05088541817756769,.3722337652684316,.9719450012405919,1.5206479363861465,.6838532144823418,-.9039950447662684,-.49752310636725033,.09005737829603698,.14314060902527884,.056872171173512,-.09481240289501319,-.08195216613405086,.1707604435629816,.09256469643454024,-.36468827084356803,-.26140872283435806,.2718406016339017,-.37646529147307173,.15522942660639114,.45149640843334826,.009446144474926697,-.25791041993690383,-.012042674487198701,.07502915725700196,.004472003676479042,-.038574904247242366,-.056918990576836755,-.10522429653700935,-.04471849441598096,.1769791405511515,.2781965194293311,.18834221718468852,-.2665809890749849,-.3947284775676717,-.28367021291499434,.12374069460012085,-.17537732067822176,.07952841509470168,.3602578373446047,.06348078027146788,-.09144565423759717,-.04806515147602373,-.06931980142573653,-.018985123518229702,.13499908156480855,.16977635036237826,.036248242700393465,-.14163512022800506,-.29852087241494996,-.4292211936011949,.4914271195058019,.428959329217034,-.4704746221922491,-.2554901396414107,.28368537020126877,.111226391640923,-.017679196255386387,.04787944616888607,-.046183226771098616,-.2627215999609295,-.17295292843566987,.39877140482842616,.5945657163530781,.30440943973074525,-.12412531843683972,-.49035943457716313,-.3807436086745018,-.4933460399621818,-.40581229446604117,.47466547775213147,.37439919009614836,-.09068659393937563,-.13656793547637694,.06099891032465957,.17006681845286384,.013506411710477128,-.37733114800401446,-.37999327914266845,.532559619389618,.4886542228076744,-.44865243467955757,.31064795509136994,-.5021838884925864,-.5707680731068852,.2793101223093242,.6111643517130577,.12811225495378684,-.2106196145699303,-.07062229032498564,.09601288712563749,.0715999911173376,-.09808540773595104,-.12973084349572186,.10213744987583084,.21331216355051105,.10654247281867847,.06473581323996898,.009511483946181471,.013183667319477904,-.3166768587738553,.008404233415462621,.1626410940258709,-.02258793083641217,-.13572606372513854,-.009840446283874853,.10611595375861864,.162643841772672,.16667582025681238,-.2588695664648914,-.26933425983580034,.0469469264117942,-.09959261069001364,.20053594173979666,.4618049191807078,-1.3337649932785616,-1.052325769700115,.9601069808302595,.835435845818432,-.20754469441764875,-.1923710341803828,.025396859515452976,-.04151687435317712,.013018358464219362,.11737705239518428,.076566684841017,-.2528547956358843,-.37861030355575326,-.2095508102885513,.13643782704324786,.31252919184011235,.1354185186527376,.14506301721613746,.2226801182957635,-.17300527880436414,-.30055389900341645,-.04384966598819714,.1343567710878917,-.08803912681404781,-.32008851183583126,.0044403719443063165,.8831199054956711,1.179841626749716,-1.0527125117724856,-1.2522772114725254,.46274052021248885,.05094713347687782,1.4639339636380404,.732701602475446,-1.4706959472537806,-1.2014518968451935,.5891693947304912,.655074727336777,.23269603050324741,-.25014860441221576,-.26341476824800797,.14566519323380028,.24344265380915459,-.2199420760366726,-.45028623286649283,-.2083888249327452,.08370176736305028,.3155266824029228,.08891377992394488,.46145186677272854,.2622813962834421,-.28220471587289875,-.2780694670329298,.11584743671788453,.12672156371020837,-.255224605041607,-.35217802522066505,-.302531275984517,.9824320425486291,.5001721083381978,-.694202119374378,.2344198558506889,.3028014207682505,.2247182592065364,2.8441511789848586,2.067432690018742,-2.428788126866812,-2.324960087766698,.561364175410678,1.172123667207516,.30792957356810535,-.20060216516957047,-.2039622085642748,-.11254516916626582,-.09925433838142367,.0999382455864435,.34148146887082625,.37818604838169406,.06121534900576046,-.4102926850933292,-.22870850340942214,.22892611971691548,-.037177619339376564,-.029078632696622427,.17688857701463057,.13452976853580567,-.19554309636095565,-.05406455321306663,.2927342443853019,.609444275899516,-.9866715309218846,-2.2202952003703764,.737764401772501,2.3784795387427535,1.367925664414688,-.9460041010371839,.3603087555803301,1.9471218128812944,2.9672746843849187,1.0355627592914098,-1.3047927124000192,-1.068641183488414,-.5210515711382051,.21418689978013775,.30901136312888583,-.2672861314212727,-.5482282895418323,.1487167492655953,.8994609853704585,.9239181288868997,-.043145833390572444,-.7338756447157117,-.32304619466454804,-.7586499302584186,-.6389127834052369,.24878996343187765,.6179734700494102,-.0443950942776714,-.4372728333047815,.06406726571926905,.9845068510873982,1.1680212024537535,-1.0558844683361719,-1.5261742763882244,2.813195259388213,2.9516513032863356,-.8587251724417782,1.2343577579270646,-1.168162696807738,-2.8717730703729356,.024916786279243767,3.1701479989789867,-.0707698923320799,-1.5465072446477184,-.7309405549179918,.2897566078397231,.45136614923079016,-.016338923407765823,-.24231535965414835,.02752992024775208,.19963817528636058,.22718444978554045,.37902224678366964,-.13876096422777742,.06696188391789835,-1.213012564057544,-.5525644950003183,.30546257655082465,.3691960823964435,-.1941382585399454,-.14740895498043313,-.09284792777273304,-.32927583863381676,-.6843753289544129,.4902123306031531,3.0170447718709372,1.1591938584292596,-2.033139395444753,.2534556123690153,2.026988327725381,.6337650914909212,-2.553764166601033,-3.0736342072317178,.6085771131287496,1.4137393979172737,.7198133190370002,.1454266230078038,-.03226275117308411,-.026106440237006333,.15279475225563396,.4726936015678312,.11186355371520969,-.6369785190090855,-1.0984488703050919,.41915906104063416,.6867256986941827,.009238574633352287,.16931894270710687,.854452490029369,.25108420491885,-.35168293029190173,.029936824487282226,.42730242898842274,-.0539157766958862,-.7361266762847285,-.9630540034089693,.9309318199522789,2.0122812700890154,-3.5314332372596846,-3.5895244227646144,2.8187898937144658,2.015210638832999,.5889816141314536,-.03360837494574907,2.3400266438502024,.5420001169208618,.7236482520664508,1.1960027291694086,.9156200895039953,-.15452787333937676,-.42993665457742386,.1534378810243246,.6051281166939976,.024322257871818742,-.6834910062539612,-.9769818787642004,-.09348594752755465,-.36088426941083557,-.27220544444672085,1.1189080727093528,1.2148708003194422,.08745222381708102,-.5144397631994656,.029355734210916126,.4450224337272568,.0413009049676994,-.13502805229016995,-.12851357573552075,.8888018554921056,1.2207493971968146,-.5214856856793176,-1.3363494489312078,.8561113487865303],bottom:{real:[10965.975170394304,21271.915267962257,3528.270305161191,4104.475680586438,1601.061604218882,1022.7399974894073,557.8011375076204,282.8223052278124,145.15707521660474,105.9441201571383,59.01270726666721,44.66962843244353,36.50168205465414,28.529134449096524,21.777099980382825,18.33532892478512,16.253545459923078,18.33532892478509,21.777099980382847,28.529134449096492,36.50168205465414,44.66962843244357,59.01270726666728,105.94412015713864,145.15707521660474,282.82230522781276,557.8011375076204,1022.7399974894074,1601.0616042188824,4104.475680586443,3528.270305161191,21271.91526796226,12599.263825927621,3215.125406898348,5397.542249875984,1626.8549963375583,805.20630634633,515.1445920064424,359.3048107396736,212.4360242127799,110.43978615629422,81.30134061470001,50.82057050163526,41.19265124993172,32.936640633650484,26.68113372408087,18.01921088871573,14.766368476202661,15.422836018027418,15.990808141800954,20.022228188848842,26.27649582961226,35.717232769261116,41.8476776201261,54.32038790827515,97.51889627249736,133.8729941689642,238.43595357759855,456.937693043428,711.6655040473073,1144.8252089743219,1902.8385884755523,5206.768847980471,3622.968497491081,13155.61342681755,3416.743642914499,2812.4738667722154,1400.147559944327,383.1327908328127,252.15177845425933,197.2081578118225,171.5996021022252,82.27535767773409,60.48297276194193,40.77747888409448,35.028553697203044,28.877176436297923,21.966647147933095,16.37186621979068,15.053935075225828,14.23277610579999,14.86631528459676,18.218896084560566,25.18211951926569,33.82172230790013,38.32041357894052,45.570220260185515,72.05947971074444,97.66011960899296,168.65094690401955,268.62846926573025,329.42984018623156,467.75549674428515,1002.4311488284067,3554.141832934508,1764.397059903687,4621.958329476014,1569.7087860062477,1388.3341571422952,628.3710133483888,414.07061143445827,168.53157442290524,137.2795663029475,102.11362429348972,55.491719795512424,49.07312675198977,36.06338914589339,30.634459542886617,24.21678240907495,18.667040937787934,14.56741780053745,12.905268434713205,12.868626938575844,13.09593232648609,16.679039087380332,21.80969609662603,29.753917874884348,36.82782495592035,38.93474335143194,57.66833983826888,69.64196105008443,131.28843074347486,180.68252449032624,169.4404494972173,350.7497362638206,497.0283471987083,1746.1261590593115,796.9978384313032,3103.247947012358,1415.2337173839596,752.8181434617662,549.3430172736586,201.53841636766998,154.61036627522753,104.58138455482165,77.61878122511897,49.39208796429236,44.90232542624743,31.105878831006294,25.236762604525154,19.175053589853054,16.38453446468991,12.823063914611339,12.04793661480726,11.554737628486025,12.534926448772453,14.323695266188452,17.7802478368872,24.19149294587787,28.8430939532521,32.76770304982415,43.78366744373352,51.550546699271386,70.69918414080949,109.08321361427502,136.28687846912635,199.77708080210388,376.3268036983547,796.8346738354645,571.9147135830053,984.4104977034889,694.1875208097182,999.699295327579,367.7407391739818,338.97998181689366,133.72435362068052,109.5985079627268,89.93894507002496,49.03950825563833,36.109063293014415,25.98394571698211,23.01577460187165,16.882299112940213,14.591336257090045,11.32667094148311,9.91803607895827,9.675396596561606,10.57555888797221,12.046190961831451,14.768605661776913,18.648763248771505,21.576487249184964,27.01336113453004,36.90808241150531,45.645009020283105,60.83763087499848,99.37203234809671,111.28266970072299,252.63182137130968,273.926302788315,775.2357561437575,815.8507483722518,1655.1106419436521,1107.4422783913506,474.0637368651835,355.64805874163005,199.11678861892517,123.46347336694488,65.89640987180859,68.9184031909375,38.94319091920272,28.774499596319636,21.28650512309976,17.663953414249985,14.114074884510726,11.879784189493673,10.039166730615968,8.352171962934644,8.481459647539134,9.044947675010041,9.851297965928488,12.153630271582001,15.23168574488512,19.43724787739196,22.710514050850847,28.755794586161894,38.618352638886485,59.94224159872691,92.99787235795233,88.11178367375271,166.94308947555163,243.7977381142022,532.1046830802669,428.26170612042944,835.1438949224898,575.8460581748905,602.7894552112467,339.5769375590513,168.11833297683242,117.99279203678798,52.58663979325557,42.04789512862838,28.318592567301817,25.001453363505657,19.91641866758216,16.823078359396845,11.65888462925604,10.364401595593858,8.857362797886989,7.417387126462952,7.268151549939036,7.591532342124986,8.68073406208321,10.378269159275604,12.701378035616356,16.292785679101375,18.804030398726262,23.560923080173954,30.503495373532754,45.810504396910375,65.22952205439695,65.63948243081862,177.29565831054776,166.70872880265193,491.9902921130938,512.6723598171106,747.4531380999794,645.9614121973725,307.54977114778814,298.3600026574555,105.95282903225828,85.56711318209764,44.67237632428323,40.22658343389921,25.615021546435344,22.144491394300847,16.131654569456256,13.397071796412417,10.408828566613494,8.959195731352803,8.060438045250994,7.044206041178096,6.2883229388812,6.849683198285668,7.336687105800447,8.471773073333933,9.981477711221785,13.121694879148574,16.902165529440683,20.643784740763845,24.153222030769193,29.725858725465727,41.89642103755399,52.63093434695396,103.5859123323665,116.76781276597193,376.64744495733714,306.9319583240522,356.4623881053826,374.9036662854522,271.63698834940317,203.1516297981749,85.2960773992297,77.6496894667393,35.9182728161496,33.069491090524735,22.605820220395913,17.296816509483932,13.342699317421832,11.640978884779956,9.358697524191154,8.262307462508558,6.606585163220882,6.282786363296524,6.074423827911893,6.35823420109471,6.825296696781553,7.85560920629414,9.320922420319578,10.848369664421165,14.056179340078513,17.79254078513364,21.540972163896267,26.80393810368368,40.50313838179877,43.285550133972045,91.69188933524559,100.98276829758987,225.59390630676836,290.0678303886524,373.60823131669014,414.2242296987675,141.37671573357548,158.9032156570893,63.8376618794191,61.993039771960156,32.58856204913453,28.668162298507095,18.42640414438573,14.73582197546479,11.992469004096597,11.399293029930492,8.716399906802325,7.228966710134401,6.590688139850574,5.747269590602461,5.647299069353268,5.877757076959593,6.402409857819254,7.440565058022519,8.459976987008757,10.256048021590846,12.060831155359036,13.78515192510575,18.659998164390426,22.92174482648044,31.905227459883474,34.302795951832735,59.88041168976375,69.97104518096435,160.24793865518117,163.529792038828,147.83029120770976,178.6357867835558,118.15132417284869,114.19776495947795,53.37529604883215,57.17788409367902,32.93952944330524,24.968491799996325,17.430516204833694,13.433899198972929,11.836714579435053,10.548598460428181,8.048654617107779,7.118788189137296,6.459466055721909,5.815995287839976,5.476779403837907,5.390870150457815,5.897620999662963,7.130183113234809,7.567583442818569,8.751706141695365,11.338462673842365,13.133124938105077,16.059093761394507,18.84909782595904,29.651622179353478,34.09934210997649,58.70039936028965,65.26168153184753,99.21490924079085,146.35353694510258,121.37679122991287,165.7662438285251,77.65397407030467,91.33845333135417,44.07807549608674,44.566220734037245,27.02661422235957,22.147051076612073,15.399396116974053,12.432895564123392,10.640074418564296,9.327629874970073,7.579120650020736,6.782878982283792,6.181608759378763,5.669281171081803,5.1651813219751155,5.331749264880161,5.598146109324349,6.405714664558293,7.250524365147535,8.420991301858747,10.969854167863348,12.153630713859068,14.766764339656312,18.099354774134348,25.326013884328763,29.78594982984153,46.42483139190817,52.6158598873048,82.5732699993794,99.67630407007451,86.64007882892724,116.36860702141186,64.2413414100685,71.7426930539707,38.10988368760168,36.92682714597829,25.897290737678322,19.27508038337473,14.749844663752917,11.485010388879966,9.457664753967833,8.892716223761346,7.439577865966992,6.044433548094154,5.718208469162825,5.055793512094397,5.076045779069242,5.2089717500439345,5.773522000047463,5.940673265368043,6.74592757770696,7.820577383583708,9.983530512325348,11.402400865496325,14.118008059701465,15.687873342054864,23.860535436216686,29.003043185839516,40.145342185017675,49.33744888297236,59.017178205425914,84.30064306313226,70.16096453300412,106.14414492511058,57.34336460557286,60.09265217204113,35.03516422689137,31.196728233049463,22.848135981998073,17.280291997569737,14.215425049471765,11.487894696175578,9.201961745991776,8.157670273889595,7.473154498786378,6.023004288063756,5.630001966377492,5.244985217585088,4.894418784331649,5.179488529048513,5.4428139254674495,5.986696633549787,6.498853466702137,7.016105928877679,9.166209160233421,10.540688253938185,13.221652899667433,17.448751090247555,21.405199921620568,24.44364423367417,34.565403798719835,43.06493229041134,53.89676402349043,75.33061524900204,57.13904885051626,75.07127881612149,44.304162032217924,48.09109453256169,33.4913106785217,27.211025020176507,22.45352109297041,17.428281520682297,14.160857290751922,10.592079486422294,9.200167302833043,7.56611662430878,6.533568984734624,5.807359327564373,5.788062101896725,5.353907494597589,5.397813266857056,5.244731675823039,5.4735425621066245,5.861789820088422,6.537580606133601,7.563460066907533,8.841638044639843,10.50698673124036,13.949036764622399,16.252252028090993,22.019876112374043,25.162704768394917,31.578176229468394,41.77149318686092,42.95593868799199,69.85865190644714,50.780163528630226,74.07751021630408,43.697387961361706,40.315818737884314,29.770652812772006,26.340522851312056,22.034594395520614,16.748599325796118,12.84551628454659,10.52499564475608,9.245501861755603,7.487136435944887,6.8277975203922185,5.664601698004479,5.288115481792067,5.249838354768366,5.18495120033414,5.249838354768366,5.28811548179206,5.664601698004477,6.827797520392221,7.48713643594489,9.245501861755608,10.52499564475608,12.84551628454659,16.748599325796118,22.034594395520603,26.340522851312063,29.770652812772006,40.31581873788432,43.697387961361706,74.07751021630408,57.13904885051623,69.85865190644714,42.95593868799195,41.77149318686094,31.578176229468383,25.162704768394924,22.019876112374046,16.252252028090997,13.949036764622383,10.506986731240358,8.841638044639838,7.5634600669075285,6.537580606133598,5.861789820088424,5.4735425621066245,5.244731675823037,5.397813266857056,5.353907494597587,5.788062101896723,5.807359327564372,6.533568984734625,7.56611662430878,9.200167302833039,10.592079486422293,14.16085729075192,17.428281520682305,22.4535210929704,27.21102502017652,33.49131067852169,48.091094532561655,44.30416203221794,75.07127881612153,70.16096453300408,75.33061524900202,53.89676402349037,43.06493229041134,34.565403798719814,24.443644233674185,21.405199921620568,17.448751090247544,13.221652899667435,10.540688253938189,9.166209160233418,7.01610592887768,6.498853466702137,5.986696633549787,5.44281392546745,5.17948852904851,4.894418784331645,5.244985217585087,5.630001966377489,6.023004288063751,7.473154498786376,8.157670273889595,9.20196174599178,11.487894696175564,14.215425049471762,17.280291997569748,22.84813598199807,31.19672823304948,35.03516422689138,60.09265217204119,57.343364605572894,106.14414492511065,86.64007882892719,84.30064306313227,59.01717820542586,49.337448882972346,40.14534218501768,29.003043185839513,23.860535436216686,15.687873342054866,14.118008059701463,11.402400865496327,9.983530512325352,7.820577383583712,6.745927577706958,5.940673265368044,5.773522000047464,5.208971750043933,5.0760457790692435,5.0557935120943975,5.718208469162822,6.044433548094156,7.439577865966992,8.892716223761349,9.457664753967826,11.485010388879974,14.749844663752919,19.275080383374736,25.897290737678308,36.92682714597828,38.109883687601666,71.74269305397073,64.24134141006853,116.36860702141172,121.37679122991284,99.67630407007445,82.57326999937942,52.6158598873048,46.424831391908185,29.785949829841556,25.32601388432877,18.099354774134348,14.766764339656312,12.15363071385907,10.96985416786335,8.420991301858754,7.250524365147534,6.405714664558296,5.598146109324348,5.33174926488016,5.165181321975117,5.669281171081803,6.1816087593787605,6.782878982283792,7.579120650020738,9.32762987497008,10.640074418564305,12.432895564123386,15.399396116974053,22.147051076612065,27.026614222359573,44.56622073403726,44.078075496086726,91.3384533313542,77.65397407030473,165.76624382852506,147.83029120770976,146.35353694510263,99.21490924079094,65.26168153184756,58.70039936028967,34.0993421099765,29.651622179353467,18.84909782595905,16.05909376139451,13.133124938105075,11.338462673842358,8.751706141695356,7.5675834428185675,7.13018311323481,5.897620999662965,5.3908701504578165,5.476779403837908,5.8159952878399785,6.459466055721913,7.1187881891372955,8.04865461710778,10.548598460428188,11.836714579435059,13.433899198972929,17.430516204833697,24.968491799996333,32.93952944330524,57.177884093679054,53.37529604883214,114.19776495947798,118.15132417284869,178.63578678355586,373.6082313166902,163.52979203882796,160.24793865518112,69.97104518096437,59.880411689763726,34.30279595183276,31.905227459883484,22.921744826480438,18.659998164390412,13.785151925105746,12.060831155359033,10.256048021590846,8.45997698700876,7.440565058022521,6.402409857819259,5.877757076959593,5.647299069353267,5.747269590602462,6.590688139850567,7.228966710134401,8.71639990680232,11.399293029930499,11.992469004096606,14.735821975464788,18.426404144385724,28.66816229850712,32.58856204913452,61.993039771960206,63.83766187941909,158.90321565708933,141.37671573357554,414.22422969876766,356.46238810538273,290.06783038865245,225.59390630676842,100.98276829758977,91.69188933524562,43.285550133972016,40.50313838179875,26.803938103683674,21.54097216389627,17.79254078513364,14.056179340078506,10.84836966442117,9.320922420319581,7.855609206294141,6.825296696781557,6.358234201094712,6.074423827911892,6.282786363296521,6.606585163220883,8.26230746250856,9.35869752419116,11.640978884779955,13.342699317421838,17.296816509483932,22.60582022039592,33.069491090524764,35.9182728161496,77.6496894667393,85.29607739922973,203.15162979817504,271.6369883494035,374.90366628545223,747.4531380999794,306.93195832405206,376.64744495733714,116.76781276597193,103.58591233236646,52.630934346953964,41.896421037553985,29.725858725465734,24.153222030769193,20.64378474076385,16.9021655294407,13.121694879148574,9.981477711221796,8.471773073333932,7.336687105800451,6.849683198285666,6.2883229388812,7.0442060411780965,8.060438045250994,8.959195731352803,10.40882856661349,13.397071796412414,16.13165456945625,22.144491394300825,25.615021546435344,40.22658343389921,44.672376324283235,85.56711318209764,105.95282903225828,298.36000265745565,307.5497711477882,645.9614121973724,835.1438949224898,512.6723598171105,491.99029211309386,166.70872880265185,177.2956583105478,65.63948243081857,65.22952205439694,45.810504396910396,30.50349537353276,23.56092308017397,18.804030398726255,16.29278567910137,12.701378035616358,10.378269159275604,8.680734062083221,7.591532342124985,7.268151549939035,7.417387126462958,8.85736279788699,10.364401595593863,11.65888462925604,16.82307835939685,19.91641866758215,25.001453363505686,28.31859256730182,42.04789512862841,52.5866397932556,117.99279203678799,168.11833297683248,339.5769375590513,602.7894552112468,575.8460581748901,1655.110641943653,428.26170612042955,532.1046830802673,243.7977381142021,166.94308947555166,88.11178367375268,92.99787235795235,59.94224159872695,38.6183526388865,28.755794586161898,22.71051405085084,19.437247877391968,15.231685744885109,12.153630271582,9.85129796592849,9.044947675010038,8.481459647539134,8.35217196293464,10.03916673061597,11.879784189493675,14.114074884510734,17.663953414249978,21.286505123099776,28.77449959631964,38.94319091920273,68.9184031909375,65.89640987180854,123.46347336694488,199.11678861892523,355.64805874163045,474.06373686518356,1107.4422783913496,984.4104977034884,815.8507483722518,775.2357561437576,273.926302788315,252.63182137130985,111.28266970072293,99.37203234809674,60.83763087499851,45.64500902028311,36.90808241150528,27.013361134530022,21.576487249184932,18.648763248771502,14.768605661776908,12.046190961831442,10.57555888797222,9.675396596561608,9.918036078958266,11.326670941483108,14.591336257090044,16.88229911294021,23.015774601871662,25.983945716982106,36.10906329301441,49.03950825563831,89.93894507002491,109.59850796272681,133.72435362068057,338.9799818168935,367.7407391739821,999.699295327579,694.1875208097182,3103.247947012359,571.9147135830058,796.8346738354647,376.32680369835435,199.7770808021039,136.2868784691263,109.08321361427504,70.69918414080944,51.55054669927138,43.7836674437335,32.76770304982415,28.843093953252076,24.191492945877858,17.780247836887195,14.323695266188444,12.534926448772453,11.554737628486032,12.04793661480726,12.823063914611335,16.384534464689928,19.175053589853043,25.236762604525165,31.105878831006304,44.90232542624745,49.392087964292365,77.61878122511901,104.58138455482161,154.6103662752277,201.53841636767004,549.3430172736587,752.8181434617663,1415.2337173839583,4621.958329476013,796.997838431303,1746.126159059312,497.02834719870856,350.7497362638207,169.44044949721726,180.68252449032624,131.28843074347478,69.64196105008445,57.66833983826884,38.934743351431905,36.827824955920356,29.753917874884323,21.80969609662602,16.679039087380357,13.095932326486084,12.868626938575838,12.905268434713202,14.567417800537427,18.667040937787927,24.216782409074952,30.634459542886628,36.06338914589344,49.07312675198979,55.49171979551245,102.11362429348968,137.27956630294753,168.53157442290532,414.0706114344582,628.3710133483893,1388.3341571422957,1569.7087860062475,13155.613426817548,1764.3970599036886,3554.1418329345083,1002.4311488284069,467.75549674428527,329.4298401862315,268.62846926573025,168.6509469040197,97.660119608993,72.05947971074437,45.5702202601855,38.3204135789405,33.8217223079001,25.182119519265683,18.218896084560566,14.866315284596766,14.232776105799996,15.053935075225828,16.371866219790657,21.96664714793311,28.877176436297923,35.02855369720304,40.77747888409454,60.48297276194195,82.2753576777341,171.59960210222522,197.20815781182262,252.15177845425956,383.1327908328128,1400.1475599443277,2812.4738667722154,3416.743642914498,12599.263825927617,3622.96849749108,5206.768847980475,1902.838588475552,1144.8252089743219,711.6655040473072,456.93769304342817,238.43595357759864,133.8729941689642,97.51889627249736,54.320387908275166,41.847677620126085,35.71723276926113,26.276495829612255,20.022228188848846,15.990808141800953,15.42283601802741,14.766368476202668,18.019210888715723,26.681133724080873,32.93664063365048,41.192651249931764,50.820570501635224,81.30134061470001,110.43978615629425,212.43602421277993,359.3048107396736,515.144592006442,805.2063063463305,1626.8549963375588,5397.542249875985,3215.125406898349],imag:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},imag:[0,-.14902020441330027,-.6771049511087865,-.6881801226004951,.029443579937724847,-.2009487184993747,-.6879124555252177,-.7282781273126446,.07806834448451422,.4131337534576373,-.11919960000393952,-.71935556472959,-.033994075615829664,.7931027181561068,1.0485412757882202,.3196345958384655,0,-.3196345958384507,-1.0485412757882226,-.7931027181561068,.03399407561582938,.719355564729591,.11919960000393916,-.41313375345763476,-.07806834448451422,.7282781273126419,.6879124555252186,.20094871849937485,-.029443579937724836,.6881801226004943,.6771049511087863,.14902020441330027,1.1657398208090677,-.38761332589064507,-2.5163414932492363,-2.584742801901222,1.7065268205659907,-.2665994714188303,-1.7612103334384195,-.7282210101552707,.12179041297535136,.18687402270680736,-.12109853545440831,-.3840196693078635,-.08833568066008249,.055468788382487,-.08864931978023959,.10356786689233256,1.1808955745571665,-.06277980908266619,-.9140020299055188,-.6085517196782837,.009493092452206031,.20081299805530148,-.06803304935655391,.012577652358335469,.033553295747053846,-.136297955147779,-.5532247620533317,.16665348831683371,1.6347625123407883,-1.2112325279336729,-2.7678867797785314,-1.1631005581009268,.5332121226822898,.6577742402610275,-.00595950898349003,.6433355803263732,-.013400706408967681,-1.6693935905986217,-.06346970667888305,.5458080613326616,-.0655904672404718,-.42286579957171455,-.20235216162881253,.49440559267811185,.3198533678523926,-1.00209734161358,-.9461454533592136,-.3211257206364784,.6718897424030703,.12355783613973209,.2935506311844692,.6379526967108269,.21171161290294277,-.4065449504972369,-.14885884441008196,.40518645419156046,.25176669622887876,-.4761471503847452,-1.2694305395629708,-.5011524591754494,1.737935918543955,-1.510414844880989,-1.8127000456147733,1.3511857905116147,-2.224881474580971,-2.9260010474168467,2.898822773747269,2.4923883909800804,-1.3958450829260902,-.08227870572481594,2.2133069351689647,1.0491520212286578,-.07984000257837154,-.4959026067283978,-.029646930580498103,.7887217790603109,.19612727406574681,-.7509604238103976,-.6144275627847797,-.34589242057405933,-.5582798450826452,-.05763904184756616,.560006725096047,1.1779553213485192,.34297063731481625,-.31700999971207366,-.05695259840849858,.1857688253715537,.05951539896115252,-.23070889488422375,-.06728966753341102,-.45052222849242474,-.04289502798083107,1.6598740406764962,1.7912379411122816,-.11630227482832883,-2.003866342355487,-2.7192489258221713,.9217002223108024,.9938637091534104,-.45711185122492165,.9753935158802068,.30440417133895387,-.07637828779385789,.10477257582077601,.07890032367339793,.2630152461937153,.03179438244924934,-.11240615902951592,.23783868068434,.44775143101136344,-.20105686300455952,-1.0552137607230396,-.5140138351292934,.05452601160980478,-.026488236207787865,.1659074022987267,.18522424653870803,.04631481008656916,-.24537254610227913,-.2848146466957044,.34829742340973674,1.0879631977925206,1.2627265059936403,-.49634217295171235,1.3751434251570953,2.5572924798905374,-2.3835279088157275,-.34512363817546704,.04627556386614428,-.28363975810469,-.2387205493926067,1.183676666248849,.7304559467631897,-1.0994633527727609,-.5690089037921002,-.052741079187555495,.3659628798478425,.15532358639646346,-.36091327743771645,-.19067540763230895,.7146228325692489,.608575991566829,.05141114827787543,-.203915388423597,-.259541089008346,-.5391894844616433,-.5935512086649235,-.13740024164207204,.43579638717256186,.22502803407041108,-.23772213393956157,-.22688331070114534,.4272753716671274,.47834844059991255,.32734133863952164,-.523614616283883,-.20363203779578987,.7102203218191872,.2819659388244356,1.379252647142985,1.5283654352438392,-1.3044681939973228,-1.1436891608956035,1.3490121369222494,.7192221183195878,-.27032254521482335,-.33653973458463504,-.15391447881479364,.12480482561109964,-.053989084045087433,-.18576918773324888,.07719795877991671,.2969964153130992,-.11903191000719174,.22681336512596068,.5452048910885546,.04099051159893126,-.2065372892038826,-.3708184505314888,-.07530964105542165,.12159159821884764,.1435041734896,.04316576368979115,-.05797713873788352,-.1379293882828701,-.37919334928832643,-.4845628881468578,.9788775955253505,.57420771517449,-1.1922323352837048,-.13841464698630696,.7604729654567205,.5836794449508778,-.03481797552070858,.18370340800622625,-.03129254257272888,-.06731871263304186,.33696607725615524,.05414244352918586,-.020415046981723958,-.07443570829442772,-.05732302224609874,.14754486034992467,.17049224676424324,-.3543171445411326,-.378008901790788,-.08822033360935463,.2051962406454232,.17151350221764664,.17699487940227424,.19591419189057305,.006519915797770923,-.1674811218328473,-.10967941676700359,.13440132102674274,.06975527091560389,-.34407110156452,-.47647271020395277,.24778628953900186,.9488164718246461,.7144585253672119,-.6930071741015518,-.23252823659006602,-.701263275821727,-.7350871283456302,.7744103827743443,.8006307878577998,-.292113499691209,-.5026189787684557,-.15844491832687652,.10672884533820617,.08309617174683444,-.061219034404081496,.04160642779041589,.31036717878062553,.16259404663751506,-.36128817330809687,-.2937092963497004,-.3179547262684097,-.4515155411552858,-.033181026716305836,.2952295204907573,.48699666134020275,.18589909016841552,-.2294714118021266,-.20114354017885722,-.003121578634498275,.05962035574447012,-.08629332168254554,-.013702104296225414,.27636362870999703,-.2036751926813714,-.07182337562489778,.6539085309807176,.5793688562107911,-.08250732409662949,.0565651647003436,.3031303791042242,.04658092546615603,-.14205860955679683,-.10567626674414661,-.14942985439330783,.021649684970292335,.030697590171757046,-.022837521893794246,.04332280702741229,.15694334998636744,.01091806619852779,.020198601252688204,.2990216144257594,-.15020855085379564,-.40608170156430695,-.21661403238492213,.10933934038264595,.1999075728830931,.14959651238129035,.04709274666709186,-.040888308386862755,-.1125167716796989,-.04384568038568949,.15335701874304222,.24380570184994388,-.1171131305850218,-.5719525526021313,-.3727592825430122,.5223211056809565,.45087452742355255,.4539906764735704,.4510373698265433,-.2544564606102324,-.5467496726808392,-.08177577100669063,.2737673334004137,.1862560849451878,.012289477611188196,-.028787447589128854,-.05539734067338191,-.033006645910307206,-.3893684484392882,-.5905287698630661,.35206862979259157,.7597288297427168,.47741066022580114,.6179546287385225,-.010739694431020583,-.3036500767005257,-.7973446419382137,-.4001415247512849,.3574319787215245,.3354315904602904,-.04832410301584743,-.1196515677085014,.07349644489939297,.119532550238058,-.055918533770930395,.0274579890256498,-.08756550732642451,-.47798364115462866,-.30556827592707503,-.05352916552013606,-.06476254452780263,-.40460920017095653,-.121109915711457,.34242949885797147,.25707377311839885,.18878454879876447,.05963524828049447,-.042881345638875606,.08031730159298765,-.06666120918302967,-.7842696525024205,-.6720392514268617,.38802788881902983,.13118499909748943,.3117062095733994,.5189221145484694,.28497632977966614,-.6374756986952439,-.7857061642615054,-.55004558199035,.08146420972941341,.32078878775035424,.10057675741278467,-.03885695862020822,-.09381661425332505,-.12197711394968046,.1077321776114192,.5327930235222532,.49767840692700166,-.40074591616539607,-.4686202607911239,-.4734798835330848,-.38787976346044234,.002686406177698898,.3750647268903417,.15775363291879776,-.12070461118398887,.046341940929038844,.06976255535250009,.036760253935025015,.11153094686031426,-.23193620085952527,-.0253381640601482,.8371715863158414,.1406999181881844,-.8063601327776306,-1.117979830240589,-.5311691671859755,-.29647728355917563,.43255465109120794,1.0682488929022527,.7439367652619796,-.27653752308302104,-.4373663501014127,-.05194612651429091,.07548322178417509,.041517261114611535,.08969847644227011,.18582746405096062,.11108661545235869,.176359348909108,.26257982919312395,.014915731745956722,-.05159288325887455,-.15702165108916452,.26018009521205254,.10187767444835746,-.5266864552492494,-.19184365339748963,.12365061867406398,-.004046067218027323,-.10695443147688474,-.38062982787546124,-.23013531228214942,1.4911852257492946,1.8656257067805557,-.31189832297292175,-1.8409665915911073,-1.3523062385443718,-.5975807844991242,-.4109826389978809,.6447143450432765,1.2836469730056959,1.499792380953558,-.050007892106663135,-.7009792467291004,-.37676357011449496,.03959608957139379,.16672200998370845,.2761685112331568,.25535752279806784,-.25821883180569144,-.7164342307537069,-.2869241470876478,.19246225810939122,-.48949334565382685,-.6758600491934259,-.6007838939451839,-.1042403296189125,.3352692900092091,.41773479752161374,-.015233071039077716,-.23129559015563347,-.27890178606409965,-.3664416625012834,.5342153762970184,1.5124695265818406,.46952715514837384,-1.6086255934377758,-.5862728674979834,.2521262787687128,.8127432041920076,1.0066444599512538,.13589799436620603,-.5268122251551876,-.8003501444992921,.1717021427336503,.32102965848797577,.01529805589554756,-.009515217387663859,-.05852775349790857,-.2932538896452712,-.23187846370788526,.12261389073580377,.13365949638292357,.3455058405502281,.32834338818238823,-.6368165384637715,-.14332768166025622,-.05069903984927889,.07679936703286014,.6230423185882272,.1393487843808003,-.36565795334395523,-.22525673769874993,.058882171297733404,.45328032825037023,.6727851393373049,-.6293048991173013,-2.151487667311436,-.3838160654397216,1.7701780351745315,2.243458963698462,1.3655631816809142,.6771695579512921,.23622587273603302,-1.2645365769339125,-1.1592659817915987,.22681074823924935,1.053242102943924,.47375681144418214,-.017283859373080118,-.3185203640125341,-.42276437548587065,-.2085107233974252,.3253766310319703,.6780243308299491,.6422145570025669,-.1933438107424214,0,.9853475595572507,.9308283218741816,.09097573410973633,-.2354727825287765,-.42043029453907255,-.16156648245217306,.14891910968678568,.27252999755409263,.2180753750942956,-.1793267317851967,-1.3886930910143056,-1.2475969582391058,.8261768752194723,1.688041333210945,.9330767566055275,0,-.9330767566055286,-1.688041333210949,-.8261768752194756,1.2475969582391047,1.3886930910143054,.17932673178519704,-.21807537509429575,-.27252999755409263,-.14891910968678598,.1615664824521733,.42043029453907194,.23547278252877635,-.09097573410973595,-.9308283218741829,-.9853475595572504,.6368165384637743,.19334381074242313,-.6422145570025672,-.6780243308299505,-.32537663103196973,.20851072339742566,.4227643754858706,.3185203640125334,.017283859373080232,-.4737568114441822,-1.053242102943924,-.22681074823925124,1.1592659817916007,1.264536576933914,-.23622587273603313,-.6771695579512926,-1.3655631816809146,-2.243458963698462,-1.7701780351745346,.38381606543971747,2.1514876673114336,.6293048991173043,-.6727851393373054,-.45328032825037173,-.05888217129773353,.22525673769874915,.3656579533439555,-.1393487843807989,-.6230423185882269,-.07679936703285951,.05069903984927936,.14332768166025514,.48949334565382807,-.328343388182388,-.3455058405502295,-.13365949638292388,-.12261389073580344,.23187846370788381,.29325388964527066,.058527753497908265,.00951521738766379,-.015298055895547204,-.32102965848797627,-.17170214273365259,.8003501444992935,.5268122251551922,-.13589799436620179,-1.006644459951254,-.8127432041920105,-.2521262787687158,.5862728674979838,1.6086255934377784,-.46952715514837307,-1.5124695265818422,-.534215376297019,.36644166250128374,.2789017860640999,.2312955901556328,.01523307103907798,-.417734797521613,-.3352692900092092,.1042403296189123,.6007838939451835,.675860049193426,.051592883258874796,-.19246225810939102,.28692414708764713,.7164342307537082,.25821883180569155,-.2553575227980673,-.27616851123315733,-.1667220099837085,-.03959608957139386,.3767635701144942,.7009792467291001,.05000789210666385,-1.4997923809535563,-1.2836469730056956,-.6447143450432788,.41098263899788057,.5975807844991221,1.352306238544366,1.8409665915911118,.31189832297292347,-1.8656257067805575,-1.4911852257492944,.230135312282149,.3806298278754614,.10695443147688473,.004046067218027898,-.12365061867406386,.19184365339748918,.5266864552492498,-.10187767444835667,-.2601800952120525,.15702165108916435,.4734798835330851,-.014915731745956694,-.26257982919312345,-.17635934890910804,-.11108661545235819,-.18582746405096062,-.08969847644226998,-.04151726111461143,-.075483221784175,.0519461265142905,.43736635010141267,.27653752308302265,-.7439367652619783,-1.068248892902254,-.4325546510912091,.2964772835591764,.5311691671859761,1.1179798302405872,.8063601327776302,-.14069991818818398,-.8371715863158419,.025338164060147935,.2319362008595256,-.11153094686031419,-.036760253935025175,-.06976255535249963,-.046341940929038775,.12070461118398874,-.1577536329187975,-.37506472689034165,-.002686406177698734,.38787976346044295,.053529165520136666,.46862026079112395,.40074591616539496,-.4976784069270019,-.5327930235222539,-.1077321776114199,.12197711394968033,.09381661425332492,.03885695862020814,-.10057675741278502,-.3207887877503539,-.08146420972941326,.5500455819903488,.7857061642615059,.6374756986952453,-.28497632977966464,-.5189221145484681,-.31170620957339795,-.1311849990974875,-.3880278888190298,.6720392514268613,.7842696525024204,.06666120918302984,-.08031730159298785,.042881345638875745,-.05963524828049447,-.18878454879876405,-.257073773118398,-.3424294988579715,.12110991571145559,.40460920017095686,.06476254452780322,-.4539906764735712,.30556827592707503,.47798364115463,.08756550732642399,-.027457989025650414,.055918533770930486,-.11953255023805759,-.07349644489939326,.11965156770850158,.04832410301584772,-.33543159046028986,-.3574319787215247,.40014152475128417,.7973446419382142,.30365007670052546,.010739694431020585,-.6179546287385224,-.4774106602258017,-.7597288297427172,-.35206862979259274,.590528769863066,.3893684484392883,.03300664591030692,.055397340673382,.028787447589128854,-.012289477611188065,-.18625608494518778,-.2737673334004137,.08177577100669034,.5467496726808401,.25445646061023275,-.4510373698265435,.08250732409662907,-.45087452742355144,-.5223211056809562,.37275928254301144,.5719525526021314,.11711313058502268,-.24380570184994438,-.15335701874304256,.04384568038568964,.11251677167969909,.04088830838686265,-.047092746667091887,-.14959651238128985,-.1999075728830922,-.10933934038264552,.21661403238492188,.4060817015643057,.15020855085379528,-.29902161442575986,-.020198601252688145,-.010918066198527492,-.15694334998636708,-.043322807027412154,.02283752189379423,-.030697590171757067,-.02164968497029204,.14942985439330775,.10567626674414606,.1420586095567969,-.0465809254661547,-.3031303791042232,-.05656516470034452,.701263275821727,-.579368856210791,-.6539085309807172,.0718233756248975,.20367519268137155,-.2763636287099972,.013702104296225327,.08629332168254569,-.05962035574447012,.0031215786344983188,.2011435401788572,.2294714118021264,-.1858990901684156,-.48699666134020314,-.29522952049075735,.033181026716305816,.4515155411552858,.31795472626841,.2937092963496996,.3612881733080966,-.16259404663751492,-.3103671787806257,-.04160642779041598,.06121903440408152,-.08309617174683444,-.10672884533820629,.1584449183268766,.5026189787684556,.292113499691209,-.8006307878577997,-.7744103827743442,.7350871283456298,-.7604729654567195,.23252823659006566,.6930071741015513,-.7144585253672113,-.9488164718246458,-.247786289539003,.4764727102039533,.34407110156452003,-.06975527091560392,-.13440132102674238,.10967941676700353,.16748112183284758,-.0065199157977711844,-.19591419189057413,-.1769948794022748,-.1715135022176452,-.2051962406454232,.08822033360935438,.3780089017907874,.3543171445411323,-.1704922467642435,-.14754486034992517,.05732302224609858,.07443570829442787,.020415046981723993,-.05414244352918596,-.33696607725615474,.06731871263304255,.031292542572729155,-.183703408006228,.03481797552070776,-.5836794449508764,-1.379252647142985,.1384146469863056,1.1922323352837043,-.57420771517449,-.9788775955253504,.48456288814685816,.3791933492883263,.13792938828286982,.05797713873788359,-.04316576368979144,-.1435041734895995,-.12159159821884727,.0753096410554214,.3708184505314883,.20653728920388284,-.040990511598931294,-.5452048910885553,-.22681336512596068,.11903191000719161,-.2969964153130989,-.07719795877991693,.18576918773324919,.05398908404508724,-.12480482561109926,.15391447881479356,.336539734584635,.27032254521482346,-.7192221183195872,-1.3490121369222496,1.143689160895601,1.304468193997322,-1.5283654352438407,.345123638175465,-.2819659388244354,-.7102203218191857,.20363203779578934,.5236146162838812,-.3273413386395211,-.4783484405999118,-.4272753716671272,.22688331070114495,.23772213393956154,-.22502803407041136,-.4357963871725614,.13740024164207254,.5935512086649227,.5391894844616454,.25954108900834527,.2039153884235965,-.05141114827787376,-.6085759915668277,-.71462283256925,.1906754076323091,.3609132774377171,-.15532358639646357,-.36596287984784226,.05274107918755558,.5690089037920997,1.0994633527727615,-.7304559467631879,-1.18367666624885,.2387205493926066,.28363975810469044,-.04627556386614671,2.0038663423554866,2.3835279088157284,-2.5572924798905374,-1.3751434251570973,.4963421729517121,-1.2627265059936426,-1.0879631977925208,-.34829742340973796,.28481464669570433,.24537254610228046,-.04631481008656919,-.18522424653870898,-.1659074022987272,.026488236207788063,-.05452601160980553,.514013835129293,1.0552137607230383,.20105686300456052,-.4477514310113629,-.2378386806843401,.11240615902951644,-.03179438244924926,-.2630152461937155,-.07890032367339833,-.10477257582077593,.07637828779385818,-.3044041713389529,-.9753935158802062,.45711185122492154,-.9938637091534103,-.9217002223108023,2.719248925822172,2.2248814745809713,.11630227482833386,-1.791237941112284,-1.6598740406764991,.04289502798083219,.4505222284924236,.06728966753340994,.23070889488422444,-.059515398961152315,-.18576882537155384,.05695259840849844,.3170099997120737,-.3429706373148162,-1.1779553213485197,-.5600067250960489,.05763904184756634,.5582798450826452,.3458924205740594,.6144275627847795,.7509604238103975,-.19612727406574634,-.7887217790603105,.029646930580497943,.4959026067283963,.07984000257837147,-1.049152021228657,-2.2133069351689625,.08227870572481576,1.3958450829260909,-2.492388390980078,-2.8988227737472685,2.926001047416845,-.5332121226822898,-1.3511857905116138,1.8127000456147735,1.5104148448809913,-1.7379359185439534,.5011524591754516,1.2694305395629717,.47614715038474426,-.2517666962288789,-.40518645419156096,.1488588444100823,.4065449504972391,-.21171161290294366,-.6379526967108293,-.29355063118447033,-.12355783613972898,-.6718897424030705,.32112572063647804,.9461454533592134,1.0020973416135777,-.3198533678523926,-.4944055926781111,.2023521616288126,.4228657995717151,.06559046724047177,-.5458080613326622,.06346970667888246,1.6693935905986201,.013400706408968283,-.6433355803263732,.005959508983489861,-.657774240261027,-1.1657398208090681,1.1631005581009257,2.7678867797785287,1.2112325279336758,-1.6347625123407896,-.16665348831683333,.5532247620533326,.13629795514777876,-.03355329574705394,-.012577652358336237,.0680330493565556,-.20081299805530076,-.009493092452206593,.6085517196782809,.9140020299055148,.0627798090826695,-1.1808955745571674,-.10356786689233179,.08864931978023799,-.05546878838248612,.08833568066008227,.38401966930786247,.12109853545440752,-.18687402270680636,-.12179041297535122,.72822101015527,1.7612103334384188,.2665994714188308,-1.7065268205659894,2.5847428019012186,2.5163414932492363,.3876133258906464],height:32,width:32,top:{real:[28423.105313214044,28674.724231095144,-722.6936689654091,9225.77700647333,1497.6465357448014,760.0427897970139,247.10162746021342,151.72529893327805,-4.888488578182327,-16.133735393751934,-.1836089108012847,2.3500990684470797,-.3300546919437796,4.157147071353755,9.594359511231952,-8.862420389127427,-22.052590313243808,-8.862420389127442,9.594359511232064,4.157147071353741,-.33005469194377934,2.3500990684471894,-.1836089108015032,-16.13373539375151,-4.888488578182327,151.7252989332781,247.1016274602134,760.0427897970155,1497.6465357448021,9225.777006473334,-722.6936689654084,28674.724231095115,25390.1705034731,2752.5053486176007,-7213.002611204682,-848.381593265913,982.9551130913575,457.8614692220499,-46.17554600713012,-28.684822585718617,4.56126311269416,36.18092046564247,1.491875160093084,-21.191137754573024,2.8803824684767365,32.41413028080426,20.161840527236397,-4.019485893928758,-5.5658589086089485,-1.4949158508676244,-19.561354112987054,-17.95974857540964,.8687237458817322,25.323206346284437,8.334805217065067,-41.92694802148037,-20.68710908650486,218.3167491556907,546.498727940314,514.9954980598236,620.4953971180341,4452.692995979104,-174.9910396987696,2133.8618335997025,26666.27486022647,9631.082450060545,-10095.4436331661,-4944.527630255449,770.9709389498014,234.73611402062764,-189.92210588558362,-126.31904474729288,-4.435939812126877,25.844521173618485,1.2207482283869857,-12.318944408119624,7.250602885809199,18.769456353148023,2.7720670784771717,.13907690271807935,9.774013115613371,6.231350755825603,-20.01252582229142,-16.040469196891664,3.7834180501306807,18.113814308198215,6.962890514889754,-1.8812165005783674,-3.150784138478577,24.526337675319898,193.3623500499944,465.727943920867,284.66528985874095,-3081.106669433579,-9076.44005596586,1118.2132640961638,5705.150120804338,397.85150159824235,-2822.676868927594,728.4038194884191,1249.2695734137342,82.61625587807173,-93.95074834729898,-33.62354927517744,-5.152291191558482,-7.233818332133113,-7.001283565832134,11.310122449566075,7.397320750446726,-10.314744048939033,-17.670460817927417,.8641610868545724,-1.7856630822843305,4.963649694111696,3.78921831801803,4.35404793228046,.8191229861537248,-8.923947649473824,-.6361517895200606,26.029536485331942,20.179218397178587,-95.96403842194775,-279.426833105528,-11.991282367617261,1111.9285745591587,12.384349101876612,-5014.478081060262,-931.0231442918517,-2935.685284408914,-1215.29681800596,2222.056654286523,1545.4091719722733,-307.5827467643575,-163.25068439377958,122.1532745420013,76.41622188918353,3.1644160240378296,-19.63456706110856,-1.3809484232923637,15.595649759531634,4.7705608814238305,-10.468288519634084,-9.72821654451915,-3.892040076973144,-8.479740526626086,-.5408298481218079,13.233921729082965,15.992639239497516,3.5976801907925586,-15.812600063085762,-8.758352583748549,13.529650759569922,11.041451779488147,-36.83792097475794,-116.57081449547842,-177.8261258222633,206.8817050386096,1116.66499766962,1551.5341746851843,206.06587874917457,221.21501338856706,949.5969256320186,2377.764318832197,271.30602644407116,-752.6356266496861,-131.94201270845676,66.79418332501145,26.328209125885053,-2.651299103629572,-7.060878043009799,3.4956142029525408,4.071227618214561,-.4909141749797001,-.5424711450189524,2.592970827944063,-2.2683391883792092,-3.9697444489461264,.6473865282581908,4.555701357906309,5.043205154557586,1.8637246814391786,-2.141559966513084,-3.0402232986351168,-7.52785400252287,-9.156487638653356,18.73370573223203,116.47631097371497,62.47010411404529,-587.3589015881012,-665.3089518487826,1602.7477447230021,2320.402867858619,84.3231427941042,335.3350953157289,111.12995285997569,-246.891636129823,99.59266396905916,121.294472320036,-19.935724961316957,-24.271547137145927,-9.939260521413413,3.6463495838243953,2.465987055193222,-4.911806111595,-3.9830584925921726,3.1158463847663604,4.632592228685417,.7426231797993057,2.6761268245222913,.7570781061046433,-2.0529004071821726,-5.472612390642812,-3.3500885842682195,4.73185520601865,3.308131417656121,-7.5747009667011485,-9.660327017316277,13.948321679490391,60.92055587778603,51.91276625568891,-200.57409151559827,-358.5523453941958,389.8739539776016,626.9468569152699,385.6735588989417,266.4673045221598,-754.8594980769828,-357.47689087779764,198.35300746583653,104.20178335269868,.2335042399832746,-13.459048177551795,-2.4931441622280337,3.35911454642515,-.8733283062545694,-5.056241794156717,-2.01704858583236,2.307946173371649,1.2848757720394648,1.0044515769395077,2.2715095300739048,1.0357721766880663,-1.8190548566089728,-3.9293196367766434,-3.2116043474898985,1.2474845862739923,2.207161661351936,.30672454240560637,-1.2664097847556852,1.1634429445003909,-12.54827061669637,-13.623126322836848,148.11914826060797,160.05821428876476,-517.7340628328959,-683.7844465455721,232.19478887738595,129.53848012256918,-30.629684625724426,14.007085088982263,-28.536726784912368,-22.150721493101905,7.44580496667092,6.54260607107829,2.718162441947553,-.21791167804934167,-2.189485976085934,-.3026121311478138,1.692903265601751,.07529517214110443,-2.5525542005113677,.09286846897674433,.05981128268157322,.44341981227717964,.7816687865488906,1.8071322433818207,1.0194826794166407,-1.7022885447654383,-1.657855797575729,1.4780948040669197,2.319020580560703,-2.0993082250693513,-8.824208050789139,6.742667679512961,63.30801695721644,32.61443206545601,-214.97833639893088,-154.136284333817,-153.00121169652448,-168.2014426492601,132.73656142769508,108.19035464369672,-32.411936148940164,-29.299646468639978,.4851269805841619,5.624023137620874,1.3789304004393061,-2.362190521013929,-1.2100039550542188,4.358373066387974,4.442250631457886,-3.3529459489445013,-3.2593326279479276,-2.392130752492481,-2.978651033636929,-.7892178449068877,2.077684743463387,4.670675915130116,3.716917327847608,-1.8762573022143243,-3.692861925563191,-.821716945913849,1.0313698171467438,-.473872082152255,4.505017932340429,12.279477314121408,-23.426373610246564,-47.5098297627359,96.77061072480174,142.54719834919302,-140.65053169937673,-123.6545784250871,-20.023908130365463,5.7599623270112,10.838125249555288,8.369003432625258,-.6186978757843106,-1.9872713177733001,-.8856679063583336,-1.3475268812751358,.7612912897614448,4.106684654220183,.6932014699196007,-1.2677968128954245,.8155363283178926,-1.6303291884460738,-2.229149764015147,-1.5668982951183865,1.2058440679467928,2.069939301729377,1.4972394562433364,-.4586350261835414,-1.2690924739742997,-.7846369325253577,-.7198076424450808,.10250612713533153,2.393822328408012,-.41309740564872016,-15.44378212490165,.6609566018409474,72.35136876166182,25.38463585124977,24.183834027615426,48.560459752587064,-30.88578675321252,-41.646585437272115,4.940668075863847,9.763720849829356,-2.6994657893152145,-2.367322704222093,.9913113012439738,1.922936512925184,1.0659834826624002,-5.24817147385301,-7.275943890900581,4.868206186360457,9.822573727789889,5.652827547254917,2.038642219035176,.27431668194701375,-2.116468388136669,-6.091341232354227,-4.11029642743493,3.1073479985221883,4.720787089742764,1.4415919680128015,.049935137368385736,.2349964843073239,-3.983837312738201,-10.31575796178785,3.7701904804417365,17.40344272954281,-26.485594572094836,-57.18096354690577,56.164057478325546,74.23265895816026,-2.156664889774473,-33.25302513977903,-16.080807358669208,-7.640886291947646,-.0615357101816982,4.351642327669915,3.0483876930594445,1.4396821019147403,-2.1531487354432772,-12.330021507307762,-6.784080497103278,6.21893143680046,6.535934712732882,5.839488667586418,6.550205713760284,2.889797135763367,-4.580708437255836,-7.14807024214599,-3.544928123462484,3.1166956033252706,5.765474681444693,1.4593710853505601,.07955129926688503,1.7754263793290057,1.1602778115858083,-4.162195256209554,-6.1090111539332135,-21.585708623899716,-64.66096312641629,-42.918674159823304,-12.637618832694352,-23.660098526273554,-32.75737716495774,-16.139835139531076,-8.82145011056593,-.07408327595609765,9.23472978007751,4.0583945463193585,-1.3379386144670409,-1.0708228123536387,-3.749403380306174,-1.4014962110675557,6.3397919866467625,-.03663393601032304,-6.544978979481311,-2.061729450387931,2.9031092319630374,1.9851413256277737,1.0607201932740675,2.7050589244056695,2.99102027355106,-2.611470903566315,-2.998378794740129,-.21466478532365837,-.04506212012998023,.26663892053888355,4.647659937762156,4.303885344479347,-6.822097409456934,-12.449318624888502,-10.129633105210658,-14.243655171088259,-24.590264561101538,-60.147765518061014,-2.4700759029582726,27.756533006476555,4.274975309220922,1.5109008418257455,2.3037162841058008,-3.399112307002629,-2.3657348243984693,-1.7285717434362748,1.4807803344279866,11.452735641829591,12.838038879276603,-.480938059779123,-8.482373036151738,-10.096707565442667,-5.161364149706894,-2.650693862312733,9.408136963190175,9.49674702579923,1.5732629424154292,-6.232958390040639,-7.374195371727957,-.6645821620104788,2.389466617415538,.7202679836578819,-2.705612652438192,-1.4278421900811593,6.2735441200134945,15.997118782527094,32.34085972379201,29.293996905608573,6.583012307121869,-6.0118236769643065,35.32705272368031,28.93384981751958,4.6778289682139205,-4.86264113584278,-9.068937524557185,-5.840369598551354,-.8876414640906193,.44619327315923196,2.093054509671643,8.234646039911487,4.441292736242551,-3.9444092199360696,-3.922559950916231,.038172103710441746,-1.1645390667947013,3.846808106127327,3.825131103533594,.7379460798634513,-4.4683377641176865,-3.1226055206334693,-1.659659462142453,-1.5916869216083986,.667739430047698,3.41593902881177,1.5141668200491456,.24760595741359728,-.6043340090172503,-18.385421885703135,-9.302829511389472,25.73026622408986,16.23212758885586,17.912434056418146,-8.864985722199924,-22.650006821252305,-4.605762784462193,3.1371579845110453,-.06446512110731989,-.7788946841662594,-1.4905827462536891,-1.611120798006951,3.9054962114874257,1.1954905638175628,-5.728227962444492,-8.397660376500312,-2.0078722367450874,4.702969627117891,9.197236158387076,4.7029696271178825,-2.0078722367450905,-8.397660376500312,-5.728227962444484,1.1954905638175473,3.9054962114874288,-1.6111207980069395,-1.4905827462536891,-.7788946841662552,-.06446512110731795,3.137157984511046,-4.605762784462194,-22.65000682125226,-8.864985722199942,17.912434056418164,6.583012307121729,25.7302662240898,-9.302829511389472,-18.385421885703128,-.6043340090172618,.24760595741359434,1.5141668200491516,3.415939028811767,.6677394300476951,-1.5916869216084077,-1.6596594621424434,-3.122605520633453,-4.468337764117672,.737946079863447,3.8251311035336037,3.8468081061273467,-1.1645390667946849,.03817210371045972,-3.922559950916226,-3.944409219936084,4.44129273624253,8.234646039911485,2.09305450967165,.4461932731592304,-.8876414640906158,-5.8403695985513515,-9.068937524557173,-4.862641135842777,4.677828968213913,28.933849817519487,35.327052723680374,-6.011823676964289,-24.590264561101595,29.293996905608687,32.34085972379199,15.997118782527064,6.273544120013469,-1.4278421900811535,-2.705612652438196,.7202679836578744,2.38946661741554,-.6645821620104728,-7.374195371727961,-6.232958390040642,1.5732629424154319,9.49674702579921,9.408136963190167,-2.6506938623127225,-5.161364149706884,-10.096707565442674,-8.482373036151754,-.48093805977915227,12.83803887927658,11.452735641829598,1.4807803344279824,-1.7285717434362824,-2.365734824398472,-3.3991123070026203,2.3037162841058088,1.5109008418257512,4.274975309220927,27.756533006476598,-2.470075902958246,-60.14776551806104,-12.637618832694358,-14.243655171088175,-10.12963310521061,-12.449318624888507,-6.822097409456957,4.303885344479342,4.647659937762149,.266638920538885,-.04506212012997937,-.21466478532365083,-2.998378794740133,-2.6114709035663206,2.9910202735510656,2.7050589244056806,1.0607201932740935,1.985141325627778,2.903109231963025,-2.0617294503879293,-6.544978979481317,-.036633936010327744,6.339791986646766,-1.4014962110675422,-3.749403380306173,-1.0708228123536432,-1.3379386144670453,4.058394546319359,9.234729780077519,-.07408327595609586,-8.821450110565928,-16.139835139531023,-32.75737716495775,-23.660098526273632,56.164057478325425,-42.91867415982332,-64.66096312641639,-21.585708623899666,-6.1090111539332215,-4.162195256209558,1.1602778115858134,1.775426379329013,.07955129926688442,1.4593710853505546,5.765474681444705,3.116695603325263,-3.544928123462478,-7.148070242145987,-4.580708437255835,2.8897971357633647,6.5502057137602785,5.83948866758641,6.535934712732902,6.218931436800485,-6.78408049710327,-12.330021507307773,-2.153148735443274,1.439682101914743,3.04838769305944,4.351642327669918,-.06153571018169762,-7.640886291947656,-16.080807358669187,-33.253025139779005,-2.1566648897745,74.23265895816026,24.183834027615593,-57.180963546905936,-26.485594572094925,17.403442729542817,3.7701904804417596,-10.315757961787877,-3.9838373127381965,.2349964843073301,.04993513736838644,1.4415919680127984,4.720787089742761,3.10734799852219,-4.110296427434927,-6.091341232354242,-2.11646838813668,.27431668194701325,2.0386422190351805,5.652827547254905,9.822573727789889,4.868206186360469,-7.275943890900581,-5.248171473853026,1.0659834826623993,1.9229365129251905,.9913113012439768,-2.3673227042220857,-2.699465789315211,9.763720849829385,4.940668075863862,-41.64658543727223,-30.885786753212596,48.56045975258722,-140.6505316993766,25.38463585124965,72.35136876166179,.6609566018410128,-15.443782124901649,-.41309740564871933,2.393822328408015,.10250612713533497,-.7198076424450784,-.784636932525357,-1.2690924739743,-.45863502618354285,1.4972394562433307,2.0699393017293644,1.2058440679467857,-1.5668982951183805,-2.2291497640151445,-1.6303291884460729,.8155363283178877,-1.2677968128954307,.693201469919594,4.106684654220188,.7612912897614459,-1.347526881275139,-.8856679063583313,-1.9872713177733001,-.6186978757843116,8.369003432625277,10.838125249555295,5.759962327011137,-20.023908130365466,-123.65457842508674,-153.00121169652476,142.547198349193,96.7706107248018,-47.509829762735976,-23.426373610246678,12.279477314121431,4.505017932340448,-.47387208215225296,1.031369817146745,-.8217169459138478,-3.6928619255631867,-1.8762573022143267,3.7169173278476135,4.670675915130111,2.07768474346338,-.7892178449068863,-2.9786510336369223,-2.392130752492467,-3.2593326279479267,-3.3529459489444933,4.4422506314578865,4.35837306638798,-1.2100039550542185,-2.362190521013933,1.3789304004393068,5.624023137620873,.48512698058415527,-29.29964646863997,-32.41193614894016,108.19035464369668,132.73656142769508,-168.20144264926049,232.19478887738595,-154.13628433381695,-214.9783363989309,32.61443206545589,63.30801695721639,6.742667679512982,-8.82420805078914,-2.0993082250693487,2.319020580560703,1.4780948040669208,-1.657855797575728,-1.7022885447654388,1.019482679416639,1.8071322433818233,.7816687865488934,.4434198122771743,.05981128268157322,.0928684689767485,-2.5525542005113593,.07529517214110532,1.6929032656017555,-.30261213114781177,-2.1894859760859413,-.21791167804934622,2.718162441947553,6.542606071078292,7.445804966670914,-22.150721493101912,-28.536726784912382,14.007085088982294,-30.629684625724458,129.53848012256904,385.67355889894196,-683.7844465455728,-517.7340628328959,160.0582142887646,148.1191482606082,-13.623126322836866,-12.548270616696426,1.1634429445003742,-1.2664097847556794,.30672454240560415,2.20716166135193,1.2474845862739898,-3.211604347489884,-3.9293196367766487,-1.8190548566089664,1.0357721766880712,2.2715095300739065,1.0044515769394997,1.284875772039456,2.3079461733716413,-2.017048585832357,-5.056241794156722,-.8733283062545716,3.3591145464251335,-2.493144162228037,-13.459048177551766,.23350423998331427,104.20178335269858,198.35300746583647,-357.4768908777974,-754.8594980769828,266.4673045221598,84.32314279410423,626.94685691527,389.87395397760116,-358.5523453941956,-200.57409151559838,51.91276625568885,60.92055587778603,13.948321679490393,-9.660327017316268,-7.574700966701158,3.308131417656124,4.731855206018658,-3.350088584268223,-5.472612390642829,-2.0529004071821806,.7570781061046526,2.676126824522286,.7426231797993132,4.632592228685409,3.1158463847663604,-3.9830584925921673,-4.911806111594991,2.465987055193226,3.6463495838243847,-9.939260521413413,-24.271547137145948,-19.93572496131696,121.29447232003592,99.5926639690591,-246.89163612982315,111.12995285997523,335.33509531572906,221.21501338856802,2320.402867858619,1602.7477447230024,-665.3089518487828,-587.3589015881013,62.470104114045164,116.47631097371504,18.733705732232092,-9.156487638653367,-7.527854002522884,-3.0402232986351114,-2.1415599665130745,1.8637246814391684,5.04320515455758,4.555701357906312,.6473865282581913,-3.969744448946121,-2.2683391883791986,2.59297082794407,-.5424711450189373,-.49091417497970297,4.071227618214554,3.495614202952542,-7.0608780430097635,-2.6512991036295777,26.328209125884918,66.79418332501139,-131.94201270845636,-752.6356266496862,271.3060264440702,2377.764318832196,949.5969256320187,-2935.685284408913,206.06587874917372,1551.534174685185,1116.6649976696197,206.88170503860968,-177.82612582226307,-116.57081449547834,-36.837920974758035,11.04145177948815,13.52965075956991,-8.758352583748536,-15.812600063085752,3.597680190792535,15.99263923949752,13.233921729082972,-.5408298481218161,-8.479740526626081,-3.8920400769731613,-9.728216544519134,-10.468288519634076,4.770560881423832,15.595649759531605,-1.380948423292348,-19.63456706110855,3.1644160240378296,76.41622188918357,122.15327454200114,-163.2506843937796,-307.5827467643575,1545.4091719722737,2222.056654286522,-1215.2968180059584,5705.150120804333,-931.0231442918487,-5014.478081060261,12.384349101875989,1111.9285745591585,-11.99128236761729,-279.4268331055283,-95.96403842194779,20.17921839717859,26.029536485331974,-.6361517895200655,-8.923947649473861,.8191229861537305,4.354047932280479,3.789218318018029,4.963649694111646,-1.785663082284335,.8641610868545833,-17.670460817927413,-10.314744048939055,7.39732075044672,11.310122449566087,-7.001283565832121,-7.2338183321331515,-5.15229119155848,-33.6235492751773,-93.95074834729884,82.61625587807117,1249.2695734137344,728.4038194884231,-2822.676868927588,397.85150159823706,26666.27486022647,1118.2132640961736,-9076.440055965862,-3081.1066694335805,284.6652898587414,465.72794392086666,193.3623500499941,24.526337675320004,-3.1507841384785733,-1.8812165005783184,6.962890514889715,18.11381430819821,3.783418050130689,-16.04046919689164,-20.012525822291416,6.231350755825608,9.77401311561337,.1390769027181136,2.7720670784771526,18.76945635314798,7.250602885809213,-12.318944408119592,1.2207482283869953,25.84452117361841,-4.435939812126878,-126.31904474729296,-189.92210588558356,234.73611402062767,770.9709389498016,-4944.527630255446,-10095.4436331661,9631.082450060534,25390.17050347309,2133.8618335997035,-174.99103969877373,4452.692995979102,620.4953971180324,514.9954980598235,546.4987279403136,218.31674915569133,-20.687109086504822,-41.92694802148033,8.334805217065085,25.323206346284447,.8687237458817438,-17.959748575409694,-19.56135411298708,-1.4949158508675975,-5.565858908608942,-4.019485893928795,20.161840527236293,32.41413028080419,2.8803824684767667,-21.191137754573067,1.491875160093128,36.180920465642465,4.561263112694152,-28.68482258571906,-46.17554600712999,457.8614692220494,982.9551130913566,-848.3815932659156,-7213.002611204684,2752.5053486175875],imag:[0,-3169.945161494138,-2389.009292474752,-2824.6185770767256,47.14098532904063,-205.51829185355012,-383.7183501976268,-205.9732988135564,11.33217255237444,43.76909201728548,-7.034291101336307,-32.133345787281364,-1.2408409398708855,22.626534078219475,22.834188196398234,5.860605450439017,0,-5.8606054504387375,-22.83418819639831,-22.626534078219454,1.240840939870875,32.133345787281435,7.034291101336293,-43.76909201728535,-11.33217255237444,205.97329881355589,383.7183501976273,205.51829185355027,-47.14098532904063,2824.6185770767256,2389.009292474751,3169.9451614941386,14687.463554763033,-1246.2254521233822,-13582.059524928778,-4205.001741520543,1374.1061578688877,-137.33727593318653,-632.8113455288487,-154.70037614560013,13.450507164884565,15.193108572125329,-6.154296658705534,-15.818788310912929,-2.909480569030046,1.479970160345879,-1.5973907882613358,1.5293212848264928,18.21275880080945,-1.003899882219808,-18.30035720783934,-15.99060672422979,.33906699281555863,8.403557604549265,-3.695581631630837,1.2265587756840484,4.49188016589487,-32.498332906337446,-252.7892465071488,118.6015387642415,1871.5173348139303,-2304.779993768985,-14411.746659687838,-4213.876681413953,7014.732560501017,2247.44595388478,-16.76096327485996,900.764743019339,-5.134250045598947,-420.94056280958415,-12.516743930999253,93.66044614887166,-5.396479152459517,-25.576180637452808,-8.251410997969776,17.318312851322737,9.236462137217643,-22.012718711107286,-15.490166786860247,-4.834205749446653,9.56285627140653,1.836849747935801,5.348168445107009,16.065001056209898,7.160451380960977,-15.578970641484018,-6.7835303274441205,29.197525074885235,24.587565667273296,-80.30266777803787,-341.00518268197084,-165.09457453510524,812.929078888263,-1514.0868881615295,-6442.593062681756,2384.028236162332,-10283.309463536394,-4592.969551993708,4024.534672295305,1566.1446188979135,-577.9784269549883,-13.866559817282136,303.84181615530144,107.13271532249853,-4.430459051551983,-24.3354914766248,-1.06916879450579,24.162065431216654,4.7495715205351985,-14.018208973927269,-8.950623015251843,-4.4638345370409525,-7.184295053694476,-.7548369913992261,9.34037405707282,25.69084757401466,10.204720176161787,-11.674788778672609,-2.2174348022320634,10.712979752882786,4.144769096332819,-30.28940876791103,-12.158067002051448,-76.33668890424448,-15.045419751305701,825.0044509954804,3127.7274260756976,-92.69266164282145,-6218.494113001829,-3848.3727657836507,693.8726501883154,545.9720887451243,-92.12559859876467,150.80594875272075,31.835009702890954,-5.928389610620629,5.174936281185259,3.5428080098191677,8.181320378808998,.8023872820291866,-2.1553941232205127,3.896876060708947,5.741545217717403,-2.4223203414509196,-12.192718147122756,-6.443125616997143,.7810139743794973,-.4709674045364774,4.013547752378568,5.342440345336286,1.5176299437256986,-10.74330995836436,-14.68235074512339,24.62434367341447,118.67852190927127,172.0930538620998,-99.15779039126605,517.5033298161774,2037.7393191154626,-1363.1746812874464,-339.7433324255503,32.123918954310476,-283.55446630414355,-87.78727128965622,401.2426948021161,97.67974932928976,-120.49954302359174,-51.17606054251282,-2.5863965882294027,13.214576791319574,4.035919637492688,-8.30669864432925,-3.219039265130443,10.42730204701207,6.893139999364272,.5098976234806418,-1.9729622551402084,-2.7447920706562,-6.495179494436407,-8.76592374084332,-2.5623445767069972,9.402955191069655,6.078763549737345,-8.773868110480242,-10.356090763505474,25.99442134346248,47.53445671295613,36.4274180672144,-132.28171420843677,-55.78017124265114,550.5881882141604,230.04212220540037,2282.815734215307,1692.5764998210254,-618.4010666681479,-406.7508298763652,268.6109645119121,88.79766085006811,-17.81328523706651,-23.19378111787497,-5.993920933714092,3.591196404165329,-1.1492389141172172,-3.281418277923168,1.0895777711511168,3.528253318972853,-1.1949811908258732,1.894384229023907,4.624133283408544,.37075703258422543,-2.0346603770225924,-4.506790345640636,-1.1470927861162812,2.3634060343879923,3.259053548391299,1.2412658338184401,-2.238981588773232,-8.267796716016413,-35.26417469610022,-42.695700376724766,163.41685001540142,139.99054216726472,-634.3924089241822,-59.27769287041278,635.1043543547817,336.1095076126709,-20.98790849568645,62.381440709915225,-5.260850091933738,-7.943122859894799,17.71991372721576,2.2765757875228916,-.5781253977177655,-1.861000889502646,-1.1416693103444284,2.4821587471930475,1.9877494352069631,-3.6722851782283747,-3.348161983991842,-.654364366806294,1.4913973744886961,1.3020502991963898,1.5364454784416322,2.033250215562337,.0828119153078757,-2.728734023318047,-2.0624150870013023,3.1666191865848514,2.1277795836536475,-15.762070711071239,-31.08008715856702,16.26456379879305,168.22104098804192,119.10647254618513,-340.95280202269214,-119.21079977674056,-524.1614361472213,-474.8379195142545,238.1697359967206,238.87620399289383,-30.950251690797295,-43.00765504375078,-7.078111018168548,4.293336801801075,2.128510229721456,-1.3556643805285902,.6711805209840143,4.158011377374009,1.6924135574018535,-3.2368514600901537,-2.3674255865410236,-2.2397386036010594,-2.8392755347081424,-.22727952120054792,2.1660066162361877,4.125725202345454,1.8555476250524485,-3.0110538491549583,-3.3997614112807475,-.06444119738194992,1.4400236898496321,-2.5651430892865172,-.5740691306951373,14.545275998521815,-21.097880653370396,-8.386658477188135,246.29297742969297,177.82681762874435,-29.41075778366933,21.206487630199256,82.34142325708432,9.462990925956907,-12.117042155983494,-8.205729296687293,-5.367262276976342,.7159440642377497,.6939442046221322,-.3950164257282811,.5780431877534518,1.8269742232979342,.10217887910111716,.16688705386232044,1.9755117613475777,-.9437282349547598,-2.4667123640612325,-1.3772827491468491,.7462734387419473,1.570395769948343,1.3943774862563845,.5108795243575502,-.5747333955981793,-2.001959249122612,-.9444785806952298,4.110572038153962,9.874896080299848,-5.069306285284377,-52.44341015820585,-37.64226425981684,117.83245857703734,130.78419594725884,169.61465367155833,186.83060708175802,-35.97421869826457,-86.88028114844637,-5.220374019453921,16.97166918775532,6.069817981265125,.35231673872141245,-.530449143562611,-.8163253500771305,-.3958311780085509,-4.438525040368828,-5.147284914598521,2.545092404453277,5.007135787687879,2.743807769745191,3.4897745997776024,-.06312531494631476,-1.9440922443950184,-5.93269468200695,-3.385188090942465,3.665839538220193,4.0455837767151035,-.6661551017179177,-2.2326980338070728,1.6846667556373658,3.813713204205189,-1.9181620538698931,1.644195687028925,-6.127050069431315,-76.59589320592706,-49.969516616017785,-7.913232126947411,-11.568908095829089,-47.80511277271571,-13.830481688679152,18.277275877397457,14.698934402888547,6.218474203597997,1.489002207682271,-.7474439900434958,1.078974533533704,-.7890497066195372,-8.272945648947578,-5.409011823874466,2.7622883519807897,.8473850486901422,1.8128818460693508,2.842021949155072,1.5362703897962247,-3.7595900673998903,-5.60222882438188,-4.1625158390656765,.7129508246172668,3.6372516960945322,1.3208871209715871,-.6240075417645504,-1.768358539761187,-3.6168192973638713,3.673596380624533,31.275163257132462,32.479329698147204,-39.759969700967346,-68.58423265091736,-57.4694689751587,-64.29737144593432,.2086101156653365,34.25783205331058,6.9534765415767215,-5.379348345641788,1.2524657598045081,1.5450348766267965,.5660857117060044,1.3866526144820828,-2.467818437504425,-.23634501606433136,6.345024457457011,.9543505178876851,-4.984602859992024,-6.3381420012322005,-2.743585061158078,-1.5807425386703018,2.421504137076397,6.842897598662122,5.393931642661025,-2.3287200765196823,-4.797845078543163,-.6313340386700949,1.1146429476849253,.7514356381637266,2.271704859780069,5.535047521228594,5.157177392273493,9.279298792017928,21.682075132354747,1.4867450129376456,-4.470011472560532,-18.272390809448236,16.714318324621598,7.308978727000863,-20.071959549384122,-7.08417742806207,3.202216021696031,-.07798827086401403,-1.5775612503840553,-4.371537527467265,-2.1765426316142653,13.260687049653976,13.879467714343647,-1.885248686971834,-10.52703075548209,-6.8369811071974125,-3.0333474188096656,-2.140796956298466,3.722272454853548,7.625727254705552,10.117490783509389,-.39109059001006397,-6.9982476982268125,-4.2960092579610025,.5590179117015986,2.6155137759572247,6.5895285486459425,7.4061452615413605,-10.366283361455007,-35.34703723782264,-16.933453520111545,16.22469212400422,-34.34332526355967,-71.73858701067937,-34.4509698796545,-6.264077870088225,11.74621463570591,13.03195895176973,-.3480472785242843,-3.996855335639563,-3.964707435958017,-4.209643231106255,4.915829456805765,12.338227697160551,3.508848971799439,-9.688758847164829,-3.3007173968474173,1.3223986051066356,3.9779056054352555,5.213903433147754,.7396674961794831,-3.153864974849434,-5.201358311154781,1.2046804216345655,2.9426249963390902,.16125203808628796,-.12580690156457183,-1.0212362026563724,-6.277158135649886,-5.667954672326474,4.238198644615171,5.756037161701083,18.621646756873353,24.73430944472121,-36.387091300098106,-10.759792351985398,-2.2461784763603254,3.6933656200181786,20.866503857704814,3.7918232583171383,-8.210308568220889,-3.925837839044303,.8338220247168117,4.801181266459511,6.189735840763045,-4.761394258970372,-14.056893094185043,-2.2289578077004246,10.245900399003714,12.011271759567334,7.371055058808771,3.551572630490227,1.2929923686914595,-7.412447633800669,-7.578794799911184,1.7154740370529804,9.312385447605473,4.977756531678763,-.24109318982965802,-5.176673232010988,-9.309219172924053,-5.246693773893865,10.274800595678272,28.322088715789157,27.586929135138202,-13.506737972920812,0,72.99209390971254,40.67476630635939,3.667761205914089,-7.0101784555215705,-11.074353780690299,-3.560051908744632,2.4941865000982566,3.5007885216085395,2.2952423730960096,-1.6579656325825838,-10.397334640078137,-8.51833941791384,4.679962930220257,8.92655750805772,4.898502144770566,0,-4.898502144770571,-8.926557508057728,-4.679962930220274,8.518339417913836,10.397334640078139,1.6579656325825878,-2.2952423730960114,-3.5007885216085395,-2.4941865000982615,3.560051908744636,11.074353780690284,7.010178455521566,-3.6677612059140743,-40.67476630635944,-72.99209390971251,36.38709130009825,13.50673797292093,-27.58692913513819,-28.322088715789224,-10.274800595678252,5.2466937738938775,9.309219172924053,5.1766732320109785,.24109318982965933,-4.977756531678763,-9.312385447605468,-1.7154740370529937,7.578794799911192,7.41244763380068,-1.2929923686914602,-3.5515726304902286,-7.371055058808773,-12.011271759567332,-10.245900399003729,2.2289578077004006,14.05689309418503,4.7613942589703955,-6.189735840763048,-4.801181266459526,-.8338220247168133,3.9258378390442905,8.210308568220892,-3.791823258317102,-20.8665038577048,-3.693365620018146,2.246178476360347,10.759792351985324,34.343325263559734,-24.734309444721188,-18.621646756873407,-5.756037161701096,-4.2381986446151565,5.667954672326443,6.2771581356498745,1.0212362026563664,.12580690156457094,-.16125203808628427,-2.942624996339094,-1.2046804216345817,5.20135831115479,3.1538649748494616,-.7396674961794603,-5.2139034331477525,-3.9779056054352657,-1.322398605106651,3.300717396847418,9.688758847164834,-3.508848971799433,-12.338227697160564,-4.915829456805772,4.209643231106254,3.9647074359580197,3.9968553356395535,.3480472785242903,-13.031958951769711,-11.746214635705918,6.26407787008822,34.450969879654494,71.73858701067942,4.47001147256055,-16.224692124004207,16.93345352011149,35.34703723782269,10.366283361455015,-7.406145261541344,-6.589528548645957,-2.615513775957226,-.5590179117015994,4.2960092579609945,6.998247698226812,.3910905900100697,-10.117490783509375,-7.625727254705552,-3.722272454853562,2.140796956298464,3.0333474188096563,6.836981107197385,10.52703075548211,1.8852486869718446,-13.879467714343662,-13.26068704965398,2.1765426316142595,4.371537527467271,1.5775612503840555,.07798827086402514,-3.2022160216960267,7.084177428062051,20.071959549384133,-7.308978727000809,-16.7143183246216,18.272390809448193,57.46946897515871,-1.486745012937642,-21.682075132354715,-9.27929879201793,-5.157177392273471,-5.5350475212285986,-2.271704859780067,-.7514356381637247,-1.114642947684924,.63133403867009,4.797845078543163,2.3287200765196983,-5.393931642661015,-6.842897598662133,-2.4215041370764028,1.5807425386703056,2.7435850611580817,6.338142001232191,4.98460285999202,-.9543505178876822,-6.345024457457017,.23634501606432906,2.4678184375044308,-1.3866526144820814,-.5660857117060069,-1.5450348766267858,-1.2524657598045066,5.379348345641785,-6.953476541576708,-34.25783205331058,-.20861011566532392,64.29737144593442,7.9132321269475,68.58423265091739,39.759969700967275,-32.47932969814723,-31.275163257132508,-3.6735963806245575,3.616819297363866,1.7683585397611854,.6240075417645492,-1.3208871209715913,-3.6372516960945265,-.7129508246172646,4.162515839065667,5.602228824381885,3.7595900673999,-1.5362703897962169,-2.842021949155066,-1.8128818460693434,-.8473850486901302,-2.762288351980789,5.409011823874463,8.272945648947582,.7890497066195395,-1.0789745335337066,.7474439900434985,-1.4890022076822718,-6.218474203597983,-14.69893440288851,-18.277275877397457,13.830481688678995,47.80511277271575,11.5689080958292,-169.61465367155867,49.96951661601778,76.59589320592725,6.127050069431279,-1.6441956870289614,1.918162053869898,-3.8137132042051767,-1.6846667556373722,2.2326980338070745,.6661551017179216,-4.0455837767150955,-3.665839538220195,3.3851880909424605,5.932694682006955,1.9440922443950184,.06312531494631478,-3.4897745997776015,-2.7438077697451946,-5.007135787687877,-2.5450924044532854,5.147284914598517,4.438525040368832,.3958311780085478,.8163253500771318,.5304491435626107,-.352316738721409,-6.069817981265121,-16.971669187755335,5.220374019453901,86.88028114844653,35.974218698264636,-186.8306070817582,29.41075778366919,-130.78419594725855,-117.83245857703733,37.64226425981672,52.44341015820588,5.06930628528441,-9.874896080299864,-4.11057203815397,.9444785806952333,2.0019592491226157,.5747333955981775,-.5108795243575508,-1.3943774862563805,-1.570395769948336,-.7462734387419447,1.3772827491468478,2.466712364061224,.943728234954757,-1.9755117613475803,-.16688705386232,-.10217887910111442,-1.8269742232979298,-.5780431877534501,.3950164257282808,-.6939442046221329,-.7159440642377405,5.367262276976339,8.20572929668725,12.117042155983503,-9.462990925956644,-82.34142325708414,-21.206487630199604,524.1614361472213,-177.82681762874424,-246.29297742969288,8.386658477188103,21.097880653370403,-14.545275998521824,.5740691306951337,2.5651430892865226,-1.4400236898496321,.06444119738195084,3.3997614112807506,3.0110538491549557,-1.8555476250524514,-4.125725202345457,-2.1660066162361895,.22727952120054773,2.8392755347081424,2.2397386036010616,2.3674255865410174,3.236851460090151,-1.6924135574018513,-4.15801137737401,-.6711805209840154,1.3556643805285893,-2.128510229721456,-4.29333680180108,7.078111018168553,43.00765504375077,30.950251690797295,-238.87620399289392,-238.1697359967206,474.83791951425417,-635.1043543547808,119.21079977674036,340.9528020226919,-119.10647254618499,-168.2210409880419,-16.264563798793112,31.080087158567054,15.76207071107125,-2.127779583653649,-3.1666191865848456,2.0624150870013005,2.728734023318051,-.08281191530787903,-2.033250215562348,-1.5364454784416388,-1.302050299196379,-1.4913973744886957,.6543643668062926,3.348161983991837,3.6722851782283725,-1.987749435206966,-2.4821587471930564,1.1416693103444246,1.8610008895026517,.5781253977177665,-2.276575787522897,-17.719913727215747,7.943122859894882,5.260850091933786,-62.38144070991582,20.98790849568596,-336.10950761267,-2282.8157342153086,59.27769287041221,634.3924089241824,-139.99054216726466,-163.41685001540142,42.69570037672479,35.26417469610021,8.2677967160164,2.2389815887732354,-1.2412658338184486,-3.2590535483912864,-2.363406034387986,1.1470927861162765,4.506790345640629,2.034660377022595,-.37075703258422554,-4.6241332834085505,-1.8943842290239064,1.194981190825872,-3.5282533189728493,-1.0895777711511203,3.281418277923172,1.149238914117214,-3.591196404165319,5.993920933714089,23.193781117874966,17.813285237066506,-88.79766085006803,-268.6109645119122,406.7508298763647,618.4010666681477,-1692.5764998210257,339.74333242554815,-230.04212220540018,-550.5881882141593,55.780171242650994,132.2817142084364,-36.42741806721432,-47.534456712956064,-25.994421343462484,10.356090763505458,8.773868110480235,-6.078763549737348,-9.402955191069632,2.562344576707006,8.765923740843304,6.495179494436428,2.7447920706561946,1.972962255140204,-.5098976234806252,-6.893139999364257,-10.427302047012086,3.2190392651304447,8.30669864432927,-4.03591963749269,-13.214576791319564,2.5863965882294058,51.17606054251275,120.49954302359184,-97.67974932928956,-401.2426948021163,87.78727128965625,283.554466304144,-32.12391895431216,6218.494113001829,1363.174681287448,-2037.739319115463,-517.5033298161776,99.15779039126602,-172.09305386210005,-118.67852190927132,-24.624343673414536,14.682350745123385,10.743309958364414,-1.5176299437256995,-5.342440345336309,-4.013547752378579,.4709674045364808,-.7810139743795077,6.443125616997137,12.192718147122749,2.4223203414509316,-5.741545217717394,-3.8968760607089528,2.155394123220521,-.8023872820291849,-8.181320378809007,-3.542808009819187,-5.174936281185256,5.9283896106206555,-31.835009702890844,-150.8059487527208,92.12559859876468,-545.9720887451243,-693.8726501883154,3848.372765783648,10283.309463536396,92.69266164282541,-3127.727426075702,-825.0044509954823,15.045419751306099,76.33668890424428,12.15806700205125,30.2894087679111,-4.144769096332806,-10.712979752882784,2.217434802232056,11.674788778672612,-10.204720176161779,-25.690847574014658,-9.340374057072866,.7548369913992282,7.184295053694473,4.463834537040952,8.950623015251825,14.018208973927262,-4.749571520535188,-24.162065431216647,1.0691687945057857,24.33549147662474,4.430459051551981,-107.13271532249837,-303.84181615530116,13.866559817282113,577.9784269549884,-1566.1446188979132,-4024.534672295306,4592.969551993704,-7014.732560501017,-2384.0282361623326,6442.593062681757,1514.086888161532,-812.9290788882627,165.09457453510592,341.00518268197106,80.30266777803779,-24.587565667273314,-29.19752507488524,6.783530327444133,15.578970641484096,-7.160451380961001,-16.065001056209955,-5.34816844510703,-1.8368497479357557,-9.562856271406536,4.834205749446648,15.490166786860224,22.012718711107244,-9.236462137217643,-17.31831285132271,8.25141099796979,25.57618063745285,5.3964791524595155,-93.66044614887178,12.516743930999144,420.9405628095841,5.134250045599179,-900.7647430193394,16.760963274859485,-2247.4459538847777,-14687.463554763033,4213.876681413947,14411.746659687837,2304.77999376899,-1871.5173348139317,-118.60153876424121,252.7892465071493,32.498332906337396,-4.491880165894884,-1.2265587756841234,3.695581631630931,-8.403557604549233,-.33906699281557884,15.990606724229716,18.300357207839266,1.0038998822198608,-18.212758800809453,-1.529321284826482,1.5973907882613065,-1.4799701603458557,2.909480569030038,15.818788310912904,6.15429665870549,-15.193108572125247,-13.450507164884552,154.7003761456,632.8113455288485,137.3372759331867,-1374.1061578688873,4205.001741520538,13582.05952492878,1246.225452123387]}};function mosseFilter(e){var t,r,a,n,i,o,s,l,u,h;this.psr_prev=void 0,this.peak_prev=void 0;var c=!1;if(e||(e={}),void 0===e.drawResponse)e.drawResponse=!1;else if("CANVAS"!=e.drawResponse.tagName)e.drawResponse=!1;else var f=e.drawResponse.getContext("2d");void 0===e.psrThreshold&&(e.psrThreshold=10),void 0===e.eta&&(e.eta=.1),void 0===e.convertToGrayscale&&(e.convertToGrayscale=!0),this.load=function(e){l=(i=e.width)*(o=e.height),t=[e.real,e.imag],e.top&&e.bottom&&(c=!0,r=[e.top.real,e.top.imag],a=[e.bottom.real,e.bottom.imag]),(n=new FFT).init(e.width),"undefined"!=typeof Float64Array?(s=new Float64Array(l),h=new Float64Array(l)):(s=new Array(l),h=new Array(l));var f=document.createElement("canvas");f.setAttribute("width",i),f.setAttribute("height",o),u=f.getContext("2d")},this.init=function(e,h){l=(i=e)*(o=h),t=[[],[]],r=[[],[]],a=[[],[]];for(var f=0;f<l;f++)t[0][f]=0,t[1][f]=0,r[0][f]=0,r[1][f]=0,a[0][f]=0,a[1][f]=0;c=!0,(n=new FFT).init(e),s="undefined"!=typeof Float64Array?new Float64Array(l):new Array(l);var d=document.createElement("canvas");d.setAttribute("width",i),d.setAttribute("height",o),u=d.getContext("2d")},this.fft=function(e){for(var t=new Array(l),r=0;r<l;r++)t[r]=0;return n.fft2d(e,t),[e,t]},this.fft_inplace=function(e){for(var t=0;t<l;t++)s[t]=0;return n.fft2d(e,s),[e,s]},this.ifft=function(e,t){return n.ifft2d(e,t),e},this.psr=function(e){for(var t,r=0,a=0,n=[0,0],s=0,l=0;l<i;l++)for(var u=0;u<o;u++)r+=t=e[u*i+l],s+=t*t,a<t&&(a=t,n=[l,u]);for(l=-5;l<6;l++)for(u=-5;u<6;u++)Math.sqrt(l*l+u*u)<5&&(s-=(t=e[(n[1]+u)*i+(n[0]+l)])*t,r-=t);var h=r/e.length;return(a-h)/Math.sqrt(s/e.length-h*h)},this.getResponse=function(e){var r=d(e);r=v(r);var a=this.fft_inplace(r);return g(a,t),this.ifft(a[0],a[1])},this.track=function(n,s,g,y,b,x,k,w){if(!t)return console.log("Mosse-filter needs to be initialized or trained before starting tracking."),!1;if("VIDEO"==n.tagName||"IMG"==n.tagName){var C=Math.round(s/n.width*n.videoWidth),T=Math.round(g/n.height*n.videoHeight),S=Math.round(y/n.width*n.videoWidth),I=Math.round(b/n.height*n.videoHeight);u.drawImage(n,C,T,S,I,0,0,i,o)}else"CANVAS"==n.tagName&&u.drawImage(n,s,g,y,b,0,0,i,o);var A=u.getImageData(0,0,i,o).data;if(e.convertToGrayscale)for(var R=0;R<l;R++)h[R]=.3*A[4*R],h[R]+=.59*A[4*R+1],h[R]+=.11*A[4*R+2];else for(R=0;R<l;R++)h[R]=A[4*R];var N=d(h);N=v(N);var E=this.fft_inplace(N),F=p(E,t),M=this.ifft(F[0],F[1]),D=0,O=0,L=[0,0];if(k)for(var z,B,P,V=0;V<i;V++)for(var U=0;U<o;U++)B=V-i/2,P=U-o/2,z=Math.exp(-.5*(B*B+P*P)/128),M[U*i+V]*z>D&&(D=M[U*i+V]*z,L=[V,U]),M[U*i+V]<O&&(O=M[U*i+V]);else for(V=0;V<i;V++)for(U=0;U<o;U++)M[U*i+V]>D&&(D=M[U*i+V],L=[V,U]),M[U*i+V]<O&&(O=M[U*i+V]);if(this.peak_prev=D,e.drawResponse){var W=D-O,G=document.createElement("canvas");G.setAttribute("width",32),G.setAttribute("height",32);for(var H=G.getContext("2d"),j=H.createImageData(32,32),q=j.data,X=0;X<1024;X++){var K=M[X];K=Math.round((K+Math.abs(O))*(255/W)),q[4*X]=K,q[4*X+1]=K,q[4*X+2]=K,q[4*X+3]=255}H.putImageData(j,0,0),f.drawImage(G,s,g,y,y)}if(w&&(this.psr_prev=this.psr(M)),x)if(c){if(w)var Q=this.psr_prev;else Q=this.psr(M);if(Q>e.psrThreshold){var Y=[],J=L[0],Z=L[1];for(V=0;V<i;V++)for(U=0;U<o;U++)Y[U*i+V]=Math.exp(-((V-J)*(V-J)+(U-Z)*(U-Z))/4);Y=this.fft(Y);var $=_(E),ee=p(Y,$),te=p(E,$),re=e.eta;for(R=0;R<l;R++)r[0][R]=re*ee[0][R]+(1-re)*r[0][R],r[1][R]=re*ee[1][R]+(1-re)*r[1][R],a[0][R]=re*te[0][R]+(1-re)*a[0][R],a[1][R]=re*te[1][R]+(1-re)*a[1][R];t=m(r,a)}}else console.log("The loaded filter does not support updating. Ignoring parameter 'updateFilter'.");return L[0]=L[0]*(y/i),L[1]=L[1]*(y/o),!(D<0)&&L},this.train=function(n,s,f,g,y){if(!c)return console.log("The loaded filter does not support updating. Unable to do training."),!1;if("VIDEO"==n.tagName||"IMG"==n.tagName){var b=Math.round(s/n.width*n.videoWidth),x=Math.round(f/n.height*n.videoHeight),k=Math.round(g/n.width*n.videoWidth),w=Math.round(y/n.height*n.videoHeight);u.drawImage(n,b,x,k,w,0,0,i,o)}else"CANVAS"==n.tagName&&u.drawImage(n,s,f,g,y,0,0,i,o);for(var C=u.getImageData(0,0,i,o).data,T=0;T<l;T++)h[T]=.3*C[4*T],h[T]+=.59*C[4*T+1],h[T]+=.11*C[4*T+2];var S=d(h);S=v(S);for(var I=[],A=i/2,R=o/2,N=0;N<i;N++)for(var E=0;E<o;E++)I[E*i+N]=Math.exp(-((N-A)*(N-A)+(E-R)*(E-R))/4);I=this.fft(I);var F=this.fft(S),M=_(F),D=p(I,M),O=p(F,M),L=e.eta;for(T=0;T<l;T++)r[0][T]=L*D[0][T]+(1-L)*r[0][T],r[1][T]=L*D[1][T]+(1-L)*r[1][T],a[0][T]=L*O[0][T]+(1-L)*a[0][T],a[1][T]=L*O[1][T]+(1-L)*a[1][T];return t=m(r,a),!0};var d=function(e){for(var t=0;t<l;t++)e[t]=Math.log(e[t]+1);var r=0;for(t=0;t<l;t++)r+=e[t];for(r/=l,t=0;t<l;t++)e[t]-=r;var a=0;for(t=0;t<l;t++)a+=e[t]*e[t];if(0!==(a=Math.sqrt(a)))for(t=0;t<l;t++)e[t]/=a;return e},v=function(e){for(var t=0,r=0;r<i;r++)for(var a=0;a<o;a++){var n=Math.sin(Math.PI*r/(i-1)),s=Math.sin(Math.PI*a/(o-1));e[t]=Math.min(n,s)*e[t],t++}return e},p=function(e,t){for(var r=[new Array(i),new Array(i)],a=0;a<l;a++)r[0][a]=e[0][a]*t[0][a]-e[1][a]*t[1][a],r[1][a]=e[0][a]*t[1][a]+e[1][a]*t[0][a];return r},g=function(e,t){for(var r,a=0;a<l;a++)r=e[0][a]*t[1][a]+e[1][a]*t[0][a],e[0][a]=e[0][a]*t[0][a]-e[1][a]*t[1][a],e[1][a]=r},_=function(e){for(var t=[[],[]],r=0;r<l;r++)t[0][r]=e[0][r],t[1][r]=-e[1][r];return t},m=function(e,t){for(var r=[[],[]],a=0;a<l;a++)r[0][a]=(e[0][a]*t[0][a]+e[1][a]*t[1][a])/(t[0][a]*t[0][a]+t[1][a]*t[1][a]),r[1][a]=(e[1][a]*t[0][a]-e[0][a]*t[1][a])/(t[0][a]*t[0][a]+t[1][a]*t[1][a]);return r}}var mosse={mosseFilter:mosseFilter,filters:{left_eye_filter:left_eye_filter,right_eye_filter:right_eye_filter,mouth_filter:mouth_filter,nose_filter:nose_filter,face_filter:face_filter}},jsfeat_1=createCommonjsModule((function(e){var t=t||{REVISION:"ALPHA"};!function(e){var r=new Int32Array([-1,1,4,-1,4,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,8]),a=function(e){return 65280&e},n=function(e){return 255&e},i=function(e){return r[(65280&e)>>8]},o=function(e,t){this.size=-8&(e+7|0),void 0===t?this.buffer=new ArrayBuffer(this.size):(this.buffer=t,this.size=t.length),this.u8=new Uint8Array(this.buffer),this.i32=new Int32Array(this.buffer),this.f32=new Float32Array(this.buffer),this.f64=new Float64Array(this.buffer)},s=function(){function e(e,t,r,i){this.type=0|a(r),this.channel=0|n(r),this.cols=0|e,this.rows=0|t,void 0===i?this.allocate():(this.buffer=i,this.data=256&this.type?this.buffer.u8:512&this.type?this.buffer.i32:1024&this.type?this.buffer.f32:this.buffer.f64)}return e.prototype.allocate=function(){delete this.data,delete this.buffer,this.buffer=new o(this.cols*i(this.type)*this.channel*this.rows),this.data=256&this.type?this.buffer.u8:512&this.type?this.buffer.i32:1024&this.type?this.buffer.f32:this.buffer.f64},e.prototype.copy_to=function(e){for(var t=e.data,r=this.data,a=0,n=this.cols*this.rows*this.channel|0;a<n-4;a+=4)t[a]=r[a],t[a+1]=r[a+1],t[a+2]=r[a+2],t[a+3]=r[a+3];for(;a<n;++a)t[a]=r[a]},e.prototype.resize=function(e,t,r){void 0===r&&(r=this.channel),e*i(this.type)*r*t>this.buffer.size?(this.cols=e,this.rows=t,this.channel=r,this.allocate()):(this.cols=e,this.rows=t,this.channel=r)},e}(),l=function(){function e(e){this.levels=0|e,this.data=new Array(e),this.pyrdown=t.imgproc.pyrdown}return e.prototype.allocate=function(e,t,r){for(var a=this.levels;--a>=0;)this.data[a]=new s(e>>a,t>>a,r)},e.prototype.build=function(e,t){void 0===t&&(t=!0);var r=2,a=e,n=this.data[0];if(!t)for(var i=e.cols*e.rows;--i>=0;)n.data[i]=e.data[i];for(this.pyrdown(a,n=this.data[1]);r<this.levels;++r)this.pyrdown(a=n,n=this.data[r])},e}();e.U8_t=256,e.S32_t=512,e.F32_t=1024,e.S64_t=2048,e.F64_t=4096,e.C1_t=1,e.C2_t=2,e.C3_t=3,e.C4_t=4,e.U8C1_t=257,e.U8C3_t=259,e.U8C4_t=260,e.F32C1_t=1025,e.F32C2_t=1026,e.S32C1_t=513,e.S32C2_t=514,e.EPSILON=1.192092896e-7,e.FLT_MIN=1e-37,e.COLOR_RGBA2GRAY=0,e.COLOR_RGB2GRAY=1,e.COLOR_BGRA2GRAY=2,e.COLOR_BGR2GRAY=3,e.BOX_BLUR_NOSCALE=1,e.SVD_U_T=1,e.SVD_V_T=2,e.get_data_type=a,e.get_channel=n,e.get_data_type_size=i,e.data_t=o,e.matrix_t=s,e.pyramid_t=l,e.keypoint_t=function(e,t,r,a,n){void 0===e&&(e=0),void 0===t&&(t=0),void 0===r&&(r=0),void 0===a&&(a=0),void 0===n&&(n=-1),this.x=e,this.y=t,this.score=r,this.level=a,this.angle=n}}(t),function(e){var r,a,n,i=(n=function(){function e(e){this.next=null,this.data=new t.data_t(e),this.size=this.data.size,this.buffer=this.data.buffer,this.u8=this.data.u8,this.i32=this.data.i32,this.f32=this.data.f32,this.f64=this.data.f64}return e.prototype.resize=function(e){delete this.data,this.data=new t.data_t(e),this.size=this.data.size,this.buffer=this.data.buffer,this.u8=this.data.u8,this.i32=this.data.i32,this.f32=this.data.f32,this.f64=this.data.f64},e}(),{allocate:function(e,t){r=a=new n(t);for(var i=0;i<e;++i){var o=new n(t);a=a.next=o}},get_buffer:function(e){var t=r;return r=r.next,e>t.size&&t.resize(e),t},put_buffer:function(e){a=a.next=e}});e.cache=i,i.allocate(30,2560)}(t),function(e){var r,a=(r=new Int32Array(96),{get_gaussian_kernel:function(e,r,a,n){var i=0,o=0,s=0,l=0,u=0,h=0,c=t.cache.get_buffer(e<<2),f=c.f32;if(1==(1&e)&&e<=7&&r<=0)switch(e>>1){case 0:f[0]=1,h=1;break;case 1:f[0]=.25,f[1]=.5,f[2]=.25,h=1;break;case 2:f[0]=.0625,f[1]=.25,f[2]=.375,f[3]=.25,f[4]=.0625,h=1;break;case 3:f[0]=.03125,f[1]=.109375,f[2]=.21875,f[3]=.28125,f[4]=.21875,f[5]=.109375,f[6]=.03125,h=1}else for(u=-.5/((l=r>0?r:.3*(.5*(e-1)-1)+.8)*l);i<e;++i)o=i-.5*(e-1),s=Math.exp(u*o*o),f[i]=s,h+=s;if(n&t.U8_t)for(h=256/h,i=0;i<e;++i)a[i]=f[i]*h+.5|0;else for(h=1/h,i=0;i<e;++i)a[i]=f[i]*h;t.cache.put_buffer(c)},perspective_4point_transform:function(e,t,r,a,n,i,o,s,l,u,h,c,f,d,v,p,g){var _=t,m=u,y=o,b=_*m*y,x=v,k=_*x,w=m*k,C=h,T=_*C,S=i,I=r,A=d,R=I*A,N=R*S,E=A*S*C,F=A*y,M=A*C,D=m*y,O=x*m,L=x*S,z=C*S,B=1/(F-M-D+O-L+z),P=_*A,V=I*S,U=y*_,W=x*U,G=I*m,H=R*C,j=I*C*S,q=y*x*m,X=x*I,K=-(w-b+T*S-S*k-R*m+N-E+F*m)*B,Q=(b-w-P*y+P*C+N-m*V+L*m-E)*B,Y=_,J=(-C*k+W+G*y-R*y+H-j+L*C-q)*B,Z=(U*C-W-X*m+H-j+X*S+q-F*C)*B,$=I,ee=(-T+U+G-V+M-F-O+L)*B,te=(-k+T+R-G+L-z-F+D)*B,re=-((w=(m=c)*(k=(_=a)*(x=g)))-(b=_*m*(y=l))+(T=_*(C=f))*(S=s)-S*k-(R=(I=n)*(A=p))*m+(N=R*S)-(E=A*S*C)+(F=A*y)*m)*(B=1/(F-(M=A*C)-(D=m*y)+(O=x*m)-(L=x*S)+(z=C*S))),ae=(b-w-(P=_*A)*y+P*C+N-m*(V=I*S)+L*m-E)*B,ne=_,ie=(-C*k+(W=x*(U=y*_))+(G=I*m)*y-R*y+(H=R*C)-(j=I*C*S)+L*C-(q=y*x*m))*B,oe=(U*C-W-(X=x*I)*m+H-j+X*S+q-F*C)*B,se=I,le=(-T+U+G-V+M-F-O+L)*B,ue=(-k+T+R-G+L-z-F+D)*B,he=Y*ee;A=1/((y=K*Z)-(b=K*$)*te-(k=J*Q)+(w=Y*J)*te+(T=Q*ee)*$-he*Z);var ce=-J*te+Z*ee,fe=K-he;V=K*te-T;var de=b-w,ve=y-k,pe=(z=Y*te-Q)*A,ge=(U=-Q*$+Y*Z)*A,_e=e.data;_e[0]=re*(j=(m=Z-te*$)*A)+ae*((N=$*ee-J)*A)-ne*(ce*A),_e[1]=re*pe+ae*(fe*A)-ne*(V*A),_e[2]=-re*ge-ae*(de*A)+ne*(ve*A),_e[3]=ie*j+oe*(N*A)-se*(ce*A),_e[4]=ie*pe+oe*(fe*A)-se*(V*A),_e[5]=-ie*ge-oe*(de*A)+se*(ve*A),_e[6]=le*j+ue*(N*A)-ce*A,_e[7]=le*pe+ue*(fe*A)-V*A,_e[8]=-le*ge-ue*(de*A)+ve*A},qsort:function(e,t,a,n){var i,o,s,l,u=0,h=0,c=0,f=0,d=0,v=0,p=0,g=0,_=0,m=0,y=0,b=0,x=0,k=0,w=0,C=0,T=0,S=0,I=r;if(!(a-t+1<=1))for(I[0]=t,I[1]=a;u>=0;)for(h=I[u<<1],c=I[1+(u<<1)],u--;;){if((d=c-h+1)<=7){for(p=h+1;p<=c;p++)for(g=p;g>h&&n(e[g],e[g-1]);g--)i=e[g],e[g]=e[g-1],e[g-1]=i;break}for(S=0,m=h,b=c,k=h+(d>>1),d>40&&(l=e[T=h+((_=d>>3)<<1)],h=n(o=e[w=h],s=e[C=h+_])?n(s,l)?C:n(o,l)?T:w:n(l,s)?C:n(o,l)?w:T,l=e[T=k+_],k=n(o=e[w=k-_],s=e[C=k])?n(s,l)?C:n(o,l)?T:w:n(l,s)?C:n(o,l)?w:T,l=e[T=c],c=n(o=e[w=c-(_<<1)],s=e[C=c-_])?n(s,l)?C:n(o,l)?T:w:n(l,s)?C:n(o,l)?w:T),l=e[T=c],(k=n(o=e[w=h],s=e[C=k])?n(s,l)?C:n(o,l)?T:w:n(l,s)?C:n(o,l)?w:T)!=m&&(i=e[k],e[k]=e[m],e[m]=i,k=m),h=y=m+1,c=x=b,o=e[k];;){for(;h<=c&&!n(o,e[h]);)n(e[h],o)||(h>y&&(i=e[y],e[y]=e[h],e[h]=i),S=1,y++),h++;for(;h<=c&&!n(e[c],o);)n(o,e[c])||(c<x&&(i=e[x],e[x]=e[c],e[c]=i),S=1,x--),c--;if(h>c)break;i=e[h],e[h]=e[c],e[c]=i,S=1,h++,c--}if(0==S){for(c=b,p=(h=m)+1;p<=c;p++)for(g=p;g>h&&n(e[g],e[g-1]);g--)i=e[g],e[g]=e[g-1],e[g-1]=i;break}for(v=h-(d=Math.min(y-m,h-y))|0,f=0;f<d;++f,++v)i=e[m+f],e[m+f]=e[v],e[v]=i;for(v=b-(d=Math.min(b-x,x-c))+1|0,f=0;f<d;++f,++v)i=e[h+f],e[h+f]=e[v],e[v]=i;if(v=x-c,(d=h-y)>1)v>1?d>v?(I[++u<<1]=m,I[1+(u<<1)]=m+d-1,h=b-v+1,c=b):(I[++u<<1]=b-v+1,I[1+(u<<1)]=b,h=m,c=m+d-1):(h=m,c=m+d-1);else{if(!(v>1))break;h=b-v+1,c=b}}},median:function(e,t,r){for(var a,n=0,i=0,o=0,s=t+r>>1;;){if(r<=t)return e[s];if(r==t+1)return e[t]>e[r]&&(a=e[t],e[t]=e[r],e[r]=a),e[s];for(e[n=t+r>>1]>e[r]&&(a=e[n],e[n]=e[r],e[r]=a),e[t]>e[r]&&(a=e[t],e[t]=e[r],e[r]=a),e[n]>e[t]&&(a=e[n],e[n]=e[t],e[t]=a),a=e[n],e[n]=e[i=t+1],e[i]=a,o=r;;){do{++i}while(e[t]>e[i]);do{--o}while(e[o]>e[t]);if(o<i)break;a=e[i],e[i]=e[o],e[o]=a}a=e[t],e[t]=e[o],e[o]=a,o<=s?t=i:o>=s&&(r=o-1)}return 0}});e.math=a}(t),function(e){e.matmath={identity:function(e,t){void 0===t&&(t=1);for(var r=e.data,a=e.cols,n=a+1|0,i=e.rows*a,o=i;--i>=0;)r[i]=0;for(i=o,o=0;o<i;)r[o]=t,o+=n},transpose:function(e,t){for(var r=0,a=0,n=t.rows,i=t.cols,o=0,s=0,l=0,u=t.data,h=e.data;r<n;s+=1,o+=i,r++)for(l=s,a=0;a<i;l+=n,a++)h[l]=u[o+a]},multiply:function(e,t,r){for(var a=0,n=0,i=0,o=0,s=0,l=0,u=0,h=0,c=t.cols,f=t.rows,d=r.cols,v=t.data,p=r.data,g=e.data,_=0;a<f;o+=c,a++)for(u=0,n=0;n<d;h++,u++,n++){for(l=u,s=o,_=0,i=0;i<c;s++,l+=d,i++)_+=v[s]*p[l];g[h]=_}},multiply_ABt:function(e,t,r){for(var a=0,n=0,i=0,o=0,s=0,l=0,u=0,h=t.cols,c=t.rows,f=r.rows,d=t.data,v=r.data,p=e.data,g=0;a<c;o+=h,a++)for(l=0,n=0;n<f;u++,n++){for(s=o,g=0,i=0;i<h;s++,l++,i++)g+=d[s]*v[l];p[u]=g}},multiply_AtB:function(e,t,r){for(var a=0,n=0,i=0,o=0,s=0,l=0,u=0,h=0,c=t.cols,f=t.rows,d=r.cols,v=t.data,p=r.data,g=e.data,_=0;a<c;o++,a++)for(u=0,n=0;n<d;h++,u++,n++){for(l=u,s=o,_=0,i=0;i<f;s+=c,l+=d,i++)_+=v[s]*p[l];g[h]=_}},multiply_AAt:function(e,t){for(var r=0,a=0,n=0,i=0,o=0,s=0,l=0,u=0,h=0,c=t.cols,f=t.rows,d=t.data,v=e.data,p=0;r<f;i+=f+1,o=s,r++)for(u=i,h=i,l=o,a=r;a<f;u++,h+=f,a++){for(s=o,p=0,n=0;n<c;n++)p+=d[s++]*d[l++];v[u]=p,v[h]=p}},multiply_AtA:function(e,t){for(var r=0,a=0,n=0,i=0,o=0,s=0,l=0,u=0,h=0,c=t.cols,f=t.rows,d=t.data,v=e.data,p=0;r<c;l+=c,r++)for(i=r,u=h=l+r,a=r;a<c;u++,h+=c,a++){for(o=i,s=a,p=0,n=0;n<f;o+=c,s+=c,n++)p+=d[o]*d[s];v[u]=p,v[h]=p}},identity_3x3:function(e,t){void 0===t&&(t=1);var r=e.data;r[0]=r[4]=r[8]=t,r[1]=r[2]=r[3]=0,r[5]=r[6]=r[7]=0},invert_3x3:function(e,t){var r=e.data,a=t.data,n=r[4],i=r[8],o=r[5],s=r[7],l=r[0],u=l*n,h=l*o,c=r[3],f=r[1],d=c*f,v=r[2],p=c*v,g=r[6],_=g*f,m=g*v,y=1/(u*i-h*s-d*i+p*s+_*o-m*n);a[0]=(n*i-o*s)*y,a[1]=-(f*i-v*s)*y,a[2]=-(-f*o+v*n)*y,a[3]=-(c*i-o*g)*y,a[4]=(l*i-m)*y,a[5]=-(h-p)*y,a[6]=-(-c*s+n*g)*y,a[7]=-(l*s-_)*y,a[8]=(u-d)*y},multiply_3x3:function(e,t,r){var a=e.data,n=t.data,i=r.data,o=n[0],s=n[1],l=n[2],u=n[3],h=n[4],c=n[5],f=n[6],d=n[7],v=n[8],p=i[0],g=i[1],_=i[2],m=i[3],y=i[4],b=i[5],x=i[6],k=i[7],w=i[8];a[0]=o*p+s*m+l*x,a[1]=o*g+s*y+l*k,a[2]=o*_+s*b+l*w,a[3]=u*p+h*m+c*x,a[4]=u*g+h*y+c*k,a[5]=u*_+h*b+c*w,a[6]=f*p+d*m+v*x,a[7]=f*g+d*y+v*k,a[8]=f*_+d*b+v*w},mat3x3_determinant:function(e){var t=e.data;return t[0]*t[4]*t[8]-t[0]*t[5]*t[7]-t[3]*t[1]*t[8]+t[3]*t[2]*t[7]+t[6]*t[1]*t[5]-t[6]*t[2]*t[4]},determinant_3x3:function(e,t,r,a,n,i,o,s,l){return e*n*l-e*i*s-a*t*l+a*r*s+o*t*i-o*r*n}}}(t),function(e){var r,a,n=(r=function(e,t,r,a){a=e[t],e[t]=e[r],e[r]=a},a=function(e,t){return(e=Math.abs(e))>(t=Math.abs(t))?(t/=e,e*Math.sqrt(1+t*t)):t>0?(e/=t,t*Math.sqrt(1+e*e)):0},{lu_solve:function(e,a){var n,i,o,s,l=0,u=0,h=0,c=1,f=e.cols,d=e.data,v=a.data;for(l=0;l<f;l++){for(h=l,u=l+1;u<f;u++)Math.abs(d[u*f+l])>Math.abs(d[h*f+l])&&(h=u);if(Math.abs(d[h*f+l])<t.EPSILON)return 0;if(h!=l){for(u=l;u<f;u++)r(d,l*f+u,h*f+u,n);r(v,l,h,n),c=-c}for(o=-1/d[l*f+l],u=l+1;u<f;u++){for(i=d[u*f+l]*o,h=l+1;h<f;h++)d[u*f+h]+=i*d[l*f+h];v[u]+=i*v[l]}d[l*f+l]=-o}for(l=f-1;l>=0;l--){for(s=v[l],h=l+1;h<f;h++)s-=d[l*f+h]*v[h];v[l]=s*d[l*f+l]}return 1},cholesky_solve:function(e,t){var r,a,n=0,i=0,o=0,s=0,l=0,u=0,h=0,c=e.cols,f=e.data,d=t.data;for(n=0;n<c;n++)for(a=1,l=s=n*c,i=n;i<c;i++){for(r=f[l+n],o=0;o<n;o++)r-=f[o*c+n]*f[l+o];if(i==n){if(f[l+n]=r,0==r)return 0;a=1/r}else f[s+i]=r,f[l+n]=r*a;l+=c}for(s=0,u=0;u<c;u++){for(r=d[u],h=0;h<u;h++)r-=f[s+h]*d[h];d[u]=r,s+=c}for(s=0,u=0;u<c;u++)d[u]/=f[s+u],s+=c;for(u=c-1;u>=0;u--){for(r=d[u],s=(h=u+1)*c;h<c;h++)r-=f[s+u]*d[h],s+=c;d[u]=r}return 1},svd_decompose:function(e,n,i,o,s){void 0===s&&(s=0);var l=0,u=0,h=e.rows,c=e.cols,f=h,d=c,v=e.type|t.C1_t;f<d&&(l=1,u=f,f=d,d=u);var p=t.cache.get_buffer(f*f<<3),g=t.cache.get_buffer(d<<3),_=t.cache.get_buffer(d*d<<3),m=new t.matrix_t(f,f,v,p.data),y=new t.matrix_t(1,d,v,g.data),b=new t.matrix_t(d,d,v,_.data);if(0==l)t.matmath.transpose(m,e);else{for(u=0;u<c*h;u++)m.data[u]=e.data[u];for(;u<d*f;u++)m.data[u]=0}if(function(e,n,i,o,s,l,u,h){for(var c=2*t.EPSILON,f=t.FLT_MIN,d=0,v=0,p=0,g=0,_=Math.max(l,30),m=0,y=0,b=0,x=0,k=0,w=0,C=0,T=0,S=0,I=0,A=0,R=0,N=0,E=0,F=0,M=0,D=4660,O=0,L=0,z=t.cache.get_buffer(u<<3),B=z.f64;d<u;d++){for(p=0,A=0;p<l;p++)A+=(T=e[d*n+p])*T;if(B[d]=A,o){for(p=0;p<u;p++)o[d*s+p]=0;o[d*s+d]=1}}for(;g<_;g++){for(k=0,d=0;d<u-1;d++)for(v=d+1;v<u;v++){for(E=B[d],F=0,M=B[v],p=2,F+=e[m=d*n|0]*e[y=v*n|0],F+=e[m+1]*e[y+1];p<l;p++)F+=e[m+p]*e[y+p];if(!(Math.abs(F)<=c*Math.sqrt(E*M))){for(N=a(F*=2,R=E-M),R<0?w=F/(N*(C=Math.sqrt(.5*(N-R)/N))*2):C=F/(N*(w=Math.sqrt((N+R)/(2*N)))*2),E=0,M=0,p=2,I=-C*e[m]+w*e[y],e[m]=S=w*e[m]+C*e[y],e[y]=I,E+=S*S,M+=I*I,I=-C*e[m+1]+w*e[y+1],e[m+1]=S=w*e[m+1]+C*e[y+1],e[y+1]=I,E+=S*S,M+=I*I;p<l;p++)I=-C*e[m+p]+w*e[y+p],e[m+p]=S=w*e[m+p]+C*e[y+p],e[y+p]=I,E+=S*S,M+=I*I;if(B[d]=E,B[v]=M,k=1,o)for(p=2,I=-C*o[b=d*s|0]+w*o[x=v*s|0],o[b]=S=w*o[b]+C*o[x],o[x]=I,I=-C*o[b+1]+w*o[x+1],o[b+1]=S=w*o[b+1]+C*o[x+1],o[x+1]=I;p<u;p++)I=-C*o[b+p]+w*o[x+p],o[b+p]=S=w*o[b+p]+C*o[x+p],o[x+p]=I}}if(0==k)break}for(d=0;d<u;d++){for(p=0,A=0;p<l;p++)A+=(T=e[d*n+p])*T;B[d]=Math.sqrt(A)}for(d=0;d<u-1;d++){for(v=d,p=d+1;p<u;p++)B[v]<B[p]&&(v=p);if(d!=v&&(r(B,d,v,A),o)){for(p=0;p<l;p++)r(e,d*n+p,v*n+p,T);for(p=0;p<u;p++)r(o,d*s+p,v*s+p,T)}}for(d=0;d<u;d++)i[d]=B[d];if(o){for(d=0;d<h;d++){for(A=d<u?B[d]:0;A<=f;){for(O=1/l,p=0;p<l;p++)e[d*n+p]=0!=(256&(D=214013*D+2531011)>>16)?O:-O;for(g=0;g<2;g++)for(v=0;v<d;v++){for(A=0,p=0;p<l;p++)A+=e[d*n+p]*e[v*n+p];for(L=0,p=0;p<l;p++)e[d*n+p]=T=e[d*n+p]-A*e[v*n+p],L+=Math.abs(T);for(L=L?1/L:0,p=0;p<l;p++)e[d*n+p]*=L}for(A=0,p=0;p<l;p++)A+=(T=e[d*n+p])*T;A=Math.sqrt(A)}for(C=1/A,p=0;p<l;p++)e[d*n+p]*=C}t.cache.put_buffer(z)}else t.cache.put_buffer(z)}(m.data,f,y.data,b.data,d,f,d,f),n){for(u=0;u<d;u++)n.data[u]=y.data[u];for(;u<c;u++)n.data[u]=0}if(0==l){if(i&&s&t.SVD_U_T)for(u=f*f;--u>=0;)i.data[u]=m.data[u];else i&&t.matmath.transpose(i,m);if(o&&s&t.SVD_V_T)for(u=d*d;--u>=0;)o.data[u]=b.data[u];else o&&t.matmath.transpose(o,b)}else{if(i&&s&t.SVD_U_T)for(u=d*d;--u>=0;)i.data[u]=b.data[u];else i&&t.matmath.transpose(i,b);if(o&&s&t.SVD_V_T)for(u=f*f;--u>=0;)o.data[u]=m.data[u];else o&&t.matmath.transpose(o,m)}t.cache.put_buffer(p),t.cache.put_buffer(g),t.cache.put_buffer(_)},svd_solve:function(e,r,a){var n,i=0,o=0,s=0,l=0,u=0,h=e.rows,c=e.cols,f=0,d=0,v=e.type|t.C1_t,p=t.cache.get_buffer(h*h<<3),g=t.cache.get_buffer(c<<3),_=t.cache.get_buffer(c*c<<3),m=new t.matrix_t(h,h,v,p.data),y=new t.matrix_t(1,c,v,g.data),b=new t.matrix_t(c,c,v,_.data),x=a.data,k=m.data,w=y.data,C=b.data;for(this.svd_decompose(e,y,m,b,0),n=t.EPSILON*w[0]*c;i<c;i++,u+=c){for(d=0,o=0;o<c;o++)if(w[o]>n){for(s=0,f=0,l=0;s<h;s++,l+=c)f+=k[l+o]*x[s];d+=f*C[u+o]/w[o]}r.data[i]=d}t.cache.put_buffer(p),t.cache.put_buffer(g),t.cache.put_buffer(_)},svd_invert:function(e,r){var a,n=0,i=0,o=0,s=0,l=0,u=0,h=r.rows,c=r.cols,f=0,d=r.type|t.C1_t,v=t.cache.get_buffer(h*h<<3),p=t.cache.get_buffer(c<<3),g=t.cache.get_buffer(c*c<<3),_=new t.matrix_t(h,h,d,v.data),m=new t.matrix_t(1,c,d,p.data),y=new t.matrix_t(c,c,d,g.data),b=e.data,x=_.data,k=m.data,w=y.data;for(this.svd_decompose(r,m,_,y,0),a=t.EPSILON*k[0]*c;n<c;n++,l+=c)for(i=0,s=0;i<h;i++,u++){for(o=0,f=0;o<c;o++,s++)k[o]>a&&(f+=w[l+o]*x[s]/k[o]);b[u]=f}t.cache.put_buffer(v),t.cache.put_buffer(p),t.cache.put_buffer(g)},eigenVV:function(e,n,i){for(var o=e.cols,s=o*o,l=e.type|t.C1_t,u=t.cache.get_buffer(o*o<<3),h=t.cache.get_buffer(o<<3),c=new t.matrix_t(o,o,l,u.data),f=new t.matrix_t(1,o,l,h.data);--s>=0;)c.data[s]=e.data[s];if(function(e,n,i,o,s,l){var u=t.EPSILON,h=0,c=0,f=0,d=0,v=0,p=0,g=0,_=0,m=0,y=l*l*30,b=0,x=0,k=0,w=0,C=0,T=0,S=0,I=0,A=0,R=t.cache.get_buffer(l<<2),N=t.cache.get_buffer(l<<2),E=R.i32,F=N.i32;if(o)for(;h<l;h++){for(f=h*s,c=0;c<l;c++)o[f+c]=0;o[f+h]=1}for(f=0;f<l;f++){if(i[f]=e[(n+1)*f],f<l-1){for(d=f+1,b=Math.abs(e[n*f+d]),h=f+2;h<l;h++)b<(x=Math.abs(e[n*f+h]))&&(b=x,d=h);E[f]=d}if(f>0){for(d=0,b=Math.abs(e[f]),h=1;h<f;h++)b<(x=Math.abs(e[n*h+f]))&&(b=x,d=h);F[f]=d}}if(l>1)for(;m<y;m++){for(f=0,b=Math.abs(e[E[0]]),h=1;h<l-1;h++)b<(x=Math.abs(e[n*h+E[h]]))&&(b=x,f=h);for(v=E[f],h=1;h<l;h++)b<(x=Math.abs(e[n*F[h]+h]))&&(b=x,f=F[h],v=h);if(k=e[n*f+v],Math.abs(k)<=u)break;for(w=.5*(i[v]-i[f]),S=(C=Math.abs(w)+a(k,w))/(T=a(k,C)),T=k/T,C=k/C*k,w<0&&(T=-T,C=-C),e[n*f+v]=0,i[f]-=C,i[v]+=C,h=0;h<f;h++)e[g=n*h+f]=(I=e[g])*S-(A=e[_=n*h+v])*T,e[_]=I*T+A*S;for(h=f+1;h<v;h++)e[g=n*f+h]=(I=e[g])*S-(A=e[_=n*h+v])*T,e[_]=I*T+A*S;for(g=n*f+(h=v+1),_=n*v+h;h<l;h++,g++,_++)e[g]=(I=e[g])*S-(A=e[_])*T,e[_]=I*T+A*S;if(o)for(g=s*f,_=s*v,h=0;h<l;h++,g++,_++)o[g]=(I=o[g])*S-(A=o[_])*T,o[_]=I*T+A*S;for(c=0;c<2;c++){if((p=0==c?f:v)<l-1){for(d=p+1,b=Math.abs(e[n*p+d]),h=p+2;h<l;h++)b<(x=Math.abs(e[n*p+h]))&&(b=x,d=h);E[p]=d}if(p>0){for(d=0,b=Math.abs(e[p]),h=1;h<p;h++)b<(x=Math.abs(e[n*h+p]))&&(b=x,d=h);F[p]=d}}}for(f=0;f<l-1;f++){for(d=f,h=f+1;h<l;h++)i[d]<i[h]&&(d=h);if(f!=d&&(r(i,d,f,b),o))for(h=0;h<l;h++)r(o,s*d+h,s*f+h,b)}t.cache.put_buffer(R),t.cache.put_buffer(N)}(c.data,o,f.data,n?n.data:null,o,o),i)for(;--o>=0;)i.data[o]=f.data[o];t.cache.put_buffer(u),t.cache.put_buffer(h)}});e.linalg=n}(t),function(e){var r,a,n,i,o,s,l,u,h,c,f=(r=function(e){return e*e},a=new t.matrix_t(3,3,t.F32_t|t.C1_t),n=new t.matrix_t(3,3,t.F32_t|t.C1_t),i=new t.matrix_t(6,6,t.F32_t|t.C1_t),o=new t.matrix_t(6,1,t.F32_t|t.C1_t),s=function(){function e(){}return e.prototype.run=function(e,r,s,l){var u,h,c=0,f=0,d=s.type|t.C1_t,v=s.data,p=a.data,g=n.data,_=0,m=0;!function(e,t,r,a,n){for(var i,o,s=0,l=0,u=0,h=0,c=0,f=0,d=0,v=0,p=0;s<n;++s)l+=e[s].x,u+=e[s].y,c+=t[s].x,f+=t[s].y;for(l/=n,u/=n,c/=n,f/=n,s=0;s<n;++s)v=e[s].x-l,p=e[s].y-u,h+=Math.sqrt(v*v+p*p),v=t[s].x-c,p=t[s].y-f,d+=Math.sqrt(v*v+p*p);h/=n,d/=n,i=Math.SQRT2/h,o=Math.SQRT2/d,r[0]=r[4]=i,r[2]=-l*i,r[5]=-u*i,r[1]=r[3]=r[6]=r[7]=0,r[8]=1,a[0]=a[4]=o,a[2]=-c*o,a[5]=-f*o,a[1]=a[3]=a[6]=a[7]=0,a[8]=1}(e,r,p,g,l);for(var y=t.cache.get_buffer(2*l*6<<3),b=t.cache.get_buffer(2*l<<3),x=new t.matrix_t(6,2*l,d,y.data),k=new t.matrix_t(1,2*l,d,b.data),w=x.data,C=k.data;c<l;++c)h=r[c],m=p[3]*(u=e[c]).x+p[4]*u.y+p[5],w[f=2*c*6]=_=p[0]*u.x+p[1]*u.y+p[2],w[f+1]=m,w[f+2]=1,w[f+3]=0,w[f+4]=0,w[f+5]=0,w[f+=6]=0,w[f+1]=0,w[f+2]=0,w[f+3]=_,w[f+4]=m,w[f+5]=1,C[c<<1]=g[0]*h.x+g[1]*h.y+g[2],C[1+(c<<1)]=g[3]*h.x+g[4]*h.y+g[5];return t.matmath.multiply_AtA(i,x),t.matmath.multiply_AtB(o,x,k),t.linalg.lu_solve(i,o),v[0]=o.data[0],v[1]=o.data[1],v[2]=o.data[2],v[3]=o.data[3],v[4]=o.data[4],v[5]=o.data[5],v[6]=0,v[7]=0,v[8]=1,t.matmath.invert_3x3(n,n),t.matmath.multiply_3x3(s,n,s),t.matmath.multiply_3x3(s,s,a),t.cache.put_buffer(y),t.cache.put_buffer(b),1},e.prototype.error=function(e,t,a,n,i){for(var o,s,l=0,u=a.data;l<i;++l)n[l]=r((s=t[l]).x-u[0]*(o=e[l]).x-u[1]*o.y-u[2])+r(s.y-u[3]*o.x-u[4]*o.y-u[5])},e.prototype.check_subset=function(e,t,r){return!0},e}(),l=new t.matrix_t(9,9,t.F32_t|t.C1_t),u=new t.matrix_t(9,9,t.F32_t|t.C1_t),{affine2d:s,homography2d:function(){function e(){}return e.prototype.run=function(e,r,i,o){for(var s=0,h=0,c=i.data,f=a.data,d=n.data,v=l.data,p=u.data,g=0,_=0,m=0,y=0,b=0,x=0,k=0,w=0,C=0,T=0,S=0,I=0;s<o;++s)k+=r[s].x,w+=r[s].y,S+=e[s].x,I+=e[s].y;for(k/=o,w/=o,S/=o,I/=o,s=0;s<o;++s)b+=Math.abs(r[s].x-k),x+=Math.abs(r[s].y-w),C+=Math.abs(e[s].x-S),T+=Math.abs(e[s].y-I);if(Math.abs(b)<t.EPSILON||Math.abs(x)<t.EPSILON||Math.abs(C)<t.EPSILON||Math.abs(T)<t.EPSILON)return 0;for(b=o/b,x=o/x,T=o/T,f[0]=C=o/C,f[1]=0,f[2]=-S*C,f[3]=0,f[4]=T,f[5]=-I*T,f[6]=0,f[7]=0,f[8]=1,d[0]=1/b,d[1]=0,d[2]=k,d[3]=0,d[4]=1/x,d[5]=w,d[6]=0,d[7]=0,d[8]=1,s=81;--s>=0;)v[s]=0;for(s=0;s<o;++s)g=(r[s].x-k)*b,_=(r[s].y-w)*x,y=(e[s].y-I)*T,v[0]+=(m=(e[s].x-S)*C)*m,v[1]+=m*y,v[2]+=m,v[6]+=m*-g*m,v[7]+=m*-g*y,v[8]+=m*-g,v[10]+=y*y,v[11]+=y,v[15]+=y*-g*m,v[16]+=y*-g*y,v[17]+=y*-g,v[20]+=1,v[24]+=-g*m,v[25]+=-g*y,v[26]+=-g,v[30]+=m*m,v[31]+=m*y,v[32]+=m,v[33]+=m*-_*m,v[34]+=m*-_*y,v[35]+=m*-_,v[40]+=y*y,v[41]+=y,v[42]+=y*-_*m,v[43]+=y*-_*y,v[44]+=y*-_,v[50]+=1,v[51]+=-_*m,v[52]+=-_*y,v[53]+=-_,v[60]+=-g*m*-g*m+-_*m*-_*m,v[61]+=-g*m*-g*y+-_*m*-_*y,v[62]+=-g*m*-g+-_*m*-_,v[70]+=-g*y*-g*y+-_*y*-_*y,v[71]+=-g*y*-g+-_*y*-_,v[80]+=-g*-g+-_*-_;for(s=0;s<9;++s)for(h=0;h<s;++h)v[9*s+h]=v[9*h+s];return t.linalg.eigenVV(l,u),c[0]=p[72],c[1]=p[73],c[2]=p[74],c[3]=p[75],c[4]=p[76],c[5]=p[77],c[6]=p[78],c[7]=p[79],c[8]=p[80],t.matmath.multiply_3x3(i,n,i),t.matmath.multiply_3x3(i,i,a),c[0]*=g=1/c[8],c[1]*=g,c[2]*=g,c[3]*=g,c[4]*=g,c[5]*=g,c[6]*=g,c[7]*=g,c[8]=1,1},e.prototype.error=function(e,t,r,a,n){for(var i,o,s=0,l=0,u=0,h=0,c=r.data;s<n;++s)a[s]=(u=(c[0]*(i=e[s]).x+c[1]*i.y+c[2])*(l=1/(c[6]*i.x+c[7]*i.y+1))-(o=t[s]).x)*u+(h=(c[3]*i.x+c[4]*i.y+c[5])*l-o.y)*h},e.prototype.check_subset=function(e,r,a){if(4==a){var n=0,i=e[0],o=e[1],s=e[2],l=e[3],u=r[0],h=r[1],c=r[2],f=r[3],d=i.x,v=i.y,p=o.x,g=o.y,_=s.x,m=s.y,y=u.x,b=u.y,x=h.x,k=h.y,w=c.x,C=c.y,T=t.matmath.determinant_3x3(d,v,1,p,g,1,_,m,1),S=t.matmath.determinant_3x3(y,b,1,x,k,1,w,C,1);if(T*S<0&&n++,y=h.x,b=h.y,x=c.x,k=c.y,w=f.x,C=f.y,(T=t.matmath.determinant_3x3(d=o.x,v=o.y,1,p=s.x,g=s.y,1,_=l.x,m=l.y,1))*(S=t.matmath.determinant_3x3(y,b,1,x,k,1,w,C,1))<0&&n++,y=u.x,b=u.y,x=c.x,k=c.y,w=f.x,C=f.y,(T=t.matmath.determinant_3x3(d=i.x,v=i.y,1,p=s.x,g=s.y,1,_=l.x,m=l.y,1))*(S=t.matmath.determinant_3x3(y,b,1,x,k,1,w,C,1))<0&&n++,y=u.x,b=u.y,x=h.x,k=h.y,w=f.x,C=f.y,(T=t.matmath.determinant_3x3(d=i.x,v=i.y,1,p=o.x,g=o.y,1,_=l.x,m=l.y,1))*(S=t.matmath.determinant_3x3(y,b,1,x,k,1,w,C,1))<0&&n++,0!=n&&4!=n)return!1}return!0},e}()}),d=function(){function e(e,t,r,a){void 0===e&&(e=0),void 0===t&&(t=.5),void 0===r&&(r=.5),void 0===a&&(a=.99),this.size=e,this.thresh=t,this.eps=r,this.prob=a}return e.prototype.update_iters=function(e,t){var r=Math.log(1-this.prob),a=Math.log(1-Math.pow(1-e,this.size));return 0|(a>=0||-r>=t*-a?t:Math.round(r/a))},e}(),v=(h=function(e,t,r,a,n,i,o){for(var s=[],l=0,u=0,h=0,c=0,f=!1;h<1e3;++h){for(l=0;l<a&&h<1e3;){for(f=!1,c=0;!f;)for(f=!0,c=s[l]=0|Math.floor(Math.random()*n),u=0;u<l;++u)if(c==s[u]){f=!1;break}i[l]=t[c],o[l]=r[c],e.check_subset(i,o,l+1)?++l:h++}break}return l==a&&h<1e3},c=function(e,t,r,a,n,i,o,s){var l=0,u=0,h=0,c=i*i;for(e.error(r,a,t,o,n);u<n;++u)s[u]=h=o[u]<=c,l+=h;return l},{ransac:function(e,r,a,n,i,o,s,l){if(void 0===l&&(l=1e3),i<e.size)return!1;var u=e.size,f=l,d=0,v=!1,p=[],g=[],_=o.cols,m=o.rows,y=o.type|t.C1_t,b=t.cache.get_buffer(_*m<<3),x=t.cache.get_buffer(i),k=t.cache.get_buffer(i<<2),w=new t.matrix_t(_,m,y,b.data),C=new t.matrix_t(i,1,t.U8C1_t,x.data),T=-1,S=0,I=k.f32;if(i==u){if(r.run(a,n,w,i)<=0)return t.cache.put_buffer(b),t.cache.put_buffer(x),t.cache.put_buffer(k),!1;if(w.copy_to(o),s)for(;--i>=0;)s.data[i]=1;return t.cache.put_buffer(b),t.cache.put_buffer(x),t.cache.put_buffer(k),!0}for(;d<f;++d){if(!h(r,a,n,u,i,p,g)){if(0==d)return t.cache.put_buffer(b),t.cache.put_buffer(x),t.cache.put_buffer(k),!1;break}r.run(p,g,w,u)<=0||(S=c(r,w,a,n,i,e.thresh,I,C.data))>Math.max(T,u-1)&&(w.copy_to(o),T=S,s&&C.copy_to(s),f=e.update_iters((i-S)/i,f),v=!0)}return t.cache.put_buffer(b),t.cache.put_buffer(x),t.cache.put_buffer(k),v},lmeds:function(e,r,a,n,i,o,s,l){if(void 0===l&&(l=1e3),i<e.size)return!1;var u=e.size,f=l,d=0,v=!1,p=[],g=[],_=o.cols,m=o.rows,y=o.type|t.C1_t,b=t.cache.get_buffer(_*m<<3),x=t.cache.get_buffer(i),k=t.cache.get_buffer(i<<2),w=new t.matrix_t(_,m,y,b.data),C=new t.matrix_t(i,1,t.U8_t|t.C1_t,x.data),T=0,S=k.f32,I=1e9,A=0,R=0;if(e.eps=.45,f=e.update_iters(e.eps,f),i==u){if(r.run(a,n,w,i)<=0)return t.cache.put_buffer(b),t.cache.put_buffer(x),t.cache.put_buffer(k),!1;if(w.copy_to(o),s)for(;--i>=0;)s.data[i]=1;return t.cache.put_buffer(b),t.cache.put_buffer(x),t.cache.put_buffer(k),!0}for(;d<f;++d){if(!h(r,a,n,u,i,p,g)){if(0==d)return t.cache.put_buffer(b),t.cache.put_buffer(x),t.cache.put_buffer(k),!1;break}r.run(p,g,w,u)<=0||(r.error(a,n,w,S,i),(R=t.math.median(S,0,i-1))<I&&(I=R,w.copy_to(o),v=!0))}return v&&(A=2.5*1.4826*(1+5/(i-u))*Math.sqrt(I),A=Math.max(A,.001),T=c(r,o,a,n,i,A,S,C.data),s&&C.copy_to(s),v=T>=u),t.cache.put_buffer(b),t.cache.put_buffer(x),t.cache.put_buffer(k),v}});e.ransac_params_t=d,e.motion_model=f,e.motion_estimator=v}(t),function(e){e.imgproc={grayscale:function(e,r,a,n,i){void 0===i&&(i=t.COLOR_RGBA2GRAY);var o=0,s=0,l=0,u=0,h=0,c=0,f=4899,d=1868,v=4;i!=t.COLOR_BGRA2GRAY&&i!=t.COLOR_BGR2GRAY||(f=1868,d=4899),i!=t.COLOR_RGB2GRAY&&i!=t.COLOR_BGR2GRAY||(v=3);var p=v<<1,g=3*v|0;n.resize(r,a,1);var _=n.data;for(s=0;s<a;++s,u+=r,l+=r*v){for(o=0,h=l,c=u;o<=r-4;o+=4,h+=v<<2,c+=4)_[c]=e[h]*f+9617*e[h+1]+e[h+2]*d+8192>>14,_[c+1]=e[h+v]*f+9617*e[h+v+1]+e[h+v+2]*d+8192>>14,_[c+2]=e[h+p]*f+9617*e[h+p+1]+e[h+p+2]*d+8192>>14,_[c+3]=e[h+g]*f+9617*e[h+g+1]+e[h+g+2]*d+8192>>14;for(;o<r;++o,++c,h+=v)_[c]=e[h]*f+9617*e[h+1]+e[h+2]*d+8192>>14}},resample:function(e,r,a,n){var i=e.rows,o=e.cols;i>n&&o>a&&(r.resize(a,n,e.channel),e.type&t.U8_t&&r.type&t.U8_t&&i*o/(n*a)<256?function(e,r,a,n){for(var i=0,o=e.channel,s=e.cols,l=e.rows,u=e.data,h=r.data,c=s/a,f=l/n,d=c*f*65536|0,v=0,p=0,g=0,_=0,m=0,y=0,b=0,x=0,k=0,w=0,C=0,T=0,S=0,I=0,A=0,R=0,N=t.cache.get_buffer(a*o<<2),E=t.cache.get_buffer(a*o<<2),F=t.cache.get_buffer(2*s*3<<2),M=N.i32,D=E.i32,O=F.i32;v<a;v++){for(m=1+(k=v*c)-1e-6|0,y=0|(w=k+c),m=Math.min(m,s-1),y=Math.min(y,s-1),m>k&&(O[x++]=v*o|0,O[x++]=(m-1)*o|0,O[x++]=256*(m-k)|0,i++),g=m;g<y;g++)i++,O[x++]=v*o|0,O[x++]=g*o|0,O[x++]=256;w-y>.001&&(i++,O[x++]=v*o|0,O[x++]=y*o|0,O[x++]=256*(w-y)|0)}for(v=0;v<a*o;v++)M[v]=D[v]=0;for(p=0,_=0;_<l;_++){for(C=s*_,x=0;x<i;x++)for(S=O[3*x],m=O[3*x+1],I=O[3*x+2],b=0;b<o;b++)M[S+b]+=u[C+m+b]*I;if((p+1)*f<=_+1||_==l-1){if(R=256-(A=256*Math.max(_+1-(p+1)*f,0)|0),T=a*p,A<=0)for(v=0;v<a*o;v++)h[T+v]=Math.min(Math.max((D[v]+256*M[v])/d,0),255),D[v]=M[v]=0;else for(v=0;v<a*o;v++)h[T+v]=Math.min(Math.max((D[v]+M[v]*R)/d,0),255),D[v]=M[v]*A,M[v]=0;p++}else for(v=0;v<a*o;v++)D[v]+=256*M[v],M[v]=0}t.cache.put_buffer(E),t.cache.put_buffer(N),t.cache.put_buffer(F)}(e,r,a,n):function(e,r,a,n){for(var i=0,o=e.channel,s=e.cols,l=e.rows,u=e.data,h=r.data,c=s/a,f=l/n,d=1/(c*f),v=0,p=0,g=0,_=0,m=0,y=0,b=0,x=0,k=0,w=0,C=0,T=0,S=0,I=0,A=0,R=0,N=t.cache.get_buffer(a*o<<2),E=t.cache.get_buffer(a*o<<2),F=t.cache.get_buffer(2*s*3<<2),M=N.f32,D=E.f32,O=F.f32;v<a;v++){for(m=1+(k=v*c)-1e-6|0,y=0|(w=k+c),m=Math.min(m,s-1),y=Math.min(y,s-1),m>k&&(i++,O[x++]=(m-1)*o|0,O[x++]=v*o|0,O[x++]=(m-k)*d),g=m;g<y;g++)i++,O[x++]=g*o|0,O[x++]=v*o|0,O[x++]=d;w-y>.001&&(i++,O[x++]=y*o|0,O[x++]=v*o|0,O[x++]=(w-y)*d)}for(v=0;v<a*o;v++)M[v]=D[v]=0;for(p=0,_=0;_<l;_++){for(C=s*_,x=0;x<i;x++)for(m=0|O[3*x],S=0|O[3*x+1],I=O[3*x+2],b=0;b<o;b++)M[S+b]+=u[C+m+b]*I;if((p+1)*f<=_+1||_==l-1){if(R=1-(A=Math.max(_+1-(p+1)*f,0)),T=a*p,Math.abs(A)<.001)for(v=0;v<a*o;v++)h[T+v]=D[v]+M[v],D[v]=M[v]=0;else for(v=0;v<a*o;v++)h[T+v]=D[v]+M[v]*R,D[v]=M[v]*A,M[v]=0;p++}else for(v=0;v<a*o;v++)D[v]+=M[v],M[v]=0}t.cache.put_buffer(E),t.cache.put_buffer(N),t.cache.put_buffer(F)}(e,r,a,n))},box_blur_gray:function(e,r,a,n){void 0===n&&(n=0);var i=e.cols,o=e.rows,s=o<<1,l=i<<1,u=0,h=0,c=0,f=0,d=1+(a<<1)|0,v=a+1|0,p=v+1|0,g=n&t.BOX_BLUR_NOSCALE?1:1/(d*d),_=t.cache.get_buffer(i*o<<2),m=0,y=0,b=0,x=0,k=0,w=_.i32,C=e.data,T=0;for(r.resize(i,o,e.channel),c=0;c<o;++c){for(y=c,m=v*C[b],u=b+1|0,f=b+a|0;u<=f;++u)m+=C[u];for(x=b+v|0,T=C[k=b],h=0;h<a;++h,y+=o)w[y]=m,m+=C[x]-T,x++;for(;h<i-p;h+=2,y+=s)w[y]=m,w[y+o]=m+=C[x]-C[k],m+=C[x+1]-C[k+1],x+=2,k+=2;for(;h<i-v;++h,y+=o)w[y]=m,m+=C[x]-C[k],x++,k++;for(T=C[x-1];h<i;++h,y+=o)w[y]=m,m+=T-C[k],k++;b+=i}if(b=0,C=r.data,1==g)for(c=0;c<i;++c){for(y=c,m=v*w[b],u=b+1|0,f=b+a|0;u<=f;++u)m+=w[u];for(x=b+v,T=w[k=b],h=0;h<a;++h,y+=i)C[y]=m,m+=w[x]-T,x++;for(;h<o-p;h+=2,y+=l)C[y]=m,C[y+i]=m+=w[x]-w[k],m+=w[x+1]-w[k+1],x+=2,k+=2;for(;h<o-v;++h,y+=i)C[y]=m,m+=w[x]-w[k],x++,k++;for(T=w[x-1];h<o;++h,y+=i)C[y]=m,m+=T-w[k],k++;b+=o}else for(c=0;c<i;++c){for(y=c,m=v*w[b],u=b+1|0,f=b+a|0;u<=f;++u)m+=w[u];for(x=b+v,T=w[k=b],h=0;h<a;++h,y+=i)C[y]=m*g,m+=w[x]-T,x++;for(;h<o-p;h+=2,y+=l)C[y]=m*g,C[y+i]=(m+=w[x]-w[k])*g,m+=w[x+1]-w[k+1],x+=2,k+=2;for(;h<o-v;++h,y+=i)C[y]=m*g,m+=w[x]-w[k],x++,k++;for(T=w[x-1];h<o;++h,y+=i)C[y]=m*g,m+=T-w[k],k++;b+=o}t.cache.put_buffer(_)},gaussian_blur:function(e,r,a,n){void 0===n&&(n=0),void 0===a&&(a=0);var i=(a=0==a?2*Math.max(1,4*n+1-1e-8)+1|0:a)>>1,o=e.cols,s=e.rows,l=e.type,u=l&t.U8_t;r.resize(o,s,e.channel);var h,c,f=e.data,d=r.data,v=a+Math.max(s,o)|0,p=t.cache.get_buffer(v<<2),g=t.cache.get_buffer(a<<2);u?(h=p.i32,c=g.i32):l&t.S32_t?(h=p.i32,c=g.f32):(h=p.f32,c=g.f32),t.math.get_gaussian_kernel(a,n,c,l),u?function(e,t,r,a,n,i,o,s){for(var l=0,u=0,h=0,c=0,f=0,d=0,v=0,p=0,g=0,_=i[0],m=0,y=a<<1,b=3*a,x=a<<2;l<n;++l){for(d=t[c],u=0;u<s;++u)e[u]=d;for(u=0;u<=a-2;u+=2)e[u+s]=t[c+u],e[u+s+1]=t[c+u+1];for(;u<a;++u)e[u+s]=t[c+u];for(d=t[c+a-1],u=a;u<s+a;++u)e[u+s]=d;for(u=0;u<=a-4;u+=4){for(d=e[u]*_,v=e[u+1]*_,p=e[u+2]*_,g=e[u+3]*_,h=1;h<o;++h)d+=e[h+u]*(m=i[h]),v+=e[h+u+1]*m,p+=e[h+u+2]*m,g+=e[h+u+3]*m;r[f+u]=Math.min(d>>8,255),r[f+u+1]=Math.min(v>>8,255),r[f+u+2]=Math.min(p>>8,255),r[f+u+3]=Math.min(g>>8,255)}for(;u<a;++u){for(d=e[u]*_,h=1;h<o;++h)d+=e[h+u]*i[h];r[f+u]=Math.min(d>>8,255)}c+=a,f+=a}for(l=0;l<a;++l){for(d=r[l],u=0;u<s;++u)e[u]=d;for(h=l,u=0;u<=n-2;u+=2,h+=y)e[u+s]=r[h],e[u+s+1]=r[h+a];for(;u<n;++u,h+=a)e[u+s]=r[h];for(d=r[(n-1)*a+l],u=n;u<s+n;++u)e[u+s]=d;for(f=l,u=0;u<=n-4;u+=4,f+=x){for(d=e[u]*_,v=e[u+1]*_,p=e[u+2]*_,g=e[u+3]*_,h=1;h<o;++h)d+=e[h+u]*(m=i[h]),v+=e[h+u+1]*m,p+=e[h+u+2]*m,g+=e[h+u+3]*m;r[f]=Math.min(d>>8,255),r[f+a]=Math.min(v>>8,255),r[f+y]=Math.min(p>>8,255),r[f+b]=Math.min(g>>8,255)}for(;u<n;++u,f+=a){for(d=e[u]*_,h=1;h<o;++h)d+=e[h+u]*i[h];r[f]=Math.min(d>>8,255)}}}(h,f,d,o,s,c,a,i):function(e,t,r,a,n,i,o,s){for(var l=0,u=0,h=0,c=0,f=0,d=0,v=0,p=0,g=0,_=i[0],m=0,y=a<<1,b=3*a,x=a<<2;l<n;++l){for(d=t[c],u=0;u<s;++u)e[u]=d;for(u=0;u<=a-2;u+=2)e[u+s]=t[c+u],e[u+s+1]=t[c+u+1];for(;u<a;++u)e[u+s]=t[c+u];for(d=t[c+a-1],u=a;u<s+a;++u)e[u+s]=d;for(u=0;u<=a-4;u+=4){for(d=e[u]*_,v=e[u+1]*_,p=e[u+2]*_,g=e[u+3]*_,h=1;h<o;++h)d+=e[h+u]*(m=i[h]),v+=e[h+u+1]*m,p+=e[h+u+2]*m,g+=e[h+u+3]*m;r[f+u]=d,r[f+u+1]=v,r[f+u+2]=p,r[f+u+3]=g}for(;u<a;++u){for(d=e[u]*_,h=1;h<o;++h)d+=e[h+u]*i[h];r[f+u]=d}c+=a,f+=a}for(l=0;l<a;++l){for(d=r[l],u=0;u<s;++u)e[u]=d;for(h=l,u=0;u<=n-2;u+=2,h+=y)e[u+s]=r[h],e[u+s+1]=r[h+a];for(;u<n;++u,h+=a)e[u+s]=r[h];for(d=r[(n-1)*a+l],u=n;u<s+n;++u)e[u+s]=d;for(f=l,u=0;u<=n-4;u+=4,f+=x){for(d=e[u]*_,v=e[u+1]*_,p=e[u+2]*_,g=e[u+3]*_,h=1;h<o;++h)d+=e[h+u]*(m=i[h]),v+=e[h+u+1]*m,p+=e[h+u+2]*m,g+=e[h+u+3]*m;r[f]=d,r[f+a]=v,r[f+y]=p,r[f+b]=g}for(;u<n;++u,f+=a){for(d=e[u]*_,h=1;h<o;++h)d+=e[h+u]*i[h];r[f]=d}}}(h,f,d,o,s,c,a,i),t.cache.put_buffer(p),t.cache.put_buffer(g)},hough_transform:function(e,t,r,a){var n=e.data,i=e.cols,o=e.rows,s=i;min_theta=0,max_theta=Math.PI,numangle=Math.round((max_theta-min_theta)/r),numrho=Math.round((2*(i+o)+1)/t),irho=1/t;for(var l=new Int32Array((numangle+2)*(numrho+2)),u=new Float32Array(numangle),h=new Float32Array(numangle),c=0,f=min_theta;c<numangle;c++)u[c]=Math.sin(f)*irho,h[c]=Math.cos(f)*irho,f+=r;for(var d=0;d<o;d++)for(var v=0;v<i;v++)if(0!=n[d*s+v])for(c=0;c<numangle;c++){var p=Math.round(v*h[c]+d*u[c]);p+=(numrho-1)/2,l[(c+1)*(numrho+2)+p+1]+=1}for(_sort_buf=new Array,p=0;p<numrho;p++)for(c=0;c<numangle;c++){var g=(c+1)*(numrho+2)+p+1;l[g]>a&&l[g]>l[g-1]&&l[g]>=l[g+1]&&l[g]>l[g-numrho-2]&&l[g]>=l[g+numrho+2]&&_sort_buf.push(g)}for(_sort_buf.sort((function(e,t){return l[e]>l[t]||l[e]==l[t]&&e<t})),linesMax=Math.min(numangle*numrho,_sort_buf.length),scale=1/(numrho+2),lines=new Array,d=0;d<linesMax;d++){var _=_sort_buf[d],m=((p=_-(1+(c=Math.floor(_*scale)-1))*(numrho+2)-1)-.5*(numrho-1))*t;lines.push([m,c*r])}return lines},pyrdown:function(e,t,r,a){void 0===r&&(r=0),void 0===a&&(a=0);var n=e.cols,i=n>>1,o=e.rows>>1,s=i-(r<<1),l=o-(a<<1),u=0,h=0,c=r+a*n,f=0,d=0,v=0;t.resize(i,o,e.channel);var p=e.data,g=t.data;for(h=0;h<l;++h){for(f=c,v=d,u=0;u<=s-2;u+=2,v+=2,f+=4)g[v]=p[f]+p[f+1]+p[f+n]+p[f+n+1]+2>>2,g[v+1]=p[f+2]+p[f+3]+p[f+n+2]+p[f+n+3]+2>>2;for(;u<s;++u,++v,f+=2)g[v]=p[f]+p[f+1]+p[f+n]+p[f+n+1]+2>>2;c+=n<<1,d+=i}},scharr_derivatives:function(e,r){var a,n,i,o,s,l,u,h,c=e.cols,f=e.rows,d=c<<1,v=0,p=0,g=0,_=0,m=0,y=0,b=0;r.resize(c,f,2);var x=e.data,k=r.data,w=t.cache.get_buffer(c+2<<2),C=t.cache.get_buffer(c+2<<2);for(e.type&t.U8_t||e.type&t.S32_t?(u=w.i32,h=C.i32):(u=w.f32,h=C.f32);p<f;++p,m+=c){for(_=(p>0?p-1:1)*c|0,y=(p<f-1?p+1:f-2)*c|0,b=p*d|0,v=0,g=1;v<=c-2;v+=2,g+=2)u[g]=3*((a=x[_+v])+(n=x[y+v]))+10*x[m+v],h[g]=n-a,u[g+1]=3*((a=x[_+v+1])+(n=x[y+v+1]))+10*x[m+v+1],h[g+1]=n-a;for(;v<c;++v,++g)u[g]=3*((a=x[_+v])+(n=x[y+v]))+10*x[m+v],h[g]=n-a;for(v=c+1|0,u[0]=u[1],u[v]=u[c],h[0]=h[1],h[v]=h[c],v=0;v<=c-4;v+=4)a=h[v+2],n=h[v+1],i=h[v+3],o=h[v+4],l=u[v+3],k[b++]=(s=u[v+2])-u[v],k[b++]=3*(a+h[v])+10*n,k[b++]=l-u[v+1],k[b++]=3*(i+n)+10*a,k[b++]=u[v+4]-s,k[b++]=3*(o+a)+10*i,k[b++]=u[v+5]-l,k[b++]=3*(h[v+5]+i)+10*o;for(;v<c;++v)k[b++]=u[v+2]-u[v],k[b++]=3*(h[v+2]+h[v])+10*h[v+1]}t.cache.put_buffer(w),t.cache.put_buffer(C)},sobel_derivatives:function(e,r){var a,n,i,o,s,l,u,h,c=e.cols,f=e.rows,d=c<<1,v=0,p=0,g=0,_=0,m=0,y=0,b=0;r.resize(c,f,2);var x=e.data,k=r.data,w=t.cache.get_buffer(c+2<<2),C=t.cache.get_buffer(c+2<<2);for(e.type&t.U8_t||e.type&t.S32_t?(u=w.i32,h=C.i32):(u=w.f32,h=C.f32);p<f;++p,m+=c){for(_=(p>0?p-1:1)*c|0,y=(p<f-1?p+1:f-2)*c|0,b=p*d|0,v=0,g=1;v<=c-2;v+=2,g+=2)u[g]=(a=x[_+v])+(n=x[y+v])+2*x[m+v],h[g]=n-a,u[g+1]=(a=x[_+v+1])+(n=x[y+v+1])+2*x[m+v+1],h[g+1]=n-a;for(;v<c;++v,++g)u[g]=(a=x[_+v])+(n=x[y+v])+2*x[m+v],h[g]=n-a;for(v=c+1|0,u[0]=u[1],u[v]=u[c],h[0]=h[1],h[v]=h[c],v=0;v<=c-4;v+=4)a=h[v+2],n=h[v+1],i=h[v+3],o=h[v+4],l=u[v+3],k[b++]=(s=u[v+2])-u[v],k[b++]=a+h[v]+2*n,k[b++]=l-u[v+1],k[b++]=i+n+2*a,k[b++]=u[v+4]-s,k[b++]=o+a+2*i,k[b++]=u[v+5]-l,k[b++]=h[v+5]+i+2*o;for(;v<c;++v)k[b++]=u[v+2]-u[v],k[b++]=h[v+2]+h[v]+2*h[v+1]}t.cache.put_buffer(w),t.cache.put_buffer(C)},compute_integral_image:function(e,t,r,a){var n=0|e.cols,i=0|e.rows,o=e.data,s=n+1|0,l=0,u=0,h=0,c=0,f=0,d=0,v=0,p=0;if(t&&r){for(;f<s;++f)t[f]=0,r[f]=0;for(h=s+1|0,c=1,f=0,p=0;f<i;++f,++h,++c){for(l=u=0,d=0;d<=n-2;d+=2,p+=2,h+=2,c+=2)u+=(v=o[p])*v,t[h]=t[c]+(l+=v),r[h]=r[c]+u,u+=(v=o[p+1])*v,t[h+1]=t[c+1]+(l+=v),r[h+1]=r[c+1]+u;for(;d<n;++d,++p,++h,++c)u+=(v=o[p])*v,t[h]=t[c]+(l+=v),r[h]=r[c]+u}}else if(t){for(;f<s;++f)t[f]=0;for(h=s+1|0,c=1,f=0,p=0;f<i;++f,++h,++c){for(l=0,d=0;d<=n-2;d+=2,p+=2,h+=2,c+=2)t[h]=t[c]+(l+=o[p]),t[h+1]=t[c+1]+(l+=o[p+1]);for(;d<n;++d,++p,++h,++c)t[h]=t[c]+(l+=o[p])}}else if(r){for(;f<s;++f)r[f]=0;for(h=s+1|0,c=1,f=0,p=0;f<i;++f,++h,++c){for(u=0,d=0;d<=n-2;d+=2,p+=2,h+=2,c+=2)r[h]=r[c]+(u+=(v=o[p])*v),r[h+1]=r[c+1]+(u+=(v=o[p+1])*v);for(;d<n;++d,++p,++h,++c)r[h]=r[c]+(u+=(v=o[p])*v)}}if(a){for(f=0;f<s;++f)a[f]=0;for(h=s+1|0,c=0,f=0,p=0;f<i;++f,++h,++c){for(d=0;d<=n-2;d+=2,p+=2,h+=2,c+=2)a[h]=o[p]+a[c],a[h+1]=o[p+1]+a[c+1];for(;d<n;++d,++p,++h,++c)a[h]=o[p]+a[c]}for(h=s+n|0,c=n,f=0;f<i;++f,h+=s,c+=s)a[h]+=a[c];for(d=n-1;d>0;--d)for(c=(h=d+i*s)-s,f=i;f>0;--f,h-=s,c-=s)a[h]+=a[c]+a[c+1]}},equalize_histogram:function(e,r){var a=e.cols,n=e.rows,i=e.data;r.resize(a,n,e.channel);var o,s,l=r.data,u=a*n,h=0,c=0,f=t.cache.get_buffer(1024);for(o=f.i32;h<256;++h)o[h]=0;for(h=0;h<u;++h)++o[i[h]];for(c=o[0],h=1;h<256;++h)c=o[h]+=c;for(s=255/u,h=0;h<u;++h)l[h]=o[i[h]]*s+.5|0;t.cache.put_buffer(f)},canny:function(e,r,a,n){var i=e.cols,o=e.rows;r.resize(i,o,e.channel);var s=r.data,l=0,u=0,h=0,c=i<<1,f=0,d=0,v=0,p=0,g=0,_=0,m=0,y=0,b=t.cache.get_buffer(o*c<<2),x=t.cache.get_buffer(3*(i+2)<<2),k=t.cache.get_buffer((o+2)*(i+2)<<2),w=t.cache.get_buffer(o*i<<2),C=x.i32,T=k.i32,S=w.i32,I=b.i32,A=new t.matrix_t(i,o,t.S32C2_t,b.data),R=1,N=i+2+1|0,E=2*(i+2)+1|0,F=i+2|0,M=F+1|0,D=0;for(this.sobel_derivatives(e,A),a>n&&(l=a,a=n,n=l),l=3*(i+2)|0;--l>=0;)C[l]=0;for(l=(o+2)*(i+2)|0;--l>=0;)T[l]=0;for(;u<i;++u,h+=2)C[N+u]=((p=I[h])^p>>31)-(p>>31)+(((g=I[h+1])^g>>31)-(g>>31));for(l=1;l<=o;++l,h+=c){if(l==o)for(u=E+i;--u>=E;)C[u]=0;else for(u=0;u<i;u++)C[E+u]=((p=I[h+(u<<1)])^p>>31)-(p>>31)+(((g=I[h+(u<<1)+1])^g>>31)-(g>>31));for(f=h-c|0,T[M-1]=0,d=0,u=0;u<i;++u,f+=2){if((v=C[N+u])>a)if(_=(p=I[f])^(g=I[f+1]),g=(g^g>>31)-(g>>31)|0,y=(m=13573*(p=(p^p>>31)-(p>>31)|0))+(p+p<<15),(g<<=15)<m){if(v>C[N+u-1]&&v>=C[N+u+1]){v>n&&!d&&2!=T[M+u-F]?(T[M+u]=2,d=1,S[D++]=M+u):T[M+u]=1;continue}}else if(g>y){if(v>C[R+u]&&v>=C[E+u]){v>n&&!d&&2!=T[M+u-F]?(T[M+u]=2,d=1,S[D++]=M+u):T[M+u]=1;continue}}else if(v>C[R+u-(_=_<0?-1:1)]&&v>C[E+u+_]){v>n&&!d&&2!=T[M+u-F]?(T[M+u]=2,d=1,S[D++]=M+u):T[M+u]=1;continue}T[M+u]=0,d=0}T[M+i]=0,M+=F,u=R,R=N,N=E,E=u}for(u=M-F-1,l=0;l<F;++l,++u)T[u]=0;for(;D>0;)M=S[--D],1==T[M-=F+1]&&(T[M]=2,S[D++]=M),1==T[M+=1]&&(T[M]=2,S[D++]=M),1==T[M+=1]&&(T[M]=2,S[D++]=M),1==T[M+=F]&&(T[M]=2,S[D++]=M),1==T[M-=2]&&(T[M]=2,S[D++]=M),1==T[M+=F]&&(T[M]=2,S[D++]=M),1==T[M+=1]&&(T[M]=2,S[D++]=M),1==T[M+=1]&&(T[M]=2,S[D++]=M);for(M=F+1,R=0,l=0;l<o;++l,M+=F)for(u=0;u<i;++u)s[R++]=255*(2==T[M+u]);t.cache.put_buffer(b),t.cache.put_buffer(x),t.cache.put_buffer(k),t.cache.put_buffer(w)},warp_perspective:function(e,t,r,a){void 0===a&&(a=0);for(var n=0|e.cols,i=0|e.rows,o=0|t.cols,s=0|t.rows,l=e.data,u=t.data,h=0,c=0,f=0,d=0,v=0,p=0,g=0,_=0,m=0,y=0,b=0,x=0,k=0,w=0,C=r.data,T=C[0],S=C[1],I=C[2],A=C[3],R=C[4],N=C[5],E=C[6],F=C[7],M=C[8],D=0;c<s;++c)for(_=S*c+I,m=R*c+N,y=F*c+M,h=0;h<o;++h,++D,_+=T,m+=A,y+=E)d=0|(p=_*(b=1/y)),v=0|(g=m*b),p>0&&g>0&&d<n-1&&v<i-1?(x=Math.max(p-d,0),k=Math.max(g-v,0),u[D]=(w=l[f=n*v+d|0]+x*(l[f+1]-l[f]))+k*(l[f+n]+x*(l[f+n+1]-l[f+n])-w)):u[D]=a},warp_affine:function(e,t,r,a){void 0===a&&(a=0);for(var n=e.cols,i=e.rows,o=t.cols,s=t.rows,l=e.data,u=t.data,h=0,c=0,f=0,d=0,v=0,p=0,g=0,_=0,m=0,y=r.data,b=y[0],x=y[1],k=y[2],w=y[3],C=y[4],T=y[5],S=0;c<s;++c)for(p=x*c+k,g=C*c+T,h=0;h<o;++h,++S,p+=b,g+=w)v=0|g,u[S]=(d=0|p)>=0&&v>=0&&d<n-1&&v<i-1?(m=l[f=n*v+d]+(_=p-d)*(l[f+1]-l[f]))+(g-v)*(l[f+n]+_*(l[f+n+1]-l[f+n])-m):a},skindetector:function(e,t){for(var r,a,n,i,o=e.width*e.height;o--;)a=e.data[1+(i=4*o)],n=e.data[i+2],t[o]=(r=e.data[i])>95&&a>40&&n>20&&r>a&&r>n&&r-Math.min(a,n)>15&&Math.abs(r-a)>15?255:0}}}(t),function(e){var r,a,n,i,o,s,l=(r=new Int32Array([0,3,1,3,2,2,3,1,3,0,3,-1,2,-2,1,-3,0,-3,-1,-3,-2,-2,-3,-1,-3,0,-3,1,-2,2,-1,3]),a=new Uint8Array(512),n=new Int32Array(25),i=new Int32Array(25),o=function(e,t,r,a,n){for(var i=0,o=e[t],s=n,l=0,u=0,h=0;i<25;++i)a[i]=o-e[t+r[i]];for(i=0;i<16;i+=2)l=Math.min(a[i+1],a[i+2]),(l=Math.min(l,a[i+3]))<=s||(l=Math.min(l,a[i+4]),l=Math.min(l,a[i+5]),l=Math.min(l,a[i+6]),l=Math.min(l,a[i+7]),l=Math.min(l,a[i+8]),s=Math.max(s,Math.min(l,a[i])),s=Math.max(s,Math.min(l,a[i+9])));for(u=-s,i=0;i<16;i+=2)h=Math.max(a[i+1],a[i+2]),h=Math.max(h,a[i+3]),h=Math.max(h,a[i+4]),(h=Math.max(h,a[i+5]))>=u||(h=Math.max(h,a[i+6]),h=Math.max(h,a[i+7]),h=Math.max(h,a[i+8]),u=Math.min(u,Math.max(h,a[i])),u=Math.min(u,Math.max(h,a[i+9])));return-u-1},s=20,{set_threshold:function(e){s=Math.min(Math.max(e,0),255);for(var t=-255;t<=255;++t)a[t+255]=t<-s?1:t>s?2:0;return s},detect:function(e,l,u){void 0===u&&(u=3);var h,c=e.data,f=e.cols,d=e.rows,v=0,p=0,g=0,_=0,m=0,y=t.cache.get_buffer(3*f),b=t.cache.get_buffer(3*(f+1)<<2),x=y.u8,k=b.i32,w=n,C=i,T=Math.max(3,u),S=Math.min(d-2,d-u),I=Math.max(3,u),A=Math.min(f-3,f-u),R=0,N=0,E=o,F=a,M=s,D=0,O=0,L=0,z=0,B=0,P=0,V=0,U=0,W=0,G=0,H=0,j=0;!function(e,t,a){for(var n=0,i=r;n<16;++n)e[n]=i[n<<1]+i[1+(n<<1)]*t;for(;n<25;++n)e[n]=e[n-16]}(w,f);var q=w[0],X=w[1],K=w[2],Q=w[3],Y=w[4],J=w[5],Z=w[6],$=w[7],ee=w[8],te=w[9],re=w[10],ae=w[11],ne=w[12],ie=w[13],oe=w[14],se=w[15];for(v=0;v<3*f;++v)x[v]=0;for(v=T;v<S;++v){for(V=v*f+I|0,P=(m=(v-3)%3)*f|0,B=m*(f+1)|0,p=0;p<f;++p)x[P+p]=0;if(z=0,v<S-1)for(p=I;p<A;++p,++V)if(0!=(L=F[(O=255-(D=c[V]))+c[V+q]]|F[O+c[V+ee]])&&(L&=F[O+c[V+K]]|F[O+c[V+re]],L&=F[O+c[V+Y]]|F[O+c[V+ne]],0!=(L&=F[O+c[V+Z]]|F[O+c[V+oe]]))){if(L&=F[O+c[V+X]]|F[O+c[V+te]],L&=F[O+c[V+Q]]|F[O+c[V+ae]],L&=F[O+c[V+J]]|F[O+c[V+ie]],1&(L&=F[O+c[V+$]]|F[O+c[V+se]]))for(_=D-M,R=0,g=0;g<25;++g)if(c[V+w[g]]<_){if(++R>8){k[B+ ++z]=p,x[P+p]=E(c,V,w,C,M);break}}else R=0;if(2&L)for(_=D+M,R=0,g=0;g<25;++g)if(c[V+w[g]]>_){if(++R>8){k[B+ ++z]=p,x[P+p]=E(c,V,w,C,M);break}}else R=0}if(k[B+f]=z,v!=T)for(U=(m=(v-4+3)%3)*f|0,B=m*(f+1)|0,W=(m=(v-5+3)%3)*f|0,z=k[B+f],g=0;g<z;++g)H=(p=k[B+g])-1|0,(j=x[U+p])>x[U+(G=p+1|0)]&&j>x[U+H]&&j>x[W+H]&&j>x[W+p]&&j>x[W+G]&&j>x[P+H]&&j>x[P+p]&&j>x[P+G]&&((h=l[N]).x=p,h.y=v-1,h.score=j,N++)}return t.cache.put_buffer(y),t.cache.put_buffer(b),N}});e.fast_corners=l,l.set_threshold(20)}(t),function(e){var r,a=(r=function(e,t,r,a,n,i,o){var s=-2*e[t]+e[t+a]+e[t-a],l=-2*e[t]+e[t+n]+e[t-n],u=e[t+i]+e[t-i]-e[t+o]-e[t-o],h=0|Math.sqrt((s-l)*(s-l)+4*u*u);return Math.min(Math.abs(r-h),Math.abs(-(r+h)))},{laplacian_threshold:30,min_eigen_value_threshold:25,detect:function(e,a,n){void 0===n&&(n=5);var i,o=0,s=0,l=e.cols,u=e.rows,h=e.data,c=5*l|0,f=3+3*l|0,d=3-3*l|0,v=t.cache.get_buffer(l*u<<2),p=v.i32,g=0,_=0,m=0,y=0,b=0,x=this.laplacian_threshold,k=this.min_eigen_value_threshold,w=0|Math.max(5,n),C=0|Math.max(3,n),T=0|Math.min(l-5,l-n),S=0|Math.min(u-3,u-n);for(o=l*u;--o>=0;)p[o]=0;for(function(e,t,r,a,n,i,o,s,l,u){var h=0,c=0,f=s*r+o|0,d=f;for(h=s;h<u;++h,d=f+=r)for(c=o;c<l;++c,++d)t[d]=-4*e[d]+e[d+5]+e[d-5]+e[d+i]+e[d-i]}(h,p,l,0,0,c,w,C,T,S),_=C*l+w|0,s=C;s<S;++s,_+=l)for(o=w,m=_;o<T;++o,++m)((g=p[m])<-x&&g<p[m-1]&&g<p[m+1]&&g<p[m-l]&&g<p[m+l]&&g<p[m-l-1]&&g<p[m+l-1]&&g<p[m-l+1]&&g<p[m+l+1]||g>x&&g>p[m-1]&&g>p[m+1]&&g>p[m-l]&&g>p[m+l]&&g>p[m-l-1]&&g>p[m+l-1]&&g>p[m-l+1]&&g>p[m+l+1])&&(y=r(h,m,g,5,c,f,d))>k&&((i=a[b]).x=o,i.y=s,i.score=y,++b,++o,++m);return t.cache.put_buffer(v),b}});e.yape06=a}(t),function(e){var t,r,a,n=(t=function(e,t,r,a,n){var i,o;if(r>0)for(t-=a*n,o=-n;o<=n;++o){for(i=-n;i<=n;++i)if(e[t+i]>r)return!1;t+=a}else for(t-=a*n,o=-n;o<=n;++o){for(i=-n;i<=n;++i)if(e[t+i]<r)return!1;t+=a}return!0},r=function(e,t,r,a,n,i,o,s){var l=0,u=0,h=o-1|0,c=0,f=0,d=0,v=0,p=0;if((c=e[t+i[u]])<=n)if(c>=a)if((f=e[t+i[h]])<=n){if(f>=a)return void(r[t]=0);if((d=e[t+i[++h]])>n)if((v=e[t+i[++h]])>n)p=3;else{if(!(v<a))return void(r[t]=0);p=6}else if((v=e[t+i[++h]])>n)p=7;else{if(!(v<a))return void(r[t]=0);p=2}}else if((d=e[t+i[++h]])>n)if((v=e[t+i[++h]])>n)p=3;else{if(!(v<a))return void(r[t]=0);p=6}else{if(!(d<a))return void(r[t]=0);if((v=e[t+i[++h]])>n)p=7;else{if(!(v<a))return void(r[t]=0);p=2}}else{if((f=e[t+i[h]])>n)return void(r[t]=0);if((d=e[t+i[++h]])>n)return void(r[t]=0);if((v=e[t+i[++h]])>n)return void(r[t]=0);p=1}else{if((f=e[t+i[h]])<a)return void(r[t]=0);if((d=e[t+i[++h]])<a)return void(r[t]=0);if((v=e[t+i[++h]])<a)return void(r[t]=0);p=0}for(u=1;u<=o;u++)switch(c=e[t+i[u]],p){case 0:if(c>n){if(d=v,(v=e[t+i[++h]])<a)return void(r[t]=0);l-=c+d,p=0;break}if(c<a){if(d>n)return void(r[t]=0);if(v>n)return void(r[t]=0);if(d=v,(v=e[t+i[++h]])>n)return void(r[t]=0);l-=c+d,p=8;break}if(d<=n)return void(r[t]=0);if(v<=n)return void(r[t]=0);if(d=v,(v=e[t+i[++h]])>n){l-=c+d,p=3;break}if(v<a){l-=c+d,p=6;break}return void(r[t]=0);case 1:if(c<a){if(d=v,(v=e[t+i[++h]])>n)return void(r[t]=0);l-=c+d,p=1;break}if(c>n){if(d<a)return void(r[t]=0);if(v<a)return void(r[t]=0);if(d=v,(v=e[t+i[++h]])<a)return void(r[t]=0);l-=c+d,p=9;break}if(d>=a)return void(r[t]=0);if(v>=a)return void(r[t]=0);if(d=v,(v=e[t+i[++h]])<a){l-=c+d,p=2;break}if(v>n){l-=c+d,p=7;break}return void(r[t]=0);case 2:if(c>n)return void(r[t]=0);if(d=v,v=e[t+i[++h]],c<a){if(v>n)return void(r[t]=0);l-=c+d,p=4;break}if(v>n){l-=c+d,p=7;break}if(v<a){l-=c+d,p=2;break}return void(r[t]=0);case 3:if(c<a)return void(r[t]=0);if(d=v,v=e[t+i[++h]],c>n){if(v<a)return void(r[t]=0);l-=c+d,p=5;break}if(v>n){l-=c+d,p=3;break}if(v<a){l-=c+d,p=6;break}return void(r[t]=0);case 4:if(c>n)return void(r[t]=0);if(c<a){if(d=v,(v=e[t+i[++h]])>n)return void(r[t]=0);l-=c+d,p=1;break}if(v>=a)return void(r[t]=0);if(d=v,(v=e[t+i[++h]])<a){l-=c+d,p=2;break}if(v>n){l-=c+d,p=7;break}return void(r[t]=0);case 5:if(c<a)return void(r[t]=0);if(c>n){if(d=v,(v=e[t+i[++h]])<a)return void(r[t]=0);l-=c+d,p=0;break}if(v<=n)return void(r[t]=0);if(d=v,(v=e[t+i[++h]])>n){l-=c+d,p=3;break}if(v<a){l-=c+d,p=6;break}return void(r[t]=0);case 7:if(c>n)return void(r[t]=0);if(c<a)return void(r[t]=0);if(d=v,(v=e[t+i[++h]])>n){l-=c+d,p=3;break}if(v<a){l-=c+d,p=6;break}return void(r[t]=0);case 6:if(c>n)return void(r[t]=0);if(c<a)return void(r[t]=0);if(d=v,(v=e[t+i[++h]])<a){l-=c+d,p=2;break}if(v>n){l-=c+d,p=7;break}return void(r[t]=0);case 8:if(c>n){if(v<a)return void(r[t]=0);if(d=v,(v=e[t+i[++h]])<a)return void(r[t]=0);l-=c+d,p=9;break}if(c<a){if(d=v,(v=e[t+i[++h]])>n)return void(r[t]=0);l-=c+d,p=1;break}return void(r[t]=0);case 9:if(c<a){if(v>n)return void(r[t]=0);if(d=v,(v=e[t+i[++h]])>n)return void(r[t]=0);l-=c+d,p=8;break}if(c>n){if(d=v,(v=e[t+i[++h]])<a)return void(r[t]=0);l-=c+d,p=0;break}return void(r[t]=0)}r[t]=l+s*e[t]},a=function(e,t,r){this.dirs=new Int32Array(1024),this.dirs_count=0|function(e,t,r){var a,n,i=0;for(a=r,n=0;n<a;n++,i++)a=Math.sqrt(r*r-n*n)+.5|0,t[i]=a+e*n;for(a--;a<n&&a>=0;a--,i++)n=Math.sqrt(r*r-a*a)+.5|0,t[i]=a+e*n;for(;-a<n;a--,i++)n=Math.sqrt(r*r-a*a)+.5|0,t[i]=a+e*n;for(n--;n>=0;n--,i++)a=-Math.sqrt(r*r-n*n)-.5|0,t[i]=a+e*n;for(;n>a;n--,i++)a=-Math.sqrt(r*r-n*n)-.5|0,t[i]=a+e*n;for(a++;a<=0;a++,i++)n=-Math.sqrt(r*r-a*a)-.5|0,t[i]=a+e*n;for(;a<-n;a++,i++)n=-Math.sqrt(r*r-a*a)-.5|0,t[i]=a+e*n;for(n++;n<0;n++,i++)a=Math.sqrt(r*r-n*n)+.5|0,t[i]=a+e*n;return t[i]=t[0],t[i+1]=t[1],i}(e,this.dirs,r),this.scores=new Int32Array(e*t),this.radius=0|r},{level_tables:[],tau:7,init:function(e,t,r,n){var i;for(void 0===n&&(n=1),r=Math.min(r,7),r=Math.max(r,3),i=0;i<n;++i)this.level_tables[i]=new a(e>>i,t>>i,r)},detect:function(e,a,n){void 0===n&&(n=4);var i,o,s,l,u,h=this.level_tables[0],c=0|h.radius,f=c-1|0,d=h.dirs,v=0|h.dirs_count,p=v>>1,g=e.data,_=0|e.cols,m=0|e.rows,y=_>>1,b=h.scores,x=0,k=0,w=0,C=0,T=0,S=0,I=0,A=0,R=0|this.tau,N=0,E=0|Math.max(c+1,n),F=0|Math.max(c+1,n),M=0|Math.min(_-c-2,_-n),D=0|Math.min(m-c-2,m-n);for(w=F*_+E|0,k=F;k<D;++k,w+=_)for(x=E,C=w;x<M;++x,++C)T=g[C]+R,(S=g[C]-R)<g[C+c]&&g[C+c]<T&&S<g[C-c]&&g[C-c]<T?b[C]=0:r(g,C,b,S,T,d,p,v);for(w=F*_+E|0,k=F;k<D;++k,w+=_)for(x=E,C=w;x<M;++x,++C)A=b[C],(I=Math.abs(A))<5?(++x,++C):(u=void 0,u=0,0!=(o=b)[(s=C)+1]&&u++,0!=o[s-1]&&u++,0!=o[s+(l=_)]&&u++,0!=o[s+l+1]&&u++,0!=o[s+l-1]&&u++,0!=o[s-l]&&u++,0!=o[s-l+1]&&u++,0!=o[s-l-1]&&u++,u>=3&&t(b,C,A,y,c)&&((i=a[N]).x=x,i.y=k,i.score=I,++N,x+=f,C+=f));return N}});e.yape=n}(t),function(e){var r,a,n,i,o=(r=new Int32Array([8,-3,9,5,4,2,7,-12,-11,9,-8,2,7,-12,12,-13,2,-13,2,12,1,-7,1,6,-2,-10,-2,-4,-13,-13,-11,-8,-13,-3,-12,-9,10,4,11,9,-13,-8,-8,-9,-11,7,-9,12,7,7,12,6,-4,-5,-3,0,-13,2,-12,-3,-9,0,-7,5,12,-6,12,-1,-3,6,-2,12,-6,-13,-4,-8,11,-13,12,-8,4,7,5,1,5,-3,10,-3,3,-7,6,12,-8,-7,-6,-2,-2,11,-1,-10,-13,12,-8,10,-7,3,-5,-3,-4,2,-3,7,-10,-12,-6,11,5,-12,6,-7,5,-6,7,-1,1,0,4,-5,9,11,11,-13,4,7,4,12,2,-1,4,4,-4,-12,-2,7,-8,-5,-7,-10,4,11,9,12,0,-8,1,-13,-13,-2,-8,2,-3,-2,-2,3,-6,9,-4,-9,8,12,10,7,0,9,1,3,7,-5,11,-10,-13,-6,-11,0,10,7,12,1,-6,-3,-6,12,10,-9,12,-4,-13,8,-8,-12,-13,0,-8,-4,3,3,7,8,5,7,10,-7,-1,7,1,-12,3,-10,5,6,2,-4,3,-10,-13,0,-13,5,-13,-7,-12,12,-13,3,-11,8,-7,12,-4,7,6,-10,12,8,-9,-1,-7,-6,-2,-5,0,12,-12,5,-7,5,3,-10,8,-13,-7,-7,-4,5,-3,-2,-1,-7,2,9,5,-11,-11,-13,-5,-13,-1,6,0,-1,5,-3,5,2,-4,-13,-4,12,-9,-6,-9,6,-12,-10,-8,-4,10,2,12,-3,7,12,12,12,-7,-13,-6,5,-4,9,-3,4,7,-1,12,2,-7,6,-5,1,-13,11,-12,5,-3,7,-2,-6,7,-8,12,-7,-13,-7,-11,-12,1,-3,12,12,2,-6,3,0,-4,3,-2,-13,-1,-13,1,9,7,1,8,-6,1,-1,3,12,9,1,12,6,-1,-9,-1,3,-13,-13,-10,5,7,7,10,12,12,-5,12,9,6,3,7,11,5,-13,6,10,2,-12,2,3,3,8,4,-6,2,6,12,-13,9,-12,10,3,-8,4,-7,9,-11,12,-4,-6,1,12,2,-8,6,-9,7,-4,2,3,3,-2,6,3,11,0,3,-3,8,-8,7,8,9,3,-11,-5,-6,-4,-10,11,-5,10,-5,-8,-3,12,-10,5,-9,0,8,-1,12,-6,4,-6,6,-11,-10,12,-8,7,4,-2,6,7,-2,0,-2,12,-5,-8,-5,2,7,-6,10,12,-9,-13,-8,-8,-5,-13,-5,-2,8,-8,9,-13,-9,-11,-9,0,1,-8,1,-2,7,-4,9,1,-2,1,-1,-4,11,-6,12,-11,-12,-9,-6,4,3,7,7,12,5,5,10,8,0,-4,2,8,-9,12,-5,-13,0,7,2,12,-1,2,1,7,5,11,7,-9,3,5,6,-8,-13,-4,-8,9,-5,9,-3,-3,-4,-7,-3,-12,6,5,8,0,-7,6,-6,12,-13,6,-5,-2,1,-10,3,10,4,1,8,-4,-2,-2,2,-13,2,-12,12,12,-2,-13,0,-6,4,1,9,3,-6,-10,-3,-5,-3,-13,-1,1,7,5,12,-11,4,-2,5,-7,-13,9,-9,-5,7,1,8,6,7,-8,7,6,-7,-4,-7,1,-8,11,-7,-8,-13,6,-12,-8,2,4,3,9,10,-5,12,3,-6,-5,-6,7,8,-3,9,-8,2,-12,2,8,-11,-2,-10,3,-12,-13,-7,-9,-11,0,-10,-5,5,-3,11,8,-2,-13,-1,12,-1,-8,0,9,-13,-11,-12,-5,-10,-2,-10,11,-3,9,-2,-13,2,-3,3,2,-9,-13,-4,0,-4,6,-3,-10,-4,12,-2,-7,-6,-11,-4,9,6,-3,6,11,-13,11,-5,5,11,11,12,6,7,-5,12,-2,-1,12,0,7,-4,-8,-3,-2,-7,1,-6,7,-13,-12,-8,-13,-7,-2,-6,-8,-8,5,-6,-9,-5,-1,-4,5,-13,7,-8,10,1,5,5,-13,1,0,10,-13,9,12,10,-1,5,-8,10,-9,-1,11,1,-13,-9,-3,-6,2,-1,-10,1,12,-13,1,-8,-10,8,-11,10,-6,2,-13,3,-6,7,-13,12,-9,-10,-10,-5,-7,-10,-8,-8,-13,4,-6,8,5,3,12,8,-13,-4,2,-3,-3,5,-13,10,-12,4,-13,5,-1,-9,9,-4,3,0,3,3,-9,-12,1,-6,1,3,2,4,-8,-10,-10,-10,9,8,-13,12,12,-8,-12,-6,-5,2,2,3,7,10,6,11,-8,6,8,8,-12,-7,10,-6,5,-3,-9,-3,9,-1,-13,-1,5,-3,-7,-3,4,-8,-2,-8,3,4,2,12,12,2,-5,3,11,6,-9,11,-13,3,-1,7,12,11,-1,12,4,-3,0,-3,6,4,-11,4,12,2,-4,2,1,-10,-6,-8,1,-13,7,-11,1,-13,12,-11,-13,6,0,11,-13,0,-1,1,4,-13,3,-9,-2,-9,8,-6,-3,-13,-6,-8,-2,5,-9,8,10,2,7,3,-9,-1,-6,-1,-1,9,5,11,-2,11,-3,12,-8,3,0,3,5,-1,4,0,10,3,-6,4,5,-13,0,-10,5,5,8,12,11,8,9,9,-6,7,-4,8,-12,-10,4,-10,9,7,3,12,4,9,-7,10,-2,7,0,12,-2,-1,-6,0,-11]),a=new t.matrix_t(3,3,t.F32_t|t.C1_t),n=new t.matrix_t(32,32,t.U8_t|t.C1_t),i=function(e,r,n,i,o,s){var l=Math.cos(n),u=Math.sin(n);a.data[0]=l,a.data[1]=-u,a.data[2]=(-l+u)*s*.5+i,a.data[3]=u,a.data[4]=l,a.data[5]=(-u-l)*s*.5+o,t.imgproc.warp_affine(e,r,a,128)},{describe:function(e,a,o,s){var l=0,u=0,h=0,c=0,f=0,d=n.data,v=0;s.type&t.U8_t?s.resize(32,o,1):(s.type=t.U8_t,s.cols=32,s.rows=o,s.channel=1,s.allocate());var p=s.data,g=0;for(l=0;l<o;++l){for(i(e,n,a[l].angle,a[l].x,a[l].y,32),v=0,u=0;u<32;++u)f=(h=d[528+32*r[v+1]+r[v]])<(c=d[528+32*r[(v+=2)+1]+r[v]])|0,f|=((h=d[528+32*r[(v+=2)+1]+r[v]])<(c=d[528+32*r[(v+=2)+1]+r[v]]))<<1,f|=((h=d[528+32*r[(v+=2)+1]+r[v]])<(c=d[528+32*r[(v+=2)+1]+r[v]]))<<2,f|=((h=d[528+32*r[(v+=2)+1]+r[v]])<(c=d[528+32*r[(v+=2)+1]+r[v]]))<<3,f|=((h=d[528+32*r[(v+=2)+1]+r[v]])<(c=d[528+32*r[(v+=2)+1]+r[v]]))<<4,f|=((h=d[528+32*r[(v+=2)+1]+r[v]])<(c=d[528+32*r[(v+=2)+1]+r[v]]))<<5,f|=((h=d[528+32*r[(v+=2)+1]+r[v]])<(c=d[528+32*r[(v+=2)+1]+r[v]]))<<6,h=d[528+32*r[(v+=2)+1]+r[v]],c=d[528+32*r[(v+=2)+1]+r[v]],v+=2,p[g+u]=f|=(h<c)<<7;g+=32}}});e.orb=o}(t),function(e){var r,a=(r=t.imgproc.scharr_derivatives,{track:function(e,a,n,i,o,s,l,u,h,c){void 0===l&&(l=30),void 0===u&&(u=new Uint8Array(o)),void 0===h&&(h=.01),void 0===c&&(c=1e-4);var f=.5*(s-1),d=s*s|0,v=d<<1,p=e.data,g=a.data,_=p[0].data,m=g[0].data,y=p[0].cols,b=p[0].rows,x=0,k=t.cache.get_buffer(d<<2),w=t.cache.get_buffer(v<<2),C=t.cache.get_buffer(b*(y<<1)<<2),T=new t.matrix_t(y,b,t.S32C2_t,C.data),S=k.i32,I=w.i32,A=C.i32,R=0,N=0,E=0,F=0,M=0,D=0,O=0,L=0,z=0,B=0,P=0,V=0,U=0,W=0,G=0,H=0,j=0,q=0,X=0,K=0,Q=0,Y=0,J=0,Z=0,$=0,ee=0,te=0,re=0,ae=0,ne=0,ie=0,oe=0,se=1/(1<<20),le=0,ue=0,he=0,ce=0,fe=0,de=0,ve=0,pe=0,ge=0,_e=0,me=0;for(h*=h;K<o;++K)u[K]=1;var ye=e.levels-1|0;for(Z=ye;Z>=0;--Z)for(O=1/(1<<Z),R=(x=y>>Z)<<1,_=p[Z].data,m=g[Z].data,te=x-s|0,re=(b>>Z)-s|0,r(p[Z],T),$=0;$<o;++$)if(L=n[K=$<<1]*O,z=n[Q=K+1]*O,Z==ye?(B=L,P=z):(B=2*i[K],P=2*i[Q]),i[K]=B,i[Q]=P,0==(Y=(H=0|(L-=f))<=0|H>=te|(j=0|(z-=f))<=0|j>=re)){for(ce=16384-(le=(1-(ae=L-H))*(1-(ne=z-j))*16384+.5|0)-(ue=ae*(1-ne)*16384+.5|0)-(he=(1-ae)*ne*16384+.5|0),pe=0,ge=0,_e=0,J=0;J<s;++J)for(E=(N=(J+j)*x+H|0)<<1,M=(F=J*s|0)<<1,Y=0;Y<s;++Y,++N,++F,E+=2)de=8192+(de=A[E]*le+A[E+2]*ue+A[E+R]*he+A[E+R+2]*ce)>>14,ve=8192+(ve=A[E+1]*le+A[E+3]*ue+A[E+R+1]*he+A[E+R+3]*ce)>>14,S[F]=fe=256+(fe=_[N]*le+_[N+1]*ue+_[N+x]*he+_[N+x+1]*ce)>>9,I[M++]=de,I[M++]=ve,pe+=de*de,ge+=de*ve,_e+=ve*ve;if(me=(pe*=se)*(_e*=se)-(ge*=se)*ge,(_e+pe-Math.sqrt((pe-_e)*(pe-_e)+4*ge*ge))/v<c||me<1.1920929e-7)0==Z&&(u[$]=0);else for(me=1/me,B-=f,P-=f,V=0,U=0,ee=0;ee<l;++ee){if(0!=(Y=(q=0|B)<=0|q>=te|(X=0|P)<=0|X>=re)){0==Z&&(u[$]=0);break}for(ce=16384-(le=(1-(ae=B-q))*(1-(ne=P-X))*16384+.5|0)-(ue=ae*(1-ne)*16384+.5|0)-(he=(1-ae)*ne*16384+.5|0),ie=0,oe=0,J=0;J<s;++J)for(D=(J+X)*x+q|0,M=(F=J*s|0)<<1,Y=0;Y<s;++Y,++D,++F)fe=256+(fe=m[D]*le+m[D+1]*ue+m[D+x]*he+m[D+x+1]*ce)>>9,ie+=(fe-=S[F])*I[M++],oe+=fe*I[M++];if(P+=G=(ge*(ie*=se)-pe*(oe*=se))*me,i[K]=(B+=W=(ge*oe-_e*ie)*me)+f,i[Q]=P+f,W*W+G*G<=h)break;if(ee>0&&Math.abs(W+V)<.01&&Math.abs(G+U)<.01){i[K]-=.5*W,i[Q]-=.5*G;break}V=W,U=G}}else 0==Z&&(u[$]=0);t.cache.put_buffer(k),t.cache.put_buffer(w),t.cache.put_buffer(C)}});e.optical_flow_lk=a}(t),function(e){var t,r=(t=function(e,t){var r=.25*e.width+.5|0;return t.x<=e.x+r&&t.x>=e.x-r&&t.y<=e.y+r&&t.y>=e.y-r&&t.width<=1.5*e.width+.5|0&&1.5*t.width+.5|0>=e.width},{edges_density:.07,detect_single_scale:function(e,t,r,a,n,i,o,s){var l,u,h,c,f,d,v,p,g,_,m,y,b,x,k,w,C,T,S,I,A,R,N,E,F,M=s.size[0]*o|0,D=s.size[1]*o|0,O=.5*o+1.5|0,L=O,z=n-M|0,B=i-D|0,P=n+1|0,V=1/(M*D),U=!0,W=0,G=M,H=D*P,j=H+M,q=M*D*255*this.edges_density|0,X=[];for(f=0;f<B;f+=L)for(W=f*P,c=0;c<z;c+=O,W+=O)if(d=e[W]-e[W+G]-e[W+H]+e[W+j],a&&(a[W]-a[W+G]-a[W+H]+a[W+j]<q||d<20))c+=O,W+=O;else{for(p=(v=(t[W]-t[W+G]-t[W+H]+t[W+j])*V-(d*=V)*d)>0?Math.sqrt(v):1,b=(g=s.complexClassifiers).length,U=!0,l=0;l<b;++l){for(w=(_=g[l]).threshold,x=(m=_.simpleClassifiers).length,C=0,u=0;u<x;++u){if(T=0,k=(I=(y=m[u]).features).length,1===y.tilted)for(h=0;h<k;++h)T+=(r[A=~~(c+(S=I[h])[0]*o)+~~(f+S[1]*o)*P]-r[A+(E=~~(S[2]*o))+(R=E*P)]-r[A-(F=~~(S[3]*o))+(N=F*P)]+r[A+E-F+R+N])*S[4];else for(h=0;h<k;++h)T+=(e[A=~~(c+(S=I[h])[0]*o)+~~(f+S[1]*o)*P]-e[A+(E=~~(S[2]*o))]-e[A+(N=(F=~~(S[3]*o))*P)]+e[A+N+E])*S[4];C+=T*V<y.threshold*p?y.left_val:y.right_val}if(C<w){U=!1;break}}U&&(X.push({x:c,y:f,width:M,height:D,neighbor:1,confidence:C}),c+=O,W+=O)}return X},detect_multi_scale:function(e,t,r,a,n,i,o,s,l){void 0===s&&(s=1.2),void 0===l&&(l=1);for(var u=o.size[0],h=o.size[1],c=[];l*u<n&&l*h<i;)c=c.concat(this.detect_single_scale(e,t,r,a,n,i,l,o)),l*=s;return c},group_rectangles:function(e,r){void 0===r&&(r=1);var a,n,i=e.length,o=[];for(a=0;a<i;++a)o[a]={parent:-1,element:e[a],rank:0};for(a=0;a<i;++a)if(o[a].element){for(var s=a;-1!=o[s].parent;)s=o[s].parent;for(n=0;n<i;++n)if(a!=n&&o[n].element&&t(o[a].element,o[n].element)){for(var l=n;-1!=o[l].parent;)l=o[l].parent;if(l!=s){o[s].rank>o[l].rank?o[l].parent=s:(o[s].parent=l,o[s].rank==o[l].rank&&o[l].rank++,s=l);for(var u,h=n;-1!=o[h].parent;)u=h,h=o[h].parent,o[u].parent=s;for(h=a;-1!=o[h].parent;)u=h,h=o[h].parent,o[u].parent=s}}}var c=[],f=0;for(a=0;a<i;a++){n=-1;var d=a;if(o[d].element){for(;-1!=o[d].parent;)d=o[d].parent;o[d].rank>=0&&(o[d].rank=~f++),n=~o[d].rank}c[a]=n}var v=[];for(a=0;a<f+1;++a)v[a]={neighbors:0,x:0,y:0,width:0,height:0,confidence:0};for(a=0;a<i;++a){var p=e[a],g=c[a];0==v[g].neighbors&&(v[g].confidence=p.confidence),++v[g].neighbors,v[g].x+=p.x,v[g].y+=p.y,v[g].width+=p.width,v[g].height+=p.height,v[g].confidence=Math.max(v[g].confidence,p.confidence)}var _=[];for(a=0;a<f;++a)(i=v[a].neighbors)>=r&&_.push({x:(2*v[a].x+i)/(2*i),y:(2*v[a].y+i)/(2*i),width:(2*v[a].width+i)/(2*i),height:(2*v[a].height+i)/(2*i),neighbors:v[a].neighbors,confidence:v[a].confidence});var m=[];for(i=_.length,a=0;a<i;++a){p=_[a];var y=!0;for(n=0;n<i;++n){var b=_[n],x=.25*b.width+.5|0;if(a!=n&&p.x>=b.x-x&&p.y>=b.y-x&&p.x+p.width<=b.x+b.width+x&&p.y+p.height<=b.y+b.height+x&&(b.neighbors>Math.max(3,p.neighbors)||p.neighbors<3)){y=!1;break}}y&&m.push(p)}return m}});e.haar=r}(t),function(e){var r,a,n=(r=function(e,t){var r=.25*e.width+.5|0;return t.x<=e.x+r&&t.x>=e.x-r&&t.y<=e.y+r&&t.y>=e.y-r&&t.width<=1.5*e.width+.5|0&&1.5*t.width+.5|0>=e.width},a=new t.pyramid_t(1),{interval:4,scale:1.1486,next:5,scale_to:1,prepare_cascade:function(e){for(var t=e.stage_classifier.length,r=0;r<t;r++)for(var a=e.stage_classifier[r].feature,n=e.stage_classifier[r].count,i=e.stage_classifier[r]._feature=new Array(n),o=0;o<n;o++)i[o]={size:a[o].size,px:new Array(a[o].size),pz:new Array(a[o].size),nx:new Array(a[o].size),nz:new Array(a[o].size)}},build_pyramid:function(e,r,n,i){void 0===i&&(i=4);var o=e.cols,s=e.rows,l=0,u=0,h=0,c=!1,f=e,d=e,v=t.U8_t|t.C1_t;this.interval=i,this.scale=Math.pow(2,1/(this.interval+1)),this.next=this.interval+1|0,this.scale_to=Math.log(Math.min(o/r,s/n))/Math.log(this.scale)|0;var p=4*(this.scale_to+2*this.next)|0;for(a.levels!=p&&(a.levels=p,a.data=new Array(p),c=!0,a.data[0]=e),l=1;l<=this.interval;++l)u=o/Math.pow(this.scale,l)|0,h=s/Math.pow(this.scale,l)|0,f=a.data[l<<2],(c||u!=f.cols||h!=f.rows)&&(a.data[l<<2]=new t.matrix_t(u,h,v),f=a.data[l<<2]),t.imgproc.resample(e,f,u,h);for(l=this.next;l<this.scale_to+2*this.next;++l)f=a.data[l<<2],u=(d=a.data[(l<<2)-(this.next<<2)]).cols>>1,h=d.rows>>1,(c||u!=f.cols||h!=f.rows)&&(a.data[l<<2]=new t.matrix_t(u,h,v),f=a.data[l<<2]),t.imgproc.pyrdown(d,f);for(l=2*this.next;l<this.scale_to+2*this.next;++l)u=(d=a.data[(l<<2)-(this.next<<2)]).cols>>1,h=d.rows>>1,f=a.data[1+(l<<2)],(c||u!=f.cols||h!=f.rows)&&(a.data[1+(l<<2)]=new t.matrix_t(u,h,v),f=a.data[1+(l<<2)]),t.imgproc.pyrdown(d,f,1,0),f=a.data[2+(l<<2)],(c||u!=f.cols||h!=f.rows)&&(a.data[2+(l<<2)]=new t.matrix_t(u,h,v),f=a.data[2+(l<<2)]),t.imgproc.pyrdown(d,f,0,1),f=a.data[3+(l<<2)],(c||u!=f.cols||h!=f.rows)&&(a.data[3+(l<<2)]=new t.matrix_t(u,h,v),f=a.data[3+(l<<2)]),t.imgproc.pyrdown(d,f,1,1);return a},detect:function(e,t){var r,a,n,i,o,s=this.scale,l=this.next,u=this.scale_to,h=0,c=0,f=0,d=0,v=0,p=0,g=0,_=0,m=0,y=0,b=0,x=0,k=0,w=0,C=0,T=0,S=0,I=0,A=!0,R=!0,N=1,E=1,F=[0,1,0,1],M=[0,0,1,1],D=[],O=e.data,L=[],z=[0,0,0],B=[0,0,0],P=[0,0,0];for(h=0;h<u;h++){for(T=O[(C=h<<2)+(l<<3)].cols-(t.width>>2),S=O[C+(l<<3)].rows-(t.height>>2),B[0]=1*O[C].cols,B[1]=1*O[C+(l<<2)].cols,B[2]=1*O[C+(l<<3)].cols,P[0]=4*O[C].cols-4*T,P[1]=2*O[C+(l<<2)].cols-2*T,P[2]=1*O[C+(l<<3)].cols-1*T,_=t.stage_classifier.length,c=0;c<_;c++)for(n=t.stage_classifier[c].feature,a=t.stage_classifier[c]._feature,m=t.stage_classifier[c].count,f=0;f<m;f++)for(i=a[f],y=0|(o=n[f]).size,g=0;g<y;g++)i.px[g]=1*o.px[g]+o.py[g]*B[o.pz[g]],i.pz[g]=o.pz[g],i.nx[g]=1*o.nx[g]+o.ny[g]*B[o.nz[g]],i.nz[g]=o.nz[g];for(L[0]=O[C].data,L[1]=O[C+(l<<2)].data,g=0;g<4;g++)for(L[2]=O[C+(l<<3)+g].data,z[0]=2*F[g]+M[g]*(2*O[C].cols),z[1]=1*F[g]+M[g]*(1*O[C+(l<<2)].cols),z[2]=0,p=0;p<S;p++){for(v=0;v<T;v++){for(I=0,A=!0,_=t.stage_classifier.length,c=0;c<_;c++){for(I=0,r=t.stage_classifier[c].alpha,a=t.stage_classifier[c]._feature,m=t.stage_classifier[c].count,f=0;f<m;f++)if((x=L[(i=a[f]).pz[0]][z[i.pz[0]]+i.px[0]])<=(k=L[i.nz[0]][z[i.nz[0]]+i.nx[0]]))I+=r[f<<1];else{for(R=!0,y=i.size,w=1;w<y;w++){if(i.pz[w]>=0&&(b=L[i.pz[w]][z[i.pz[w]]+i.px[w]])<x){if(b<=k){R=!1;break}x=b}if(i.nz[w]>=0&&(d=L[i.nz[w]][z[i.nz[w]]+i.nx[w]])>k){if(x<=d){R=!1;break}k=d}}I+=R?r[1+(f<<1)]:r[f<<1]}if(I<t.stage_classifier[c].threshold){A=!1;break}}A&&(D.push({x:(4*v+2*F[g])*N,y:(4*p+2*M[g])*E,width:t.width*N,height:t.height*E,neighbor:1,confidence:I}),++v,z[0]+=4,z[1]+=2,z[2]+=1),z[0]+=4,z[1]+=2,z[2]+=1}z[0]+=P[0],z[1]+=P[1],z[2]+=P[2]}N*=s,E*=s}return D},group_rectangles:function(e,t){void 0===t&&(t=1);var a,n,i=e.length,o=[];for(a=0;a<i;++a)o[a]={parent:-1,element:e[a],rank:0};for(a=0;a<i;++a)if(o[a].element){for(var s=a;-1!=o[s].parent;)s=o[s].parent;for(n=0;n<i;++n)if(a!=n&&o[n].element&&r(o[a].element,o[n].element)){for(var l=n;-1!=o[l].parent;)l=o[l].parent;if(l!=s){o[s].rank>o[l].rank?o[l].parent=s:(o[s].parent=l,o[s].rank==o[l].rank&&o[l].rank++,s=l);for(var u,h=n;-1!=o[h].parent;)u=h,h=o[h].parent,o[u].parent=s;for(h=a;-1!=o[h].parent;)u=h,h=o[h].parent,o[u].parent=s}}}var c=[],f=0;for(a=0;a<i;a++){n=-1;var d=a;if(o[d].element){for(;-1!=o[d].parent;)d=o[d].parent;o[d].rank>=0&&(o[d].rank=~f++),n=~o[d].rank}c[a]=n}var v=[];for(a=0;a<f+1;++a)v[a]={neighbors:0,x:0,y:0,width:0,height:0,confidence:0};for(a=0;a<i;++a){var p=e[a],g=c[a];0==v[g].neighbors&&(v[g].confidence=p.confidence),++v[g].neighbors,v[g].x+=p.x,v[g].y+=p.y,v[g].width+=p.width,v[g].height+=p.height,v[g].confidence=Math.max(v[g].confidence,p.confidence)}var _=[];for(a=0;a<f;++a)(i=v[a].neighbors)>=t&&_.push({x:(2*v[a].x+i)/(2*i),y:(2*v[a].y+i)/(2*i),width:(2*v[a].width+i)/(2*i),height:(2*v[a].height+i)/(2*i),neighbors:v[a].neighbors,confidence:v[a].confidence});var m=[];for(i=_.length,a=0;a<i;++a){p=_[a];var y=!0;for(n=0;n<i;++n){var b=_[n],x=.25*b.width+.5|0;if(a!=n&&p.x>=b.x-x&&p.y>=b.y-x&&p.x+p.width<=b.x+b.width+x&&p.y+p.height<=b.y+b.height+x&&(b.neighbors>Math.max(3,p.neighbors)||p.neighbors<3)){y=!1;break}}y&&m.push(p)}return m}});e.bbf=n}(t),e.exports=t})),findFaceWorker=function(e){var t,r,a=self,n=n||{REVISION:"ALPHA"};!function(e){var t=1024,r=new Int32Array([-1,1,4,-1,4,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,8]),a=function(e){return 65280&e},i=function(e){return 255&e},o=function(e){return r[(65280&e)>>8]},s=function(e,t){this.size=-8&(e+7|0),void 0===t?this.buffer=new ArrayBuffer(this.size):(this.buffer=t,this.size=t.length),this.u8=new Uint8Array(this.buffer),this.i32=new Int32Array(this.buffer),this.f32=new Float32Array(this.buffer),this.f64=new Float64Array(this.buffer)},l=function(){function e(e,r,n,o){this.type=0|a(n),this.channel=0|i(n),this.cols=0|e,this.rows=0|r,void 0===o?this.allocate():(this.buffer=o,this.data=256&this.type?this.buffer.u8:512&this.type?this.buffer.i32:this.type&t?this.buffer.f32:this.buffer.f64)}return e.prototype.allocate=function(){delete this.data,delete this.buffer,this.buffer=new s(this.cols*o(this.type)*this.channel*this.rows),this.data=256&this.type?this.buffer.u8:512&this.type?this.buffer.i32:this.type&t?this.buffer.f32:this.buffer.f64},e.prototype.copy_to=function(e){for(var t=e.data,r=this.data,a=0,n=this.cols*this.rows*this.channel|0;a<n-4;a+=4)t[a]=r[a],t[a+1]=r[a+1],t[a+2]=r[a+2],t[a+3]=r[a+3];for(;a<n;++a)t[a]=r[a]},e.prototype.resize=function(e,t,r){void 0===r&&(r=this.channel),e*o(this.type)*r*t>this.buffer.size?(this.cols=e,this.rows=t,this.channel=r,this.allocate()):(this.cols=e,this.rows=t,this.channel=r)},e}(),u=function(){function e(e){this.levels=0|e,this.data=new Array(e),this.pyrdown=n.imgproc.pyrdown}return e.prototype.allocate=function(e,t,r){for(var a=this.levels;--a>=0;)this.data[a]=new l(e>>a,t>>a,r)},e.prototype.build=function(e,t){void 0===t&&(t=!0);var r=2,a=e,n=this.data[0];if(!t)for(var i=e.cols*e.rows;--i>=0;)n.data[i]=e.data[i];for(this.pyrdown(a,n=this.data[1]);r<this.levels;++r)this.pyrdown(a=n,n=this.data[r])},e}();e.U8_t=256,e.S32_t=512,e.F32_t=t,e.S64_t=2048,e.F64_t=4096,e.C1_t=1,e.C2_t=2,e.C3_t=3,e.C4_t=4,e.U8C1_t=257,e.U8C3_t=259,e.U8C4_t=260,e.F32C1_t=1|t,e.F32C2_t=2|t,e.S32C1_t=513,e.S32C2_t=514,e.EPSILON=1.192092896e-7,e.FLT_MIN=1e-37,e.COLOR_RGBA2GRAY=0,e.COLOR_RGB2GRAY=1,e.COLOR_BGRA2GRAY=2,e.COLOR_BGR2GRAY=3,e.BOX_BLUR_NOSCALE=1,e.SVD_U_T=1,e.SVD_V_T=2,e.get_data_type=a,e.get_channel=i,e.get_data_type_size=o,e.data_t=s,e.matrix_t=l,e.pyramid_t=u,e.keypoint_t=function(e,t,r,a,n){void 0===e&&(e=0),void 0===t&&(t=0),void 0===r&&(r=0),void 0===a&&(a=0),void 0===n&&(n=-1),this.x=e,this.y=t,this.score=r,this.level=a,this.angle=n}}(n),t=n,r=function(){var e,t,r=function(){function e(e){this.next=null,this.data=new n.data_t(e),this.size=this.data.size,this.buffer=this.data.buffer,this.u8=this.data.u8,this.i32=this.data.i32,this.f32=this.data.f32,this.f64=this.data.f64}return e.prototype.resize=function(e){delete this.data,this.data=new n.data_t(e),this.size=this.data.size,this.buffer=this.data.buffer,this.u8=this.data.u8,this.i32=this.data.i32,this.f32=this.data.f32,this.f64=this.data.f64},e}();return{allocate:function(a,n){e=t=new r(n);for(var i=0;i<a;++i){var o=new r(n);t=t.next=o}},get_buffer:function(t){var r=e;return e=e.next,t>r.size&&r.resize(t),r},put_buffer:function(e){t=t.next=e}}}(),t.cache=r,r.allocate(30,2560),function(e){var t,r=(t=new Int32Array(96),{get_gaussian_kernel:function(e,t,r,a){var i=0,o=0,s=0,l=0,u=0,h=0,c=n.cache.get_buffer(e<<2),f=c.f32;if(1==(1&e)&&e<=7&&t<=0)switch(e>>1){case 0:f[0]=1,h=1;break;case 1:f[0]=.25,f[1]=.5,f[2]=.25,h=1;break;case 2:f[0]=.0625,f[1]=.25,f[2]=.375,f[3]=.25,f[4]=.0625,h=1;break;case 3:f[0]=.03125,f[1]=.109375,f[2]=.21875,f[3]=.28125,f[4]=.21875,f[5]=.109375,f[6]=.03125,h=1}else for(u=-.5/((l=t>0?t:.3*(.5*(e-1)-1)+.8)*l);i<e;++i)o=i-.5*(e-1),s=Math.exp(u*o*o),f[i]=s,h+=s;if(a&n.U8_t)for(h=256/h,i=0;i<e;++i)r[i]=f[i]*h+.5|0;else for(h=1/h,i=0;i<e;++i)r[i]=f[i]*h;n.cache.put_buffer(c)},perspective_4point_transform:function(e,t,r,a,n,i,o,s,l,u,h,c,f,d,v,p,g){var _=t,m=u,y=o,b=_*m*y,x=v,k=_*x,w=m*k,C=h,T=_*C,S=i,I=r,A=d,R=I*A,N=R*S,E=A*S*C,F=A*y,M=A*C,D=m*y,O=x*m,L=x*S,z=C*S,B=1/(F-M-D+O-L+z),P=_*A,V=I*S,U=y*_,W=x*U,G=I*m,H=R*C,j=I*C*S,q=y*x*m,X=x*I,K=-(w-b+T*S-S*k-R*m+N-E+F*m)*B,Q=(b-w-P*y+P*C+N-m*V+L*m-E)*B,Y=_,J=(-C*k+W+G*y-R*y+H-j+L*C-q)*B,Z=(U*C-W-X*m+H-j+X*S+q-F*C)*B,$=I,ee=(-T+U+G-V+M-F-O+L)*B,te=(-k+T+R-G+L-z-F+D)*B,re=-((w=(m=c)*(k=(_=a)*(x=g)))-(b=_*m*(y=l))+(T=_*(C=f))*(S=s)-S*k-(R=(I=n)*(A=p))*m+(N=R*S)-(E=A*S*C)+(F=A*y)*m)*(B=1/(F-(M=A*C)-(D=m*y)+(O=x*m)-(L=x*S)+(z=C*S))),ae=(b-w-(P=_*A)*y+P*C+N-m*(V=I*S)+L*m-E)*B,ne=_,ie=(-C*k+(W=x*(U=y*_))+(G=I*m)*y-R*y+(H=R*C)-(j=I*C*S)+L*C-(q=y*x*m))*B,oe=(U*C-W-(X=x*I)*m+H-j+X*S+q-F*C)*B,se=I,le=(-T+U+G-V+M-F-O+L)*B,ue=(-k+T+R-G+L-z-F+D)*B,he=Y*ee;A=1/((y=K*Z)-(b=K*$)*te-(k=J*Q)+(w=Y*J)*te+(T=Q*ee)*$-he*Z);var ce=-J*te+Z*ee,fe=K-he;V=K*te-T;var de=b-w,ve=y-k,pe=(z=Y*te-Q)*A,ge=(U=-Q*$+Y*Z)*A,_e=e.data;_e[0]=re*(j=(m=Z-te*$)*A)+ae*((N=$*ee-J)*A)-ne*(ce*A),_e[1]=re*pe+ae*(fe*A)-ne*(V*A),_e[2]=-re*ge-ae*(de*A)+ne*(ve*A),_e[3]=ie*j+oe*(N*A)-se*(ce*A),_e[4]=ie*pe+oe*(fe*A)-se*(V*A),_e[5]=-ie*ge-oe*(de*A)+se*(ve*A),_e[6]=le*j+ue*(N*A)-ce*A,_e[7]=le*pe+ue*(fe*A)-V*A,_e[8]=-le*ge-ue*(de*A)+ve*A},qsort:function(e,r,a,n){var i,o,s,l,u=0,h=0,c=0,f=0,d=0,v=0,p=0,g=0,_=0,m=0,y=0,b=0,x=0,k=0,w=0,C=0,T=0,S=0,I=t;if(!(a-r+1<=1))for(I[0]=r,I[1]=a;u>=0;)for(h=I[u<<1],c=I[1+(u<<1)],u--;;){if((d=c-h+1)<=7){for(p=h+1;p<=c;p++)for(g=p;g>h&&n(e[g],e[g-1]);g--)i=e[g],e[g]=e[g-1],e[g-1]=i;break}for(S=0,m=h,b=c,k=h+(d>>1),d>40&&(l=e[T=h+((_=d>>3)<<1)],h=n(o=e[w=h],s=e[C=h+_])?n(s,l)?C:n(o,l)?T:w:n(l,s)?C:n(o,l)?w:T,l=e[T=k+_],k=n(o=e[w=k-_],s=e[C=k])?n(s,l)?C:n(o,l)?T:w:n(l,s)?C:n(o,l)?w:T,l=e[T=c],c=n(o=e[w=c-(_<<1)],s=e[C=c-_])?n(s,l)?C:n(o,l)?T:w:n(l,s)?C:n(o,l)?w:T),l=e[T=c],(k=n(o=e[w=h],s=e[C=k])?n(s,l)?C:n(o,l)?T:w:n(l,s)?C:n(o,l)?w:T)!=m&&(i=e[k],e[k]=e[m],e[m]=i,k=m),h=y=m+1,c=x=b,o=e[k];;){for(;h<=c&&!n(o,e[h]);)n(e[h],o)||(h>y&&(i=e[y],e[y]=e[h],e[h]=i),S=1,y++),h++;for(;h<=c&&!n(e[c],o);)n(o,e[c])||(c<x&&(i=e[x],e[x]=e[c],e[c]=i),S=1,x--),c--;if(h>c)break;i=e[h],e[h]=e[c],e[c]=i,S=1,h++,c--}if(0==S){for(c=b,p=(h=m)+1;p<=c;p++)for(g=p;g>h&&n(e[g],e[g-1]);g--)i=e[g],e[g]=e[g-1],e[g-1]=i;break}for(v=h-(d=Math.min(y-m,h-y))|0,f=0;f<d;++f,++v)i=e[m+f],e[m+f]=e[v],e[v]=i;for(v=b-(d=Math.min(b-x,x-c))+1|0,f=0;f<d;++f,++v)i=e[h+f],e[h+f]=e[v],e[v]=i;if(v=x-c,(d=h-y)>1)v>1?d>v?(I[++u<<1]=m,I[1+(u<<1)]=m+d-1,h=b-v+1,c=b):(I[++u<<1]=b-v+1,I[1+(u<<1)]=b,h=m,c=m+d-1):(h=m,c=m+d-1);else{if(!(v>1))break;h=b-v+1,c=b}}},median:function(e,t,r){for(var a,n=0,i=0,o=0,s=t+r>>1;;){if(r<=t)return e[s];if(r==t+1)return e[t]>e[r]&&(a=e[t],e[t]=e[r],e[r]=a),e[s];for(e[n=t+r>>1]>e[r]&&(a=e[n],e[n]=e[r],e[r]=a),e[t]>e[r]&&(a=e[t],e[t]=e[r],e[r]=a),e[n]>e[t]&&(a=e[n],e[n]=e[t],e[t]=a),a=e[n],e[n]=e[i=t+1],e[i]=a,o=r;;){do{++i}while(e[t]>e[i]);do{--o}while(e[o]>e[t]);if(o<i)break;a=e[i],e[i]=e[o],e[o]=a}a=e[t],e[t]=e[o],e[o]=a,o<=s?t=i:o>=s&&(r=o-1)}return 0}});e.math=r}(n),function(e){e.matmath={identity:function(e,t){void 0===t&&(t=1);for(var r=e.data,a=e.cols,n=a+1|0,i=e.rows*a,o=i;--i>=0;)r[i]=0;for(i=o,o=0;o<i;)r[o]=t,o+=n},transpose:function(e,t){for(var r=0,a=0,n=t.rows,i=t.cols,o=0,s=0,l=0,u=t.data,h=e.data;r<n;s+=1,o+=i,r++)for(l=s,a=0;a<i;l+=n,a++)h[l]=u[o+a]},multiply:function(e,t,r){for(var a=0,n=0,i=0,o=0,s=0,l=0,u=0,h=0,c=t.cols,f=t.rows,d=r.cols,v=t.data,p=r.data,g=e.data,_=0;a<f;o+=c,a++)for(u=0,n=0;n<d;h++,u++,n++){for(l=u,s=o,_=0,i=0;i<c;s++,l+=d,i++)_+=v[s]*p[l];g[h]=_}},multiply_ABt:function(e,t,r){for(var a=0,n=0,i=0,o=0,s=0,l=0,u=0,h=t.cols,c=t.rows,f=r.rows,d=t.data,v=r.data,p=e.data,g=0;a<c;o+=h,a++)for(l=0,n=0;n<f;u++,n++){for(s=o,g=0,i=0;i<h;s++,l++,i++)g+=d[s]*v[l];p[u]=g}},multiply_AtB:function(e,t,r){for(var a=0,n=0,i=0,o=0,s=0,l=0,u=0,h=0,c=t.cols,f=t.rows,d=r.cols,v=t.data,p=r.data,g=e.data,_=0;a<c;o++,a++)for(u=0,n=0;n<d;h++,u++,n++){for(l=u,s=o,_=0,i=0;i<f;s+=c,l+=d,i++)_+=v[s]*p[l];g[h]=_}},multiply_AAt:function(e,t){for(var r=0,a=0,n=0,i=0,o=0,s=0,l=0,u=0,h=0,c=t.cols,f=t.rows,d=t.data,v=e.data,p=0;r<f;i+=f+1,o=s,r++)for(u=i,h=i,l=o,a=r;a<f;u++,h+=f,a++){for(s=o,p=0,n=0;n<c;n++)p+=d[s++]*d[l++];v[u]=p,v[h]=p}},multiply_AtA:function(e,t){for(var r=0,a=0,n=0,i=0,o=0,s=0,l=0,u=0,h=0,c=t.cols,f=t.rows,d=t.data,v=e.data,p=0;r<c;l+=c,r++)for(i=r,u=h=l+r,a=r;a<c;u++,h+=c,a++){for(o=i,s=a,p=0,n=0;n<f;o+=c,s+=c,n++)p+=d[o]*d[s];v[u]=p,v[h]=p}},identity_3x3:function(e,t){void 0===t&&(t=1);var r=e.data;r[0]=r[4]=r[8]=t,r[1]=r[2]=r[3]=0,r[5]=r[6]=r[7]=0},invert_3x3:function(e,t){var r=e.data,a=t.data,n=r[4],i=r[8],o=r[5],s=r[7],l=r[0],u=l*n,h=l*o,c=r[3],f=r[1],d=c*f,v=r[2],p=c*v,g=r[6],_=g*f,m=g*v,y=1/(u*i-h*s-d*i+p*s+_*o-m*n);a[0]=(n*i-o*s)*y,a[1]=-(f*i-v*s)*y,a[2]=-(-f*o+v*n)*y,a[3]=-(c*i-o*g)*y,a[4]=(l*i-m)*y,a[5]=-(h-p)*y,a[6]=-(-c*s+n*g)*y,a[7]=-(l*s-_)*y,a[8]=(u-d)*y},multiply_3x3:function(e,t,r){var a=e.data,n=t.data,i=r.data,o=n[0],s=n[1],l=n[2],u=n[3],h=n[4],c=n[5],f=n[6],d=n[7],v=n[8],p=i[0],g=i[1],_=i[2],m=i[3],y=i[4],b=i[5],x=i[6],k=i[7],w=i[8];a[0]=o*p+s*m+l*x,a[1]=o*g+s*y+l*k,a[2]=o*_+s*b+l*w,a[3]=u*p+h*m+c*x,a[4]=u*g+h*y+c*k,a[5]=u*_+h*b+c*w,a[6]=f*p+d*m+v*x,a[7]=f*g+d*y+v*k,a[8]=f*_+d*b+v*w},mat3x3_determinant:function(e){var t=e.data;return t[0]*t[4]*t[8]-t[0]*t[5]*t[7]-t[3]*t[1]*t[8]+t[3]*t[2]*t[7]+t[6]*t[1]*t[5]-t[6]*t[2]*t[4]},determinant_3x3:function(e,t,r,a,n,i,o,s,l){return e*n*l-e*i*s-a*t*l+a*r*s+o*t*i-o*r*n}}}(n),function(e){var t,r,a=(t=function(e,t,r,a){a=e[t],e[t]=e[r],e[r]=a},r=function(e,t){return(e=Math.abs(e))>(t=Math.abs(t))?(t/=e,e*Math.sqrt(1+t*t)):t>0?(e/=t,t*Math.sqrt(1+e*e)):0},{lu_solve:function(e,r){var a,i,o,s,l=0,u=0,h=0,c=1,f=e.cols,d=e.data,v=r.data;for(l=0;l<f;l++){for(h=l,u=l+1;u<f;u++)Math.abs(d[u*f+l])>Math.abs(d[h*f+l])&&(h=u);if(Math.abs(d[h*f+l])<n.EPSILON)return 0;if(h!=l){for(u=l;u<f;u++)t(d,l*f+u,h*f+u,a);t(v,l,h,a),c=-c}for(o=-1/d[l*f+l],u=l+1;u<f;u++){for(i=d[u*f+l]*o,h=l+1;h<f;h++)d[u*f+h]+=i*d[l*f+h];v[u]+=i*v[l]}d[l*f+l]=-o}for(l=f-1;l>=0;l--){for(s=v[l],h=l+1;h<f;h++)s-=d[l*f+h]*v[h];v[l]=s*d[l*f+l]}return 1},cholesky_solve:function(e,t){var r,a,n=0,i=0,o=0,s=0,l=0,u=0,h=0,c=e.cols,f=e.data,d=t.data;for(n=0;n<c;n++)for(a=1,l=s=n*c,i=n;i<c;i++){for(r=f[l+n],o=0;o<n;o++)r-=f[o*c+n]*f[l+o];if(i==n){if(f[l+n]=r,0==r)return 0;a=1/r}else f[s+i]=r,f[l+n]=r*a;l+=c}for(s=0,u=0;u<c;u++){for(r=d[u],h=0;h<u;h++)r-=f[s+h]*d[h];d[u]=r,s+=c}for(s=0,u=0;u<c;u++)d[u]/=f[s+u],s+=c;for(u=c-1;u>=0;u--){for(r=d[u],s=(h=u+1)*c;h<c;h++)r-=f[s+u]*d[h],s+=c;d[u]=r}return 1},svd_decompose:function(e,a,i,o,s){void 0===s&&(s=0);var l=0,u=0,h=e.rows,c=e.cols,f=h,d=c,v=e.type|n.C1_t;f<d&&(l=1,u=f,f=d,d=u);var p=n.cache.get_buffer(f*f<<3),g=n.cache.get_buffer(d<<3),_=n.cache.get_buffer(d*d<<3),m=new n.matrix_t(f,f,v,p.data),y=new n.matrix_t(1,d,v,g.data),b=new n.matrix_t(d,d,v,_.data);if(0==l)n.matmath.transpose(m,e);else{for(u=0;u<c*h;u++)m.data[u]=e.data[u];for(;u<d*f;u++)m.data[u]=0}if(function(e,a,i,o,s,l,u,h){for(var c=2*n.EPSILON,f=n.FLT_MIN,d=0,v=0,p=0,g=0,_=Math.max(l,30),m=0,y=0,b=0,x=0,k=0,w=0,C=0,T=0,S=0,I=0,A=0,R=0,N=0,E=0,F=0,M=0,D=4660,O=0,L=0,z=n.cache.get_buffer(u<<3),B=z.f64;d<u;d++){for(p=0,A=0;p<l;p++)A+=(T=e[d*a+p])*T;if(B[d]=A,o){for(p=0;p<u;p++)o[d*s+p]=0;o[d*s+d]=1}}for(;g<_;g++){for(k=0,d=0;d<u-1;d++)for(v=d+1;v<u;v++){for(E=B[d],F=0,M=B[v],p=2,F+=e[m=d*a|0]*e[y=v*a|0],F+=e[m+1]*e[y+1];p<l;p++)F+=e[m+p]*e[y+p];if(!(Math.abs(F)<=c*Math.sqrt(E*M))){for(N=r(F*=2,R=E-M),R<0?w=F/(N*(C=Math.sqrt(.5*(N-R)/N))*2):C=F/(N*(w=Math.sqrt((N+R)/(2*N)))*2),E=0,M=0,p=2,I=-C*e[m]+w*e[y],e[m]=S=w*e[m]+C*e[y],e[y]=I,E+=S*S,M+=I*I,I=-C*e[m+1]+w*e[y+1],e[m+1]=S=w*e[m+1]+C*e[y+1],e[y+1]=I,E+=S*S,M+=I*I;p<l;p++)I=-C*e[m+p]+w*e[y+p],e[m+p]=S=w*e[m+p]+C*e[y+p],e[y+p]=I,E+=S*S,M+=I*I;if(B[d]=E,B[v]=M,k=1,o)for(p=2,I=-C*o[b=d*s|0]+w*o[x=v*s|0],o[b]=S=w*o[b]+C*o[x],o[x]=I,I=-C*o[b+1]+w*o[x+1],o[b+1]=S=w*o[b+1]+C*o[x+1],o[x+1]=I;p<u;p++)I=-C*o[b+p]+w*o[x+p],o[b+p]=S=w*o[b+p]+C*o[x+p],o[x+p]=I}}if(0==k)break}for(d=0;d<u;d++){for(p=0,A=0;p<l;p++)A+=(T=e[d*a+p])*T;B[d]=Math.sqrt(A)}for(d=0;d<u-1;d++){for(v=d,p=d+1;p<u;p++)B[v]<B[p]&&(v=p);if(d!=v&&(t(B,d,v,A),o)){for(p=0;p<l;p++)t(e,d*a+p,v*a+p,T);for(p=0;p<u;p++)t(o,d*s+p,v*s+p,T)}}for(d=0;d<u;d++)i[d]=B[d];if(o){for(d=0;d<h;d++){for(A=d<u?B[d]:0;A<=f;){for(O=1/l,p=0;p<l;p++)e[d*a+p]=0!=(256&(D=214013*D+2531011)>>16)?O:-O;for(g=0;g<2;g++)for(v=0;v<d;v++){for(A=0,p=0;p<l;p++)A+=e[d*a+p]*e[v*a+p];for(L=0,p=0;p<l;p++)e[d*a+p]=T=e[d*a+p]-A*e[v*a+p],L+=Math.abs(T);for(L=L?1/L:0,p=0;p<l;p++)e[d*a+p]*=L}for(A=0,p=0;p<l;p++)A+=(T=e[d*a+p])*T;A=Math.sqrt(A)}for(C=1/A,p=0;p<l;p++)e[d*a+p]*=C}n.cache.put_buffer(z)}else n.cache.put_buffer(z)}(m.data,f,y.data,b.data,d,f,d,f),a){for(u=0;u<d;u++)a.data[u]=y.data[u];for(;u<c;u++)a.data[u]=0}if(0==l){if(i&&s&n.SVD_U_T)for(u=f*f;--u>=0;)i.data[u]=m.data[u];else i&&n.matmath.transpose(i,m);if(o&&s&n.SVD_V_T)for(u=d*d;--u>=0;)o.data[u]=b.data[u];else o&&n.matmath.transpose(o,b)}else{if(i&&s&n.SVD_U_T)for(u=d*d;--u>=0;)i.data[u]=b.data[u];else i&&n.matmath.transpose(i,b);if(o&&s&n.SVD_V_T)for(u=f*f;--u>=0;)o.data[u]=m.data[u];else o&&n.matmath.transpose(o,m)}n.cache.put_buffer(p),n.cache.put_buffer(g),n.cache.put_buffer(_)},svd_solve:function(e,t,r){var a,i=0,o=0,s=0,l=0,u=0,h=e.rows,c=e.cols,f=0,d=0,v=e.type|n.C1_t,p=n.cache.get_buffer(h*h<<3),g=n.cache.get_buffer(c<<3),_=n.cache.get_buffer(c*c<<3),m=new n.matrix_t(h,h,v,p.data),y=new n.matrix_t(1,c,v,g.data),b=new n.matrix_t(c,c,v,_.data),x=r.data,k=m.data,w=y.data,C=b.data;for(this.svd_decompose(e,y,m,b,0),a=n.EPSILON*w[0]*c;i<c;i++,u+=c){for(d=0,o=0;o<c;o++)if(w[o]>a){for(s=0,f=0,l=0;s<h;s++,l+=c)f+=k[l+o]*x[s];d+=f*C[u+o]/w[o]}t.data[i]=d}n.cache.put_buffer(p),n.cache.put_buffer(g),n.cache.put_buffer(_)},svd_invert:function(e,t){var r,a=0,i=0,o=0,s=0,l=0,u=0,h=t.rows,c=t.cols,f=0,d=t.type|n.C1_t,v=n.cache.get_buffer(h*h<<3),p=n.cache.get_buffer(c<<3),g=n.cache.get_buffer(c*c<<3),_=new n.matrix_t(h,h,d,v.data),m=new n.matrix_t(1,c,d,p.data),y=new n.matrix_t(c,c,d,g.data),b=e.data,x=_.data,k=m.data,w=y.data;for(this.svd_decompose(t,m,_,y,0),r=n.EPSILON*k[0]*c;a<c;a++,l+=c)for(i=0,s=0;i<h;i++,u++){for(o=0,f=0;o<c;o++,s++)k[o]>r&&(f+=w[l+o]*x[s]/k[o]);b[u]=f}n.cache.put_buffer(v),n.cache.put_buffer(p),n.cache.put_buffer(g)},eigenVV:function(e,a,i){for(var o=e.cols,s=o*o,l=e.type|n.C1_t,u=n.cache.get_buffer(o*o<<3),h=n.cache.get_buffer(o<<3),c=new n.matrix_t(o,o,l,u.data),f=new n.matrix_t(1,o,l,h.data);--s>=0;)c.data[s]=e.data[s];if(function(e,a,i,o,s,l){var u=n.EPSILON,h=0,c=0,f=0,d=0,v=0,p=0,g=0,_=0,m=0,y=l*l*30,b=0,x=0,k=0,w=0,C=0,T=0,S=0,I=0,A=0,R=n.cache.get_buffer(l<<2),N=n.cache.get_buffer(l<<2),E=R.i32,F=N.i32;if(o)for(;h<l;h++){for(f=h*s,c=0;c<l;c++)o[f+c]=0;o[f+h]=1}for(f=0;f<l;f++){if(i[f]=e[(a+1)*f],f<l-1){for(d=f+1,b=Math.abs(e[a*f+d]),h=f+2;h<l;h++)b<(x=Math.abs(e[a*f+h]))&&(b=x,d=h);E[f]=d}if(f>0){for(d=0,b=Math.abs(e[f]),h=1;h<f;h++)b<(x=Math.abs(e[a*h+f]))&&(b=x,d=h);F[f]=d}}if(l>1)for(;m<y;m++){for(f=0,b=Math.abs(e[E[0]]),h=1;h<l-1;h++)b<(x=Math.abs(e[a*h+E[h]]))&&(b=x,f=h);for(v=E[f],h=1;h<l;h++)b<(x=Math.abs(e[a*F[h]+h]))&&(b=x,f=F[h],v=h);if(k=e[a*f+v],Math.abs(k)<=u)break;for(w=.5*(i[v]-i[f]),S=(C=Math.abs(w)+r(k,w))/(T=r(k,C)),T=k/T,C=k/C*k,w<0&&(T=-T,C=-C),e[a*f+v]=0,i[f]-=C,i[v]+=C,h=0;h<f;h++)e[g=a*h+f]=(I=e[g])*S-(A=e[_=a*h+v])*T,e[_]=I*T+A*S;for(h=f+1;h<v;h++)e[g=a*f+h]=(I=e[g])*S-(A=e[_=a*h+v])*T,e[_]=I*T+A*S;for(g=a*f+(h=v+1),_=a*v+h;h<l;h++,g++,_++)e[g]=(I=e[g])*S-(A=e[_])*T,e[_]=I*T+A*S;if(o)for(g=s*f,_=s*v,h=0;h<l;h++,g++,_++)o[g]=(I=o[g])*S-(A=o[_])*T,o[_]=I*T+A*S;for(c=0;c<2;c++){if((p=0==c?f:v)<l-1){for(d=p+1,b=Math.abs(e[a*p+d]),h=p+2;h<l;h++)b<(x=Math.abs(e[a*p+h]))&&(b=x,d=h);E[p]=d}if(p>0){for(d=0,b=Math.abs(e[p]),h=1;h<p;h++)b<(x=Math.abs(e[a*h+p]))&&(b=x,d=h);F[p]=d}}}for(f=0;f<l-1;f++){for(d=f,h=f+1;h<l;h++)i[d]<i[h]&&(d=h);if(f!=d&&(t(i,d,f,b),o))for(h=0;h<l;h++)t(o,s*d+h,s*f+h,b)}n.cache.put_buffer(R),n.cache.put_buffer(N)}(c.data,o,f.data,a?a.data:null,o,o),i)for(;--o>=0;)i.data[o]=f.data[o];n.cache.put_buffer(u),n.cache.put_buffer(h)}});e.linalg=a}(n),function(e){var t=function(){var e=function(e){return e*e},t=new n.matrix_t(3,3,n.F32_t|n.C1_t),r=new n.matrix_t(3,3,n.F32_t|n.C1_t),a=new n.matrix_t(6,6,n.F32_t|n.C1_t),i=new n.matrix_t(6,1,n.F32_t|n.C1_t),o=function(){function o(){}return o.prototype.run=function(e,o,s,l){var u,h,c=0,f=0,d=s.type|n.C1_t,v=s.data,p=t.data,g=r.data,_=0,m=0;!function(e,t,r,a,n){for(var i,o,s=0,l=0,u=0,h=0,c=0,f=0,d=0,v=0,p=0;s<n;++s)l+=e[s].x,u+=e[s].y,c+=t[s].x,f+=t[s].y;for(l/=n,u/=n,c/=n,f/=n,s=0;s<n;++s)v=e[s].x-l,p=e[s].y-u,h+=Math.sqrt(v*v+p*p),v=t[s].x-c,p=t[s].y-f,d+=Math.sqrt(v*v+p*p);h/=n,d/=n,i=Math.SQRT2/h,o=Math.SQRT2/d,r[0]=r[4]=i,r[2]=-l*i,r[5]=-u*i,r[1]=r[3]=r[6]=r[7]=0,r[8]=1,a[0]=a[4]=o,a[2]=-c*o,a[5]=-f*o,a[1]=a[3]=a[6]=a[7]=0,a[8]=1}(e,o,p,g,l);for(var y=n.cache.get_buffer(2*l*6<<3),b=n.cache.get_buffer(2*l<<3),x=new n.matrix_t(6,2*l,d,y.data),k=new n.matrix_t(1,2*l,d,b.data),w=x.data,C=k.data;c<l;++c)h=o[c],m=p[3]*(u=e[c]).x+p[4]*u.y+p[5],w[f=2*c*6]=_=p[0]*u.x+p[1]*u.y+p[2],w[f+1]=m,w[f+2]=1,w[f+3]=0,w[f+4]=0,w[f+5]=0,w[f+=6]=0,w[f+1]=0,w[f+2]=0,w[f+3]=_,w[f+4]=m,w[f+5]=1,C[c<<1]=g[0]*h.x+g[1]*h.y+g[2],C[1+(c<<1)]=g[3]*h.x+g[4]*h.y+g[5];return n.matmath.multiply_AtA(a,x),n.matmath.multiply_AtB(i,x,k),n.linalg.lu_solve(a,i),v[0]=i.data[0],v[1]=i.data[1],v[2]=i.data[2],v[3]=i.data[3],v[4]=i.data[4],v[5]=i.data[5],v[6]=0,v[7]=0,v[8]=1,n.matmath.invert_3x3(r,r),n.matmath.multiply_3x3(s,r,s),n.matmath.multiply_3x3(s,s,t),n.cache.put_buffer(y),n.cache.put_buffer(b),1},o.prototype.error=function(t,r,a,n,i){for(var o,s,l=0,u=a.data;l<i;++l)n[l]=e((s=r[l]).x-u[0]*(o=t[l]).x-u[1]*o.y-u[2])+e(s.y-u[3]*o.x-u[4]*o.y-u[5])},o.prototype.check_subset=function(e,t,r){return!0},o}(),s=new n.matrix_t(9,9,n.F32_t|n.C1_t),l=new n.matrix_t(9,9,n.F32_t|n.C1_t);return{affine2d:o,homography2d:function(){function e(){}return e.prototype.run=function(e,a,i,o){for(var u=0,h=0,c=i.data,f=t.data,d=r.data,v=s.data,p=l.data,g=0,_=0,m=0,y=0,b=0,x=0,k=0,w=0,C=0,T=0,S=0,I=0;u<o;++u)k+=a[u].x,w+=a[u].y,S+=e[u].x,I+=e[u].y;for(k/=o,w/=o,S/=o,I/=o,u=0;u<o;++u)b+=Math.abs(a[u].x-k),x+=Math.abs(a[u].y-w),C+=Math.abs(e[u].x-S),T+=Math.abs(e[u].y-I);if(Math.abs(b)<n.EPSILON||Math.abs(x)<n.EPSILON||Math.abs(C)<n.EPSILON||Math.abs(T)<n.EPSILON)return 0;for(b=o/b,x=o/x,T=o/T,f[0]=C=o/C,f[1]=0,f[2]=-S*C,f[3]=0,f[4]=T,f[5]=-I*T,f[6]=0,f[7]=0,f[8]=1,d[0]=1/b,d[1]=0,d[2]=k,d[3]=0,d[4]=1/x,d[5]=w,d[6]=0,d[7]=0,d[8]=1,u=81;--u>=0;)v[u]=0;for(u=0;u<o;++u)g=(a[u].x-k)*b,_=(a[u].y-w)*x,y=(e[u].y-I)*T,v[0]+=(m=(e[u].x-S)*C)*m,v[1]+=m*y,v[2]+=m,v[6]+=m*-g*m,v[7]+=m*-g*y,v[8]+=m*-g,v[10]+=y*y,v[11]+=y,v[15]+=y*-g*m,v[16]+=y*-g*y,v[17]+=y*-g,v[20]+=1,v[24]+=-g*m,v[25]+=-g*y,v[26]+=-g,v[30]+=m*m,v[31]+=m*y,v[32]+=m,v[33]+=m*-_*m,v[34]+=m*-_*y,v[35]+=m*-_,v[40]+=y*y,v[41]+=y,v[42]+=y*-_*m,v[43]+=y*-_*y,v[44]+=y*-_,v[50]+=1,v[51]+=-_*m,v[52]+=-_*y,v[53]+=-_,v[60]+=-g*m*-g*m+-_*m*-_*m,v[61]+=-g*m*-g*y+-_*m*-_*y,v[62]+=-g*m*-g+-_*m*-_,v[70]+=-g*y*-g*y+-_*y*-_*y,v[71]+=-g*y*-g+-_*y*-_,v[80]+=-g*-g+-_*-_;for(u=0;u<9;++u)for(h=0;h<u;++h)v[9*u+h]=v[9*h+u];return n.linalg.eigenVV(s,l),c[0]=p[72],c[1]=p[73],c[2]=p[74],c[3]=p[75],c[4]=p[76],c[5]=p[77],c[6]=p[78],c[7]=p[79],c[8]=p[80],n.matmath.multiply_3x3(i,r,i),n.matmath.multiply_3x3(i,i,t),c[0]*=g=1/c[8],c[1]*=g,c[2]*=g,c[3]*=g,c[4]*=g,c[5]*=g,c[6]*=g,c[7]*=g,c[8]=1,1},e.prototype.error=function(e,t,r,a,n){for(var i,o,s=0,l=0,u=0,h=0,c=r.data;s<n;++s)a[s]=(u=(c[0]*(i=e[s]).x+c[1]*i.y+c[2])*(l=1/(c[6]*i.x+c[7]*i.y+1))-(o=t[s]).x)*u+(h=(c[3]*i.x+c[4]*i.y+c[5])*l-o.y)*h},e.prototype.check_subset=function(e,t,r){if(4==r){var a=0,i=e[0],o=e[1],s=e[2],l=e[3],u=t[0],h=t[1],c=t[2],f=t[3],d=i.x,v=i.y,p=o.x,g=o.y,_=s.x,m=s.y,y=u.x,b=u.y,x=h.x,k=h.y,w=c.x,C=c.y,T=n.matmath.determinant_3x3(d,v,1,p,g,1,_,m,1),S=n.matmath.determinant_3x3(y,b,1,x,k,1,w,C,1);if(T*S<0&&a++,y=h.x,b=h.y,x=c.x,k=c.y,w=f.x,C=f.y,(T=n.matmath.determinant_3x3(d=o.x,v=o.y,1,p=s.x,g=s.y,1,_=l.x,m=l.y,1))*(S=n.matmath.determinant_3x3(y,b,1,x,k,1,w,C,1))<0&&a++,y=u.x,b=u.y,x=c.x,k=c.y,w=f.x,C=f.y,(T=n.matmath.determinant_3x3(d=i.x,v=i.y,1,p=s.x,g=s.y,1,_=l.x,m=l.y,1))*(S=n.matmath.determinant_3x3(y,b,1,x,k,1,w,C,1))<0&&a++,y=u.x,b=u.y,x=h.x,k=h.y,w=f.x,C=f.y,(T=n.matmath.determinant_3x3(d=i.x,v=i.y,1,p=o.x,g=o.y,1,_=l.x,m=l.y,1))*(S=n.matmath.determinant_3x3(y,b,1,x,k,1,w,C,1))<0&&a++,0!=a&&4!=a)return!1}return!0},e}()}}(),r=function(){function e(e,t,r,a){void 0===e&&(e=0),void 0===t&&(t=.5),void 0===r&&(r=.5),void 0===a&&(a=.99),this.size=e,this.thresh=t,this.eps=r,this.prob=a}return e.prototype.update_iters=function(e,t){var r=Math.log(1-this.prob),a=Math.log(1-Math.pow(1-e,this.size));return 0|(a>=0||-r>=t*-a?t:Math.round(r/a))},e}(),a=function(){var e=function(e,t,r,a,n,i,o){for(var s=1e3,l=[],u=0,h=0,c=0,f=0,d=!1;c<s;++c){for(u=0;u<a&&c<s;){for(d=!1,f=0;!d;)for(d=!0,f=l[u]=0|Math.floor(Math.random()*n),h=0;h<u;++h)if(f==l[h]){d=!1;break}i[u]=t[f],o[u]=r[f],e.check_subset(i,o,u+1)?++u:c++}break}return u==a&&c<s},t=function(e,t,r,a,n,i,o,s){var l=0,u=0,h=0,c=i*i;for(e.error(r,a,t,o,n);u<n;++u)s[u]=h=o[u]<=c,l+=h;return l};return{ransac:function(r,a,i,o,s,l,u,h){if(void 0===h&&(h=1e3),s<r.size)return!1;var c=r.size,f=h,d=0,v=!1,p=[],g=[],_=l.cols,m=l.rows,y=l.type|n.C1_t,b=n.cache.get_buffer(_*m<<3),x=n.cache.get_buffer(s),k=n.cache.get_buffer(s<<2),w=new n.matrix_t(_,m,y,b.data),C=new n.matrix_t(s,1,n.U8C1_t,x.data),T=-1,S=0,I=k.f32;if(s==c){if(a.run(i,o,w,s)<=0)return n.cache.put_buffer(b),n.cache.put_buffer(x),n.cache.put_buffer(k),!1;if(w.copy_to(l),u)for(;--s>=0;)u.data[s]=1;return n.cache.put_buffer(b),n.cache.put_buffer(x),n.cache.put_buffer(k),!0}for(;d<f;++d){if(!e(a,i,o,c,s,p,g)){if(0==d)return n.cache.put_buffer(b),n.cache.put_buffer(x),n.cache.put_buffer(k),!1;break}a.run(p,g,w,c)<=0||(S=t(a,w,i,o,s,r.thresh,I,C.data))>Math.max(T,c-1)&&(w.copy_to(l),T=S,u&&C.copy_to(u),f=r.update_iters((s-S)/s,f),v=!0)}return n.cache.put_buffer(b),n.cache.put_buffer(x),n.cache.put_buffer(k),v},lmeds:function(r,a,i,o,s,l,u,h){if(void 0===h&&(h=1e3),s<r.size)return!1;var c=r.size,f=h,d=0,v=!1,p=[],g=[],_=l.cols,m=l.rows,y=l.type|n.C1_t,b=n.cache.get_buffer(_*m<<3),x=n.cache.get_buffer(s),k=n.cache.get_buffer(s<<2),w=new n.matrix_t(_,m,y,b.data),C=new n.matrix_t(s,1,n.U8_t|n.C1_t,x.data),T=0,S=k.f32,I=1e9,A=0,R=0;if(r.eps=.45,f=r.update_iters(r.eps,f),s==c){if(a.run(i,o,w,s)<=0)return n.cache.put_buffer(b),n.cache.put_buffer(x),n.cache.put_buffer(k),!1;if(w.copy_to(l),u)for(;--s>=0;)u.data[s]=1;return n.cache.put_buffer(b),n.cache.put_buffer(x),n.cache.put_buffer(k),!0}for(;d<f;++d){if(!e(a,i,o,c,s,p,g)){if(0==d)return n.cache.put_buffer(b),n.cache.put_buffer(x),n.cache.put_buffer(k),!1;break}a.run(p,g,w,c)<=0||(a.error(i,o,w,S,s),(R=n.math.median(S,0,s-1))<I&&(I=R,w.copy_to(l),v=!0))}return v&&(A=2.5*1.4826*(1+5/(s-c))*Math.sqrt(I),A=Math.max(A,.001),T=t(a,l,i,o,s,A,S,C.data),u&&C.copy_to(u),v=T>=c),n.cache.put_buffer(b),n.cache.put_buffer(x),n.cache.put_buffer(k),v}}}();e.ransac_params_t=r,e.motion_model=t,e.motion_estimator=a}(n),function(e){e.imgproc={grayscale:function(e,t,r,a,i){void 0===i&&(i=n.COLOR_RGBA2GRAY);var o=0,s=0,l=0,u=0,h=0,c=0,f=4899,d=9617,v=1868,p=4;i!=n.COLOR_BGRA2GRAY&&i!=n.COLOR_BGR2GRAY||(f=1868,v=4899),i!=n.COLOR_RGB2GRAY&&i!=n.COLOR_BGR2GRAY||(p=3);var g=p<<1,_=3*p|0;a.resize(t,r,1);var m=a.data;for(s=0;s<r;++s,u+=t,l+=t*p){for(o=0,h=l,c=u;o<=t-4;o+=4,h+=p<<2,c+=4)m[c]=e[h]*f+e[h+1]*d+e[h+2]*v+8192>>14,m[c+1]=e[h+p]*f+e[h+p+1]*d+e[h+p+2]*v+8192>>14,m[c+2]=e[h+g]*f+e[h+g+1]*d+e[h+g+2]*v+8192>>14,m[c+3]=e[h+_]*f+e[h+_+1]*d+e[h+_+2]*v+8192>>14;for(;o<t;++o,++c,h+=p)m[c]=e[h]*f+e[h+1]*d+e[h+2]*v+8192>>14}},resample:function(e,t,r,a){var i=e.rows,o=e.cols;i>a&&o>r&&(t.resize(r,a,e.channel),e.type&n.U8_t&&t.type&n.U8_t&&i*o/(a*r)<256?function(e,t,r,a){for(var i=0,o=e.channel,s=e.cols,l=e.rows,u=e.data,h=t.data,c=s/r,f=l/a,d=c*f*65536|0,v=0,p=0,g=0,_=0,m=0,y=0,b=0,x=0,k=0,w=0,C=0,T=0,S=0,I=0,A=0,R=0,N=n.cache.get_buffer(r*o<<2),E=n.cache.get_buffer(r*o<<2),F=n.cache.get_buffer(2*s*3<<2),M=N.i32,D=E.i32,O=F.i32;v<r;v++){for(m=1+(k=v*c)-1e-6|0,y=0|(w=k+c),m=Math.min(m,s-1),y=Math.min(y,s-1),m>k&&(O[x++]=v*o|0,O[x++]=(m-1)*o|0,O[x++]=256*(m-k)|0,i++),g=m;g<y;g++)i++,O[x++]=v*o|0,O[x++]=g*o|0,O[x++]=256;w-y>.001&&(i++,O[x++]=v*o|0,O[x++]=y*o|0,O[x++]=256*(w-y)|0)}for(v=0;v<r*o;v++)M[v]=D[v]=0;for(p=0,_=0;_<l;_++){for(C=s*_,x=0;x<i;x++)for(S=O[3*x],m=O[3*x+1],I=O[3*x+2],b=0;b<o;b++)M[S+b]+=u[C+m+b]*I;if((p+1)*f<=_+1||_==l-1){if(R=256-(A=256*Math.max(_+1-(p+1)*f,0)|0),T=r*p,A<=0)for(v=0;v<r*o;v++)h[T+v]=Math.min(Math.max((D[v]+256*M[v])/d,0),255),D[v]=M[v]=0;else for(v=0;v<r*o;v++)h[T+v]=Math.min(Math.max((D[v]+M[v]*R)/d,0),255),D[v]=M[v]*A,M[v]=0;p++}else for(v=0;v<r*o;v++)D[v]+=256*M[v],M[v]=0}n.cache.put_buffer(E),n.cache.put_buffer(N),n.cache.put_buffer(F)}(e,t,r,a):function(e,t,r,a){for(var i=0,o=e.channel,s=e.cols,l=e.rows,u=e.data,h=t.data,c=s/r,f=l/a,d=1/(c*f),v=0,p=0,g=0,_=0,m=0,y=0,b=0,x=0,k=0,w=0,C=0,T=0,S=0,I=0,A=0,R=0,N=n.cache.get_buffer(r*o<<2),E=n.cache.get_buffer(r*o<<2),F=n.cache.get_buffer(2*s*3<<2),M=N.f32,D=E.f32,O=F.f32;v<r;v++){for(m=1+(k=v*c)-1e-6|0,y=0|(w=k+c),m=Math.min(m,s-1),y=Math.min(y,s-1),m>k&&(i++,O[x++]=(m-1)*o|0,O[x++]=v*o|0,O[x++]=(m-k)*d),g=m;g<y;g++)i++,O[x++]=g*o|0,O[x++]=v*o|0,O[x++]=d;w-y>.001&&(i++,O[x++]=y*o|0,O[x++]=v*o|0,O[x++]=(w-y)*d)}for(v=0;v<r*o;v++)M[v]=D[v]=0;for(p=0,_=0;_<l;_++){for(C=s*_,x=0;x<i;x++)for(m=0|O[3*x],S=0|O[3*x+1],I=O[3*x+2],b=0;b<o;b++)M[S+b]+=u[C+m+b]*I;if((p+1)*f<=_+1||_==l-1){if(R=1-(A=Math.max(_+1-(p+1)*f,0)),T=r*p,Math.abs(A)<.001)for(v=0;v<r*o;v++)h[T+v]=D[v]+M[v],D[v]=M[v]=0;else for(v=0;v<r*o;v++)h[T+v]=D[v]+M[v]*R,D[v]=M[v]*A,M[v]=0;p++}else for(v=0;v<r*o;v++)D[v]+=M[v],M[v]=0}n.cache.put_buffer(E),n.cache.put_buffer(N),n.cache.put_buffer(F)}(e,t,r,a))},box_blur_gray:function(e,t,r,a){void 0===a&&(a=0);var i=e.cols,o=e.rows,s=o<<1,l=i<<1,u=0,h=0,c=0,f=0,d=1+(r<<1)|0,v=r+1|0,p=v+1|0,g=a&n.BOX_BLUR_NOSCALE?1:1/(d*d),_=n.cache.get_buffer(i*o<<2),m=0,y=0,b=0,x=0,k=0,w=_.i32,C=e.data,T=0;for(t.resize(i,o,e.channel),c=0;c<o;++c){for(y=c,m=v*C[b],u=b+1|0,f=b+r|0;u<=f;++u)m+=C[u];for(x=b+v|0,T=C[k=b],h=0;h<r;++h,y+=o)w[y]=m,m+=C[x]-T,x++;for(;h<i-p;h+=2,y+=s)w[y]=m,w[y+o]=m+=C[x]-C[k],m+=C[x+1]-C[k+1],x+=2,k+=2;for(;h<i-v;++h,y+=o)w[y]=m,m+=C[x]-C[k],x++,k++;for(T=C[x-1];h<i;++h,y+=o)w[y]=m,m+=T-C[k],k++;b+=i}if(b=0,C=t.data,1==g)for(c=0;c<i;++c){for(y=c,m=v*w[b],u=b+1|0,f=b+r|0;u<=f;++u)m+=w[u];for(x=b+v,T=w[k=b],h=0;h<r;++h,y+=i)C[y]=m,m+=w[x]-T,x++;for(;h<o-p;h+=2,y+=l)C[y]=m,C[y+i]=m+=w[x]-w[k],m+=w[x+1]-w[k+1],x+=2,k+=2;for(;h<o-v;++h,y+=i)C[y]=m,m+=w[x]-w[k],x++,k++;for(T=w[x-1];h<o;++h,y+=i)C[y]=m,m+=T-w[k],k++;b+=o}else for(c=0;c<i;++c){for(y=c,m=v*w[b],u=b+1|0,f=b+r|0;u<=f;++u)m+=w[u];for(x=b+v,T=w[k=b],h=0;h<r;++h,y+=i)C[y]=m*g,m+=w[x]-T,x++;for(;h<o-p;h+=2,y+=l)C[y]=m*g,C[y+i]=(m+=w[x]-w[k])*g,m+=w[x+1]-w[k+1],x+=2,k+=2;for(;h<o-v;++h,y+=i)C[y]=m*g,m+=w[x]-w[k],x++,k++;for(T=w[x-1];h<o;++h,y+=i)C[y]=m*g,m+=T-w[k],k++;b+=o}n.cache.put_buffer(_)},gaussian_blur:function(e,t,r,a){void 0===a&&(a=0),void 0===r&&(r=0);var i=(r=0==r?2*Math.max(1,4*a+1-1e-8)+1|0:r)>>1,o=e.cols,s=e.rows,l=e.type,u=l&n.U8_t;t.resize(o,s,e.channel);var h,c,f=e.data,d=t.data,v=r+Math.max(s,o)|0,p=n.cache.get_buffer(v<<2),g=n.cache.get_buffer(r<<2);u?(h=p.i32,c=g.i32):l&n.S32_t?(h=p.i32,c=g.f32):(h=p.f32,c=g.f32),n.math.get_gaussian_kernel(r,a,c,l),u?function(e,t,r,a,n,i,o,s){for(var l=0,u=0,h=0,c=0,f=0,d=0,v=0,p=0,g=0,_=i[0],m=0,y=a<<1,b=3*a,x=a<<2;l<n;++l){for(d=t[c],u=0;u<s;++u)e[u]=d;for(u=0;u<=a-2;u+=2)e[u+s]=t[c+u],e[u+s+1]=t[c+u+1];for(;u<a;++u)e[u+s]=t[c+u];for(d=t[c+a-1],u=a;u<s+a;++u)e[u+s]=d;for(u=0;u<=a-4;u+=4){for(d=e[u]*_,v=e[u+1]*_,p=e[u+2]*_,g=e[u+3]*_,h=1;h<o;++h)d+=e[h+u]*(m=i[h]),v+=e[h+u+1]*m,p+=e[h+u+2]*m,g+=e[h+u+3]*m;r[f+u]=Math.min(d>>8,255),r[f+u+1]=Math.min(v>>8,255),r[f+u+2]=Math.min(p>>8,255),r[f+u+3]=Math.min(g>>8,255)}for(;u<a;++u){for(d=e[u]*_,h=1;h<o;++h)d+=e[h+u]*i[h];r[f+u]=Math.min(d>>8,255)}c+=a,f+=a}for(l=0;l<a;++l){for(d=r[l],u=0;u<s;++u)e[u]=d;for(h=l,u=0;u<=n-2;u+=2,h+=y)e[u+s]=r[h],e[u+s+1]=r[h+a];for(;u<n;++u,h+=a)e[u+s]=r[h];for(d=r[(n-1)*a+l],u=n;u<s+n;++u)e[u+s]=d;for(f=l,u=0;u<=n-4;u+=4,f+=x){for(d=e[u]*_,v=e[u+1]*_,p=e[u+2]*_,g=e[u+3]*_,h=1;h<o;++h)d+=e[h+u]*(m=i[h]),v+=e[h+u+1]*m,p+=e[h+u+2]*m,g+=e[h+u+3]*m;r[f]=Math.min(d>>8,255),r[f+a]=Math.min(v>>8,255),r[f+y]=Math.min(p>>8,255),r[f+b]=Math.min(g>>8,255)}for(;u<n;++u,f+=a){for(d=e[u]*_,h=1;h<o;++h)d+=e[h+u]*i[h];r[f]=Math.min(d>>8,255)}}}(h,f,d,o,s,c,r,i):function(e,t,r,a,n,i,o,s){for(var l=0,u=0,h=0,c=0,f=0,d=0,v=0,p=0,g=0,_=i[0],m=0,y=a<<1,b=3*a,x=a<<2;l<n;++l){for(d=t[c],u=0;u<s;++u)e[u]=d;for(u=0;u<=a-2;u+=2)e[u+s]=t[c+u],e[u+s+1]=t[c+u+1];for(;u<a;++u)e[u+s]=t[c+u];for(d=t[c+a-1],u=a;u<s+a;++u)e[u+s]=d;for(u=0;u<=a-4;u+=4){for(d=e[u]*_,v=e[u+1]*_,p=e[u+2]*_,g=e[u+3]*_,h=1;h<o;++h)d+=e[h+u]*(m=i[h]),v+=e[h+u+1]*m,p+=e[h+u+2]*m,g+=e[h+u+3]*m;r[f+u]=d,r[f+u+1]=v,r[f+u+2]=p,r[f+u+3]=g}for(;u<a;++u){for(d=e[u]*_,h=1;h<o;++h)d+=e[h+u]*i[h];r[f+u]=d}c+=a,f+=a}for(l=0;l<a;++l){for(d=r[l],u=0;u<s;++u)e[u]=d;for(h=l,u=0;u<=n-2;u+=2,h+=y)e[u+s]=r[h],e[u+s+1]=r[h+a];for(;u<n;++u,h+=a)e[u+s]=r[h];for(d=r[(n-1)*a+l],u=n;u<s+n;++u)e[u+s]=d;for(f=l,u=0;u<=n-4;u+=4,f+=x){for(d=e[u]*_,v=e[u+1]*_,p=e[u+2]*_,g=e[u+3]*_,h=1;h<o;++h)d+=e[h+u]*(m=i[h]),v+=e[h+u+1]*m,p+=e[h+u+2]*m,g+=e[h+u+3]*m;r[f]=d,r[f+a]=v,r[f+y]=p,r[f+b]=g}for(;u<n;++u,f+=a){for(d=e[u]*_,h=1;h<o;++h)d+=e[h+u]*i[h];r[f]=d}}}(h,f,d,o,s,c,r,i),n.cache.put_buffer(p),n.cache.put_buffer(g)},pyrdown:function(e,t,r,a){void 0===r&&(r=0),void 0===a&&(a=0);var n=e.cols,i=n>>1,o=e.rows>>1,s=i-(r<<1),l=o-(a<<1),u=0,h=0,c=r+a*n,f=0,d=0,v=0;t.resize(i,o,e.channel);var p=e.data,g=t.data;for(h=0;h<l;++h){for(f=c,v=d,u=0;u<=s-2;u+=2,v+=2,f+=4)g[v]=p[f]+p[f+1]+p[f+n]+p[f+n+1]+2>>2,g[v+1]=p[f+2]+p[f+3]+p[f+n+2]+p[f+n+3]+2>>2;for(;u<s;++u,++v,f+=2)g[v]=p[f]+p[f+1]+p[f+n]+p[f+n+1]+2>>2;c+=n<<1,d+=i}},scharr_derivatives:function(e,t){var r,a,i,o,s,l,u,h,c=e.cols,f=e.rows,d=c<<1,v=0,p=0,g=0,_=0,m=0,y=0,b=0;t.resize(c,f,2);var x=e.data,k=t.data,w=n.cache.get_buffer(c+2<<2),C=n.cache.get_buffer(c+2<<2);for(e.type&n.U8_t||e.type&n.S32_t?(u=w.i32,h=C.i32):(u=w.f32,h=C.f32);p<f;++p,m+=c){for(_=(p>0?p-1:1)*c|0,y=(p<f-1?p+1:f-2)*c|0,b=p*d|0,v=0,g=1;v<=c-2;v+=2,g+=2)u[g]=3*((r=x[_+v])+(a=x[y+v]))+10*x[m+v],h[g]=a-r,u[g+1]=3*((r=x[_+v+1])+(a=x[y+v+1]))+10*x[m+v+1],h[g+1]=a-r;for(;v<c;++v,++g)u[g]=3*((r=x[_+v])+(a=x[y+v]))+10*x[m+v],h[g]=a-r;for(v=c+1|0,u[0]=u[1],u[v]=u[c],h[0]=h[1],h[v]=h[c],v=0;v<=c-4;v+=4)r=h[v+2],a=h[v+1],i=h[v+3],o=h[v+4],l=u[v+3],k[b++]=(s=u[v+2])-u[v],k[b++]=3*(r+h[v])+10*a,k[b++]=l-u[v+1],k[b++]=3*(i+a)+10*r,k[b++]=u[v+4]-s,k[b++]=3*(o+r)+10*i,k[b++]=u[v+5]-l,k[b++]=3*(h[v+5]+i)+10*o;for(;v<c;++v)k[b++]=u[v+2]-u[v],k[b++]=3*(h[v+2]+h[v])+10*h[v+1]}n.cache.put_buffer(w),n.cache.put_buffer(C)},sobel_derivatives:function(e,t){var r,a,i,o,s,l,u,h,c=e.cols,f=e.rows,d=c<<1,v=0,p=0,g=0,_=0,m=0,y=0,b=0;t.resize(c,f,2);var x=e.data,k=t.data,w=n.cache.get_buffer(c+2<<2),C=n.cache.get_buffer(c+2<<2);for(e.type&n.U8_t||e.type&n.S32_t?(u=w.i32,h=C.i32):(u=w.f32,h=C.f32);p<f;++p,m+=c){for(_=(p>0?p-1:1)*c|0,y=(p<f-1?p+1:f-2)*c|0,b=p*d|0,v=0,g=1;v<=c-2;v+=2,g+=2)u[g]=(r=x[_+v])+(a=x[y+v])+2*x[m+v],h[g]=a-r,u[g+1]=(r=x[_+v+1])+(a=x[y+v+1])+2*x[m+v+1],h[g+1]=a-r;for(;v<c;++v,++g)u[g]=(r=x[_+v])+(a=x[y+v])+2*x[m+v],h[g]=a-r;for(v=c+1|0,u[0]=u[1],u[v]=u[c],h[0]=h[1],h[v]=h[c],v=0;v<=c-4;v+=4)r=h[v+2],a=h[v+1],i=h[v+3],o=h[v+4],l=u[v+3],k[b++]=(s=u[v+2])-u[v],k[b++]=r+h[v]+2*a,k[b++]=l-u[v+1],k[b++]=i+a+2*r,k[b++]=u[v+4]-s,k[b++]=o+r+2*i,k[b++]=u[v+5]-l,k[b++]=h[v+5]+i+2*o;for(;v<c;++v)k[b++]=u[v+2]-u[v],k[b++]=h[v+2]+h[v]+2*h[v+1]}n.cache.put_buffer(w),n.cache.put_buffer(C)},compute_integral_image:function(e,t,r,a){var n=0|e.cols,i=0|e.rows,o=e.data,s=n+1|0,l=0,u=0,h=0,c=0,f=0,d=0,v=0,p=0;if(t&&r){for(;f<s;++f)t[f]=0,r[f]=0;for(h=s+1|0,c=1,f=0,p=0;f<i;++f,++h,++c){for(l=u=0,d=0;d<=n-2;d+=2,p+=2,h+=2,c+=2)u+=(v=o[p])*v,t[h]=t[c]+(l+=v),r[h]=r[c]+u,u+=(v=o[p+1])*v,t[h+1]=t[c+1]+(l+=v),r[h+1]=r[c+1]+u;for(;d<n;++d,++p,++h,++c)u+=(v=o[p])*v,t[h]=t[c]+(l+=v),r[h]=r[c]+u}}else if(t){for(;f<s;++f)t[f]=0;for(h=s+1|0,c=1,f=0,p=0;f<i;++f,++h,++c){for(l=0,d=0;d<=n-2;d+=2,p+=2,h+=2,c+=2)t[h]=t[c]+(l+=o[p]),t[h+1]=t[c+1]+(l+=o[p+1]);for(;d<n;++d,++p,++h,++c)t[h]=t[c]+(l+=o[p])}}else if(r){for(;f<s;++f)r[f]=0;for(h=s+1|0,c=1,f=0,p=0;f<i;++f,++h,++c){for(u=0,d=0;d<=n-2;d+=2,p+=2,h+=2,c+=2)r[h]=r[c]+(u+=(v=o[p])*v),r[h+1]=r[c+1]+(u+=(v=o[p+1])*v);for(;d<n;++d,++p,++h,++c)r[h]=r[c]+(u+=(v=o[p])*v)}}if(a){for(f=0;f<s;++f)a[f]=0;for(h=s+1|0,c=0,f=0,p=0;f<i;++f,++h,++c){for(d=0;d<=n-2;d+=2,p+=2,h+=2,c+=2)a[h]=o[p]+a[c],a[h+1]=o[p+1]+a[c+1];for(;d<n;++d,++p,++h,++c)a[h]=o[p]+a[c]}for(h=s+n|0,c=n,f=0;f<i;++f,h+=s,c+=s)a[h]+=a[c];for(d=n-1;d>0;--d)for(c=(h=d+i*s)-s,f=i;f>0;--f,h-=s,c-=s)a[h]+=a[c]+a[c+1]}},equalize_histogram:function(e,t){var r=e.cols,a=e.rows,i=e.data;t.resize(r,a,e.channel);var o,s,l=t.data,u=r*a,h=0,c=0,f=n.cache.get_buffer(1024);for(o=f.i32;h<256;++h)o[h]=0;for(h=0;h<u;++h)++o[i[h]];for(c=o[0],h=1;h<256;++h)c=o[h]+=c;for(s=255/u,h=0;h<u;++h)l[h]=o[i[h]]*s+.5|0;n.cache.put_buffer(f)},canny:function(e,t,r,a){var i=e.cols,o=e.rows;t.resize(i,o,e.channel);var s=t.data,l=0,u=0,h=0,c=i<<1,f=0,d=0,v=0,p=0,g=0,_=0,m=0,y=0,b=n.cache.get_buffer(o*c<<2),x=n.cache.get_buffer(3*(i+2)<<2),k=n.cache.get_buffer((o+2)*(i+2)<<2),w=n.cache.get_buffer(o*i<<2),C=x.i32,T=k.i32,S=w.i32,I=b.i32,A=new n.matrix_t(i,o,n.S32C2_t,b.data),R=1,N=i+2+1|0,E=2*(i+2)+1|0,F=i+2|0,M=F+1|0,D=0;for(this.sobel_derivatives(e,A),r>a&&(l=r,r=a,a=l),l=3*(i+2)|0;--l>=0;)C[l]=0;for(l=(o+2)*(i+2)|0;--l>=0;)T[l]=0;for(;u<i;++u,h+=2)C[N+u]=((p=I[h])^p>>31)-(p>>31)+(((g=I[h+1])^g>>31)-(g>>31));for(l=1;l<=o;++l,h+=c){if(l==o)for(u=E+i;--u>=E;)C[u]=0;else for(u=0;u<i;u++)C[E+u]=((p=I[h+(u<<1)])^p>>31)-(p>>31)+(((g=I[h+(u<<1)+1])^g>>31)-(g>>31));for(f=h-c|0,T[M-1]=0,d=0,u=0;u<i;++u,f+=2){if((v=C[N+u])>r)if(_=(p=I[f])^(g=I[f+1]),g=(g^g>>31)-(g>>31)|0,y=(m=13573*(p=(p^p>>31)-(p>>31)|0))+(p+p<<15),(g<<=15)<m){if(v>C[N+u-1]&&v>=C[N+u+1]){v>a&&!d&&2!=T[M+u-F]?(T[M+u]=2,d=1,S[D++]=M+u):T[M+u]=1;continue}}else if(g>y){if(v>C[R+u]&&v>=C[E+u]){v>a&&!d&&2!=T[M+u-F]?(T[M+u]=2,d=1,S[D++]=M+u):T[M+u]=1;continue}}else if(v>C[R+u-(_=_<0?-1:1)]&&v>C[E+u+_]){v>a&&!d&&2!=T[M+u-F]?(T[M+u]=2,d=1,S[D++]=M+u):T[M+u]=1;continue}T[M+u]=0,d=0}T[M+i]=0,M+=F,u=R,R=N,N=E,E=u}for(u=M-F-1,l=0;l<F;++l,++u)T[u]=0;for(;D>0;)M=S[--D],1==T[M-=F+1]&&(T[M]=2,S[D++]=M),1==T[M+=1]&&(T[M]=2,S[D++]=M),1==T[M+=1]&&(T[M]=2,S[D++]=M),1==T[M+=F]&&(T[M]=2,S[D++]=M),1==T[M-=2]&&(T[M]=2,S[D++]=M),1==T[M+=F]&&(T[M]=2,S[D++]=M),1==T[M+=1]&&(T[M]=2,S[D++]=M),1==T[M+=1]&&(T[M]=2,S[D++]=M);for(M=F+1,R=0,l=0;l<o;++l,M+=F)for(u=0;u<i;++u)s[R++]=255*(2==T[M+u]);n.cache.put_buffer(b),n.cache.put_buffer(x),n.cache.put_buffer(k),n.cache.put_buffer(w)},warp_perspective:function(e,t,r,a){void 0===a&&(a=0);for(var n=0|e.cols,i=0|e.rows,o=0|t.cols,s=0|t.rows,l=e.data,u=t.data,h=0,c=0,f=0,d=0,v=0,p=0,g=0,_=0,m=0,y=0,b=0,x=0,k=0,w=0,C=r.data,T=C[0],S=C[1],I=C[2],A=C[3],R=C[4],N=C[5],E=C[6],F=C[7],M=C[8],D=0;c<s;++c)for(_=S*c+I,m=R*c+N,y=F*c+M,h=0;h<o;++h,++D,_+=T,m+=A,y+=E)d=0|(p=_*(b=1/y)),v=0|(g=m*b),p>0&&g>0&&d<n-1&&v<i-1?(x=Math.max(p-d,0),k=Math.max(g-v,0),u[D]=(w=l[f=n*v+d|0]+x*(l[f+1]-l[f]))+k*(l[f+n]+x*(l[f+n+1]-l[f+n])-w)):u[D]=a},warp_affine:function(e,t,r,a){void 0===a&&(a=0);for(var n=e.cols,i=e.rows,o=t.cols,s=t.rows,l=e.data,u=t.data,h=0,c=0,f=0,d=0,v=0,p=0,g=0,_=0,m=0,y=r.data,b=y[0],x=y[1],k=y[2],w=y[3],C=y[4],T=y[5],S=0;c<s;++c)for(p=x*c+k,g=C*c+T,h=0;h<o;++h,++S,p+=b,g+=w)v=0|g,u[S]=(d=0|p)>=0&&v>=0&&d<n-1&&v<i-1?(m=l[f=n*v+d]+(_=p-d)*(l[f+1]-l[f]))+(g-v)*(l[f+n]+_*(l[f+n+1]-l[f+n])-m):a},skindetector:function(e,t){for(var r,a,n,i,o=e.width*e.height;o--;)a=e.data[1+(i=4*o)],n=e.data[i+2],t[o]=(r=e.data[i])>95&&a>40&&n>20&&r>a&&r>n&&r-Math.min(a,n)>15&&Math.abs(r-a)>15?255:0}}}(n),function(e){var t=function(){var e=new Int32Array([0,3,1,3,2,2,3,1,3,0,3,-1,2,-2,1,-3,0,-3,-1,-3,-2,-2,-3,-1,-3,0,-3,1,-2,2,-1,3]),t=new Uint8Array(512),r=new Int32Array(25),a=new Int32Array(25),i=function(e,t,r,a,n){for(var i=0,o=e[t],s=n,l=0,u=0,h=0;i<25;++i)a[i]=o-e[t+r[i]];for(i=0;i<16;i+=2)l=Math.min(a[i+1],a[i+2]),(l=Math.min(l,a[i+3]))<=s||(l=Math.min(l,a[i+4]),l=Math.min(l,a[i+5]),l=Math.min(l,a[i+6]),l=Math.min(l,a[i+7]),l=Math.min(l,a[i+8]),s=Math.max(s,Math.min(l,a[i])),s=Math.max(s,Math.min(l,a[i+9])));for(u=-s,i=0;i<16;i+=2)h=Math.max(a[i+1],a[i+2]),h=Math.max(h,a[i+3]),h=Math.max(h,a[i+4]),(h=Math.max(h,a[i+5]))>=u||(h=Math.max(h,a[i+6]),h=Math.max(h,a[i+7]),h=Math.max(h,a[i+8]),u=Math.min(u,Math.max(h,a[i])),u=Math.min(u,Math.max(h,a[i+9])));return-u-1},o=20;return{set_threshold:function(e){o=Math.min(Math.max(e,0),255);for(var r=-255;r<=255;++r)t[r+255]=r<-o?1:r>o?2:0;return o},detect:function(s,l,u){void 0===u&&(u=3);var h,c=s.data,f=s.cols,d=s.rows,v=0,p=0,g=0,_=0,m=0,y=n.cache.get_buffer(3*f),b=n.cache.get_buffer(3*(f+1)<<2),x=y.u8,k=b.i32,w=r,C=a,T=Math.max(3,u),S=Math.min(d-2,d-u),I=Math.max(3,u),A=Math.min(f-3,f-u),R=0,N=0,E=i,F=t,M=o,D=0,O=0,L=0,z=0,B=0,P=0,V=0,U=0,W=0,G=0,H=0,j=0;!function(t,r,a){for(var n=0,i=e;n<16;++n)t[n]=i[n<<1]+i[1+(n<<1)]*r;for(;n<25;++n)t[n]=t[n-16]}(w,f);var q=w[0],X=w[1],K=w[2],Q=w[3],Y=w[4],J=w[5],Z=w[6],$=w[7],ee=w[8],te=w[9],re=w[10],ae=w[11],ne=w[12],ie=w[13],oe=w[14],se=w[15];for(v=0;v<3*f;++v)x[v]=0;for(v=T;v<S;++v){for(V=v*f+I|0,P=(m=(v-3)%3)*f|0,B=m*(f+1)|0,p=0;p<f;++p)x[P+p]=0;if(z=0,v<S-1)for(p=I;p<A;++p,++V)if(0!=(L=F[(O=255-(D=c[V]))+c[V+q]]|F[O+c[V+ee]])&&(L&=F[O+c[V+K]]|F[O+c[V+re]],L&=F[O+c[V+Y]]|F[O+c[V+ne]],0!=(L&=F[O+c[V+Z]]|F[O+c[V+oe]]))){if(L&=F[O+c[V+X]]|F[O+c[V+te]],L&=F[O+c[V+Q]]|F[O+c[V+ae]],L&=F[O+c[V+J]]|F[O+c[V+ie]],1&(L&=F[O+c[V+$]]|F[O+c[V+se]]))for(_=D-M,R=0,g=0;g<25;++g)if(c[V+w[g]]<_){if(++R>8){k[B+ ++z]=p,x[P+p]=E(c,V,w,C,M);break}}else R=0;if(2&L)for(_=D+M,R=0,g=0;g<25;++g)if(c[V+w[g]]>_){if(++R>8){k[B+ ++z]=p,x[P+p]=E(c,V,w,C,M);break}}else R=0}if(k[B+f]=z,v!=T)for(U=(m=(v-4+3)%3)*f|0,B=m*(f+1)|0,W=(m=(v-5+3)%3)*f|0,z=k[B+f],g=0;g<z;++g)H=(p=k[B+g])-1|0,(j=x[U+p])>x[U+(G=p+1|0)]&&j>x[U+H]&&j>x[W+H]&&j>x[W+p]&&j>x[W+G]&&j>x[P+H]&&j>x[P+p]&&j>x[P+G]&&((h=l[N]).x=p,h.y=v-1,h.score=j,N++)}return n.cache.put_buffer(y),n.cache.put_buffer(b),N}}}();e.fast_corners=t,t.set_threshold(20)}(n),function(e){var t,r=(t=function(e,t,r,a,n,i,o){var s=-2*e[t]+e[t+a]+e[t-a],l=-2*e[t]+e[t+n]+e[t-n],u=e[t+i]+e[t-i]-e[t+o]-e[t-o],h=0|Math.sqrt((s-l)*(s-l)+4*u*u);return Math.min(Math.abs(r-h),Math.abs(-(r+h)))},{laplacian_threshold:30,min_eigen_value_threshold:25,detect:function(e,r,a){void 0===a&&(a=5);var i,o=0,s=0,l=e.cols,u=e.rows,h=e.data,c=5*l|0,f=3+3*l|0,d=3-3*l|0,v=n.cache.get_buffer(l*u<<2),p=v.i32,g=0,_=0,m=0,y=0,b=0,x=this.laplacian_threshold,k=this.min_eigen_value_threshold,w=0|Math.max(5,a),C=0|Math.max(3,a),T=0|Math.min(l-5,l-a),S=0|Math.min(u-3,u-a);for(o=l*u;--o>=0;)p[o]=0;for(function(e,t,r,a,n,i,o,s,l,u){var h=0,c=0,f=s*r+o|0,d=f;for(h=s;h<u;++h,d=f+=r)for(c=o;c<l;++c,++d)t[d]=-4*e[d]+e[d+5]+e[d-5]+e[d+i]+e[d-i]}(h,p,l,0,0,c,w,C,T,S),_=C*l+w|0,s=C;s<S;++s,_+=l)for(o=w,m=_;o<T;++o,++m)((g=p[m])<-x&&g<p[m-1]&&g<p[m+1]&&g<p[m-l]&&g<p[m+l]&&g<p[m-l-1]&&g<p[m+l-1]&&g<p[m-l+1]&&g<p[m+l+1]||g>x&&g>p[m-1]&&g>p[m+1]&&g>p[m-l]&&g>p[m+l]&&g>p[m-l-1]&&g>p[m+l-1]&&g>p[m-l+1]&&g>p[m+l+1])&&(y=t(h,m,g,5,c,f,d))>k&&((i=r[b]).x=o,i.y=s,i.score=y,++b,++o,++m);return n.cache.put_buffer(v),b}});e.yape06=r}(n),function(e){var t=function(){var e=function(e,t,r){var a=0;return 0!=e[t+1]&&a++,0!=e[t-1]&&a++,0!=e[t+r]&&a++,0!=e[t+r+1]&&a++,0!=e[t+r-1]&&a++,0!=e[t-r]&&a++,0!=e[t-r+1]&&a++,0!=e[t-r-1]&&a++,a},t=function(e,t,r,a,n){var i,o;if(r>0)for(t-=a*n,o=-n;o<=n;++o){for(i=-n;i<=n;++i)if(e[t+i]>r)return!1;t+=a}else for(t-=a*n,o=-n;o<=n;++o){for(i=-n;i<=n;++i)if(e[t+i]<r)return!1;t+=a}return!0},r=function(e,t,r,a,n,i,o,s){var l=0,u=0,h=o-1|0,c=0,f=0,d=0,v=0,p=0;if((c=e[t+i[u]])<=n)if(c>=a)if((f=e[t+i[h]])<=n){if(f>=a)return void(r[t]=0);if((d=e[t+i[++h]])>n)if((v=e[t+i[++h]])>n)p=3;else{if(!(v<a))return void(r[t]=0);p=6}else if((v=e[t+i[++h]])>n)p=7;else{if(!(v<a))return void(r[t]=0);p=2}}else if((d=e[t+i[++h]])>n)if((v=e[t+i[++h]])>n)p=3;else{if(!(v<a))return void(r[t]=0);p=6}else{if(!(d<a))return void(r[t]=0);if((v=e[t+i[++h]])>n)p=7;else{if(!(v<a))return void(r[t]=0);p=2}}else{if((f=e[t+i[h]])>n)return void(r[t]=0);if((d=e[t+i[++h]])>n)return void(r[t]=0);if((v=e[t+i[++h]])>n)return void(r[t]=0);p=1}else{if((f=e[t+i[h]])<a)return void(r[t]=0);if((d=e[t+i[++h]])<a)return void(r[t]=0);if((v=e[t+i[++h]])<a)return void(r[t]=0);p=0}for(u=1;u<=o;u++)switch(c=e[t+i[u]],p){case 0:if(c>n){if(d=v,(v=e[t+i[++h]])<a)return void(r[t]=0);l-=c+d,p=0;break}if(c<a){if(d>n)return void(r[t]=0);if(v>n)return void(r[t]=0);if(d=v,(v=e[t+i[++h]])>n)return void(r[t]=0);l-=c+d,p=8;break}if(d<=n)return void(r[t]=0);if(v<=n)return void(r[t]=0);if(d=v,(v=e[t+i[++h]])>n){l-=c+d,p=3;break}if(v<a){l-=c+d,p=6;break}return void(r[t]=0);case 1:if(c<a){if(d=v,(v=e[t+i[++h]])>n)return void(r[t]=0);l-=c+d,p=1;break}if(c>n){if(d<a)return void(r[t]=0);if(v<a)return void(r[t]=0);if(d=v,(v=e[t+i[++h]])<a)return void(r[t]=0);l-=c+d,p=9;break}if(d>=a)return void(r[t]=0);if(v>=a)return void(r[t]=0);if(d=v,(v=e[t+i[++h]])<a){l-=c+d,p=2;break}if(v>n){l-=c+d,p=7;break}return void(r[t]=0);case 2:if(c>n)return void(r[t]=0);if(d=v,v=e[t+i[++h]],c<a){if(v>n)return void(r[t]=0);l-=c+d,p=4;break}if(v>n){l-=c+d,p=7;break}if(v<a){l-=c+d,p=2;break}return void(r[t]=0);case 3:if(c<a)return void(r[t]=0);if(d=v,v=e[t+i[++h]],c>n){if(v<a)return void(r[t]=0);l-=c+d,p=5;break}if(v>n){l-=c+d,p=3;break}if(v<a){l-=c+d,p=6;break}return void(r[t]=0);case 4:if(c>n)return void(r[t]=0);if(c<a){if(d=v,(v=e[t+i[++h]])>n)return void(r[t]=0);l-=c+d,p=1;break}if(v>=a)return void(r[t]=0);if(d=v,(v=e[t+i[++h]])<a){l-=c+d,p=2;break}if(v>n){l-=c+d,p=7;break}return void(r[t]=0);case 5:if(c<a)return void(r[t]=0);if(c>n){if(d=v,(v=e[t+i[++h]])<a)return void(r[t]=0);l-=c+d,p=0;break}if(v<=n)return void(r[t]=0);if(d=v,(v=e[t+i[++h]])>n){l-=c+d,p=3;break}if(v<a){l-=c+d,p=6;break}return void(r[t]=0);case 7:if(c>n)return void(r[t]=0);if(c<a)return void(r[t]=0);if(d=v,(v=e[t+i[++h]])>n){l-=c+d,p=3;break}if(v<a){l-=c+d,p=6;break}return void(r[t]=0);case 6:if(c>n)return void(r[t]=0);if(c<a)return void(r[t]=0);if(d=v,(v=e[t+i[++h]])<a){l-=c+d,p=2;break}if(v>n){l-=c+d,p=7;break}return void(r[t]=0);case 8:if(c>n){if(v<a)return void(r[t]=0);if(d=v,(v=e[t+i[++h]])<a)return void(r[t]=0);l-=c+d,p=9;break}if(c<a){if(d=v,(v=e[t+i[++h]])>n)return void(r[t]=0);l-=c+d,p=1;break}return void(r[t]=0);case 9:if(c<a){if(v>n)return void(r[t]=0);if(d=v,(v=e[t+i[++h]])>n)return void(r[t]=0);l-=c+d,p=8;break}if(c>n){if(d=v,(v=e[t+i[++h]])<a)return void(r[t]=0);l-=c+d,p=0;break}return void(r[t]=0)}r[t]=l+s*e[t]},a=function(e,t,r){this.dirs=new Int32Array(1024),this.dirs_count=0|function(e,t,r){var a,n,i=0;for(a=r,n=0;n<a;n++,i++)a=Math.sqrt(r*r-n*n)+.5|0,t[i]=a+e*n;for(a--;a<n&&a>=0;a--,i++)n=Math.sqrt(r*r-a*a)+.5|0,t[i]=a+e*n;for(;-a<n;a--,i++)n=Math.sqrt(r*r-a*a)+.5|0,t[i]=a+e*n;for(n--;n>=0;n--,i++)a=-Math.sqrt(r*r-n*n)-.5|0,t[i]=a+e*n;for(;n>a;n--,i++)a=-Math.sqrt(r*r-n*n)-.5|0,t[i]=a+e*n;for(a++;a<=0;a++,i++)n=-Math.sqrt(r*r-a*a)-.5|0,t[i]=a+e*n;for(;a<-n;a++,i++)n=-Math.sqrt(r*r-a*a)-.5|0,t[i]=a+e*n;for(n++;n<0;n++,i++)a=Math.sqrt(r*r-n*n)+.5|0,t[i]=a+e*n;return t[i]=t[0],t[i+1]=t[1],i}(e,this.dirs,r),this.scores=new Int32Array(e*t),this.radius=0|r};return{level_tables:[],tau:7,init:function(e,t,r,n){var i;for(void 0===n&&(n=1),r=Math.min(r,7),r=Math.max(r,3),i=0;i<n;++i)this.level_tables[i]=new a(e>>i,t>>i,r)},detect:function(a,n,i){void 0===i&&(i=4);var o,s=this.level_tables[0],l=0|s.radius,u=l-1|0,h=s.dirs,c=0|s.dirs_count,f=c>>1,d=a.data,v=0|a.cols,p=0|a.rows,g=v>>1,_=s.scores,m=0,y=0,b=0,x=0,k=0,w=0,C=0,T=0,S=0|this.tau,I=0,A=0|Math.max(l+1,i),R=0|Math.max(l+1,i),N=0|Math.min(v-l-2,v-i),E=0|Math.min(p-l-2,p-i);for(b=R*v+A|0,y=R;y<E;++y,b+=v)for(m=A,x=b;m<N;++m,++x)k=d[x]+S,(w=d[x]-S)<d[x+l]&&d[x+l]<k&&w<d[x-l]&&d[x-l]<k?_[x]=0:r(d,x,_,w,k,h,f,c);for(b=R*v+A|0,y=R;y<E;++y,b+=v)for(m=A,x=b;m<N;++m,++x)T=_[x],(C=Math.abs(T))<5?(++m,++x):e(_,x,v)>=3&&t(_,x,T,g,l)&&((o=n[I]).x=m,o.y=y,o.score=C,++I,m+=u,x+=u);return I}}}();e.yape=t}(n),function(e){var t=function(){var e=new Int32Array([8,-3,9,5,4,2,7,-12,-11,9,-8,2,7,-12,12,-13,2,-13,2,12,1,-7,1,6,-2,-10,-2,-4,-13,-13,-11,-8,-13,-3,-12,-9,10,4,11,9,-13,-8,-8,-9,-11,7,-9,12,7,7,12,6,-4,-5,-3,0,-13,2,-12,-3,-9,0,-7,5,12,-6,12,-1,-3,6,-2,12,-6,-13,-4,-8,11,-13,12,-8,4,7,5,1,5,-3,10,-3,3,-7,6,12,-8,-7,-6,-2,-2,11,-1,-10,-13,12,-8,10,-7,3,-5,-3,-4,2,-3,7,-10,-12,-6,11,5,-12,6,-7,5,-6,7,-1,1,0,4,-5,9,11,11,-13,4,7,4,12,2,-1,4,4,-4,-12,-2,7,-8,-5,-7,-10,4,11,9,12,0,-8,1,-13,-13,-2,-8,2,-3,-2,-2,3,-6,9,-4,-9,8,12,10,7,0,9,1,3,7,-5,11,-10,-13,-6,-11,0,10,7,12,1,-6,-3,-6,12,10,-9,12,-4,-13,8,-8,-12,-13,0,-8,-4,3,3,7,8,5,7,10,-7,-1,7,1,-12,3,-10,5,6,2,-4,3,-10,-13,0,-13,5,-13,-7,-12,12,-13,3,-11,8,-7,12,-4,7,6,-10,12,8,-9,-1,-7,-6,-2,-5,0,12,-12,5,-7,5,3,-10,8,-13,-7,-7,-4,5,-3,-2,-1,-7,2,9,5,-11,-11,-13,-5,-13,-1,6,0,-1,5,-3,5,2,-4,-13,-4,12,-9,-6,-9,6,-12,-10,-8,-4,10,2,12,-3,7,12,12,12,-7,-13,-6,5,-4,9,-3,4,7,-1,12,2,-7,6,-5,1,-13,11,-12,5,-3,7,-2,-6,7,-8,12,-7,-13,-7,-11,-12,1,-3,12,12,2,-6,3,0,-4,3,-2,-13,-1,-13,1,9,7,1,8,-6,1,-1,3,12,9,1,12,6,-1,-9,-1,3,-13,-13,-10,5,7,7,10,12,12,-5,12,9,6,3,7,11,5,-13,6,10,2,-12,2,3,3,8,4,-6,2,6,12,-13,9,-12,10,3,-8,4,-7,9,-11,12,-4,-6,1,12,2,-8,6,-9,7,-4,2,3,3,-2,6,3,11,0,3,-3,8,-8,7,8,9,3,-11,-5,-6,-4,-10,11,-5,10,-5,-8,-3,12,-10,5,-9,0,8,-1,12,-6,4,-6,6,-11,-10,12,-8,7,4,-2,6,7,-2,0,-2,12,-5,-8,-5,2,7,-6,10,12,-9,-13,-8,-8,-5,-13,-5,-2,8,-8,9,-13,-9,-11,-9,0,1,-8,1,-2,7,-4,9,1,-2,1,-1,-4,11,-6,12,-11,-12,-9,-6,4,3,7,7,12,5,5,10,8,0,-4,2,8,-9,12,-5,-13,0,7,2,12,-1,2,1,7,5,11,7,-9,3,5,6,-8,-13,-4,-8,9,-5,9,-3,-3,-4,-7,-3,-12,6,5,8,0,-7,6,-6,12,-13,6,-5,-2,1,-10,3,10,4,1,8,-4,-2,-2,2,-13,2,-12,12,12,-2,-13,0,-6,4,1,9,3,-6,-10,-3,-5,-3,-13,-1,1,7,5,12,-11,4,-2,5,-7,-13,9,-9,-5,7,1,8,6,7,-8,7,6,-7,-4,-7,1,-8,11,-7,-8,-13,6,-12,-8,2,4,3,9,10,-5,12,3,-6,-5,-6,7,8,-3,9,-8,2,-12,2,8,-11,-2,-10,3,-12,-13,-7,-9,-11,0,-10,-5,5,-3,11,8,-2,-13,-1,12,-1,-8,0,9,-13,-11,-12,-5,-10,-2,-10,11,-3,9,-2,-13,2,-3,3,2,-9,-13,-4,0,-4,6,-3,-10,-4,12,-2,-7,-6,-11,-4,9,6,-3,6,11,-13,11,-5,5,11,11,12,6,7,-5,12,-2,-1,12,0,7,-4,-8,-3,-2,-7,1,-6,7,-13,-12,-8,-13,-7,-2,-6,-8,-8,5,-6,-9,-5,-1,-4,5,-13,7,-8,10,1,5,5,-13,1,0,10,-13,9,12,10,-1,5,-8,10,-9,-1,11,1,-13,-9,-3,-6,2,-1,-10,1,12,-13,1,-8,-10,8,-11,10,-6,2,-13,3,-6,7,-13,12,-9,-10,-10,-5,-7,-10,-8,-8,-13,4,-6,8,5,3,12,8,-13,-4,2,-3,-3,5,-13,10,-12,4,-13,5,-1,-9,9,-4,3,0,3,3,-9,-12,1,-6,1,3,2,4,-8,-10,-10,-10,9,8,-13,12,12,-8,-12,-6,-5,2,2,3,7,10,6,11,-8,6,8,8,-12,-7,10,-6,5,-3,-9,-3,9,-1,-13,-1,5,-3,-7,-3,4,-8,-2,-8,3,4,2,12,12,2,-5,3,11,6,-9,11,-13,3,-1,7,12,11,-1,12,4,-3,0,-3,6,4,-11,4,12,2,-4,2,1,-10,-6,-8,1,-13,7,-11,1,-13,12,-11,-13,6,0,11,-13,0,-1,1,4,-13,3,-9,-2,-9,8,-6,-3,-13,-6,-8,-2,5,-9,8,10,2,7,3,-9,-1,-6,-1,-1,9,5,11,-2,11,-3,12,-8,3,0,3,5,-1,4,0,10,3,-6,4,5,-13,0,-10,5,5,8,12,11,8,9,9,-6,7,-4,8,-12,-10,4,-10,9,7,3,12,4,9,-7,10,-2,7,0,12,-2,-1,-6,0,-11]),t=new n.matrix_t(3,3,n.F32_t|n.C1_t),r=new n.matrix_t(32,32,n.U8_t|n.C1_t),a=function(e,r,a,i,o,s){var l=Math.cos(a),u=Math.sin(a);t.data[0]=l,t.data[1]=-u,t.data[2]=(-l+u)*s*.5+i,t.data[3]=u,t.data[4]=l,t.data[5]=(-u-l)*s*.5+o,n.imgproc.warp_affine(e,r,t,128)};return{describe:function(t,i,o,s){var l=0,u=0,h=0,c=0,f=0,d=r.data,v=528,p=0;s.type&n.U8_t?s.resize(32,o,1):(s.type=n.U8_t,s.cols=32,s.rows=o,s.channel=1,s.allocate());var g=s.data,_=0;for(l=0;l<o;++l){for(a(t,r,i[l].angle,i[l].x,i[l].y,32),p=0,u=0;u<32;++u)f=(h=d[v+32*e[p+1]+e[p]])<(c=d[v+32*e[(p+=2)+1]+e[p]])|0,f|=((h=d[v+32*e[(p+=2)+1]+e[p]])<(c=d[v+32*e[(p+=2)+1]+e[p]]))<<1,f|=((h=d[v+32*e[(p+=2)+1]+e[p]])<(c=d[v+32*e[(p+=2)+1]+e[p]]))<<2,f|=((h=d[v+32*e[(p+=2)+1]+e[p]])<(c=d[v+32*e[(p+=2)+1]+e[p]]))<<3,f|=((h=d[v+32*e[(p+=2)+1]+e[p]])<(c=d[v+32*e[(p+=2)+1]+e[p]]))<<4,f|=((h=d[v+32*e[(p+=2)+1]+e[p]])<(c=d[v+32*e[(p+=2)+1]+e[p]]))<<5,f|=((h=d[v+32*e[(p+=2)+1]+e[p]])<(c=d[v+32*e[(p+=2)+1]+e[p]]))<<6,h=d[v+32*e[(p+=2)+1]+e[p]],c=d[v+32*e[(p+=2)+1]+e[p]],p+=2,g[_+u]=f|=(h<c)<<7;_+=32}}}}();e.orb=t}(n),function(e){var t,r=(t=n.imgproc.scharr_derivatives,{track:function(e,r,a,i,o,s,l,u,h,c){void 0===l&&(l=30),void 0===u&&(u=new Uint8Array(o)),void 0===h&&(h=.01),void 0===c&&(c=1e-4);var f=.5*(s-1),d=s*s|0,v=d<<1,p=e.data,g=r.data,_=p[0].data,m=g[0].data,y=p[0].cols,b=p[0].rows,x=0,k=n.cache.get_buffer(d<<2),w=n.cache.get_buffer(v<<2),C=n.cache.get_buffer(b*(y<<1)<<2),T=new n.matrix_t(y,b,n.S32C2_t,C.data),S=k.i32,I=w.i32,A=C.i32,R=0,N=0,E=0,F=0,M=0,D=0,O=0,L=0,z=0,B=0,P=0,V=0,U=0,W=0,G=0,H=0,j=0,q=0,X=0,K=0,Q=0,Y=0,J=0,Z=0,$=0,ee=0,te=0,re=0,ae=0,ne=0,ie=0,oe=0,se=16384,le=1/(1<<20),ue=0,he=0,ce=0,fe=0,de=0,ve=0,pe=0,ge=0,_e=0,me=0,ye=0;for(h*=h;K<o;++K)u[K]=1;var be=e.levels-1|0;for(Z=be;Z>=0;--Z)for(O=1/(1<<Z),R=(x=y>>Z)<<1,_=p[Z].data,m=g[Z].data,te=x-s|0,re=(b>>Z)-s|0,t(p[Z],T),$=0;$<o;++$)if(L=a[K=$<<1]*O,z=a[Q=K+1]*O,Z==be?(B=L,P=z):(B=2*i[K],P=2*i[Q]),i[K]=B,i[Q]=P,0==(Y=(H=0|(L-=f))<=0|H>=te|(j=0|(z-=f))<=0|j>=re)){for(fe=se-(ue=(1-(ae=L-H))*(1-(ne=z-j))*se+.5|0)-(he=ae*(1-ne)*se+.5|0)-(ce=(1-ae)*ne*se+.5|0),ge=0,_e=0,me=0,J=0;J<s;++J)for(E=(N=(J+j)*x+H|0)<<1,M=(F=J*s|0)<<1,Y=0;Y<s;++Y,++N,++F,E+=2)ve=8192+(ve=A[E]*ue+A[E+2]*he+A[E+R]*ce+A[E+R+2]*fe)>>14,pe=8192+(pe=A[E+1]*ue+A[E+3]*he+A[E+R+1]*ce+A[E+R+3]*fe)>>14,S[F]=de=256+(de=_[N]*ue+_[N+1]*he+_[N+x]*ce+_[N+x+1]*fe)>>9,I[M++]=ve,I[M++]=pe,ge+=ve*ve,_e+=ve*pe,me+=pe*pe;if(ye=(ge*=le)*(me*=le)-(_e*=le)*_e,(me+ge-Math.sqrt((ge-me)*(ge-me)+4*_e*_e))/v<c||ye<1.1920929e-7)0==Z&&(u[$]=0);else for(ye=1/ye,B-=f,P-=f,V=0,U=0,ee=0;ee<l;++ee){if(0!=(Y=(q=0|B)<=0|q>=te|(X=0|P)<=0|X>=re)){0==Z&&(u[$]=0);break}for(fe=se-(ue=(1-(ae=B-q))*(1-(ne=P-X))*se+.5|0)-(he=ae*(1-ne)*se+.5|0)-(ce=(1-ae)*ne*se+.5|0),ie=0,oe=0,J=0;J<s;++J)for(D=(J+X)*x+q|0,M=(F=J*s|0)<<1,Y=0;Y<s;++Y,++D,++F)de=256+(de=m[D]*ue+m[D+1]*he+m[D+x]*ce+m[D+x+1]*fe)>>9,ie+=(de-=S[F])*I[M++],oe+=de*I[M++];if(P+=G=(_e*(ie*=le)-ge*(oe*=le))*ye,i[K]=(B+=W=(_e*oe-me*ie)*ye)+f,i[Q]=P+f,W*W+G*G<=h)break;if(ee>0&&Math.abs(W+V)<.01&&Math.abs(G+U)<.01){i[K]-=.5*W,i[Q]-=.5*G;break}V=W,U=G}}else 0==Z&&(u[$]=0);n.cache.put_buffer(k),n.cache.put_buffer(w),n.cache.put_buffer(C)}});e.optical_flow_lk=r}(n),function(e){var t,r=(t=function(e,t){var r=.25*e.width+.5|0;return t.x<=e.x+r&&t.x>=e.x-r&&t.y<=e.y+r&&t.y>=e.y-r&&t.width<=1.5*e.width+.5|0&&1.5*t.width+.5|0>=e.width},{edges_density:.07,detect_single_scale:function(e,t,r,a,n,i,o,s){var l,u,h,c,f,d,v,p,g,_,m,y,b,x,k,w,C,T,S,I,A,R,N,E,F,M=s.size[0]*o|0,D=s.size[1]*o|0,O=.5*o+1.5|0,L=O,z=n-M|0,B=i-D|0,P=n+1|0,V=1/(M*D),U=!0,W=0,G=M,H=D*P,j=H+M,q=M*D*255*this.edges_density|0,X=[];for(f=0;f<B;f+=L)for(W=f*P,c=0;c<z;c+=O,W+=O)if(d=e[W]-e[W+G]-e[W+H]+e[W+j],a&&(a[W]-a[W+G]-a[W+H]+a[W+j]<q||d<20))c+=O,W+=O;else{for(p=(v=(t[W]-t[W+G]-t[W+H]+t[W+j])*V-(d*=V)*d)>0?Math.sqrt(v):1,b=(g=s.complexClassifiers).length,U=!0,l=0;l<b;++l){for(w=(_=g[l]).threshold,x=(m=_.simpleClassifiers).length,C=0,u=0;u<x;++u){if(T=0,k=(I=(y=m[u]).features).length,1===y.tilted)for(h=0;h<k;++h)T+=(r[A=~~(c+(S=I[h])[0]*o)+~~(f+S[1]*o)*P]-r[A+(E=~~(S[2]*o))+(R=E*P)]-r[A-(F=~~(S[3]*o))+(N=F*P)]+r[A+E-F+R+N])*S[4];else for(h=0;h<k;++h)T+=(e[A=~~(c+(S=I[h])[0]*o)+~~(f+S[1]*o)*P]-e[A+(E=~~(S[2]*o))]-e[A+(N=(F=~~(S[3]*o))*P)]+e[A+N+E])*S[4];C+=T*V<y.threshold*p?y.left_val:y.right_val}if(C<w){U=!1;break}}U&&(X.push({x:c,y:f,width:M,height:D,neighbor:1,confidence:C}),c+=O,W+=O)}return X},detect_multi_scale:function(e,t,r,a,n,i,o,s,l){void 0===s&&(s=1.2),void 0===l&&(l=1);for(var u=o.size[0],h=o.size[1],c=[];l*u<n&&l*h<i;)c=c.concat(this.detect_single_scale(e,t,r,a,n,i,l,o)),l*=s;return c},group_rectangles:function(e,r){void 0===r&&(r=1);var a,n,i=e.length,o=[];for(a=0;a<i;++a)o[a]={parent:-1,element:e[a],rank:0};for(a=0;a<i;++a)if(o[a].element){for(var s=a;-1!=o[s].parent;)s=o[s].parent;for(n=0;n<i;++n)if(a!=n&&o[n].element&&t(o[a].element,o[n].element)){for(var l=n;-1!=o[l].parent;)l=o[l].parent;if(l!=s){o[s].rank>o[l].rank?o[l].parent=s:(o[s].parent=l,o[s].rank==o[l].rank&&o[l].rank++,s=l);for(var u,h=n;-1!=o[h].parent;)u=h,h=o[h].parent,o[u].parent=s;for(h=a;-1!=o[h].parent;)u=h,h=o[h].parent,o[u].parent=s}}}var c=[],f=0;for(a=0;a<i;a++){n=-1;var d=a;if(o[d].element){for(;-1!=o[d].parent;)d=o[d].parent;o[d].rank>=0&&(o[d].rank=~f++),n=~o[d].rank}c[a]=n}var v=[];for(a=0;a<f+1;++a)v[a]={neighbors:0,x:0,y:0,width:0,height:0,confidence:0};for(a=0;a<i;++a){var p=e[a],g=c[a];0==v[g].neighbors&&(v[g].confidence=p.confidence),++v[g].neighbors,v[g].x+=p.x,v[g].y+=p.y,v[g].width+=p.width,v[g].height+=p.height,v[g].confidence=Math.max(v[g].confidence,p.confidence)}var _=[];for(a=0;a<f;++a)(i=v[a].neighbors)>=r&&_.push({x:(2*v[a].x+i)/(2*i),y:(2*v[a].y+i)/(2*i),width:(2*v[a].width+i)/(2*i),height:(2*v[a].height+i)/(2*i),neighbors:v[a].neighbors,confidence:v[a].confidence});var m=[];for(i=_.length,a=0;a<i;++a){p=_[a];var y=!0;for(n=0;n<i;++n){var b=_[n],x=.25*b.width+.5|0;if(a!=n&&p.x>=b.x-x&&p.y>=b.y-x&&p.x+p.width<=b.x+b.width+x&&p.y+p.height<=b.y+b.height+x&&(b.neighbors>Math.max(3,p.neighbors)||p.neighbors<3)){y=!1;break}}y&&m.push(p)}return m}});e.haar=r}(n),function(e){var t,r,a=(t=function(e,t){var r=.25*e.width+.5|0;return t.x<=e.x+r&&t.x>=e.x-r&&t.y<=e.y+r&&t.y>=e.y-r&&t.width<=1.5*e.width+.5|0&&1.5*t.width+.5|0>=e.width},r=new n.pyramid_t(1),{interval:4,scale:1.1486,next:5,scale_to:1,prepare_cascade:function(e){for(var t=e.stage_classifier.length,r=0;r<t;r++)for(var a=e.stage_classifier[r].feature,n=e.stage_classifier[r].count,i=e.stage_classifier[r]._feature=new Array(n),o=0;o<n;o++)i[o]={size:a[o].size,px:new Array(a[o].size),pz:new Array(a[o].size),nx:new Array(a[o].size),nz:new Array(a[o].size)}},build_pyramid:function(e,t,a,i){void 0===i&&(i=4);var o=e.cols,s=e.rows,l=0,u=0,h=0,c=!1,f=e,d=e,v=n.U8_t|n.C1_t;this.interval=i,this.scale=Math.pow(2,1/(this.interval+1)),this.next=this.interval+1|0,this.scale_to=Math.log(Math.min(o/t,s/a))/Math.log(this.scale)|0;var p=4*(this.scale_to+2*this.next)|0;for(r.levels!=p&&(r.levels=p,r.data=new Array(p),c=!0,r.data[0]=e),l=1;l<=this.interval;++l)u=o/Math.pow(this.scale,l)|0,h=s/Math.pow(this.scale,l)|0,f=r.data[l<<2],(c||u!=f.cols||h!=f.rows)&&(r.data[l<<2]=new n.matrix_t(u,h,v),f=r.data[l<<2]),n.imgproc.resample(e,f,u,h);for(l=this.next;l<this.scale_to+2*this.next;++l)f=r.data[l<<2],u=(d=r.data[(l<<2)-(this.next<<2)]).cols>>1,h=d.rows>>1,(c||u!=f.cols||h!=f.rows)&&(r.data[l<<2]=new n.matrix_t(u,h,v),f=r.data[l<<2]),n.imgproc.pyrdown(d,f);for(l=2*this.next;l<this.scale_to+2*this.next;++l)u=(d=r.data[(l<<2)-(this.next<<2)]).cols>>1,h=d.rows>>1,f=r.data[1+(l<<2)],(c||u!=f.cols||h!=f.rows)&&(r.data[1+(l<<2)]=new n.matrix_t(u,h,v),f=r.data[1+(l<<2)]),n.imgproc.pyrdown(d,f,1,0),f=r.data[2+(l<<2)],(c||u!=f.cols||h!=f.rows)&&(r.data[2+(l<<2)]=new n.matrix_t(u,h,v),f=r.data[2+(l<<2)]),n.imgproc.pyrdown(d,f,0,1),f=r.data[3+(l<<2)],(c||u!=f.cols||h!=f.rows)&&(r.data[3+(l<<2)]=new n.matrix_t(u,h,v),f=r.data[3+(l<<2)]),n.imgproc.pyrdown(d,f,1,1);return r},detect:function(e,t){var r,a,n,i,o,s=this.scale,l=this.next,u=this.scale_to,h=0,c=0,f=0,d=0,v=0,p=0,g=0,_=0,m=0,y=0,b=0,x=0,k=0,w=0,C=0,T=0,S=0,I=0,A=!0,R=!0,N=1,E=1,F=[0,1,0,1],M=[0,0,1,1],D=[],O=e.data,L=[],z=[0,0,0],B=[0,0,0],P=[0,0,0];for(h=0;h<u;h++){for(T=O[(C=h<<2)+(l<<3)].cols-(t.width>>2),S=O[C+(l<<3)].rows-(t.height>>2),B[0]=1*O[C].cols,B[1]=1*O[C+(l<<2)].cols,B[2]=1*O[C+(l<<3)].cols,P[0]=4*O[C].cols-4*T,P[1]=2*O[C+(l<<2)].cols-2*T,P[2]=1*O[C+(l<<3)].cols-1*T,_=t.stage_classifier.length,c=0;c<_;c++)for(n=t.stage_classifier[c].feature,a=t.stage_classifier[c]._feature,m=t.stage_classifier[c].count,f=0;f<m;f++)for(i=a[f],y=0|(o=n[f]).size,g=0;g<y;g++)i.px[g]=1*o.px[g]+o.py[g]*B[o.pz[g]],i.pz[g]=o.pz[g],i.nx[g]=1*o.nx[g]+o.ny[g]*B[o.nz[g]],i.nz[g]=o.nz[g];for(L[0]=O[C].data,L[1]=O[C+(l<<2)].data,g=0;g<4;g++)for(L[2]=O[C+(l<<3)+g].data,z[0]=2*F[g]+M[g]*(2*O[C].cols),z[1]=1*F[g]+M[g]*(1*O[C+(l<<2)].cols),z[2]=0,p=0;p<S;p++){for(v=0;v<T;v++){for(I=0,A=!0,_=t.stage_classifier.length,c=0;c<_;c++){for(I=0,r=t.stage_classifier[c].alpha,a=t.stage_classifier[c]._feature,m=t.stage_classifier[c].count,f=0;f<m;f++)if((x=L[(i=a[f]).pz[0]][z[i.pz[0]]+i.px[0]])<=(k=L[i.nz[0]][z[i.nz[0]]+i.nx[0]]))I+=r[f<<1];else{for(R=!0,y=i.size,w=1;w<y;w++){if(i.pz[w]>=0&&(b=L[i.pz[w]][z[i.pz[w]]+i.px[w]])<x){if(b<=k){R=!1;break}x=b}if(i.nz[w]>=0&&(d=L[i.nz[w]][z[i.nz[w]]+i.nx[w]])>k){if(x<=d){R=!1;break}k=d}}I+=R?r[1+(f<<1)]:r[f<<1]}if(I<t.stage_classifier[c].threshold){A=!1;break}}A&&(D.push({x:(4*v+2*F[g])*N,y:(4*p+2*M[g])*E,width:t.width*N,height:t.height*E,neighbor:1,confidence:I}),++v,z[0]+=4,z[1]+=2,z[2]+=1),z[0]+=4,z[1]+=2,z[2]+=1}z[0]+=P[0],z[1]+=P[1],z[2]+=P[2]}N*=s,E*=s}return D},group_rectangles:function(e,r){void 0===r&&(r=1);var a,n,i=e.length,o=[];for(a=0;a<i;++a)o[a]={parent:-1,element:e[a],rank:0};for(a=0;a<i;++a)if(o[a].element){for(var s=a;-1!=o[s].parent;)s=o[s].parent;for(n=0;n<i;++n)if(a!=n&&o[n].element&&t(o[a].element,o[n].element)){for(var l=n;-1!=o[l].parent;)l=o[l].parent;if(l!=s){o[s].rank>o[l].rank?o[l].parent=s:(o[s].parent=l,o[s].rank==o[l].rank&&o[l].rank++,s=l);for(var u,h=n;-1!=o[h].parent;)u=h,h=o[h].parent,o[u].parent=s;for(h=a;-1!=o[h].parent;)u=h,h=o[h].parent,o[u].parent=s}}}var c=[],f=0;for(a=0;a<i;a++){n=-1;var d=a;if(o[d].element){for(;-1!=o[d].parent;)d=o[d].parent;o[d].rank>=0&&(o[d].rank=~f++),n=~o[d].rank}c[a]=n}var v=[];for(a=0;a<f+1;++a)v[a]={neighbors:0,x:0,y:0,width:0,height:0,confidence:0};for(a=0;a<i;++a){var p=e[a],g=c[a];0==v[g].neighbors&&(v[g].confidence=p.confidence),++v[g].neighbors,v[g].x+=p.x,v[g].y+=p.y,v[g].width+=p.width,v[g].height+=p.height,v[g].confidence=Math.max(v[g].confidence,p.confidence)}var _=[];for(a=0;a<f;++a)(i=v[a].neighbors)>=r&&_.push({x:(2*v[a].x+i)/(2*i),y:(2*v[a].y+i)/(2*i),width:(2*v[a].width+i)/(2*i),height:(2*v[a].height+i)/(2*i),neighbors:v[a].neighbors,confidence:v[a].confidence});var m=[];for(i=_.length,a=0;a<i;++a){p=_[a];var y=!0;for(n=0;n<i;++n){var b=_[n],x=.25*b.width+.5|0;if(a!=n&&p.x>=b.x-x&&p.y>=b.y-x&&p.x+p.width<=b.x+b.width+x&&p.y+p.height<=b.y+b.height+x&&(b.neighbors>Math.max(3,p.neighbors)||p.neighbors<3)){y=!1;break}}y&&m.push(p)}return m}});e.bbf=a}(n),function(e){void 0===module.exports?a.jsfeat=e:module.exports=e}(n),n.haar.frontalface={complexClassifiers:[{simpleClassifiers:[{features:[[3,7,14,4,-1],[3,9,14,2,2]],threshold:.004014195874333382,right_val:.8378106951713562,left_val:.0337941907346249},{features:[[1,2,18,4,-1],[7,2,6,4,3]],threshold:.0151513395830989,right_val:.7488812208175659,left_val:.1514132022857666},{features:[[1,7,15,9,-1],[1,10,15,3,3]],threshold:.004210993181914091,right_val:.6374819874763489,left_val:.0900492817163467}],threshold:.822689414024353},{simpleClassifiers:[{features:[[5,6,2,6,-1],[5,9,2,3,2]],threshold:.0016227109590545297,right_val:.7110946178436279,left_val:.0693085864186287},{features:[[7,5,6,3,-1],[9,5,2,3,3]],threshold:.002290664939209819,right_val:.6668692231178284,left_val:.1795803010463715},{features:[[4,0,12,9,-1],[4,3,12,3,3]],threshold:.005002570804208517,right_val:.6554006934165955,left_val:.1693672984838486},{features:[[6,9,10,8,-1],[6,13,10,4,2]],threshold:.007965989410877228,right_val:.0914145186543465,left_val:.5866332054138184},{features:[[3,6,14,8,-1],[3,10,14,4,2]],threshold:-.003522701095789671,right_val:.6031895875930786,left_val:.1413166970014572},{features:[[14,1,6,10,-1],[14,1,3,10,2]],threshold:.0366676896810532,right_val:.7920318245887756,left_val:.3675672113895416},{features:[[7,8,5,12,-1],[7,12,5,4,3]],threshold:.009336147457361221,right_val:.2088509947061539,left_val:.6161385774612427},{features:[[1,1,18,3,-1],[7,1,6,3,3]],threshold:.008696131408214569,right_val:.6360273957252502,left_val:.2836230993270874},{features:[[1,8,17,2,-1],[1,9,17,1,2]],threshold:.0011488880263641477,right_val:.5800700783729553,left_val:.2223580926656723},{features:[[16,6,4,2,-1],[16,7,4,1,2]],threshold:-.002148468978703022,right_val:.5787054896354675,left_val:.2406464070081711},{features:[[5,17,2,2,-1],[5,18,2,1,2]],threshold:.002121906029060483,right_val:.136223703622818,left_val:.5559654831886292},{features:[[14,2,6,12,-1],[14,2,3,12,2]],threshold:-.0939491465687752,right_val:.4717740118503571,left_val:.8502737283706665},{features:[[4,0,4,12,-1],[4,0,2,6,2],[6,6,2,6,2]],threshold:.0013777789426967502,right_val:.2834529876708984,left_val:.5993673801422119},{features:[[2,11,18,8,-1],[8,11,6,8,3]],threshold:.0730631574988365,right_val:.7060034275054932,left_val:.4341886043548584},{features:[[5,7,10,2,-1],[5,8,10,1,2]],threshold:.00036767389974556863,right_val:.6051574945449829,left_val:.3027887940406799},{features:[[15,11,5,3,-1],[15,12,5,1,3]],threshold:-.0060479710809886456,right_val:.5675256848335266,left_val:.17984339594841}],threshold:6.956608772277832},{simpleClassifiers:[{features:[[5,3,10,9,-1],[5,6,10,3,3]],threshold:-.0165106896311045,right_val:.1424857974052429,left_val:.6644225120544434},{features:[[9,4,2,14,-1],[9,11,2,7,2]],threshold:.002705249935388565,right_val:.1288477033376694,left_val:.6325352191925049},{features:[[3,5,4,12,-1],[3,9,4,4,3]],threshold:.002806986914947629,right_val:.6193193197250366,left_val:.1240288019180298},{features:[[4,5,12,5,-1],[8,5,4,5,3]],threshold:-.0015402400167658925,right_val:.5670015811920166,left_val:.1432143002748489},{features:[[5,6,10,8,-1],[5,10,10,4,2]],threshold:-.0005638627917505801,right_val:.5905207991600037,left_val:.1657433062791824},{features:[[8,0,6,9,-1],[8,3,6,3,3]],threshold:.0019253729842603207,right_val:.5738824009895325,left_val:.2695507109165192},{features:[[9,12,1,8,-1],[9,16,1,4,2]],threshold:-.005021484103053808,right_val:.5782774090766907,left_val:.1893538981676102},{features:[[0,7,20,6,-1],[0,9,20,2,3]],threshold:.0026365420781075954,right_val:.5695425868034363,left_val:.2309329062700272},{features:[[7,0,6,17,-1],[9,0,2,17,3]],threshold:-.0015127769438549876,right_val:.5956642031669617,left_val:.2759602069854736},{features:[[9,0,6,4,-1],[11,0,2,4,3]],threshold:-.0101574398577213,right_val:.5522047281265259,left_val:.1732538044452667},{features:[[5,1,6,4,-1],[7,1,2,4,3]],threshold:-.011953660286963,right_val:.5559014081954956,left_val:.1339409947395325},{features:[[12,1,6,16,-1],[14,1,2,16,3]],threshold:.004885949194431305,right_val:.6188849210739136,left_val:.3628703951835632},{features:[[0,5,18,8,-1],[0,5,9,4,2],[9,9,9,4,2]],threshold:-.0801329165697098,right_val:.5475944876670837,left_val:.0912110507488251},{features:[[8,15,10,4,-1],[13,15,5,2,2],[8,17,5,2,2]],threshold:.0010643280111253262,right_val:.5711399912834167,left_val:.3715142905712128},{features:[[3,1,4,8,-1],[3,1,2,4,2],[5,5,2,4,2]],threshold:-.0013419450260698795,right_val:.331809788942337,left_val:.5953313708305359},{features:[[3,6,14,10,-1],[10,6,7,5,2],[3,11,7,5,2]],threshold:-.0546011403203011,right_val:.5602846145629883,left_val:.1844065934419632},{features:[[2,1,6,16,-1],[4,1,2,16,3]],threshold:.0029071690514683723,right_val:.6131715178489685,left_val:.3594244122505188},{features:[[0,18,20,2,-1],[0,19,20,1,2]],threshold:.0007471871795132756,right_val:.3459562957286835,left_val:.5994353294372559},{features:[[8,13,4,3,-1],[8,14,4,1,3]],threshold:.004301380831748247,right_val:.6990845203399658,left_val:.4172652065753937},{features:[[9,14,2,3,-1],[9,15,2,1,3]],threshold:.004501757211983204,right_val:.7801457047462463,left_val:.4509715139865875},{features:[[0,12,9,6,-1],[0,14,9,2,3]],threshold:.0241385009139776,right_val:.1319826990365982,left_val:.5438212752342224}],threshold:9.498542785644531},{simpleClassifiers:[{features:[[5,7,3,4,-1],[5,9,3,2,2]],threshold:.001921223010867834,right_val:.6199870705604553,left_val:.1415266990661621},{features:[[9,3,2,16,-1],[9,11,2,8,2]],threshold:-.00012748669541906565,right_val:.1884928941726685,left_val:.6191074252128601},{features:[[3,6,13,8,-1],[3,10,13,4,2]],threshold:.0005140993162058294,right_val:.5857927799224854,left_val:.1487396955490112},{features:[[12,3,8,2,-1],[12,3,4,2,2]],threshold:.004187860991805792,right_val:.6359239816665649,left_val:.2746909856796265},{features:[[8,8,4,12,-1],[8,12,4,4,3]],threshold:.005101571790874004,right_val:.2175628989934921,left_val:.5870851278305054},{features:[[11,3,8,6,-1],[15,3,4,3,2],[11,6,4,3,2]],threshold:-.002144844038411975,right_val:.2979590892791748,left_val:.5880944728851318},{features:[[7,1,6,19,-1],[9,1,2,19,3]],threshold:-.0028977119363844395,right_val:.5876647233963013,left_val:.2373327016830444},{features:[[9,0,6,4,-1],[11,0,2,4,3]],threshold:-.0216106791049242,right_val:.5194202065467834,left_val:.1220654994249344},{features:[[3,1,9,3,-1],[6,1,3,3,3]],threshold:-.004629931878298521,right_val:.5817409157752991,left_val:.263123095035553},{features:[[8,15,10,4,-1],[13,15,5,2,2],[8,17,5,2,2]],threshold:.000593937118537724,right_val:.5698544979095459,left_val:.363862007856369},{features:[[0,3,6,10,-1],[3,3,3,10,2]],threshold:.0538786612451077,right_val:.7559366226196289,left_val:.4303531050682068},{features:[[3,4,15,15,-1],[3,9,15,5,3]],threshold:.0018887349870055914,right_val:.561342716217041,left_val:.2122603058815002},{features:[[6,5,8,6,-1],[6,7,8,2,3]],threshold:-.0023635339457541704,right_val:.2642767131328583,left_val:.563184916973114},{features:[[4,4,12,10,-1],[10,4,6,5,2],[4,9,6,5,2]],threshold:.0240177996456623,right_val:.2751705944538117,left_val:.5797107815742493},{features:[[6,4,4,4,-1],[8,4,2,4,2]],threshold:.00020543030404951423,right_val:.575256884098053,left_val:.2705242037773132},{features:[[15,11,1,2,-1],[15,12,1,1,2]],threshold:.0008479019743390381,right_val:.2334876954555512,left_val:.5435624718666077},{features:[[3,11,2,2,-1],[3,12,2,1,2]],threshold:.0014091329649090767,right_val:.2063155025243759,left_val:.5319424867630005},{features:[[16,11,1,3,-1],[16,12,1,1,3]],threshold:.0014642629539594054,right_val:.3068861067295075,left_val:.5418980717658997},{features:[[3,15,6,4,-1],[3,15,3,2,2],[6,17,3,2,2]],threshold:.0016352549428120255,right_val:.6112868189811707,left_val:.3695372939109802},{features:[[6,7,8,2,-1],[6,8,8,1,2]],threshold:.0008317275205627084,right_val:.6025236248970032,left_val:.3565036952495575},{features:[[3,11,1,3,-1],[3,12,1,1,3]],threshold:-.0020998890977352858,right_val:.5362827181816101,left_val:.1913982033729553},{features:[[6,0,12,2,-1],[6,1,12,1,2]],threshold:-.0007421398186124861,right_val:.552931010723114,left_val:.3835555016994476},{features:[[9,14,2,3,-1],[9,15,2,1,3]],threshold:.0032655049581080675,right_val:.7101895809173584,left_val:.4312896132469177},{features:[[7,15,6,2,-1],[7,16,6,1,2]],threshold:.0008913499186746776,right_val:.6391963958740234,left_val:.3984830975532532},{features:[[0,5,4,6,-1],[0,7,4,2,3]],threshold:-.0152841797098517,right_val:.5433713793754578,left_val:.2366732954978943},{features:[[4,12,12,2,-1],[8,12,4,2,3]],threshold:.004838141147047281,right_val:.3239189088344574,left_val:.5817500948905945},{features:[[6,3,1,9,-1],[6,6,1,3,3]],threshold:-.0009109317907132208,right_val:.2911868989467621,left_val:.5540593862533569},{features:[[10,17,3,2,-1],[11,17,1,2,3]],threshold:-.006127506028860807,right_val:.5196629166603088,left_val:.1775255054235458},{features:[[9,9,2,2,-1],[9,10,2,1,2]],threshold:-.00044576259097084403,right_val:.5533593893051147,left_val:.3024170100688934},{features:[[7,6,6,4,-1],[9,6,2,4,3]],threshold:.0226465407758951,right_val:.6975377202033997,left_val:.4414930939674377},{features:[[7,17,3,2,-1],[8,17,1,2,3]],threshold:-.0018804960418492556,right_val:.5497952103614807,left_val:.2791394889354706},{features:[[10,17,3,3,-1],[11,17,1,3,3]],threshold:.007088910788297653,right_val:.2385547012090683,left_val:.5263199210166931},{features:[[8,12,3,2,-1],[8,13,3,1,2]],threshold:.0017318050377070904,right_val:.6983600854873657,left_val:.4319379031658173},{features:[[9,3,6,2,-1],[11,3,2,2,3]],threshold:-.006848270073533058,right_val:.5390920042991638,left_val:.3082042932510376},{features:[[3,11,14,4,-1],[3,13,14,2,2]],threshold:-15062530110299122e-21,right_val:.3120366036891937,left_val:.552192211151123},{features:[[1,10,18,4,-1],[10,10,9,2,2],[1,12,9,2,2]],threshold:.0294755697250366,right_val:.1770603060722351,left_val:.5401322841644287},{features:[[0,10,3,3,-1],[0,11,3,1,3]],threshold:.008138732984662056,right_val:.121101900935173,left_val:.5178617835044861},{features:[[9,1,6,6,-1],[11,1,2,6,3]],threshold:.0209429506212473,right_val:.3311221897602081,left_val:.5290294289588928},{features:[[8,7,3,6,-1],[9,7,1,6,3]],threshold:-.009566552937030792,right_val:.4451968967914581,left_val:.7471994161605835}],threshold:18.4129695892334},{simpleClassifiers:[{features:[[1,0,18,9,-1],[1,3,18,3,3]],threshold:-.00028206960996612906,right_val:.6076732277870178,left_val:.2064086049795151},{features:[[12,10,2,6,-1],[12,13,2,3,2]],threshold:.00167906004935503,right_val:.1255383938550949,left_val:.5851997137069702},{features:[[0,5,19,8,-1],[0,9,19,4,2]],threshold:.0006982791237533092,right_val:.5728961229324341,left_val:.094018429517746},{features:[[7,0,6,9,-1],[9,0,2,9,3]],threshold:.0007895901217125356,right_val:.5694308876991272,left_val:.1781987994909287},{features:[[5,3,6,1,-1],[7,3,2,1,3]],threshold:-.002856049919500947,right_val:.5788664817810059,left_val:.1638399064540863},{features:[[11,3,6,1,-1],[13,3,2,1,3]],threshold:-.0038122469559311867,right_val:.5508564710617065,left_val:.2085440009832382},{features:[[5,10,4,6,-1],[5,13,4,3,2]],threshold:.0015896620461717248,right_val:.1857215017080307,left_val:.5702760815620422},{features:[[11,3,6,1,-1],[13,3,2,1,3]],threshold:.0100783398374915,right_val:.2189770042896271,left_val:.5116943120956421},{features:[[4,4,12,6,-1],[4,6,12,2,3]],threshold:-.0635263025760651,right_val:.4043813049793243,left_val:.7131379842758179},{features:[[15,12,2,6,-1],[15,14,2,2,3]],threshold:-.009103149175643921,right_val:.54639732837677,left_val:.2567181885242462},{features:[[9,3,2,2,-1],[10,3,1,2,2]],threshold:-.002403500024229288,right_val:.559097409248352,left_val:.1700665950775147},{features:[[9,3,3,1,-1],[10,3,1,1,3]],threshold:.001522636041045189,right_val:.2619054019451141,left_val:.5410556793212891},{features:[[1,1,4,14,-1],[3,1,2,14,2]],threshold:.0179974399507046,right_val:.6535220742225647,left_val:.3732436895370483},{features:[[9,0,4,4,-1],[11,0,2,2,2],[9,2,2,2,2]],threshold:-.00645381910726428,right_val:.5537446141242981,left_val:.2626481950283051},{features:[[7,5,1,14,-1],[7,12,1,7,2]],threshold:-.0118807600811124,right_val:.5544745922088623,left_val:.2003753930330277},{features:[[19,0,1,4,-1],[19,2,1,2,2]],threshold:.0012713660253211856,right_val:.303197592496872,left_val:.5591902732849121},{features:[[5,5,6,4,-1],[8,5,3,4,2]],threshold:.0011376109905540943,right_val:.5646508932113647,left_val:.2730407118797302},{features:[[9,18,3,2,-1],[10,18,1,2,3]],threshold:-.00426519988104701,right_val:.5461820960044861,left_val:.1405909061431885},{features:[[8,18,3,2,-1],[9,18,1,2,3]],threshold:-.0029602861031889915,right_val:.5459290146827698,left_val:.1795035004615784},{features:[[4,5,12,6,-1],[4,7,12,2,3]],threshold:-.008844822645187378,right_val:.280921995639801,left_val:.5736783146858215},{features:[[3,12,2,6,-1],[3,14,2,2,3]],threshold:-.006643068976700306,right_val:.5503826141357422,left_val:.2370675951242447},{features:[[10,8,2,12,-1],[10,12,2,4,3]],threshold:.003999780863523483,right_val:.3304282128810883,left_val:.5608199834823608},{features:[[7,18,3,2,-1],[8,18,1,2,3]],threshold:-.004122172016650438,right_val:.5378993153572083,left_val:.1640105992555618},{features:[[9,0,6,2,-1],[11,0,2,2,3]],threshold:.0156249096617103,right_val:.2288603931665421,left_val:.5227649211883545},{features:[[5,11,9,3,-1],[5,12,9,1,3]],threshold:-.0103564197197557,right_val:.4252927899360657,left_val:.7016193866729736},{features:[[9,0,6,2,-1],[11,0,2,2,3]],threshold:-.008796080946922302,right_val:.5355830192565918,left_val:.2767347097396851},{features:[[1,1,18,5,-1],[7,1,6,5,3]],threshold:.1622693985700607,right_val:.744257926940918,left_val:.434224009513855},{features:[[8,0,4,4,-1],[10,0,2,2,2],[8,2,2,2,2]],threshold:.0045542530715465546,right_val:.2582125067710877,left_val:.5726485848426819},{features:[[3,12,1,3,-1],[3,13,1,1,3]],threshold:-.002130920998752117,right_val:.5361018776893616,left_val:.2106848061084747},{features:[[8,14,5,3,-1],[8,15,5,1,3]],threshold:-.0132084200158715,right_val:.4552468061447144,left_val:.7593790888786316},{features:[[5,4,10,12,-1],[5,4,5,6,2],[10,10,5,6,2]],threshold:-.0659966766834259,right_val:.5344039797782898,left_val:.125247597694397},{features:[[9,6,9,12,-1],[9,10,9,4,3]],threshold:.007914265617728233,right_val:.5601043105125427,left_val:.3315384089946747},{features:[[2,2,12,14,-1],[2,2,6,7,2],[8,9,6,7,2]],threshold:.0208942797034979,right_val:.2768838107585907,left_val:.5506049990653992}],threshold:15.324139595031738},{simpleClassifiers:[{features:[[4,7,12,2,-1],[8,7,4,2,3]],threshold:.0011961159761995077,right_val:.6156241297721863,left_val:.1762690991163254},{features:[[7,4,6,4,-1],[7,6,6,2,2]],threshold:-.0018679830245673656,right_val:.1832399964332581,left_val:.6118106842041016},{features:[[4,5,11,8,-1],[4,9,11,4,2]],threshold:-.00019579799845814705,right_val:.5723816156387329,left_val:.0990442633628845},{features:[[3,10,16,4,-1],[3,12,16,2,2]],threshold:-.0008025565766729414,right_val:.2377282977104187,left_val:.5579879879951477},{features:[[0,0,16,2,-1],[0,1,16,1,2]],threshold:-.0024510810617357492,right_val:.5858935117721558,left_val:.2231457978487015},{features:[[7,5,6,2,-1],[9,5,2,2,3]],threshold:.0005036185029894114,right_val:.5794103741645813,left_val:.2653993964195252},{features:[[3,2,6,10,-1],[3,2,3,5,2],[6,7,3,5,2]],threshold:.0040293349884450436,right_val:.2484865039587021,left_val:.5803827047348022},{features:[[10,5,8,15,-1],[10,10,8,5,3]],threshold:-.0144517095759511,right_val:.5484204888343811,left_val:.1830351948738098},{features:[[3,14,8,6,-1],[3,14,4,3,2],[7,17,4,3,2]],threshold:.0020380979403853416,right_val:.6051092743873596,left_val:.3363558948040009},{features:[[14,2,2,2,-1],[14,3,2,1,2]],threshold:-.0016155190533027053,right_val:.5441246032714844,left_val:.2286642044782639},{features:[[1,10,7,6,-1],[1,13,7,3,2]],threshold:.0033458340913057327,right_val:.2392338067293167,left_val:.5625913143157959},{features:[[15,4,4,3,-1],[15,4,2,3,2]],threshold:.0016379579901695251,right_val:.5964621901512146,left_val:.3906993865966797},{features:[[2,9,14,6,-1],[2,9,7,3,2],[9,12,7,3,2]],threshold:.0302512105554342,right_val:.1575746983289719,left_val:.524848222732544},{features:[[5,7,10,4,-1],[5,9,10,2,2]],threshold:.037251990288496,right_val:.6748418807983398,left_val:.4194310903549194},{features:[[6,9,8,8,-1],[6,9,4,4,2],[10,13,4,4,2]],threshold:-.0251097902655602,right_val:.5473451018333435,left_val:.1882549971342087},{features:[[14,1,3,2,-1],[14,2,3,1,2]],threshold:-.005309905856847763,right_val:.5227110981941223,left_val:.133997306227684},{features:[[1,4,4,2,-1],[3,4,2,2,2]],threshold:.0012086479691788554,right_val:.6109635829925537,left_val:.3762088119983673},{features:[[11,10,2,8,-1],[11,14,2,4,2]],threshold:-.0219076797366142,right_val:.5404006838798523,left_val:.266314297914505},{features:[[0,0,5,3,-1],[0,1,5,1,3]],threshold:.0054116579703986645,right_val:.2232273072004318,left_val:.5363578796386719},{features:[[2,5,18,8,-1],[11,5,9,4,2],[2,9,9,4,2]],threshold:.069946326315403,right_val:.2453698068857193,left_val:.5358232855796814},{features:[[6,6,1,6,-1],[6,9,1,3,2]],threshold:.00034520021290518343,right_val:.5376930236816406,left_val:.2409671992063522},{features:[[19,1,1,3,-1],[19,2,1,1,3]],threshold:.0012627709656953812,right_val:.3155693113803864,left_val:.5425856709480286},{features:[[7,6,6,6,-1],[9,6,2,6,3]],threshold:.0227195098996162,right_val:.6597865223884583,left_val:.4158405959606171},{features:[[19,1,1,3,-1],[19,2,1,1,3]],threshold:-.001811100053600967,right_val:.5505244731903076,left_val:.2811253070831299},{features:[[3,13,2,3,-1],[3,14,2,1,3]],threshold:.0033469670452177525,right_val:.1891465038061142,left_val:.526002824306488},{features:[[8,4,8,12,-1],[12,4,4,6,2],[8,10,4,6,2]],threshold:.00040791751234792173,right_val:.3344210088253021,left_val:.5673509240150452},{features:[[5,2,6,3,-1],[7,2,2,3,3]],threshold:.0127347996458411,right_val:.2395612001419067,left_val:.5343592166900635},{features:[[6,1,9,10,-1],[6,6,9,5,2]],threshold:-.007311972789466381,right_val:.4022207856178284,left_val:.6010890007019043},{features:[[0,4,6,12,-1],[2,4,2,12,3]],threshold:-.0569487512111664,right_val:.4543190896511078,left_val:.8199151158332825},{features:[[15,13,2,3,-1],[15,14,2,1,3]],threshold:-.005011659115552902,right_val:.5357710719108582,left_val:.2200281023979187},{features:[[7,14,5,3,-1],[7,15,5,1,3]],threshold:.006033436860889196,right_val:.7181751132011414,left_val:.4413081109523773},{features:[[15,13,3,3,-1],[15,14,3,1,3]],threshold:.0039437441155314445,right_val:.2791733145713806,left_val:.547886073589325},{features:[[6,14,8,3,-1],[6,15,8,1,3]],threshold:-.0036591119132936,right_val:.3989723920822144,left_val:.635786771774292},{features:[[15,13,3,3,-1],[15,14,3,1,3]],threshold:-.0038456181064248085,right_val:.5300664901733398,left_val:.3493686020374298},{features:[[2,13,3,3,-1],[2,14,3,1,3]],threshold:-.007192626129835844,right_val:.5229672789573669,left_val:.1119614988565445},{features:[[4,7,12,12,-1],[10,7,6,6,2],[4,13,6,6,2]],threshold:-.0527989417314529,right_val:.54534512758255,left_val:.2387102991342545},{features:[[9,7,2,6,-1],[10,7,1,6,2]],threshold:-.007953766733407974,right_val:.4439376890659332,left_val:.7586917877197266},{features:[[8,9,5,2,-1],[8,10,5,1,2]],threshold:-.0027344180271029472,right_val:.5489321947097778,left_val:.2565476894378662},{features:[[8,6,3,4,-1],[9,6,1,4,3]],threshold:-.0018507939530536532,right_val:.4252474904060364,left_val:.6734347939491272},{features:[[9,6,2,8,-1],[9,10,2,4,2]],threshold:.0159189198166132,right_val:.2292661964893341,left_val:.548835277557373},{features:[[7,7,3,6,-1],[8,7,1,6,3]],threshold:-.0012687679845839739,right_val:.4022389948368073,left_val:.6104331016540527},{features:[[11,3,3,3,-1],[12,3,1,3,3]],threshold:.006288391072303057,right_val:.1536193042993546,left_val:.5310853123664856},{features:[[5,4,6,1,-1],[7,4,2,1,3]],threshold:-.0062259892001748085,right_val:.524160623550415,left_val:.1729111969470978},{features:[[5,6,10,3,-1],[5,7,10,1,3]],threshold:-.0121325999498367,right_val:.4325182139873505,left_val:.659775972366333}],threshold:21.010639190673828},{simpleClassifiers:[{features:[[7,3,6,9,-1],[7,6,6,3,3]],threshold:-.0039184908382594585,right_val:.1469330936670303,left_val:.6103435158729553},{features:[[6,7,9,1,-1],[9,7,3,1,3]],threshold:.0015971299726516008,right_val:.5896466970443726,left_val:.2632363140583038},{features:[[2,8,16,8,-1],[2,12,16,4,2]],threshold:.0177801102399826,right_val:.1760361939668655,left_val:.587287425994873},{features:[[14,6,2,6,-1],[14,9,2,3,2]],threshold:.0006533476989716291,right_val:.5596066117286682,left_val:.1567801982164383},{features:[[1,5,6,15,-1],[1,10,6,5,3]],threshold:-.00028353091329336166,right_val:.5732036232948303,left_val:.1913153976202011},{features:[[10,0,6,9,-1],[10,3,6,3,3]],threshold:.0016104689566418529,right_val:.5623080730438232,left_val:.2914913892745972},{features:[[6,6,7,14,-1],[6,13,7,7,2]],threshold:-.0977506190538406,right_val:.5648233294487,left_val:.194347694516182},{features:[[13,7,3,6,-1],[13,9,3,2,3]],threshold:.0005518235848285258,right_val:.5504639744758606,left_val:.3134616911411285},{features:[[1,8,15,4,-1],[6,8,5,4,3]],threshold:-.0128582203760743,right_val:.5760142803192139,left_val:.253648191690445},{features:[[11,2,3,10,-1],[11,7,3,5,2]],threshold:.004153023939579725,right_val:.36597740650177,left_val:.5767722129821777},{features:[[3,7,4,6,-1],[3,9,4,2,3]],threshold:.0017092459602281451,right_val:.5918939113616943,left_val:.2843191027641296},{features:[[13,3,6,10,-1],[15,3,2,10,3]],threshold:.007521735969930887,right_val:.6183109283447266,left_val:.4052427113056183},{features:[[5,7,8,10,-1],[5,7,4,5,2],[9,12,4,5,2]],threshold:.0022479810286313295,right_val:.3135401010513306,left_val:.578375518321991},{features:[[4,4,12,12,-1],[10,4,6,6,2],[4,10,6,6,2]],threshold:.0520062111318111,right_val:.1916636973619461,left_val:.5541312098503113},{features:[[1,4,6,9,-1],[3,4,2,9,3]],threshold:.0120855299755931,right_val:.6644591093063354,left_val:.4032655954360962},{features:[[11,3,2,5,-1],[11,3,1,5,2]],threshold:14687820112158079e-21,right_val:.5709382891654968,left_val:.3535977900028229},{features:[[7,3,2,5,-1],[8,3,1,5,2]],threshold:7139518857002258e-21,right_val:.5610269904136658,left_val:.3037444949150085},{features:[[10,14,2,3,-1],[10,15,2,1,3]],threshold:-.0046001640148460865,right_val:.4580326080322266,left_val:.7181087136268616},{features:[[5,12,6,2,-1],[8,12,3,2,2]],threshold:.0020058949012309313,right_val:.2953684031963348,left_val:.5621951818466187},{features:[[9,14,2,3,-1],[9,15,2,1,3]],threshold:.004505027085542679,right_val:.7619017958641052,left_val:.4615387916564941},{features:[[4,11,12,6,-1],[4,14,12,3,2]],threshold:.0117468303069472,right_val:.1772529035806656,left_val:.5343837141990662},{features:[[11,11,5,9,-1],[11,14,5,3,3]],threshold:-.0583163388073444,right_val:.5340772271156311,left_val:.1686245948076248},{features:[[6,15,3,2,-1],[6,16,3,1,2]],threshold:.00023629379575140774,right_val:.6026803851127625,left_val:.3792056143283844},{features:[[11,0,3,5,-1],[12,0,1,5,3]],threshold:-.007815618067979813,right_val:.5324323773384094,left_val:.151286706328392},{features:[[5,5,6,7,-1],[8,5,3,7,2]],threshold:-.0108761601150036,right_val:.5319945216178894,left_val:.2081822007894516},{features:[[13,0,1,9,-1],[13,3,1,3,3]],threshold:-.0027745519764721394,right_val:.5210328102111816,left_val:.4098246991634369},{features:[[3,2,4,8,-1],[3,2,2,4,2],[5,6,2,4,2]],threshold:-.0007827638182789087,right_val:.3478842079639435,left_val:.5693274140357971},{features:[[13,12,4,6,-1],[13,14,4,2,3]],threshold:.0138704096898437,right_val:.2257698029279709,left_val:.5326750874519348},{features:[[3,12,4,6,-1],[3,14,4,2,3]],threshold:-.0236749108880758,right_val:.5200707912445068,left_val:.1551305055618286},{features:[[13,11,3,4,-1],[13,13,3,2,2]],threshold:-14879409718560055e-21,right_val:.3820176124572754,left_val:.5500566959381104},{features:[[4,4,4,3,-1],[4,5,4,1,3]],threshold:.00361906411126256,right_val:.6639748215675354,left_val:.4238683879375458},{features:[[7,5,11,8,-1],[7,9,11,4,2]],threshold:-.0198171101510525,right_val:.5382357835769653,left_val:.2150038033723831},{features:[[7,8,3,4,-1],[8,8,1,4,3]],threshold:-.0038154039066284895,right_val:.4215297102928162,left_val:.6675711274147034},{features:[[9,1,6,1,-1],[11,1,2,1,3]],threshold:-.0049775829538702965,right_val:.5386328101158142,left_val:.2267289012670517},{features:[[5,5,3,3,-1],[5,6,3,1,3]],threshold:.002244102070108056,right_val:.6855735778808594,left_val:.4308691024780273},{features:[[0,9,20,6,-1],[10,9,10,3,2],[0,12,10,3,2]],threshold:.0122824599966407,right_val:.3467479050159454,left_val:.5836614966392517},{features:[[8,6,3,5,-1],[9,6,1,5,3]],threshold:-.002854869933798909,right_val:.4311453998088837,left_val:.7016944885253906},{features:[[11,0,1,3,-1],[11,1,1,1,3]],threshold:-.0037875669077038765,right_val:.5224946141242981,left_val:.2895345091819763},{features:[[4,2,4,2,-1],[4,3,4,1,2]],threshold:-.0012201230274513364,right_val:.5481644868850708,left_val:.2975570857524872},{features:[[12,6,4,3,-1],[12,7,4,1,3]],threshold:.010160599835217,right_val:.8182697892189026,left_val:.4888817965984345},{features:[[5,0,6,4,-1],[7,0,2,4,3]],threshold:-.0161745697259903,right_val:.5239992737770081,left_val:.1481492966413498},{features:[[9,7,3,8,-1],[10,7,1,8,3]],threshold:.0192924607545137,right_val:.7378190755844116,left_val:.4786309897899628},{features:[[9,7,2,2,-1],[10,7,1,2,2]],threshold:-.003247953951358795,right_val:.4470643997192383,left_val:.7374222874641418},{features:[[6,7,14,4,-1],[13,7,7,2,2],[6,9,7,2,2]],threshold:-.009380348026752472,right_val:.5537996292114258,left_val:.3489154875278473},{features:[[0,5,3,6,-1],[0,7,3,2,3]],threshold:-.0126061299815774,right_val:.5315443277359009,left_val:.2379686981439591},{features:[[13,11,3,4,-1],[13,13,3,2,2]],threshold:-.0256219301372766,right_val:.5138769745826721,left_val:.1964688003063202},{features:[[4,11,3,4,-1],[4,13,3,2,2]],threshold:-7574149640277028e-20,right_val:.3365853130817413,left_val:.5590522885322571},{features:[[5,9,12,8,-1],[11,9,6,4,2],[5,13,6,4,2]],threshold:-.0892108827829361,right_val:.516263484954834,left_val:.0634046569466591},{features:[[9,12,1,3,-1],[9,13,1,1,3]],threshold:-.002767048077657819,right_val:.4490706026554108,left_val:.732346773147583},{features:[[10,15,2,4,-1],[10,17,2,2,2]],threshold:.0002715257869567722,right_val:.5985518097877502,left_val:.411483496427536}],threshold:23.918790817260742},{simpleClassifiers:[{features:[[7,7,6,1,-1],[9,7,2,1,3]],threshold:.001478621968999505,right_val:.6643316745758057,left_val:.266354501247406},{features:[[12,3,6,6,-1],[15,3,3,3,2],[12,6,3,3,2]],threshold:-.001874165958724916,right_val:.2518512904644013,left_val:.6143848896026611},{features:[[0,4,10,6,-1],[0,6,10,2,3]],threshold:-.001715100952424109,right_val:.2397463023662567,left_val:.5766341090202332},{features:[[8,3,8,14,-1],[12,3,4,7,2],[8,10,4,7,2]],threshold:-.0018939269939437509,right_val:.2529144883155823,left_val:.5682045817375183},{features:[[4,4,7,15,-1],[4,9,7,5,3]],threshold:-.005300605203956366,right_val:.5556079745292664,left_val:.1640675961971283},{features:[[12,2,6,8,-1],[15,2,3,4,2],[12,6,3,4,2]],threshold:-.0466625317931175,right_val:.4762830138206482,left_val:.6123154163360596},{features:[[2,2,6,8,-1],[2,2,3,4,2],[5,6,3,4,2]],threshold:-.000794313324149698,right_val:.2839404046535492,left_val:.5707858800888062},{features:[[2,13,18,7,-1],[8,13,6,7,3]],threshold:.0148916700854898,right_val:.6006367206573486,left_val:.4089672863483429},{features:[[4,3,8,14,-1],[4,3,4,7,2],[8,10,4,7,2]],threshold:-.0012046529445797205,right_val:.2705289125442505,left_val:.5712450742721558},{features:[[18,1,2,6,-1],[18,3,2,2,3]],threshold:.006061938125640154,right_val:.3262225985527039,left_val:.526250422000885},{features:[[9,11,2,3,-1],[9,12,2,1,3]],threshold:-.0025286648888140917,right_val:.4199256896972656,left_val:.6853830814361572},{features:[[18,1,2,6,-1],[18,3,2,2,3]],threshold:-.005901021882891655,right_val:.5434812903404236,left_val:.3266282081604004},{features:[[0,1,2,6,-1],[0,3,2,2,3]],threshold:.005670276004821062,right_val:.2319003939628601,left_val:.5468410849571228},{features:[[1,5,18,6,-1],[1,7,18,2,3]],threshold:-.003030410036444664,right_val:.2708238065242767,left_val:.557066798210144},{features:[[0,2,6,7,-1],[3,2,3,7,2]],threshold:.002980364952236414,right_val:.5890625715255737,left_val:.3700568974018097},{features:[[7,3,6,14,-1],[7,10,6,7,2]],threshold:-.0758405104279518,right_val:.5419948101043701,left_val:.2140070050954819},{features:[[3,7,13,10,-1],[3,12,13,5,2]],threshold:.0192625392228365,right_val:.2726590037345886,left_val:.5526772141456604},{features:[[11,15,2,2,-1],[11,16,2,1,2]],threshold:.00018888259364757687,right_val:.6017209887504578,left_val:.3958011865615845},{features:[[2,11,16,4,-1],[2,11,8,2,2],[10,13,8,2,2]],threshold:.0293695498257875,right_val:.1435758024454117,left_val:.5241373777389526},{features:[[13,7,6,4,-1],[16,7,3,2,2],[13,9,3,2,2]],threshold:.0010417619487270713,right_val:.5929983258247375,left_val:.3385409116744995},{features:[[6,10,3,9,-1],[6,13,3,3,3]],threshold:.0026125640142709017,right_val:.3021597862243652,left_val:.5485377907752991},{features:[[14,6,1,6,-1],[14,9,1,3,2]],threshold:.0009697746718302369,right_val:.553203284740448,left_val:.3375276029109955},{features:[[5,10,4,1,-1],[7,10,2,1,2]],threshold:.0005951265920884907,right_val:.3359399139881134,left_val:.563174307346344},{features:[[3,8,15,5,-1],[8,8,5,5,3]],threshold:-.1015655994415283,right_val:.5230425000190735,left_val:.0637350380420685},{features:[[1,6,5,4,-1],[1,8,5,2,2]],threshold:.0361566990613937,right_val:.1029528975486755,left_val:.5136963129043579},{features:[[3,1,17,6,-1],[3,3,17,2,3]],threshold:.003462414024397731,right_val:.5558289289474487,left_val:.3879320025444031},{features:[[6,7,8,2,-1],[10,7,4,2,2]],threshold:.0195549800992012,right_val:.1875859946012497,left_val:.5250086784362793},{features:[[9,7,3,2,-1],[10,7,1,2,3]],threshold:-.0023121440317481756,right_val:.4679641127586365,left_val:.667202889919281},{features:[[8,7,3,2,-1],[9,7,1,2,3]],threshold:-.001860528951510787,right_val:.4334670901298523,left_val:.7163379192352295},{features:[[8,9,4,2,-1],[8,10,4,1,2]],threshold:-.0009402636205777526,right_val:.5650203227996826,left_val:.302136093378067},{features:[[8,8,4,3,-1],[8,9,4,1,3]],threshold:-.005241833161562681,right_val:.5250256061553955,left_val:.1820009052753449},{features:[[9,5,6,4,-1],[9,5,3,4,2]],threshold:.00011729019752237946,right_val:.544597327709198,left_val:.3389188051223755},{features:[[8,13,4,3,-1],[8,14,4,1,3]],threshold:.0011878840159624815,right_val:.6253563165664673,left_val:.4085349142551422},{features:[[4,7,12,6,-1],[10,7,6,3,2],[4,10,6,3,2]],threshold:-.0108813596889377,right_val:.5700082778930664,left_val:.3378399014472961},{features:[[8,14,4,3,-1],[8,15,4,1,3]],threshold:.0017354859737679362,right_val:.6523038744926453,left_val:.4204635918140411},{features:[[9,7,3,3,-1],[9,8,3,1,3]],threshold:-.00651190523058176,right_val:.5428143739700317,left_val:.2595216035842896},{features:[[7,4,3,8,-1],[8,4,1,8,3]],threshold:-.0012136430013924837,right_val:.3977893888950348,left_val:.6165143847465515},{features:[[10,0,3,6,-1],[11,0,1,6,3]],threshold:-.010354240424931,right_val:.5219504833221436,left_val:.1628028005361557},{features:[[6,3,4,8,-1],[8,3,2,8,2]],threshold:.0005585883045569062,right_val:.5503574013710022,left_val:.3199650943279266},{features:[[14,3,6,13,-1],[14,3,3,13,2]],threshold:.0152996499091387,right_val:.6122388243675232,left_val:.4103994071483612},{features:[[8,13,3,6,-1],[8,16,3,3,2]],threshold:-.021588210016489,right_val:.519738495349884,left_val:.103491298854351},{features:[[14,3,6,13,-1],[14,3,3,13,2]],threshold:-.1283462941646576,right_val:.4893102943897247,left_val:.8493865132331848},{features:[[0,7,10,4,-1],[0,7,5,2,2],[5,9,5,2,2]],threshold:-.0022927189711481333,right_val:.5471575260162354,left_val:.3130157887935638},{features:[[14,3,6,13,-1],[14,3,3,13,2]],threshold:.0799151062965393,right_val:.6073989272117615,left_val:.4856320917606354},{features:[[0,3,6,13,-1],[3,3,3,13,2]],threshold:-.0794410929083824,right_val:.462453305721283,left_val:.8394674062728882},{features:[[9,1,4,1,-1],[9,1,2,1,2]],threshold:-.00528000108897686,right_val:.5306698083877563,left_val:.1881695985794067},{features:[[8,0,2,1,-1],[9,0,1,1,2]],threshold:.0010463109938427806,right_val:.2583065927028656,left_val:.5271229147911072},{features:[[10,16,4,4,-1],[12,16,2,2,2],[10,18,2,2,2]],threshold:.00026317298761568964,right_val:.5735440850257874,left_val:.4235304892063141},{features:[[9,6,2,3,-1],[10,6,1,3,2]],threshold:-.0036173160187900066,right_val:.4495444893836975,left_val:.6934396028518677},{features:[[4,5,12,2,-1],[8,5,4,2,3]],threshold:.0114218797534704,right_val:.4138193130493164,left_val:.590092122554779},{features:[[8,7,3,5,-1],[9,7,1,5,3]],threshold:-.0019963278900831938,right_val:.4327239990234375,left_val:.6466382741928101}],threshold:24.52787971496582},{simpleClassifiers:[{features:[[6,4,8,6,-1],[6,6,8,2,3]],threshold:-.00996912457048893,right_val:.2482212036848068,left_val:.6142324209213257},{features:[[9,5,2,12,-1],[9,11,2,6,2]],threshold:.0007307305932044983,right_val:.2321965992450714,left_val:.5704951882362366},{features:[[4,6,6,8,-1],[4,10,6,4,2]],threshold:.0006404530140571296,right_val:.5814933180809021,left_val:.2112251967191696},{features:[[12,2,8,5,-1],[12,2,4,5,2]],threshold:.004542401991784573,right_val:.586631178855896,left_val:.2950482070446014},{features:[[0,8,18,3,-1],[0,9,18,1,3]],threshold:9247744310414419e-20,right_val:.5791326761245728,left_val:.2990990877151489},{features:[[8,12,4,8,-1],[8,16,4,4,2]],threshold:-.008660314604640007,right_val:.5635542273521423,left_val:.2813029885292053},{features:[[0,2,8,5,-1],[4,2,4,5,2]],threshold:.008051581680774689,right_val:.6054757237434387,left_val:.3535369038581848},{features:[[13,11,3,4,-1],[13,13,3,2,2]],threshold:.00043835240649059415,right_val:.2731510996818543,left_val:.5596532225608826},{features:[[5,11,6,1,-1],[7,11,2,1,3]],threshold:-981689736363478e-19,right_val:.3638561069965363,left_val:.5978031754493713},{features:[[11,3,3,1,-1],[12,3,1,1,3]],threshold:-.0011298790341243148,right_val:.5432729125022888,left_val:.2755252122879028},{features:[[7,13,5,3,-1],[7,14,5,1,3]],threshold:.006435615010559559,right_val:.7069833278656006,left_val:.4305641949176788},{features:[[11,11,7,6,-1],[11,14,7,3,2]],threshold:-.0568293295800686,right_val:.5294997096061707,left_val:.2495242953300476},{features:[[2,11,7,6,-1],[2,14,7,3,2]],threshold:.004066816996783018,right_val:.2497723996639252,left_val:.5478553175926208},{features:[[12,14,2,6,-1],[12,16,2,2,3]],threshold:481647984997835e-19,right_val:.5706356167793274,left_val:.3938601016998291},{features:[[8,14,3,3,-1],[8,15,3,1,3]],threshold:.00617950176820159,right_val:.7394766807556152,left_val:.440760612487793},{features:[[11,0,3,5,-1],[12,0,1,5,3]],threshold:.006498575210571289,right_val:.2479152977466583,left_val:.5445243120193481},{features:[[6,1,4,9,-1],[8,1,2,9,2]],threshold:-.0010211090557277203,right_val:.5338971018791199,left_val:.2544766962528229},{features:[[10,3,6,1,-1],[12,3,2,1,3]],threshold:-.005424752831459045,right_val:.5324069261550903,left_val:.2718858122825623},{features:[[8,8,3,4,-1],[8,10,3,2,2]],threshold:-.0010559899965301156,right_val:.553450882434845,left_val:.3178288042545319},{features:[[8,12,4,2,-1],[8,13,4,1,2]],threshold:.0006646580877713859,right_val:.6558194160461426,left_val:.4284219145774841},{features:[[5,18,4,2,-1],[5,19,4,1,2]],threshold:-.00027524109464138746,right_val:.3810262978076935,left_val:.5902860760688782},{features:[[2,1,18,6,-1],[2,3,18,2,3]],threshold:.004229320213198662,right_val:.5709385871887207,left_val:.381648987531662},{features:[[6,0,3,2,-1],[7,0,1,2,3]],threshold:-.0032868210691958666,right_val:.5259544253349304,left_val:.1747743934392929},{features:[[13,8,6,2,-1],[16,8,3,1,2],[13,9,3,1,2]],threshold:.0001561187964398414,right_val:.5725612044334412,left_val:.3601722121238709},{features:[[6,10,3,6,-1],[6,13,3,3,2]],threshold:-7362138148891972e-21,right_val:.3044497072696686,left_val:.540185809135437},{features:[[0,13,20,4,-1],[10,13,10,2,2],[0,15,10,2,2]],threshold:-.014767250046134,right_val:.5573434829711914,left_val:.3220770061016083},{features:[[7,7,6,5,-1],[9,7,2,5,3]],threshold:.0244895908981562,right_val:.6518812775611877,left_val:.4301528036594391},{features:[[11,0,2,2,-1],[11,1,2,1,2]],threshold:-.000376520911231637,right_val:.5598236918449402,left_val:.356458306312561},{features:[[1,8,6,2,-1],[1,8,3,1,2],[4,9,3,1,2]],threshold:736576885174145e-20,right_val:.556189775466919,left_val:.3490782976150513},{features:[[0,2,20,2,-1],[10,2,10,1,2],[0,3,10,1,2]],threshold:-.0150999398902059,right_val:.5335299968719482,left_val:.1776272058486939},{features:[[7,14,5,3,-1],[7,15,5,1,3]],threshold:-.0038316650316119194,right_val:.4221394062042236,left_val:.6149687767028809},{features:[[7,13,6,6,-1],[10,13,3,3,2],[7,16,3,3,2]],threshold:.0169254001230001,right_val:.2166585028171539,left_val:.5413014888763428},{features:[[9,12,2,3,-1],[9,13,2,1,3]],threshold:-.003047785023227334,right_val:.4354617893695831,left_val:.6449490785598755},{features:[[16,11,1,6,-1],[16,13,1,2,3]],threshold:.003214058931916952,right_val:.3523217141628265,left_val:.5400155186653137},{features:[[3,11,1,6,-1],[3,13,1,2,3]],threshold:-.004002320114523172,right_val:.5338417291641235,left_val:.2774524092674255},{features:[[4,4,14,12,-1],[11,4,7,6,2],[4,10,7,6,2]],threshold:.0074182129465043545,right_val:.3702817857265472,left_val:.567673921585083},{features:[[5,4,3,3,-1],[5,5,3,1,3]],threshold:-.008876458741724491,right_val:.4583688974380493,left_val:.7749221920967102},{features:[[12,3,3,3,-1],[13,3,1,3,3]],threshold:.002731173997744918,right_val:.3996661007404327,left_val:.5338721871376038},{features:[[6,6,8,3,-1],[6,7,8,1,3]],threshold:-.0025082379579544067,right_val:.377749890089035,left_val:.5611963272094727},{features:[[12,3,3,3,-1],[13,3,1,3,3]],threshold:-.008054107427597046,right_val:.5179182887077332,left_val:.291522890329361},{features:[[3,1,4,10,-1],[3,1,2,5,2],[5,6,2,5,2]],threshold:-.0009793881326913834,right_val:.3700192868709564,left_val:.5536432862281799},{features:[[5,7,10,2,-1],[5,7,5,2,2]],threshold:-.005874590948224068,right_val:.5679376125335693,left_val:.3754391074180603},{features:[[8,7,3,3,-1],[9,7,1,3,3]],threshold:-.00449367193505168,right_val:.4480949938297272,left_val:.7019699215888977},{features:[[15,12,2,3,-1],[15,13,2,1,3]],threshold:-.00543892290443182,right_val:.5313386917114258,left_val:.2310364991426468},{features:[[7,8,3,4,-1],[8,8,1,4,3]],threshold:-.0007509464048780501,right_val:.4129343032836914,left_val:.5864868760108948},{features:[[13,4,1,12,-1],[13,10,1,6,2]],threshold:14528800420521293e-21,right_val:.5619621276855469,left_val:.3732407093048096},{features:[[4,5,12,12,-1],[4,5,6,6,2],[10,11,6,6,2]],threshold:.0407580696046352,right_val:.2720521986484528,left_val:.5312091112136841},{features:[[7,14,7,3,-1],[7,15,7,1,3]],threshold:.006650593131780624,right_val:.6693493723869324,left_val:.4710015952587128},{features:[[3,12,2,3,-1],[3,13,2,1,3]],threshold:.0045759351924061775,right_val:.1637275964021683,left_val:.5167819261550903},{features:[[3,2,14,2,-1],[10,2,7,1,2],[3,3,7,1,2]],threshold:.0065269311890006065,right_val:.2938531935214996,left_val:.5397608876228333},{features:[[0,1,3,10,-1],[1,1,1,10,3]],threshold:-.0136603796854615,right_val:.453220009803772,left_val:.7086488008499146},{features:[[9,0,6,5,-1],[11,0,2,5,3]],threshold:.0273588690906763,right_val:.3589231967926025,left_val:.5206481218338013},{features:[[5,7,6,2,-1],[8,7,3,2,2]],threshold:.0006219755159690976,right_val:.5441123247146606,left_val:.3507075905799866},{features:[[7,1,6,10,-1],[7,6,6,5,2]],threshold:-.0033077080734074116,right_val:.402489185333252,left_val:.5859522819519043},{features:[[1,1,18,3,-1],[7,1,6,3,3]],threshold:-.0106311095878482,right_val:.4422602951526642,left_val:.6743267178535461},{features:[[16,3,3,6,-1],[16,5,3,2,3]],threshold:.0194416493177414,right_val:.1797904968261719,left_val:.5282716155052185}],threshold:27.153350830078125},{simpleClassifiers:[{features:[[6,3,7,6,-1],[6,6,7,3,2]],threshold:-.005505216773599386,right_val:.2626559138298035,left_val:.5914731025695801},{features:[[4,7,12,2,-1],[8,7,4,2,3]],threshold:.001956227933987975,right_val:.5741627216339111,left_val:.2312581986188889},{features:[[0,4,17,10,-1],[0,9,17,5,2]],threshold:-.008892478421330452,right_val:.5626654028892517,left_val:.1656530052423477},{features:[[3,4,15,16,-1],[3,12,15,8,2]],threshold:.0836383774876595,right_val:.1957294940948486,left_val:.5423449873924255},{features:[[7,15,6,4,-1],[7,17,6,2,2]],threshold:.0012282270472496748,right_val:.5992503762245178,left_val:.3417904078960419},{features:[[15,2,4,9,-1],[15,2,2,9,2]],threshold:.0057629169896245,right_val:.6079903841018677,left_val:.3719581961631775},{features:[[2,3,3,2,-1],[2,4,3,1,2]],threshold:-.0016417410224676132,right_val:.5576915740966797,left_val:.2577486038208008},{features:[[13,6,7,9,-1],[13,9,7,3,3]],threshold:.0034113149158656597,right_val:.5514171719551086,left_val:.2950749099254608},{features:[[8,11,4,3,-1],[8,12,4,1,3]],threshold:-.0110693201422691,right_val:.4477078914642334,left_val:.7569358944892883},{features:[[0,2,20,6,-1],[10,2,10,3,2],[0,5,10,3,2]],threshold:.0348659716546535,right_val:.2669621109962463,left_val:.5583708882331848},{features:[[3,2,6,10,-1],[3,2,3,5,2],[6,7,3,5,2]],threshold:.0006570109981112182,right_val:.2988890111446381,left_val:.5627313256263733},{features:[[13,10,3,4,-1],[13,12,3,2,2]],threshold:-.0243391301482916,right_val:.5108863115310669,left_val:.2771185040473938},{features:[[4,10,3,4,-1],[4,12,3,2,2]],threshold:.0005943520227447152,right_val:.3120341897010803,left_val:.5580651760101318},{features:[[7,5,6,3,-1],[9,5,2,3,3]],threshold:.0022971509024500847,right_val:.5679075717926025,left_val:.3330250084400177},{features:[[7,6,6,8,-1],[7,10,6,4,2]],threshold:-.0037801829166710377,right_val:.5344808101654053,left_val:.2990534901618958},{features:[[0,11,20,6,-1],[0,14,20,3,2]],threshold:-.13420669734478,right_val:.5392568111419678,left_val:.1463858932256699},{features:[[4,13,4,6,-1],[4,13,2,3,2],[6,16,2,3,2]],threshold:.0007522454834543169,right_val:.5692734718322754,left_val:.3746953904628754},{features:[[6,0,8,12,-1],[10,0,4,6,2],[6,6,4,6,2]],threshold:-.040545541793108,right_val:.5484297871589661,left_val:.2754747867584229},{features:[[2,0,15,2,-1],[2,1,15,1,2]],threshold:.0012572970008477569,right_val:.5756075978279114,left_val:.3744584023952484},{features:[[9,12,2,3,-1],[9,13,2,1,3]],threshold:-.007424994837492704,right_val:.4728231132030487,left_val:.7513859272003174},{features:[[3,12,1,2,-1],[3,13,1,1,2]],threshold:.0005090812919661403,right_val:.2932321131229401,left_val:.540489673614502},{features:[[9,11,2,3,-1],[9,12,2,1,3]],threshold:-.001280845026485622,right_val:.4273349046707153,left_val:.6169779896736145},{features:[[7,3,3,1,-1],[8,3,1,1,3]],threshold:-.0018348860321566463,right_val:.5206472277641296,left_val:.2048496007919312},{features:[[17,7,3,6,-1],[17,9,3,2,3]],threshold:.0274848695844412,right_val:.1675522029399872,left_val:.5252984762191772},{features:[[7,2,3,2,-1],[8,2,1,2,3]],threshold:.0022372419480234385,right_val:.2777658104896545,left_val:.5267782807350159},{features:[[11,4,5,3,-1],[11,5,5,1,3]],threshold:-.008863529190421104,right_val:.4812048971652985,left_val:.69545578956604},{features:[[4,4,5,3,-1],[4,5,5,1,3]],threshold:.004175397101789713,right_val:.6349195837974548,left_val:.4291887879371643},{features:[[19,3,1,2,-1],[19,4,1,1,2]],threshold:-.0017098189564421773,right_val:.5361248850822449,left_val:.2930536866188049},{features:[[5,5,4,3,-1],[5,6,4,1,3]],threshold:.006532854866236448,right_val:.7409694194793701,left_val:.4495325088500977},{features:[[17,7,3,6,-1],[17,9,3,2,3]],threshold:-.009537290781736374,right_val:.5416501760482788,left_val:.3149119913578033},{features:[[0,7,3,6,-1],[0,9,3,2,3]],threshold:.0253109894692898,right_val:.1311707943677902,left_val:.5121892094612122},{features:[[14,2,6,9,-1],[14,5,6,3,3]],threshold:.0364609695971012,right_val:.2591339945793152,left_val:.5175911784172058},{features:[[0,4,5,6,-1],[0,6,5,2,3]],threshold:.0208543296903372,right_val:.1582316011190414,left_val:.5137140154838562},{features:[[10,5,6,2,-1],[12,5,2,2,3]],threshold:-.0008720774785615504,right_val:.439897894859314,left_val:.5574309825897217},{features:[[4,5,6,2,-1],[6,5,2,2,3]],threshold:-15227000403683633e-21,right_val:.3708069920539856,left_val:.5548940896987915},{features:[[8,1,4,6,-1],[8,3,4,2,3]],threshold:-.0008431650931015611,right_val:.5554211139678955,left_val:.3387419879436493},{features:[[0,2,3,6,-1],[0,4,3,2,3]],threshold:.0036037859972566366,right_val:.3411171138286591,left_val:.5358061790466309},{features:[[6,6,8,3,-1],[6,7,8,1,3]],threshold:-.006805789191275835,right_val:.4345862865447998,left_val:.6125202775001526},{features:[[0,1,5,9,-1],[0,4,5,3,3]],threshold:-.0470216609537601,right_val:.519373893737793,left_val:.2358165979385376},{features:[[16,0,4,15,-1],[16,0,2,15,2]],threshold:-.0369541086256504,right_val:.4760943949222565,left_val:.7323111295700073},{features:[[1,10,3,2,-1],[1,11,3,1,2]],threshold:.0010439479956403375,right_val:.3411330878734589,left_val:.5419455170631409},{features:[[14,4,1,10,-1],[14,9,1,5,2]],threshold:-.00021050689974799752,right_val:.5554947257041931,left_val:.2821694016456604},{features:[[0,1,4,12,-1],[2,1,2,12,2]],threshold:-.0808315873146057,right_val:.4697434902191162,left_val:.9129930138587952},{features:[[11,11,4,2,-1],[11,11,2,2,2]],threshold:-.0003657905908767134,right_val:.3978292942047119,left_val:.6022670269012451},{features:[[5,11,4,2,-1],[7,11,2,2,2]],threshold:-.00012545920617412776,right_val:.384553998708725,left_val:.5613213181495667},{features:[[3,8,15,5,-1],[8,8,5,5,3]],threshold:-.0687864869832993,right_val:.5300496816635132,left_val:.2261611968278885},{features:[[0,0,6,10,-1],[3,0,3,10,2]],threshold:.0124157899990678,right_val:.5828812122344971,left_val:.4075691998004913},{features:[[11,4,3,2,-1],[12,4,1,2,3]],threshold:-.004717481788247824,right_val:.5267757773399353,left_val:.2827253937721252},{features:[[8,12,3,8,-1],[8,16,3,4,2]],threshold:.0381368584930897,right_val:.1023615971207619,left_val:.5074741244316101},{features:[[8,14,5,3,-1],[8,15,5,1,3]],threshold:-.0028168049175292253,right_val:.4359692931175232,left_val:.6169006824493408},{features:[[7,14,4,3,-1],[7,15,4,1,3]],threshold:.008130360394716263,right_val:.76060950756073,left_val:.4524433016777039},{features:[[11,4,3,2,-1],[12,4,1,2,3]],threshold:.006005601957440376,right_val:.185971200466156,left_val:.5240408778190613},{features:[[3,15,14,4,-1],[3,15,7,2,2],[10,17,7,2,2]],threshold:.0191393196582794,right_val:.2332071959972382,left_val:.5209379196166992},{features:[[2,2,16,4,-1],[10,2,8,2,2],[2,4,8,2,2]],threshold:.0164457596838474,right_val:.3264234960079193,left_val:.5450702905654907},{features:[[0,8,6,12,-1],[3,8,3,12,2]],threshold:-.0373568907380104,right_val:.4533241987228394,left_val:.6999046802520752},{features:[[5,7,10,2,-1],[5,7,5,2,2]],threshold:-.0197279006242752,right_val:.54128098487854,left_val:.2653664946556091},{features:[[9,7,2,5,-1],[10,7,1,5,2]],threshold:.0066972579807043076,right_val:.7138652205467224,left_val:.4480566084384918},{features:[[13,7,6,4,-1],[16,7,3,2,2],[13,9,3,2,2]],threshold:.0007445752853527665,right_val:.5471320152282715,left_val:.4231350123882294},{features:[[0,13,8,2,-1],[0,14,8,1,2]],threshold:.0011790640419349074,right_val:.3130455017089844,left_val:.5341702103614807},{features:[[13,7,6,4,-1],[16,7,3,2,2],[13,9,3,2,2]],threshold:.0349806100130081,right_val:.343053013086319,left_val:.5118659734725952},{features:[[1,7,6,4,-1],[1,7,3,2,2],[4,9,3,2,2]],threshold:.0005685979267582297,right_val:.5468639731407166,left_val:.3532187044620514},{features:[[12,6,1,12,-1],[12,12,1,6,2]],threshold:-.0113406497985125,right_val:.5348700881004333,left_val:.2842353880405426},{features:[[9,5,2,6,-1],[10,5,1,6,2]],threshold:-.00662281084805727,right_val:.4492664933204651,left_val:.6883640289306641},{features:[[14,12,2,3,-1],[14,13,2,1,3]],threshold:-.008016033098101616,right_val:.5224308967590332,left_val:.1709893941879273},{features:[[4,12,2,3,-1],[4,13,2,1,3]],threshold:.0014206819469109178,right_val:.299338310956955,left_val:.5290846228599548},{features:[[8,12,4,3,-1],[8,13,4,1,3]],threshold:-.002780171111226082,right_val:.4460499882698059,left_val:.6498854160308838},{features:[[5,2,2,4,-1],[5,2,1,2,2],[6,4,1,2,2]],threshold:-.0014747589593753219,right_val:.5388113260269165,left_val:.3260438144207001},{features:[[5,5,11,3,-1],[5,6,11,1,3]],threshold:-.0238303393125534,right_val:.4801219999790192,left_val:.7528941035270691},{features:[[7,6,4,12,-1],[7,12,4,6,2]],threshold:.00693697901442647,right_val:.3261427879333496,left_val:.5335165858268738},{features:[[12,13,8,5,-1],[12,13,4,5,2]],threshold:.008280625566840172,right_val:.5737829804420471,left_val:.458039402961731},{features:[[7,6,1,12,-1],[7,12,1,6,2]],threshold:-.0104395002126694,right_val:.5233827829360962,left_val:.2592320144176483}],threshold:34.55411148071289},{simpleClassifiers:[{features:[[1,2,6,3,-1],[4,2,3,3,2]],threshold:.0072006587870419025,right_val:.6849808096885681,left_val:.325888603925705},{features:[[9,5,6,10,-1],[12,5,3,5,2],[9,10,3,5,2]],threshold:-.002859358908608556,right_val:.2537829875946045,left_val:.5838881134986877},{features:[[5,5,8,12,-1],[5,5,4,6,2],[9,11,4,6,2]],threshold:.0006858052802272141,right_val:.2812424004077911,left_val:.5708081722259521},{features:[[0,7,20,6,-1],[0,9,20,2,3]],threshold:.007958019152283669,right_val:.5544260740280151,left_val:.2501051127910614},{features:[[4,2,2,2,-1],[4,3,2,1,2]],threshold:-.0012124150525778532,right_val:.5433350205421448,left_val:.2385368049144745},{features:[[4,18,12,2,-1],[8,18,4,2,3]],threshold:.00794261321425438,right_val:.6220757961273193,left_val:.3955070972442627},{features:[[7,4,4,16,-1],[7,12,4,8,2]],threshold:.0024630590341985226,right_val:.2992357909679413,left_val:.5639708042144775},{features:[[7,6,7,8,-1],[7,10,7,4,2]],threshold:-.006039659958332777,right_val:.541167676448822,left_val:.218651294708252},{features:[[6,3,3,1,-1],[7,3,1,1,3]],threshold:-.0012988339876756072,right_val:.5364584922790527,left_val:.23507060110569},{features:[[11,15,2,4,-1],[11,17,2,2,2]],threshold:.00022299369447864592,right_val:.572960615158081,left_val:.380411297082901},{features:[[3,5,4,8,-1],[3,9,4,4,2]],threshold:.0014654280385002494,right_val:.5258268713951111,left_val:.2510167956352234},{features:[[7,1,6,12,-1],[7,7,6,6,2]],threshold:-.0008121004211716354,right_val:.3851158916950226,left_val:.5992823839187622},{features:[[4,6,6,2,-1],[6,6,2,2,3]],threshold:-.0013836020370945334,right_val:.3636586964130402,left_val:.5681396126747131},{features:[[16,4,4,6,-1],[16,6,4,2,3]],threshold:-.0279364492744207,right_val:.5377560257911682,left_val:.1491317003965378},{features:[[3,3,5,2,-1],[3,4,5,1,2]],threshold:-.0004691955109592527,right_val:.5572484731674194,left_val:.3692429959774017},{features:[[9,11,2,3,-1],[9,12,2,1,3]],threshold:-.004982965998351574,right_val:.4532504081726074,left_val:.6758509278297424},{features:[[2,16,4,2,-1],[2,17,4,1,2]],threshold:.001881530974060297,right_val:.2932539880275726,left_val:.5368022918701172},{features:[[7,13,6,6,-1],[10,13,3,3,2],[7,16,3,3,2]],threshold:-.0190675500780344,right_val:.5330067276954651,left_val:.1649377048015595},{features:[[7,0,3,4,-1],[8,0,1,4,3]],threshold:-.0046906559728085995,right_val:.5119361877441406,left_val:.1963925957679749},{features:[[8,15,4,3,-1],[8,16,4,1,3]],threshold:.005977713968604803,right_val:.7008398175239563,left_val:.467117190361023},{features:[[0,4,4,6,-1],[0,6,4,2,3]],threshold:-.0333031304180622,right_val:.5104162096977234,left_val:.1155416965484619},{features:[[5,6,12,3,-1],[9,6,4,3,3]],threshold:.0907441079616547,right_val:.1306173056364059,left_val:.5149660110473633},{features:[[7,6,6,14,-1],[9,6,2,14,3]],threshold:.0009355589863844216,right_val:.543985903263092,left_val:.3605481088161469},{features:[[9,7,3,3,-1],[10,7,1,3,3]],threshold:.0149016501381993,right_val:.7687569856643677,left_val:.4886212050914764},{features:[[6,12,2,4,-1],[6,14,2,2,2]],threshold:.0006159411859698594,right_val:.3240939080715179,left_val:.5356813073158264},{features:[[10,12,7,6,-1],[10,14,7,2,3]],threshold:-.0506709888577461,right_val:.5230404138565063,left_val:.1848621964454651},{features:[[1,0,15,2,-1],[1,1,15,1,2]],threshold:.0006866574985906482,right_val:.5517945885658264,left_val:.3840579986572266},{features:[[14,0,6,6,-1],[14,0,3,6,2]],threshold:.008371243253350258,right_val:.6131753921508789,left_val:.4288564026355743},{features:[[5,3,3,1,-1],[6,3,1,1,3]],threshold:-.0012953069526702166,right_val:.528073787689209,left_val:.2913674116134644},{features:[[14,0,6,6,-1],[14,0,3,6,2]],threshold:-.0419416800141335,right_val:.4856030941009522,left_val:.7554799914360046},{features:[[0,3,20,10,-1],[0,8,20,5,2]],threshold:-.0235293805599213,right_val:.5256081223487854,left_val:.2838279902935028},{features:[[14,0,6,6,-1],[14,0,3,6,2]],threshold:.0408574491739273,right_val:.6277297139167786,left_val:.4870935082435608},{features:[[0,0,6,6,-1],[3,0,3,6,2]],threshold:-.0254068691283464,right_val:.4575029015541077,left_val:.7099707722663879},{features:[[19,15,1,2,-1],[19,16,1,1,2]],threshold:-.00041415440500713885,right_val:.5469412207603455,left_val:.4030886888504028},{features:[[0,2,4,8,-1],[2,2,2,8,2]],threshold:.0218241196125746,right_val:.6768701076507568,left_val:.4502024054527283},{features:[[2,1,18,4,-1],[11,1,9,2,2],[2,3,9,2,2]],threshold:.0141140399500728,right_val:.3791700005531311,left_val:.5442860722541809},{features:[[8,12,1,2,-1],[8,13,1,1,2]],threshold:6721459067193791e-20,right_val:.5873476266860962,left_val:.4200463891029358},{features:[[5,2,10,6,-1],[10,2,5,3,2],[5,5,5,3,2]],threshold:-.00794176384806633,right_val:.5585265755653381,left_val:.3792561888694763},{features:[[9,7,2,4,-1],[10,7,1,4,2]],threshold:-.00721444096416235,right_val:.4603548943996429,left_val:.7253103852272034},{features:[[9,7,3,3,-1],[10,7,1,3,3]],threshold:.002581733977422118,right_val:.5900238752365112,left_val:.4693301916122437},{features:[[4,5,12,8,-1],[8,5,4,8,3]],threshold:.1340931951999664,right_val:.1808844953775406,left_val:.5149213075637817},{features:[[15,15,4,3,-1],[15,16,4,1,3]],threshold:.0022962710354477167,right_val:.3717867136001587,left_val:.5399743914604187},{features:[[8,18,3,1,-1],[9,18,1,1,3]],threshold:-.002157584996894002,right_val:.5148863792419434,left_val:.2408495992422104},{features:[[9,13,4,3,-1],[9,14,4,1,3]],threshold:-.004919618833810091,right_val:.4738740026950836,left_val:.6573588252067566},{features:[[7,13,4,3,-1],[7,14,4,1,3]],threshold:.0016267469618469477,right_val:.6303114295005798,left_val:.4192821979522705},{features:[[19,15,1,2,-1],[19,16,1,1,2]],threshold:.00033413388882763684,right_val:.3702101111412048,left_val:.5540298223495483},{features:[[0,15,8,4,-1],[0,17,8,2,2]],threshold:-.0266980808228254,right_val:.5101410746574402,left_val:.1710917949676514},{features:[[9,3,6,4,-1],[11,3,2,4,3]],threshold:-.0305618792772293,right_val:.5168793797492981,left_val:.1904218047857285},{features:[[8,14,4,3,-1],[8,15,4,1,3]],threshold:.002851154888048768,right_val:.6313853859901428,left_val:.4447506964206696},{features:[[3,14,14,6,-1],[3,16,14,2,3]],threshold:-.0362114794552326,right_val:.5377349257469177,left_val:.2490727007389069},{features:[[6,3,6,6,-1],[6,6,6,3,2]],threshold:-.002411518944427371,right_val:.3664236962795258,left_val:.5381243228912354},{features:[[5,11,10,6,-1],[5,14,10,3,2]],threshold:-.0007725320174358785,right_val:.3541550040245056,left_val:.5530232191085815},{features:[[3,10,3,4,-1],[4,10,1,4,3]],threshold:.0002948172914329916,right_val:.5667243003845215,left_val:.4132699072360992},{features:[[13,9,2,2,-1],[13,9,1,2,2]],threshold:-.006233456078916788,right_val:.5198668837547302,left_val:.0987872332334518},{features:[[5,3,6,4,-1],[7,3,2,4,3]],threshold:-.0262747295200825,right_val:.5028107166290283,left_val:.0911274924874306},{features:[[9,7,3,3,-1],[10,7,1,3,3]],threshold:.005321226082742214,right_val:.6222720742225647,left_val:.4726648926734924},{features:[[2,12,2,3,-1],[2,13,2,1,3]],threshold:-.004112905822694302,right_val:.5137804746627808,left_val:.2157457023859024},{features:[[9,8,3,12,-1],[9,12,3,4,3]],threshold:.0032457809429615736,right_val:.3721776902675629,left_val:.5410770773887634},{features:[[3,14,4,6,-1],[3,14,2,3,2],[5,17,2,3,2]],threshold:-.0163597092032433,right_val:.4685291945934296,left_val:.7787874937057495},{features:[[16,15,2,2,-1],[16,16,2,1,2]],threshold:.00032166109303943813,right_val:.4240373969078064,left_val:.5478987097740173},{features:[[2,15,2,2,-1],[2,16,2,1,2]],threshold:.000644524407107383,right_val:.3501324951648712,left_val:.5330560803413391},{features:[[8,12,4,3,-1],[8,13,4,1,3]],threshold:-.0078909732401371,right_val:.4726569056510925,left_val:.6923521161079407},{features:[[0,7,20,1,-1],[10,7,10,1,2]],threshold:.048336211591959,right_val:.0757492035627365,left_val:.50559002161026},{features:[[7,6,8,3,-1],[7,6,4,3,2]],threshold:-.000751781277358532,right_val:.5538573861122131,left_val:.3783741891384125},{features:[[5,7,8,2,-1],[9,7,4,2,2]],threshold:-.002495391061529517,right_val:.5359612107276917,left_val:.3081651031970978},{features:[[9,7,3,5,-1],[10,7,1,5,3]],threshold:-.0022385010961443186,right_val:.4649342894554138,left_val:.663395881652832},{features:[[8,7,3,5,-1],[9,7,1,5,3]],threshold:-.0017988430336117744,right_val:.4347187876701355,left_val:.6596844792366028},{features:[[11,1,3,5,-1],[12,1,1,5,3]],threshold:.008786091580986977,right_val:.2315579950809479,left_val:.523183286190033},{features:[[6,2,3,6,-1],[7,2,1,6,3]],threshold:.003671538084745407,right_val:.2977376878261566,left_val:.520425021648407},{features:[[14,14,6,5,-1],[14,14,3,5,2]],threshold:-.0353364497423172,right_val:.4861505031585693,left_val:.7238878011703491},{features:[[9,8,2,2,-1],[9,9,2,1,2]],threshold:-.0006918924045749009,right_val:.5229824781417847,left_val:.3105022013187408},{features:[[10,7,1,3,-1],[10,8,1,1,3]],threshold:-.003394610946998,right_val:.5210173726081848,left_val:.3138968050479889},{features:[[6,6,2,2,-1],[6,6,1,1,2],[7,7,1,1,2]],threshold:.0009856928372755647,right_val:.6585097908973694,left_val:.4536580145359039},{features:[[2,11,18,4,-1],[11,11,9,2,2],[2,13,9,2,2]],threshold:-.0501631014049053,right_val:.5198916792869568,left_val:.1804454028606415},{features:[[6,6,2,2,-1],[6,6,1,1,2],[7,7,1,1,2]],threshold:-.0022367259953171015,right_val:.4651359021663666,left_val:.7255702018737793},{features:[[0,15,20,2,-1],[0,16,20,1,2]],threshold:.0007432628772221506,right_val:.5898545980453491,left_val:.4412921071052551},{features:[[4,14,2,3,-1],[4,15,2,1,3]],threshold:-.0009348518215119839,right_val:.5366017818450928,left_val:.3500052988529205},{features:[[8,14,4,3,-1],[8,15,4,1,3]],threshold:.0174979399889708,right_val:.8315284848213196,left_val:.4912194907665253},{features:[[8,7,2,3,-1],[8,8,2,1,3]],threshold:-.0015200000489130616,right_val:.537056028842926,left_val:.3570275902748108},{features:[[9,10,2,3,-1],[9,11,2,1,3]],threshold:.0007800394087098539,right_val:.5967335104942322,left_val:.4353772103786469}],threshold:39.1072883605957},{simpleClassifiers:[{features:[[5,4,10,4,-1],[5,6,10,2,2]],threshold:-.00999455526471138,right_val:.3054533004760742,left_val:.6162583231925964},{features:[[9,7,6,4,-1],[12,7,3,2,2],[9,9,3,2,2]],threshold:-.001108522992581129,right_val:.3155578076839447,left_val:.5818294882774353},{features:[[4,7,3,6,-1],[4,9,3,2,3]],threshold:.001036438043229282,right_val:.5692911744117737,left_val:.2552052140235901},{features:[[11,15,4,4,-1],[13,15,2,2,2],[11,17,2,2,2]],threshold:.000682113110087812,right_val:.5934931039810181,left_val:.3685089945793152},{features:[[7,8,4,2,-1],[7,9,4,1,2]],threshold:-.0006805734010413289,right_val:.5474792122840881,left_val:.2332392036914825},{features:[[13,1,4,3,-1],[13,1,2,3,2]],threshold:.0002606878988444805,right_val:.5667545795440674,left_val:.325745701789856},{features:[[5,15,4,4,-1],[5,15,2,2,2],[7,17,2,2,2]],threshold:.0005160737200640142,right_val:.5845472812652588,left_val:.3744716942310333},{features:[[9,5,4,7,-1],[9,5,2,7,2]],threshold:.0008500752155669034,right_val:.5522807240486145,left_val:.3420371115207672},{features:[[5,6,8,3,-1],[9,6,4,3,2]],threshold:-.0018607829697430134,right_val:.5375424027442932,left_val:.2804419994354248},{features:[[9,9,2,2,-1],[9,10,2,1,2]],threshold:-.001503397012129426,right_val:.5498952269554138,left_val:.2579050958156586},{features:[[7,15,5,3,-1],[7,16,5,1,3]],threshold:.0023478909861296415,right_val:.6313710808753967,left_val:.4175156056880951},{features:[[11,10,4,3,-1],[11,10,2,3,2]],threshold:-.00028880240279249847,right_val:.4052666127681732,left_val:.5865169763565063},{features:[[6,9,8,10,-1],[6,14,8,5,2]],threshold:.008940547704696655,right_val:.231865406036377,left_val:.5211141109466553},{features:[[10,11,6,2,-1],[10,11,3,2,2]],threshold:-.0193277392536402,right_val:.5241525769233704,left_val:.2753432989120483},{features:[[4,11,6,2,-1],[7,11,3,2,2]],threshold:-.0002020206011366099,right_val:.3677195906639099,left_val:.5722978711128235},{features:[[11,3,8,1,-1],[11,3,4,1,2]],threshold:.002117906929925084,right_val:.5542430877685547,left_val:.4466108083724976},{features:[[6,3,3,2,-1],[7,3,1,2,3]],threshold:-.0017743760254234076,right_val:.5300959944725037,left_val:.2813253104686737},{features:[[14,5,6,5,-1],[14,5,3,5,2]],threshold:.004223445896059275,right_val:.5795428156852722,left_val:.439970999956131},{features:[[7,5,2,12,-1],[7,11,2,6,2]],threshold:-.0143752200528979,right_val:.5292059183120728,left_val:.2981117963790894},{features:[[8,11,4,3,-1],[8,12,4,1,3]],threshold:-.0153491804376245,right_val:.4748171865940094,left_val:.7705215215682983},{features:[[4,1,2,3,-1],[5,1,1,3,2]],threshold:15152279956964776e-21,right_val:.5576897263526917,left_val:.3718844056129456},{features:[[18,3,2,6,-1],[18,5,2,2,3]],threshold:-.009129391983151436,right_val:.5286766886711121,left_val:.3615196049213409},{features:[[0,3,2,6,-1],[0,5,2,2,3]],threshold:.0022512159775942564,right_val:.3486298024654388,left_val:.5364704728126526},{features:[[9,12,2,3,-1],[9,13,2,1,3]],threshold:-.0049696918576955795,right_val:.4676836133003235,left_val:.6927651762962341},{features:[[7,13,4,3,-1],[7,14,4,1,3]],threshold:-.0128290103748441,right_val:.4660735130310059,left_val:.7712153792381287},{features:[[18,0,2,6,-1],[18,2,2,2,3]],threshold:-.009366006590425968,right_val:.5351287722587585,left_val:.3374983966350555},{features:[[0,0,2,6,-1],[0,2,2,2,3]],threshold:.0032452319283038378,right_val:.3289610147476196,left_val:.5325189828872681},{features:[[8,14,6,3,-1],[8,15,6,1,3]],threshold:-.0117235602810979,right_val:.4754300117492676,left_val:.6837652921676636},{features:[[7,4,2,4,-1],[8,4,1,4,2]],threshold:2925794069597032e-20,right_val:.5360502004623413,left_val:.357208788394928},{features:[[8,5,4,6,-1],[8,7,4,2,3]],threshold:-22244219508138485e-21,right_val:.3552064001560211,left_val:.5541427135467529},{features:[[6,4,2,2,-1],[7,4,1,2,2]],threshold:.005088150966912508,right_val:.1256462037563324,left_val:.5070844292640686},{features:[[3,14,14,4,-1],[10,14,7,2,2],[3,16,7,2,2]],threshold:.0274296794086695,right_val:.1625818014144898,left_val:.5269560217857361},{features:[[6,15,6,2,-1],[6,15,3,1,2],[9,16,3,1,2]],threshold:-.00641428679227829,right_val:.4584197103977203,left_val:.7145588994026184},{features:[[14,15,6,2,-1],[14,16,6,1,2]],threshold:.003347995923832059,right_val:.3494696915149689,left_val:.5398612022399902},{features:[[2,12,12,8,-1],[2,16,12,4,2]],threshold:-.0826354920864105,right_val:.5160226225852966,left_val:.2439192980527878},{features:[[7,7,7,2,-1],[7,8,7,1,2]],threshold:.0010261740535497665,right_val:.5767908096313477,left_val:.3886891901493073},{features:[[0,2,18,2,-1],[0,3,18,1,2]],threshold:-.0016307090409100056,right_val:.5347700715065002,left_val:.3389458060264587},{features:[[9,6,2,5,-1],[9,6,1,5,2]],threshold:.0024546680506318808,right_val:.638724684715271,left_val:.4601413905620575},{features:[[7,5,3,8,-1],[8,5,1,8,3]],threshold:-.0009947651997208595,right_val:.4120396077632904,left_val:.5769879221916199},{features:[[9,6,3,4,-1],[10,6,1,4,3]],threshold:.0154091902077198,right_val:.7089822292327881,left_val:.4878709018230438},{features:[[4,13,3,2,-1],[4,14,3,1,2]],threshold:.001178440055809915,right_val:.2895244956016541,left_val:.5263553261756897},{features:[[9,4,6,3,-1],[11,4,2,3,3]],threshold:-.0277019198983908,right_val:.5219606757164001,left_val:.149882897734642},{features:[[5,4,6,3,-1],[7,4,2,3,3]],threshold:-.0295053999871016,right_val:.4999816119670868,left_val:.024893319234252},{features:[[14,11,5,2,-1],[14,12,5,1,2]],threshold:.0004515943001024425,right_val:.4029662907123566,left_val:.5464622974395752},{features:[[1,2,6,9,-1],[3,2,2,9,3]],threshold:.007177263963967562,right_val:.5866296887397766,left_val:.4271056950092316},{features:[[14,6,6,13,-1],[14,6,3,13,2]],threshold:-.0741820484399796,right_val:.4919027984142304,left_val:.6874179244041443},{features:[[3,6,14,8,-1],[3,6,7,4,2],[10,10,7,4,2]],threshold:-.0172541607171297,right_val:.534873902797699,left_val:.3370676040649414},{features:[[16,0,4,11,-1],[16,0,2,11,2]],threshold:.0148515598848462,right_val:.6129904985427856,left_val:.4626792967319489},{features:[[3,4,12,12,-1],[3,4,6,6,2],[9,10,6,6,2]],threshold:.0100020002573729,right_val:.3423453867435455,left_val:.5346122980117798},{features:[[11,4,5,3,-1],[11,5,5,1,3]],threshold:.0020138120744377375,right_val:.5824304223060608,left_val:.4643830060958862},{features:[[4,11,4,2,-1],[4,12,4,1,2]],threshold:.0015135470312088728,right_val:.2856149971485138,left_val:.5196396112442017},{features:[[10,7,2,2,-1],[10,7,1,2,2]],threshold:.003138143103569746,right_val:.5958529710769653,left_val:.4838162958621979},{features:[[8,7,2,2,-1],[9,7,1,2,2]],threshold:-.005145044066011906,right_val:.4741412103176117,left_val:.8920302987098694},{features:[[9,17,3,2,-1],[10,17,1,2,3]],threshold:-.004473670851439238,right_val:.5337278842926025,left_val:.2033942937850952},{features:[[5,6,3,3,-1],[5,7,3,1,3]],threshold:.001962847076356411,right_val:.6725863218307495,left_val:.457163393497467},{features:[[10,0,3,3,-1],[11,0,1,3,3]],threshold:.005426045041531324,right_val:.2845670878887177,left_val:.5271108150482178},{features:[[5,6,6,2,-1],[5,6,3,1,2],[8,7,3,1,2]],threshold:.0004961146041750908,right_val:.5718597769737244,left_val:.4138312935829163},{features:[[12,16,4,3,-1],[12,17,4,1,3]],threshold:.009372878819704056,right_val:.2804847061634064,left_val:.5225151181221008},{features:[[3,12,3,2,-1],[3,13,3,1,2]],threshold:.0006050089723430574,right_val:.3314523994922638,left_val:.523676872253418},{features:[[9,12,3,2,-1],[9,13,3,1,2]],threshold:.0005679255118593574,right_val:.6276971101760864,left_val:.4531059861183167},{features:[[1,11,16,4,-1],[1,11,8,2,2],[9,13,8,2,2]],threshold:.0246443394571543,right_val:.2017143964767456,left_val:.5130851864814758},{features:[[12,4,3,3,-1],[12,5,3,1,3]],threshold:-.0102904504165053,right_val:.4876641035079956,left_val:.7786595225334167},{features:[[4,4,5,3,-1],[4,5,5,1,3]],threshold:.002062941901385784,right_val:.5881264209747314,left_val:.4288598895072937},{features:[[12,16,4,3,-1],[12,17,4,1,3]],threshold:-.005051948130130768,right_val:.5286008715629578,left_val:.3523977994918823},{features:[[5,4,3,3,-1],[5,5,3,1,3]],threshold:-.0057692620903253555,right_val:.4588094055652618,left_val:.6841086149215698},{features:[[9,0,2,2,-1],[9,1,2,1,2]],threshold:-.0004578994121402502,right_val:.5485978126525879,left_val:.356552004814148},{features:[[8,9,4,2,-1],[8,10,4,1,2]],threshold:-.0007591883768327534,right_val:.5254197120666504,left_val:.336879312992096},{features:[[8,8,4,3,-1],[8,9,4,1,3]],threshold:-.001773725962266326,right_val:.5454015135765076,left_val:.3422161042690277},{features:[[0,13,6,3,-1],[2,13,2,3,3]],threshold:-.008561046794056892,right_val:.4485856890678406,left_val:.6533612012863159},{features:[[16,14,3,2,-1],[16,15,3,1,2]],threshold:.0017277270089834929,right_val:.3925352990627289,left_val:.5307580232620239},{features:[[1,18,18,2,-1],[7,18,6,2,3]],threshold:-.0281996093690395,right_val:.4588584005832672,left_val:.685745894908905},{features:[[16,14,3,2,-1],[16,15,3,1,2]],threshold:-.001778110978193581,right_val:.5369856953620911,left_val:.4037851095199585},{features:[[1,14,3,2,-1],[1,15,3,1,2]],threshold:.00033177141449414194,right_val:.3705750107765198,left_val:.539979875087738},{features:[[7,14,6,3,-1],[7,15,6,1,3]],threshold:.0026385399978607893,right_val:.6452730894088745,left_val:.4665437042713165},{features:[[5,14,8,3,-1],[5,15,8,1,3]],threshold:-.0021183069329708815,right_val:.4064677059650421,left_val:.5914781093597412},{features:[[10,6,4,14,-1],[10,6,2,14,2]],threshold:-.0147732896730304,right_val:.5294762849807739,left_val:.3642038106918335},{features:[[6,6,4,14,-1],[8,6,2,14,2]],threshold:-.0168154407292604,right_val:.5144972801208496,left_val:.2664231956005096},{features:[[13,5,2,3,-1],[13,6,2,1,3]],threshold:-.006337014026939869,right_val:.4852097928524017,left_val:.6779531240463257},{features:[[7,16,6,1,-1],[9,16,2,1,3]],threshold:-44560048991115764e-21,right_val:.4153054058551788,left_val:.5613964796066284},{features:[[9,12,3,3,-1],[9,13,3,1,3]],threshold:-.0010240620467811823,right_val:.4566304087638855,left_val:.5964478254318237},{features:[[7,0,3,3,-1],[8,0,1,3,3]],threshold:-.00231616897508502,right_val:.5188159942626953,left_val:.2976115047931671},{features:[[4,0,16,18,-1],[4,9,16,9,2]],threshold:.5321757197380066,right_val:.220263198018074,left_val:.5187839269638062},{features:[[1,1,16,14,-1],[1,8,16,7,2]],threshold:-.1664305031299591,right_val:.5060343146324158,left_val:.1866022944450378},{features:[[3,9,15,4,-1],[8,9,5,4,3]],threshold:.112535297870636,right_val:.1185022965073586,left_val:.5212125182151794},{features:[[6,12,7,3,-1],[6,13,7,1,3]],threshold:.009304686449468136,right_val:.6826149225234985,left_val:.4589937031269074},{features:[[14,15,2,3,-1],[14,16,2,1,3]],threshold:-.004625509958714247,right_val:.5225008726119995,left_val:.3079940974712372},{features:[[2,3,16,14,-1],[2,3,8,7,2],[10,10,8,7,2]],threshold:-.1111646965146065,right_val:.5080801844596863,left_val:.2101044058799744},{features:[[16,2,4,18,-1],[18,2,2,9,2],[16,11,2,9,2]],threshold:-.0108884396031499,right_val:.4790464043617249,left_val:.5765355229377747},{features:[[4,15,2,3,-1],[4,16,2,1,3]],threshold:.005856430158019066,right_val:.1563598960638046,left_val:.5065100193023682},{features:[[16,2,4,18,-1],[18,2,2,9,2],[16,11,2,9,2]],threshold:.0548543892800808,right_val:.7230510711669922,left_val:.49669149518013},{features:[[1,1,8,3,-1],[1,2,8,1,3]],threshold:-.0111973397433758,right_val:.5098798274993896,left_val:.2194979041814804},{features:[[8,11,4,3,-1],[8,12,4,1,3]],threshold:.004406907130032778,right_val:.6770902872085571,left_val:.4778401851654053},{features:[[5,11,5,9,-1],[5,14,5,3,3]],threshold:-.0636652931571007,right_val:.5081024169921875,left_val:.1936362981796265},{features:[[16,0,4,11,-1],[16,0,2,11,2]],threshold:-.009808149188756943,right_val:.4810341000556946,left_val:.599906325340271},{features:[[7,0,6,1,-1],[9,0,2,1,3]],threshold:-.0021717099007219076,right_val:.5235472917556763,left_val:.3338333964347839},{features:[[16,3,3,7,-1],[17,3,1,7,3]],threshold:-.0133155202493072,right_val:.4919213056564331,left_val:.6617069840431213},{features:[[1,3,3,7,-1],[2,3,1,7,3]],threshold:.002544207964092493,right_val:.6082184910774231,left_val:.4488744139671326},{features:[[7,8,6,12,-1],[7,12,6,4,3]],threshold:.0120378397405148,right_val:.3292432129383087,left_val:.540939211845398},{features:[[0,0,4,11,-1],[2,0,2,11,2]],threshold:-.0207010507583618,right_val:.4594995975494385,left_val:.6819120049476624},{features:[[14,0,6,20,-1],[14,0,3,20,2]],threshold:.0276082791388035,right_val:.5767282843589783,left_val:.4630792140960693},{features:[[0,3,1,2,-1],[0,4,1,1,2]],threshold:.0012370620388537645,right_val:.2635016143321991,left_val:.5165379047393799},{features:[[5,5,10,8,-1],[10,5,5,4,2],[5,9,5,4,2]],threshold:-.037669338285923,right_val:.5278980135917664,left_val:.2536393105983734},{features:[[4,7,12,4,-1],[4,7,6,2,2],[10,9,6,2,2]],threshold:-.0018057259730994701,right_val:.5517500042915344,left_val:.3985156118869782}],threshold:50.61048126220703},{simpleClassifiers:[{features:[[2,1,6,4,-1],[5,1,3,4,2]],threshold:.004429902881383896,right_val:.633522629737854,left_val:.2891018092632294},{features:[[9,7,6,4,-1],[12,7,3,2,2],[9,9,3,2,2]],threshold:-.0023813319858163595,right_val:.3477487862110138,left_val:.621178925037384},{features:[[5,6,2,6,-1],[5,9,2,3,2]],threshold:.0022915711160749197,right_val:.5582118034362793,left_val:.2254412025213242},{features:[[9,16,6,4,-1],[12,16,3,2,2],[9,18,3,2,2]],threshold:.0009945794008672237,right_val:.5930070877075195,left_val:.3711710870265961},{features:[[9,4,2,12,-1],[9,10,2,6,2]],threshold:.0007716466789133847,right_val:.334799587726593,left_val:.565172016620636},{features:[[7,1,6,18,-1],[9,1,2,18,3]],threshold:-.001138641033321619,right_val:.5508630871772766,left_val:.3069126009941101},{features:[[4,12,12,2,-1],[8,12,4,2,3]],threshold:-.0001640303962631151,right_val:.3699047863483429,left_val:.576282799243927},{features:[[8,8,6,2,-1],[8,9,6,1,2]],threshold:29793529392918572e-21,right_val:.5437911152839661,left_val:.2644244134426117},{features:[[8,0,3,6,-1],[9,0,1,6,3]],threshold:.008577490225434303,right_val:.1795724928379059,left_val:.5051138997077942},{features:[[11,18,3,2,-1],[11,19,3,1,2]],threshold:-.0002603268949314952,right_val:.4446826875209808,left_val:.5826969146728516},{features:[[1,1,17,4,-1],[1,3,17,2,2]],threshold:-.006140463054180145,right_val:.5346971750259399,left_val:.3113852143287659},{features:[[11,8,4,12,-1],[11,8,2,12,2]],threshold:-.0230869501829147,right_val:.533119797706604,left_val:.32779461145401},{features:[[8,14,4,3,-1],[8,15,4,1,3]],threshold:-.0142436502501369,right_val:.4588063061237335,left_val:.7381709814071655},{features:[[12,3,2,17,-1],[12,3,1,17,2]],threshold:.0194871295243502,right_val:.2274471968412399,left_val:.5256630778312683},{features:[[4,7,6,1,-1],[6,7,2,1,3]],threshold:-.0009668110869824886,right_val:.3815006911754608,left_val:.5511230826377869},{features:[[18,3,2,3,-1],[18,4,2,1,3]],threshold:.003147470997646451,right_val:.2543726861476898,left_val:.5425636768341064},{features:[[8,4,3,4,-1],[8,6,3,2,2]],threshold:-.00018026070029009134,right_val:.3406304121017456,left_val:.5380191802978516},{features:[[4,5,12,10,-1],[4,10,12,5,2]],threshold:-.006026626098901033,right_val:.54205721616745,left_val:.3035801947116852},{features:[[5,18,4,2,-1],[7,18,2,2,2]],threshold:.00044462960795499384,right_val:.5660110116004944,left_val:.3990997076034546},{features:[[17,2,3,6,-1],[17,4,3,2,3]],threshold:.002260976005345583,right_val:.3940688073635101,left_val:.5562806725502014},{features:[[7,7,6,6,-1],[9,7,2,6,3]],threshold:.0511330589652061,right_val:.7118561863899231,left_val:.4609653949737549},{features:[[17,2,3,6,-1],[17,4,3,2,3]],threshold:-.0177863091230392,right_val:.5322144031524658,left_val:.2316166013479233},{features:[[8,0,3,4,-1],[9,0,1,4,3]],threshold:-.004967962857335806,right_val:.5122029185295105,left_val:.233077198266983},{features:[[9,14,2,3,-1],[9,15,2,1,3]],threshold:.002066768938675523,right_val:.6455488204956055,left_val:.4657444059848785},{features:[[0,12,6,3,-1],[0,13,6,1,3]],threshold:.007441376801580191,right_val:.236163392663002,left_val:.5154392123222351},{features:[[8,14,4,3,-1],[8,15,4,1,3]],threshold:-.003627727972343564,right_val:.4476661086082459,left_val:.6219773292541504},{features:[[3,12,2,3,-1],[3,13,2,1,3]],threshold:-.005353075917810202,right_val:.5102208256721497,left_val:.1837355047464371},{features:[[5,6,12,7,-1],[9,6,4,7,3]],threshold:.1453091949224472,right_val:.1535930931568146,left_val:.5145987272262573},{features:[[0,2,3,6,-1],[0,4,3,2,3]],threshold:.0024394490756094456,right_val:.3624661862850189,left_val:.5343660116195679},{features:[[14,6,1,3,-1],[14,7,1,1,3]],threshold:-.003128339070826769,right_val:.4845592081546783,left_val:.6215007901191711},{features:[[2,0,3,14,-1],[3,0,1,14,3]],threshold:.0017940260004252195,right_val:.5824198126792908,left_val:.4299261868000031},{features:[[12,14,5,6,-1],[12,16,5,2,3]],threshold:.0362538211047649,right_val:.1439467966556549,left_val:.5260334014892578},{features:[[4,14,5,6,-1],[4,16,5,2,3]],threshold:-.005174672231078148,right_val:.5287045240402222,left_val:.350653886795044},{features:[[11,10,2,2,-1],[12,10,1,1,2],[11,11,1,1,2]],threshold:.0006538329762406647,right_val:.6122040152549744,left_val:.4809640944004059},{features:[[5,0,3,14,-1],[6,0,1,14,3]],threshold:-.0264802295714617,right_val:.5045586228370667,left_val:.1139362007379532},{features:[[10,15,2,3,-1],[10,16,2,1,3]],threshold:-.0030440660193562508,right_val:.4794734120368958,left_val:.6352095007896423},{features:[[0,2,2,3,-1],[0,3,2,1,3]],threshold:.0036993520334362984,right_val:.2498510926961899,left_val:.5131118297576904},{features:[[5,11,12,6,-1],[5,14,12,3,2]],threshold:-.0003676293126773089,right_val:.3709532022476196,left_val:.54213947057724},{features:[[6,11,3,9,-1],[6,14,3,3,3]],threshold:-.041382260620594,right_val:.5081691741943359,left_val:.1894959956407547},{features:[[11,10,2,2,-1],[12,10,1,1,2],[11,11,1,1,2]],threshold:-.0010532729793339968,right_val:.4783608913421631,left_val:.645436704158783},{features:[[5,6,1,3,-1],[5,7,1,1,3]],threshold:-.0021648600231856108,right_val:.449982613325119,left_val:.6215031147003174},{features:[[4,9,13,3,-1],[4,10,13,1,3]],threshold:-.0005674774874933064,right_val:.5419334769248962,left_val:.3712610900402069},{features:[[1,7,15,6,-1],[6,7,5,6,3]],threshold:.173758402466774,right_val:.1215742006897926,left_val:.5023643970489502},{features:[[4,5,12,6,-1],[8,5,4,6,3]],threshold:-.0029049699660390615,right_val:.5381883978843689,left_val:.3240267932415009},{features:[[8,10,4,3,-1],[8,11,4,1,3]],threshold:.0012299539521336555,right_val:.5703486204147339,left_val:.4165507853031158},{features:[[15,14,1,3,-1],[15,15,1,1,3]],threshold:-.0005432923790067434,right_val:.554754912853241,left_val:.3854042887687683},{features:[[1,11,5,3,-1],[1,12,5,1,3]],threshold:-.008329725824296474,right_val:.5097082853317261,left_val:.2204494029283524},{features:[[7,1,7,12,-1],[7,7,7,6,2]],threshold:-.00010417630255687982,right_val:.4303036034107208,left_val:.560706615447998},{features:[[0,1,6,10,-1],[0,1,3,5,2],[3,6,3,5,2]],threshold:.0312047004699707,right_val:.6982004046440125,left_val:.4621657133102417},{features:[[16,1,4,3,-1],[16,2,4,1,3]],threshold:.007894350215792656,right_val:.226906806230545,left_val:.5269594192504883},{features:[[5,5,2,3,-1],[5,6,2,1,3]],threshold:-.004364531021565199,right_val:.4537956118583679,left_val:.6359223127365112},{features:[[12,2,3,5,-1],[13,2,1,5,3]],threshold:.007679305970668793,right_val:.274048388004303,left_val:.5274767875671387},{features:[[0,3,4,6,-1],[0,5,4,2,3]],threshold:-.0254311393946409,right_val:.5071732997894287,left_val:.2038519978523254},{features:[[8,12,4,2,-1],[8,13,4,1,2]],threshold:.0008200060110539198,right_val:.6119868159294128,left_val:.4587455093860626},{features:[[8,18,3,1,-1],[9,18,1,1,3]],threshold:.002928460016846657,right_val:.2028204947710037,left_val:.5071274042129517},{features:[[11,10,2,2,-1],[12,10,1,1,2],[11,11,1,1,2]],threshold:4525647091213614e-20,right_val:.5430821776390076,left_val:.4812104105949402},{features:[[7,10,2,2,-1],[7,10,1,1,2],[8,11,1,1,2]],threshold:.0013158309739083052,right_val:.6779323220252991,left_val:.4625813961029053},{features:[[11,11,4,4,-1],[11,13,4,2,2]],threshold:.0015870389761403203,right_val:.3431465029716492,left_val:.5386291742324829},{features:[[8,12,3,8,-1],[9,12,1,8,3]],threshold:-.0215396601706743,right_val:.5003222823143005,left_val:.025942500680685},{features:[[13,0,6,3,-1],[13,1,6,1,3]],threshold:.014334480278194,right_val:.1590632945299149,left_val:.5202844738960266},{features:[[8,8,3,4,-1],[9,8,1,4,3]],threshold:-.008388138376176357,right_val:.4648044109344482,left_val:.728248119354248},{features:[[5,7,10,10,-1],[10,7,5,5,2],[5,12,5,5,2]],threshold:.00919068418443203,right_val:.3923191130161285,left_val:.556235671043396},{features:[[3,18,8,2,-1],[3,18,4,1,2],[7,19,4,1,2]],threshold:-.005845305975526571,right_val:.4629127979278565,left_val:.6803392767906189},{features:[[10,2,6,8,-1],[12,2,2,8,3]],threshold:-.0547077991068363,right_val:.5206125974655151,left_val:.2561671137809753},{features:[[4,2,6,8,-1],[6,2,2,8,3]],threshold:.009114277549088001,right_val:.3053877055644989,left_val:.518962025642395},{features:[[11,0,3,7,-1],[12,0,1,7,3]],threshold:-.0155750000849366,right_val:.5169094800949097,left_val:.1295074969530106},{features:[[7,11,2,1,-1],[8,11,1,1,2]],threshold:-.0001205060034408234,right_val:.4230825006961823,left_val:.5735098123550415},{features:[[15,14,1,3,-1],[15,15,1,1,3]],threshold:.0012273970060050488,right_val:.4079791903495789,left_val:.5289878249168396},{features:[[7,15,2,2,-1],[7,15,1,1,2],[8,16,1,1,2]],threshold:-.0012186600361019373,right_val:.4574409127235413,left_val:.6575639843940735},{features:[[15,14,1,3,-1],[15,15,1,1,3]],threshold:-.0033256649039685726,right_val:.5195019841194153,left_val:.3628047108650208},{features:[[6,0,3,7,-1],[7,0,1,7,3]],threshold:-.0132883097976446,right_val:.504348874092102,left_val:.1284265965223312},{features:[[18,1,2,7,-1],[18,1,1,7,2]],threshold:-.0033839771058410406,right_val:.475750595331192,left_val:.6292240023612976},{features:[[2,0,8,20,-1],[2,10,8,10,2]],threshold:-.2195422053337097,right_val:.5065013766288757,left_val:.148773193359375},{features:[[3,0,15,6,-1],[3,2,15,2,3]],threshold:.004911170806735754,right_val:.5665838718414307,left_val:.425610214471817},{features:[[4,3,12,2,-1],[4,4,12,1,2]],threshold:-.00018744950648397207,right_val:.5586857199668884,left_val:.4004144072532654},{features:[[16,0,4,5,-1],[16,0,2,5,2]],threshold:-.00521786417812109,right_val:.4812706112861633,left_val:.6009116172790527},{features:[[7,0,3,4,-1],[8,0,1,4,3]],threshold:-.0011111519997939467,right_val:.5287089943885803,left_val:.3514933884143829},{features:[[16,0,4,5,-1],[16,0,2,5,2]],threshold:.004403640050441027,right_val:.5924085974693298,left_val:.4642275869846344},{features:[[1,7,6,13,-1],[3,7,2,13,3]],threshold:.1229949966073036,right_val:.0691524818539619,left_val:.5025529265403748},{features:[[16,0,4,5,-1],[16,0,2,5,2]],threshold:-.0123135102912784,right_val:.4934012889862061,left_val:.5884591937065125},{features:[[0,0,4,5,-1],[2,0,2,5,2]],threshold:.004147103987634182,right_val:.589347779750824,left_val:.4372239112854004},{features:[[14,12,3,6,-1],[14,14,3,2,3]],threshold:-.003550264984369278,right_val:.5396270155906677,left_val:.4327551126480103},{features:[[3,12,3,6,-1],[3,14,3,2,3]],threshold:-.0192242693156004,right_val:.5068330764770508,left_val:.1913134008646011},{features:[[16,1,4,3,-1],[16,2,4,1,3]],threshold:.0014395059552043676,right_val:.424353301525116,left_val:.5308178067207336},{features:[[8,7,2,10,-1],[8,7,1,5,2],[9,12,1,5,2]],threshold:-.00677519990131259,right_val:.4540086090564728,left_val:.6365395784378052},{features:[[11,11,4,4,-1],[11,13,4,2,2]],threshold:.007011963054537773,right_val:.302619993686676,left_val:.5189834237098694},{features:[[0,1,4,3,-1],[0,2,4,1,3]],threshold:.005401465110480785,right_val:.2557682991027832,left_val:.5105062127113342},{features:[[13,4,1,3,-1],[13,5,1,1,3]],threshold:.0009027498890645802,right_val:.5861827731132507,left_val:.4696914851665497},{features:[[7,15,3,5,-1],[8,15,1,5,3]],threshold:.0114744501188397,right_val:.152717798948288,left_val:.5053645968437195},{features:[[9,7,3,5,-1],[10,7,1,5,3]],threshold:-.006702343001961708,right_val:.4890604019165039,left_val:.6508980989456177},{features:[[8,7,3,5,-1],[9,7,1,5,3]],threshold:-.0020462959073483944,right_val:.4514600038528442,left_val:.6241816878318787},{features:[[10,6,4,14,-1],[10,6,2,14,2]],threshold:-.009995156899094582,right_val:.5400953888893127,left_val:.3432781100273132},{features:[[0,5,5,6,-1],[0,7,5,2,3]],threshold:-.0357007086277008,right_val:.5074077844619751,left_val:.1878059059381485},{features:[[9,5,6,4,-1],[9,5,3,4,2]],threshold:.0004558456130325794,right_val:.5402569770812988,left_val:.3805277049541473},{features:[[0,0,18,10,-1],[6,0,6,10,3]],threshold:-.0542606003582478,right_val:.4595097005367279,left_val:.6843714714050293},{features:[[10,6,4,14,-1],[10,6,2,14,2]],threshold:.0060600461438298225,right_val:.450052797794342,left_val:.5502905249595642},{features:[[6,6,4,14,-1],[8,6,2,14,2]],threshold:-.006479183211922646,right_val:.5310757160186768,left_val:.3368858098983765},{features:[[13,4,1,3,-1],[13,5,1,1,3]],threshold:-.0014939469983801246,right_val:.4756175875663757,left_val:.6487640142440796},{features:[[5,1,2,3,-1],[6,1,1,3,2]],threshold:14610530342906713e-21,right_val:.5451064109802246,left_val:.403457909822464},{features:[[18,1,2,18,-1],[19,1,1,9,2],[18,10,1,9,2]],threshold:-.00723219383507967,right_val:.4824739992618561,left_val:.6386873722076416},{features:[[2,1,4,3,-1],[2,2,4,1,3]],threshold:-.004064581822603941,right_val:.5157335996627808,left_val:.2986421883106232},{features:[[18,1,2,18,-1],[19,1,1,9,2],[18,10,1,9,2]],threshold:.0304630808532238,right_val:.7159956097602844,left_val:.5022199749946594},{features:[[1,14,4,6,-1],[1,14,2,3,2],[3,17,2,3,2]],threshold:-.008054491132497787,right_val:.4619275033473969,left_val:.6492452025413513},{features:[[10,11,7,6,-1],[10,13,7,2,3]],threshold:.0395051389932632,right_val:.2450613975524902,left_val:.5150570869445801},{features:[[0,10,6,10,-1],[0,10,3,5,2],[3,15,3,5,2]],threshold:.008453020825982094,right_val:.6394037008285522,left_val:.4573669135570526},{features:[[11,0,3,4,-1],[12,0,1,4,3]],threshold:-.0011688120430335402,right_val:.548366129398346,left_val:.3865512013435364},{features:[[5,10,5,6,-1],[5,13,5,3,2]],threshold:.002807067008689046,right_val:.2701480090618134,left_val:.5128579139709473},{features:[[14,6,1,8,-1],[14,10,1,4,2]],threshold:.000473652093205601,right_val:.5387461185455322,left_val:.4051581919193268},{features:[[1,7,18,6,-1],[1,7,9,3,2],[10,10,9,3,2]],threshold:.0117410803213716,right_val:.3719413876533508,left_val:.5295950174331665},{features:[[9,7,2,2,-1],[9,7,1,2,2]],threshold:.0031833238899707794,right_val:.6895126104354858,left_val:.4789406955242157},{features:[[5,9,4,5,-1],[7,9,2,5,2]],threshold:.0007024150108918548,right_val:.3918080925941467,left_val:.5384489297866821}],threshold:54.62007141113281},{simpleClassifiers:[{features:[[7,6,6,3,-1],[9,6,2,3,3]],threshold:.0170599296689034,right_val:.7142534852027893,left_val:.3948527872562408},{features:[[1,0,18,4,-1],[7,0,6,4,3]],threshold:.0218408405780792,right_val:.6090016961097717,left_val:.3370316028594971},{features:[[7,15,2,4,-1],[7,17,2,2,2]],threshold:.00024520049919374287,right_val:.5987902283668518,left_val:.3500576019287109},{features:[[1,0,19,9,-1],[1,3,19,3,3]],threshold:.008327260613441467,right_val:.5697240829467773,left_val:.3267528116703033},{features:[[3,7,3,6,-1],[3,9,3,2,3]],threshold:.0005714829894714057,right_val:.5531656742095947,left_val:.3044599890708923},{features:[[13,7,4,4,-1],[15,7,2,2,2],[13,9,2,2,2]],threshold:.0006737398798577487,right_val:.567263126373291,left_val:.3650012016296387},{features:[[3,7,4,4,-1],[3,7,2,2,2],[5,9,2,2,2]],threshold:3468159047770314e-20,right_val:.5388727188110352,left_val:.3313541114330292},{features:[[9,6,10,8,-1],[9,10,10,4,2]],threshold:-.005856339819729328,right_val:.5498778820037842,left_val:.2697942852973938},{features:[[3,8,14,12,-1],[3,14,14,6,2]],threshold:.00851022731512785,right_val:.2762879133224487,left_val:.5269358158111572},{features:[[6,5,10,12,-1],[11,5,5,6,2],[6,11,5,6,2]],threshold:-.0698172077536583,right_val:.5259246826171875,left_val:.2909603118896484},{features:[[9,11,2,3,-1],[9,12,2,1,3]],threshold:-.0008611367084085941,right_val:.4073697924613953,left_val:.5892577171325684},{features:[[9,5,6,5,-1],[9,5,3,5,2]],threshold:.0009714924963191152,right_val:.5415862202644348,left_val:.3523564040660858},{features:[[9,4,2,4,-1],[9,6,2,2,2]],threshold:-1472749045206001e-20,right_val:.3503156006336212,left_val:.5423017740249634},{features:[[9,5,6,5,-1],[9,5,3,5,2]],threshold:.0484202913939953,right_val:.3411195874214172,left_val:.51939457654953},{features:[[5,5,6,5,-1],[8,5,3,5,2]],threshold:.0013257140526548028,right_val:.5335376262664795,left_val:.315776914358139},{features:[[11,2,6,1,-1],[13,2,2,1,3]],threshold:1492214960308047e-20,right_val:.5536553859710693,left_val:.4451299905776978},{features:[[3,2,6,1,-1],[5,2,2,1,3]],threshold:-.002717339899390936,right_val:.5248088836669922,left_val:.3031741976737976},{features:[[13,5,2,3,-1],[13,6,2,1,3]],threshold:.0029219500720500946,right_val:.6606041789054871,left_val:.4781453013420105},{features:[[0,10,1,4,-1],[0,12,1,2,2]],threshold:-.0019804988987743855,right_val:.5287625193595886,left_val:.3186308145523071},{features:[[13,5,2,3,-1],[13,6,2,1,3]],threshold:-.004001210909336805,right_val:.4749928116798401,left_val:.6413596868515015},{features:[[8,18,3,2,-1],[9,18,1,2,3]],threshold:-.004349199123680592,right_val:.5098996758460999,left_val:.1507498025894165},{features:[[6,15,9,2,-1],[6,16,9,1,2]],threshold:.0013490889687091112,right_val:.5881167054176331,left_val:.4316158890724182},{features:[[8,14,4,3,-1],[8,15,4,1,3]],threshold:.0185970701277256,right_val:.9089794158935547,left_val:.4735553860664368},{features:[[18,4,2,4,-1],[18,6,2,2,2]],threshold:-.001856237999163568,right_val:.5577837228775024,left_val:.3553189039230347},{features:[[5,5,2,3,-1],[5,6,2,1,3]],threshold:.002294043079018593,right_val:.6580877900123596,left_val:.4500094950199127},{features:[[15,16,3,2,-1],[15,17,3,1,2]],threshold:.00029982850537635386,right_val:.3975878953933716,left_val:.5629242062568665},{features:[[0,0,3,9,-1],[0,3,3,3,3]],threshold:.0035455459728837013,right_val:.3605485856533051,left_val:.5381547212600708},{features:[[9,7,3,3,-1],[9,8,3,1,3]],threshold:.009610472247004509,right_val:.1796745955944061,left_val:.5255997180938721},{features:[[8,7,3,3,-1],[8,8,3,1,3]],threshold:-.0062783220782876015,right_val:.5114030241966248,left_val:.227285698056221},{features:[[9,5,2,6,-1],[9,5,1,6,2]],threshold:.0034598479978740215,right_val:.6608219146728516,left_val:.4626308083534241},{features:[[8,6,3,4,-1],[9,6,1,4,3]],threshold:-.0013112019514665008,right_val:.4436857998371124,left_val:.6317539811134338},{features:[[7,6,8,12,-1],[11,6,4,6,2],[7,12,4,6,2]],threshold:.002687617903575301,right_val:.4054022133350372,left_val:.5421109795570374},{features:[[5,6,8,12,-1],[5,6,4,6,2],[9,12,4,6,2]],threshold:.003911816980689764,right_val:.3273454904556274,left_val:.5358477830886841},{features:[[12,4,3,3,-1],[12,5,3,1,3]],threshold:-.014206450432539,right_val:.4975781142711639,left_val:.7793576717376709},{features:[[2,16,3,2,-1],[2,17,3,1,2]],threshold:.0007170552853494883,right_val:.3560903966426849,left_val:.5297319889068604},{features:[[12,4,3,3,-1],[12,5,3,1,3]],threshold:.001663501956500113,right_val:.5816481709480286,left_val:.467809408903122},{features:[[2,12,6,6,-1],[2,14,6,2,3]],threshold:.0033686188980937004,right_val:.3446420133113861,left_val:.5276734232902527},{features:[[7,13,6,3,-1],[7,14,6,1,3]],threshold:.0127995302900672,right_val:.7472159266471863,left_val:.4834679961204529},{features:[[6,14,6,3,-1],[6,15,6,1,3]],threshold:.0033901201095432043,right_val:.6401721239089966,left_val:.4511859118938446},{features:[[14,15,5,3,-1],[14,16,5,1,3]],threshold:.004707077983766794,right_val:.355522096157074,left_val:.533565878868103},{features:[[5,4,3,3,-1],[5,5,3,1,3]],threshold:.0014819339849054813,right_val:.5772724151611328,left_val:.4250707030296326},{features:[[14,15,5,3,-1],[14,16,5,1,3]],threshold:-.0069995759986341,right_val:.5292900204658508,left_val:.3003320097923279},{features:[[5,3,6,2,-1],[7,3,2,2,3]],threshold:.0159390103071928,right_val:.1675581932067871,left_val:.5067319273948669},{features:[[8,15,4,3,-1],[8,16,4,1,3]],threshold:.007637734990566969,right_val:.7085601091384888,left_val:.4795069992542267},{features:[[1,15,5,3,-1],[1,16,5,1,3]],threshold:.006733404006808996,right_val:.2162470072507858,left_val:.5133113265037537},{features:[[8,13,4,6,-1],[10,13,2,3,2],[8,16,2,3,2]],threshold:-.012858809903264,right_val:.525137186050415,left_val:.1938841938972473},{features:[[7,8,3,3,-1],[8,8,1,3,3]],threshold:-.0006227080011740327,right_val:.419786810874939,left_val:.5686538219451904},{features:[[12,0,5,4,-1],[12,2,5,2,2]],threshold:-.0005265168147161603,right_val:.5429695844650269,left_val:.4224168956279755},{features:[[0,2,20,2,-1],[0,2,10,1,2],[10,3,10,1,2]],threshold:.0110750999301672,right_val:.2514517903327942,left_val:.5113775134086609},{features:[[1,0,18,4,-1],[7,0,6,4,3]],threshold:-.0367282517254353,right_val:.4849618971347809,left_val:.7194662094116211},{features:[[4,3,6,1,-1],[6,3,2,1,3]],threshold:-.00028207109426148236,right_val:.539444625377655,left_val:.3840261995792389},{features:[[4,18,13,2,-1],[4,19,13,1,2]],threshold:-.0027489690110087395,right_val:.4569182097911835,left_val:.593708872795105},{features:[[2,10,3,6,-1],[2,12,3,2,3]],threshold:.0100475195795298,right_val:.2802298069000244,left_val:.5138576030731201},{features:[[14,12,6,8,-1],[17,12,3,4,2],[14,16,3,4,2]],threshold:-.008149784058332443,right_val:.4636121094226837,left_val:.6090037226676941},{features:[[4,13,10,6,-1],[4,13,5,3,2],[9,16,5,3,2]],threshold:-.006883388850837946,right_val:.5254660248756409,left_val:.3458611071109772},{features:[[14,12,1,2,-1],[14,13,1,1,2]],threshold:-140393603942357e-19,right_val:.4082083106040955,left_val:.5693104267120361},{features:[[8,13,4,3,-1],[8,14,4,1,3]],threshold:.001549841952510178,right_val:.5806517004966736,left_val:.4350537061691284},{features:[[14,12,2,2,-1],[14,13,2,1,2]],threshold:-.006784149911254644,right_val:.5182775259017944,left_val:.1468873023986816},{features:[[4,12,2,2,-1],[4,13,2,1,2]],threshold:.00021705629478674382,right_val:.345617413520813,left_val:.5293524265289307},{features:[[8,12,9,2,-1],[8,13,9,1,2]],threshold:.00031198898795992136,right_val:.5942413806915283,left_val:.4652450978755951},{features:[[9,14,2,3,-1],[9,15,2,1,3]],threshold:.005450753029435873,right_val:.7024846076965332,left_val:.4653508961200714},{features:[[11,10,3,6,-1],[11,13,3,3,2]],threshold:-.00025818689027801156,right_val:.3768967092037201,left_val:.5497295260429382},{features:[[5,6,9,12,-1],[5,12,9,6,2]],threshold:-.0174425393342972,right_val:.5457497835159302,left_val:.3919087946414948},{features:[[11,10,3,6,-1],[11,13,3,3,2]],threshold:-.045343529433012,right_val:.5154908895492554,left_val:.1631357073783875},{features:[[6,10,3,6,-1],[6,13,3,3,2]],threshold:.0019190689781680703,right_val:.2791895866394043,left_val:.514589786529541},{features:[[5,4,11,3,-1],[5,5,11,1,3]],threshold:-.006017786916345358,right_val:.4756332933902741,left_val:.6517636179924011},{features:[[7,1,5,10,-1],[7,6,5,5,2]],threshold:-.004072073847055435,right_val:.4092685878276825,left_val:.5514652729034424},{features:[[2,8,18,2,-1],[2,9,18,1,2]],threshold:.00039855059003457427,right_val:.5285550951957703,left_val:.316524088382721},{features:[[7,17,5,3,-1],[7,18,5,1,3]],threshold:-.0065418570302426815,right_val:.4652808904647827,left_val:.6853377819061279},{features:[[5,9,12,1,-1],[9,9,4,1,3]],threshold:.003484508953988552,right_val:.4502759873867035,left_val:.5484588146209717},{features:[[0,14,6,6,-1],[0,14,3,3,2],[3,17,3,3,2]],threshold:-.0136967804282904,right_val:.4572555124759674,left_val:.6395779848098755},{features:[[5,9,12,1,-1],[9,9,4,1,3]],threshold:-.017347140237689,right_val:.5181614756584167,left_val:.2751072943210602},{features:[[3,9,12,1,-1],[7,9,4,1,3]],threshold:-.004088542889803648,right_val:.5194984078407288,left_val:.3325636088848114},{features:[[14,10,6,7,-1],[14,10,3,7,2]],threshold:-.009468790143728256,right_val:.485181987285614,left_val:.5942280888557434},{features:[[1,0,16,2,-1],[1,1,16,1,2]],threshold:.0017084840219467878,right_val:.5519806146621704,left_val:.4167110919952393},{features:[[10,9,10,9,-1],[10,12,10,3,3]],threshold:.009480909444391727,right_val:.4208514988422394,left_val:.5433894991874695},{features:[[0,1,10,2,-1],[5,1,5,2,2]],threshold:-.004738965071737766,right_val:.4560655057430267,left_val:.6407189965248108},{features:[[17,3,2,3,-1],[17,4,2,1,3]],threshold:.006576105020940304,right_val:.2258227020502091,left_val:.5214555263519287},{features:[[1,3,2,3,-1],[1,4,2,1,3]],threshold:-.0021690549328923225,right_val:.5156704783439636,left_val:.3151527941226959},{features:[[9,7,3,6,-1],[10,7,1,6,3]],threshold:.014660170301795,right_val:.668994128704071,left_val:.4870837032794952},{features:[[6,5,4,3,-1],[8,5,2,3,2]],threshold:.00017231999663636088,right_val:.5251078009605408,left_val:.3569748997688294},{features:[[7,5,6,6,-1],[9,5,2,6,3]],threshold:-.0218037609010935,right_val:.496632993221283,left_val:.8825920820236206},{features:[[3,4,12,12,-1],[3,4,6,6,2],[9,10,6,6,2]],threshold:-.0947361066937447,right_val:.5061113834381104,left_val:.1446162015199661},{features:[[9,2,6,15,-1],[11,2,2,15,3]],threshold:.0055825551971793175,right_val:.4238066077232361,left_val:.5396478772163391},{features:[[2,2,6,17,-1],[4,2,2,17,3]],threshold:.001951709040440619,right_val:.5497786998748779,left_val:.4170410931110382},{features:[[14,10,6,7,-1],[14,10,3,7,2]],threshold:.0121499001979828,right_val:.5664274096488953,left_val:.4698367118835449},{features:[[0,10,6,7,-1],[3,10,3,7,2]],threshold:-.007516962010413408,right_val:.4463135898113251,left_val:.6267772912979126},{features:[[9,2,6,15,-1],[11,2,2,15,3]],threshold:-.0716679096221924,right_val:.5221003293991089,left_val:.3097011148929596},{features:[[5,2,6,15,-1],[7,2,2,15,3]],threshold:-.0882924199104309,right_val:.5006365180015564,left_val:.0811238884925842},{features:[[17,9,3,6,-1],[17,11,3,2,3]],threshold:.0310630798339844,right_val:.1282255947589874,left_val:.5155503749847412},{features:[[6,7,6,6,-1],[8,7,2,6,3]],threshold:.0466218404471874,right_val:.736396074295044,left_val:.4699777960777283},{features:[[1,10,18,6,-1],[10,10,9,3,2],[1,13,9,3,2]],threshold:-.0121894897893071,right_val:.5518996715545654,left_val:.3920530080795288},{features:[[0,9,10,9,-1],[0,12,10,3,3]],threshold:.0130161102861166,right_val:.3685136139392853,left_val:.5260658264160156},{features:[[8,15,4,3,-1],[8,16,4,1,3]],threshold:-.003495289944112301,right_val:.4716280996799469,left_val:.6339294910430908},{features:[[5,12,3,4,-1],[5,14,3,2,2]],threshold:-4401503974804655e-20,right_val:.3776184916496277,left_val:.5333027243614197},{features:[[3,3,16,12,-1],[3,9,16,6,2]],threshold:-.1096649020910263,right_val:.5198346972465515,left_val:.1765342056751251},{features:[[1,1,12,12,-1],[1,1,6,6,2],[7,7,6,6,2]],threshold:-.0009027955820783973,right_val:.3838908076286316,left_val:.5324159860610962},{features:[[10,4,2,4,-1],[11,4,1,2,2],[10,6,1,2,2]],threshold:.0007112664170563221,right_val:.5755224227905273,left_val:.4647929966449738},{features:[[0,9,10,2,-1],[0,9,5,1,2],[5,10,5,1,2]],threshold:-.003125027986243367,right_val:.5166770815849304,left_val:.323670893907547},{features:[[9,11,3,3,-1],[9,12,3,1,3]],threshold:.002414467977359891,right_val:.6459717750549316,left_val:.4787439107894898},{features:[[3,12,9,2,-1],[3,13,9,1,2]],threshold:.00044391240226104856,right_val:.6010255813598633,left_val:.4409308135509491},{features:[[9,9,2,2,-1],[9,10,2,1,2]],threshold:-.0002261118934256956,right_val:.5493255853652954,left_val:.4038113951683044}],threshold:50.16973114013672},{simpleClassifiers:[{features:[[3,4,13,6,-1],[3,6,13,2,3]],threshold:-.0469012893736362,right_val:.3743801116943359,left_val:.660017192363739},{features:[[9,7,6,4,-1],[12,7,3,2,2],[9,9,3,2,2]],threshold:-.001456834957934916,right_val:.3437797129154205,left_val:.578399121761322},{features:[[1,0,6,8,-1],[4,0,3,8,2]],threshold:.005559836979955435,right_val:.5908216238021851,left_val:.3622266948223114},{features:[[9,5,2,12,-1],[9,11,2,6,2]],threshold:.0007317048730328679,right_val:.2873558104038239,left_val:.550041913986206},{features:[[4,4,3,10,-1],[4,9,3,5,2]],threshold:.001331800944171846,right_val:.5431019067764282,left_val:.267316997051239},{features:[[6,17,8,3,-1],[6,18,8,1,3]],threshold:.00024347059661522508,right_val:.574138879776001,left_val:.3855027854442596},{features:[[0,5,10,6,-1],[0,7,10,2,3]],threshold:-.0030512469820678234,right_val:.3462845087051392,left_val:.5503209829330444},{features:[[13,2,3,2,-1],[13,3,3,1,2]],threshold:-.0006865719915367663,right_val:.5429509282112122,left_val:.3291221857070923},{features:[[7,5,4,5,-1],[9,5,2,5,2]],threshold:.001466820016503334,right_val:.5351811051368713,left_val:.3588382005691528},{features:[[12,14,3,6,-1],[12,16,3,2,3]],threshold:.0003202187072020024,right_val:.5700234174728394,left_val:.429684191942215},{features:[[1,11,8,2,-1],[1,12,8,1,2]],threshold:.0007412218837998807,right_val:.3366870880126953,left_val:.5282164812088013},{features:[[7,13,6,3,-1],[7,14,6,1,3]],threshold:.0038330298848450184,right_val:.6257336139678955,left_val:.4559567868709564},{features:[[0,5,3,6,-1],[0,7,3,2,3]],threshold:-.0154564399272203,right_val:.512945294380188,left_val:.2350116968154907},{features:[[13,2,3,2,-1],[13,3,3,1,2]],threshold:.002679677912965417,right_val:.4155062139034271,left_val:.5329415202140808},{features:[[4,14,4,6,-1],[4,14,2,3,2],[6,17,2,3,2]],threshold:.0028296569362282753,right_val:.5804538130760193,left_val:.4273087978363037},{features:[[13,2,3,2,-1],[13,3,3,1,2]],threshold:-.0039444249123334885,right_val:.5202686190605164,left_val:.2912611961364746},{features:[[8,2,4,12,-1],[8,6,4,4,3]],threshold:.002717955969274044,right_val:.3585677146911621,left_val:.5307688117027283},{features:[[14,0,6,8,-1],[17,0,3,4,2],[14,4,3,4,2]],threshold:.005907762795686722,right_val:.5941585898399353,left_val:.470377504825592},{features:[[7,17,3,2,-1],[8,17,1,2,3]],threshold:-.004224034957587719,right_val:.5088796019554138,left_val:.2141567021608353},{features:[[8,12,4,2,-1],[8,13,4,1,2]],threshold:.0040725888684391975,right_val:.6841061115264893,left_val:.4766413867473602},{features:[[6,0,8,12,-1],[6,0,4,6,2],[10,6,4,6,2]],threshold:.0101495301350951,right_val:.3748497068881989,left_val:.5360798835754395},{features:[[14,0,2,10,-1],[15,0,1,5,2],[14,5,1,5,2]],threshold:-.00018864999583456665,right_val:.3853805065155029,left_val:.5720130205154419},{features:[[5,3,8,6,-1],[5,3,4,3,2],[9,6,4,3,2]],threshold:-.0048864358104765415,right_val:.5340958833694458,left_val:.3693122863769531},{features:[[14,0,6,10,-1],[17,0,3,5,2],[14,5,3,5,2]],threshold:.0261584799736738,right_val:.6059989929199219,left_val:.4962374866008759},{features:[[9,14,1,2,-1],[9,15,1,1,2]],threshold:.0004856075975112617,right_val:.6012468934059143,left_val:.4438945949077606},{features:[[15,10,4,3,-1],[15,11,4,1,3]],threshold:.0112687097862363,right_val:.1840388029813767,left_val:.5244250297546387},{features:[[8,14,2,3,-1],[8,15,2,1,3]],threshold:-.0028114619199186563,right_val:.4409897029399872,left_val:.6060283780097961},{features:[[3,13,14,4,-1],[10,13,7,2,2],[3,15,7,2,2]],threshold:-.005611272994428873,right_val:.5589237213134766,left_val:.3891170918941498},{features:[[1,10,4,3,-1],[1,11,4,1,3]],threshold:.008568009361624718,right_val:.2062619030475617,left_val:.5069345831871033},{features:[[9,11,6,1,-1],[11,11,2,1,3]],threshold:-.00038172779022715986,right_val:.41926109790802,left_val:.5882201790809631},{features:[[5,11,6,1,-1],[7,11,2,1,3]],threshold:-.00017680290329735726,right_val:.400336891412735,left_val:.5533605813980103},{features:[[3,5,16,15,-1],[3,10,16,5,3]],threshold:.006511253770440817,right_val:.5444191098213196,left_val:.3310146927833557},{features:[[6,12,4,2,-1],[8,12,2,2,2]],threshold:-6594868318643421e-20,right_val:.3944905996322632,left_val:.5433831810951233},{features:[[4,4,12,10,-1],[10,4,6,5,2],[4,9,6,5,2]],threshold:.006993905175477266,right_val:.4192714095115662,left_val:.5600358247756958},{features:[[8,6,3,4,-1],[9,6,1,4,3]],threshold:-.0046744439750909805,right_val:.4604960978031158,left_val:.6685466766357422},{features:[[8,12,4,8,-1],[10,12,2,4,2],[8,16,2,4,2]],threshold:.0115898502990603,right_val:.2926830053329468,left_val:.5357121229171753},{features:[[8,14,4,3,-1],[8,15,4,1,3]],threshold:.013007840141654,right_val:.730746328830719,left_val:.4679817855358124},{features:[[12,2,3,2,-1],[13,2,1,2,3]],threshold:-.0011008579749614,right_val:.5415065288543701,left_val:.3937501013278961},{features:[[8,15,3,2,-1],[8,16,3,1,2]],threshold:.0006047264905646443,right_val:.5604041218757629,left_val:.4242376089096069},{features:[[6,0,9,14,-1],[9,0,3,14,3]],threshold:-.0144948400557041,right_val:.5293182730674744,left_val:.3631210029125214},{features:[[9,6,2,3,-1],[10,6,1,3,2]],threshold:-.005305694881826639,right_val:.4621821045875549,left_val:.686045229434967},{features:[[10,8,2,3,-1],[10,9,2,1,3]],threshold:-.00081829127157107,right_val:.542043924331665,left_val:.3944096863269806},{features:[[0,9,4,6,-1],[0,11,4,2,3]],threshold:-.0190775208175182,right_val:.5037891864776611,left_val:.1962621957063675},{features:[[6,0,8,2,-1],[6,1,8,1,2]],threshold:.00035549470339901745,right_val:.5613973140716553,left_val:.4086259007453919},{features:[[6,14,7,3,-1],[6,15,7,1,3]],threshold:.0019679730758070946,right_val:.5926123261451721,left_val:.448912113904953},{features:[[8,10,8,9,-1],[8,13,8,3,3]],threshold:.006918914150446653,right_val:.3728385865688324,left_val:.5335925817489624},{features:[[5,2,3,2,-1],[6,2,1,2,3]],threshold:.002987277926877141,right_val:.2975643873214722,left_val:.5111321210861206},{features:[[14,1,6,8,-1],[17,1,3,4,2],[14,5,3,4,2]],threshold:-.006226461846381426,right_val:.4824537932872772,left_val:.5541489720344543},{features:[[0,1,6,8,-1],[0,1,3,4,2],[3,5,3,4,2]],threshold:.013353300280869,right_val:.6414797902107239,left_val:.4586423933506012},{features:[[1,2,18,6,-1],[10,2,9,3,2],[1,5,9,3,2]],threshold:.0335052385926247,right_val:.3429994881153107,left_val:.5392425060272217},{features:[[9,3,2,1,-1],[10,3,1,1,2]],threshold:-.0025294460356235504,right_val:.5013315081596375,left_val:.1703713983297348},{features:[[13,2,4,6,-1],[15,2,2,3,2],[13,5,2,3,2]],threshold:-.001280162949115038,right_val:.4697405099868774,left_val:.5305461883544922},{features:[[5,4,3,3,-1],[5,5,3,1,3]],threshold:.007068738806992769,right_val:.643650472164154,left_val:.4615545868873596},{features:[[13,5,1,3,-1],[13,6,1,1,3]],threshold:.0009688049904070795,right_val:.6043894290924072,left_val:.4833599030971527},{features:[[2,16,5,3,-1],[2,17,5,1,3]],threshold:.003964765928685665,right_val:.323181688785553,left_val:.5187637209892273},{features:[[13,2,4,6,-1],[15,2,2,3,2],[13,5,2,3,2]],threshold:-.022057730704546,right_val:.520098090171814,left_val:.4079256951808929},{features:[[3,2,4,6,-1],[3,2,2,3,2],[5,5,2,3,2]],threshold:-.0006690631271339953,right_val:.3815600872039795,left_val:.533160924911499},{features:[[13,5,1,2,-1],[13,6,1,1,2]],threshold:-.0006700932863168418,right_val:.4688901901245117,left_val:.5655422210693359},{features:[[5,5,2,2,-1],[5,6,2,1,2]],threshold:.000742845528293401,right_val:.6287400126457214,left_val:.4534381031990051},{features:[[13,9,2,2,-1],[13,9,1,2,2]],threshold:.0022227810695767403,right_val:.3303655982017517,left_val:.5350633263587952},{features:[[5,9,2,2,-1],[6,9,1,2,2]],threshold:-.005413052160292864,right_val:.500543475151062,left_val:.1113687008619309},{features:[[13,17,3,2,-1],[13,18,3,1,2]],threshold:-14520040167553816e-21,right_val:.4325133860111237,left_val:.5628737807273865},{features:[[6,16,4,4,-1],[6,16,2,2,2],[8,18,2,2,2]],threshold:.00023369169502984732,right_val:.5447791218757629,left_val:.4165835082530975},{features:[[9,16,2,3,-1],[9,17,2,1,3]],threshold:.004289454780519009,right_val:.6778649091720581,left_val:.4860391020774841},{features:[[0,13,9,6,-1],[0,15,9,2,3]],threshold:.0059103150852024555,right_val:.3612113893032074,left_val:.52623051404953},{features:[[9,14,2,6,-1],[9,17,2,3,2]],threshold:.0129005396738648,right_val:.32502880692482,left_val:.5319377183914185},{features:[[9,15,2,3,-1],[9,16,2,1,3]],threshold:.004698297940194607,right_val:.6665925979614258,left_val:.461824506521225},{features:[[1,10,18,6,-1],[1,12,18,2,3]],threshold:.0104398597031832,right_val:.3883604109287262,left_val:.550567090511322},{features:[[8,11,4,2,-1],[8,12,4,1,2]],threshold:.0030443191062659025,right_val:.7301844954490662,left_val:.4697853028774262},{features:[[7,9,6,2,-1],[7,10,6,1,2]],threshold:-.0006159375188872218,right_val:.5464984178543091,left_val:.3830839097499847},{features:[[8,8,2,3,-1],[8,9,2,1,3]],threshold:-.0034247159492224455,right_val:.5089530944824219,left_val:.256630003452301},{features:[[17,5,3,4,-1],[18,5,1,4,3]],threshold:-.009353856556117535,right_val:.49407958984375,left_val:.6469966173171997},{features:[[1,19,18,1,-1],[7,19,6,1,3]],threshold:.0523389987647533,right_val:.787877082824707,left_val:.4745982885360718},{features:[[9,0,3,2,-1],[10,0,1,2,3]],threshold:.0035765620414167643,right_val:.2748498022556305,left_val:.5306664705276489},{features:[[1,8,1,6,-1],[1,10,1,2,3]],threshold:.0007155531784519553,right_val:.4041908979415894,left_val:.541312575340271},{features:[[12,17,8,3,-1],[12,17,4,3,2]],threshold:-.0105166798457503,right_val:.4815283119678497,left_val:.6158512234687805},{features:[[0,5,3,4,-1],[1,5,1,4,3]],threshold:.007734792772680521,right_val:.7028980851173401,left_val:.4695805907249451},{features:[[9,7,2,3,-1],[9,8,2,1,3]],threshold:-.004322677850723267,right_val:.5304684042930603,left_val:.2849566042423248},{features:[[7,11,2,2,-1],[7,11,1,1,2],[8,12,1,1,2]],threshold:-.0025534399319440126,right_val:.4688892066478729,left_val:.7056984901428223},{features:[[11,3,2,5,-1],[11,3,1,5,2]],threshold:.00010268510231981054,right_val:.5573464035987854,left_val:.3902932107448578},{features:[[7,3,2,5,-1],[8,3,1,5,2]],threshold:7139518857002258e-21,right_val:.526398777961731,left_val:.368423193693161},{features:[[15,13,2,3,-1],[15,14,2,1,3]],threshold:-.0016711989883333445,right_val:.5387271046638489,left_val:.3849175870418549},{features:[[5,6,2,3,-1],[5,7,2,1,3]],threshold:.004926044959574938,right_val:.7447251081466675,left_val:.4729771912097931},{features:[[4,19,15,1,-1],[9,19,5,1,3]],threshold:.0043908702209591866,right_val:.5591921806335449,left_val:.4809181094169617},{features:[[1,19,15,1,-1],[6,19,5,1,3]],threshold:-.0177936293184757,right_val:.4676927030086517,left_val:.6903678178787231},{features:[[15,13,2,3,-1],[15,14,2,1,3]],threshold:.002046966925263405,right_val:.3308162093162537,left_val:.5370690226554871},{features:[[5,0,4,15,-1],[7,0,2,15,2]],threshold:.0298914890736341,right_val:.3309059143066406,left_val:.5139865279197693},{features:[[9,6,2,5,-1],[9,6,1,5,2]],threshold:.0015494900289922953,right_val:.6078342795372009,left_val:.466023713350296},{features:[[9,5,2,7,-1],[10,5,1,7,2]],threshold:.001495696953497827,right_val:.5863919854164124,left_val:.4404835999011993},{features:[[16,11,3,3,-1],[16,12,3,1,3]],threshold:.0009588592802174389,right_val:.4208523035049439,left_val:.5435971021652222},{features:[[1,11,3,3,-1],[1,12,3,1,3]],threshold:.0004964370164088905,right_val:.4000622034072876,left_val:.5370578169822693},{features:[[6,6,8,3,-1],[6,7,8,1,3]],threshold:-.00272808107547462,right_val:.4259642958641052,left_val:.5659412741661072},{features:[[0,15,6,2,-1],[0,16,6,1,2]],threshold:.0023026480339467525,right_val:.3350869119167328,left_val:.5161657929420471},{features:[[1,0,18,6,-1],[7,0,6,6,3]],threshold:.2515163123607636,right_val:.714730978012085,left_val:.4869661927223206},{features:[[6,0,3,4,-1],[7,0,1,4,3]],threshold:-.004632802214473486,right_val:.5083789825439453,left_val:.27274489402771},{features:[[14,10,4,10,-1],[16,10,2,5,2],[14,15,2,5,2]],threshold:-.0404344908893108,right_val:.5021767020225525,left_val:.6851438879966736},{features:[[3,2,3,2,-1],[4,2,1,2,3]],threshold:14972220014897175e-21,right_val:.5522555112838745,left_val:.428446501493454},{features:[[11,2,2,2,-1],[11,3,2,1,2]],threshold:-.00024050309730228037,right_val:.5390074849128723,left_val:.4226118922233582},{features:[[2,10,4,10,-1],[2,10,2,5,2],[4,15,2,5,2]],threshold:.0236578397452831,right_val:.7504366040229797,left_val:.4744631946086884},{features:[[0,13,20,6,-1],[10,13,10,3,2],[0,16,10,3,2]],threshold:-.00814491044729948,right_val:.5538362860679626,left_val:.424505889415741},{features:[[0,5,2,15,-1],[1,5,1,15,2]],threshold:-.003699213033542037,right_val:.4529713094234467,left_val:.5952357053756714},{features:[[1,7,18,4,-1],[10,7,9,2,2],[1,9,9,2,2]],threshold:-.0067718601785600185,right_val:.5473399758338928,left_val:.4137794077396393},{features:[[0,0,2,17,-1],[1,0,1,17,2]],threshold:.004266953095793724,right_val:.5797994136810303,left_val:.4484114944934845},{features:[[2,6,16,6,-1],[10,6,8,3,2],[2,9,8,3,2]],threshold:.0017791989957913756,right_val:.4432444870471954,left_val:.5624858736991882},{features:[[8,14,1,3,-1],[8,15,1,1,3]],threshold:.0016774770338088274,right_val:.63642418384552,left_val:.4637751877307892},{features:[[8,15,4,2,-1],[8,16,4,1,2]],threshold:.0011732629500329494,right_val:.5914415717124939,left_val:.4544503092765808},{features:[[5,2,8,2,-1],[5,2,4,1,2],[9,3,4,1,2]],threshold:.000869981711730361,right_val:.3885917961597443,left_val:.5334752798080444},{features:[[6,11,8,6,-1],[6,14,8,3,2]],threshold:.0007637834060005844,right_val:.374494194984436,left_val:.5398585200309753},{features:[[9,13,2,2,-1],[9,14,2,1,2]],threshold:.00015684569370932877,right_val:.5614616274833679,left_val:.4317873120307922},{features:[[18,4,2,6,-1],[18,6,2,2,3]],threshold:-.0215113703161478,right_val:.5185542702674866,left_val:.1785925030708313},{features:[[9,12,2,2,-1],[9,13,2,1,2]],threshold:.00013081369979772717,right_val:.5682849884033203,left_val:.4342499077320099},{features:[[18,4,2,6,-1],[18,6,2,2,3]],threshold:.021992040798068,right_val:.2379394024610519,left_val:.5161716938018799},{features:[[9,13,1,3,-1],[9,14,1,1,3]],threshold:-.0008013650076463819,right_val:.4466426968574524,left_val:.598676323890686},{features:[[18,4,2,6,-1],[18,6,2,2,3]],threshold:-.008273609913885593,right_val:.5251057147979736,left_val:.410821795463562},{features:[[0,4,2,6,-1],[0,6,2,2,3]],threshold:.0036831789184361696,right_val:.339751809835434,left_val:.5173814296722412},{features:[[9,12,3,3,-1],[9,13,3,1,3]],threshold:-.007952568121254444,right_val:.4845924079418182,left_val:.6888983249664307},{features:[[3,13,2,3,-1],[3,14,2,1,3]],threshold:.0015382299898192286,right_val:.3454113900661469,left_val:.5178567171096802},{features:[[13,13,4,3,-1],[13,14,4,1,3]],threshold:-.0140435304492712,right_val:.518866777420044,left_val:.1678421050310135},{features:[[5,4,3,3,-1],[5,5,3,1,3]],threshold:.0014315890148282051,right_val:.5655773878097534,left_val:.436825692653656},{features:[[5,2,10,6,-1],[5,4,10,2,3]],threshold:-.0340142287313938,right_val:.4959217011928558,left_val:.7802296280860901},{features:[[3,13,4,3,-1],[3,14,4,1,3]],threshold:-.0120272999629378,right_val:.503223180770874,left_val:.1585101038217545},{features:[[3,7,15,5,-1],[8,7,5,5,3]],threshold:.1331661939620972,right_val:.2755128145217896,left_val:.5163304805755615},{features:[[3,7,12,2,-1],[7,7,4,2,3]],threshold:-.0015221949433907866,right_val:.5214552283287048,left_val:.372831791639328},{features:[[10,3,3,9,-1],[11,3,1,9,3]],threshold:-.000939292716793716,right_val:.4511165022850037,left_val:.5838379263877869},{features:[[8,6,4,6,-1],[10,6,2,6,2]],threshold:.0277197398245335,right_val:.7331544756889343,left_val:.4728286862373352},{features:[[9,7,4,3,-1],[9,8,4,1,3]],threshold:.003103015013039112,right_val:.4101563096046448,left_val:.5302202105522156},{features:[[0,9,4,9,-1],[2,9,2,9,2]],threshold:.0778612196445465,right_val:.127296194434166,left_val:.4998334050178528},{features:[[9,13,3,5,-1],[10,13,1,5,3]],threshold:-.0158549398183823,right_val:.5165656208992004,left_val:.0508333593606949},{features:[[7,7,6,3,-1],[9,7,2,3,3]],threshold:-.00497253006324172,right_val:.4684231877326965,left_val:.6798133850097656},{features:[[9,7,3,5,-1],[10,7,1,5,3]],threshold:-.0009767650626599789,right_val:.4788931906223297,left_val:.6010771989822388},{features:[[5,7,8,2,-1],[9,7,4,2,2]],threshold:-.0024647710379213095,right_val:.5220503807067871,left_val:.3393397927284241},{features:[[5,9,12,2,-1],[9,9,4,2,3]],threshold:-.006793770007789135,right_val:.5239663124084473,left_val:.4365136921405792},{features:[[5,6,10,3,-1],[10,6,5,3,2]],threshold:.0326080210506916,right_val:.2425214946269989,left_val:.505272388458252},{features:[[10,12,3,1,-1],[11,12,1,1,3]],threshold:-.0005851442110724747,right_val:.4758574068546295,left_val:.5733973979949951},{features:[[0,1,11,15,-1],[0,6,11,5,3]],threshold:-.0296326000243425,right_val:.5263597965240479,left_val:.3892289102077484}],threshold:66.66912078857422},{simpleClassifiers:[{features:[[1,0,18,6,-1],[7,0,6,6,3]],threshold:.0465508513152599,right_val:.6240522861480713,left_val:.3276950120925903},{features:[[7,7,6,1,-1],[9,7,2,1,3]],threshold:.007953712716698647,right_val:.6942939162254333,left_val:.4256485104560852},{features:[[5,16,6,4,-1],[5,16,3,2,2],[8,18,3,2,2]],threshold:.0006822156137786806,right_val:.59007328748703,left_val:.3711487054824829},{features:[[6,5,9,8,-1],[6,9,9,4,2]],threshold:-.00019348249770700932,right_val:.53005450963974,left_val:.2041133940219879},{features:[[5,10,2,6,-1],[5,13,2,3,2]],threshold:-.0002671050897333771,right_val:.3103179037570953,left_val:.5416126251220703},{features:[[7,6,8,10,-1],[11,6,4,5,2],[7,11,4,5,2]],threshold:.0027818060480058193,right_val:.3467069864273071,left_val:.5277832746505737},{features:[[5,6,8,10,-1],[5,6,4,5,2],[9,11,4,5,2]],threshold:-.000467790785478428,right_val:.3294492065906525,left_val:.5308231115341187},{features:[[9,5,2,2,-1],[9,6,2,1,2]],threshold:-30335160772665404e-21,right_val:.3852097094058991,left_val:.577387273311615},{features:[[5,12,8,2,-1],[5,13,8,1,2]],threshold:.0007803800981491804,right_val:.6150057911872864,left_val:.4317438900470734},{features:[[10,2,8,2,-1],[10,3,8,1,2]],threshold:-.004255385138094425,right_val:.5324292778968811,left_val:.2933903932571411},{features:[[4,0,2,10,-1],[4,0,1,5,2],[5,5,1,5,2]],threshold:-.0002473561035003513,right_val:.3843030035495758,left_val:.5468844771385193},{features:[[9,10,2,2,-1],[9,11,2,1,2]],threshold:-.00014724259381182492,right_val:.5755587220191956,left_val:.4281542897224426},{features:[[2,8,15,3,-1],[2,9,15,1,3]],threshold:.0011864770203828812,right_val:.5471466183662415,left_val:.374730110168457},{features:[[8,13,4,3,-1],[8,14,4,1,3]],threshold:.0023936580400913954,right_val:.6111528873443604,left_val:.4537783861160278},{features:[[7,2,3,2,-1],[8,2,1,2,3]],threshold:-.0015390539774671197,right_val:.518953800201416,left_val:.2971341907978058},{features:[[7,13,6,3,-1],[7,14,6,1,3]],threshold:-.007196879014372826,right_val:.4726476967334747,left_val:.6699066758155823},{features:[[9,9,2,2,-1],[9,10,2,1,2]],threshold:-.0004149978922214359,right_val:.5260317921638489,left_val:.3384954035282135},{features:[[17,2,3,6,-1],[17,4,3,2,3]],threshold:.004435983020812273,right_val:.3920140862464905,left_val:.539912223815918},{features:[[1,5,3,4,-1],[2,5,1,4,3]],threshold:.0026606200262904167,right_val:.6119617819786072,left_val:.4482578039169312},{features:[[14,8,4,6,-1],[14,10,4,2,3]],threshold:-.0015287200221791863,right_val:.5340266227722168,left_val:.3711237907409668},{features:[[1,4,3,8,-1],[2,4,1,8,3]],threshold:-.0047397250309586525,right_val:.4455145001411438,left_val:.603108823299408},{features:[[8,13,4,6,-1],[8,16,4,3,2]],threshold:-.0148291299119592,right_val:.5341861844062805,left_val:.2838754057884216},{features:[[3,14,2,2,-1],[3,15,2,1,2]],threshold:.0009227555710822344,right_val:.3361653983592987,left_val:.5209547281265259},{features:[[14,8,4,6,-1],[14,10,4,2,3]],threshold:.0835298076272011,right_val:.0811644494533539,left_val:.5119969844818115},{features:[[2,8,4,6,-1],[2,10,4,2,3]],threshold:-.0007563314866274595,right_val:.5189831256866455,left_val:.331712007522583},{features:[[10,14,1,6,-1],[10,17,1,3,2]],threshold:.009840385988354683,right_val:.233495905995369,left_val:.524759829044342},{features:[[7,5,3,6,-1],[8,5,1,6,3]],threshold:-.0015953830443322659,right_val:.4295622110366821,left_val:.5750094056129456},{features:[[11,2,2,6,-1],[12,2,1,3,2],[11,5,1,3,2]],threshold:34766020689858124e-21,right_val:.5564029216766357,left_val:.4342445135116577},{features:[[6,6,6,5,-1],[8,6,2,5,3]],threshold:.0298629105091095,right_val:.6579188108444214,left_val:.4579147100448608},{features:[[17,1,3,6,-1],[17,3,3,2,3]],threshold:.0113255903124809,right_val:.3673888146877289,left_val:.5274311900138855},{features:[[8,7,3,5,-1],[9,7,1,5,3]],threshold:-.008782864548265934,right_val:.4642167091369629,left_val:.7100368738174438},{features:[[9,18,3,2,-1],[10,18,1,2,3]],threshold:.004363995976746082,right_val:.2705877125263214,left_val:.5279216170310974},{features:[[8,18,3,2,-1],[9,18,1,2,3]],threshold:.004180472809821367,right_val:.2449083030223846,left_val:.5072525143623352},{features:[[12,3,5,2,-1],[12,4,5,1,2]],threshold:-.0004566851130221039,right_val:.5548691153526306,left_val:.4283105134963989},{features:[[7,1,5,12,-1],[7,7,5,6,2]],threshold:-.0037140368949621916,right_val:.4103653132915497,left_val:.5519387722015381},{features:[[1,0,18,4,-1],[7,0,6,4,3]],threshold:-.025304289534688,right_val:.48698890209198,left_val:.6867002248764038},{features:[[4,2,2,2,-1],[4,3,2,1,2]],threshold:-.0003445408074185252,right_val:.528769314289093,left_val:.3728874027729034},{features:[[11,14,4,2,-1],[13,14,2,1,2],[11,15,2,1,2]],threshold:-.0008393523166887462,right_val:.4616062045097351,left_val:.6060152053833008},{features:[[0,2,3,6,-1],[0,4,3,2,3]],threshold:.0172800496220589,right_val:.1819823980331421,left_val:.5049635767936707},{features:[[9,7,2,3,-1],[9,8,2,1,3]],threshold:-.006359507795423269,right_val:.5232778787612915,left_val:.1631239950656891},{features:[[5,5,1,3,-1],[5,6,1,1,3]],threshold:.0010298109846189618,right_val:.6176549196243286,left_val:.446327805519104},{features:[[10,10,6,1,-1],[10,10,3,1,2]],threshold:.0010117109632119536,right_val:.4300698935985565,left_val:.5473384857177734},{features:[[4,10,6,1,-1],[7,10,3,1,2]],threshold:-.010308800265193,right_val:.5000867247581482,left_val:.1166985034942627},{features:[[9,17,3,3,-1],[9,18,3,1,3]],threshold:.005468201823532581,right_val:.6719213724136353,left_val:.4769287109375},{features:[[4,14,1,3,-1],[4,15,1,1,3]],threshold:-.0009169646073132753,right_val:.5178164839744568,left_val:.3471089899539948},{features:[[12,5,3,3,-1],[12,6,3,1,3]],threshold:.002392282010987401,right_val:.6216310858726501,left_val:.4785236120223999},{features:[[4,5,12,3,-1],[4,6,12,1,3]],threshold:-.007557381875813007,right_val:.4410085082054138,left_val:.5814796090126038},{features:[[9,8,2,3,-1],[9,9,2,1,3]],threshold:-.0007702403236180544,right_val:.546572208404541,left_val:.387800008058548},{features:[[4,9,3,3,-1],[5,9,1,3,3]],threshold:-.00871259905397892,right_val:.4995836019515991,left_val:.1660051047801971},{features:[[6,0,9,17,-1],[9,0,3,17,3]],threshold:-.0103063201531768,right_val:.5274233818054199,left_val:.4093391001224518},{features:[[9,12,1,3,-1],[9,13,1,1,3]],threshold:-.002094097901135683,right_val:.4572280049324036,left_val:.6206194758415222},{features:[[9,5,2,15,-1],[9,10,2,5,3]],threshold:.006809905171394348,right_val:.4155600070953369,left_val:.5567759275436401},{features:[[8,14,2,3,-1],[8,15,2,1,3]],threshold:-.0010746059706434608,right_val:.4353024959564209,left_val:.5638927817344666},{features:[[10,14,1,3,-1],[10,15,1,1,3]],threshold:.0021550289820879698,right_val:.6749758124351501,left_val:.4826265871524811},{features:[[7,1,6,5,-1],[9,1,2,5,3]],threshold:.0317423194646835,right_val:.188324898481369,left_val:.5048379898071289},{features:[[0,0,20,2,-1],[0,0,10,2,2]],threshold:-.0783827230334282,right_val:.5260158181190491,left_val:.2369548976421356},{features:[[2,13,5,3,-1],[2,14,5,1,3]],threshold:.005741511937230825,right_val:.2776469886302948,left_val:.5048828721046448},{features:[[9,11,2,3,-1],[9,12,2,1,3]],threshold:-.0029014600440859795,right_val:.4693317115306854,left_val:.6238604784011841},{features:[[2,5,9,15,-1],[2,10,9,5,3]],threshold:-.0026427931152284145,right_val:.5169777274131775,left_val:.3314141929149628},{features:[[5,0,12,10,-1],[11,0,6,5,2],[5,5,6,5,2]],threshold:-.1094966009259224,right_val:.5183441042900085,left_val:.2380045056343079},{features:[[5,1,2,3,-1],[6,1,1,3,2]],threshold:7407591328956187e-20,right_val:.5362150073051453,left_val:.406963586807251},{features:[[10,7,6,1,-1],[12,7,2,1,3]],threshold:-.0005059380200691521,right_val:.437459409236908,left_val:.5506706237792969},{features:[[3,1,2,10,-1],[3,1,1,5,2],[4,6,1,5,2]],threshold:-.0008213177789002657,right_val:.4209375977516174,left_val:.5525709986686707},{features:[[13,7,2,1,-1],[13,7,1,1,2]],threshold:-60276539443293586e-21,right_val:.4748266041278839,left_val:.5455474853515625},{features:[[4,13,4,6,-1],[4,15,4,2,3]],threshold:.006806514225900173,right_val:.3424577116966248,left_val:.5157995820045471},{features:[[13,7,2,1,-1],[13,7,1,1,2]],threshold:.0017202789895236492,right_val:.6331263780593872,left_val:.5013207793235779},{features:[[5,7,2,1,-1],[6,7,1,1,2]],threshold:-.0001301692973356694,right_val:.4226869940757752,left_val:.5539718270301819},{features:[[2,12,18,4,-1],[11,12,9,2,2],[2,14,9,2,2]],threshold:-.004801638890057802,right_val:.5430780053138733,left_val:.4425095021724701},{features:[[5,7,2,2,-1],[5,7,1,1,2],[6,8,1,1,2]],threshold:-.002539931097999215,right_val:.4697605073451996,left_val:.7145782113075256},{features:[[16,3,4,2,-1],[16,4,4,1,2]],threshold:-.0014278929447755218,right_val:.539960503578186,left_val:.4070445001125336},{features:[[0,2,2,18,-1],[0,2,1,9,2],[1,11,1,9,2]],threshold:-.0251425504684448,right_val:.4747352004051209,left_val:.7884690761566162},{features:[[1,2,18,4,-1],[10,2,9,2,2],[1,4,9,2,2]],threshold:-.0038899609353393316,right_val:.5577110052108765,left_val:.4296191930770874},{features:[[9,14,1,3,-1],[9,15,1,1,3]],threshold:.004394745919853449,right_val:.702394425868988,left_val:.4693162143230438},{features:[[2,12,18,4,-1],[11,12,9,2,2],[2,14,9,2,2]],threshold:.0246784202754498,right_val:.3812510073184967,left_val:.5242322087287903},{features:[[0,12,18,4,-1],[0,12,9,2,2],[9,14,9,2,2]],threshold:.0380476787686348,right_val:.1687828004360199,left_val:.5011739730834961},{features:[[11,4,5,3,-1],[11,5,5,1,3]],threshold:.007942486554384232,right_val:.6369568109512329,left_val:.4828582108020783},{features:[[6,4,7,3,-1],[6,5,7,1,3]],threshold:-.0015110049862414598,right_val:.4487667977809906,left_val:.5906485915184021},{features:[[13,17,3,3,-1],[13,18,3,1,3]],threshold:.0064201741479337215,right_val:.2990570068359375,left_val:.5241097807884216},{features:[[8,1,3,4,-1],[9,1,1,4,3]],threshold:-.0029802159406244755,right_val:.5078489780426025,left_val:.3041465878486633},{features:[[11,4,2,4,-1],[11,4,1,4,2]],threshold:-.0007458007894456387,right_val:.5256826281547546,left_val:.4128139019012451},{features:[[0,17,9,3,-1],[3,17,3,3,3]],threshold:-.0104709500446916,right_val:.4494296014308929,left_val:.5808395147323608},{features:[[11,0,2,8,-1],[12,0,1,4,2],[11,4,1,4,2]],threshold:.009336920455098152,right_val:.265894889831543,left_val:.524655282497406},{features:[[0,8,6,12,-1],[0,8,3,6,2],[3,14,3,6,2]],threshold:.0279369000345469,right_val:.7087256908416748,left_val:.4674955010414124},{features:[[10,7,4,12,-1],[10,13,4,6,2]],threshold:.007427767850458622,right_val:.3758518099784851,left_val:.5409486889839172},{features:[[5,3,8,14,-1],[5,10,8,7,2]],threshold:-.0235845092684031,right_val:.5238550901412964,left_val:.3758639991283417},{features:[[14,10,6,1,-1],[14,10,3,1,2]],threshold:.0011452640173956752,right_val:.5804247260093689,left_val:.4329578876495361},{features:[[0,4,10,4,-1],[0,6,10,2,2]],threshold:-.0004346866044215858,right_val:.3873069882392883,left_val:.5280618071556091},{features:[[10,0,5,8,-1],[10,4,5,4,2]],threshold:.0106485402211547,right_val:.5681251883506775,left_val:.4902113080024719},{features:[[8,1,4,8,-1],[8,1,2,4,2],[10,5,2,4,2]],threshold:-.0003941805043723434,right_val:.4318251013755798,left_val:.5570880174636841},{features:[[9,11,6,1,-1],[11,11,2,1,3]],threshold:-.00013270479394122958,right_val:.4343554973602295,left_val:.5658439993858337},{features:[[8,9,3,4,-1],[9,9,1,4,3]],threshold:-.002012551063671708,right_val:.4537523984909058,left_val:.6056739091873169},{features:[[18,4,2,6,-1],[18,6,2,2,3]],threshold:.0024854319635778666,right_val:.4138010144233704,left_val:.5390477180480957},{features:[[8,8,3,4,-1],[9,8,1,4,3]],threshold:.0018237880431115627,right_val:.5717188715934753,left_val:.4354828894138336},{features:[[7,1,13,3,-1],[7,2,13,1,3]],threshold:-.0166566595435143,right_val:.521612286567688,left_val:.3010913133621216},{features:[[7,13,6,1,-1],[9,13,2,1,3]],threshold:.0008034955826587975,right_val:.3818396925926209,left_val:.5300151109695435},{features:[[12,11,3,6,-1],[12,13,3,2,3]],threshold:.003417037893086672,right_val:.4241400063037872,left_val:.5328028798103333},{features:[[5,11,6,1,-1],[7,11,2,1,3]],threshold:-.00036222729249857366,right_val:.418697714805603,left_val:.5491728186607361},{features:[[1,4,18,10,-1],[10,4,9,5,2],[1,9,9,5,2]],threshold:-.1163002029061317,right_val:.522645115852356,left_val:.1440722048282623},{features:[[8,6,4,9,-1],[8,9,4,3,3]],threshold:-.0146950101479888,right_val:.4715717136859894,left_val:.7747725248336792},{features:[[8,6,4,3,-1],[8,7,4,1,3]],threshold:.0021972130052745342,right_val:.3315644860267639,left_val:.5355433821678162},{features:[[8,7,3,3,-1],[9,7,1,3,3]],threshold:-.00046965209185145795,right_val:.4458136856555939,left_val:.5767235159873962},{features:[[14,15,4,3,-1],[14,16,4,1,3]],threshold:.006514499895274639,right_val:.3647888898849487,left_val:.5215674042701721},{features:[[5,10,3,10,-1],[6,10,1,10,3]],threshold:.0213000606745481,right_val:.1567950993776321,left_val:.4994204938411713},{features:[[8,15,4,3,-1],[8,16,4,1,3]],threshold:.0031881409231573343,right_val:.6287270188331604,left_val:.4742200076580048},{features:[[0,8,1,6,-1],[0,10,1,2,3]],threshold:.0009001977741718292,right_val:.394375205039978,left_val:.5347954034805298},{features:[[10,15,1,3,-1],[10,16,1,1,3]],threshold:-.005177227780222893,right_val:.5013138055801392,left_val:.6727191805839539},{features:[[2,15,4,3,-1],[2,16,4,1,3]],threshold:-.004376464989036322,right_val:.5128793120384216,left_val:.3106675148010254},{features:[[18,3,2,8,-1],[19,3,1,4,2],[18,7,1,4,2]],threshold:.002629996044561267,right_val:.5755215883255005,left_val:.488631010055542},{features:[[0,3,2,8,-1],[0,3,1,4,2],[1,7,1,4,2]],threshold:-.002045868895947933,right_val:.4558076858520508,left_val:.6025794148445129},{features:[[3,7,14,10,-1],[10,7,7,5,2],[3,12,7,5,2]],threshold:.0694827064871788,right_val:.2185259014368057,left_val:.5240747928619385},{features:[[0,7,19,3,-1],[0,8,19,1,3]],threshold:.0240489393472672,right_val:.2090622037649155,left_val:.501186728477478},{features:[[12,6,3,3,-1],[12,7,3,1,3]],threshold:.003109534038230777,right_val:.7108548283576965,left_val:.4866712093353272},{features:[[0,6,1,3,-1],[0,7,1,1,3]],threshold:-.00125032605137676,right_val:.5156195163726807,left_val:.3407891094684601},{features:[[12,6,3,3,-1],[12,7,3,1,3]],threshold:-.0010281190043315291,right_val:.443943202495575,left_val:.557557225227356},{features:[[5,6,3,3,-1],[5,7,3,1,3]],threshold:-.008889362215995789,right_val:.4620442092418671,left_val:.6402000784873962},{features:[[8,2,4,2,-1],[8,3,4,1,2]],threshold:-.0006109480164013803,right_val:.5448899865150452,left_val:.3766441941261292},{features:[[6,3,4,12,-1],[8,3,2,12,2]],threshold:-.005768635775893927,right_val:.5133677124977112,left_val:.3318648934364319},{features:[[13,6,2,3,-1],[13,7,2,1,3]],threshold:.0018506490159779787,right_val:.6406934857368469,left_val:.4903570115566254},{features:[[0,10,20,4,-1],[0,12,20,2,2]],threshold:-.0997994691133499,right_val:.5015562176704407,left_val:.1536051034927368},{features:[[2,0,17,14,-1],[2,7,17,7,2]],threshold:-.3512834906578064,right_val:.5174378752708435,left_val:.0588231310248375},{features:[[0,0,6,10,-1],[0,0,3,5,2],[3,5,3,5,2]],threshold:-.0452445708215237,right_val:.4677872955799103,left_val:.6961488723754883},{features:[[14,6,6,4,-1],[14,6,3,4,2]],threshold:.0714815780520439,right_val:.1038092970848084,left_val:.5167986154556274},{features:[[0,6,6,4,-1],[3,6,3,4,2]],threshold:.0021895780228078365,right_val:.5532060861587524,left_val:.4273078143596649},{features:[[13,2,7,2,-1],[13,3,7,1,2]],threshold:-.0005924265133216977,right_val:.5276389122009277,left_val:.46389439702034},{features:[[0,2,7,2,-1],[0,3,7,1,2]],threshold:.0016788389766588807,right_val:.3932034969329834,left_val:.530164897441864},{features:[[6,11,14,2,-1],[13,11,7,1,2],[6,12,7,1,2]],threshold:-.0022163488902151585,right_val:.4757033884525299,left_val:.5630694031715393},{features:[[8,5,2,2,-1],[8,5,1,1,2],[9,6,1,1,2]],threshold:.00011568699846975505,right_val:.5535702705383301,left_val:.4307535886764526},{features:[[13,9,2,3,-1],[13,9,1,3,2]],threshold:-.007201728876680136,right_val:.5193064212799072,left_val:.144488200545311},{features:[[1,1,3,12,-1],[2,1,1,12,3]],threshold:.0008908127201721072,right_val:.5593621134757996,left_val:.4384432137012482},{features:[[17,4,1,3,-1],[17,5,1,1,3]],threshold:.00019605009583756328,right_val:.4705956876277924,left_val:.5340415835380554},{features:[[2,4,1,3,-1],[2,5,1,1,3]],threshold:.0005202214233577251,right_val:.3810079097747803,left_val:.5213856101036072},{features:[[14,5,1,3,-1],[14,6,1,1,3]],threshold:.0009458857239224017,right_val:.6130738854408264,left_val:.4769414961338043},{features:[[7,16,2,3,-1],[7,17,2,1,3]],threshold:916984718060121e-19,right_val:.5429363250732422,left_val:.4245009124279022},{features:[[8,13,4,6,-1],[10,13,2,3,2],[8,16,2,3,2]],threshold:.002183320000767708,right_val:.419107586145401,left_val:.5457730889320374},{features:[[5,5,1,3,-1],[5,6,1,1,3]],threshold:-.0008603967144154012,right_val:.4471659958362579,left_val:.5764588713645935},{features:[[16,0,4,20,-1],[16,0,2,20,2]],threshold:-.0132362395524979,right_val:.4695009887218475,left_val:.6372823119163513},{features:[[5,1,2,6,-1],[5,1,1,3,2],[6,4,1,3,2]],threshold:.0004337670106906444,right_val:.394582986831665,left_val:.5317873954772949}],threshold:67.69892120361328},{simpleClassifiers:[{features:[[5,4,10,4,-1],[5,6,10,2,2]],threshold:-.024847149848938,right_val:.3873311877250671,left_val:.6555516719818115},{features:[[15,2,4,12,-1],[15,2,2,12,2]],threshold:.006134861148893833,right_val:.5973997712135315,left_val:.374807208776474},{features:[[7,6,4,12,-1],[7,12,4,6,2]],threshold:.006449849810451269,right_val:.2548811137676239,left_val:.542549192905426},{features:[[14,5,1,8,-1],[14,9,1,4,2]],threshold:.0006349121103994548,right_val:.5387253761291504,left_val:.2462442070245743},{features:[[1,4,14,10,-1],[1,4,7,5,2],[8,9,7,5,2]],threshold:.0014023890253156424,right_val:.3528657853603363,left_val:.5594322085380554},{features:[[11,6,6,14,-1],[14,6,3,7,2],[11,13,3,7,2]],threshold:.0003004400059580803,right_val:.576593816280365,left_val:.3958503901958466},{features:[[3,6,6,14,-1],[3,6,3,7,2],[6,13,3,7,2]],threshold:.00010042409849120304,right_val:.5534998178482056,left_val:.3698996901512146},{features:[[4,9,15,2,-1],[9,9,5,2,3]],threshold:-.005084149073809385,right_val:.5547800064086914,left_val:.3711090981960297},{features:[[7,14,6,3,-1],[7,15,6,1,3]],threshold:-.0195372607558966,right_val:.4579297006130219,left_val:.7492755055427551},{features:[[6,3,14,4,-1],[13,3,7,2,2],[6,5,7,2,2]],threshold:-7453274065483129e-21,right_val:.390406996011734,left_val:.5649787187576294},{features:[[1,9,15,2,-1],[6,9,5,2,3]],threshold:-.0036079459823668003,right_val:.5267801284790039,left_val:.3381088078022003},{features:[[6,11,8,9,-1],[6,14,8,3,3]],threshold:.002069750102236867,right_val:.3714388906955719,left_val:.5519291162490845},{features:[[7,4,3,8,-1],[8,4,1,8,3]],threshold:-.0004646384040825069,right_val:.4113566875457764,left_val:.5608214735984802},{features:[[14,6,2,6,-1],[14,9,2,3,2]],threshold:.0007549045258201659,right_val:.532935619354248,left_val:.3559206128120422},{features:[[5,7,6,4,-1],[5,7,3,2,2],[8,9,3,2,2]],threshold:-.0009832223877310753,right_val:.3763205111026764,left_val:.5414795875549316},{features:[[1,1,18,19,-1],[7,1,6,19,3]],threshold:-.0199406407773495,right_val:.4705299139022827,left_val:.634790301322937},{features:[[1,2,6,5,-1],[4,2,3,5,2]],threshold:.0037680300883948803,right_val:.5563716292381287,left_val:.3913489878177643},{features:[[12,17,6,2,-1],[12,18,6,1,2]],threshold:-.009452850557863712,right_val:.5215116739273071,left_val:.2554892897605896},{features:[[2,17,6,2,-1],[2,18,6,1,2]],threshold:.002956084907054901,right_val:.3063920140266419,left_val:.5174679160118103},{features:[[17,3,3,6,-1],[17,5,3,2,3]],threshold:.009107873775064945,right_val:.2885963022708893,left_val:.5388448238372803},{features:[[8,17,3,3,-1],[8,18,3,1,3]],threshold:.0018219229532405734,right_val:.58521968126297,left_val:.4336043000221252},{features:[[10,13,2,6,-1],[10,16,2,3,2]],threshold:.0146887395530939,right_val:.2870005965232849,left_val:.5287361741065979},{features:[[7,13,6,3,-1],[7,14,6,1,3]],threshold:-.0143879903480411,right_val:.4647370874881744,left_val:.701944887638092},{features:[[17,3,3,6,-1],[17,5,3,2,3]],threshold:-.0189866498112679,right_val:.5247011780738831,left_val:.2986552119255066},{features:[[8,13,2,3,-1],[8,14,2,1,3]],threshold:.0011527639580890536,right_val:.593166172504425,left_val:.4323473870754242},{features:[[9,3,6,2,-1],[11,3,2,2,3]],threshold:.0109336702153087,right_val:.3130319118499756,left_val:.5286864042282104},{features:[[0,3,3,6,-1],[0,5,3,2,3]],threshold:-.0149327302351594,right_val:.508407711982727,left_val:.2658419013023377},{features:[[8,5,4,6,-1],[8,7,4,2,3]],threshold:-.0002997053961735219,right_val:.374072402715683,left_val:.5463526844978333},{features:[[5,5,3,2,-1],[5,6,3,1,2]],threshold:.004167762119323015,right_val:.7435721755027771,left_val:.4703496992588043},{features:[[10,1,3,4,-1],[11,1,1,4,3]],threshold:-.00639053201302886,right_val:.5280538201332092,left_val:.2069258987903595},{features:[[1,2,5,9,-1],[1,5,5,3,3]],threshold:.004502960946410894,right_val:.348354309797287,left_val:.518264889717102},{features:[[13,6,2,3,-1],[13,7,2,1,3]],threshold:-.009204036556184292,right_val:.4932360053062439,left_val:.680377721786499},{features:[[0,6,14,3,-1],[7,6,7,3,2]],threshold:.0813272595405579,right_val:.2253051996231079,left_val:.5058398842811584},{features:[[2,11,18,8,-1],[2,15,18,4,2]],threshold:-.150792807340622,right_val:.5264679789543152,left_val:.2963424921035767},{features:[[5,6,2,3,-1],[5,7,2,1,3]],threshold:.0033179009333252907,right_val:.7072932124137878,left_val:.4655495882034302},{features:[[10,6,4,2,-1],[12,6,2,1,2],[10,7,2,1,2]],threshold:.0007740280125290155,right_val:.5668237805366516,left_val:.4780347943305969},{features:[[6,6,4,2,-1],[6,6,2,1,2],[8,7,2,1,2]],threshold:.0006819954141974449,right_val:.5722156763076782,left_val:.4286996126174927},{features:[[10,1,3,4,-1],[11,1,1,4,3]],threshold:.0053671570494771,right_val:.3114621937274933,left_val:.5299307107925415},{features:[[7,1,2,7,-1],[8,1,1,7,2]],threshold:9701866656541824e-20,right_val:.5269461870193481,left_val:.3674638867378235},{features:[[4,2,15,14,-1],[4,9,15,7,2]],threshold:-.1253408938646317,right_val:.5245791077613831,left_val:.2351492047309876},{features:[[8,7,3,2,-1],[9,7,1,2,3]],threshold:-.005251626949757338,right_val:.4693767130374908,left_val:.7115936875343323},{features:[[2,3,18,4,-1],[11,3,9,2,2],[2,5,9,2,2]],threshold:-.007834210991859436,right_val:.5409085750579834,left_val:.4462651014328003},{features:[[9,7,2,2,-1],[10,7,1,2,2]],threshold:-.001131006982177496,right_val:.4417662024497986,left_val:.5945618748664856},{features:[[13,9,2,3,-1],[13,9,1,3,2]],threshold:.0017601120052859187,right_val:.3973453044891357,left_val:.5353249907493591},{features:[[5,2,6,2,-1],[7,2,2,2,3]],threshold:-.00081581249833107,right_val:.5264726877212524,left_val:.3760268092155457},{features:[[9,5,2,7,-1],[9,5,1,7,2]],threshold:-.003868758911266923,right_val:.4749819934368134,left_val:.6309912800788879},{features:[[5,9,2,3,-1],[6,9,1,3,2]],threshold:.0015207129763439298,right_val:.3361223936080933,left_val:.5230181813240051},{features:[[6,0,14,18,-1],[6,9,14,9,2]],threshold:.545867383480072,right_val:.1172635033726692,left_val:.5167139768600464},{features:[[2,16,6,3,-1],[2,17,6,1,3]],threshold:.0156501904129982,right_val:.1393294930458069,left_val:.4979439079761505},{features:[[9,7,3,6,-1],[10,7,1,6,3]],threshold:-.0117318602278829,right_val:.4921196103096008,left_val:.7129650712013245},{features:[[7,8,4,3,-1],[7,9,4,1,3]],threshold:-.006176512222737074,right_val:.5049701929092407,left_val:.2288102954626083},{features:[[7,12,6,3,-1],[7,13,6,1,3]],threshold:.0022457661107182503,right_val:.6048725843429565,left_val:.4632433950901032},{features:[[9,12,2,3,-1],[9,13,2,1,3]],threshold:-.005191586911678314,right_val:.4602192938327789,left_val:.6467421054840088},{features:[[7,12,6,2,-1],[9,12,2,2,3]],threshold:-.0238278806209564,right_val:.5226079225540161,left_val:.1482000946998596},{features:[[5,11,4,6,-1],[5,14,4,3,2]],threshold:.0010284580057486892,right_val:.3375957012176514,left_val:.5135489106178284},{features:[[11,12,7,2,-1],[11,13,7,1,2]],threshold:-.0100788502022624,right_val:.5303567051887512,left_val:.2740561068058014},{features:[[6,10,8,6,-1],[6,10,4,3,2],[10,13,4,3,2]],threshold:.002616893034428358,right_val:.3972454071044922,left_val:.533267080783844},{features:[[11,10,3,4,-1],[11,12,3,2,2]],threshold:.000543853675480932,right_val:.4063411951065064,left_val:.5365604162216187},{features:[[9,16,2,3,-1],[9,17,2,1,3]],threshold:.005351051222532988,right_val:.6889045834541321,left_val:.4653759002685547},{features:[[13,3,1,9,-1],[13,6,1,3,3]],threshold:-.0015274790348485112,right_val:.3624723851680756,left_val:.5449501276016235},{features:[[1,13,14,6,-1],[1,15,14,2,3]],threshold:-.0806244164705276,right_val:.5000287294387817,left_val:.1656087040901184},{features:[[13,6,1,6,-1],[13,9,1,3,2]],threshold:.0221920292824507,right_val:.2002808004617691,left_val:.5132731199264526},{features:[[0,4,3,8,-1],[1,4,1,8,3]],threshold:.007310063112527132,right_val:.6366536021232605,left_val:.4617947936058044},{features:[[18,0,2,18,-1],[18,0,1,18,2]],threshold:-.006406307220458984,right_val:.4867860972881317,left_val:.5916250944137573},{features:[[2,3,6,2,-1],[2,4,6,1,2]],threshold:-.0007641504053026438,right_val:.5315797924995422,left_val:.388840913772583},{features:[[9,0,8,6,-1],[9,2,8,2,3]],threshold:.0007673448999412358,right_val:.5605279803276062,left_val:.4159064888954163},{features:[[6,6,1,6,-1],[6,9,1,3,2]],threshold:.0006147450185380876,right_val:.5120148062705994,left_val:.3089022040367127},{features:[[14,8,6,3,-1],[14,9,6,1,3]],threshold:-.005010527092963457,right_val:.5207306146621704,left_val:.3972199857234955},{features:[[0,0,2,18,-1],[1,0,1,18,2]],threshold:-.008690913207828999,right_val:.4608575999736786,left_val:.6257408261299133},{features:[[1,18,18,2,-1],[10,18,9,1,2],[1,19,9,1,2]],threshold:-.016391459852457,right_val:.5242266058921814,left_val:.2085209935903549},{features:[[3,15,2,2,-1],[3,16,2,1,2]],threshold:.00040973909199237823,right_val:.3780320882797241,left_val:.5222427248954773},{features:[[8,14,5,3,-1],[8,15,5,1,3]],threshold:-.002524228999391198,right_val:.4611890017986298,left_val:.5803927183151245},{features:[[8,14,2,3,-1],[8,15,2,1,3]],threshold:.0005094531225040555,right_val:.5846015810966492,left_val:.4401271939277649},{features:[[12,3,3,3,-1],[13,3,1,3,3]],threshold:.001965641975402832,right_val:.4184590876102448,left_val:.5322325229644775},{features:[[7,5,6,2,-1],[9,5,2,2,3]],threshold:.0005629889783449471,right_val:.5234565734863281,left_val:.3741844892501831},{features:[[15,5,5,2,-1],[15,6,5,1,2]],threshold:-.0006794679793529212,right_val:.5356478095054626,left_val:.4631041884422302},{features:[[0,5,5,2,-1],[0,6,5,1,2]],threshold:.007285634987056255,right_val:.2377564013004303,left_val:.5044670104980469},{features:[[17,14,1,6,-1],[17,17,1,3,2]],threshold:-.0174594894051552,right_val:.5050435066223145,left_val:.7289121150970459},{features:[[2,9,9,3,-1],[5,9,3,3,3]],threshold:-.0254217498004436,right_val:.4678100049495697,left_val:.6667134761810303},{features:[[12,3,3,3,-1],[13,3,1,3,3]],threshold:-.0015647639520466328,right_val:.532362699508667,left_val:.4391759037971497},{features:[[0,0,4,18,-1],[2,0,2,18,2]],threshold:.0114443600177765,right_val:.5680012106895447,left_val:.4346440136432648},{features:[[17,6,1,3,-1],[17,7,1,1,3]],threshold:-.0006735255010426044,right_val:.5296812057495117,left_val:.44771409034729},{features:[[2,14,1,6,-1],[2,17,1,3,2]],threshold:.009319420903921127,right_val:.7462607026100159,left_val:.4740200042724609},{features:[[19,8,1,2,-1],[19,9,1,1,2]],threshold:.00013328490604180843,right_val:.475213497877121,left_val:.536506175994873},{features:[[5,3,3,3,-1],[6,3,1,3,3]],threshold:-.007881579920649529,right_val:.5015255212783813,left_val:.1752219051122665},{features:[[9,16,2,3,-1],[9,17,2,1,3]],threshold:-.005798568017780781,right_val:.4896200895309448,left_val:.7271236777305603},{features:[[2,6,1,3,-1],[2,7,1,1,3]],threshold:-.0003892249951604754,right_val:.5344941020011902,left_val:.4003908932209015},{features:[[12,4,8,2,-1],[16,4,4,1,2],[12,5,4,1,2]],threshold:-.0019288610201328993,right_val:.4803955852985382,left_val:.5605612993240356},{features:[[0,4,8,2,-1],[0,4,4,1,2],[4,5,4,1,2]],threshold:.008421415463089943,right_val:.7623608708381653,left_val:.4753246903419495},{features:[[2,16,18,4,-1],[2,18,18,2,2]],threshold:.008165587671101093,right_val:.419164389371872,left_val:.5393261909484863},{features:[[7,15,2,4,-1],[7,17,2,2,2]],threshold:.00048280550981871784,right_val:.5399821996688843,left_val:.4240800142288208},{features:[[4,0,14,3,-1],[4,1,14,1,3]],threshold:-.002718663075938821,right_val:.5424923896789551,left_val:.4244599938392639},{features:[[0,0,4,20,-1],[2,0,2,20,2]],threshold:-.0125072300434113,right_val:.4550411105155945,left_val:.5895841717720032},{features:[[12,4,4,8,-1],[14,4,2,4,2],[12,8,2,4,2]],threshold:-.0242865197360516,right_val:.518917977809906,left_val:.2647134959697723},{features:[[6,7,2,2,-1],[6,7,1,1,2],[7,8,1,1,2]],threshold:-.0029676330741494894,right_val:.4749749898910523,left_val:.734768271446228},{features:[[10,6,2,3,-1],[10,7,2,1,3]],threshold:-.0125289997085929,right_val:.5177599787712097,left_val:.2756049931049347},{features:[[8,7,3,2,-1],[8,8,3,1,2]],threshold:-.0010104000102728605,right_val:.5144724249839783,left_val:.3510560989379883},{features:[[8,2,6,12,-1],[8,8,6,6,2]],threshold:-.0021348530426621437,right_val:.466731995344162,left_val:.5637925863265991},{features:[[4,0,11,12,-1],[4,4,11,4,3]],threshold:.0195642597973347,right_val:.6137639880180359,left_val:.4614573121070862},{features:[[14,9,6,11,-1],[16,9,2,11,3]],threshold:-.0971463471651077,right_val:.5193555951118469,left_val:.2998378872871399},{features:[[0,14,4,3,-1],[0,15,4,1,3]],threshold:.00450145686045289,right_val:.3045755922794342,left_val:.5077884793281555},{features:[[9,10,2,3,-1],[9,11,2,1,3]],threshold:.006370697170495987,right_val:.6887500882148743,left_val:.486101895570755},{features:[[5,11,3,2,-1],[5,12,3,1,2]],threshold:-.009072152897715569,right_val:.5017563104629517,left_val:.1673395931720734},{features:[[9,15,3,3,-1],[10,15,1,3,3]],threshold:-.005353720858693123,right_val:.524263322353363,left_val:.2692756950855255},{features:[[8,8,3,4,-1],[9,8,1,4,3]],threshold:-.0109328404068947,right_val:.4736028909683228,left_val:.7183864116668701},{features:[[9,15,3,3,-1],[10,15,1,3,3]],threshold:.008235607296228409,right_val:.2389862984418869,left_val:.5223966836929321},{features:[[7,7,3,2,-1],[8,7,1,2,3]],threshold:-.0010038160253316164,right_val:.4433943033218384,left_val:.5719355940818787},{features:[[2,10,16,4,-1],[10,10,8,2,2],[2,12,8,2,2]],threshold:.004085912834852934,right_val:.4148836135864258,left_val:.5472841858863831},{features:[[2,3,4,17,-1],[4,3,2,17,2]],threshold:.1548541933298111,right_val:.0610615983605385,left_val:.4973812103271484},{features:[[15,13,2,7,-1],[15,13,1,7,2]],threshold:.00020897459762636572,right_val:.542388916015625,left_val:.4709174036979675},{features:[[2,2,6,1,-1],[5,2,3,1,2]],threshold:.0003331699117552489,right_val:.5300992131233215,left_val:.4089626967906952},{features:[[5,2,12,4,-1],[9,2,4,4,3]],threshold:-.0108134001493454,right_val:.4957334101200104,left_val:.6104369759559631},{features:[[6,0,8,12,-1],[6,0,4,6,2],[10,6,4,6,2]],threshold:.0456560105085373,right_val:.2866660058498383,left_val:.5069689154624939},{features:[[13,7,2,2,-1],[14,7,1,1,2],[13,8,1,1,2]],threshold:.0012569549726322293,right_val:.631817102432251,left_val:.484691709280014},{features:[[0,12,20,6,-1],[0,14,20,2,3]],threshold:-.120150700211525,right_val:.4980959892272949,left_val:.0605261400341988},{features:[[14,7,2,3,-1],[14,7,1,3,2]],threshold:-.00010533799650147557,right_val:.4708042144775391,left_val:.5363109707832336},{features:[[0,8,9,12,-1],[3,8,3,12,3]],threshold:-.2070319056510925,right_val:.497909814119339,left_val:.059660330414772},{features:[[3,0,16,2,-1],[3,0,8,2,2]],threshold:.00012909180077258497,right_val:.5377997756004333,left_val:.4712977111339569},{features:[[6,15,3,3,-1],[6,16,3,1,3]],threshold:.000388185289921239,right_val:.5534191131591797,left_val:.4363538026809692},{features:[[8,15,6,3,-1],[8,16,6,1,3]],threshold:-.0029243610333651304,right_val:.4825215935707092,left_val:.5811185836791992},{features:[[0,10,1,6,-1],[0,12,1,2,3]],threshold:.0008388233254663646,right_val:.403813898563385,left_val:.5311700105667114},{features:[[10,9,4,3,-1],[10,10,4,1,3]],threshold:-.0019061550265178084,right_val:.526001513004303,left_val:.3770701885223389},{features:[[9,15,2,3,-1],[9,16,2,1,3]],threshold:.00895143486559391,right_val:.7682183980941772,left_val:.4766167998313904},{features:[[5,7,10,1,-1],[5,7,5,1,2]],threshold:.0130834598094225,right_val:.3062222003936768,left_val:.5264462828636169},{features:[[4,0,12,19,-1],[10,0,6,19,2]],threshold:-.2115933001041412,right_val:.4695810079574585,left_val:.6737198233604431},{features:[[0,6,20,6,-1],[10,6,10,3,2],[0,9,10,3,2]],threshold:.0031493250280618668,right_val:.4386953115463257,left_val:.5644835233688354},{features:[[3,6,2,2,-1],[3,6,1,1,2],[4,7,1,1,2]],threshold:.00039754100725986063,right_val:.5895630121231079,left_val:.4526061117649078},{features:[[15,6,2,2,-1],[16,6,1,1,2],[15,7,1,1,2]],threshold:-.0013814480043947697,right_val:.4942413866519928,left_val:.6070582270622253},{features:[[3,6,2,2,-1],[3,6,1,1,2],[4,7,1,1,2]],threshold:-.0005812218878418207,right_val:.4508252143859863,left_val:.5998213291168213},{features:[[14,4,1,12,-1],[14,10,1,6,2]],threshold:-.002390532987192273,right_val:.5223848223686218,left_val:.420558899641037},{features:[[2,5,16,10,-1],[2,5,8,5,2],[10,10,8,5,2]],threshold:.0272689294070005,right_val:.3563301861286163,left_val:.5206447243690491},{features:[[9,17,3,2,-1],[10,17,1,2,3]],threshold:-.0037658358924090862,right_val:.5218814015388489,left_val:.3144704103469849},{features:[[1,4,2,2,-1],[1,5,2,1,2]],threshold:-.0014903489500284195,right_val:.5124437212944031,left_val:.338019609451294},{features:[[5,0,15,5,-1],[10,0,5,5,3]],threshold:-.0174282304942608,right_val:.4919725954532623,left_val:.5829960703849792},{features:[[0,0,15,5,-1],[5,0,5,5,3]],threshold:-.0152780301868916,right_val:.4617887139320374,left_val:.6163144707679749},{features:[[11,2,2,17,-1],[11,2,1,17,2]],threshold:.0319956094026566,right_val:.171276405453682,left_val:.5166357159614563},{features:[[7,2,2,17,-1],[8,2,1,17,2]],threshold:-.003825671039521694,right_val:.5131387710571289,left_val:.3408012092113495},{features:[[15,11,2,9,-1],[15,11,1,9,2]],threshold:-.00851864367723465,right_val:.4997941851615906,left_val:.6105518937110901},{features:[[3,11,2,9,-1],[4,11,1,9,2]],threshold:.0009064162150025368,right_val:.5582311153411865,left_val:.4327270984649658},{features:[[5,16,14,4,-1],[5,16,7,4,2]],threshold:.0103448498994112,right_val:.5452420115470886,left_val:.4855653047561646}],threshold:69.22987365722656},{simpleClassifiers:[{features:[[1,4,18,1,-1],[7,4,6,1,3]],threshold:.007898182608187199,right_val:.5946462154388428,left_val:.333252489566803},{features:[[13,7,6,4,-1],[16,7,3,2,2],[13,9,3,2,2]],threshold:.0016170160379260778,right_val:.5577868819236755,left_val:.3490641117095947},{features:[[9,8,2,12,-1],[9,12,2,4,3]],threshold:-.0005544974119402468,right_val:.3291530013084412,left_val:.5542566180229187},{features:[[12,1,6,6,-1],[12,3,6,2,3]],threshold:.001542898011393845,right_val:.5545979142189026,left_val:.3612579107284546},{features:[[5,2,6,6,-1],[5,2,3,3,2],[8,5,3,3,2]],threshold:-.0010329450014978647,right_val:.5576140284538269,left_val:.3530139029026032},{features:[[9,16,6,4,-1],[12,16,3,2,2],[9,18,3,2,2]],threshold:.0007769815856590867,right_val:.5645321011543274,left_val:.3916778862476349},{features:[[1,2,18,3,-1],[7,2,6,3,3]],threshold:.143203005194664,right_val:.7023633122444153,left_val:.4667482078075409},{features:[[7,4,9,10,-1],[7,9,9,5,2]],threshold:-.007386649027466774,right_val:.5289257764816284,left_val:.3073684871196747},{features:[[5,9,4,4,-1],[7,9,2,4,2]],threshold:-.0006293674232438207,right_val:.4037049114704132,left_val:.562211811542511},{features:[[11,10,3,6,-1],[11,13,3,3,2]],threshold:.0007889352855272591,right_val:.3557874858379364,left_val:.5267661213874817},{features:[[7,11,5,3,-1],[7,12,5,1,3]],threshold:-.0122280502691865,right_val:.4625549912452698,left_val:.6668320894241333},{features:[[7,11,6,6,-1],[10,11,3,3,2],[7,14,3,3,2]],threshold:.0035420239437371492,right_val:.3869673013687134,left_val:.5521438121795654},{features:[[0,0,10,9,-1],[0,3,10,3,3]],threshold:-.0010585320414975286,right_val:.5320926904678345,left_val:.3628678023815155},{features:[[13,14,1,6,-1],[13,16,1,2,3]],threshold:14935660146875307e-21,right_val:.5363323092460632,left_val:.4632444977760315},{features:[[0,2,3,6,-1],[0,4,3,2,3]],threshold:.005253770854324102,right_val:.3265708982944489,left_val:.5132231712341309},{features:[[8,14,4,3,-1],[8,15,4,1,3]],threshold:-.008233802393078804,right_val:.4774140119552612,left_val:.6693689823150635},{features:[[6,14,1,6,-1],[6,16,1,2,3]],threshold:2186681012972258e-20,right_val:.5457931160926819,left_val:.405386209487915},{features:[[9,15,2,3,-1],[9,16,2,1,3]],threshold:-.0038150229956954718,right_val:.4793178141117096,left_val:.645499587059021},{features:[[6,4,3,3,-1],[7,4,1,3,3]],threshold:.0011105879675596952,right_val:.3529678881168366,left_val:.5270407199859619},{features:[[9,0,11,3,-1],[9,1,11,1,3]],threshold:-.005770768970251083,right_val:.5352957844734192,left_val:.3803547024726868},{features:[[0,6,20,3,-1],[0,7,20,1,3]],threshold:-.003015833906829357,right_val:.3887133002281189,left_val:.533940315246582},{features:[[10,1,1,2,-1],[10,2,1,1,2]],threshold:-.0008545368909835815,right_val:.5273603796958923,left_val:.3564616143703461},{features:[[9,6,2,6,-1],[10,6,1,6,2]],threshold:.0110505102202296,right_val:.6849737763404846,left_val:.4671907126903534},{features:[[5,8,12,1,-1],[9,8,4,1,3]],threshold:.0426058396697044,right_val:.0702200904488564,left_val:.51514732837677},{features:[[3,8,12,1,-1],[7,8,4,1,3]],threshold:-.0030781750101596117,right_val:.5152602195739746,left_val:.3041661083698273},{features:[[9,7,3,5,-1],[10,7,1,5,3]],threshold:-.005481572821736336,right_val:.4897229969501495,left_val:.6430295705795288},{features:[[3,9,6,2,-1],[6,9,3,2,2]],threshold:.003188186092302203,right_val:.3826209902763367,left_val:.5307493209838867},{features:[[12,9,3,3,-1],[12,10,3,1,3]],threshold:.00035947180003859103,right_val:.5421904921531677,left_val:.4650047123432159},{features:[[7,0,6,1,-1],[9,0,2,1,3]],threshold:-.004070503171533346,right_val:.5079116225242615,left_val:.2849679887294769},{features:[[12,9,3,3,-1],[12,10,3,1,3]],threshold:-.0145941702648997,right_val:.5128461718559265,left_val:.2971645891666412},{features:[[7,10,2,1,-1],[8,10,1,1,2]],threshold:-.00011947689927183092,right_val:.4343082010746002,left_val:.563109815120697},{features:[[6,4,9,13,-1],[9,4,3,13,3]],threshold:-.0006934464909136295,right_val:.5359959006309509,left_val:.4403578042984009},{features:[[6,8,4,2,-1],[6,9,4,1,2]],threshold:14834799912932795e-21,right_val:.5164697766304016,left_val:.3421008884906769},{features:[[16,2,4,6,-1],[16,2,2,6,2]],threshold:.009029698558151722,right_val:.6114075183868408,left_val:.4639343023300171},{features:[[0,17,6,3,-1],[0,18,6,1,3]],threshold:-.008064081892371178,right_val:.5075494050979614,left_val:.2820158898830414},{features:[[10,10,3,10,-1],[10,15,3,5,2]],threshold:.0260621197521687,right_val:.2688778042793274,left_val:.5208905935287476},{features:[[8,7,3,5,-1],[9,7,1,5,3]],threshold:.0173146594315767,right_val:.6738539934158325,left_val:.4663713872432709},{features:[[10,4,4,3,-1],[10,4,2,3,2]],threshold:.0226666405797005,right_val:.2212723940610886,left_val:.5209349989891052},{features:[[8,4,3,8,-1],[9,4,1,8,3]],threshold:-.002196592977270484,right_val:.4538190066814423,left_val:.6063101291656494},{features:[[6,6,9,13,-1],[9,6,3,13,3]],threshold:-.009528247639536858,right_val:.5247430801391602,left_val:.4635204970836639},{features:[[6,0,8,12,-1],[6,0,4,6,2],[10,6,4,6,2]],threshold:.00809436198323965,right_val:.3913882076740265,left_val:.5289440155029297},{features:[[14,2,6,8,-1],[16,2,2,8,3]],threshold:-.0728773325681686,right_val:.4990234971046448,left_val:.7752001881599426},{features:[[6,0,3,6,-1],[7,0,1,6,3]],threshold:-.006900952197611332,right_val:.5048090219497681,left_val:.2428039014339447},{features:[[14,2,6,8,-1],[16,2,2,8,3]],threshold:-.0113082397729158,right_val:.4842376112937927,left_val:.5734364986419678},{features:[[0,5,6,6,-1],[0,8,6,3,2]],threshold:.0596132017672062,right_val:.2524977028369904,left_val:.5029836297035217},{features:[[9,12,6,2,-1],[12,12,3,1,2],[9,13,3,1,2]],threshold:-.0028624620754271746,right_val:.4898459911346436,left_val:.6073045134544373},{features:[[8,17,3,2,-1],[9,17,1,2,3]],threshold:.00447814492508769,right_val:.2220316976308823,left_val:.5015289187431335},{features:[[11,6,2,2,-1],[12,6,1,1,2],[11,7,1,1,2]],threshold:-.001751324045471847,right_val:.4933868944644928,left_val:.6614428758621216},{features:[[1,9,18,2,-1],[7,9,6,2,3]],threshold:.0401634201407433,right_val:.3741044998168945,left_val:.5180878043174744},{features:[[11,6,2,2,-1],[12,6,1,1,2],[11,7,1,1,2]],threshold:.0003476894926279783,right_val:.5818032026290894,left_val:.4720416963100433},{features:[[3,4,12,8,-1],[7,4,4,8,3]],threshold:.00265516503714025,right_val:.5221335887908936,left_val:.3805010914802551},{features:[[13,11,5,3,-1],[13,12,5,1,3]],threshold:-.008770627900958061,right_val:.5231295228004456,left_val:.294416606426239},{features:[[9,10,2,3,-1],[9,11,2,1,3]],threshold:-.005512209143489599,right_val:.4722816944122315,left_val:.7346177101135254},{features:[[14,7,2,3,-1],[14,7,1,3,2]],threshold:.0006867204210720956,right_val:.424241304397583,left_val:.5452876091003418},{features:[[5,4,1,3,-1],[5,5,1,1,3]],threshold:.0005601966986432672,right_val:.5601285099983215,left_val:.439886212348938},{features:[[13,4,2,3,-1],[13,5,2,1,3]],threshold:.0024143769405782223,right_val:.6136621832847595,left_val:.4741686880588532},{features:[[5,4,2,3,-1],[5,5,2,1,3]],threshold:-.0015680900542065501,right_val:.4516409933567047,left_val:.604455292224884},{features:[[9,8,2,3,-1],[9,9,2,1,3]],threshold:-.0036827491130679846,right_val:.5294982194900513,left_val:.2452459037303925},{features:[[8,9,2,2,-1],[8,10,2,1,2]],threshold:-.000294091907562688,right_val:.5251451134681702,left_val:.3732838034629822},{features:[[15,14,1,4,-1],[15,16,1,2,2]],threshold:.00042847759323194623,right_val:.4065535068511963,left_val:.5498809814453125},{features:[[3,12,2,2,-1],[3,13,2,1,2]],threshold:-.004881707020103931,right_val:.4999957084655762,left_val:.2139908969402313},{features:[[12,15,2,2,-1],[13,15,1,1,2],[12,16,1,1,2]],threshold:.00027272020815871656,right_val:.581342875957489,left_val:.465028703212738},{features:[[9,13,2,2,-1],[9,14,2,1,2]],threshold:.00020947199664078653,right_val:.5572792887687683,left_val:.4387486875057221},{features:[[4,11,14,9,-1],[4,14,14,3,3]],threshold:.0485011897981167,right_val:.3212889134883881,left_val:.5244972705841064},{features:[[7,13,4,3,-1],[7,14,4,1,3]],threshold:-.004516641143709421,right_val:.4545882046222687,left_val:.605681300163269},{features:[[15,14,1,4,-1],[15,16,1,2,2]],threshold:-.0122916800901294,right_val:.5152214169502258,left_val:.2040929049253464},{features:[[4,14,1,4,-1],[4,16,1,2,2]],threshold:.0004854967992287129,right_val:.3739503026008606,left_val:.5237604975700378},{features:[[14,0,6,13,-1],[16,0,2,13,3]],threshold:.0305560491979122,right_val:.5938246250152588,left_val:.4960533976554871},{features:[[4,1,2,12,-1],[4,1,1,6,2],[5,7,1,6,2]],threshold:-.00015105320198927075,right_val:.4145204126834869,left_val:.5351303815841675},{features:[[11,14,6,6,-1],[14,14,3,3,2],[11,17,3,3,2]],threshold:.0024937440175563097,right_val:.5514941215515137,left_val:.4693366885185242},{features:[[3,14,6,6,-1],[3,14,3,3,2],[6,17,3,3,2]],threshold:-.012382130138576,right_val:.4681667983531952,left_val:.6791396737098694},{features:[[14,17,3,2,-1],[14,18,3,1,2]],threshold:-.005133346188813448,right_val:.5229160189628601,left_val:.3608739078044891},{features:[[3,17,3,2,-1],[3,18,3,1,2]],threshold:.0005191927775740623,right_val:.3633613884449005,left_val:.5300073027610779},{features:[[14,0,6,13,-1],[16,0,2,13,3]],threshold:.1506042033433914,right_val:.2211782038211823,left_val:.515731692314148},{features:[[0,0,6,13,-1],[2,0,2,13,3]],threshold:.007714414969086647,right_val:.5776609182357788,left_val:.4410496950149536},{features:[[10,10,7,6,-1],[10,12,7,2,3]],threshold:.009444352239370346,right_val:.375665009021759,left_val:.5401855111122131},{features:[[6,15,2,2,-1],[6,15,1,1,2],[7,16,1,1,2]],threshold:.00025006249779835343,right_val:.5607374906539917,left_val:.4368270933628082},{features:[[6,11,8,6,-1],[10,11,4,3,2],[6,14,4,3,2]],threshold:-.003307715058326721,right_val:.551823079586029,left_val:.4244799017906189},{features:[[7,6,2,2,-1],[7,6,1,1,2],[8,7,1,1,2]],threshold:.0007404891075566411,right_val:.5900576710700989,left_val:.4496962130069733},{features:[[2,2,16,6,-1],[10,2,8,3,2],[2,5,8,3,2]],threshold:.0440920516848564,right_val:.3156355023384094,left_val:.5293493270874023},{features:[[5,4,3,3,-1],[5,5,3,1,3]],threshold:.0033639909233897924,right_val:.5848662257194519,left_val:.4483296871185303},{features:[[11,7,3,10,-1],[11,12,3,5,2]],threshold:-.003976007923483849,right_val:.5483639240264893,left_val:.4559507071971893},{features:[[6,7,3,10,-1],[6,12,3,5,2]],threshold:.0027716930489987135,right_val:.3792484104633331,left_val:.534178614616394},{features:[[10,7,3,2,-1],[11,7,1,2,3]],threshold:-.00024123019829858094,right_val:.4576973021030426,left_val:.5667188763618469},{features:[[8,12,4,2,-1],[8,13,4,1,2]],threshold:.0004942566738463938,right_val:.5628787279129028,left_val:.4421244859695435},{features:[[10,1,1,3,-1],[10,2,1,1,3]],threshold:-.0003887646889779717,right_val:.5391063094139099,left_val:.4288370907306671},{features:[[1,2,4,18,-1],[1,2,2,9,2],[3,11,2,9,2]],threshold:-.0500488989055157,right_val:.4703742861747742,left_val:.6899513006210327},{features:[[12,4,4,12,-1],[12,10,4,6,2]],threshold:-.0366354808211327,right_val:.5191826224327087,left_val:.2217779010534287},{features:[[0,0,1,6,-1],[0,2,1,2,3]],threshold:.0024273579474538565,right_val:.3497397899627686,left_val:.5136224031448364},{features:[[9,11,2,3,-1],[9,12,2,1,3]],threshold:.001955803018063307,right_val:.640838086605072,left_val:.4826192855834961},{features:[[8,7,4,3,-1],[8,8,4,1,3]],threshold:-.0017494610510766506,right_val:.5272685289382935,left_val:.3922835886478424},{features:[[10,7,3,2,-1],[11,7,1,2,3]],threshold:.0139550799503922,right_val:.8416504859924316,left_val:.507820188999176},{features:[[7,7,3,2,-1],[8,7,1,2,3]],threshold:-.00021896739781368524,right_val:.4314234852790833,left_val:.5520489811897278},{features:[[9,4,6,1,-1],[11,4,2,1,3]],threshold:-.0015131309628486633,right_val:.5382571220397949,left_val:.3934605121612549},{features:[[8,7,2,3,-1],[9,7,1,3,2]],threshold:-.004362280014902353,right_val:.4736475944519043,left_val:.7370628714561462},{features:[[12,7,8,6,-1],[16,7,4,3,2],[12,10,4,3,2]],threshold:.0651605874300003,right_val:.328159511089325,left_val:.5159279704093933},{features:[[0,7,8,6,-1],[0,7,4,3,2],[4,10,4,3,2]],threshold:-.0023567399475723505,right_val:.5172886252403259,left_val:.3672826886177063},{features:[[18,2,2,10,-1],[19,2,1,5,2],[18,7,1,5,2]],threshold:.0151466596871614,right_val:.6687604188919067,left_val:.5031493902206421},{features:[[0,2,6,4,-1],[3,2,3,4,2]],threshold:-.0228509604930878,right_val:.4709596931934357,left_val:.676751971244812},{features:[[9,4,6,1,-1],[11,4,2,1,3]],threshold:.004886765033006668,right_val:.4059878885746002,left_val:.5257998108863831},{features:[[7,15,2,2,-1],[7,15,1,1,2],[8,16,1,1,2]],threshold:.0017619599821045995,right_val:.6688278913497925,left_val:.4696272909641266},{features:[[11,13,1,6,-1],[11,16,1,3,2]],threshold:-.0012942519970238209,right_val:.5344281792640686,left_val:.4320712983608246},{features:[[8,13,1,6,-1],[8,16,1,3,2]],threshold:.0109299495816231,right_val:.1637486070394516,left_val:.4997706115245819},{features:[[14,3,2,1,-1],[14,3,1,1,2]],threshold:2995848990394734e-20,right_val:.5633224248886108,left_val:.4282417893409729},{features:[[8,15,2,3,-1],[8,16,2,1,3]],threshold:-.0065884361974895,right_val:.4700526893138886,left_val:.677212119102478},{features:[[12,15,7,4,-1],[12,17,7,2,2]],threshold:.0032527779694646597,right_val:.4536148905754089,left_val:.531339704990387},{features:[[4,14,12,3,-1],[4,15,12,1,3]],threshold:-.00404357397928834,right_val:.4413388967514038,left_val:.5660061836242676},{features:[[10,3,3,2,-1],[11,3,1,2,3]],threshold:-.0012523540062829852,right_val:.5356451869010925,left_val:.3731913864612579},{features:[[4,12,2,2,-1],[4,13,2,1,2]],threshold:.00019246719602961093,right_val:.3738811016082764,left_val:.5189986228942871},{features:[[10,11,4,6,-1],[10,14,4,3,2]],threshold:-.038589671254158,right_val:.51888108253479,left_val:.2956373989582062},{features:[[7,13,2,2,-1],[7,13,1,1,2],[8,14,1,1,2]],threshold:.0001548987056594342,right_val:.5509533286094666,left_val:.4347135126590729},{features:[[4,11,14,4,-1],[11,11,7,2,2],[4,13,7,2,2]],threshold:-.0337638482451439,right_val:.5195475816726685,left_val:.3230330049991608},{features:[[1,18,18,2,-1],[7,18,6,2,3]],threshold:-.008265706710517406,right_val:.4552114009857178,left_val:.5975489020347595},{features:[[11,18,2,2,-1],[12,18,1,1,2],[11,19,1,1,2]],threshold:14481440302915871e-21,right_val:.5497426986694336,left_val:.4745678007602692},{features:[[7,18,2,2,-1],[7,18,1,1,2],[8,19,1,1,2]],threshold:14951299817766994e-21,right_val:.5480644106864929,left_val:.4324473142623901},{features:[[12,18,8,2,-1],[12,19,8,1,2]],threshold:-.018741799518466,right_val:.517853319644928,left_val:.1580052971839905},{features:[[7,14,6,2,-1],[7,15,6,1,2]],threshold:.0017572239739820361,right_val:.5773764252662659,left_val:.4517636895179749},{features:[[8,12,4,8,-1],[10,12,2,4,2],[8,16,2,4,2]],threshold:-.0031391119118779898,right_val:.5460842251777649,left_val:.4149647951126099},{features:[[4,9,3,3,-1],[4,10,3,1,3]],threshold:6665677938144654e-20,right_val:.5293084979057312,left_val:.4039090871810913},{features:[[7,10,6,2,-1],[9,10,2,2,3]],threshold:.006774342153221369,right_val:.612195611000061,left_val:.4767651855945587},{features:[[5,0,4,15,-1],[7,0,2,15,2]],threshold:-.0073868161998689175,right_val:.5187280774116516,left_val:.3586258888244629},{features:[[8,6,12,14,-1],[12,6,4,14,3]],threshold:.0140409301966429,right_val:.5576155781745911,left_val:.4712139964103699},{features:[[5,16,3,3,-1],[5,17,3,1,3]],threshold:-.005525832995772362,right_val:.5039281249046326,left_val:.2661027014255524},{features:[[8,1,12,19,-1],[12,1,4,19,3]],threshold:.3868423998355866,right_val:.2525899112224579,left_val:.5144339799880981},{features:[[3,0,3,2,-1],[3,1,3,1,2]],threshold:.0001145924034062773,right_val:.5423371195793152,left_val:.4284994900226593},{features:[[10,12,4,5,-1],[10,12,2,5,2]],threshold:-.0184675697237253,right_val:.5213062167167664,left_val:.3885835111141205},{features:[[6,12,4,5,-1],[8,12,2,5,2]],threshold:-.0004590701137203723,right_val:.4235909879207611,left_val:.541256308555603},{features:[[11,11,2,2,-1],[12,11,1,1,2],[11,12,1,1,2]],threshold:.0012527540093287826,right_val:.6624091267585754,left_val:.4899305105209351},{features:[[0,2,3,6,-1],[0,4,3,2,3]],threshold:.001491060946136713,right_val:.4040051996707916,left_val:.5286778211593628},{features:[[11,11,2,2,-1],[12,11,1,1,2],[11,12,1,1,2]],threshold:-.0007543556275777519,right_val:.4795120060443878,left_val:.6032990217208862},{features:[[7,6,4,10,-1],[7,11,4,5,2]],threshold:-.0069478838704526424,right_val:.5373504161834717,left_val:.408440113067627},{features:[[11,11,2,2,-1],[12,11,1,1,2],[11,12,1,1,2]],threshold:.0002809292054735124,right_val:.5759382247924805,left_val:.4846062958240509},{features:[[2,13,5,2,-1],[2,14,5,1,2]],threshold:.0009607371757738292,right_val:.3554979860782623,left_val:.5164741277694702},{features:[[11,11,2,2,-1],[12,11,1,1,2],[11,12,1,1,2]],threshold:-.0002688392996788025,right_val:.4731765985488892,left_val:.5677582025527954},{features:[[7,11,2,2,-1],[7,11,1,1,2],[8,12,1,1,2]],threshold:.0021599370520561934,right_val:.7070567011833191,left_val:.4731487035751343},{features:[[14,13,3,3,-1],[14,14,3,1,3]],threshold:.005623530130833387,right_val:.2781791985034943,left_val:.5240243077278137},{features:[[3,13,3,3,-1],[3,14,3,1,3]],threshold:-.005024399142712355,right_val:.5062304139137268,left_val:.2837013900279999},{features:[[9,14,2,3,-1],[9,15,2,1,3]],threshold:-.009761163964867592,right_val:.4934569001197815,left_val:.7400717735290527},{features:[[8,7,3,3,-1],[8,8,3,1,3]],threshold:.004151510074734688,right_val:.3407008051872253,left_val:.5119131207466125},{features:[[13,5,3,3,-1],[13,6,3,1,3]],threshold:.006246508099138737,right_val:.6579058766365051,left_val:.4923788011074066},{features:[[0,9,5,3,-1],[0,10,5,1,3]],threshold:-.007059747818857431,right_val:.503284215927124,left_val:.2434711009263992},{features:[[13,5,3,3,-1],[13,6,3,1,3]],threshold:-.0020587709732353687,right_val:.469508707523346,left_val:.590031087398529},{features:[[9,12,2,8,-1],[9,12,1,4,2],[10,16,1,4,2]],threshold:-.0024146060459315777,right_val:.5189201831817627,left_val:.3647317886352539},{features:[[11,7,2,2,-1],[12,7,1,1,2],[11,8,1,1,2]],threshold:-.0014817609917372465,right_val:.4940128028392792,left_val:.6034948229789734},{features:[[0,16,6,4,-1],[3,16,3,4,2]],threshold:-.0063016400672495365,right_val:.4560427963733673,left_val:.5818989872932434},{features:[[10,6,2,3,-1],[10,7,2,1,3]],threshold:.00347634288482368,right_val:.3483993113040924,left_val:.5217475891113281},{features:[[9,5,2,6,-1],[9,7,2,2,3]],threshold:-.0222508702427149,right_val:.5032082796096802,left_val:.2360700070858002},{features:[[12,15,8,4,-1],[12,15,4,4,2]],threshold:-.030612550675869,right_val:.4914919137954712,left_val:.6499186754226685},{features:[[0,14,8,6,-1],[4,14,4,6,2]],threshold:.013057479634881,right_val:.5683764219284058,left_val:.4413323104381561},{features:[[9,0,3,2,-1],[10,0,1,2,3]],threshold:-.0006009574281051755,right_val:.5333483219146729,left_val:.4359731078147888},{features:[[4,15,4,2,-1],[6,15,2,2,2]],threshold:-.0004151425091549754,right_val:.4326060116291046,left_val:.550406277179718},{features:[[12,7,3,13,-1],[13,7,1,13,3]],threshold:-.013776290230453,right_val:.5201548933982849,left_val:.4064112901687622},{features:[[5,7,3,13,-1],[6,7,1,13,3]],threshold:-.0322965085506439,right_val:.4977194964885712,left_val:.0473519712686539},{features:[[9,6,3,9,-1],[9,9,3,3,3]],threshold:.0535569787025452,right_val:.666693925857544,left_val:.4881733059883118},{features:[[4,4,7,12,-1],[4,10,7,6,2]],threshold:.008188954554498196,right_val:.4240820109844208,left_val:.5400037169456482},{features:[[12,12,2,2,-1],[13,12,1,1,2],[12,13,1,1,2]],threshold:.00021055320394225419,right_val:.5563852787017822,left_val:.4802047908306122},{features:[[6,12,2,2,-1],[6,12,1,1,2],[7,13,1,1,2]],threshold:-.00243827304802835,right_val:.4773685038089752,left_val:.7387793064117432},{features:[[8,9,4,2,-1],[10,9,2,1,2],[8,10,2,1,2]],threshold:.003283557016402483,right_val:.3171291947364807,left_val:.5288546085357666},{features:[[3,6,2,2,-1],[3,6,1,1,2],[4,7,1,1,2]],threshold:.00237295706756413,right_val:.7060170769691467,left_val:.4750812947750092},{features:[[16,6,3,2,-1],[16,7,3,1,2]],threshold:-.0014541699783876538,right_val:.533073902130127,left_val:.3811730146408081}],threshold:79.24907684326172},{simpleClassifiers:[{features:[[0,7,19,4,-1],[0,9,19,2,2]],threshold:.0557552389800549,right_val:.6806036829948425,left_val:.4019156992435455},{features:[[10,2,10,1,-1],[10,2,5,1,2]],threshold:.002473024884238839,right_val:.5965719819068909,left_val:.3351148962974548},{features:[[9,4,2,12,-1],[9,10,2,6,2]],threshold:-.00035031698644161224,right_val:.3482286930084229,left_val:.5557708144187927},{features:[[12,18,4,1,-1],[12,18,2,1,2]],threshold:.0005416763015091419,right_val:.5693380832672119,left_val:.426085889339447},{features:[[1,7,6,4,-1],[1,7,3,2,2],[4,9,3,2,2]],threshold:.0007719367858953774,right_val:.5433688759803772,left_val:.3494240045547485},{features:[[12,0,6,13,-1],[14,0,2,13,3]],threshold:-.0015999219613149762,right_val:.5484359264373779,left_val:.4028499126434326},{features:[[2,0,6,13,-1],[4,0,2,13,3]],threshold:-.00011832080053864047,right_val:.5425465106964111,left_val:.3806901872158051},{features:[[10,5,8,8,-1],[10,9,8,4,2]],threshold:.0003290903114248067,right_val:.5429521799087524,left_val:.262010008096695},{features:[[8,3,2,5,-1],[9,3,1,5,2]],threshold:.0002951810893137008,right_val:.5399264097213745,left_val:.379976898431778},{features:[[8,4,9,1,-1],[11,4,3,1,3]],threshold:9046671038959175e-20,right_val:.5440226197242737,left_val:.4433645009994507},{features:[[3,4,9,1,-1],[6,4,3,1,3]],threshold:15007190086180344e-21,right_val:.5409119725227356,left_val:.3719654977321625},{features:[[1,0,18,10,-1],[7,0,6,10,3]],threshold:.1393561065196991,right_val:.4479042887687683,left_val:.552539587020874},{features:[[7,17,5,3,-1],[7,18,5,1,3]],threshold:.0016461990308016539,right_val:.5772169828414917,left_val:.4264501035213471},{features:[[7,11,6,1,-1],[9,11,2,1,3]],threshold:.0004998443182557821,right_val:.5685871243476868,left_val:.4359526038169861},{features:[[2,2,3,2,-1],[2,3,3,1,2]],threshold:-.001097128028050065,right_val:.5205408930778503,left_val:.3390136957168579},{features:[[8,12,4,2,-1],[8,13,4,1,2]],threshold:.0006691989256069064,right_val:.598065972328186,left_val:.4557456076145172},{features:[[6,10,3,6,-1],[6,13,3,3,2]],threshold:.0008647104259580374,right_val:.2944033145904541,left_val:.5134841203689575},{features:[[11,4,2,4,-1],[11,4,1,4,2]],threshold:-.0002718259929679334,right_val:.5377181172370911,left_val:.3906578123569489},{features:[[7,4,2,4,-1],[8,4,1,4,2]],threshold:3024949910468422e-20,right_val:.5225688815116882,left_val:.3679609894752502},{features:[[9,6,2,4,-1],[9,6,1,4,2]],threshold:-.008522589690983295,right_val:.4892365038394928,left_val:.7293102145195007},{features:[[6,13,8,3,-1],[6,14,8,1,3]],threshold:.0016705560265108943,right_val:.5696138143539429,left_val:.43453249335289},{features:[[9,15,3,4,-1],[10,15,1,4,3]],threshold:-.0071433838456869125,right_val:.5225623846054077,left_val:.2591280043125153},{features:[[9,2,2,17,-1],[10,2,1,17,2]],threshold:-.0163193698972464,right_val:.4651575982570648,left_val:.6922279000282288},{features:[[7,0,6,1,-1],[9,0,2,1,3]],threshold:.004803426098078489,right_val:.3286302983760834,left_val:.5352262854576111},{features:[[8,15,3,4,-1],[9,15,1,4,3]],threshold:-.0075421929359436035,right_val:.5034546256065369,left_val:.2040544003248215},{features:[[7,13,7,3,-1],[7,14,7,1,3]],threshold:-.0143631100654602,right_val:.4889059066772461,left_val:.6804888844490051},{features:[[8,16,3,3,-1],[9,16,1,3,3]],threshold:.0008906358852982521,right_val:.3895480930805206,left_val:.5310695767402649},{features:[[6,2,8,10,-1],[6,7,8,5,2]],threshold:-.004406019113957882,right_val:.4372426867485046,left_val:.5741562843322754},{features:[[2,5,8,8,-1],[2,9,8,4,2]],threshold:-.0001886254030978307,right_val:.5098205208778381,left_val:.2831785976886749},{features:[[14,16,2,2,-1],[14,17,2,1,2]],threshold:-.0037979281041771173,right_val:.5246580243110657,left_val:.3372507989406586},{features:[[4,16,2,2,-1],[4,17,2,1,2]],threshold:.00014627049677073956,right_val:.391171008348465,left_val:.5306674242019653},{features:[[10,11,4,6,-1],[10,14,4,3,2]],threshold:-49164638767251745e-21,right_val:.3942720890045166,left_val:.5462496280670166},{features:[[6,11,4,6,-1],[6,14,4,3,2]],threshold:-.0335825011134148,right_val:.5048211812973022,left_val:.2157824039459229},{features:[[10,14,1,3,-1],[10,15,1,1,3]],threshold:-.0035339309833943844,right_val:.4872696995735169,left_val:.6465312242507935},{features:[[8,14,4,3,-1],[8,15,4,1,3]],threshold:.005014411173760891,right_val:.6248074769973755,left_val:.4617668092250824},{features:[[10,0,4,6,-1],[12,0,2,3,2],[10,3,2,3,2]],threshold:.0188173707574606,right_val:.2000052034854889,left_val:.5220689177513123},{features:[[0,3,20,2,-1],[0,4,20,1,2]],threshold:-.001343433978036046,right_val:.53016197681427,left_val:.4014537930488586},{features:[[12,0,8,2,-1],[16,0,4,1,2],[12,1,4,1,2]],threshold:.001755796023644507,right_val:.5653169751167297,left_val:.4794039130210877},{features:[[2,12,10,8,-1],[2,16,10,4,2]],threshold:-.0956374630331993,right_val:.5006706714630127,left_val:.2034195065498352},{features:[[17,7,2,10,-1],[18,7,1,5,2],[17,12,1,5,2]],threshold:-.0222412291914225,right_val:.5046340227127075,left_val:.7672473192214966},{features:[[1,7,2,10,-1],[1,7,1,5,2],[2,12,1,5,2]],threshold:-.0155758196488023,right_val:.4755851030349731,left_val:.7490342259407043},{features:[[15,10,3,6,-1],[15,12,3,2,3]],threshold:.005359911825507879,right_val:.4004670977592468,left_val:.5365303754806519},{features:[[4,4,6,2,-1],[6,4,2,2,3]],threshold:-.0217634998261929,right_val:.4964174926280975,left_val:.0740154981613159},{features:[[0,5,20,6,-1],[0,7,20,2,3]],threshold:-.165615901350975,right_val:.5218086242675781,left_val:.2859103083610535},{features:[[0,0,8,2,-1],[0,0,4,1,2],[4,1,4,1,2]],threshold:.0001646132004680112,right_val:.5380793213844299,left_val:.4191615879535675},{features:[[1,0,18,4,-1],[7,0,6,4,3]],threshold:-.008907750248908997,right_val:.4877404868602753,left_val:.6273192763328552},{features:[[1,13,6,2,-1],[1,14,6,1,2]],threshold:.0008634644909761846,right_val:.3671025931835175,left_val:.5159940719604492},{features:[[10,8,3,4,-1],[11,8,1,4,3]],threshold:-.0013751760125160217,right_val:.4579083919525147,left_val:.5884376764297485},{features:[[6,1,6,1,-1],[8,1,2,1,3]],threshold:-.0014081239933148026,right_val:.5139945149421692,left_val:.3560509979724884},{features:[[8,14,4,3,-1],[8,15,4,1,3]],threshold:-.003934288863092661,right_val:.466427206993103,left_val:.5994288921356201},{features:[[1,6,18,2,-1],[10,6,9,2,2]],threshold:-.0319669283926487,right_val:.5144183039665222,left_val:.3345462083816528},{features:[[15,11,1,2,-1],[15,12,1,1,2]],threshold:-15089280168467667e-21,right_val:.441405713558197,left_val:.5582656264305115},{features:[[6,5,1,2,-1],[6,6,1,1,2]],threshold:.0005199447041377425,right_val:.6168993711471558,left_val:.4623680114746094},{features:[[13,4,1,3,-1],[13,5,1,1,3]],threshold:-.0034220460802316666,right_val:.4974805116653442,left_val:.6557074785232544},{features:[[2,15,1,2,-1],[2,16,1,1,2]],threshold:.00017723299970384687,right_val:.3901908099651337,left_val:.5269501805305481},{features:[[12,4,4,3,-1],[12,5,4,1,3]],threshold:.0015716759953647852,right_val:.5790457725524902,left_val:.4633373022079468},{features:[[0,0,7,3,-1],[0,1,7,1,3]],threshold:-.00890413299202919,right_val:.5053591132164001,left_val:.2689608037471771},{features:[[9,12,6,2,-1],[9,12,3,2,2]],threshold:.00040677518700249493,right_val:.4329898953437805,left_val:.5456603169441223},{features:[[5,4,2,3,-1],[5,5,2,1,3]],threshold:.0067604780197143555,right_val:.6689761877059937,left_val:.4648993909358978},{features:[[18,4,2,3,-1],[18,5,2,1,3]],threshold:.0029100088868290186,right_val:.3377839922904968,left_val:.5309703946113586},{features:[[3,0,8,6,-1],[3,2,8,2,3]],threshold:.0013885459629818797,right_val:.5349133014678955,left_val:.4074738919734955},{features:[[0,2,20,6,-1],[10,2,10,3,2],[0,5,10,3,2]],threshold:-.0767642632126808,right_val:.522824227809906,left_val:.1992176026105881},{features:[[4,7,2,4,-1],[5,7,1,4,2]],threshold:-.00022688310127705336,right_val:.4253072142601013,left_val:.5438501834869385},{features:[[3,10,15,2,-1],[8,10,5,2,3]],threshold:-.006309415213763714,right_val:.5378909707069397,left_val:.4259178936481476},{features:[[3,0,12,11,-1],[9,0,6,11,2]],threshold:-.1100727990269661,right_val:.4721749126911163,left_val:.6904156804084778},{features:[[13,0,2,6,-1],[13,0,1,6,2]],threshold:.0002861965913325548,right_val:.5548306107521057,left_val:.4524914920330048},{features:[[0,19,2,1,-1],[1,19,1,1,2]],threshold:2942532955785282e-20,right_val:.4236463904380798,left_val:.5370373725891113},{features:[[16,10,4,10,-1],[18,10,2,5,2],[16,15,2,5,2]],threshold:-.0248865708708763,right_val:.4969303905963898,left_val:.6423557996749878},{features:[[4,8,10,3,-1],[4,9,10,1,3]],threshold:.0331488512456417,right_val:.1613811999559403,left_val:.4988475143909454},{features:[[14,12,3,3,-1],[14,13,3,1,3]],threshold:.0007849169196560979,right_val:.4223009049892426,left_val:.541602611541748},{features:[[0,10,4,10,-1],[0,10,2,5,2],[2,15,2,5,2]],threshold:.004708718974143267,right_val:.6027557849884033,left_val:.4576328992843628},{features:[[18,3,2,6,-1],[18,5,2,2,3]],threshold:.0024144479539245367,right_val:.4422498941421509,left_val:.530897319316864},{features:[[6,6,1,3,-1],[6,7,1,1,3]],threshold:.0019523180089890957,right_val:.666332483291626,left_val:.4705634117126465},{features:[[7,7,7,2,-1],[7,8,7,1,2]],threshold:.0013031980488449335,right_val:.5526962280273438,left_val:.4406126141548157},{features:[[0,3,2,6,-1],[0,5,2,2,3]],threshold:.004473549779504538,right_val:.3301498889923096,left_val:.5129023790359497},{features:[[11,1,3,1,-1],[12,1,1,1,3]],threshold:-.002665286883711815,right_val:.5175036191940308,left_val:.3135471045970917},{features:[[5,0,2,6,-1],[6,0,1,6,2]],threshold:.0001366677024634555,right_val:.530687689781189,left_val:.4119370877742767},{features:[[1,1,18,14,-1],[7,1,6,14,3]],threshold:-.0171264503151178,right_val:.4836578965187073,left_val:.6177806258201599},{features:[[4,6,8,3,-1],[8,6,4,3,2]],threshold:-.0002660143072716892,right_val:.5169736742973328,left_val:.3654330968856812},{features:[[9,12,6,2,-1],[9,12,3,2,2]],threshold:-.022932380437851,right_val:.5163992047309875,left_val:.349091500043869},{features:[[5,12,6,2,-1],[8,12,3,2,2]],threshold:.0023316550068557262,right_val:.3709389865398407,left_val:.5166299939155579},{features:[[10,7,3,5,-1],[11,7,1,5,3]],threshold:.016925660893321,right_val:.8053988218307495,left_val:.501473605632782},{features:[[7,7,3,5,-1],[8,7,1,5,3]],threshold:-.008985882624983788,right_val:.465702086687088,left_val:.6470788717269897},{features:[[13,0,3,10,-1],[14,0,1,10,3]],threshold:-.0118746999651194,right_val:.5258755087852478,left_val:.3246378898620606},{features:[[4,11,3,2,-1],[4,12,3,1,2]],threshold:.00019350569345988333,right_val:.3839643895626068,left_val:.5191941857337952},{features:[[17,3,3,6,-1],[18,3,1,6,3]],threshold:.005871349014341831,right_val:.6187043190002441,left_val:.4918133914470673},{features:[[1,8,18,10,-1],[1,13,18,5,2]],threshold:-.2483879029750824,right_val:.4988150000572205,left_val:.1836802959442139},{features:[[13,0,3,10,-1],[14,0,1,10,3]],threshold:.0122560001909733,right_val:.3632029891014099,left_val:.5227053761482239},{features:[[9,14,2,3,-1],[9,15,2,1,3]],threshold:.0008399017970077693,right_val:.5774148106575012,left_val:.4490250051021576},{features:[[16,3,3,7,-1],[17,3,1,7,3]],threshold:.002540736924856901,right_val:.5858299136161804,left_val:.4804787039756775},{features:[[4,0,3,10,-1],[5,0,1,10,3]],threshold:-.0148224299773574,right_val:.5023537278175354,left_val:.2521049976348877},{features:[[16,3,3,7,-1],[17,3,1,7,3]],threshold:-.005797395948320627,right_val:.4853715002536774,left_val:.5996695756912231},{features:[[0,9,1,2,-1],[0,10,1,1,2]],threshold:.000726621481589973,right_val:.3671779930591583,left_val:.5153716802597046},{features:[[18,1,2,10,-1],[18,1,1,10,2]],threshold:-.0172325801104307,right_val:.4994656145572662,left_val:.6621719002723694},{features:[[0,1,2,10,-1],[1,1,1,10,2]],threshold:.007862408645451069,right_val:.6256101727485657,left_val:.4633395075798035},{features:[[10,16,3,4,-1],[11,16,1,4,3]],threshold:-.004734362009912729,right_val:.5281885266304016,left_val:.3615573048591614},{features:[[2,8,3,3,-1],[3,8,1,3,3]],threshold:.0008304847870022058,right_val:.5550957918167114,left_val:.4442889094352722},{features:[[11,0,2,6,-1],[12,0,1,3,2],[11,3,1,3,2]],threshold:.00766021991148591,right_val:.2613354921340942,left_val:.5162935256958008},{features:[[7,0,2,6,-1],[7,0,1,3,2],[8,3,1,3,2]],threshold:-.004104837775230408,right_val:.5019031763076782,left_val:.2789632081985474},{features:[[16,3,3,7,-1],[17,3,1,7,3]],threshold:.004851257894188166,right_val:.5661668181419373,left_val:.4968984127044678},{features:[[1,3,3,7,-1],[2,3,1,7,3]],threshold:.0009989645332098007,right_val:.5551813244819641,left_val:.4445607960224152},{features:[[14,1,6,16,-1],[16,1,2,16,3]],threshold:-.2702363133430481,right_val:.515131413936615,left_val:.0293882098048925},{features:[[0,1,6,16,-1],[2,1,2,16,3]],threshold:-.0130906803533435,right_val:.4447459876537323,left_val:.5699399709701538},{features:[[2,0,16,8,-1],[10,0,8,4,2],[2,4,8,4,2]],threshold:-.009434279054403305,right_val:.5487895011901855,left_val:.4305466115474701},{features:[[6,8,5,3,-1],[6,9,5,1,3]],threshold:-.0015482039889320731,right_val:.512808084487915,left_val:.3680317103862763},{features:[[9,7,3,3,-1],[10,7,1,3,3]],threshold:.005374613218009472,right_val:.6101555824279785,left_val:.4838916957378388},{features:[[8,8,4,3,-1],[8,9,4,1,3]],threshold:.0015786769799888134,right_val:.4118548035621643,left_val:.5325223207473755},{features:[[9,6,2,4,-1],[9,6,1,4,2]],threshold:.003685605013743043,right_val:.6252303123474121,left_val:.4810948073863983},{features:[[0,7,15,1,-1],[5,7,5,1,3]],threshold:.009388701990246773,right_val:.3629410862922669,left_val:.520022988319397},{features:[[8,2,7,9,-1],[8,5,7,3,3]],threshold:.0127926301211119,right_val:.673801600933075,left_val:.4961709976196289},{features:[[1,7,16,4,-1],[1,7,8,2,2],[9,9,8,2,2]],threshold:-.003366104094311595,right_val:.5283598899841309,left_val:.4060279130935669},{features:[[6,12,8,2,-1],[6,13,8,1,2]],threshold:.00039771420415490866,right_val:.5900775194168091,left_val:.4674113988876343},{features:[[8,11,3,3,-1],[8,12,3,1,3]],threshold:.0014868030557408929,right_val:.6082053780555725,left_val:.4519116878509522},{features:[[4,5,14,10,-1],[11,5,7,5,2],[4,10,7,5,2]],threshold:-.0886867493391037,right_val:.5180991888046265,left_val:.2807899117469788},{features:[[4,12,3,2,-1],[4,13,3,1,2]],threshold:-7429611287079751e-20,right_val:.408762514591217,left_val:.5295584201812744},{features:[[9,11,6,1,-1],[11,11,2,1,3]],threshold:-14932939848222304e-21,right_val:.4538542926311493,left_val:.5461400151252747},{features:[[4,9,7,6,-1],[4,11,7,2,3]],threshold:.005916223861277103,right_val:.4192134141921997,left_val:.5329161286354065},{features:[[7,10,6,3,-1],[7,11,6,1,3]],threshold:.001114164013415575,right_val:.5706217288970947,left_val:.4512017965316773},{features:[[9,11,2,2,-1],[9,12,2,1,2]],threshold:8924936264520511e-20,right_val:.5897638201713562,left_val:.4577805995941162},{features:[[0,5,20,6,-1],[0,7,20,2,3]],threshold:.0025319510605186224,right_val:.3357639014720917,left_val:.5299603939056396},{features:[[6,4,6,1,-1],[8,4,2,1,3]],threshold:.0124262003228068,right_val:.1346601992845535,left_val:.4959059059619904},{features:[[9,11,6,1,-1],[11,11,2,1,3]],threshold:.0283357501029968,right_val:.0006104363710619509,left_val:.5117079019546509},{features:[[5,11,6,1,-1],[7,11,2,1,3]],threshold:.006616588216274977,right_val:.7011628150939941,left_val:.4736349880695343},{features:[[10,16,3,4,-1],[11,16,1,4,3]],threshold:.008046876639127731,right_val:.3282819986343384,left_val:.5216417908668518},{features:[[8,7,3,3,-1],[9,7,1,3,3]],threshold:-.001119398046284914,right_val:.4563739001750946,left_val:.5809860825538635},{features:[[2,12,16,8,-1],[2,16,16,4,2]],threshold:.0132775902748108,right_val:.4103901088237763,left_val:.5398362278938293},{features:[[0,15,15,2,-1],[0,16,15,1,2]],threshold:.0004879473999608308,right_val:.5410590767860413,left_val:.424928605556488},{features:[[15,4,5,6,-1],[15,6,5,2,3]],threshold:.0112431701272726,right_val:.3438215851783752,left_val:.526996374130249},{features:[[9,5,2,4,-1],[10,5,1,4,2]],threshold:-.0008989666821435094,right_val:.4456613063812256,left_val:.5633075833320618},{features:[[8,10,9,6,-1],[8,12,9,2,3]],threshold:.006667715962976217,right_val:.4362679123878479,left_val:.5312889218330383},{features:[[2,19,15,1,-1],[7,19,5,1,3]],threshold:.0289472993463278,right_val:.657579779624939,left_val:.4701794981956482},{features:[[10,16,3,4,-1],[11,16,1,4,3]],threshold:-.0234000496566296,right_val:.5137398838996887,left_val:0},{features:[[0,15,20,4,-1],[0,17,20,2,2]],threshold:-.0891170501708984,right_val:.4942430853843689,left_val:.0237452797591686},{features:[[10,16,3,4,-1],[11,16,1,4,3]],threshold:-.0140546001493931,right_val:.511751115322113,left_val:.3127323091030121},{features:[[7,16,3,4,-1],[8,16,1,4,3]],threshold:.008123939856886864,right_val:.2520025968551636,left_val:.50090491771698},{features:[[9,16,3,3,-1],[9,17,3,1,3]],threshold:-.004996465053409338,right_val:.4927811920642853,left_val:.6387143731117249},{features:[[8,11,4,6,-1],[8,14,4,3,2]],threshold:.0031253970228135586,right_val:.3680452108383179,left_val:.5136849880218506},{features:[[9,6,2,12,-1],[9,10,2,4,3]],threshold:.006766964215785265,right_val:.4363631904125214,left_val:.5509843826293945},{features:[[8,17,4,3,-1],[8,18,4,1,3]],threshold:-.002371144015341997,right_val:.4586946964263916,left_val:.6162335276603699},{features:[[9,18,8,2,-1],[13,18,4,1,2],[9,19,4,1,2]],threshold:-.005352279171347618,right_val:.4920490980148315,left_val:.6185457706451416},{features:[[1,18,8,2,-1],[1,19,8,1,2]],threshold:-.0159688591957092,right_val:.4983252882957459,left_val:.1382617950439453},{features:[[13,5,6,15,-1],[15,5,2,15,3]],threshold:.004767606034874916,right_val:.5490046143531799,left_val:.4688057899475098},{features:[[9,8,2,2,-1],[9,9,2,1,2]],threshold:-.002471469109877944,right_val:.5003952980041504,left_val:.2368514984846115},{features:[[9,5,2,3,-1],[9,5,1,3,2]],threshold:-.0007103378884494305,right_val:.4721533060073853,left_val:.5856394171714783},{features:[[1,5,6,15,-1],[3,5,2,15,3]],threshold:-.1411755979061127,right_val:.4961591064929962,left_val:.0869000628590584},{features:[[4,1,14,8,-1],[11,1,7,4,2],[4,5,7,4,2]],threshold:.1065180972218514,right_val:.1741005033254623,left_val:.5138837099075317},{features:[[2,4,4,16,-1],[2,4,2,8,2],[4,12,2,8,2]],threshold:-.0527447499334812,right_val:.4772881865501404,left_val:.7353636026382446},{features:[[12,4,3,12,-1],[12,10,3,6,2]],threshold:-.00474317604675889,right_val:.5292701721191406,left_val:.3884406089782715},{features:[[4,5,10,12,-1],[4,5,5,6,2],[9,11,5,6,2]],threshold:.0009967676596716046,right_val:.4003424048423767,left_val:.5223492980003357},{features:[[9,14,2,3,-1],[9,15,2,1,3]],threshold:.00802841316908598,right_val:.7212964296340942,left_val:.4959106147289276},{features:[[5,4,2,3,-1],[5,5,2,1,3]],threshold:.0008602585876360536,right_val:.55384761095047,left_val:.4444884061813355},{features:[[12,2,4,10,-1],[14,2,2,5,2],[12,7,2,5,2]],threshold:.0009319150121882558,right_val:.4163244068622589,left_val:.539837121963501},{features:[[6,4,7,3,-1],[6,5,7,1,3]],threshold:-.002508206060156226,right_val:.456250011920929,left_val:.5854265093803406},{features:[[2,0,18,2,-1],[11,0,9,1,2],[2,1,9,1,2]],threshold:-.0021378761157393456,right_val:.5280259251594543,left_val:.4608069062232971},{features:[[0,0,18,2,-1],[0,0,9,1,2],[9,1,9,1,2]],threshold:-.002154604997485876,right_val:.5255997180938721,left_val:.3791126906871796},{features:[[13,13,4,6,-1],[15,13,2,3,2],[13,16,2,3,2]],threshold:-.007621400989592075,right_val:.4952073991298676,left_val:.5998609066009521},{features:[[3,13,4,6,-1],[3,13,2,3,2],[5,16,2,3,2]],threshold:.002205536002293229,right_val:.5588530898094177,left_val:.4484206140041351},{features:[[10,12,2,6,-1],[10,15,2,3,2]],threshold:.0012586950324475765,right_val:.4423840939998627,left_val:.5450747013092041},{features:[[5,9,10,10,-1],[5,9,5,5,2],[10,14,5,5,2]],threshold:-.005092672072350979,right_val:.5263035893440247,left_val:.4118275046348572},{features:[[11,4,4,2,-1],[13,4,2,1,2],[11,5,2,1,2]],threshold:-.0025095739401876926,right_val:.4998494982719421,left_val:.5787907838821411},{features:[[7,12,6,8,-1],[10,12,3,8,2]],threshold:-.0773275569081306,right_val:.481112003326416,left_val:.8397865891456604},{features:[[12,2,4,10,-1],[14,2,2,5,2],[12,7,2,5,2]],threshold:-.041485819965601,right_val:.5176993012428284,left_val:.240861102938652},{features:[[8,11,2,1,-1],[9,11,1,1,2]],threshold:.00010355669655837119,right_val:.5417054295539856,left_val:.4355360865592957},{features:[[10,5,1,12,-1],[10,9,1,4,3]],threshold:.0013255809899419546,right_val:.4894095063209534,left_val:.5453971028327942},{features:[[0,11,6,9,-1],[3,11,3,9,2]],threshold:-.00805987324565649,right_val:.4577918946743012,left_val:.5771024227142334},{features:[[12,2,4,10,-1],[14,2,2,5,2],[12,7,2,5,2]],threshold:.019058620557189,right_val:.3400475084781647,left_val:.5169867873191833},{features:[[4,2,4,10,-1],[4,2,2,5,2],[6,7,2,5,2]],threshold:-.0350578911602497,right_val:.5000503063201904,left_val:.2203243970870972},{features:[[11,4,4,2,-1],[13,4,2,1,2],[11,5,2,1,2]],threshold:.005729605909436941,right_val:.6597570776939392,left_val:.5043408274650574},{features:[[0,14,6,3,-1],[0,15,6,1,3]],threshold:-.0116483299061656,right_val:.4996652901172638,left_val:.2186284959316254},{features:[[11,4,4,2,-1],[13,4,2,1,2],[11,5,2,1,2]],threshold:.0014544479781761765,right_val:.5503727793693542,left_val:.5007681846618652},{features:[[6,1,3,2,-1],[7,1,1,2,3]],threshold:-.00025030909455381334,right_val:.524167001247406,left_val:.4129841029644013},{features:[[11,4,4,2,-1],[13,4,2,1,2],[11,5,2,1,2]],threshold:-.000829072727356106,right_val:.4974496066570282,left_val:.541286826133728},{features:[[5,4,4,2,-1],[5,4,2,1,2],[7,5,2,1,2]],threshold:.0010862209601327777,right_val:.5879228711128235,left_val:.460552990436554},{features:[[13,0,2,12,-1],[14,0,1,6,2],[13,6,1,6,2]],threshold:.0002000050008064136,right_val:.4705209136009216,left_val:.5278854966163635},{features:[[6,0,3,10,-1],[7,0,1,10,3]],threshold:.0029212920926511288,right_val:.375553697347641,left_val:.5129609704017639},{features:[[3,0,17,8,-1],[3,4,17,4,2]],threshold:.0253874007612467,right_val:.5790768265724182,left_val:.4822691977024078},{features:[[0,4,20,4,-1],[0,6,20,2,2]],threshold:-.00319684692658484,right_val:.3962840139865875,left_val:.5248395204544067}],threshold:87.69602966308594},{simpleClassifiers:[{features:[[0,3,8,2,-1],[4,3,4,2,2]],threshold:.005803173873573542,right_val:.596198320388794,left_val:.3498983979225159},{features:[[8,11,4,3,-1],[8,12,4,1,3]],threshold:-.009000306949019432,right_val:.4478552043437958,left_val:.6816636919975281},{features:[[5,7,6,4,-1],[5,7,3,2,2],[8,9,3,2,2]],threshold:-.00115496595390141,right_val:.3578251004219055,left_val:.5585706233978271},{features:[[8,3,4,9,-1],[8,6,4,3,3]],threshold:-.0011069850297644734,right_val:.3050428032875061,left_val:.5365036129951477},{features:[[8,15,1,4,-1],[8,17,1,2,2]],threshold:.00010308309720130637,right_val:.5344635844230652,left_val:.363909512758255},{features:[[4,5,12,7,-1],[8,5,4,7,3]],threshold:-.005098483990877867,right_val:.5504264831542969,left_val:.2859157025814056},{features:[[4,2,4,10,-1],[4,2,2,5,2],[6,7,2,5,2]],threshold:.0008257220033556223,right_val:.3476041853427887,left_val:.5236523747444153},{features:[[3,0,17,2,-1],[3,1,17,1,2]],threshold:.009978332556784153,right_val:.621964693069458,left_val:.4750322103500366},{features:[[2,2,16,15,-1],[2,7,16,5,3]],threshold:-.0374025292694569,right_val:.527806282043457,left_val:.334337592124939},{features:[[15,2,5,2,-1],[15,3,5,1,2]],threshold:.0048548257909715176,right_val:.3700444102287293,left_val:.5192180871963501},{features:[[9,3,2,2,-1],[10,3,1,2,2]],threshold:-.001866447040811181,right_val:.5091944932937622,left_val:.2929843962192535},{features:[[4,5,16,15,-1],[4,10,16,5,3]],threshold:.0168888904154301,right_val:.5431225895881653,left_val:.3686845898628235},{features:[[7,13,5,6,-1],[7,16,5,3,2]],threshold:-.005837262142449617,right_val:.5221335887908936,left_val:.3632183969020844},{features:[[10,7,3,2,-1],[11,7,1,2,3]],threshold:-.00147137395106256,right_val:.4700650870800018,left_val:.5870683789253235},{features:[[8,3,3,1,-1],[9,3,1,1,3]],threshold:-.0011522950371727347,right_val:.5140954256057739,left_val:.3195894956588745},{features:[[9,16,3,3,-1],[9,17,3,1,3]],threshold:-.004256030078977346,right_val:.4814921021461487,left_val:.6301859021186829},{features:[[0,2,5,2,-1],[0,3,5,1,2]],threshold:-.006737829186022282,right_val:.5025808215141296,left_val:.1977048069238663},{features:[[12,5,4,3,-1],[12,6,4,1,3]],threshold:.0113826701417565,right_val:.6867045760154724,left_val:.495413213968277},{features:[[1,7,12,1,-1],[5,7,4,1,3]],threshold:.005179470870643854,right_val:.3350647985935211,left_val:.5164427757263184},{features:[[7,5,6,14,-1],[7,12,6,7,2]],threshold:-.1174378991127014,right_val:.5234413743019104,left_val:.2315246015787125},{features:[[0,0,8,10,-1],[0,0,4,5,2],[4,5,4,5,2]],threshold:.0287034492939711,right_val:.6722521185874939,left_val:.4664297103881836},{features:[[9,1,3,2,-1],[10,1,1,2,3]],threshold:.004823103081434965,right_val:.2723532915115356,left_val:.5220875144004822},{features:[[8,1,3,2,-1],[9,1,1,2,3]],threshold:.0026798530016094446,right_val:.2906948924064636,left_val:.5079277157783508},{features:[[12,4,3,3,-1],[12,5,3,1,3]],threshold:.008050408214330673,right_val:.6395021080970764,left_val:.4885950982570648},{features:[[7,4,6,16,-1],[7,12,6,8,2]],threshold:.004805495962500572,right_val:.365666389465332,left_val:.5197256803512573},{features:[[12,4,3,3,-1],[12,5,3,1,3]],threshold:-.0022420159075409174,right_val:.4763701856136322,left_val:.6153467893600464},{features:[[2,3,2,6,-1],[2,5,2,2,3]],threshold:-.0137577103450894,right_val:.5030903220176697,left_val:.2637344896793366},{features:[[14,2,6,9,-1],[14,5,6,3,3]],threshold:-.1033829972147942,right_val:.5182461142539978,left_val:.2287521958351135},{features:[[5,4,3,3,-1],[5,5,3,1,3]],threshold:-.009443208575248718,right_val:.4694949090480804,left_val:.6953303813934326},{features:[[9,17,3,2,-1],[10,17,1,2,3]],threshold:.0008027118165045977,right_val:.4268783926963806,left_val:.5450655221939087},{features:[[5,5,2,3,-1],[5,6,2,1,3]],threshold:-.004194566980004311,right_val:.4571642875671387,left_val:.6091387867927551},{features:[[13,11,3,6,-1],[13,13,3,2,3]],threshold:.0109422104433179,right_val:.3284547030925751,left_val:.5241063237190247},{features:[[3,14,2,6,-1],[3,17,2,3,2]],threshold:-.0005784106906503439,right_val:.4179368913173676,left_val:.5387929081916809},{features:[[14,3,6,2,-1],[14,4,6,1,2]],threshold:-.002088862005621195,right_val:.5301715731620789,left_val:.4292691051959992},{features:[[0,8,16,2,-1],[0,9,16,1,2]],threshold:.0032383969519287348,right_val:.5220744013786316,left_val:.379234790802002},{features:[[14,3,6,2,-1],[14,4,6,1,2]],threshold:.004907502792775631,right_val:.4126757979393005,left_val:.5237283110618591},{features:[[0,0,5,6,-1],[0,2,5,2,3]],threshold:-.0322779417037964,right_val:.4994502067565918,left_val:.1947655975818634},{features:[[12,5,4,3,-1],[12,6,4,1,3]],threshold:-.008971123024821281,right_val:.4929032027721405,left_val:.6011285185813904},{features:[[4,11,3,6,-1],[4,13,3,2,3]],threshold:.0153210898861289,right_val:.2039822041988373,left_val:.5009753704071045},{features:[[12,5,4,3,-1],[12,6,4,1,3]],threshold:.002085556974634528,right_val:.5721694827079773,left_val:.4862189888954163},{features:[[9,5,1,3,-1],[9,6,1,1,3]],threshold:.005061502102762461,right_val:.1801805943250656,left_val:.5000218749046326},{features:[[12,5,4,3,-1],[12,6,4,1,3]],threshold:-.0037174751050770283,right_val:.4897592961788178,left_val:.5530117154121399},{features:[[6,6,8,12,-1],[6,12,8,6,2]],threshold:-.0121705001220107,right_val:.5383723974227905,left_val:.4178605973720551},{features:[[12,5,4,3,-1],[12,6,4,1,3]],threshold:.004624839872121811,right_val:.5761327147483826,left_val:.4997169971466065},{features:[[5,12,9,2,-1],[8,12,3,2,3]],threshold:-.0002104042941937223,right_val:.4097681045532227,left_val:.5331807136535645},{features:[[12,5,4,3,-1],[12,6,4,1,3]],threshold:-.0146417804062366,right_val:.5051776170730591,left_val:.5755925178527832},{features:[[4,5,4,3,-1],[4,6,4,1,3]],threshold:.00331994891166687,right_val:.6031805872917175,left_val:.4576976895332336},{features:[[6,6,9,2,-1],[9,6,3,2,3]],threshold:.003723687957972288,right_val:.541588306427002,left_val:.4380396902561188},{features:[[4,11,1,3,-1],[4,12,1,1,3]],threshold:.0008295116131193936,right_val:.3702219128608704,left_val:.5163031816482544},{features:[[14,12,6,6,-1],[14,12,3,6,2]],threshold:-.0114084901288152,right_val:.4862565100193024,left_val:.6072946786880493},{features:[[7,0,3,7,-1],[8,0,1,7,3]],threshold:-.004532012157142162,right_val:.5088962912559509,left_val:.3292475938796997},{features:[[9,8,3,3,-1],[10,8,1,3,3]],threshold:.00512760179117322,right_val:.6122708916664124,left_val:.4829767942428589},{features:[[8,8,3,3,-1],[9,8,1,3,3]],threshold:.00985831581056118,right_val:.6556177139282227,left_val:.4660679996013641},{features:[[5,10,11,3,-1],[5,11,11,1,3]],threshold:.036985918879509,right_val:.1690472066402435,left_val:.5204849243164062},{features:[[5,7,10,1,-1],[10,7,5,1,2]],threshold:.004649116192013025,right_val:.3725225031375885,left_val:.5167322158813477},{features:[[9,7,3,2,-1],[10,7,1,2,3]],threshold:-.004266470205038786,right_val:.4987342953681946,left_val:.6406493186950684},{features:[[8,7,3,2,-1],[9,7,1,2,3]],threshold:-.0004795659042429179,right_val:.4464873969554901,left_val:.5897293090820312},{features:[[11,9,4,2,-1],[11,9,2,2,2]],threshold:.0036827160511165857,right_val:.347266286611557,left_val:.5441560745239258},{features:[[5,9,4,2,-1],[7,9,2,2,2]],threshold:-.0100598800927401,right_val:.500482976436615,left_val:.2143162935972214},{features:[[14,10,2,4,-1],[14,12,2,2,2]],threshold:-.0003036184061784297,right_val:.4590323865413666,left_val:.538642406463623},{features:[[7,7,3,2,-1],[8,7,1,2,3]],threshold:-.0014545479789376259,right_val:.4497095048427582,left_val:.5751184225082397},{features:[[14,17,6,3,-1],[14,18,6,1,3]],threshold:.0016515209572389722,right_val:.4238520860671997,left_val:.5421937704086304},{features:[[4,5,12,12,-1],[4,5,6,6,2],[10,11,6,6,2]],threshold:-.007846863940358162,right_val:.5258157253265381,left_val:.4077920913696289},{features:[[6,9,8,8,-1],[10,9,4,4,2],[6,13,4,4,2]],threshold:-.005125985015183687,right_val:.5479453206062317,left_val:.422927588224411},{features:[[0,4,15,4,-1],[5,4,5,4,3]],threshold:-.0368909612298012,right_val:.4674678146839142,left_val:.6596375703811646},{features:[[13,2,4,1,-1],[13,2,2,1,2]],threshold:.0002403563994448632,right_val:.5573202967643738,left_val:.4251135885715485},{features:[[4,12,2,2,-1],[4,13,2,1,2]],threshold:-15150169929256663e-21,right_val:.4074114859104157,left_val:.5259246826171875},{features:[[8,13,4,3,-1],[8,14,4,1,3]],threshold:.0022108471021056175,right_val:.5886352062225342,left_val:.4671722948551178},{features:[[9,13,2,3,-1],[9,14,2,1,3]],threshold:-.0011568620102480054,right_val:.4487161934375763,left_val:.5711066126823425},{features:[[13,11,2,3,-1],[13,12,2,1,3]],threshold:.004999629221856594,right_val:.2898327112197876,left_val:.5264198184013367},{features:[[7,12,4,4,-1],[7,12,2,2,2],[9,14,2,2,2]],threshold:-.0014656189596280456,right_val:.5197871923446655,left_val:.3891738057136536},{features:[[10,11,2,2,-1],[11,11,1,1,2],[10,12,1,1,2]],threshold:-.0011975039960816503,right_val:.4927955865859985,left_val:.5795872807502747},{features:[[8,17,3,2,-1],[9,17,1,2,3]],threshold:-.0044954330660402775,right_val:.5012555122375488,left_val:.2377603054046631},{features:[[10,11,2,2,-1],[11,11,1,1,2],[10,12,1,1,2]],threshold:.00014997160178609192,right_val:.5617607831954956,left_val:.4876626133918762},{features:[[0,17,6,3,-1],[0,18,6,1,3]],threshold:.002639150945469737,right_val:.3765509128570557,left_val:.516808807849884},{features:[[10,11,2,2,-1],[11,11,1,1,2],[10,12,1,1,2]],threshold:-.0002936813107226044,right_val:.4874630868434906,left_val:.5446649193763733},{features:[[8,11,2,2,-1],[8,11,1,1,2],[9,12,1,1,2]],threshold:.0014211760135367513,right_val:.669133186340332,left_val:.4687897861003876},{features:[[12,5,8,4,-1],[12,5,4,4,2]],threshold:.0794276371598244,right_val:.273294597864151,left_val:.5193443894386292},{features:[[0,5,8,4,-1],[4,5,4,4,2]],threshold:.0799375027418137,right_val:.1782083958387375,left_val:.4971731007099152},{features:[[13,2,4,1,-1],[13,2,2,1,2]],threshold:.0110892597585917,right_val:.3209475874900818,left_val:.5165994763374329},{features:[[3,2,4,1,-1],[5,2,2,1,2]],threshold:.00016560709627810866,right_val:.5307276248931885,left_val:.4058471918106079},{features:[[10,0,4,2,-1],[12,0,2,1,2],[10,1,2,1,2]],threshold:-.0053354292176663876,right_val:.5158129930496216,left_val:.3445056974887848},{features:[[7,12,3,1,-1],[8,12,1,1,3]],threshold:.0011287260567769408,right_val:.6075533032417297,left_val:.4594863057136536},{features:[[8,11,4,8,-1],[10,11,2,4,2],[8,15,2,4,2]],threshold:-.0219692196696997,right_val:.5228595733642578,left_val:.1680400967597961},{features:[[9,9,2,2,-1],[9,10,2,1,2]],threshold:-.00021775320055894554,right_val:.5215672850608826,left_val:.3861596882343292},{features:[[3,18,15,2,-1],[3,19,15,1,2]],threshold:.00020200149447191507,right_val:.4363039135932922,left_val:.5517979264259338},{features:[[2,6,2,12,-1],[2,6,1,6,2],[3,12,1,6,2]],threshold:-.0217331498861313,right_val:.4789851009845734,left_val:.7999460101127625},{features:[[9,8,2,3,-1],[9,9,2,1,3]],threshold:-.0008439993252977729,right_val:.5374773144721985,left_val:.4085975885391235},{features:[[7,10,3,2,-1],[8,10,1,2,3]],threshold:-.00043895249837078154,right_val:.4366143047809601,left_val:.5470405220985413},{features:[[11,11,3,1,-1],[12,11,1,1,3]],threshold:.0015092400135472417,right_val:.5842149257659912,left_val:.4988996982574463},{features:[[6,11,3,1,-1],[7,11,1,1,3]],threshold:-.003554783994331956,right_val:.4721005856990814,left_val:.6753690242767334},{features:[[9,2,4,2,-1],[11,2,2,1,2],[9,3,2,1,2]],threshold:.00048191400128416717,right_val:.4357109069824219,left_val:.541585385799408},{features:[[4,12,2,3,-1],[4,13,2,1,3]],threshold:-.00602643983438611,right_val:.499188095331192,left_val:.2258509993553162},{features:[[2,1,18,3,-1],[8,1,6,3,3]],threshold:-.0116681400686502,right_val:.4927498996257782,left_val:.625655472278595},{features:[[5,1,4,14,-1],[7,1,2,14,2]],threshold:-.0028718370012938976,right_val:.524580180644989,left_val:.3947784900665283},{features:[[8,16,12,3,-1],[8,16,6,3,2]],threshold:.0170511696487665,right_val:.5794224143028259,left_val:.4752511084079742},{features:[[1,17,18,3,-1],[7,17,6,3,3]],threshold:-.0133520802482963,right_val:.4544535875320435,left_val:.6041104793548584},{features:[[9,14,2,6,-1],[9,17,2,3,2]],threshold:-.0003930180100724101,right_val:.5544905066490173,left_val:.4258275926113129},{features:[[9,12,1,8,-1],[9,16,1,4,2]],threshold:.0030483349692076445,right_val:.3780272901058197,left_val:.5233420133590698},{features:[[9,14,2,3,-1],[9,15,2,1,3]],threshold:-.00435792887583375,right_val:.4838674068450928,left_val:.6371889114379883},{features:[[9,6,2,12,-1],[9,10,2,4,3]],threshold:.0056661018170416355,right_val:.4163666069507599,left_val:.5374705791473389},{features:[[12,9,3,3,-1],[12,10,3,1,3]],threshold:6067733920644969e-20,right_val:.5311625003814697,left_val:.4638795852661133},{features:[[0,1,4,8,-1],[2,1,2,8,2]],threshold:.0367381609976292,right_val:.6466524004936218,left_val:.4688656032085419},{features:[[9,1,6,2,-1],[12,1,3,1,2],[9,2,3,1,2]],threshold:.008652813732624054,right_val:.2188657969236374,left_val:.5204318761825562},{features:[[1,3,12,14,-1],[1,10,12,7,2]],threshold:-.1537135988473892,right_val:.4958840012550354,left_val:.1630371958017349},{features:[[8,12,4,2,-1],[10,12,2,1,2],[8,13,2,1,2]],threshold:-.00041560421232134104,right_val:.4696458876132965,left_val:.577445924282074},{features:[[1,9,10,2,-1],[1,9,5,1,2],[6,10,5,1,2]],threshold:-.0012640169588848948,right_val:.5217198133468628,left_val:.3977175951004028},{features:[[8,15,4,3,-1],[8,16,4,1,3]],threshold:-.003547334112226963,right_val:.480831503868103,left_val:.6046528220176697},{features:[[6,8,8,3,-1],[6,9,8,1,3]],threshold:3001906952704303e-20,right_val:.5228201150894165,left_val:.3996723890304565},{features:[[9,15,5,3,-1],[9,16,5,1,3]],threshold:.00131130195222795,right_val:.5765997767448425,left_val:.4712158143520355},{features:[[8,7,4,3,-1],[8,8,4,1,3]],threshold:-.0013374709524214268,right_val:.5253170132637024,left_val:.4109584987163544},{features:[[7,7,6,2,-1],[7,8,6,1,2]],threshold:.0208767093718052,right_val:.1757981926202774,left_val:.5202993750572205},{features:[[5,7,8,2,-1],[5,7,4,1,2],[9,8,4,1,2]],threshold:-.007549794856458902,right_val:.4694975018501282,left_val:.6566609740257263},{features:[[12,9,3,3,-1],[12,10,3,1,3]],threshold:.0241885501891375,right_val:.3370220959186554,left_val:.5128673911094666},{features:[[4,7,4,2,-1],[4,8,4,1,2]],threshold:-.002935882890596986,right_val:.4694541096687317,left_val:.658078670501709},{features:[[14,2,6,9,-1],[14,5,6,3,3]],threshold:.0575579293072224,right_val:.2775259912014008,left_val:.5146445035934448},{features:[[4,9,3,3,-1],[5,9,1,3,3]],threshold:-.0011343370424583554,right_val:.5192667245864868,left_val:.3836601972579956},{features:[[12,9,3,3,-1],[12,10,3,1,3]],threshold:.0168169997632504,right_val:.6177260875701904,left_val:.5085592865943909},{features:[[0,2,6,9,-1],[0,5,6,3,3]],threshold:.005053517874330282,right_val:.3684791922569275,left_val:.5138763189315796},{features:[[17,3,3,6,-1],[18,3,1,6,3]],threshold:-.004587471019476652,right_val:.4835202097892761,left_val:.5989655256271362},{features:[[0,3,3,6,-1],[1,3,1,6,3]],threshold:.001688246033154428,right_val:.5723056793212891,left_val:.4509486854076386},{features:[[17,14,1,2,-1],[17,15,1,1,2]],threshold:-.0016554000321775675,right_val:.5243319272994995,left_val:.3496770858764648},{features:[[4,9,4,3,-1],[6,9,2,3,2]],threshold:-.0193738006055355,right_val:.496871292591095,left_val:.1120536997914314},{features:[[12,9,3,3,-1],[12,10,3,1,3]],threshold:.0103744501248002,right_val:.4395213127136231,left_val:.5148196816444397},{features:[[5,9,3,3,-1],[5,10,3,1,3]],threshold:.00014973050565458834,right_val:.526988685131073,left_val:.4084999859333038},{features:[[9,5,6,8,-1],[12,5,3,4,2],[9,9,3,4,2]],threshold:-.042981930077076,right_val:.501850426197052,left_val:.6394104957580566},{features:[[5,5,6,8,-1],[5,5,3,4,2],[8,9,3,4,2]],threshold:.008306593634188175,right_val:.6698353290557861,left_val:.470755398273468},{features:[[16,1,4,6,-1],[16,4,4,3,2]],threshold:-.0041285790503025055,right_val:.5323647260665894,left_val:.4541369080543518},{features:[[1,0,6,20,-1],[3,0,2,20,3]],threshold:.0017399420030415058,right_val:.5439866185188293,left_val:.433396190404892},{features:[[12,11,3,2,-1],[13,11,1,2,3]],threshold:.00011739750334527344,right_val:.5543426275253296,left_val:.4579687118530273},{features:[[5,11,3,2,-1],[6,11,1,2,3]],threshold:.00018585780344437808,right_val:.5426754951477051,left_val:.4324643909931183},{features:[[9,4,6,1,-1],[11,4,2,1,3]],threshold:.005558769218623638,right_val:.3550611138343811,left_val:.525722086429596},{features:[[0,0,8,3,-1],[4,0,4,3,2]],threshold:-.007985156029462814,right_val:.4630635976791382,left_val:.6043018102645874},{features:[[15,0,2,5,-1],[15,0,1,5,2]],threshold:.0006059412262402475,right_val:.55331951379776,left_val:.4598254859447479},{features:[[4,1,3,2,-1],[5,1,1,2,3]],threshold:-.0002298304025316611,right_val:.5322461128234863,left_val:.4130752086639404},{features:[[7,0,6,15,-1],[9,0,2,15,3]],threshold:.0004374021082185209,right_val:.5409289002418518,left_val:.4043039977550507},{features:[[6,11,3,1,-1],[7,11,1,1,3]],threshold:.0002948202018160373,right_val:.5628852248191833,left_val:.4494963884353638},{features:[[12,0,3,4,-1],[13,0,1,4,3]],threshold:.0103126596659422,right_val:.2704316973686218,left_val:.5177510976791382},{features:[[5,4,6,1,-1],[7,4,2,1,3]],threshold:-.007724110968410969,right_val:.4980553984642029,left_val:.1988019049167633},{features:[[12,7,3,2,-1],[12,8,3,1,2]],threshold:-.004679720848798752,right_val:.5018296241760254,left_val:.6644750237464905},{features:[[0,1,4,6,-1],[0,4,4,3,2]],threshold:-.005075545981526375,right_val:.5185269117355347,left_val:.3898304998874664},{features:[[12,7,3,2,-1],[12,8,3,1,2]],threshold:.00224797404371202,right_val:.5660336017608643,left_val:.4801808893680573},{features:[[2,16,3,3,-1],[2,17,3,1,3]],threshold:.0008332700817845762,right_val:.3957188129425049,left_val:.5210919976234436},{features:[[13,8,6,10,-1],[16,8,3,5,2],[13,13,3,5,2]],threshold:-.0412793308496475,right_val:.5007054209709167,left_val:.6154541969299316},{features:[[0,9,5,2,-1],[0,10,5,1,2]],threshold:-.0005093018990010023,right_val:.5228403806686401,left_val:.3975942134857178},{features:[[12,11,2,2,-1],[13,11,1,1,2],[12,12,1,1,2]],threshold:.0012568780221045017,right_val:.5939183235168457,left_val:.4979138076305389},{features:[[3,15,3,3,-1],[3,16,3,1,3]],threshold:.008004849776625633,right_val:.1633366048336029,left_val:.4984497129917145},{features:[[12,7,3,2,-1],[12,8,3,1,2]],threshold:-.0011879300000146031,right_val:.4942624866962433,left_val:.5904964804649353},{features:[[5,7,3,2,-1],[5,8,3,1,2]],threshold:.0006194895249791443,right_val:.5328726172447205,left_val:.4199557900428772},{features:[[9,5,9,9,-1],[9,8,9,3,3]],threshold:.006682985927909613,right_val:.490588903427124,left_val:.5418602824211121},{features:[[5,0,3,7,-1],[6,0,1,7,3]],threshold:-.0037062340416014194,right_val:.5138000249862671,left_val:.3725939095020294},{features:[[5,2,12,5,-1],[9,2,4,5,3]],threshold:-.0397394113242626,right_val:.5050346851348877,left_val:.6478961110115051},{features:[[6,11,2,2,-1],[6,11,1,1,2],[7,12,1,1,2]],threshold:.0014085009461268783,right_val:.6377884149551392,left_val:.4682339131832123},{features:[[15,15,3,2,-1],[15,16,3,1,2]],threshold:.0003932268882635981,right_val:.415048211812973,left_val:.5458530187606812},{features:[[2,15,3,2,-1],[2,16,3,1,2]],threshold:-.0018979819724336267,right_val:.5149704217910767,left_val:.3690159916877747},{features:[[14,12,6,8,-1],[17,12,3,4,2],[14,16,3,4,2]],threshold:-.0139704402536154,right_val:.4811357855796814,left_val:.6050562858581543},{features:[[2,8,15,6,-1],[7,8,5,6,3]],threshold:-.1010081991553307,right_val:.4992361962795258,left_val:.2017080038785934},{features:[[2,2,18,17,-1],[8,2,6,17,3]],threshold:-.0173469204455614,right_val:.4899486005306244,left_val:.5713148713111877},{features:[[5,1,4,1,-1],[7,1,2,1,2]],threshold:.000156197595060803,right_val:.5392642021179199,left_val:.4215388894081116},{features:[[5,2,12,5,-1],[9,2,4,5,3]],threshold:.1343892961740494,right_val:.3767612874507904,left_val:.5136151909828186},{features:[[3,2,12,5,-1],[7,2,4,5,3]],threshold:-.0245822407305241,right_val:.4747906923294067,left_val:.7027357816696167},{features:[[4,9,12,4,-1],[10,9,6,2,2],[4,11,6,2,2]],threshold:-.0038553720805794,right_val:.5427716970443726,left_val:.4317409098148346},{features:[[5,15,6,2,-1],[5,15,3,1,2],[8,16,3,1,2]],threshold:-.002316524973139167,right_val:.4618647992610931,left_val:.594269871711731},{features:[[10,14,2,3,-1],[10,15,2,1,3]],threshold:-.004851812031120062,right_val:.4884895086288452,left_val:.6191568970680237},{features:[[0,13,20,2,-1],[0,13,10,1,2],[10,14,10,1,2]],threshold:.002469993894919753,right_val:.4017199873924255,left_val:.5256664752960205},{features:[[4,9,12,8,-1],[10,9,6,4,2],[4,13,6,4,2]],threshold:.0454969592392445,right_val:.2685773968696594,left_val:.5237867832183838},{features:[[8,13,3,6,-1],[8,16,3,3,2]],threshold:-.0203195996582508,right_val:.4979738891124725,left_val:.213044598698616},{features:[[10,12,2,2,-1],[10,13,2,1,2]],threshold:.0002699499891605228,right_val:.5543122291564941,left_val:.481404185295105},{features:[[9,12,2,2,-1],[9,12,1,1,2],[10,13,1,1,2]],threshold:-.0018232699949294329,right_val:.4709989130496979,left_val:.6482579708099365},{features:[[4,11,14,4,-1],[11,11,7,2,2],[4,13,7,2,2]],threshold:-.006301579065620899,right_val:.5306236147880554,left_val:.4581927955150604},{features:[[8,5,4,2,-1],[8,6,4,1,2]],threshold:-.0002413949987385422,right_val:.4051763117313385,left_val:.5232086777687073},{features:[[10,10,6,3,-1],[12,10,2,3,3]],threshold:-.001033036969602108,right_val:.4789193868637085,left_val:.5556201934814453},{features:[[2,14,1,2,-1],[2,15,1,1,2]],threshold:.0001804116036510095,right_val:.4011810123920441,left_val:.5229442715644836},{features:[[13,8,6,12,-1],[16,8,3,6,2],[13,14,3,6,2]],threshold:-.0614078603684902,right_val:.5010703206062317,left_val:.62986820936203},{features:[[1,8,6,12,-1],[1,8,3,6,2],[4,14,3,6,2]],threshold:-.0695439130067825,right_val:.4773184061050415,left_val:.7228280901908875},{features:[[10,0,6,10,-1],[12,0,2,10,3]],threshold:-.0705426633358002,right_val:.5182529091835022,left_val:.2269513010978699},{features:[[5,11,8,4,-1],[5,11,4,2,2],[9,13,4,2,2]],threshold:.0024423799477517605,right_val:.4098151028156281,left_val:.5237097144126892},{features:[[10,16,8,4,-1],[14,16,4,2,2],[10,18,4,2,2]],threshold:.0015494349645450711,right_val:.5468043088912964,left_val:.4773750901222229},{features:[[7,7,6,6,-1],[9,7,2,6,3]],threshold:-.0239142198115587,right_val:.4783824980258942,left_val:.7146975994110107},{features:[[10,2,4,10,-1],[10,2,2,10,2]],threshold:-.0124536901712418,right_val:.5241122841835022,left_val:.2635296881198883},{features:[[6,1,4,9,-1],[8,1,2,9,2]],threshold:-.00020760179904755205,right_val:.5113608837127686,left_val:.3623757064342499},{features:[[12,19,2,1,-1],[12,19,1,1,2]],threshold:29781080229440704e-21,right_val:.5432801842689514,left_val:.4705932140350342}],threshold:90.25334930419922},{simpleClassifiers:[{features:[[1,2,4,9,-1],[3,2,2,9,2]],threshold:.0117727499455214,right_val:.6421167254447937,left_val:.3860518932342529},{features:[[7,5,6,4,-1],[9,5,2,4,3]],threshold:.0270375702530146,right_val:.675403892993927,left_val:.4385654926300049},{features:[[9,4,2,4,-1],[9,6,2,2,2]],threshold:-3641950024757534e-20,right_val:.34233158826828,left_val:.5487101078033447},{features:[[14,5,2,8,-1],[14,9,2,4,2]],threshold:.001999540952965617,right_val:.5400317907333374,left_val:.3230532109737396},{features:[[7,6,5,12,-1],[7,12,5,6,2]],threshold:.0045278300531208515,right_val:.2935043871402741,left_val:.5091639757156372},{features:[[14,6,2,6,-1],[14,9,2,3,2]],threshold:.00047890920541249216,right_val:.5344064235687256,left_val:.4178153872489929},{features:[[4,6,2,6,-1],[4,9,2,3,2]],threshold:.0011720920447260141,right_val:.5132070779800415,left_val:.2899182140827179},{features:[[8,15,10,4,-1],[13,15,5,2,2],[8,17,5,2,2]],threshold:.0009530570241622627,right_val:.5560845136642456,left_val:.428012490272522},{features:[[6,18,2,2,-1],[7,18,1,2,2]],threshold:15099150004971307e-21,right_val:.5404760241508484,left_val:.4044871926307678},{features:[[11,3,6,2,-1],[11,4,6,1,2]],threshold:-.0006081790197640657,right_val:.5503466129302979,left_val:.4271768927574158},{features:[[2,0,16,6,-1],[2,2,16,2,3]],threshold:.003322452073916793,right_val:.5369734764099121,left_val:.3962723910808563},{features:[[11,3,6,2,-1],[11,4,6,1,2]],threshold:-.0011037490330636501,right_val:.5237749814987183,left_val:.4727177917957306},{features:[[4,11,10,3,-1],[4,12,10,1,3]],threshold:-.0014350269921123981,right_val:.4223509132862091,left_val:.5603008270263672},{features:[[11,3,6,2,-1],[11,4,6,1,2]],threshold:.0020767399109899998,right_val:.4732725918292999,left_val:.5225917100906372},{features:[[3,3,6,2,-1],[3,4,6,1,2]],threshold:-.00016412809782195836,right_val:.5432739853858948,left_val:.3999075889587402},{features:[[16,0,4,7,-1],[16,0,2,7,2]],threshold:.008830243721604347,right_val:.6027327179908752,left_val:.4678385853767395},{features:[[0,14,9,6,-1],[0,16,9,2,3]],threshold:-.0105520701035857,right_val:.5213974714279175,left_val:.3493967056274414},{features:[[9,16,3,3,-1],[9,17,3,1,3]],threshold:-.00227316003292799,right_val:.4749062955379486,left_val:.6185818910598755},{features:[[4,6,6,2,-1],[6,6,2,2,3]],threshold:-.0008478633244521916,right_val:.3843482136726379,left_val:.5285341143608093},{features:[[15,11,1,3,-1],[15,12,1,1,3]],threshold:.0012081359745934606,right_val:.3447335958480835,left_val:.536064088344574},{features:[[5,5,2,3,-1],[5,6,2,1,3]],threshold:.002651273040100932,right_val:.6193962097167969,left_val:.4558292031288147},{features:[[10,9,2,2,-1],[10,10,2,1,2]],threshold:-.0011012479662895203,right_val:.5327628254890442,left_val:.368023008108139},{features:[[3,1,4,3,-1],[5,1,2,3,2]],threshold:.0004956151824444532,right_val:.5274940729141235,left_val:.396059513092041},{features:[[16,0,4,7,-1],[16,0,2,7,2]],threshold:-.0439017713069916,right_val:.4992839097976685,left_val:.7020444869995117},{features:[[0,0,20,1,-1],[10,0,10,1,2]],threshold:.0346903502941132,right_val:.276660293340683,left_val:.5049164295196533},{features:[[15,11,1,3,-1],[15,12,1,1,3]],threshold:-.002744219033047557,right_val:.5274971127510071,left_val:.2672632932662964},{features:[[0,4,3,4,-1],[1,4,1,4,3]],threshold:.003331658896058798,right_val:.6001101732254028,left_val:.4579482972621918},{features:[[16,3,3,6,-1],[16,5,3,2,3]],threshold:-.0200445707887411,right_val:.523571789264679,left_val:.3171594142913818},{features:[[1,3,3,6,-1],[1,5,3,2,3]],threshold:.0013492030557245016,right_val:.4034324884414673,left_val:.5265362858772278},{features:[[6,2,12,6,-1],[12,2,6,3,2],[6,5,6,3,2]],threshold:.0029702018946409225,right_val:.4571984112262726,left_val:.5332456827163696},{features:[[8,10,4,3,-1],[8,11,4,1,3]],threshold:.006303998176008463,right_val:.6034635901451111,left_val:.4593310952186585},{features:[[4,2,14,6,-1],[11,2,7,3,2],[4,5,7,3,2]],threshold:-.0129365902394056,right_val:.5372971296310425,left_val:.4437963962554932},{features:[[9,11,2,3,-1],[9,12,2,1,3]],threshold:.004014872945845127,right_val:.6437833905220032,left_val:.4680323898792267},{features:[[15,13,2,3,-1],[15,14,2,1,3]],threshold:-.002640167949721217,right_val:.5314332842826843,left_val:.3709631860256195},{features:[[8,12,4,3,-1],[8,13,4,1,3]],threshold:.0139184398576617,right_val:.713080883026123,left_val:.4723555147647858},{features:[[15,11,1,3,-1],[15,12,1,1,3]],threshold:-.00045087869511917233,right_val:.5370404124259949,left_val:.4492394030094147},{features:[[7,13,5,2,-1],[7,14,5,1,2]],threshold:.00025384349282830954,right_val:.5514402985572815,left_val:.4406864047050476},{features:[[7,12,6,3,-1],[7,13,6,1,3]],threshold:.002271000063046813,right_val:.5967984199523926,left_val:.4682416915893555},{features:[[5,11,4,4,-1],[5,13,4,2,2]],threshold:.002412077970802784,right_val:.3018598854541779,left_val:.5079392194747925},{features:[[11,4,3,3,-1],[12,4,1,3,3]],threshold:-3602567085181363e-20,right_val:.4471096992492676,left_val:.560103714466095},{features:[[6,4,3,3,-1],[7,4,1,3,3]],threshold:-.0074905529618263245,right_val:.4989944100379944,left_val:.2207535058259964},{features:[[16,5,3,6,-1],[17,5,1,6,3]],threshold:-.017513120546937,right_val:.5017648935317993,left_val:.6531215906143188},{features:[[3,6,12,7,-1],[7,6,4,7,3]],threshold:.1428163051605225,right_val:.1482062041759491,left_val:.4967963099479675},{features:[[16,5,3,6,-1],[17,5,1,6,3]],threshold:.005534526892006397,right_val:.5954223871231079,left_val:.4898946881294251},{features:[[3,13,2,3,-1],[3,14,2,1,3]],threshold:-.0009632359142415226,right_val:.519607424736023,left_val:.3927116990089417},{features:[[16,5,3,6,-1],[17,5,1,6,3]],threshold:-.0020370010752230883,right_val:.4884858131408691,left_val:.5613325238227844},{features:[[1,5,3,6,-1],[2,5,1,6,3]],threshold:.0016614829655736685,right_val:.5578880906105042,left_val:.4472880065441132},{features:[[1,9,18,1,-1],[7,9,6,1,3]],threshold:-.0031188090797513723,right_val:.5397477746009827,left_val:.3840532898902893},{features:[[0,9,8,7,-1],[4,9,4,7,2]],threshold:-.006400061771273613,right_val:.4533218145370483,left_val:.5843983888626099},{features:[[12,11,8,2,-1],[12,12,8,1,2]],threshold:.0003131960111204535,right_val:.4234727919101715,left_val:.5439221858978271},{features:[[0,11,8,2,-1],[0,12,8,1,2]],threshold:-.0182220991700888,right_val:.4958404898643494,left_val:.1288464963436127},{features:[[9,13,2,3,-1],[9,14,2,1,3]],threshold:.008796924725174904,right_val:.7153480052947998,left_val:.49512979388237},{features:[[4,10,12,4,-1],[4,10,6,2,2],[10,12,6,2,2]],threshold:-.004239507019519806,right_val:.5194936990737915,left_val:.3946599960327148},{features:[[9,3,3,7,-1],[10,3,1,7,3]],threshold:.009708627127110958,right_val:.6064900159835815,left_val:.4897503852844238},{features:[[7,2,3,5,-1],[8,2,1,5,3]],threshold:-.003993417136371136,right_val:.5060828924179077,left_val:.3245440125465393},{features:[[9,12,4,6,-1],[11,12,2,3,2],[9,15,2,3,2]],threshold:-.0167850591242313,right_val:.5203778743743896,left_val:.1581953018903732},{features:[[8,7,3,6,-1],[9,7,1,6,3]],threshold:.018272090703249,right_val:.6626979112625122,left_val:.4680935144424439},{features:[[15,4,4,2,-1],[15,5,4,1,2]],threshold:.00568728381767869,right_val:.3512184917926788,left_val:.5211697816848755},{features:[[8,7,3,3,-1],[9,7,1,3,3]],threshold:-.0010739039862528443,right_val:.4529845118522644,left_val:.5768386125564575},{features:[[14,2,6,4,-1],[14,4,6,2,2]],threshold:-.00370938703417778,right_val:.5313581228256226,left_val:.4507763087749481},{features:[[7,16,6,1,-1],[9,16,2,1,3]],threshold:-.0002111070934915915,right_val:.4333376884460449,left_val:.5460820198059082},{features:[[15,13,2,3,-1],[15,14,2,1,3]],threshold:.0010670139454305172,right_val:.4078390896320343,left_val:.5371856093406677},{features:[[8,7,3,10,-1],[9,7,1,10,3]],threshold:.0035943021066486835,right_val:.5643836259841919,left_val:.4471287131309509},{features:[[11,10,2,6,-1],[11,12,2,2,3]],threshold:-.005177603103220463,right_val:.5280330181121826,left_val:.4499393105506897},{features:[[6,10,4,1,-1],[8,10,2,1,2]],threshold:-.00025414369883947074,right_val:.4407708048820496,left_val:.5516173243522644},{features:[[10,9,2,2,-1],[10,10,2,1,2]],threshold:.006352256052196026,right_val:.2465227991342545,left_val:.5194190144538879},{features:[[8,9,2,2,-1],[8,10,2,1,2]],threshold:-.00044205080484971404,right_val:.5139682292938232,left_val:.3830705881118774},{features:[[12,7,2,2,-1],[13,7,1,1,2],[12,8,1,1,2]],threshold:.0007448872784152627,right_val:.5974786877632141,left_val:.4891090989112854},{features:[[5,7,2,2,-1],[5,7,1,1,2],[6,8,1,1,2]],threshold:-.0035116379149258137,right_val:.4768764972686768,left_val:.7413681745529175},{features:[[13,0,3,14,-1],[14,0,1,14,3]],threshold:-.0125409103929996,right_val:.5252826809883118,left_val:.3648819029331207},{features:[[4,0,3,14,-1],[5,0,1,14,3]],threshold:.009493185207247734,right_val:.362958699464798,left_val:.5100492835044861},{features:[[13,4,3,14,-1],[14,4,1,14,3]],threshold:.0129611501470208,right_val:.4333561062812805,left_val:.5232442021369934},{features:[[9,14,2,3,-1],[9,15,2,1,3]],threshold:.004720944911241531,right_val:.6331052780151367,left_val:.4648149013519287},{features:[[8,14,4,3,-1],[8,15,4,1,3]],threshold:-.0023119079414755106,right_val:.4531058073043823,left_val:.5930309891700745},{features:[[4,2,3,16,-1],[5,2,1,16,3]],threshold:-.002826229901984334,right_val:.5257101058959961,left_val:.3870477974414825},{features:[[7,2,8,10,-1],[7,7,8,5,2]],threshold:-.0014311339473351836,right_val:.4561854898929596,left_val:.552250325679779},{features:[[6,14,7,3,-1],[6,15,7,1,3]],threshold:.0019378310535103083,right_val:.5736966729164124,left_val:.4546220898628235},{features:[[9,2,10,12,-1],[14,2,5,6,2],[9,8,5,6,2]],threshold:.00026343559147790074,right_val:.4571875035762787,left_val:.5345739126205444},{features:[[6,7,8,2,-1],[6,8,8,1,2]],threshold:.0007825752254575491,right_val:.5220187902450562,left_val:.3967815935611725},{features:[[8,13,4,6,-1],[8,16,4,3,2]],threshold:-.0195504408329725,right_val:.5243508219718933,left_val:.282964289188385},{features:[[6,6,1,3,-1],[6,7,1,1,3]],threshold:.00043914958951063454,right_val:.589909017086029,left_val:.4590066969394684},{features:[[16,2,4,6,-1],[16,4,4,2,3]],threshold:.0214520003646612,right_val:.2855378985404968,left_val:.523141086101532},{features:[[6,6,4,2,-1],[6,6,2,1,2],[8,7,2,1,2]],threshold:.0005897358059883118,right_val:.550642192363739,left_val:.4397256970405579},{features:[[16,2,4,6,-1],[16,4,4,2,3]],threshold:-.0261576101183891,right_val:.5189175009727478,left_val:.3135079145431519},{features:[[0,2,4,6,-1],[0,4,4,2,3]],threshold:-.0139598604291677,right_val:.5040717720985413,left_val:.3213272988796234},{features:[[9,6,2,6,-1],[9,6,1,6,2]],threshold:-.006369901821017265,right_val:.4849506914615631,left_val:.6387544870376587},{features:[[3,4,6,10,-1],[3,9,6,5,2]],threshold:-.008561382070183754,right_val:.5032019019126892,left_val:.2759132087230682},{features:[[9,5,2,6,-1],[9,5,1,6,2]],threshold:.000966229010373354,right_val:.5834879279136658,left_val:.4685640931129456},{features:[[3,13,2,3,-1],[3,14,2,1,3]],threshold:.0007655026856809855,right_val:.389642208814621,left_val:.5175207257270813},{features:[[13,13,3,2,-1],[13,14,3,1,2]],threshold:-.008183334022760391,right_val:.5208122134208679,left_val:.2069136947393417},{features:[[2,16,10,4,-1],[2,16,5,2,2],[7,18,5,2,2]],threshold:-.009397693909704685,right_val:.4641222953796387,left_val:.6134091019630432},{features:[[5,6,10,6,-1],[10,6,5,3,2],[5,9,5,3,2]],threshold:.004802898038178682,right_val:.439521998167038,left_val:.5454108119010925},{features:[[7,14,1,3,-1],[7,15,1,1,3]],threshold:-.003568056970834732,right_val:.4681093990802765,left_val:.6344485282897949},{features:[[14,16,6,3,-1],[14,17,6,1,3]],threshold:.0040733120404183865,right_val:.4015620052814484,left_val:.5292683243751526},{features:[[5,4,3,3,-1],[5,5,3,1,3]],threshold:.0012568129459396005,right_val:.5452824831008911,left_val:.4392988085746765},{features:[[7,4,10,3,-1],[7,5,10,1,3]],threshold:-.0029065010603517294,right_val:.4863379895687103,left_val:.5898832082748413},{features:[[0,4,5,4,-1],[0,6,5,2,2]],threshold:-.00244093406945467,right_val:.5247421860694885,left_val:.4069364964962006},{features:[[13,11,3,9,-1],[13,14,3,3,3]],threshold:.0248307008296251,right_val:.3682524859905243,left_val:.5182725787162781},{features:[[4,11,3,9,-1],[4,14,3,3,3]],threshold:-.0488540083169937,right_val:.496128112077713,left_val:.1307577937841415},{features:[[9,7,2,1,-1],[9,7,1,1,2]],threshold:-.001611037994734943,right_val:.4872662127017975,left_val:.6421005725860596},{features:[[5,0,6,17,-1],[7,0,2,17,3]],threshold:-.0970094799995422,right_val:.495098888874054,left_val:.0477693490684032},{features:[[10,3,6,3,-1],[10,3,3,3,2]],threshold:.0011209240183234215,right_val:.5354745984077454,left_val:.4616267085075378},{features:[[2,2,15,4,-1],[7,2,5,4,3]],threshold:-.001306409016251564,right_val:.4638805985450745,left_val:.626185417175293},{features:[[8,2,8,2,-1],[12,2,4,1,2],[8,3,4,1,2]],threshold:.00045771620352752507,right_val:.4646640121936798,left_val:.5384417772293091},{features:[[8,1,3,6,-1],[8,3,3,2,3]],threshold:-.0006314995116554201,right_val:.51302570104599,left_val:.3804047107696533},{features:[[9,17,2,2,-1],[9,18,2,1,2]],threshold:.0001450597046641633,right_val:.5664461851119995,left_val:.4554310142993927},{features:[[0,0,2,14,-1],[1,0,1,14,2]],threshold:-.0164745505899191,right_val:.4715859889984131,left_val:.6596958041191101},{features:[[12,0,7,3,-1],[12,1,7,1,3]],threshold:.0133695797994733,right_val:.3035964965820313,left_val:.519546627998352},{features:[[1,14,1,2,-1],[1,15,1,1,2]],threshold:.00010271780047332868,right_val:.4107066094875336,left_val:.522917628288269},{features:[[14,12,2,8,-1],[15,12,1,4,2],[14,16,1,4,2]],threshold:-.0055311559699475765,right_val:.4960907101631165,left_val:.6352887749671936},{features:[[1,0,7,3,-1],[1,1,7,1,3]],threshold:-.0026187049224972725,right_val:.5140984058380127,left_val:.3824546039104462},{features:[[14,12,2,8,-1],[15,12,1,4,2],[14,16,1,4,2]],threshold:.005083426833152771,right_val:.6220818758010864,left_val:.4950439929962158},{features:[[6,0,8,12,-1],[6,0,4,6,2],[10,6,4,6,2]],threshold:.0798181593418121,right_val:.1322475969791412,left_val:.4952335953712463},{features:[[6,1,8,9,-1],[6,4,8,3,3]],threshold:-.0992265865206718,right_val:.5008416771888733,left_val:.7542728781700134},{features:[[5,2,2,2,-1],[5,3,2,1,2]],threshold:-.0006517401780001819,right_val:.5130121111869812,left_val:.3699302971363068},{features:[[13,14,6,6,-1],[16,14,3,3,2],[13,17,3,3,2]],threshold:-.018996849656105,right_val:.4921202957630158,left_val:.6689178943634033},{features:[[0,17,20,2,-1],[0,17,10,1,2],[10,18,10,1,2]],threshold:.0173468999564648,right_val:.1859198063611984,left_val:.4983300864696503},{features:[[10,3,2,6,-1],[11,3,1,3,2],[10,6,1,3,2]],threshold:.0005508210160769522,right_val:.5522121787071228,left_val:.4574424028396606},{features:[[5,12,6,2,-1],[8,12,3,2,2]],threshold:.002005605027079582,right_val:.3856469988822937,left_val:.5131744742393494},{features:[[10,7,6,13,-1],[10,7,3,13,2]],threshold:-.007768819108605385,right_val:.5434309244155884,left_val:.4361700117588043},{features:[[5,15,10,5,-1],[10,15,5,5,2]],threshold:.0508782789111137,right_val:.6840639710426331,left_val:.4682720899581909},{features:[[10,4,4,10,-1],[10,4,2,10,2]],threshold:-.0022901780903339386,right_val:.5306099057197571,left_val:.4329245090484619},{features:[[5,7,2,1,-1],[6,7,1,1,2]],threshold:-.00015715380141045898,right_val:.4378164112567902,left_val:.5370057225227356},{features:[[10,3,6,7,-1],[10,3,3,7,2]],threshold:.1051924005150795,right_val:.0673614665865898,left_val:.5137274265289307},{features:[[4,3,6,7,-1],[7,3,3,7,2]],threshold:.002719891956076026,right_val:.5255665183067322,left_val:.4112060964107513},{features:[[1,7,18,5,-1],[7,7,6,5,3]],threshold:.0483377799391747,right_val:.4438967108726502,left_val:.5404623746871948},{features:[[3,17,4,3,-1],[5,17,2,3,2]],threshold:.0009570376132614911,right_val:.5399510860443115,left_val:.4355969130992889},{features:[[8,14,12,6,-1],[14,14,6,3,2],[8,17,6,3,2]],threshold:-.0253712590783834,right_val:.5031024813652039,left_val:.5995175242424011},{features:[[0,13,20,4,-1],[0,13,10,2,2],[10,15,10,2,2]],threshold:.0524579510092735,right_val:.1398351043462753,left_val:.4950287938117981},{features:[[4,5,14,2,-1],[11,5,7,1,2],[4,6,7,1,2]],threshold:-.0123656298965216,right_val:.496410608291626,left_val:.639729917049408},{features:[[1,2,10,12,-1],[1,2,5,6,2],[6,8,5,6,2]],threshold:-.1458971947431564,right_val:.494632214307785,left_val:.1001669988036156},{features:[[6,1,14,3,-1],[6,2,14,1,3]],threshold:-.0159086007624865,right_val:.5208340883255005,left_val:.3312329947948456},{features:[[8,16,2,3,-1],[8,17,2,1,3]],threshold:.00039486068999394774,right_val:.5426102876663208,left_val:.4406363964080811},{features:[[9,17,3,2,-1],[10,17,1,2,3]],threshold:-.0052454001270234585,right_val:.5189967155456543,left_val:.2799589931964874},{features:[[5,15,4,2,-1],[5,15,2,1,2],[7,16,2,1,2]],threshold:-.005042179953306913,right_val:.4752142131328583,left_val:.6987580060958862},{features:[[10,15,1,3,-1],[10,16,1,1,3]],threshold:.0029812189750373363,right_val:.6307479739189148,left_val:.4983288943767548},{features:[[8,16,4,4,-1],[8,16,2,2,2],[10,18,2,2,2]],threshold:-.007288430817425251,right_val:.5026869773864746,left_val:.298233300447464},{features:[[6,11,8,6,-1],[6,14,8,3,2]],threshold:.0015094350092113018,right_val:.3832970857620239,left_val:.5308442115783691},{features:[[2,13,5,2,-1],[2,14,5,1,2]],threshold:-.009334079921245575,right_val:.4969817101955414,left_val:.2037964016199112},{features:[[13,14,6,6,-1],[16,14,3,3,2],[13,17,3,3,2]],threshold:.0286671407520771,right_val:.6928027272224426,left_val:.5025696754455566},{features:[[1,9,18,4,-1],[7,9,6,4,3]],threshold:.1701968014240265,right_val:.1476442962884903,left_val:.4960052967071533},{features:[[13,14,6,6,-1],[16,14,3,3,2],[13,17,3,3,2]],threshold:-.003261447884142399,right_val:.4826056063175201,left_val:.5603063702583313},{features:[[0,2,1,6,-1],[0,4,1,2,3]],threshold:.0005576927796937525,right_val:.4129633009433746,left_val:.5205562114715576},{features:[[5,0,15,20,-1],[5,10,15,10,2]],threshold:.3625833988189697,right_val:.3768612146377564,left_val:.5221652984619141},{features:[[1,14,6,6,-1],[1,14,3,3,2],[4,17,3,3,2]],threshold:-.0116151301190257,right_val:.4637489914894104,left_val:.6022682785987854},{features:[[8,14,4,6,-1],[10,14,2,3,2],[8,17,2,3,2]],threshold:-.004079519771039486,right_val:.5337479114532471,left_val:.4070447087287903},{features:[[7,11,2,1,-1],[8,11,1,1,2]],threshold:.0005720430053770542,right_val:.5900393128395081,left_val:.4601835012435913},{features:[[9,17,3,2,-1],[10,17,1,2,3]],threshold:.000675433489959687,right_val:.4345428943634033,left_val:.5398252010345459},{features:[[8,17,3,2,-1],[9,17,1,2,3]],threshold:.0006329569732770324,right_val:.4051358997821808,left_val:.5201563239097595},{features:[[12,14,4,6,-1],[14,14,2,3,2],[12,17,2,3,2]],threshold:.00124353205319494,right_val:.5547441244125366,left_val:.4642387926578522},{features:[[4,14,4,6,-1],[4,14,2,3,2],[6,17,2,3,2]],threshold:-.004736385773867369,right_val:.4672552049160004,left_val:.6198567152023315},{features:[[13,14,2,6,-1],[14,14,1,3,2],[13,17,1,3,2]],threshold:-.006465846206992865,right_val:.5019000768661499,left_val:.6837332844734192},{features:[[5,14,2,6,-1],[5,14,1,3,2],[6,17,1,3,2]],threshold:.000350173213519156,right_val:.5363622903823853,left_val:.4344803094863892},{features:[[7,0,6,12,-1],[7,4,6,4,3]],threshold:.00015754920605104417,right_val:.5732020735740662,left_val:.4760079085826874},{features:[[0,7,12,2,-1],[4,7,4,2,3]],threshold:.009977436624467373,right_val:.3635039925575256,left_val:.5090985894203186},{features:[[10,3,3,13,-1],[11,3,1,13,3]],threshold:-.0004146452993154526,right_val:.4593802094459534,left_val:.5570064783096313},{features:[[7,3,3,13,-1],[8,3,1,13,3]],threshold:-.00035888899583369493,right_val:.4339134991168976,left_val:.5356845855712891},{features:[[10,8,6,3,-1],[10,9,6,1,3]],threshold:.0004046325047966093,right_val:.5436776876449585,left_val:.4439803063869476},{features:[[3,11,3,2,-1],[4,11,1,2,3]],threshold:-.0008218478760682046,right_val:.5176299214363098,left_val:.4042294919490814},{features:[[13,12,6,8,-1],[16,12,3,4,2],[13,16,3,4,2]],threshold:.005946741905063391,right_val:.5633779764175415,left_val:.4927651882171631},{features:[[7,6,6,5,-1],[9,6,2,5,3]],threshold:-.0217533893883228,right_val:.480084091424942,left_val:.8006293773651123},{features:[[17,11,2,7,-1],[17,11,1,7,2]],threshold:-.0145403798669577,right_val:.5182222723960876,left_val:.3946054875850678},{features:[[3,13,8,2,-1],[7,13,4,2,2]],threshold:-.0405107699334621,right_val:.4935792982578278,left_val:.0213249903172255},{features:[[6,9,8,3,-1],[6,10,8,1,3]],threshold:-.0005845826817676425,right_val:.5314025282859802,left_val:.4012795984745026},{features:[[4,3,4,3,-1],[4,4,4,1,3]],threshold:.005515180062502623,right_val:.5896260738372803,left_val:.4642418920993805},{features:[[11,3,4,3,-1],[11,4,4,1,3]],threshold:-.006062622182071209,right_val:.5016477704048157,left_val:.6502159237861633},{features:[[1,4,17,12,-1],[1,8,17,4,3]],threshold:.0945358425378799,right_val:.4126827120780945,left_val:.5264708995819092},{features:[[11,3,4,3,-1],[11,4,4,1,3]],threshold:.004731505177915096,right_val:.5892447829246521,left_val:.4879199862480164},{features:[[4,8,6,3,-1],[4,9,6,1,3]],threshold:-.0005257147131487727,right_val:.5189412832260132,left_val:.391728013753891},{features:[[12,3,5,3,-1],[12,4,5,1,3]],threshold:-.002546404954046011,right_val:.498570591211319,left_val:.5837599039077759},{features:[[1,11,2,7,-1],[2,11,1,7,2]],threshold:-.0260756891220808,right_val:.4955821931362152,left_val:.1261983960866928},{features:[[15,12,2,8,-1],[16,12,1,4,2],[15,16,1,4,2]],threshold:-.00547797093167901,right_val:.5010265707969666,left_val:.5722513794898987},{features:[[4,8,11,3,-1],[4,9,11,1,3]],threshold:.005133774131536484,right_val:.4226376116275787,left_val:.527326226234436},{features:[[9,13,6,2,-1],[12,13,3,1,2],[9,14,3,1,2]],threshold:.000479449809063226,right_val:.5819587111473083,left_val:.4450066983699799},{features:[[6,13,4,3,-1],[6,14,4,1,3]],threshold:-.0021114079281687737,right_val:.451171487569809,left_val:.5757653117179871},{features:[[9,12,3,3,-1],[10,12,1,3,3]],threshold:-.0131799904629588,right_val:.5160734057426453,left_val:.1884381026029587},{features:[[5,3,3,3,-1],[5,4,3,1,3]],threshold:-.004796809982508421,right_val:.4736118912696838,left_val:.6589789986610413},{features:[[9,4,2,3,-1],[9,5,2,1,3]],threshold:.0067483168095350266,right_val:.3356395065784454,left_val:.5259429812431335},{features:[[0,2,16,3,-1],[0,3,16,1,3]],threshold:.0014623369788751006,right_val:.4264092147350311,left_val:.5355271100997925},{features:[[15,12,2,8,-1],[16,12,1,4,2],[15,16,1,4,2]],threshold:.004764515906572342,right_val:.5786827802658081,left_val:.5034406781196594},{features:[[3,12,2,8,-1],[3,12,1,4,2],[4,16,1,4,2]],threshold:.0068066660314798355,right_val:.6677829027175903,left_val:.475660502910614},{features:[[14,13,3,6,-1],[14,15,3,2,3]],threshold:.0036608621012419462,right_val:.4311546981334686,left_val:.5369611978530884},{features:[[3,13,3,6,-1],[3,15,3,2,3]],threshold:.0214496403932571,right_val:.1888816058635712,left_val:.4968641996383667},{features:[[6,5,10,2,-1],[11,5,5,1,2],[6,6,5,1,2]],threshold:.004167890176177025,right_val:.5815368890762329,left_val:.4930733144283295},{features:[[2,14,14,6,-1],[2,17,14,3,2]],threshold:.008646756410598755,right_val:.4132595062255859,left_val:.5205205082893372},{features:[[10,14,1,3,-1],[10,15,1,1,3]],threshold:-.0003611407882999629,right_val:.4800927937030792,left_val:.5483555197715759},{features:[[4,16,2,2,-1],[4,16,1,1,2],[5,17,1,1,2]],threshold:.0010808729566633701,right_val:.6041421294212341,left_val:.4689902067184448},{features:[[10,6,2,3,-1],[10,7,2,1,3]],threshold:.005771995987743139,right_val:.3053277134895325,left_val:.5171142220497131},{features:[[0,17,20,2,-1],[0,17,10,1,2],[10,18,10,1,2]],threshold:.001572077046148479,right_val:.4178803861141205,left_val:.5219978094100952},{features:[[13,6,1,3,-1],[13,7,1,1,3]],threshold:-.0019307859474793077,right_val:.4812920093536377,left_val:.5860369801521301},{features:[[8,13,3,2,-1],[9,13,1,2,3]],threshold:-.007892627269029617,right_val:.497173398733139,left_val:.1749276965856552},{features:[[12,2,3,3,-1],[13,2,1,3,3]],threshold:-.002222467912361026,right_val:.521284818649292,left_val:.434258908033371},{features:[[3,18,2,2,-1],[3,18,1,1,2],[4,19,1,1,2]],threshold:.0019011989934369922,right_val:.689205527305603,left_val:.4765186905860901},{features:[[9,16,3,4,-1],[10,16,1,4,3]],threshold:.0027576119173318148,right_val:.4337486028671265,left_val:.5262191295623779},{features:[[6,6,1,3,-1],[6,7,1,1,3]],threshold:.005178744904696941,right_val:.7843729257583618,left_val:.4804069101810455},{features:[[13,1,5,2,-1],[13,2,5,1,2]],threshold:-.0009027334162965417,right_val:.5353423953056335,left_val:.412084698677063},{features:[[7,14,6,2,-1],[7,14,3,1,2],[10,15,3,1,2]],threshold:.005179795902222395,right_val:.6425960063934326,left_val:.4740372896194458},{features:[[11,3,3,4,-1],[12,3,1,4,3]],threshold:-.0101140001788735,right_val:.5175017714500427,left_val:.2468792051076889},{features:[[1,13,12,6,-1],[5,13,4,6,3]],threshold:-.0186170600354671,right_val:.4628978967666626,left_val:.5756294131278992},{features:[[14,11,5,2,-1],[14,12,5,1,2]],threshold:.0059225959703326225,right_val:.3214271068572998,left_val:.5169625878334045},{features:[[2,15,14,4,-1],[2,15,7,2,2],[9,17,7,2,2]],threshold:-.006294507998973131,right_val:.5141636729240417,left_val:.3872014880180359},{features:[[3,7,14,2,-1],[10,7,7,1,2],[3,8,7,1,2]],threshold:.0065353019163012505,right_val:.6310489773750305,left_val:.4853048920631409},{features:[[1,11,4,2,-1],[1,12,4,1,2]],threshold:.0010878399480134249,right_val:.3723258972167969,left_val:.5117315053939819},{features:[[14,0,6,14,-1],[16,0,2,14,3]],threshold:-.0225422400981188,right_val:.4887112975120544,left_val:.5692740082740784},{features:[[4,11,1,3,-1],[4,12,1,1,3]],threshold:-.003006566083058715,right_val:.5003992915153503,left_val:.2556012868881226},{features:[[14,0,6,14,-1],[16,0,2,14,3]],threshold:.007474127225577831,right_val:.5675926804542542,left_val:.4810872972011566},{features:[[1,10,3,7,-1],[2,10,1,7,3]],threshold:.0261623207479715,right_val:.1777237057685852,left_val:.4971194863319397},{features:[[8,12,9,2,-1],[8,13,9,1,2]],threshold:.0009435273823328316,right_val:.549125075340271,left_val:.4940010905265808},{features:[[0,6,20,1,-1],[10,6,10,1,2]],threshold:.0333632417023182,right_val:.2790724039077759,left_val:.5007612109184265},{features:[[8,4,4,4,-1],[8,4,2,4,2]],threshold:-.0151186501607299,right_val:.4973031878471375,left_val:.7059578895568848},{features:[[0,0,2,2,-1],[0,1,2,1,2]],threshold:.0009864894673228264,right_val:.3776761889457703,left_val:.5128620266914368}],threshold:104.74919891357422},{simpleClassifiers:[{features:[[5,3,10,9,-1],[5,6,10,3,3]],threshold:-.0951507985591888,right_val:.4017286896705627,left_val:.6470757126808167},{features:[[15,2,4,10,-1],[15,2,2,10,2]],threshold:.006270234007388353,right_val:.574644923210144,left_val:.399982213973999},{features:[[8,2,2,7,-1],[9,2,1,7,2]],threshold:.000300180894555524,right_val:.5538809895515442,left_val:.355877012014389},{features:[[7,4,12,1,-1],[11,4,4,1,3]],threshold:.0011757409665733576,right_val:.5382617712020874,left_val:.425653487443924},{features:[[3,4,9,1,-1],[6,4,3,1,3]],threshold:4423526843311265e-20,right_val:.5589926838874817,left_val:.3682908117771149},{features:[[15,10,1,4,-1],[15,12,1,2,2]],threshold:-29936920327600092e-21,right_val:.4020367860794067,left_val:.5452470183372498},{features:[[4,10,6,4,-1],[7,10,3,4,2]],threshold:.003007319988682866,right_val:.3317843973636627,left_val:.5239058136940002},{features:[[15,9,1,6,-1],[15,12,1,3,2]],threshold:-.0105138896033168,right_val:.5307983756065369,left_val:.4320689141750336},{features:[[7,17,6,3,-1],[7,18,6,1,3]],threshold:.008347682654857635,right_val:.6453298926353455,left_val:.4504637122154236},{features:[[14,3,2,16,-1],[15,3,1,8,2],[14,11,1,8,2]],threshold:-.0031492270063608885,right_val:.5370525121688843,left_val:.4313425123691559},{features:[[4,9,1,6,-1],[4,12,1,3,2]],threshold:-1443564997316571e-20,right_val:.381797194480896,left_val:.5326603055000305},{features:[[12,1,5,2,-1],[12,2,5,1,2]],threshold:-.00042855090578086674,right_val:.5382009744644165,left_val:.430516391992569},{features:[[6,18,4,2,-1],[6,18,2,1,2],[8,19,2,1,2]],threshold:.00015062429883982986,right_val:.5544965267181396,left_val:.4235970973968506},{features:[[2,4,16,10,-1],[10,4,8,5,2],[2,9,8,5,2]],threshold:.0715598315000534,right_val:.2678802907466888,left_val:.5303059816360474},{features:[[6,5,1,10,-1],[6,10,1,5,2]],threshold:.0008409518050029874,right_val:.5205433964729309,left_val:.3557108938694},{features:[[4,8,15,2,-1],[9,8,5,2,3]],threshold:.0629865005612373,right_val:.2861376106739044,left_val:.5225362777709961},{features:[[1,8,15,2,-1],[6,8,5,2,3]],threshold:-.0033798629883676767,right_val:.5201697945594788,left_val:.3624185919761658},{features:[[9,5,3,6,-1],[9,7,3,2,3]],threshold:-.00011810739670181647,right_val:.3959893882274628,left_val:.547447681427002},{features:[[5,7,8,2,-1],[9,7,4,2,2]],threshold:-.0005450560129247606,right_val:.5215715765953064,left_val:.3740422129631043},{features:[[9,11,2,3,-1],[9,12,2,1,3]],threshold:-.0018454910023137927,right_val:.4584448933601379,left_val:.5893052220344543},{features:[[1,0,16,3,-1],[1,1,16,1,3]],threshold:-.0004383237101137638,right_val:.5385351181030273,left_val:.4084582030773163},{features:[[11,2,7,2,-1],[11,3,7,1,2]],threshold:-.002400083001703024,right_val:.5293580293655396,left_val:.377745509147644},{features:[[5,1,10,18,-1],[5,7,10,6,3]],threshold:-.0987957417964935,right_val:.5070089101791382,left_val:.2963612079620361},{features:[[17,4,3,2,-1],[18,4,1,2,3]],threshold:.0031798239797353745,right_val:.6726443767547607,left_val:.4877632856369019},{features:[[8,13,1,3,-1],[8,14,1,1,3]],threshold:.00032406419632025063,right_val:.5561109781265259,left_val:.4366911053657532},{features:[[3,14,14,6,-1],[3,16,14,2,3]],threshold:-.0325472503900528,right_val:.5308616161346436,left_val:.31281578540802},{features:[[0,2,3,4,-1],[1,2,1,4,3]],threshold:-.007756113074719906,right_val:.4639872014522553,left_val:.6560224890708923},{features:[[12,1,5,2,-1],[12,2,5,1,2]],threshold:.0160272493958473,right_val:.3141897916793823,left_val:.5172680020332336},{features:[[3,1,5,2,-1],[3,2,5,1,2]],threshold:710023505234858e-20,right_val:.5336294770240784,left_val:.4084446132183075},{features:[[10,13,2,3,-1],[10,14,2,1,3]],threshold:.007342280820012093,right_val:.660346508026123,left_val:.4966922104358673},{features:[[8,13,2,3,-1],[8,14,2,1,3]],threshold:-.0016970280557870865,right_val:.4500182867050171,left_val:.5908237099647522},{features:[[14,12,2,3,-1],[14,13,2,1,3]],threshold:.0024118260480463505,right_val:.3599720895290375,left_val:.5315160751342773},{features:[[7,2,2,3,-1],[7,3,2,1,3]],threshold:-.005530093796551228,right_val:.4996814131736755,left_val:.2334040999412537},{features:[[5,6,10,4,-1],[10,6,5,2,2],[5,8,5,2,2]],threshold:-.0026478730142116547,right_val:.4684734046459198,left_val:.5880935788154602},{features:[[9,13,1,6,-1],[9,16,1,3,2]],threshold:.0112956296652555,right_val:.1884590983390808,left_val:.4983777105808258},{features:[[10,12,2,2,-1],[11,12,1,1,2],[10,13,1,1,2]],threshold:-.000669528788421303,right_val:.4799019992351532,left_val:.5872138142585754},{features:[[4,12,2,3,-1],[4,13,2,1,3]],threshold:.0014410680159926414,right_val:.350101113319397,left_val:.5131189227104187},{features:[[14,4,6,6,-1],[14,6,6,2,3]],threshold:.0024637870956212282,right_val:.4117639064788818,left_val:.5339372158050537},{features:[[8,17,2,3,-1],[8,18,2,1,3]],threshold:.0003311451873742044,right_val:.5398246049880981,left_val:.4313383102416992},{features:[[16,4,4,6,-1],[16,6,4,2,3]],threshold:-.0335572697222233,right_val:.5179154872894287,left_val:.26753368973732},{features:[[0,4,4,6,-1],[0,6,4,2,3]],threshold:.0185394193977118,right_val:.2317177057266235,left_val:.4973869919776917},{features:[[14,6,2,3,-1],[14,6,1,3,2]],threshold:-.00029698139405809343,right_val:.4643664062023163,left_val:.552970826625824},{features:[[4,9,8,1,-1],[8,9,4,1,2]],threshold:-.0004557725915219635,right_val:.4469191133975983,left_val:.5629584193229675},{features:[[8,12,4,3,-1],[8,13,4,1,3]],threshold:-.0101589802652597,right_val:.4925918877124786,left_val:.6706212759017944},{features:[[5,12,10,6,-1],[5,14,10,2,3]],threshold:-22413829356082715e-21,right_val:.3912901878356934,left_val:.5239421725273132},{features:[[11,12,1,2,-1],[11,13,1,1,2]],threshold:7203496352303773e-20,right_val:.5501788854598999,left_val:.4799438118934631},{features:[[8,15,4,2,-1],[8,16,4,1,2]],threshold:-.006926720961928368,right_val:.4698084890842438,left_val:.6930009722709656},{features:[[6,9,8,8,-1],[10,9,4,4,2],[6,13,4,4,2]],threshold:-.007699783891439438,right_val:.5480883121490479,left_val:.409962385892868},{features:[[7,12,4,6,-1],[7,12,2,3,2],[9,15,2,3,2]],threshold:-.007313054986298084,right_val:.5057886242866516,left_val:.3283475935459137},{features:[[10,11,3,1,-1],[11,11,1,1,3]],threshold:.0019650589674711227,right_val:.6398249864578247,left_val:.4978047013282776},{features:[[9,7,2,10,-1],[9,7,1,5,2],[10,12,1,5,2]],threshold:.007164760027080774,right_val:.6222137212753296,left_val:.4661160111427307},{features:[[8,0,6,6,-1],[10,0,2,6,3]],threshold:-.0240786392241716,right_val:.5222162008285522,left_val:.2334644943475723},{features:[[3,11,2,6,-1],[3,13,2,2,3]],threshold:-.0210279691964388,right_val:.4938226044178009,left_val:.1183653995394707},{features:[[16,12,1,2,-1],[16,13,1,1,2]],threshold:.00036017020465806127,right_val:.4116711020469666,left_val:.5325019955635071},{features:[[1,14,6,6,-1],[1,14,3,3,2],[4,17,3,3,2]],threshold:-.0172197297215462,right_val:.4664269089698792,left_val:.6278762221336365},{features:[[13,1,3,6,-1],[14,1,1,6,3]],threshold:-.007867214269936085,right_val:.5249736905097961,left_val:.3403415083885193},{features:[[8,8,2,2,-1],[8,9,2,1,2]],threshold:-.000447773898486048,right_val:.5086259245872498,left_val:.3610411882400513},{features:[[9,9,3,3,-1],[10,9,1,3,3]],threshold:.005548601038753986,right_val:.6203498244285583,left_val:.4884265959262848},{features:[[8,7,3,3,-1],[8,8,3,1,3]],threshold:-.00694611482322216,right_val:.5011097192764282,left_val:.262593001127243},{features:[[14,0,2,3,-1],[14,0,1,3,2]],threshold:.00013569870498031378,right_val:.5628312230110168,left_val:.4340794980525971},{features:[[1,0,18,9,-1],[7,0,6,9,3]],threshold:-.0458802506327629,right_val:.4696274995803833,left_val:.6507998704910278},{features:[[11,5,4,15,-1],[11,5,2,15,2]],threshold:-.0215825606137514,right_val:.5287616848945618,left_val:.3826502859592438},{features:[[5,5,4,15,-1],[7,5,2,15,2]],threshold:-.0202095396816731,right_val:.5074477195739746,left_val:.3233368098735809},{features:[[14,0,2,3,-1],[14,0,1,3,2]],threshold:.005849671084433794,right_val:.4489670991897583,left_val:.5177603960037231},{features:[[4,0,2,3,-1],[5,0,1,3,2]],threshold:-5747637987951748e-20,right_val:.5246363878250122,left_val:.4020850956439972},{features:[[11,12,2,2,-1],[12,12,1,1,2],[11,13,1,1,2]],threshold:-.001151310047134757,right_val:.490515410900116,left_val:.6315072178840637},{features:[[7,12,2,2,-1],[7,12,1,1,2],[8,13,1,1,2]],threshold:.0019862831104546785,right_val:.6497151255607605,left_val:.4702459871768951},{features:[[12,0,3,4,-1],[13,0,1,4,3]],threshold:-.005271951202303171,right_val:.5227652788162231,left_val:.3650383949279785},{features:[[4,11,3,3,-1],[4,12,3,1,3]],threshold:.0012662699446082115,right_val:.387761801481247,left_val:.5166100859642029},{features:[[12,7,4,2,-1],[12,8,4,1,2]],threshold:-.006291944067925215,right_val:.5023847818374634,left_val:.737589418888092},{features:[[8,10,3,2,-1],[9,10,1,2,3]],threshold:.000673601112794131,right_val:.5495585799217224,left_val:.4423226118087769},{features:[[9,9,3,2,-1],[10,9,1,2,3]],threshold:-.0010523450328037143,right_val:.4859583079814911,left_val:.5976396203041077},{features:[[8,9,3,2,-1],[9,9,1,2,3]],threshold:-.00044216238893568516,right_val:.4398930966854096,left_val:.5955939292907715},{features:[[12,0,3,4,-1],[13,0,1,4,3]],threshold:.0011747940443456173,right_val:.4605058133602142,left_val:.5349888205528259},{features:[[5,0,3,4,-1],[6,0,1,4,3]],threshold:.005245743785053492,right_val:.2941577136516571,left_val:.5049191117286682},{features:[[4,14,12,4,-1],[10,14,6,2,2],[4,16,6,2,2]],threshold:-.0245397202670574,right_val:.5218586921691895,left_val:.2550177872180939},{features:[[8,13,2,3,-1],[8,14,2,1,3]],threshold:.0007379304151982069,right_val:.5490816235542297,left_val:.4424861073493958},{features:[[10,10,3,8,-1],[10,14,3,4,2]],threshold:.0014233799884095788,right_val:.4081355929374695,left_val:.5319514274597168},{features:[[8,10,4,8,-1],[8,10,2,4,2],[10,14,2,4,2]],threshold:-.0024149110540747643,right_val:.5238950252532959,left_val:.4087659120559692},{features:[[10,8,3,1,-1],[11,8,1,1,3]],threshold:-.0012165299849584699,right_val:.4908052980899811,left_val:.567457914352417},{features:[[9,12,1,6,-1],[9,15,1,3,2]],threshold:-.0012438809499144554,right_val:.5256118178367615,left_val:.4129425883293152},{features:[[10,8,3,1,-1],[11,8,1,1,3]],threshold:.006194273941218853,right_val:.7313653230667114,left_val:.5060194134712219},{features:[[7,8,3,1,-1],[8,8,1,1,3]],threshold:-.0016607169527560472,right_val:.4596369862556458,left_val:.5979632139205933},{features:[[5,2,15,14,-1],[5,9,15,7,2]],threshold:-.0273162592202425,right_val:.5308842062950134,left_val:.4174365103244782},{features:[[2,1,2,10,-1],[2,1,1,5,2],[3,6,1,5,2]],threshold:-.00158455700147897,right_val:.4519486129283905,left_val:.56158047914505},{features:[[14,14,2,3,-1],[14,15,2,1,3]],threshold:-.0015514739789068699,right_val:.5360785126686096,left_val:.4076187014579773},{features:[[2,7,3,3,-1],[3,7,1,3,3]],threshold:.0003844655875582248,right_val:.5430442094802856,left_val:.4347293972969055},{features:[[17,4,3,3,-1],[17,5,3,1,3]],threshold:-.0146722598001361,right_val:.5146093964576721,left_val:.1659304946660996},{features:[[0,4,3,3,-1],[0,5,3,1,3]],threshold:.008160888217389584,right_val:.1884745955467224,left_val:.4961819052696228},{features:[[13,5,6,2,-1],[16,5,3,1,2],[13,6,3,1,2]],threshold:.0011121659772470593,right_val:.6093816161155701,left_val:.4868263900279999},{features:[[4,19,12,1,-1],[8,19,4,1,3]],threshold:-.007260377053171396,right_val:.4690375924110413,left_val:.6284325122833252},{features:[[12,12,2,4,-1],[12,14,2,2,2]],threshold:-.00024046430189628154,right_val:.4046044051647186,left_val:.5575000047683716},{features:[[3,15,1,3,-1],[3,16,1,1,3]],threshold:-.00023348190006799996,right_val:.5252848267555237,left_val:.4115762114524841},{features:[[11,16,6,4,-1],[11,16,3,4,2]],threshold:.005573648028075695,right_val:.5690100789070129,left_val:.4730072915554047},{features:[[2,10,3,10,-1],[3,10,1,10,3]],threshold:.0306237693876028,right_val:.1740095019340515,left_val:.4971886873245239},{features:[[12,8,2,4,-1],[12,8,1,4,2]],threshold:.0009207479888573289,right_val:.4354872107505798,left_val:.5372117757797241},{features:[[6,8,2,4,-1],[7,8,1,4,2]],threshold:-4355073906481266e-20,right_val:.4347316920757294,left_val:.5366883873939514},{features:[[10,14,2,3,-1],[10,14,1,3,2]],threshold:-.006645271088927984,right_val:.516053318977356,left_val:.3435518145561218},{features:[[5,1,10,3,-1],[10,1,5,3,2]],threshold:.0432219989597797,right_val:.7293652892112732,left_val:.4766792058944702},{features:[[10,7,3,2,-1],[11,7,1,2,3]],threshold:.0022331769578158855,right_val:.5633171200752258,left_val:.5029315948486328},{features:[[5,6,9,2,-1],[8,6,3,2,3]],threshold:.0031829739455133677,right_val:.5192136764526367,left_val:.4016092121601105},{features:[[9,8,2,2,-1],[9,9,2,1,2]],threshold:-.00018027749320026487,right_val:.5417919754981995,left_val:.4088315963745117},{features:[[2,11,16,6,-1],[2,11,8,3,2],[10,14,8,3,2]],threshold:-.0052934689447283745,right_val:.5243561863899231,left_val:.407567709684372},{features:[[12,7,2,2,-1],[13,7,1,1,2],[12,8,1,1,2]],threshold:.0012750959722325206,right_val:.6387010812759399,left_val:.4913282990455627},{features:[[9,5,2,3,-1],[9,6,2,1,3]],threshold:.004338532220572233,right_val:.2947346866130829,left_val:.5031672120094299},{features:[[9,7,3,2,-1],[10,7,1,2,3]],threshold:.00852507445961237,right_val:.6308869123458862,left_val:.4949789047241211},{features:[[5,1,8,12,-1],[5,7,8,6,2]],threshold:-.0009426635224372149,right_val:.4285649955272675,left_val:.5328366756439209},{features:[[13,5,2,2,-1],[13,6,2,1,2]],threshold:.0013609660090878606,right_val:.5941501259803772,left_val:.4991525113582611},{features:[[5,5,2,2,-1],[5,6,2,1,2]],threshold:.0004478250921238214,right_val:.5854480862617493,left_val:.4573504030704498},{features:[[12,4,3,3,-1],[12,5,3,1,3]],threshold:.001336005050688982,right_val:.584905207157135,left_val:.4604358971118927},{features:[[4,14,2,3,-1],[4,15,2,1,3]],threshold:-.0006096754805184901,right_val:.522942304611206,left_val:.3969388902187347},{features:[[12,4,3,3,-1],[12,5,3,1,3]],threshold:-.002365678083151579,right_val:.4898357093334198,left_val:.5808320045471191},{features:[[5,4,3,3,-1],[5,5,3,1,3]],threshold:.001073434017598629,right_val:.5470039248466492,left_val:.435121089220047},{features:[[9,14,2,6,-1],[10,14,1,3,2],[9,17,1,3,2]],threshold:.0021923359017819166,right_val:.3842903971672058,left_val:.535506010055542},{features:[[8,14,3,2,-1],[9,14,1,2,3]],threshold:.005496861878782511,right_val:.2827191948890686,left_val:.5018138885498047},{features:[[9,5,6,6,-1],[11,5,2,6,3]],threshold:-.0753688216209412,right_val:.5148826837539673,left_val:.1225076019763947},{features:[[5,5,6,6,-1],[7,5,2,6,3]],threshold:.0251344703137875,right_val:.702544629573822,left_val:.4731766879558563},{features:[[13,13,1,2,-1],[13,14,1,1,2]],threshold:-2935859993158374e-20,right_val:.465608686208725,left_val:.5430532097816467},{features:[[0,2,10,2,-1],[0,3,10,1,2]],threshold:-.0005835591000504792,right_val:.5190119743347168,left_val:.4031040072441101},{features:[[13,13,1,2,-1],[13,14,1,1,2]],threshold:-.0026639450807124376,right_val:.5161771178245544,left_val:.4308126866817474},{features:[[5,7,2,2,-1],[5,7,1,1,2],[6,8,1,1,2]],threshold:-.0013804089976474643,right_val:.4695515930652618,left_val:.621982991695404},{features:[[13,5,2,7,-1],[13,5,1,7,2]],threshold:.0012313219485804439,right_val:.4425831139087677,left_val:.5379363894462585},{features:[[6,13,1,2,-1],[6,14,1,1,2]],threshold:-14644179827882908e-21,right_val:.4222503006458283,left_val:.5281640291213989},{features:[[11,0,3,7,-1],[12,0,1,7,3]],threshold:-.0128188095986843,right_val:.5179932713508606,left_val:.2582092881202698},{features:[[0,3,2,16,-1],[0,3,1,8,2],[1,11,1,8,2]],threshold:.0228521898388863,right_val:.7609264254570007,left_val:.4778693020343781},{features:[[11,0,3,7,-1],[12,0,1,7,3]],threshold:.0008230597013607621,right_val:.4671724140644074,left_val:.5340992212295532},{features:[[6,0,3,7,-1],[7,0,1,7,3]],threshold:.0127701200544834,right_val:.1472366005182266,left_val:.4965761005878449},{features:[[11,16,8,4,-1],[11,16,4,4,2]],threshold:-.0500515103340149,right_val:.5016592144966125,left_val:.641499400138855},{features:[[1,16,8,4,-1],[5,16,4,4,2]],threshold:.0157752707600594,right_val:.5685362219810486,left_val:.4522320032119751},{features:[[13,5,2,7,-1],[13,5,1,7,2]],threshold:-.0185016207396984,right_val:.5137959122657776,left_val:.2764748930931091},{features:[[5,5,2,7,-1],[6,5,1,7,2]],threshold:.0024626250378787518,right_val:.3795408010482788,left_val:.5141941905021667},{features:[[18,6,2,14,-1],[18,13,2,7,2]],threshold:.0629161670804024,right_val:.658043384552002,left_val:.5060648918151855},{features:[[6,10,3,4,-1],[6,12,3,2,2]],threshold:-21648500478477217e-21,right_val:.401988685131073,left_val:.5195388197898865},{features:[[14,7,1,2,-1],[14,8,1,1,2]],threshold:.0021180990152060986,right_val:.5954458713531494,left_val:.4962365031242371},{features:[[0,1,18,6,-1],[0,1,9,3,2],[9,4,9,3,2]],threshold:-.0166348908096552,right_val:.517544686794281,left_val:.3757933080196381},{features:[[14,7,1,2,-1],[14,8,1,1,2]],threshold:-.002889947034418583,right_val:.5057178735733032,left_val:.6624013781547546},{features:[[0,6,2,14,-1],[0,13,2,7,2]],threshold:.076783262193203,right_val:.8047714829444885,left_val:.4795796871185303},{features:[[17,0,3,12,-1],[18,0,1,12,3]],threshold:.003917067777365446,right_val:.5719941854476929,left_val:.4937882125377655},{features:[[0,6,18,3,-1],[0,7,18,1,3]],threshold:-.0726706013083458,right_val:.4943903982639313,left_val:.0538945607841015},{features:[[6,0,14,16,-1],[6,8,14,8,2]],threshold:.5403950214385986,right_val:.1143338978290558,left_val:.5129774212837219},{features:[[0,0,3,12,-1],[1,0,1,12,3]],threshold:.0029510019812732935,right_val:.5698574185371399,left_val:.4528343975543976},{features:[[13,0,3,7,-1],[14,0,1,7,3]],threshold:.0034508369863033295,right_val:.4218730926513672,left_val:.5357726812362671},{features:[[5,7,1,2,-1],[5,8,1,1,2]],threshold:-.0004207793972454965,right_val:.4637925922870636,left_val:.5916172862052917},{features:[[14,4,6,6,-1],[14,6,6,2,3]],threshold:.0033051050268113613,right_val:.438204288482666,left_val:.5273385047912598},{features:[[5,7,7,2,-1],[5,8,7,1,2]],threshold:.0004773506079800427,right_val:.5181884765625,left_val:.4046528041362763},{features:[[8,6,6,9,-1],[8,9,6,3,3]],threshold:-.0259285103529692,right_val:.5089386105537415,left_val:.7452235817909241},{features:[[5,4,6,1,-1],[7,4,2,1,3]],threshold:-.002972979098558426,right_val:.5058795213699341,left_val:.3295435905456543},{features:[[13,0,6,4,-1],[16,0,3,2,2],[13,2,3,2,2]],threshold:.005850832909345627,right_val:.5793024897575378,left_val:.4857144057750702},{features:[[1,2,18,12,-1],[1,6,18,4,3]],threshold:-.0459675192832947,right_val:.5380653142929077,left_val:.4312731027603149},{features:[[3,2,17,12,-1],[3,6,17,4,3]],threshold:.1558596044778824,right_val:.1684713959693909,left_val:.5196170210838318},{features:[[5,14,7,3,-1],[5,15,7,1,3]],threshold:.0151648297905922,right_val:.6735026836395264,left_val:.4735757112503052},{features:[[10,14,1,3,-1],[10,15,1,1,3]],threshold:-.0010604249546304345,right_val:.4775702953338623,left_val:.5822926759719849},{features:[[3,14,3,3,-1],[3,15,3,1,3]],threshold:.006647629197686911,right_val:.231953501701355,left_val:.4999198913574219},{features:[[14,4,6,6,-1],[14,6,6,2,3]],threshold:-.0122311301529408,right_val:.5262982249259949,left_val:.4750893115997315},{features:[[0,4,6,6,-1],[0,6,6,2,3]],threshold:.005652888212352991,right_val:.3561818897724152,left_val:.5069767832756042},{features:[[12,5,4,3,-1],[12,6,4,1,3]],threshold:.0012977829901501536,right_val:.5619062781333923,left_val:.4875693917274475},{features:[[4,5,4,3,-1],[4,6,4,1,3]],threshold:.0107815898954868,right_val:.6782308220863342,left_val:.4750770032405853},{features:[[18,0,2,6,-1],[18,2,2,2,3]],threshold:.002865477930754423,right_val:.4290736019611359,left_val:.5305461883544922},{features:[[8,1,4,9,-1],[10,1,2,9,2]],threshold:.0028663428965955973,right_val:.5539351105690002,left_val:.4518479108810425},{features:[[6,6,8,2,-1],[6,6,4,2,2]],threshold:-.005198332015424967,right_val:.5434188842773438,left_val:.4149119853973389},{features:[[6,5,4,2,-1],[6,5,2,1,2],[8,6,2,1,2]],threshold:.005373999010771513,right_val:.6507657170295715,left_val:.471789687871933},{features:[[10,5,2,3,-1],[10,6,2,1,3]],threshold:-.0146415298804641,right_val:.5161777138710022,left_val:.2172164022922516},{features:[[9,5,1,3,-1],[9,6,1,1,3]],threshold:-15042580344015732e-21,right_val:.4298836886882782,left_val:.533738374710083},{features:[[9,10,2,2,-1],[9,11,2,1,2]],threshold:-.0001187566012958996,right_val:.5582447052001953,left_val:.4604594111442566},{features:[[0,8,4,3,-1],[0,9,4,1,3]],threshold:.0169955305755138,right_val:.0738800764083862,left_val:.4945895075798035},{features:[[6,0,8,6,-1],[6,3,8,3,2]],threshold:-.0350959412753582,right_val:.4977591037750244,left_val:.70055091381073},{features:[[1,0,6,4,-1],[1,0,3,2,2],[4,2,3,2,2]],threshold:.0024217350874096155,right_val:.5477694272994995,left_val:.4466265141963959},{features:[[13,0,3,7,-1],[14,0,1,7,3]],threshold:-.0009634033776819706,right_val:.5313338041305542,left_val:.4714098870754242},{features:[[9,16,2,2,-1],[9,17,2,1,2]],threshold:.00016391130338888615,right_val:.5342242121696472,left_val:.4331546127796173},{features:[[11,4,6,10,-1],[11,9,6,5,2]],threshold:-.0211414601653814,right_val:.5204498767852783,left_val:.2644700109958649},{features:[[0,10,19,2,-1],[0,11,19,1,2]],threshold:.0008777520270086825,right_val:.4152742922306061,left_val:.5208349823951721},{features:[[9,5,8,9,-1],[9,8,8,3,3]],threshold:-.0279439203441143,right_val:.5018811821937561,left_val:.6344125270843506},{features:[[4,0,3,7,-1],[5,0,1,7,3]],threshold:.006729737855494022,right_val:.3500863909721375,left_val:.5050438046455383},{features:[[8,6,4,12,-1],[10,6,2,6,2],[8,12,2,6,2]],threshold:.0232810396701097,right_val:.6968677043914795,left_val:.4966318011283875},{features:[[0,2,6,4,-1],[0,4,6,2,2]],threshold:-.0116449799388647,right_val:.5049629807472229,left_val:.3300260007381439},{features:[[8,15,4,3,-1],[8,16,4,1,3]],threshold:.0157643090933561,right_val:.7321153879165649,left_val:.4991598129272461},{features:[[8,0,3,7,-1],[9,0,1,7,3]],threshold:-.001361147966235876,right_val:.5160670876502991,left_val:.3911735117435455},{features:[[9,5,3,4,-1],[10,5,1,4,3]],threshold:-.0008152233785949647,right_val:.49497190117836,left_val:.5628911256790161},{features:[[8,5,3,4,-1],[9,5,1,4,3]],threshold:-.0006006627227179706,right_val:.4550595879554749,left_val:.585359513759613},{features:[[7,6,6,1,-1],[9,6,2,1,3]],threshold:.0004971551825292408,right_val:.5443599224090576,left_val:.4271470010280609},{features:[[7,14,4,4,-1],[7,14,2,2,2],[9,16,2,2,2]],threshold:.0023475370835512877,right_val:.3887656927108765,left_val:.5143110752105713},{features:[[13,14,4,6,-1],[15,14,2,3,2],[13,17,2,3,2]],threshold:-.008926156908273697,right_val:.497172087430954,left_val:.6044502258300781},{features:[[7,8,1,8,-1],[7,12,1,4,2]],threshold:-.013919910416007,right_val:.5000367760658264,left_val:.2583160996437073},{features:[[16,0,2,8,-1],[17,0,1,4,2],[16,4,1,4,2]],threshold:.0010209949687123299,right_val:.5560358166694641,left_val:.4857374131679535},{features:[[2,0,2,8,-1],[2,0,1,4,2],[3,4,1,4,2]],threshold:-.0027441629208624363,right_val:.464577704668045,left_val:.5936884880065918},{features:[[6,1,14,3,-1],[6,2,14,1,3]],threshold:-.0162001308053732,right_val:.5193495154380798,left_val:.3163014948368073},{features:[[7,9,3,10,-1],[7,14,3,5,2]],threshold:.004333198070526123,right_val:.3458878993988037,left_val:.5061224102973938},{features:[[9,14,2,2,-1],[9,15,2,1,2]],threshold:.0005849793087691069,right_val:.5870177745819092,left_val:.4779017865657806},{features:[[7,7,6,8,-1],[7,11,6,4,2]],threshold:-.0022466450463980436,right_val:.5374773144721985,left_val:.4297851026058197},{features:[[9,7,3,6,-1],[9,10,3,3,2]],threshold:.0023146099410951138,right_val:.4640969932079315,left_val:.5438671708106995},{features:[[7,13,3,3,-1],[7,14,3,1,3]],threshold:.008767912164330482,right_val:.6771789789199829,left_val:.472689300775528},{features:[[9,9,2,2,-1],[9,10,2,1,2]],threshold:-.00022448020172305405,right_val:.5428048968315125,left_val:.4229173064231873},{features:[[0,1,18,2,-1],[6,1,6,2,3]],threshold:-.007433602120727301,right_val:.4683673977851868,left_val:.6098880767822266},{features:[[7,1,6,14,-1],[7,8,6,7,2]],threshold:-.0023189240600913763,right_val:.4424242079257965,left_val:.5689436793327332},{features:[[1,9,18,1,-1],[7,9,6,1,3]],threshold:-.0021042178850620985,right_val:.5187087059020996,left_val:.3762221038341522},{features:[[9,7,2,2,-1],[9,7,1,2,2]],threshold:.000460348412161693,right_val:.5771207213401794,left_val:.4699405133724213},{features:[[9,3,2,9,-1],[10,3,1,9,2]],threshold:.0010547629790380597,right_val:.5601701736450195,left_val:.4465216994285584},{features:[[18,14,2,3,-1],[18,15,2,1,3]],threshold:.0008714881842024624,right_val:.3914709091186523,left_val:.544980525970459},{features:[[7,11,3,1,-1],[8,11,1,1,3]],threshold:.00033364820410497487,right_val:.5645738840103149,left_val:.4564009010791779},{features:[[10,8,3,4,-1],[11,8,1,4,3]],threshold:-.0014853250468149781,right_val:.4692778885364533,left_val:.5747377872467041},{features:[[7,14,3,6,-1],[8,14,1,6,3]],threshold:.0030251620337367058,right_val:.3762814104557037,left_val:.5166196823120117},{features:[[10,8,3,4,-1],[11,8,1,4,3]],threshold:.005028074141591787,right_val:.6151527166366577,left_val:.5002111792564392},{features:[[7,8,3,4,-1],[8,8,1,4,3]],threshold:-.0005816451157443225,right_val:.4390751123428345,left_val:.5394598245620728},{features:[[7,9,6,9,-1],[7,12,6,3,3]],threshold:.0451415292918682,right_val:.206303596496582,left_val:.5188326835632324},{features:[[0,14,2,3,-1],[0,15,2,1,3]],threshold:-.001079562003724277,right_val:.5137907266616821,left_val:.3904685080051422},{features:[[11,12,1,2,-1],[11,13,1,1,2]],threshold:.00015995999274309725,right_val:.5427504181861877,left_val:.4895322918891907},{features:[[4,3,8,3,-1],[8,3,4,3,2]],threshold:-.0193592701107264,right_val:.4773507118225098,left_val:.6975228786468506},{features:[[0,4,20,6,-1],[0,4,10,6,2]],threshold:.207255095243454,right_val:.3034991919994354,left_val:.5233635902404785},{features:[[9,14,1,3,-1],[9,15,1,1,3]],threshold:-.00041953290929086506,right_val:.4460186064243317,left_val:.5419396758079529},{features:[[8,14,4,3,-1],[8,15,4,1,3]],threshold:.0022582069505006075,right_val:.6027408838272095,left_val:.4815764129161835},{features:[[0,15,14,4,-1],[0,17,14,2,2]],threshold:-.0067811207845807076,right_val:.5183305740356445,left_val:.3980278968811035},{features:[[1,14,18,6,-1],[1,17,18,3,2]],threshold:.0111543098464608,right_val:.4188759922981262,left_val:.543123185634613},{features:[[0,0,10,6,-1],[0,0,5,3,2],[5,3,5,3,2]],threshold:.0431624315679073,right_val:.6522961258888245,left_val:.4738228023052216}],threshold:105.76110076904297}],size:[20,20],tilted:!1};var i=e.data.imageData,o=e.data.w,s=e.data.h,l=e.data.videoWidth,u=e.data.params,h=new n.matrix_t(o,s,n.U8_t|n.C1_t),c=new n.matrix_t(o,s,n.U8_t|n.C1_t),f=new Int32Array((o+1)*(s+1)),d=new Int32Array((o+1)*(s+1)),v=new Int32Array((o+1)*(s+1)),p=new Int32Array((o+1)*(s+1)),g=n.haar.frontalface;n.imgproc.grayscale(i.data,o,s,h),u.equalizeHistogram&&n.imgproc.equalize_histogram(h,h),n.imgproc.compute_integral_image(h,f,d,g.tilted?v:null),u.useCanny&&(n.imgproc.canny(h,c,10,50),n.imgproc.compute_integral_image(c,p,null,null)),n.haar.edgesDensity=u.edgesDensity;for(var _=n.haar.detect_multi_scale(f,d,v,u.useCanny?p:null,h.cols,h.rows,g,u.scaleFactor,u.minScale),m=(_=n.haar.group_rectangles(_,u.min_neighbors)).length-1;m>=0;m--)_[m].confidence<u.confidenceThreshold&&_.splice(m,1);var y=_.length;if(0==y)self.postMessage({faces:[]});else{var b=_[0];for(m=1;m<y;m++)(_[m].neighbors>b.neighbors||_[m].neighbors==b.neighbors&&_[m].confidence>b.confidence)&&(b=_[m]);var x=l/h.cols;b.x=b.x*x|0,b.y=b.y*x|0,b.width=b.width*x|0,b.height=b.height*x|0,self.postMessage({faces:[b]})}},faceDetection=function(e,t){var r,a,n,i,o;void 0===t&&(t={}),void 0===t.workSize&&(t.workSize=200),void 0===t.minScale&&(t.minScale=2),void 0===t.scaleFactor&&(t.scaleFactor=1.15),void 0===t.useCanny&&(t.useCanny=!1),void 0===t.edgesDensity&&(t.edgesDensity=.13),void 0===t.equalizeHistogram&&(t.equalizeHistogram=!1),void 0===t.min_neighbors&&(t.min_neighbors=2),void 0===t.confidenceThreshold&&(t.confidenceThreshold=106.1),void 0===t.useWebWorkers&&(t.useWebWorkers=!0),window.Worker||(t.useWebWorkers=!1);var s,l,u,h=e,c=mosse.mosseFilter,f=mosse.filters.left_eye_filter,d=mosse.filters.right_eye_filter,v=mosse.filters.nose_filter,p=[0,0],g=[0,0],_=[0,0];h.hints&&c&&f&&d&&v?((s=new c).load(f),(l=new c).load(d),(u=new c).load(v)):console.log("MOSSE filters not found, using rough approximation for initialization.");var m=h.shapeModel.meanShape,y=h.patchModel.numPatches;n=0,r=a=1e6;for(var b=0;b<y;b++)m[b][0]<r&&(r=m[b][0]),m[b][1]<a&&(a=m[b][1]),m[b][1]>n&&(n=m[b][1]);i=n-a;var x=new jsfeat_face(t);this.init=function(e){x.init(o=e)};var k=function(e){var t,n,m,y,b=e.x,x=e.y,k=e.width,w=e.height;if(h.hints&&c&&f&&d&&v){var C=4.5*k/10,T=6*k/10,S=u.track(o,Math.round(b+k/2-C/2),Math.round(x+w*(5/8)-C/2),C,C,!1),I=l.track(o,Math.round(b+3*k/4-T/2),Math.round(x+.4*w-T/2),T,T,!1),A=s.track(o,Math.round(b+k/4-T/2),Math.round(x+.4*w-T/2),T,T,!1);p[0]=Math.round(b+3*k/4-T/2)+I[0],p[1]=Math.round(x+.4*w-T/2)+I[1],g[0]=Math.round(b+k/4-T/2)+A[0],g[1]=Math.round(x+.4*w-T/2)+A[1],_[0]=Math.round(b+k/2-C/2)+S[0],_[1]=Math.round(x+w*(5/8)-C/2)+S[1];var R=function(e,t){for(var r=[],a=[],n=0;n<e.length;n++)r[n]=[e[n][0],e[n][1]];for(n=0;n<t.length;n++)a[n]=[t[n][0],t[n][1]];t=a,e=r;var i=[0,0];for(n=0;n<e.length;n++)i[0]+=e[n][0],i[1]+=e[n][1];i[0]/=e.length,i[1]/=e.length;var o=[0,0];for(n=0;n<t.length;n++)o[0]+=t[n][0],o[1]+=t[n][1];o[0]/=t.length,o[1]/=t.length;var s=i[0]-o[0],l=i[1]-o[1];for(n=0;n<t.length;n++)t[n][0]-=o[0],t[n][1]-=o[1];for(n=0;n<e.length;n++)e[n][0]-=i[0],e[n][1]-=i[1];var u=0;for(n=0;n<t.length;n++)u+=t[n][0]*t[n][0],u+=t[n][1]*t[n][1];u=Math.sqrt(u/t.length);var h=0;for(n=0;n<e.length;n++)h+=e[n][0]*e[n][0],h+=e[n][1]*e[n][1];var c=(h=Math.sqrt(h/e.length))/u;for(n=0;n<t.length;n++)t[n][0]*=c,t[n][1]*=c;var f=0,d=0;for(n=0;n<t.length;n++)f+=t[n][0]*e[n][1]-t[n][1]*e[n][0],d+=t[n][0]*e[n][0]+t[n][1]*e[n][1];var v=Math.atan(f/d);return[s+=o[0]-c*Math.cos(-v)*o[0]-c*o[1]*Math.sin(-v),l+=o[1]+c*Math.sin(-v)*o[0]-c*o[1]*Math.cos(-v),c,v]}([g,p,_],[h.hints.leftEye,h.hints.rightEye,h.hints.nose]);t=R[0],n=R[1],m=R[2],y=R[3]}else y=0,t=b-r*(m=k/i)+.1*k,n=x-a*m+.25*w;return[m,y,t,n]};this.getInitialPosition=function(e){return new Promise((function(t,r){(function(e){return new Promise((function(t,r){t(e?{x:e[0],y:e[1],width:e[2],height:e[3]}:x.findFace())}))})(e).then(k).then(t).catch(r)}))}},jsfeat_face=function(e){var t,r,a,n,i,o,s,l,u,h,c,f,d,v,p=e,g=p.workSize,_=p.useWebWorkers,m=document.createElement("canvas"),y=m.getContext("2d");_&&(Worker.createURL=function(e){var t="function"==typeof e?e.toString():e,r=new Blob(["'use strict';\nself.onmessage ="+t],{type:"text/javascript"});return window.URL.createObjectURL(r)},Worker.create=function(e){return new Worker(Worker.createURL(e))},v=Worker.create(findFaceWorker)),this.init=function(e){t=(n=e).width,r=n.height,a=Math.min(g/t,g/r),i=t*a|0,m.height=o=r*a|0,m.width=i,_||(s=new jsfeat_1.matrix_t(i,o,jsfeat_1.U8_t|jsfeat_1.C1_t),l=new jsfeat_1.matrix_t(i,o,jsfeat_1.U8_t|jsfeat_1.C1_t),u=new Int32Array((i+1)*(o+1)),h=new Int32Array((i+1)*(o+1)),c=new Int32Array((i+1)*(o+1)),f=new Int32Array((i+1)*(o+1)),d=jsfeat_1.haar.frontalface)},this.findFace=function(){y.drawImage(n,0,0,m.width,m.height);var e=y.getImageData(0,0,m.width,m.height);return new Promise((function(r,a){if(_)v.addEventListener("message",(function(e){e.data.faces.length>0?r(e.data.faces[0]):a()}).bind(this),!1),v.postMessage({w:m.width,h:m.height,videoWidth:t,imageData:e,params:p});else{jsfeat_1.imgproc.grayscale(e.data,m.width,m.height,s),p.equalizeHistogram&&jsfeat_1.imgproc.equalize_histogram(s,s),jsfeat_1.imgproc.compute_integral_image(s,u,h,d.tilted?c:null),p.useCanny&&(jsfeat_1.imgproc.canny(s,l,10,50),jsfeat_1.imgproc.compute_integral_image(l,f,null,null)),jsfeat_1.haar.edgesDensity=p.edgesDensity;for(var n=jsfeat_1.haar.detect_multi_scale(u,h,c,p.useCanny?f:null,s.cols,s.rows,d,p.scaleFactor,p.minScale),i=(n=jsfeat_1.haar.group_rectangles(n,p.min_neighbors)).length-1;i>=0;i--)n[i].confidence<p.confidenceThreshold&&n.splice(i,1);var o=n.length;if(0==o)a();else{var g=n[0];for(i=1;i<o;i++)(n[i].neighbors>g.neighbors||n[i].neighbors==g.neighbors&&n[i].confidence>g.confidence)&&(g=n[i]);var y=t/s.cols;g.x=g.x*y|0,g.y=g.y*y|0,g.width=g.width*y|0,g.height=g.height*y|0,r(g)}}}))}};function FFT$1(){var e,t,r=0,a=null,n=null;function i(e,t,i){for(var o,s,l,u,h,c,f,d,v,p=r>>2,g=0;g<r;g++)g<(u=a[g])&&(h=e[g],e[g]=e[u],e[u]=h,h=t[g],t[g]=t[u],t[u]=h);for(var _=1;_<r;_<<=1){s=0,o=r/(_<<1);for(var m=0;m<_;m++){c=n[s+p],f=i*n[s];for(var y=m;y<r;y+=_<<1)v=c*t[l=y+_]-f*e[l],e[l]=e[y]-(d=c*e[l]+f*t[l]),e[y]+=d,t[l]=t[y]-v,t[y]+=v;s+=o}}}this.init=function(i){if(0===i||0!=(i&i-1))throw new Error("init: radix-2 required");r=i,a="undefined"!=typeof Uint8Array?new Uint8Array(r):new Array(r),"undefined"!=typeof Float64Array?(n=new Float64Array(1.25*r),e=new Float64Array(r),t=new Float64Array(r)):(n=new Array(1.25*r),e=new Array(r),t=new Array(r)),function(){var e=0,t=0,n=0;for(a[0]=0;++e<r;){for(n=r>>1;n<=t;)t-=n,n>>=1;a[e]=t+=n}}(),function(){var e=r>>1,t=r>>2,a=r>>3,i=e+t,o=Math.sin(Math.PI/r),s=2*o*o,l=Math.sqrt(s*(2-s)),u=n[t]=1,h=n[0]=0;o=2*s;for(var c=1;c<a;c++)s+=o*(u-=s),l-=o*(h+=l),n[c]=h,n[t-c]=u;0!==a&&(n[a]=Math.sqrt(.5));for(var f=0;f<t;f++)n[e-f]=n[f];for(var d=0;d<i;d++)n[d+e]=-n[d]}()},this.fft1d=function(e,t){i(e,t,1)},this.ifft1d=function(e,t){var a=1/r;i(e,t,-1);for(var n=0;n<r;n++)e[n]*=a,t[n]*=a},this.fft2d=function(a,n){for(var i=0,o=0;o<r;o++){i=o*r;for(var s=0;s<r;s++)e[s]=a[s+i],t[s]=n[s+i];this.fft1d(e,t);for(var l=0;l<r;l++)a[l+i]=e[l],n[l+i]=t[l]}for(var u=0;u<r;u++){for(var h=0;h<r;h++)e[h]=a[i=u+h*r],t[h]=n[i];this.fft1d(e,t);for(var c=0;c<r;c++)a[i=u+c*r]=e[c],n[i]=t[c]}},this.ifft2d=function(a,n){for(var i=0,o=0;o<r;o++){i=o*r;for(var s=0;s<r;s++)e[s]=a[s+i],t[s]=n[s+i];this.ifft1d(e,t);for(var l=0;l<r;l++)a[l+i]=e[l],n[l+i]=t[l]}for(var u=0;u<r;u++){for(var h=0;h<r;h++)e[h]=a[i=u+h*r],t[h]=n[i];this.ifft1d(e,t);for(var c=0;c<r;c++)a[i=u+c*r]=e[c],n[i]=t[c]}},this.real_ifft2d=function(a,n){for(var i,o=0,s=0;s<r;s++){o=s*r;for(var l=0;l<r;l++)e[l]=a[l+o],t[l]=n[l+o];this.ifft1d(e,t);for(var u=0;u<r;u++)a[u+o]=e[u],n[u+o]=t[u]}for(var h=r/2,c=0,f=0;f<r;f+=2){for(i=f+1,e[0]=a[0+(o=f)],t[0]=a[0+i],e[r/2]=a[h*r+o],t[r/2]=a[h*r+i],u=1;u<h;u++)e[u]=a[(c=u*r)+o]-n[c+i],e[r-u]=a[c+o]+n[c+i],t[u]=n[c+o]+a[c+i],t[r-u]=a[c+i]-n[c+o];this.ifft1d(e,t);for(var d=0;d<r;d++)i=f+1+d*r,a[o=f+d*r]=e[d],a[i]=t[d]}},this.real_fft2d=function(a,n){for(var i=0,o=0,s=0;s<r;s+=2){i=s*r,o=(s+1)*r;for(var l=0;l<r;l++)e[l]=a[l+i],t[l]=a[l+o];this.fft1d(e,t),a[0+i]=e[0],a[0+o]=t[0],n[0+i]=0,n[0+o]=0,a[r/2+i]=e[r/2],a[r/2+o]=t[r/2],n[r/2+i]=0,n[r/2+o]=0;for(var u=1;u<r/2;u++)a[u+i]=.5*(e[u]+e[r-u]),n[u+i]=.5*(t[u]-t[r-u]),a[u+o]=.5*(t[u]+t[r-u]),n[u+o]=-.5*(e[u]-e[r-u]),a[r-u+i]=a[u+i],n[r-u+i]=-n[u+i],a[r-u+o]=a[u+o],n[r-u+o]=-n[u+o]}for(var h=0;h<r;h++){for(var c=0;c<r;c++)e[c]=a[i=h+c*r],t[c]=n[i];this.fft1d(e,t);for(var f=0;f<r;f++)a[i=h+f*r]=e[f],n[i]=t[f]}}}jsfeat_1.haar.frontalface={complexClassifiers:[{simpleClassifiers:[{features:[[3,7,14,4,-1],[3,9,14,2,2]],threshold:.004014195874333382,right_val:.8378106951713562,left_val:.0337941907346249},{features:[[1,2,18,4,-1],[7,2,6,4,3]],threshold:.0151513395830989,right_val:.7488812208175659,left_val:.1514132022857666},{features:[[1,7,15,9,-1],[1,10,15,3,3]],threshold:.004210993181914091,right_val:.6374819874763489,left_val:.0900492817163467}],threshold:.822689414024353},{simpleClassifiers:[{features:[[5,6,2,6,-1],[5,9,2,3,2]],threshold:.0016227109590545297,right_val:.7110946178436279,left_val:.0693085864186287},{features:[[7,5,6,3,-1],[9,5,2,3,3]],threshold:.002290664939209819,right_val:.6668692231178284,left_val:.1795803010463715},{features:[[4,0,12,9,-1],[4,3,12,3,3]],threshold:.005002570804208517,right_val:.6554006934165955,left_val:.1693672984838486},{features:[[6,9,10,8,-1],[6,13,10,4,2]],threshold:.007965989410877228,right_val:.0914145186543465,left_val:.5866332054138184},{features:[[3,6,14,8,-1],[3,10,14,4,2]],threshold:-.003522701095789671,right_val:.6031895875930786,left_val:.1413166970014572},{features:[[14,1,6,10,-1],[14,1,3,10,2]],threshold:.0366676896810532,right_val:.7920318245887756,left_val:.3675672113895416},{features:[[7,8,5,12,-1],[7,12,5,4,3]],threshold:.009336147457361221,right_val:.2088509947061539,left_val:.6161385774612427},{features:[[1,1,18,3,-1],[7,1,6,3,3]],threshold:.008696131408214569,right_val:.6360273957252502,left_val:.2836230993270874},{features:[[1,8,17,2,-1],[1,9,17,1,2]],threshold:.0011488880263641477,right_val:.5800700783729553,left_val:.2223580926656723},{features:[[16,6,4,2,-1],[16,7,4,1,2]],threshold:-.002148468978703022,right_val:.5787054896354675,left_val:.2406464070081711},{features:[[5,17,2,2,-1],[5,18,2,1,2]],threshold:.002121906029060483,right_val:.136223703622818,left_val:.5559654831886292},{features:[[14,2,6,12,-1],[14,2,3,12,2]],threshold:-.0939491465687752,right_val:.4717740118503571,left_val:.8502737283706665},{features:[[4,0,4,12,-1],[4,0,2,6,2],[6,6,2,6,2]],threshold:.0013777789426967502,right_val:.2834529876708984,left_val:.5993673801422119},{features:[[2,11,18,8,-1],[8,11,6,8,3]],threshold:.0730631574988365,right_val:.7060034275054932,left_val:.4341886043548584},{features:[[5,7,10,2,-1],[5,8,10,1,2]],threshold:.00036767389974556863,right_val:.6051574945449829,left_val:.3027887940406799},{features:[[15,11,5,3,-1],[15,12,5,1,3]],threshold:-.0060479710809886456,right_val:.5675256848335266,left_val:.17984339594841}],threshold:6.956608772277832},{simpleClassifiers:[{features:[[5,3,10,9,-1],[5,6,10,3,3]],threshold:-.0165106896311045,right_val:.1424857974052429,left_val:.6644225120544434},{features:[[9,4,2,14,-1],[9,11,2,7,2]],threshold:.002705249935388565,right_val:.1288477033376694,left_val:.6325352191925049},{features:[[3,5,4,12,-1],[3,9,4,4,3]],threshold:.002806986914947629,right_val:.6193193197250366,left_val:.1240288019180298},{features:[[4,5,12,5,-1],[8,5,4,5,3]],threshold:-.0015402400167658925,right_val:.5670015811920166,left_val:.1432143002748489},{features:[[5,6,10,8,-1],[5,10,10,4,2]],threshold:-.0005638627917505801,right_val:.5905207991600037,left_val:.1657433062791824},{features:[[8,0,6,9,-1],[8,3,6,3,3]],threshold:.0019253729842603207,right_val:.5738824009895325,left_val:.2695507109165192},{features:[[9,12,1,8,-1],[9,16,1,4,2]],threshold:-.005021484103053808,right_val:.5782774090766907,left_val:.1893538981676102},{features:[[0,7,20,6,-1],[0,9,20,2,3]],threshold:.0026365420781075954,right_val:.5695425868034363,left_val:.2309329062700272},{features:[[7,0,6,17,-1],[9,0,2,17,3]],threshold:-.0015127769438549876,right_val:.5956642031669617,left_val:.2759602069854736},{features:[[9,0,6,4,-1],[11,0,2,4,3]],threshold:-.0101574398577213,right_val:.5522047281265259,left_val:.1732538044452667},{features:[[5,1,6,4,-1],[7,1,2,4,3]],threshold:-.011953660286963,right_val:.5559014081954956,left_val:.1339409947395325},{features:[[12,1,6,16,-1],[14,1,2,16,3]],threshold:.004885949194431305,right_val:.6188849210739136,left_val:.3628703951835632},{features:[[0,5,18,8,-1],[0,5,9,4,2],[9,9,9,4,2]],threshold:-.0801329165697098,right_val:.5475944876670837,left_val:.0912110507488251},{features:[[8,15,10,4,-1],[13,15,5,2,2],[8,17,5,2,2]],threshold:.0010643280111253262,right_val:.5711399912834167,left_val:.3715142905712128},{features:[[3,1,4,8,-1],[3,1,2,4,2],[5,5,2,4,2]],threshold:-.0013419450260698795,right_val:.331809788942337,left_val:.5953313708305359},{features:[[3,6,14,10,-1],[10,6,7,5,2],[3,11,7,5,2]],threshold:-.0546011403203011,right_val:.5602846145629883,left_val:.1844065934419632},{features:[[2,1,6,16,-1],[4,1,2,16,3]],threshold:.0029071690514683723,right_val:.6131715178489685,left_val:.3594244122505188},{features:[[0,18,20,2,-1],[0,19,20,1,2]],threshold:.0007471871795132756,right_val:.3459562957286835,left_val:.5994353294372559},{features:[[8,13,4,3,-1],[8,14,4,1,3]],threshold:.004301380831748247,right_val:.6990845203399658,left_val:.4172652065753937},{features:[[9,14,2,3,-1],[9,15,2,1,3]],threshold:.004501757211983204,right_val:.7801457047462463,left_val:.4509715139865875},{features:[[0,12,9,6,-1],[0,14,9,2,3]],threshold:.0241385009139776,right_val:.1319826990365982,left_val:.5438212752342224}],threshold:9.498542785644531},{simpleClassifiers:[{features:[[5,7,3,4,-1],[5,9,3,2,2]],threshold:.001921223010867834,right_val:.6199870705604553,left_val:.1415266990661621},{features:[[9,3,2,16,-1],[9,11,2,8,2]],threshold:-.00012748669541906565,right_val:.1884928941726685,left_val:.6191074252128601},{features:[[3,6,13,8,-1],[3,10,13,4,2]],threshold:.0005140993162058294,right_val:.5857927799224854,left_val:.1487396955490112},{features:[[12,3,8,2,-1],[12,3,4,2,2]],threshold:.004187860991805792,right_val:.6359239816665649,left_val:.2746909856796265},{features:[[8,8,4,12,-1],[8,12,4,4,3]],threshold:.005101571790874004,right_val:.2175628989934921,left_val:.5870851278305054},{features:[[11,3,8,6,-1],[15,3,4,3,2],[11,6,4,3,2]],threshold:-.002144844038411975,right_val:.2979590892791748,left_val:.5880944728851318},{features:[[7,1,6,19,-1],[9,1,2,19,3]],threshold:-.0028977119363844395,right_val:.5876647233963013,left_val:.2373327016830444},{features:[[9,0,6,4,-1],[11,0,2,4,3]],threshold:-.0216106791049242,right_val:.5194202065467834,left_val:.1220654994249344},{features:[[3,1,9,3,-1],[6,1,3,3,3]],threshold:-.004629931878298521,right_val:.5817409157752991,left_val:.263123095035553},{features:[[8,15,10,4,-1],[13,15,5,2,2],[8,17,5,2,2]],threshold:.000593937118537724,right_val:.5698544979095459,left_val:.363862007856369},{features:[[0,3,6,10,-1],[3,3,3,10,2]],threshold:.0538786612451077,right_val:.7559366226196289,left_val:.4303531050682068},{features:[[3,4,15,15,-1],[3,9,15,5,3]],threshold:.0018887349870055914,right_val:.561342716217041,left_val:.2122603058815002},{features:[[6,5,8,6,-1],[6,7,8,2,3]],threshold:-.0023635339457541704,right_val:.2642767131328583,left_val:.563184916973114},{features:[[4,4,12,10,-1],[10,4,6,5,2],[4,9,6,5,2]],threshold:.0240177996456623,right_val:.2751705944538117,left_val:.5797107815742493},{features:[[6,4,4,4,-1],[8,4,2,4,2]],threshold:.00020543030404951423,right_val:.575256884098053,left_val:.2705242037773132},{features:[[15,11,1,2,-1],[15,12,1,1,2]],threshold:.0008479019743390381,right_val:.2334876954555512,left_val:.5435624718666077},{features:[[3,11,2,2,-1],[3,12,2,1,2]],threshold:.0014091329649090767,right_val:.2063155025243759,left_val:.5319424867630005},{features:[[16,11,1,3,-1],[16,12,1,1,3]],threshold:.0014642629539594054,right_val:.3068861067295075,left_val:.5418980717658997},{features:[[3,15,6,4,-1],[3,15,3,2,2],[6,17,3,2,2]],threshold:.0016352549428120255,right_val:.6112868189811707,left_val:.3695372939109802},{features:[[6,7,8,2,-1],[6,8,8,1,2]],threshold:.0008317275205627084,right_val:.6025236248970032,left_val:.3565036952495575},{features:[[3,11,1,3,-1],[3,12,1,1,3]],threshold:-.0020998890977352858,right_val:.5362827181816101,left_val:.1913982033729553},{features:[[6,0,12,2,-1],[6,1,12,1,2]],threshold:-.0007421398186124861,right_val:.552931010723114,left_val:.3835555016994476},{features:[[9,14,2,3,-1],[9,15,2,1,3]],threshold:.0032655049581080675,right_val:.7101895809173584,left_val:.4312896132469177},{features:[[7,15,6,2,-1],[7,16,6,1,2]],threshold:.0008913499186746776,right_val:.6391963958740234,left_val:.3984830975532532},{features:[[0,5,4,6,-1],[0,7,4,2,3]],threshold:-.0152841797098517,right_val:.5433713793754578,left_val:.2366732954978943},{features:[[4,12,12,2,-1],[8,12,4,2,3]],threshold:.004838141147047281,right_val:.3239189088344574,left_val:.5817500948905945},{features:[[6,3,1,9,-1],[6,6,1,3,3]],threshold:-.0009109317907132208,right_val:.2911868989467621,left_val:.5540593862533569},{features:[[10,17,3,2,-1],[11,17,1,2,3]],threshold:-.006127506028860807,right_val:.5196629166603088,left_val:.1775255054235458},{features:[[9,9,2,2,-1],[9,10,2,1,2]],threshold:-.00044576259097084403,right_val:.5533593893051147,left_val:.3024170100688934},{features:[[7,6,6,4,-1],[9,6,2,4,3]],threshold:.0226465407758951,right_val:.6975377202033997,left_val:.4414930939674377},{features:[[7,17,3,2,-1],[8,17,1,2,3]],threshold:-.0018804960418492556,right_val:.5497952103614807,left_val:.2791394889354706},{features:[[10,17,3,3,-1],[11,17,1,3,3]],threshold:.007088910788297653,right_val:.2385547012090683,left_val:.5263199210166931},{features:[[8,12,3,2,-1],[8,13,3,1,2]],threshold:.0017318050377070904,right_val:.6983600854873657,left_val:.4319379031658173},{features:[[9,3,6,2,-1],[11,3,2,2,3]],threshold:-.006848270073533058,right_val:.5390920042991638,left_val:.3082042932510376},{features:[[3,11,14,4,-1],[3,13,14,2,2]],threshold:-15062530110299122e-21,right_val:.3120366036891937,left_val:.552192211151123},{features:[[1,10,18,4,-1],[10,10,9,2,2],[1,12,9,2,2]],threshold:.0294755697250366,right_val:.1770603060722351,left_val:.5401322841644287},{features:[[0,10,3,3,-1],[0,11,3,1,3]],threshold:.008138732984662056,right_val:.121101900935173,left_val:.5178617835044861},{features:[[9,1,6,6,-1],[11,1,2,6,3]],threshold:.0209429506212473,right_val:.3311221897602081,left_val:.5290294289588928},{features:[[8,7,3,6,-1],[9,7,1,6,3]],threshold:-.009566552937030792,right_val:.4451968967914581,left_val:.7471994161605835}],threshold:18.4129695892334},{simpleClassifiers:[{features:[[1,0,18,9,-1],[1,3,18,3,3]],threshold:-.00028206960996612906,right_val:.6076732277870178,left_val:.2064086049795151},{features:[[12,10,2,6,-1],[12,13,2,3,2]],threshold:.00167906004935503,right_val:.1255383938550949,left_val:.5851997137069702},{features:[[0,5,19,8,-1],[0,9,19,4,2]],threshold:.0006982791237533092,right_val:.5728961229324341,left_val:.094018429517746},{features:[[7,0,6,9,-1],[9,0,2,9,3]],threshold:.0007895901217125356,right_val:.5694308876991272,left_val:.1781987994909287},{features:[[5,3,6,1,-1],[7,3,2,1,3]],threshold:-.002856049919500947,right_val:.5788664817810059,left_val:.1638399064540863},{features:[[11,3,6,1,-1],[13,3,2,1,3]],threshold:-.0038122469559311867,right_val:.5508564710617065,left_val:.2085440009832382},{features:[[5,10,4,6,-1],[5,13,4,3,2]],threshold:.0015896620461717248,right_val:.1857215017080307,left_val:.5702760815620422},{features:[[11,3,6,1,-1],[13,3,2,1,3]],threshold:.0100783398374915,right_val:.2189770042896271,left_val:.5116943120956421},{features:[[4,4,12,6,-1],[4,6,12,2,3]],threshold:-.0635263025760651,right_val:.4043813049793243,left_val:.7131379842758179},{features:[[15,12,2,6,-1],[15,14,2,2,3]],threshold:-.009103149175643921,right_val:.54639732837677,left_val:.2567181885242462},{features:[[9,3,2,2,-1],[10,3,1,2,2]],threshold:-.002403500024229288,right_val:.559097409248352,left_val:.1700665950775147},{features:[[9,3,3,1,-1],[10,3,1,1,3]],threshold:.001522636041045189,right_val:.2619054019451141,left_val:.5410556793212891},{features:[[1,1,4,14,-1],[3,1,2,14,2]],threshold:.0179974399507046,right_val:.6535220742225647,left_val:.3732436895370483},{features:[[9,0,4,4,-1],[11,0,2,2,2],[9,2,2,2,2]],threshold:-.00645381910726428,right_val:.5537446141242981,left_val:.2626481950283051},{features:[[7,5,1,14,-1],[7,12,1,7,2]],threshold:-.0118807600811124,right_val:.5544745922088623,left_val:.2003753930330277},{features:[[19,0,1,4,-1],[19,2,1,2,2]],threshold:.0012713660253211856,right_val:.303197592496872,left_val:.5591902732849121},{features:[[5,5,6,4,-1],[8,5,3,4,2]],threshold:.0011376109905540943,right_val:.5646508932113647,left_val:.2730407118797302},{features:[[9,18,3,2,-1],[10,18,1,2,3]],threshold:-.00426519988104701,right_val:.5461820960044861,left_val:.1405909061431885},{features:[[8,18,3,2,-1],[9,18,1,2,3]],threshold:-.0029602861031889915,right_val:.5459290146827698,left_val:.1795035004615784},{features:[[4,5,12,6,-1],[4,7,12,2,3]],threshold:-.008844822645187378,right_val:.280921995639801,left_val:.5736783146858215},{features:[[3,12,2,6,-1],[3,14,2,2,3]],threshold:-.006643068976700306,right_val:.5503826141357422,left_val:.2370675951242447},{features:[[10,8,2,12,-1],[10,12,2,4,3]],threshold:.003999780863523483,right_val:.3304282128810883,left_val:.5608199834823608},{features:[[7,18,3,2,-1],[8,18,1,2,3]],threshold:-.004122172016650438,right_val:.5378993153572083,left_val:.1640105992555618},{features:[[9,0,6,2,-1],[11,0,2,2,3]],threshold:.0156249096617103,right_val:.2288603931665421,left_val:.5227649211883545},{features:[[5,11,9,3,-1],[5,12,9,1,3]],threshold:-.0103564197197557,right_val:.4252927899360657,left_val:.7016193866729736},{features:[[9,0,6,2,-1],[11,0,2,2,3]],threshold:-.008796080946922302,right_val:.5355830192565918,left_val:.2767347097396851},{features:[[1,1,18,5,-1],[7,1,6,5,3]],threshold:.1622693985700607,right_val:.744257926940918,left_val:.434224009513855},{features:[[8,0,4,4,-1],[10,0,2,2,2],[8,2,2,2,2]],threshold:.0045542530715465546,right_val:.2582125067710877,left_val:.5726485848426819},{features:[[3,12,1,3,-1],[3,13,1,1,3]],threshold:-.002130920998752117,right_val:.5361018776893616,left_val:.2106848061084747},{features:[[8,14,5,3,-1],[8,15,5,1,3]],threshold:-.0132084200158715,right_val:.4552468061447144,left_val:.7593790888786316},{features:[[5,4,10,12,-1],[5,4,5,6,2],[10,10,5,6,2]],threshold:-.0659966766834259,right_val:.5344039797782898,left_val:.125247597694397},{features:[[9,6,9,12,-1],[9,10,9,4,3]],threshold:.007914265617728233,right_val:.5601043105125427,left_val:.3315384089946747},{features:[[2,2,12,14,-1],[2,2,6,7,2],[8,9,6,7,2]],threshold:.0208942797034979,right_val:.2768838107585907,left_val:.5506049990653992}],threshold:15.324139595031738},{simpleClassifiers:[{features:[[4,7,12,2,-1],[8,7,4,2,3]],threshold:.0011961159761995077,right_val:.6156241297721863,left_val:.1762690991163254},{features:[[7,4,6,4,-1],[7,6,6,2,2]],threshold:-.0018679830245673656,right_val:.1832399964332581,left_val:.6118106842041016},{features:[[4,5,11,8,-1],[4,9,11,4,2]],threshold:-.00019579799845814705,right_val:.5723816156387329,left_val:.0990442633628845},{features:[[3,10,16,4,-1],[3,12,16,2,2]],threshold:-.0008025565766729414,right_val:.2377282977104187,left_val:.5579879879951477},{features:[[0,0,16,2,-1],[0,1,16,1,2]],threshold:-.0024510810617357492,right_val:.5858935117721558,left_val:.2231457978487015},{features:[[7,5,6,2,-1],[9,5,2,2,3]],threshold:.0005036185029894114,right_val:.5794103741645813,left_val:.2653993964195252},{features:[[3,2,6,10,-1],[3,2,3,5,2],[6,7,3,5,2]],threshold:.0040293349884450436,right_val:.2484865039587021,left_val:.5803827047348022},{features:[[10,5,8,15,-1],[10,10,8,5,3]],threshold:-.0144517095759511,right_val:.5484204888343811,left_val:.1830351948738098},{features:[[3,14,8,6,-1],[3,14,4,3,2],[7,17,4,3,2]],threshold:.0020380979403853416,right_val:.6051092743873596,left_val:.3363558948040009},{features:[[14,2,2,2,-1],[14,3,2,1,2]],threshold:-.0016155190533027053,right_val:.5441246032714844,left_val:.2286642044782639},{features:[[1,10,7,6,-1],[1,13,7,3,2]],threshold:.0033458340913057327,right_val:.2392338067293167,left_val:.5625913143157959},{features:[[15,4,4,3,-1],[15,4,2,3,2]],threshold:.0016379579901695251,right_val:.5964621901512146,left_val:.3906993865966797},{features:[[2,9,14,6,-1],[2,9,7,3,2],[9,12,7,3,2]],threshold:.0302512105554342,right_val:.1575746983289719,left_val:.524848222732544},{features:[[5,7,10,4,-1],[5,9,10,2,2]],threshold:.037251990288496,right_val:.6748418807983398,left_val:.4194310903549194},{features:[[6,9,8,8,-1],[6,9,4,4,2],[10,13,4,4,2]],threshold:-.0251097902655602,right_val:.5473451018333435,left_val:.1882549971342087},{features:[[14,1,3,2,-1],[14,2,3,1,2]],threshold:-.005309905856847763,right_val:.5227110981941223,left_val:.133997306227684},{features:[[1,4,4,2,-1],[3,4,2,2,2]],threshold:.0012086479691788554,right_val:.6109635829925537,left_val:.3762088119983673},{features:[[11,10,2,8,-1],[11,14,2,4,2]],threshold:-.0219076797366142,right_val:.5404006838798523,left_val:.266314297914505},{features:[[0,0,5,3,-1],[0,1,5,1,3]],threshold:.0054116579703986645,right_val:.2232273072004318,left_val:.5363578796386719},{features:[[2,5,18,8,-1],[11,5,9,4,2],[2,9,9,4,2]],threshold:.069946326315403,right_val:.2453698068857193,left_val:.5358232855796814},{features:[[6,6,1,6,-1],[6,9,1,3,2]],threshold:.00034520021290518343,right_val:.5376930236816406,left_val:.2409671992063522},{features:[[19,1,1,3,-1],[19,2,1,1,3]],threshold:.0012627709656953812,right_val:.3155693113803864,left_val:.5425856709480286},{features:[[7,6,6,6,-1],[9,6,2,6,3]],threshold:.0227195098996162,right_val:.6597865223884583,left_val:.4158405959606171},{features:[[19,1,1,3,-1],[19,2,1,1,3]],threshold:-.001811100053600967,right_val:.5505244731903076,left_val:.2811253070831299},{features:[[3,13,2,3,-1],[3,14,2,1,3]],threshold:.0033469670452177525,right_val:.1891465038061142,left_val:.526002824306488},{features:[[8,4,8,12,-1],[12,4,4,6,2],[8,10,4,6,2]],threshold:.00040791751234792173,right_val:.3344210088253021,left_val:.5673509240150452},{features:[[5,2,6,3,-1],[7,2,2,3,3]],threshold:.0127347996458411,right_val:.2395612001419067,left_val:.5343592166900635},{features:[[6,1,9,10,-1],[6,6,9,5,2]],threshold:-.007311972789466381,right_val:.4022207856178284,left_val:.6010890007019043},{features:[[0,4,6,12,-1],[2,4,2,12,3]],threshold:-.0569487512111664,right_val:.4543190896511078,left_val:.8199151158332825},{features:[[15,13,2,3,-1],[15,14,2,1,3]],threshold:-.005011659115552902,right_val:.5357710719108582,left_val:.2200281023979187},{features:[[7,14,5,3,-1],[7,15,5,1,3]],threshold:.006033436860889196,right_val:.7181751132011414,left_val:.4413081109523773},{features:[[15,13,3,3,-1],[15,14,3,1,3]],threshold:.0039437441155314445,right_val:.2791733145713806,left_val:.547886073589325},{features:[[6,14,8,3,-1],[6,15,8,1,3]],threshold:-.0036591119132936,right_val:.3989723920822144,left_val:.635786771774292},{features:[[15,13,3,3,-1],[15,14,3,1,3]],threshold:-.0038456181064248085,right_val:.5300664901733398,left_val:.3493686020374298},{features:[[2,13,3,3,-1],[2,14,3,1,3]],threshold:-.007192626129835844,right_val:.5229672789573669,left_val:.1119614988565445},{features:[[4,7,12,12,-1],[10,7,6,6,2],[4,13,6,6,2]],threshold:-.0527989417314529,right_val:.54534512758255,left_val:.2387102991342545},{features:[[9,7,2,6,-1],[10,7,1,6,2]],threshold:-.007953766733407974,right_val:.4439376890659332,left_val:.7586917877197266},{features:[[8,9,5,2,-1],[8,10,5,1,2]],threshold:-.0027344180271029472,right_val:.5489321947097778,left_val:.2565476894378662},{features:[[8,6,3,4,-1],[9,6,1,4,3]],threshold:-.0018507939530536532,right_val:.4252474904060364,left_val:.6734347939491272},{features:[[9,6,2,8,-1],[9,10,2,4,2]],threshold:.0159189198166132,right_val:.2292661964893341,left_val:.548835277557373},{features:[[7,7,3,6,-1],[8,7,1,6,3]],threshold:-.0012687679845839739,right_val:.4022389948368073,left_val:.6104331016540527},{features:[[11,3,3,3,-1],[12,3,1,3,3]],threshold:.006288391072303057,right_val:.1536193042993546,left_val:.5310853123664856},{features:[[5,4,6,1,-1],[7,4,2,1,3]],threshold:-.0062259892001748085,right_val:.524160623550415,left_val:.1729111969470978},{features:[[5,6,10,3,-1],[5,7,10,1,3]],threshold:-.0121325999498367,right_val:.4325182139873505,left_val:.659775972366333}],threshold:21.010639190673828},{simpleClassifiers:[{features:[[7,3,6,9,-1],[7,6,6,3,3]],threshold:-.0039184908382594585,right_val:.1469330936670303,left_val:.6103435158729553},{features:[[6,7,9,1,-1],[9,7,3,1,3]],threshold:.0015971299726516008,right_val:.5896466970443726,left_val:.2632363140583038},{features:[[2,8,16,8,-1],[2,12,16,4,2]],threshold:.0177801102399826,right_val:.1760361939668655,left_val:.587287425994873},{features:[[14,6,2,6,-1],[14,9,2,3,2]],threshold:.0006533476989716291,right_val:.5596066117286682,left_val:.1567801982164383},{features:[[1,5,6,15,-1],[1,10,6,5,3]],threshold:-.00028353091329336166,right_val:.5732036232948303,left_val:.1913153976202011},{features:[[10,0,6,9,-1],[10,3,6,3,3]],threshold:.0016104689566418529,right_val:.5623080730438232,left_val:.2914913892745972},{features:[[6,6,7,14,-1],[6,13,7,7,2]],threshold:-.0977506190538406,right_val:.5648233294487,left_val:.194347694516182},{features:[[13,7,3,6,-1],[13,9,3,2,3]],threshold:.0005518235848285258,right_val:.5504639744758606,left_val:.3134616911411285},{features:[[1,8,15,4,-1],[6,8,5,4,3]],threshold:-.0128582203760743,right_val:.5760142803192139,left_val:.253648191690445},{features:[[11,2,3,10,-1],[11,7,3,5,2]],threshold:.004153023939579725,right_val:.36597740650177,left_val:.5767722129821777},{features:[[3,7,4,6,-1],[3,9,4,2,3]],threshold:.0017092459602281451,right_val:.5918939113616943,left_val:.2843191027641296},{features:[[13,3,6,10,-1],[15,3,2,10,3]],threshold:.007521735969930887,right_val:.6183109283447266,left_val:.4052427113056183},{features:[[5,7,8,10,-1],[5,7,4,5,2],[9,12,4,5,2]],threshold:.0022479810286313295,right_val:.3135401010513306,left_val:.578375518321991},{features:[[4,4,12,12,-1],[10,4,6,6,2],[4,10,6,6,2]],threshold:.0520062111318111,right_val:.1916636973619461,left_val:.5541312098503113},{features:[[1,4,6,9,-1],[3,4,2,9,3]],threshold:.0120855299755931,right_val:.6644591093063354,left_val:.4032655954360962},{features:[[11,3,2,5,-1],[11,3,1,5,2]],threshold:14687820112158079e-21,right_val:.5709382891654968,left_val:.3535977900028229},{features:[[7,3,2,5,-1],[8,3,1,5,2]],threshold:7139518857002258e-21,right_val:.5610269904136658,left_val:.3037444949150085},{features:[[10,14,2,3,-1],[10,15,2,1,3]],threshold:-.0046001640148460865,right_val:.4580326080322266,left_val:.7181087136268616},{features:[[5,12,6,2,-1],[8,12,3,2,2]],threshold:.0020058949012309313,right_val:.2953684031963348,left_val:.5621951818466187},{features:[[9,14,2,3,-1],[9,15,2,1,3]],threshold:.004505027085542679,right_val:.7619017958641052,left_val:.4615387916564941},{features:[[4,11,12,6,-1],[4,14,12,3,2]],threshold:.0117468303069472,right_val:.1772529035806656,left_val:.5343837141990662},{features:[[11,11,5,9,-1],[11,14,5,3,3]],threshold:-.0583163388073444,right_val:.5340772271156311,left_val:.1686245948076248},{features:[[6,15,3,2,-1],[6,16,3,1,2]],threshold:.00023629379575140774,right_val:.6026803851127625,left_val:.3792056143283844},{features:[[11,0,3,5,-1],[12,0,1,5,3]],threshold:-.007815618067979813,right_val:.5324323773384094,left_val:.151286706328392},{features:[[5,5,6,7,-1],[8,5,3,7,2]],threshold:-.0108761601150036,right_val:.5319945216178894,left_val:.2081822007894516},{features:[[13,0,1,9,-1],[13,3,1,3,3]],threshold:-.0027745519764721394,right_val:.5210328102111816,left_val:.4098246991634369},{features:[[3,2,4,8,-1],[3,2,2,4,2],[5,6,2,4,2]],threshold:-.0007827638182789087,right_val:.3478842079639435,left_val:.5693274140357971},{features:[[13,12,4,6,-1],[13,14,4,2,3]],threshold:.0138704096898437,right_val:.2257698029279709,left_val:.5326750874519348},{features:[[3,12,4,6,-1],[3,14,4,2,3]],threshold:-.0236749108880758,right_val:.5200707912445068,left_val:.1551305055618286},{features:[[13,11,3,4,-1],[13,13,3,2,2]],threshold:-14879409718560055e-21,right_val:.3820176124572754,left_val:.5500566959381104},{features:[[4,4,4,3,-1],[4,5,4,1,3]],threshold:.00361906411126256,right_val:.6639748215675354,left_val:.4238683879375458},{features:[[7,5,11,8,-1],[7,9,11,4,2]],threshold:-.0198171101510525,right_val:.5382357835769653,left_val:.2150038033723831},{features:[[7,8,3,4,-1],[8,8,1,4,3]],threshold:-.0038154039066284895,right_val:.4215297102928162,left_val:.6675711274147034},{features:[[9,1,6,1,-1],[11,1,2,1,3]],threshold:-.0049775829538702965,right_val:.5386328101158142,left_val:.2267289012670517},{features:[[5,5,3,3,-1],[5,6,3,1,3]],threshold:.002244102070108056,right_val:.6855735778808594,left_val:.4308691024780273},{features:[[0,9,20,6,-1],[10,9,10,3,2],[0,12,10,3,2]],threshold:.0122824599966407,right_val:.3467479050159454,left_val:.5836614966392517},{features:[[8,6,3,5,-1],[9,6,1,5,3]],threshold:-.002854869933798909,right_val:.4311453998088837,left_val:.7016944885253906},{features:[[11,0,1,3,-1],[11,1,1,1,3]],threshold:-.0037875669077038765,right_val:.5224946141242981,left_val:.2895345091819763},{features:[[4,2,4,2,-1],[4,3,4,1,2]],threshold:-.0012201230274513364,right_val:.5481644868850708,left_val:.2975570857524872},{features:[[12,6,4,3,-1],[12,7,4,1,3]],threshold:.010160599835217,right_val:.8182697892189026,left_val:.4888817965984345},{features:[[5,0,6,4,-1],[7,0,2,4,3]],threshold:-.0161745697259903,right_val:.5239992737770081,left_val:.1481492966413498},{features:[[9,7,3,8,-1],[10,7,1,8,3]],threshold:.0192924607545137,right_val:.7378190755844116,left_val:.4786309897899628},{features:[[9,7,2,2,-1],[10,7,1,2,2]],threshold:-.003247953951358795,right_val:.4470643997192383,left_val:.7374222874641418},{features:[[6,7,14,4,-1],[13,7,7,2,2],[6,9,7,2,2]],threshold:-.009380348026752472,right_val:.5537996292114258,left_val:.3489154875278473},{features:[[0,5,3,6,-1],[0,7,3,2,3]],threshold:-.0126061299815774,right_val:.5315443277359009,left_val:.2379686981439591},{features:[[13,11,3,4,-1],[13,13,3,2,2]],threshold:-.0256219301372766,right_val:.5138769745826721,left_val:.1964688003063202},{features:[[4,11,3,4,-1],[4,13,3,2,2]],threshold:-7574149640277028e-20,right_val:.3365853130817413,left_val:.5590522885322571},{features:[[5,9,12,8,-1],[11,9,6,4,2],[5,13,6,4,2]],threshold:-.0892108827829361,right_val:.516263484954834,left_val:.0634046569466591},{features:[[9,12,1,3,-1],[9,13,1,1,3]],threshold:-.002767048077657819,right_val:.4490706026554108,left_val:.732346773147583},{features:[[10,15,2,4,-1],[10,17,2,2,2]],threshold:.0002715257869567722,right_val:.5985518097877502,left_val:.411483496427536}],threshold:23.918790817260742},{simpleClassifiers:[{features:[[7,7,6,1,-1],[9,7,2,1,3]],threshold:.001478621968999505,right_val:.6643316745758057,left_val:.266354501247406},{features:[[12,3,6,6,-1],[15,3,3,3,2],[12,6,3,3,2]],threshold:-.001874165958724916,right_val:.2518512904644013,left_val:.6143848896026611},{features:[[0,4,10,6,-1],[0,6,10,2,3]],threshold:-.001715100952424109,right_val:.2397463023662567,left_val:.5766341090202332},{features:[[8,3,8,14,-1],[12,3,4,7,2],[8,10,4,7,2]],threshold:-.0018939269939437509,right_val:.2529144883155823,left_val:.5682045817375183},{features:[[4,4,7,15,-1],[4,9,7,5,3]],threshold:-.005300605203956366,right_val:.5556079745292664,left_val:.1640675961971283},{features:[[12,2,6,8,-1],[15,2,3,4,2],[12,6,3,4,2]],threshold:-.0466625317931175,right_val:.4762830138206482,left_val:.6123154163360596},{features:[[2,2,6,8,-1],[2,2,3,4,2],[5,6,3,4,2]],threshold:-.000794313324149698,right_val:.2839404046535492,left_val:.5707858800888062},{features:[[2,13,18,7,-1],[8,13,6,7,3]],threshold:.0148916700854898,right_val:.6006367206573486,left_val:.4089672863483429},{features:[[4,3,8,14,-1],[4,3,4,7,2],[8,10,4,7,2]],threshold:-.0012046529445797205,right_val:.2705289125442505,left_val:.5712450742721558},{features:[[18,1,2,6,-1],[18,3,2,2,3]],threshold:.006061938125640154,right_val:.3262225985527039,left_val:.526250422000885},{features:[[9,11,2,3,-1],[9,12,2,1,3]],threshold:-.0025286648888140917,right_val:.4199256896972656,left_val:.6853830814361572},{features:[[18,1,2,6,-1],[18,3,2,2,3]],threshold:-.005901021882891655,right_val:.5434812903404236,left_val:.3266282081604004},{features:[[0,1,2,6,-1],[0,3,2,2,3]],threshold:.005670276004821062,right_val:.2319003939628601,left_val:.5468410849571228},{features:[[1,5,18,6,-1],[1,7,18,2,3]],threshold:-.003030410036444664,right_val:.2708238065242767,left_val:.557066798210144},{features:[[0,2,6,7,-1],[3,2,3,7,2]],threshold:.002980364952236414,right_val:.5890625715255737,left_val:.3700568974018097},{features:[[7,3,6,14,-1],[7,10,6,7,2]],threshold:-.0758405104279518,right_val:.5419948101043701,left_val:.2140070050954819},{features:[[3,7,13,10,-1],[3,12,13,5,2]],threshold:.0192625392228365,right_val:.2726590037345886,left_val:.5526772141456604},{features:[[11,15,2,2,-1],[11,16,2,1,2]],threshold:.00018888259364757687,right_val:.6017209887504578,left_val:.3958011865615845},{features:[[2,11,16,4,-1],[2,11,8,2,2],[10,13,8,2,2]],threshold:.0293695498257875,right_val:.1435758024454117,left_val:.5241373777389526},{features:[[13,7,6,4,-1],[16,7,3,2,2],[13,9,3,2,2]],threshold:.0010417619487270713,right_val:.5929983258247375,left_val:.3385409116744995},{features:[[6,10,3,9,-1],[6,13,3,3,3]],threshold:.0026125640142709017,right_val:.3021597862243652,left_val:.5485377907752991},{features:[[14,6,1,6,-1],[14,9,1,3,2]],threshold:.0009697746718302369,right_val:.553203284740448,left_val:.3375276029109955},{features:[[5,10,4,1,-1],[7,10,2,1,2]],threshold:.0005951265920884907,right_val:.3359399139881134,left_val:.563174307346344},{features:[[3,8,15,5,-1],[8,8,5,5,3]],threshold:-.1015655994415283,right_val:.5230425000190735,left_val:.0637350380420685},{features:[[1,6,5,4,-1],[1,8,5,2,2]],threshold:.0361566990613937,right_val:.1029528975486755,left_val:.5136963129043579},{features:[[3,1,17,6,-1],[3,3,17,2,3]],threshold:.003462414024397731,right_val:.5558289289474487,left_val:.3879320025444031},{features:[[6,7,8,2,-1],[10,7,4,2,2]],threshold:.0195549800992012,right_val:.1875859946012497,left_val:.5250086784362793},{features:[[9,7,3,2,-1],[10,7,1,2,3]],threshold:-.0023121440317481756,right_val:.4679641127586365,left_val:.667202889919281},{features:[[8,7,3,2,-1],[9,7,1,2,3]],threshold:-.001860528951510787,right_val:.4334670901298523,left_val:.7163379192352295},{features:[[8,9,4,2,-1],[8,10,4,1,2]],threshold:-.0009402636205777526,right_val:.5650203227996826,left_val:.302136093378067},{features:[[8,8,4,3,-1],[8,9,4,1,3]],threshold:-.005241833161562681,right_val:.5250256061553955,left_val:.1820009052753449},{features:[[9,5,6,4,-1],[9,5,3,4,2]],threshold:.00011729019752237946,right_val:.544597327709198,left_val:.3389188051223755},{features:[[8,13,4,3,-1],[8,14,4,1,3]],threshold:.0011878840159624815,right_val:.6253563165664673,left_val:.4085349142551422},{features:[[4,7,12,6,-1],[10,7,6,3,2],[4,10,6,3,2]],threshold:-.0108813596889377,right_val:.5700082778930664,left_val:.3378399014472961},{features:[[8,14,4,3,-1],[8,15,4,1,3]],threshold:.0017354859737679362,right_val:.6523038744926453,left_val:.4204635918140411},{features:[[9,7,3,3,-1],[9,8,3,1,3]],threshold:-.00651190523058176,right_val:.5428143739700317,left_val:.2595216035842896},{features:[[7,4,3,8,-1],[8,4,1,8,3]],threshold:-.0012136430013924837,right_val:.3977893888950348,left_val:.6165143847465515},{features:[[10,0,3,6,-1],[11,0,1,6,3]],threshold:-.010354240424931,right_val:.5219504833221436,left_val:.1628028005361557},{features:[[6,3,4,8,-1],[8,3,2,8,2]],threshold:.0005585883045569062,right_val:.5503574013710022,left_val:.3199650943279266},{features:[[14,3,6,13,-1],[14,3,3,13,2]],threshold:.0152996499091387,right_val:.6122388243675232,left_val:.4103994071483612},{features:[[8,13,3,6,-1],[8,16,3,3,2]],threshold:-.021588210016489,right_val:.519738495349884,left_val:.103491298854351},{features:[[14,3,6,13,-1],[14,3,3,13,2]],threshold:-.1283462941646576,right_val:.4893102943897247,left_val:.8493865132331848},{features:[[0,7,10,4,-1],[0,7,5,2,2],[5,9,5,2,2]],threshold:-.0022927189711481333,right_val:.5471575260162354,left_val:.3130157887935638},{features:[[14,3,6,13,-1],[14,3,3,13,2]],threshold:.0799151062965393,right_val:.6073989272117615,left_val:.4856320917606354},{features:[[0,3,6,13,-1],[3,3,3,13,2]],threshold:-.0794410929083824,right_val:.462453305721283,left_val:.8394674062728882},{features:[[9,1,4,1,-1],[9,1,2,1,2]],threshold:-.00528000108897686,right_val:.5306698083877563,left_val:.1881695985794067},{features:[[8,0,2,1,-1],[9,0,1,1,2]],threshold:.0010463109938427806,right_val:.2583065927028656,left_val:.5271229147911072},{features:[[10,16,4,4,-1],[12,16,2,2,2],[10,18,2,2,2]],threshold:.00026317298761568964,right_val:.5735440850257874,left_val:.4235304892063141},{features:[[9,6,2,3,-1],[10,6,1,3,2]],threshold:-.0036173160187900066,right_val:.4495444893836975,left_val:.6934396028518677},{features:[[4,5,12,2,-1],[8,5,4,2,3]],threshold:.0114218797534704,right_val:.4138193130493164,left_val:.590092122554779},{features:[[8,7,3,5,-1],[9,7,1,5,3]],threshold:-.0019963278900831938,right_val:.4327239990234375,left_val:.6466382741928101}],threshold:24.52787971496582},{simpleClassifiers:[{features:[[6,4,8,6,-1],[6,6,8,2,3]],threshold:-.00996912457048893,right_val:.2482212036848068,left_val:.6142324209213257},{features:[[9,5,2,12,-1],[9,11,2,6,2]],threshold:.0007307305932044983,right_val:.2321965992450714,left_val:.5704951882362366},{features:[[4,6,6,8,-1],[4,10,6,4,2]],threshold:.0006404530140571296,right_val:.5814933180809021,left_val:.2112251967191696},{features:[[12,2,8,5,-1],[12,2,4,5,2]],threshold:.004542401991784573,right_val:.586631178855896,left_val:.2950482070446014},{features:[[0,8,18,3,-1],[0,9,18,1,3]],threshold:9247744310414419e-20,right_val:.5791326761245728,left_val:.2990990877151489},{features:[[8,12,4,8,-1],[8,16,4,4,2]],threshold:-.008660314604640007,right_val:.5635542273521423,left_val:.2813029885292053},{features:[[0,2,8,5,-1],[4,2,4,5,2]],threshold:.008051581680774689,right_val:.6054757237434387,left_val:.3535369038581848},{features:[[13,11,3,4,-1],[13,13,3,2,2]],threshold:.00043835240649059415,right_val:.2731510996818543,left_val:.5596532225608826},{features:[[5,11,6,1,-1],[7,11,2,1,3]],threshold:-981689736363478e-19,right_val:.3638561069965363,left_val:.5978031754493713},{features:[[11,3,3,1,-1],[12,3,1,1,3]],threshold:-.0011298790341243148,right_val:.5432729125022888,left_val:.2755252122879028},{features:[[7,13,5,3,-1],[7,14,5,1,3]],threshold:.006435615010559559,right_val:.7069833278656006,left_val:.4305641949176788},{features:[[11,11,7,6,-1],[11,14,7,3,2]],threshold:-.0568293295800686,right_val:.5294997096061707,left_val:.2495242953300476},{features:[[2,11,7,6,-1],[2,14,7,3,2]],threshold:.004066816996783018,right_val:.2497723996639252,left_val:.5478553175926208},{features:[[12,14,2,6,-1],[12,16,2,2,3]],threshold:481647984997835e-19,right_val:.5706356167793274,left_val:.3938601016998291},{features:[[8,14,3,3,-1],[8,15,3,1,3]],threshold:.00617950176820159,right_val:.7394766807556152,left_val:.440760612487793},{features:[[11,0,3,5,-1],[12,0,1,5,3]],threshold:.006498575210571289,right_val:.2479152977466583,left_val:.5445243120193481},{features:[[6,1,4,9,-1],[8,1,2,9,2]],threshold:-.0010211090557277203,right_val:.5338971018791199,left_val:.2544766962528229},{features:[[10,3,6,1,-1],[12,3,2,1,3]],threshold:-.005424752831459045,right_val:.5324069261550903,left_val:.2718858122825623},{features:[[8,8,3,4,-1],[8,10,3,2,2]],threshold:-.0010559899965301156,right_val:.553450882434845,left_val:.3178288042545319},{features:[[8,12,4,2,-1],[8,13,4,1,2]],threshold:.0006646580877713859,right_val:.6558194160461426,left_val:.4284219145774841},{features:[[5,18,4,2,-1],[5,19,4,1,2]],threshold:-.00027524109464138746,right_val:.3810262978076935,left_val:.5902860760688782},{features:[[2,1,18,6,-1],[2,3,18,2,3]],threshold:.004229320213198662,right_val:.5709385871887207,left_val:.381648987531662},{features:[[6,0,3,2,-1],[7,0,1,2,3]],threshold:-.0032868210691958666,right_val:.5259544253349304,left_val:.1747743934392929},{features:[[13,8,6,2,-1],[16,8,3,1,2],[13,9,3,1,2]],threshold:.0001561187964398414,right_val:.5725612044334412,left_val:.3601722121238709},{features:[[6,10,3,6,-1],[6,13,3,3,2]],threshold:-7362138148891972e-21,right_val:.3044497072696686,left_val:.540185809135437},{features:[[0,13,20,4,-1],[10,13,10,2,2],[0,15,10,2,2]],threshold:-.014767250046134,right_val:.5573434829711914,left_val:.3220770061016083},{features:[[7,7,6,5,-1],[9,7,2,5,3]],threshold:.0244895908981562,right_val:.6518812775611877,left_val:.4301528036594391},{features:[[11,0,2,2,-1],[11,1,2,1,2]],threshold:-.000376520911231637,right_val:.5598236918449402,left_val:.356458306312561},{features:[[1,8,6,2,-1],[1,8,3,1,2],[4,9,3,1,2]],threshold:736576885174145e-20,right_val:.556189775466919,left_val:.3490782976150513},{features:[[0,2,20,2,-1],[10,2,10,1,2],[0,3,10,1,2]],threshold:-.0150999398902059,right_val:.5335299968719482,left_val:.1776272058486939},{features:[[7,14,5,3,-1],[7,15,5,1,3]],threshold:-.0038316650316119194,right_val:.4221394062042236,left_val:.6149687767028809},{features:[[7,13,6,6,-1],[10,13,3,3,2],[7,16,3,3,2]],threshold:.0169254001230001,right_val:.2166585028171539,left_val:.5413014888763428},{features:[[9,12,2,3,-1],[9,13,2,1,3]],threshold:-.003047785023227334,right_val:.4354617893695831,left_val:.6449490785598755},{features:[[16,11,1,6,-1],[16,13,1,2,3]],threshold:.003214058931916952,right_val:.3523217141628265,left_val:.5400155186653137},{features:[[3,11,1,6,-1],[3,13,1,2,3]],threshold:-.004002320114523172,right_val:.5338417291641235,left_val:.2774524092674255},{features:[[4,4,14,12,-1],[11,4,7,6,2],[4,10,7,6,2]],threshold:.0074182129465043545,right_val:.3702817857265472,left_val:.567673921585083},{features:[[5,4,3,3,-1],[5,5,3,1,3]],threshold:-.008876458741724491,right_val:.4583688974380493,left_val:.7749221920967102},{features:[[12,3,3,3,-1],[13,3,1,3,3]],threshold:.002731173997744918,right_val:.3996661007404327,left_val:.5338721871376038},{features:[[6,6,8,3,-1],[6,7,8,1,3]],threshold:-.0025082379579544067,right_val:.377749890089035,left_val:.5611963272094727},{features:[[12,3,3,3,-1],[13,3,1,3,3]],threshold:-.008054107427597046,right_val:.5179182887077332,left_val:.291522890329361},{features:[[3,1,4,10,-1],[3,1,2,5,2],[5,6,2,5,2]],threshold:-.0009793881326913834,right_val:.3700192868709564,left_val:.5536432862281799},{features:[[5,7,10,2,-1],[5,7,5,2,2]],threshold:-.005874590948224068,right_val:.5679376125335693,left_val:.3754391074180603},{features:[[8,7,3,3,-1],[9,7,1,3,3]],threshold:-.00449367193505168,right_val:.4480949938297272,left_val:.7019699215888977},{features:[[15,12,2,3,-1],[15,13,2,1,3]],threshold:-.00543892290443182,right_val:.5313386917114258,left_val:.2310364991426468},{features:[[7,8,3,4,-1],[8,8,1,4,3]],threshold:-.0007509464048780501,right_val:.4129343032836914,left_val:.5864868760108948},{features:[[13,4,1,12,-1],[13,10,1,6,2]],threshold:14528800420521293e-21,right_val:.5619621276855469,left_val:.3732407093048096},{features:[[4,5,12,12,-1],[4,5,6,6,2],[10,11,6,6,2]],threshold:.0407580696046352,right_val:.2720521986484528,left_val:.5312091112136841},{features:[[7,14,7,3,-1],[7,15,7,1,3]],threshold:.006650593131780624,right_val:.6693493723869324,left_val:.4710015952587128},{features:[[3,12,2,3,-1],[3,13,2,1,3]],threshold:.0045759351924061775,right_val:.1637275964021683,left_val:.5167819261550903},{features:[[3,2,14,2,-1],[10,2,7,1,2],[3,3,7,1,2]],threshold:.0065269311890006065,right_val:.2938531935214996,left_val:.5397608876228333},{features:[[0,1,3,10,-1],[1,1,1,10,3]],threshold:-.0136603796854615,right_val:.453220009803772,left_val:.7086488008499146},{features:[[9,0,6,5,-1],[11,0,2,5,3]],threshold:.0273588690906763,right_val:.3589231967926025,left_val:.5206481218338013},{features:[[5,7,6,2,-1],[8,7,3,2,2]],threshold:.0006219755159690976,right_val:.5441123247146606,left_val:.3507075905799866},{features:[[7,1,6,10,-1],[7,6,6,5,2]],threshold:-.0033077080734074116,right_val:.402489185333252,left_val:.5859522819519043},{features:[[1,1,18,3,-1],[7,1,6,3,3]],threshold:-.0106311095878482,right_val:.4422602951526642,left_val:.6743267178535461},{features:[[16,3,3,6,-1],[16,5,3,2,3]],threshold:.0194416493177414,right_val:.1797904968261719,left_val:.5282716155052185}],threshold:27.153350830078125},{simpleClassifiers:[{features:[[6,3,7,6,-1],[6,6,7,3,2]],threshold:-.005505216773599386,right_val:.2626559138298035,left_val:.5914731025695801},{features:[[4,7,12,2,-1],[8,7,4,2,3]],threshold:.001956227933987975,right_val:.5741627216339111,left_val:.2312581986188889},{features:[[0,4,17,10,-1],[0,9,17,5,2]],threshold:-.008892478421330452,right_val:.5626654028892517,left_val:.1656530052423477},{features:[[3,4,15,16,-1],[3,12,15,8,2]],threshold:.0836383774876595,right_val:.1957294940948486,left_val:.5423449873924255},{features:[[7,15,6,4,-1],[7,17,6,2,2]],threshold:.0012282270472496748,right_val:.5992503762245178,left_val:.3417904078960419},{features:[[15,2,4,9,-1],[15,2,2,9,2]],threshold:.0057629169896245,right_val:.6079903841018677,left_val:.3719581961631775},{features:[[2,3,3,2,-1],[2,4,3,1,2]],threshold:-.0016417410224676132,right_val:.5576915740966797,left_val:.2577486038208008},{features:[[13,6,7,9,-1],[13,9,7,3,3]],threshold:.0034113149158656597,right_val:.5514171719551086,left_val:.2950749099254608},{features:[[8,11,4,3,-1],[8,12,4,1,3]],threshold:-.0110693201422691,right_val:.4477078914642334,left_val:.7569358944892883},{features:[[0,2,20,6,-1],[10,2,10,3,2],[0,5,10,3,2]],threshold:.0348659716546535,right_val:.2669621109962463,left_val:.5583708882331848},{features:[[3,2,6,10,-1],[3,2,3,5,2],[6,7,3,5,2]],threshold:.0006570109981112182,right_val:.2988890111446381,left_val:.5627313256263733},{features:[[13,10,3,4,-1],[13,12,3,2,2]],threshold:-.0243391301482916,right_val:.5108863115310669,left_val:.2771185040473938},{features:[[4,10,3,4,-1],[4,12,3,2,2]],threshold:.0005943520227447152,right_val:.3120341897010803,left_val:.5580651760101318},{features:[[7,5,6,3,-1],[9,5,2,3,3]],threshold:.0022971509024500847,right_val:.5679075717926025,left_val:.3330250084400177},{features:[[7,6,6,8,-1],[7,10,6,4,2]],threshold:-.0037801829166710377,right_val:.5344808101654053,left_val:.2990534901618958},{features:[[0,11,20,6,-1],[0,14,20,3,2]],threshold:-.13420669734478,right_val:.5392568111419678,left_val:.1463858932256699},{features:[[4,13,4,6,-1],[4,13,2,3,2],[6,16,2,3,2]],threshold:.0007522454834543169,right_val:.5692734718322754,left_val:.3746953904628754},{features:[[6,0,8,12,-1],[10,0,4,6,2],[6,6,4,6,2]],threshold:-.040545541793108,right_val:.5484297871589661,left_val:.2754747867584229},{features:[[2,0,15,2,-1],[2,1,15,1,2]],threshold:.0012572970008477569,right_val:.5756075978279114,left_val:.3744584023952484},{features:[[9,12,2,3,-1],[9,13,2,1,3]],threshold:-.007424994837492704,right_val:.4728231132030487,left_val:.7513859272003174},{features:[[3,12,1,2,-1],[3,13,1,1,2]],threshold:.0005090812919661403,right_val:.2932321131229401,left_val:.540489673614502},{features:[[9,11,2,3,-1],[9,12,2,1,3]],threshold:-.001280845026485622,right_val:.4273349046707153,left_val:.6169779896736145},{features:[[7,3,3,1,-1],[8,3,1,1,3]],threshold:-.0018348860321566463,right_val:.5206472277641296,left_val:.2048496007919312},{features:[[17,7,3,6,-1],[17,9,3,2,3]],threshold:.0274848695844412,right_val:.1675522029399872,left_val:.5252984762191772},{features:[[7,2,3,2,-1],[8,2,1,2,3]],threshold:.0022372419480234385,right_val:.2777658104896545,left_val:.5267782807350159},{features:[[11,4,5,3,-1],[11,5,5,1,3]],threshold:-.008863529190421104,right_val:.4812048971652985,left_val:.69545578956604},{features:[[4,4,5,3,-1],[4,5,5,1,3]],threshold:.004175397101789713,right_val:.6349195837974548,left_val:.4291887879371643},{features:[[19,3,1,2,-1],[19,4,1,1,2]],threshold:-.0017098189564421773,right_val:.5361248850822449,left_val:.2930536866188049},{features:[[5,5,4,3,-1],[5,6,4,1,3]],threshold:.006532854866236448,right_val:.7409694194793701,left_val:.4495325088500977},{features:[[17,7,3,6,-1],[17,9,3,2,3]],threshold:-.009537290781736374,right_val:.5416501760482788,left_val:.3149119913578033},{features:[[0,7,3,6,-1],[0,9,3,2,3]],threshold:.0253109894692898,right_val:.1311707943677902,left_val:.5121892094612122},{features:[[14,2,6,9,-1],[14,5,6,3,3]],threshold:.0364609695971012,right_val:.2591339945793152,left_val:.5175911784172058},{features:[[0,4,5,6,-1],[0,6,5,2,3]],threshold:.0208543296903372,right_val:.1582316011190414,left_val:.5137140154838562},{features:[[10,5,6,2,-1],[12,5,2,2,3]],threshold:-.0008720774785615504,right_val:.439897894859314,left_val:.5574309825897217},{features:[[4,5,6,2,-1],[6,5,2,2,3]],threshold:-15227000403683633e-21,right_val:.3708069920539856,left_val:.5548940896987915},{features:[[8,1,4,6,-1],[8,3,4,2,3]],threshold:-.0008431650931015611,right_val:.5554211139678955,left_val:.3387419879436493},{features:[[0,2,3,6,-1],[0,4,3,2,3]],threshold:.0036037859972566366,right_val:.3411171138286591,left_val:.5358061790466309},{features:[[6,6,8,3,-1],[6,7,8,1,3]],threshold:-.006805789191275835,right_val:.4345862865447998,left_val:.6125202775001526},{features:[[0,1,5,9,-1],[0,4,5,3,3]],threshold:-.0470216609537601,right_val:.519373893737793,left_val:.2358165979385376},{features:[[16,0,4,15,-1],[16,0,2,15,2]],threshold:-.0369541086256504,right_val:.4760943949222565,left_val:.7323111295700073},{features:[[1,10,3,2,-1],[1,11,3,1,2]],threshold:.0010439479956403375,right_val:.3411330878734589,left_val:.5419455170631409},{features:[[14,4,1,10,-1],[14,9,1,5,2]],threshold:-.00021050689974799752,right_val:.5554947257041931,left_val:.2821694016456604},{features:[[0,1,4,12,-1],[2,1,2,12,2]],threshold:-.0808315873146057,right_val:.4697434902191162,left_val:.9129930138587952},{features:[[11,11,4,2,-1],[11,11,2,2,2]],threshold:-.0003657905908767134,right_val:.3978292942047119,left_val:.6022670269012451},{features:[[5,11,4,2,-1],[7,11,2,2,2]],threshold:-.00012545920617412776,right_val:.384553998708725,left_val:.5613213181495667},{features:[[3,8,15,5,-1],[8,8,5,5,3]],threshold:-.0687864869832993,right_val:.5300496816635132,left_val:.2261611968278885},{features:[[0,0,6,10,-1],[3,0,3,10,2]],threshold:.0124157899990678,right_val:.5828812122344971,left_val:.4075691998004913},{features:[[11,4,3,2,-1],[12,4,1,2,3]],threshold:-.004717481788247824,right_val:.5267757773399353,left_val:.2827253937721252},{features:[[8,12,3,8,-1],[8,16,3,4,2]],threshold:.0381368584930897,right_val:.1023615971207619,left_val:.5074741244316101},{features:[[8,14,5,3,-1],[8,15,5,1,3]],threshold:-.0028168049175292253,right_val:.4359692931175232,left_val:.6169006824493408},{features:[[7,14,4,3,-1],[7,15,4,1,3]],threshold:.008130360394716263,right_val:.76060950756073,left_val:.4524433016777039},{features:[[11,4,3,2,-1],[12,4,1,2,3]],threshold:.006005601957440376,right_val:.185971200466156,left_val:.5240408778190613},{features:[[3,15,14,4,-1],[3,15,7,2,2],[10,17,7,2,2]],threshold:.0191393196582794,right_val:.2332071959972382,left_val:.5209379196166992},{features:[[2,2,16,4,-1],[10,2,8,2,2],[2,4,8,2,2]],threshold:.0164457596838474,right_val:.3264234960079193,left_val:.5450702905654907},{features:[[0,8,6,12,-1],[3,8,3,12,2]],threshold:-.0373568907380104,right_val:.4533241987228394,left_val:.6999046802520752},{features:[[5,7,10,2,-1],[5,7,5,2,2]],threshold:-.0197279006242752,right_val:.54128098487854,left_val:.2653664946556091},{features:[[9,7,2,5,-1],[10,7,1,5,2]],threshold:.0066972579807043076,right_val:.7138652205467224,left_val:.4480566084384918},{features:[[13,7,6,4,-1],[16,7,3,2,2],[13,9,3,2,2]],threshold:.0007445752853527665,right_val:.5471320152282715,left_val:.4231350123882294},{features:[[0,13,8,2,-1],[0,14,8,1,2]],threshold:.0011790640419349074,right_val:.3130455017089844,left_val:.5341702103614807},{features:[[13,7,6,4,-1],[16,7,3,2,2],[13,9,3,2,2]],threshold:.0349806100130081,right_val:.343053013086319,left_val:.5118659734725952},{features:[[1,7,6,4,-1],[1,7,3,2,2],[4,9,3,2,2]],threshold:.0005685979267582297,right_val:.5468639731407166,left_val:.3532187044620514},{features:[[12,6,1,12,-1],[12,12,1,6,2]],threshold:-.0113406497985125,right_val:.5348700881004333,left_val:.2842353880405426},{features:[[9,5,2,6,-1],[10,5,1,6,2]],threshold:-.00662281084805727,right_val:.4492664933204651,left_val:.6883640289306641},{features:[[14,12,2,3,-1],[14,13,2,1,3]],threshold:-.008016033098101616,right_val:.5224308967590332,left_val:.1709893941879273},{features:[[4,12,2,3,-1],[4,13,2,1,3]],threshold:.0014206819469109178,right_val:.299338310956955,left_val:.5290846228599548},{features:[[8,12,4,3,-1],[8,13,4,1,3]],threshold:-.002780171111226082,right_val:.4460499882698059,left_val:.6498854160308838},{features:[[5,2,2,4,-1],[5,2,1,2,2],[6,4,1,2,2]],threshold:-.0014747589593753219,right_val:.5388113260269165,left_val:.3260438144207001},{features:[[5,5,11,3,-1],[5,6,11,1,3]],threshold:-.0238303393125534,right_val:.4801219999790192,left_val:.7528941035270691},{features:[[7,6,4,12,-1],[7,12,4,6,2]],threshold:.00693697901442647,right_val:.3261427879333496,left_val:.5335165858268738},{features:[[12,13,8,5,-1],[12,13,4,5,2]],threshold:.008280625566840172,right_val:.5737829804420471,left_val:.458039402961731},{features:[[7,6,1,12,-1],[7,12,1,6,2]],threshold:-.0104395002126694,right_val:.5233827829360962,left_val:.2592320144176483}],threshold:34.55411148071289},{simpleClassifiers:[{features:[[1,2,6,3,-1],[4,2,3,3,2]],threshold:.0072006587870419025,right_val:.6849808096885681,left_val:.325888603925705},{features:[[9,5,6,10,-1],[12,5,3,5,2],[9,10,3,5,2]],threshold:-.002859358908608556,right_val:.2537829875946045,left_val:.5838881134986877},{features:[[5,5,8,12,-1],[5,5,4,6,2],[9,11,4,6,2]],threshold:.0006858052802272141,right_val:.2812424004077911,left_val:.5708081722259521},{features:[[0,7,20,6,-1],[0,9,20,2,3]],threshold:.007958019152283669,right_val:.5544260740280151,left_val:.2501051127910614},{features:[[4,2,2,2,-1],[4,3,2,1,2]],threshold:-.0012124150525778532,right_val:.5433350205421448,left_val:.2385368049144745},{features:[[4,18,12,2,-1],[8,18,4,2,3]],threshold:.00794261321425438,right_val:.6220757961273193,left_val:.3955070972442627},{features:[[7,4,4,16,-1],[7,12,4,8,2]],threshold:.0024630590341985226,right_val:.2992357909679413,left_val:.5639708042144775},{features:[[7,6,7,8,-1],[7,10,7,4,2]],threshold:-.006039659958332777,right_val:.541167676448822,left_val:.218651294708252},{features:[[6,3,3,1,-1],[7,3,1,1,3]],threshold:-.0012988339876756072,right_val:.5364584922790527,left_val:.23507060110569},{features:[[11,15,2,4,-1],[11,17,2,2,2]],threshold:.00022299369447864592,right_val:.572960615158081,left_val:.380411297082901},{features:[[3,5,4,8,-1],[3,9,4,4,2]],threshold:.0014654280385002494,right_val:.5258268713951111,left_val:.2510167956352234},{features:[[7,1,6,12,-1],[7,7,6,6,2]],threshold:-.0008121004211716354,right_val:.3851158916950226,left_val:.5992823839187622},{features:[[4,6,6,2,-1],[6,6,2,2,3]],threshold:-.0013836020370945334,right_val:.3636586964130402,left_val:.5681396126747131},{features:[[16,4,4,6,-1],[16,6,4,2,3]],threshold:-.0279364492744207,right_val:.5377560257911682,left_val:.1491317003965378},{features:[[3,3,5,2,-1],[3,4,5,1,2]],threshold:-.0004691955109592527,right_val:.5572484731674194,left_val:.3692429959774017},{features:[[9,11,2,3,-1],[9,12,2,1,3]],threshold:-.004982965998351574,right_val:.4532504081726074,left_val:.6758509278297424},{features:[[2,16,4,2,-1],[2,17,4,1,2]],threshold:.001881530974060297,right_val:.2932539880275726,left_val:.5368022918701172},{features:[[7,13,6,6,-1],[10,13,3,3,2],[7,16,3,3,2]],threshold:-.0190675500780344,right_val:.5330067276954651,left_val:.1649377048015595},{features:[[7,0,3,4,-1],[8,0,1,4,3]],threshold:-.0046906559728085995,right_val:.5119361877441406,left_val:.1963925957679749},{features:[[8,15,4,3,-1],[8,16,4,1,3]],threshold:.005977713968604803,right_val:.7008398175239563,left_val:.467117190361023},{features:[[0,4,4,6,-1],[0,6,4,2,3]],threshold:-.0333031304180622,right_val:.5104162096977234,left_val:.1155416965484619},{features:[[5,6,12,3,-1],[9,6,4,3,3]],threshold:.0907441079616547,right_val:.1306173056364059,left_val:.5149660110473633},{features:[[7,6,6,14,-1],[9,6,2,14,3]],threshold:.0009355589863844216,right_val:.543985903263092,left_val:.3605481088161469},{features:[[9,7,3,3,-1],[10,7,1,3,3]],threshold:.0149016501381993,right_val:.7687569856643677,left_val:.4886212050914764},{features:[[6,12,2,4,-1],[6,14,2,2,2]],threshold:.0006159411859698594,right_val:.3240939080715179,left_val:.5356813073158264},{features:[[10,12,7,6,-1],[10,14,7,2,3]],threshold:-.0506709888577461,right_val:.5230404138565063,left_val:.1848621964454651},{features:[[1,0,15,2,-1],[1,1,15,1,2]],threshold:.0006866574985906482,right_val:.5517945885658264,left_val:.3840579986572266},{features:[[14,0,6,6,-1],[14,0,3,6,2]],threshold:.008371243253350258,right_val:.6131753921508789,left_val:.4288564026355743},{features:[[5,3,3,1,-1],[6,3,1,1,3]],threshold:-.0012953069526702166,right_val:.528073787689209,left_val:.2913674116134644},{features:[[14,0,6,6,-1],[14,0,3,6,2]],threshold:-.0419416800141335,right_val:.4856030941009522,left_val:.7554799914360046},{features:[[0,3,20,10,-1],[0,8,20,5,2]],threshold:-.0235293805599213,right_val:.5256081223487854,left_val:.2838279902935028},{features:[[14,0,6,6,-1],[14,0,3,6,2]],threshold:.0408574491739273,right_val:.6277297139167786,left_val:.4870935082435608},{features:[[0,0,6,6,-1],[3,0,3,6,2]],threshold:-.0254068691283464,right_val:.4575029015541077,left_val:.7099707722663879},{features:[[19,15,1,2,-1],[19,16,1,1,2]],threshold:-.00041415440500713885,right_val:.5469412207603455,left_val:.4030886888504028},{features:[[0,2,4,8,-1],[2,2,2,8,2]],threshold:.0218241196125746,right_val:.6768701076507568,left_val:.4502024054527283},{features:[[2,1,18,4,-1],[11,1,9,2,2],[2,3,9,2,2]],threshold:.0141140399500728,right_val:.3791700005531311,left_val:.5442860722541809},{features:[[8,12,1,2,-1],[8,13,1,1,2]],threshold:6721459067193791e-20,right_val:.5873476266860962,left_val:.4200463891029358},{features:[[5,2,10,6,-1],[10,2,5,3,2],[5,5,5,3,2]],threshold:-.00794176384806633,right_val:.5585265755653381,left_val:.3792561888694763},{features:[[9,7,2,4,-1],[10,7,1,4,2]],threshold:-.00721444096416235,right_val:.4603548943996429,left_val:.7253103852272034},{features:[[9,7,3,3,-1],[10,7,1,3,3]],threshold:.002581733977422118,right_val:.5900238752365112,left_val:.4693301916122437},{features:[[4,5,12,8,-1],[8,5,4,8,3]],threshold:.1340931951999664,right_val:.1808844953775406,left_val:.5149213075637817},{features:[[15,15,4,3,-1],[15,16,4,1,3]],threshold:.0022962710354477167,right_val:.3717867136001587,left_val:.5399743914604187},{features:[[8,18,3,1,-1],[9,18,1,1,3]],threshold:-.002157584996894002,right_val:.5148863792419434,left_val:.2408495992422104},{features:[[9,13,4,3,-1],[9,14,4,1,3]],threshold:-.004919618833810091,right_val:.4738740026950836,left_val:.6573588252067566},{features:[[7,13,4,3,-1],[7,14,4,1,3]],threshold:.0016267469618469477,right_val:.6303114295005798,left_val:.4192821979522705},{features:[[19,15,1,2,-1],[19,16,1,1,2]],threshold:.00033413388882763684,right_val:.3702101111412048,left_val:.5540298223495483},{features:[[0,15,8,4,-1],[0,17,8,2,2]],threshold:-.0266980808228254,right_val:.5101410746574402,left_val:.1710917949676514},{features:[[9,3,6,4,-1],[11,3,2,4,3]],threshold:-.0305618792772293,right_val:.5168793797492981,left_val:.1904218047857285},{features:[[8,14,4,3,-1],[8,15,4,1,3]],threshold:.002851154888048768,right_val:.6313853859901428,left_val:.4447506964206696},{features:[[3,14,14,6,-1],[3,16,14,2,3]],threshold:-.0362114794552326,right_val:.5377349257469177,left_val:.2490727007389069},{features:[[6,3,6,6,-1],[6,6,6,3,2]],threshold:-.002411518944427371,right_val:.3664236962795258,left_val:.5381243228912354},{features:[[5,11,10,6,-1],[5,14,10,3,2]],threshold:-.0007725320174358785,right_val:.3541550040245056,left_val:.5530232191085815},{features:[[3,10,3,4,-1],[4,10,1,4,3]],threshold:.0002948172914329916,right_val:.5667243003845215,left_val:.4132699072360992},{features:[[13,9,2,2,-1],[13,9,1,2,2]],threshold:-.006233456078916788,right_val:.5198668837547302,left_val:.0987872332334518},{features:[[5,3,6,4,-1],[7,3,2,4,3]],threshold:-.0262747295200825,right_val:.5028107166290283,left_val:.0911274924874306},{features:[[9,7,3,3,-1],[10,7,1,3,3]],threshold:.005321226082742214,right_val:.6222720742225647,left_val:.4726648926734924},{features:[[2,12,2,3,-1],[2,13,2,1,3]],threshold:-.004112905822694302,right_val:.5137804746627808,left_val:.2157457023859024},{features:[[9,8,3,12,-1],[9,12,3,4,3]],threshold:.0032457809429615736,right_val:.3721776902675629,left_val:.5410770773887634},{features:[[3,14,4,6,-1],[3,14,2,3,2],[5,17,2,3,2]],threshold:-.0163597092032433,right_val:.4685291945934296,left_val:.7787874937057495},{features:[[16,15,2,2,-1],[16,16,2,1,2]],threshold:.00032166109303943813,right_val:.4240373969078064,left_val:.5478987097740173},{features:[[2,15,2,2,-1],[2,16,2,1,2]],threshold:.000644524407107383,right_val:.3501324951648712,left_val:.5330560803413391},{features:[[8,12,4,3,-1],[8,13,4,1,3]],threshold:-.0078909732401371,right_val:.4726569056510925,left_val:.6923521161079407},{features:[[0,7,20,1,-1],[10,7,10,1,2]],threshold:.048336211591959,right_val:.0757492035627365,left_val:.50559002161026},{features:[[7,6,8,3,-1],[7,6,4,3,2]],threshold:-.000751781277358532,right_val:.5538573861122131,left_val:.3783741891384125},{features:[[5,7,8,2,-1],[9,7,4,2,2]],threshold:-.002495391061529517,right_val:.5359612107276917,left_val:.3081651031970978},{features:[[9,7,3,5,-1],[10,7,1,5,3]],threshold:-.0022385010961443186,right_val:.4649342894554138,left_val:.663395881652832},{features:[[8,7,3,5,-1],[9,7,1,5,3]],threshold:-.0017988430336117744,right_val:.4347187876701355,left_val:.6596844792366028},{features:[[11,1,3,5,-1],[12,1,1,5,3]],threshold:.008786091580986977,right_val:.2315579950809479,left_val:.523183286190033},{features:[[6,2,3,6,-1],[7,2,1,6,3]],threshold:.003671538084745407,right_val:.2977376878261566,left_val:.520425021648407},{features:[[14,14,6,5,-1],[14,14,3,5,2]],threshold:-.0353364497423172,right_val:.4861505031585693,left_val:.7238878011703491},{features:[[9,8,2,2,-1],[9,9,2,1,2]],threshold:-.0006918924045749009,right_val:.5229824781417847,left_val:.3105022013187408},{features:[[10,7,1,3,-1],[10,8,1,1,3]],threshold:-.003394610946998,right_val:.5210173726081848,left_val:.3138968050479889},{features:[[6,6,2,2,-1],[6,6,1,1,2],[7,7,1,1,2]],threshold:.0009856928372755647,right_val:.6585097908973694,left_val:.4536580145359039},{features:[[2,11,18,4,-1],[11,11,9,2,2],[2,13,9,2,2]],threshold:-.0501631014049053,right_val:.5198916792869568,left_val:.1804454028606415},{features:[[6,6,2,2,-1],[6,6,1,1,2],[7,7,1,1,2]],threshold:-.0022367259953171015,right_val:.4651359021663666,left_val:.7255702018737793},{features:[[0,15,20,2,-1],[0,16,20,1,2]],threshold:.0007432628772221506,right_val:.5898545980453491,left_val:.4412921071052551},{features:[[4,14,2,3,-1],[4,15,2,1,3]],threshold:-.0009348518215119839,right_val:.5366017818450928,left_val:.3500052988529205},{features:[[8,14,4,3,-1],[8,15,4,1,3]],threshold:.0174979399889708,right_val:.8315284848213196,left_val:.4912194907665253},{features:[[8,7,2,3,-1],[8,8,2,1,3]],threshold:-.0015200000489130616,right_val:.537056028842926,left_val:.3570275902748108},{features:[[9,10,2,3,-1],[9,11,2,1,3]],threshold:.0007800394087098539,right_val:.5967335104942322,left_val:.4353772103786469}],threshold:39.1072883605957},{simpleClassifiers:[{features:[[5,4,10,4,-1],[5,6,10,2,2]],threshold:-.00999455526471138,right_val:.3054533004760742,left_val:.6162583231925964},{features:[[9,7,6,4,-1],[12,7,3,2,2],[9,9,3,2,2]],threshold:-.001108522992581129,right_val:.3155578076839447,left_val:.5818294882774353},{features:[[4,7,3,6,-1],[4,9,3,2,3]],threshold:.001036438043229282,right_val:.5692911744117737,left_val:.2552052140235901},{features:[[11,15,4,4,-1],[13,15,2,2,2],[11,17,2,2,2]],threshold:.000682113110087812,right_val:.5934931039810181,left_val:.3685089945793152},{features:[[7,8,4,2,-1],[7,9,4,1,2]],threshold:-.0006805734010413289,right_val:.5474792122840881,left_val:.2332392036914825},{features:[[13,1,4,3,-1],[13,1,2,3,2]],threshold:.0002606878988444805,right_val:.5667545795440674,left_val:.325745701789856},{features:[[5,15,4,4,-1],[5,15,2,2,2],[7,17,2,2,2]],threshold:.0005160737200640142,right_val:.5845472812652588,left_val:.3744716942310333},{features:[[9,5,4,7,-1],[9,5,2,7,2]],threshold:.0008500752155669034,right_val:.5522807240486145,left_val:.3420371115207672},{features:[[5,6,8,3,-1],[9,6,4,3,2]],threshold:-.0018607829697430134,right_val:.5375424027442932,left_val:.2804419994354248},{features:[[9,9,2,2,-1],[9,10,2,1,2]],threshold:-.001503397012129426,right_val:.5498952269554138,left_val:.2579050958156586},{features:[[7,15,5,3,-1],[7,16,5,1,3]],threshold:.0023478909861296415,right_val:.6313710808753967,left_val:.4175156056880951},{features:[[11,10,4,3,-1],[11,10,2,3,2]],threshold:-.00028880240279249847,right_val:.4052666127681732,left_val:.5865169763565063},{features:[[6,9,8,10,-1],[6,14,8,5,2]],threshold:.008940547704696655,right_val:.231865406036377,left_val:.5211141109466553},{features:[[10,11,6,2,-1],[10,11,3,2,2]],threshold:-.0193277392536402,right_val:.5241525769233704,left_val:.2753432989120483},{features:[[4,11,6,2,-1],[7,11,3,2,2]],threshold:-.0002020206011366099,right_val:.3677195906639099,left_val:.5722978711128235},{features:[[11,3,8,1,-1],[11,3,4,1,2]],threshold:.002117906929925084,right_val:.5542430877685547,left_val:.4466108083724976},{features:[[6,3,3,2,-1],[7,3,1,2,3]],threshold:-.0017743760254234076,right_val:.5300959944725037,left_val:.2813253104686737},{features:[[14,5,6,5,-1],[14,5,3,5,2]],threshold:.004223445896059275,right_val:.5795428156852722,left_val:.439970999956131},{features:[[7,5,2,12,-1],[7,11,2,6,2]],threshold:-.0143752200528979,right_val:.5292059183120728,left_val:.2981117963790894},{features:[[8,11,4,3,-1],[8,12,4,1,3]],threshold:-.0153491804376245,right_val:.4748171865940094,left_val:.7705215215682983},{features:[[4,1,2,3,-1],[5,1,1,3,2]],threshold:15152279956964776e-21,right_val:.5576897263526917,left_val:.3718844056129456},{features:[[18,3,2,6,-1],[18,5,2,2,3]],threshold:-.009129391983151436,right_val:.5286766886711121,left_val:.3615196049213409},{features:[[0,3,2,6,-1],[0,5,2,2,3]],threshold:.0022512159775942564,right_val:.3486298024654388,left_val:.5364704728126526},{features:[[9,12,2,3,-1],[9,13,2,1,3]],threshold:-.0049696918576955795,right_val:.4676836133003235,left_val:.6927651762962341},{features:[[7,13,4,3,-1],[7,14,4,1,3]],threshold:-.0128290103748441,right_val:.4660735130310059,left_val:.7712153792381287},{features:[[18,0,2,6,-1],[18,2,2,2,3]],threshold:-.009366006590425968,right_val:.5351287722587585,left_val:.3374983966350555},{features:[[0,0,2,6,-1],[0,2,2,2,3]],threshold:.0032452319283038378,right_val:.3289610147476196,left_val:.5325189828872681},{features:[[8,14,6,3,-1],[8,15,6,1,3]],threshold:-.0117235602810979,right_val:.4754300117492676,left_val:.6837652921676636},{features:[[7,4,2,4,-1],[8,4,1,4,2]],threshold:2925794069597032e-20,right_val:.5360502004623413,left_val:.357208788394928},{features:[[8,5,4,6,-1],[8,7,4,2,3]],threshold:-22244219508138485e-21,right_val:.3552064001560211,left_val:.5541427135467529},{features:[[6,4,2,2,-1],[7,4,1,2,2]],threshold:.005088150966912508,right_val:.1256462037563324,left_val:.5070844292640686},{features:[[3,14,14,4,-1],[10,14,7,2,2],[3,16,7,2,2]],threshold:.0274296794086695,right_val:.1625818014144898,left_val:.5269560217857361},{features:[[6,15,6,2,-1],[6,15,3,1,2],[9,16,3,1,2]],threshold:-.00641428679227829,right_val:.4584197103977203,left_val:.7145588994026184},{features:[[14,15,6,2,-1],[14,16,6,1,2]],threshold:.003347995923832059,right_val:.3494696915149689,left_val:.5398612022399902},{features:[[2,12,12,8,-1],[2,16,12,4,2]],threshold:-.0826354920864105,right_val:.5160226225852966,left_val:.2439192980527878},{features:[[7,7,7,2,-1],[7,8,7,1,2]],threshold:.0010261740535497665,right_val:.5767908096313477,left_val:.3886891901493073},{features:[[0,2,18,2,-1],[0,3,18,1,2]],threshold:-.0016307090409100056,right_val:.5347700715065002,left_val:.3389458060264587},{features:[[9,6,2,5,-1],[9,6,1,5,2]],threshold:.0024546680506318808,right_val:.638724684715271,left_val:.4601413905620575},{features:[[7,5,3,8,-1],[8,5,1,8,3]],threshold:-.0009947651997208595,right_val:.4120396077632904,left_val:.5769879221916199},{features:[[9,6,3,4,-1],[10,6,1,4,3]],threshold:.0154091902077198,right_val:.7089822292327881,left_val:.4878709018230438},{features:[[4,13,3,2,-1],[4,14,3,1,2]],threshold:.001178440055809915,right_val:.2895244956016541,left_val:.5263553261756897},{features:[[9,4,6,3,-1],[11,4,2,3,3]],threshold:-.0277019198983908,right_val:.5219606757164001,left_val:.149882897734642},{features:[[5,4,6,3,-1],[7,4,2,3,3]],threshold:-.0295053999871016,right_val:.4999816119670868,left_val:.024893319234252},{features:[[14,11,5,2,-1],[14,12,5,1,2]],threshold:.0004515943001024425,right_val:.4029662907123566,left_val:.5464622974395752},{features:[[1,2,6,9,-1],[3,2,2,9,3]],threshold:.007177263963967562,right_val:.5866296887397766,left_val:.4271056950092316},{features:[[14,6,6,13,-1],[14,6,3,13,2]],threshold:-.0741820484399796,right_val:.4919027984142304,left_val:.6874179244041443},{features:[[3,6,14,8,-1],[3,6,7,4,2],[10,10,7,4,2]],threshold:-.0172541607171297,right_val:.534873902797699,left_val:.3370676040649414},{features:[[16,0,4,11,-1],[16,0,2,11,2]],threshold:.0148515598848462,right_val:.6129904985427856,left_val:.4626792967319489},{features:[[3,4,12,12,-1],[3,4,6,6,2],[9,10,6,6,2]],threshold:.0100020002573729,right_val:.3423453867435455,left_val:.5346122980117798},{features:[[11,4,5,3,-1],[11,5,5,1,3]],threshold:.0020138120744377375,right_val:.5824304223060608,left_val:.4643830060958862},{features:[[4,11,4,2,-1],[4,12,4,1,2]],threshold:.0015135470312088728,right_val:.2856149971485138,left_val:.5196396112442017},{features:[[10,7,2,2,-1],[10,7,1,2,2]],threshold:.003138143103569746,right_val:.5958529710769653,left_val:.4838162958621979},{features:[[8,7,2,2,-1],[9,7,1,2,2]],threshold:-.005145044066011906,right_val:.4741412103176117,left_val:.8920302987098694},{features:[[9,17,3,2,-1],[10,17,1,2,3]],threshold:-.004473670851439238,right_val:.5337278842926025,left_val:.2033942937850952},{features:[[5,6,3,3,-1],[5,7,3,1,3]],threshold:.001962847076356411,right_val:.6725863218307495,left_val:.457163393497467},{features:[[10,0,3,3,-1],[11,0,1,3,3]],threshold:.005426045041531324,right_val:.2845670878887177,left_val:.5271108150482178},{features:[[5,6,6,2,-1],[5,6,3,1,2],[8,7,3,1,2]],threshold:.0004961146041750908,right_val:.5718597769737244,left_val:.4138312935829163},{features:[[12,16,4,3,-1],[12,17,4,1,3]],threshold:.009372878819704056,right_val:.2804847061634064,left_val:.5225151181221008},{features:[[3,12,3,2,-1],[3,13,3,1,2]],threshold:.0006050089723430574,right_val:.3314523994922638,left_val:.523676872253418},{features:[[9,12,3,2,-1],[9,13,3,1,2]],threshold:.0005679255118593574,right_val:.6276971101760864,left_val:.4531059861183167},{features:[[1,11,16,4,-1],[1,11,8,2,2],[9,13,8,2,2]],threshold:.0246443394571543,right_val:.2017143964767456,left_val:.5130851864814758},{features:[[12,4,3,3,-1],[12,5,3,1,3]],threshold:-.0102904504165053,right_val:.4876641035079956,left_val:.7786595225334167},{features:[[4,4,5,3,-1],[4,5,5,1,3]],threshold:.002062941901385784,right_val:.5881264209747314,left_val:.4288598895072937},{features:[[12,16,4,3,-1],[12,17,4,1,3]],threshold:-.005051948130130768,right_val:.5286008715629578,left_val:.3523977994918823},{features:[[5,4,3,3,-1],[5,5,3,1,3]],threshold:-.0057692620903253555,right_val:.4588094055652618,left_val:.6841086149215698},{features:[[9,0,2,2,-1],[9,1,2,1,2]],threshold:-.0004578994121402502,right_val:.5485978126525879,left_val:.356552004814148},{features:[[8,9,4,2,-1],[8,10,4,1,2]],threshold:-.0007591883768327534,right_val:.5254197120666504,left_val:.336879312992096},{features:[[8,8,4,3,-1],[8,9,4,1,3]],threshold:-.001773725962266326,right_val:.5454015135765076,left_val:.3422161042690277},{features:[[0,13,6,3,-1],[2,13,2,3,3]],threshold:-.008561046794056892,right_val:.4485856890678406,left_val:.6533612012863159},{features:[[16,14,3,2,-1],[16,15,3,1,2]],threshold:.0017277270089834929,right_val:.3925352990627289,left_val:.5307580232620239},{features:[[1,18,18,2,-1],[7,18,6,2,3]],threshold:-.0281996093690395,right_val:.4588584005832672,left_val:.685745894908905},{features:[[16,14,3,2,-1],[16,15,3,1,2]],threshold:-.001778110978193581,right_val:.5369856953620911,left_val:.4037851095199585},{features:[[1,14,3,2,-1],[1,15,3,1,2]],threshold:.00033177141449414194,right_val:.3705750107765198,left_val:.539979875087738},{features:[[7,14,6,3,-1],[7,15,6,1,3]],threshold:.0026385399978607893,right_val:.6452730894088745,left_val:.4665437042713165},{features:[[5,14,8,3,-1],[5,15,8,1,3]],threshold:-.0021183069329708815,right_val:.4064677059650421,left_val:.5914781093597412},{features:[[10,6,4,14,-1],[10,6,2,14,2]],threshold:-.0147732896730304,right_val:.5294762849807739,left_val:.3642038106918335},{features:[[6,6,4,14,-1],[8,6,2,14,2]],threshold:-.0168154407292604,right_val:.5144972801208496,left_val:.2664231956005096},{features:[[13,5,2,3,-1],[13,6,2,1,3]],threshold:-.006337014026939869,right_val:.4852097928524017,left_val:.6779531240463257},{features:[[7,16,6,1,-1],[9,16,2,1,3]],threshold:-44560048991115764e-21,right_val:.4153054058551788,left_val:.5613964796066284},{features:[[9,12,3,3,-1],[9,13,3,1,3]],threshold:-.0010240620467811823,right_val:.4566304087638855,left_val:.5964478254318237},{features:[[7,0,3,3,-1],[8,0,1,3,3]],threshold:-.00231616897508502,right_val:.5188159942626953,left_val:.2976115047931671},{features:[[4,0,16,18,-1],[4,9,16,9,2]],threshold:.5321757197380066,right_val:.220263198018074,left_val:.5187839269638062},{features:[[1,1,16,14,-1],[1,8,16,7,2]],threshold:-.1664305031299591,right_val:.5060343146324158,left_val:.1866022944450378},{features:[[3,9,15,4,-1],[8,9,5,4,3]],threshold:.112535297870636,right_val:.1185022965073586,left_val:.5212125182151794},{features:[[6,12,7,3,-1],[6,13,7,1,3]],threshold:.009304686449468136,right_val:.6826149225234985,left_val:.4589937031269074},{features:[[14,15,2,3,-1],[14,16,2,1,3]],threshold:-.004625509958714247,right_val:.5225008726119995,left_val:.3079940974712372},{features:[[2,3,16,14,-1],[2,3,8,7,2],[10,10,8,7,2]],threshold:-.1111646965146065,right_val:.5080801844596863,left_val:.2101044058799744},{features:[[16,2,4,18,-1],[18,2,2,9,2],[16,11,2,9,2]],threshold:-.0108884396031499,right_val:.4790464043617249,left_val:.5765355229377747},{features:[[4,15,2,3,-1],[4,16,2,1,3]],threshold:.005856430158019066,right_val:.1563598960638046,left_val:.5065100193023682},{features:[[16,2,4,18,-1],[18,2,2,9,2],[16,11,2,9,2]],threshold:.0548543892800808,right_val:.7230510711669922,left_val:.49669149518013},{features:[[1,1,8,3,-1],[1,2,8,1,3]],threshold:-.0111973397433758,right_val:.5098798274993896,left_val:.2194979041814804},{features:[[8,11,4,3,-1],[8,12,4,1,3]],threshold:.004406907130032778,right_val:.6770902872085571,left_val:.4778401851654053},{features:[[5,11,5,9,-1],[5,14,5,3,3]],threshold:-.0636652931571007,right_val:.5081024169921875,left_val:.1936362981796265},{features:[[16,0,4,11,-1],[16,0,2,11,2]],threshold:-.009808149188756943,right_val:.4810341000556946,left_val:.599906325340271},{features:[[7,0,6,1,-1],[9,0,2,1,3]],threshold:-.0021717099007219076,right_val:.5235472917556763,left_val:.3338333964347839},{features:[[16,3,3,7,-1],[17,3,1,7,3]],threshold:-.0133155202493072,right_val:.4919213056564331,left_val:.6617069840431213},{features:[[1,3,3,7,-1],[2,3,1,7,3]],threshold:.002544207964092493,right_val:.6082184910774231,left_val:.4488744139671326},{features:[[7,8,6,12,-1],[7,12,6,4,3]],threshold:.0120378397405148,right_val:.3292432129383087,left_val:.540939211845398},{features:[[0,0,4,11,-1],[2,0,2,11,2]],threshold:-.0207010507583618,right_val:.4594995975494385,left_val:.6819120049476624},{features:[[14,0,6,20,-1],[14,0,3,20,2]],threshold:.0276082791388035,right_val:.5767282843589783,left_val:.4630792140960693},{features:[[0,3,1,2,-1],[0,4,1,1,2]],threshold:.0012370620388537645,right_val:.2635016143321991,left_val:.5165379047393799},{features:[[5,5,10,8,-1],[10,5,5,4,2],[5,9,5,4,2]],threshold:-.037669338285923,right_val:.5278980135917664,left_val:.2536393105983734},{features:[[4,7,12,4,-1],[4,7,6,2,2],[10,9,6,2,2]],threshold:-.0018057259730994701,right_val:.5517500042915344,left_val:.3985156118869782}],threshold:50.61048126220703},{simpleClassifiers:[{features:[[2,1,6,4,-1],[5,1,3,4,2]],threshold:.004429902881383896,right_val:.633522629737854,left_val:.2891018092632294},{features:[[9,7,6,4,-1],[12,7,3,2,2],[9,9,3,2,2]],threshold:-.0023813319858163595,right_val:.3477487862110138,left_val:.621178925037384},{features:[[5,6,2,6,-1],[5,9,2,3,2]],threshold:.0022915711160749197,right_val:.5582118034362793,left_val:.2254412025213242},{features:[[9,16,6,4,-1],[12,16,3,2,2],[9,18,3,2,2]],threshold:.0009945794008672237,right_val:.5930070877075195,left_val:.3711710870265961},{features:[[9,4,2,12,-1],[9,10,2,6,2]],threshold:.0007716466789133847,right_val:.334799587726593,left_val:.565172016620636},{features:[[7,1,6,18,-1],[9,1,2,18,3]],threshold:-.001138641033321619,right_val:.5508630871772766,left_val:.3069126009941101},{features:[[4,12,12,2,-1],[8,12,4,2,3]],threshold:-.0001640303962631151,right_val:.3699047863483429,left_val:.576282799243927},{features:[[8,8,6,2,-1],[8,9,6,1,2]],threshold:29793529392918572e-21,right_val:.5437911152839661,left_val:.2644244134426117},{features:[[8,0,3,6,-1],[9,0,1,6,3]],threshold:.008577490225434303,right_val:.1795724928379059,left_val:.5051138997077942},{features:[[11,18,3,2,-1],[11,19,3,1,2]],threshold:-.0002603268949314952,right_val:.4446826875209808,left_val:.5826969146728516},{features:[[1,1,17,4,-1],[1,3,17,2,2]],threshold:-.006140463054180145,right_val:.5346971750259399,left_val:.3113852143287659},{features:[[11,8,4,12,-1],[11,8,2,12,2]],threshold:-.0230869501829147,right_val:.533119797706604,left_val:.32779461145401},{features:[[8,14,4,3,-1],[8,15,4,1,3]],threshold:-.0142436502501369,right_val:.4588063061237335,left_val:.7381709814071655},{features:[[12,3,2,17,-1],[12,3,1,17,2]],threshold:.0194871295243502,right_val:.2274471968412399,left_val:.5256630778312683},{features:[[4,7,6,1,-1],[6,7,2,1,3]],threshold:-.0009668110869824886,right_val:.3815006911754608,left_val:.5511230826377869},{features:[[18,3,2,3,-1],[18,4,2,1,3]],threshold:.003147470997646451,right_val:.2543726861476898,left_val:.5425636768341064},{features:[[8,4,3,4,-1],[8,6,3,2,2]],threshold:-.00018026070029009134,right_val:.3406304121017456,left_val:.5380191802978516},{features:[[4,5,12,10,-1],[4,10,12,5,2]],threshold:-.006026626098901033,right_val:.54205721616745,left_val:.3035801947116852},{features:[[5,18,4,2,-1],[7,18,2,2,2]],threshold:.00044462960795499384,right_val:.5660110116004944,left_val:.3990997076034546},{features:[[17,2,3,6,-1],[17,4,3,2,3]],threshold:.002260976005345583,right_val:.3940688073635101,left_val:.5562806725502014},{features:[[7,7,6,6,-1],[9,7,2,6,3]],threshold:.0511330589652061,right_val:.7118561863899231,left_val:.4609653949737549},{features:[[17,2,3,6,-1],[17,4,3,2,3]],threshold:-.0177863091230392,right_val:.5322144031524658,left_val:.2316166013479233},{features:[[8,0,3,4,-1],[9,0,1,4,3]],threshold:-.004967962857335806,right_val:.5122029185295105,left_val:.233077198266983},{features:[[9,14,2,3,-1],[9,15,2,1,3]],threshold:.002066768938675523,right_val:.6455488204956055,left_val:.4657444059848785},{features:[[0,12,6,3,-1],[0,13,6,1,3]],threshold:.007441376801580191,right_val:.236163392663002,left_val:.5154392123222351},{features:[[8,14,4,3,-1],[8,15,4,1,3]],threshold:-.003627727972343564,right_val:.4476661086082459,left_val:.6219773292541504},{features:[[3,12,2,3,-1],[3,13,2,1,3]],threshold:-.005353075917810202,right_val:.5102208256721497,left_val:.1837355047464371},{features:[[5,6,12,7,-1],[9,6,4,7,3]],threshold:.1453091949224472,right_val:.1535930931568146,left_val:.5145987272262573},{features:[[0,2,3,6,-1],[0,4,3,2,3]],threshold:.0024394490756094456,right_val:.3624661862850189,left_val:.5343660116195679},{features:[[14,6,1,3,-1],[14,7,1,1,3]],threshold:-.003128339070826769,right_val:.4845592081546783,left_val:.6215007901191711},{features:[[2,0,3,14,-1],[3,0,1,14,3]],threshold:.0017940260004252195,right_val:.5824198126792908,left_val:.4299261868000031},{features:[[12,14,5,6,-1],[12,16,5,2,3]],threshold:.0362538211047649,right_val:.1439467966556549,left_val:.5260334014892578},{features:[[4,14,5,6,-1],[4,16,5,2,3]],threshold:-.005174672231078148,right_val:.5287045240402222,left_val:.350653886795044},{features:[[11,10,2,2,-1],[12,10,1,1,2],[11,11,1,1,2]],threshold:.0006538329762406647,right_val:.6122040152549744,left_val:.4809640944004059},{features:[[5,0,3,14,-1],[6,0,1,14,3]],threshold:-.0264802295714617,right_val:.5045586228370667,left_val:.1139362007379532},{features:[[10,15,2,3,-1],[10,16,2,1,3]],threshold:-.0030440660193562508,right_val:.4794734120368958,left_val:.6352095007896423},{features:[[0,2,2,3,-1],[0,3,2,1,3]],threshold:.0036993520334362984,right_val:.2498510926961899,left_val:.5131118297576904},{features:[[5,11,12,6,-1],[5,14,12,3,2]],threshold:-.0003676293126773089,right_val:.3709532022476196,left_val:.54213947057724},{features:[[6,11,3,9,-1],[6,14,3,3,3]],threshold:-.041382260620594,right_val:.5081691741943359,left_val:.1894959956407547},{features:[[11,10,2,2,-1],[12,10,1,1,2],[11,11,1,1,2]],threshold:-.0010532729793339968,right_val:.4783608913421631,left_val:.645436704158783},{features:[[5,6,1,3,-1],[5,7,1,1,3]],threshold:-.0021648600231856108,right_val:.449982613325119,left_val:.6215031147003174},{features:[[4,9,13,3,-1],[4,10,13,1,3]],threshold:-.0005674774874933064,right_val:.5419334769248962,left_val:.3712610900402069},{features:[[1,7,15,6,-1],[6,7,5,6,3]],threshold:.173758402466774,right_val:.1215742006897926,left_val:.5023643970489502},{features:[[4,5,12,6,-1],[8,5,4,6,3]],threshold:-.0029049699660390615,right_val:.5381883978843689,left_val:.3240267932415009},{features:[[8,10,4,3,-1],[8,11,4,1,3]],threshold:.0012299539521336555,right_val:.5703486204147339,left_val:.4165507853031158},{features:[[15,14,1,3,-1],[15,15,1,1,3]],threshold:-.0005432923790067434,right_val:.554754912853241,left_val:.3854042887687683},{features:[[1,11,5,3,-1],[1,12,5,1,3]],threshold:-.008329725824296474,right_val:.5097082853317261,left_val:.2204494029283524},{features:[[7,1,7,12,-1],[7,7,7,6,2]],threshold:-.00010417630255687982,right_val:.4303036034107208,left_val:.560706615447998},{features:[[0,1,6,10,-1],[0,1,3,5,2],[3,6,3,5,2]],threshold:.0312047004699707,right_val:.6982004046440125,left_val:.4621657133102417},{features:[[16,1,4,3,-1],[16,2,4,1,3]],threshold:.007894350215792656,right_val:.226906806230545,left_val:.5269594192504883},{features:[[5,5,2,3,-1],[5,6,2,1,3]],threshold:-.004364531021565199,right_val:.4537956118583679,left_val:.6359223127365112},{features:[[12,2,3,5,-1],[13,2,1,5,3]],threshold:.007679305970668793,right_val:.274048388004303,left_val:.5274767875671387},{features:[[0,3,4,6,-1],[0,5,4,2,3]],threshold:-.0254311393946409,right_val:.5071732997894287,left_val:.2038519978523254},{features:[[8,12,4,2,-1],[8,13,4,1,2]],threshold:.0008200060110539198,right_val:.6119868159294128,left_val:.4587455093860626},{features:[[8,18,3,1,-1],[9,18,1,1,3]],threshold:.002928460016846657,right_val:.2028204947710037,left_val:.5071274042129517},{features:[[11,10,2,2,-1],[12,10,1,1,2],[11,11,1,1,2]],threshold:4525647091213614e-20,right_val:.5430821776390076,left_val:.4812104105949402},{features:[[7,10,2,2,-1],[7,10,1,1,2],[8,11,1,1,2]],threshold:.0013158309739083052,right_val:.6779323220252991,left_val:.4625813961029053},{features:[[11,11,4,4,-1],[11,13,4,2,2]],threshold:.0015870389761403203,right_val:.3431465029716492,left_val:.5386291742324829},{features:[[8,12,3,8,-1],[9,12,1,8,3]],threshold:-.0215396601706743,right_val:.5003222823143005,left_val:.025942500680685},{features:[[13,0,6,3,-1],[13,1,6,1,3]],threshold:.014334480278194,right_val:.1590632945299149,left_val:.5202844738960266},{features:[[8,8,3,4,-1],[9,8,1,4,3]],threshold:-.008388138376176357,right_val:.4648044109344482,left_val:.728248119354248},{features:[[5,7,10,10,-1],[10,7,5,5,2],[5,12,5,5,2]],threshold:.00919068418443203,right_val:.3923191130161285,left_val:.556235671043396},{features:[[3,18,8,2,-1],[3,18,4,1,2],[7,19,4,1,2]],threshold:-.005845305975526571,right_val:.4629127979278565,left_val:.6803392767906189},{features:[[10,2,6,8,-1],[12,2,2,8,3]],threshold:-.0547077991068363,right_val:.5206125974655151,left_val:.2561671137809753},{features:[[4,2,6,8,-1],[6,2,2,8,3]],threshold:.009114277549088001,right_val:.3053877055644989,left_val:.518962025642395},{features:[[11,0,3,7,-1],[12,0,1,7,3]],threshold:-.0155750000849366,right_val:.5169094800949097,left_val:.1295074969530106},{features:[[7,11,2,1,-1],[8,11,1,1,2]],threshold:-.0001205060034408234,right_val:.4230825006961823,left_val:.5735098123550415},{features:[[15,14,1,3,-1],[15,15,1,1,3]],threshold:.0012273970060050488,right_val:.4079791903495789,left_val:.5289878249168396},{features:[[7,15,2,2,-1],[7,15,1,1,2],[8,16,1,1,2]],threshold:-.0012186600361019373,right_val:.4574409127235413,left_val:.6575639843940735},{features:[[15,14,1,3,-1],[15,15,1,1,3]],threshold:-.0033256649039685726,right_val:.5195019841194153,left_val:.3628047108650208},{features:[[6,0,3,7,-1],[7,0,1,7,3]],threshold:-.0132883097976446,right_val:.504348874092102,left_val:.1284265965223312},{features:[[18,1,2,7,-1],[18,1,1,7,2]],threshold:-.0033839771058410406,right_val:.475750595331192,left_val:.6292240023612976},{features:[[2,0,8,20,-1],[2,10,8,10,2]],threshold:-.2195422053337097,right_val:.5065013766288757,left_val:.148773193359375},{features:[[3,0,15,6,-1],[3,2,15,2,3]],threshold:.004911170806735754,right_val:.5665838718414307,left_val:.425610214471817},{features:[[4,3,12,2,-1],[4,4,12,1,2]],threshold:-.00018744950648397207,right_val:.5586857199668884,left_val:.4004144072532654},{features:[[16,0,4,5,-1],[16,0,2,5,2]],threshold:-.00521786417812109,right_val:.4812706112861633,left_val:.6009116172790527},{features:[[7,0,3,4,-1],[8,0,1,4,3]],threshold:-.0011111519997939467,right_val:.5287089943885803,left_val:.3514933884143829},{features:[[16,0,4,5,-1],[16,0,2,5,2]],threshold:.004403640050441027,right_val:.5924085974693298,left_val:.4642275869846344},{features:[[1,7,6,13,-1],[3,7,2,13,3]],threshold:.1229949966073036,right_val:.0691524818539619,left_val:.5025529265403748},{features:[[16,0,4,5,-1],[16,0,2,5,2]],threshold:-.0123135102912784,right_val:.4934012889862061,left_val:.5884591937065125},{features:[[0,0,4,5,-1],[2,0,2,5,2]],threshold:.004147103987634182,right_val:.589347779750824,left_val:.4372239112854004},{features:[[14,12,3,6,-1],[14,14,3,2,3]],threshold:-.003550264984369278,right_val:.5396270155906677,left_val:.4327551126480103},{features:[[3,12,3,6,-1],[3,14,3,2,3]],threshold:-.0192242693156004,right_val:.5068330764770508,left_val:.1913134008646011},{features:[[16,1,4,3,-1],[16,2,4,1,3]],threshold:.0014395059552043676,right_val:.424353301525116,left_val:.5308178067207336},{features:[[8,7,2,10,-1],[8,7,1,5,2],[9,12,1,5,2]],threshold:-.00677519990131259,right_val:.4540086090564728,left_val:.6365395784378052},{features:[[11,11,4,4,-1],[11,13,4,2,2]],threshold:.007011963054537773,right_val:.302619993686676,left_val:.5189834237098694},{features:[[0,1,4,3,-1],[0,2,4,1,3]],threshold:.005401465110480785,right_val:.2557682991027832,left_val:.5105062127113342},{features:[[13,4,1,3,-1],[13,5,1,1,3]],threshold:.0009027498890645802,right_val:.5861827731132507,left_val:.4696914851665497},{features:[[7,15,3,5,-1],[8,15,1,5,3]],threshold:.0114744501188397,right_val:.152717798948288,left_val:.5053645968437195},{features:[[9,7,3,5,-1],[10,7,1,5,3]],threshold:-.006702343001961708,right_val:.4890604019165039,left_val:.6508980989456177},{features:[[8,7,3,5,-1],[9,7,1,5,3]],threshold:-.0020462959073483944,right_val:.4514600038528442,left_val:.6241816878318787},{features:[[10,6,4,14,-1],[10,6,2,14,2]],threshold:-.009995156899094582,right_val:.5400953888893127,left_val:.3432781100273132},{features:[[0,5,5,6,-1],[0,7,5,2,3]],threshold:-.0357007086277008,right_val:.5074077844619751,left_val:.1878059059381485},{features:[[9,5,6,4,-1],[9,5,3,4,2]],threshold:.0004558456130325794,right_val:.5402569770812988,left_val:.3805277049541473},{features:[[0,0,18,10,-1],[6,0,6,10,3]],threshold:-.0542606003582478,right_val:.4595097005367279,left_val:.6843714714050293},{features:[[10,6,4,14,-1],[10,6,2,14,2]],threshold:.0060600461438298225,right_val:.450052797794342,left_val:.5502905249595642},{features:[[6,6,4,14,-1],[8,6,2,14,2]],threshold:-.006479183211922646,right_val:.5310757160186768,left_val:.3368858098983765},{features:[[13,4,1,3,-1],[13,5,1,1,3]],threshold:-.0014939469983801246,right_val:.4756175875663757,left_val:.6487640142440796},{features:[[5,1,2,3,-1],[6,1,1,3,2]],threshold:14610530342906713e-21,right_val:.5451064109802246,left_val:.403457909822464},{features:[[18,1,2,18,-1],[19,1,1,9,2],[18,10,1,9,2]],threshold:-.00723219383507967,right_val:.4824739992618561,left_val:.6386873722076416},{features:[[2,1,4,3,-1],[2,2,4,1,3]],threshold:-.004064581822603941,right_val:.5157335996627808,left_val:.2986421883106232},{features:[[18,1,2,18,-1],[19,1,1,9,2],[18,10,1,9,2]],threshold:.0304630808532238,right_val:.7159956097602844,left_val:.5022199749946594},{features:[[1,14,4,6,-1],[1,14,2,3,2],[3,17,2,3,2]],threshold:-.008054491132497787,right_val:.4619275033473969,left_val:.6492452025413513},{features:[[10,11,7,6,-1],[10,13,7,2,3]],threshold:.0395051389932632,right_val:.2450613975524902,left_val:.5150570869445801},{features:[[0,10,6,10,-1],[0,10,3,5,2],[3,15,3,5,2]],threshold:.008453020825982094,right_val:.6394037008285522,left_val:.4573669135570526},{features:[[11,0,3,4,-1],[12,0,1,4,3]],threshold:-.0011688120430335402,right_val:.548366129398346,left_val:.3865512013435364},{features:[[5,10,5,6,-1],[5,13,5,3,2]],threshold:.002807067008689046,right_val:.2701480090618134,left_val:.5128579139709473},{features:[[14,6,1,8,-1],[14,10,1,4,2]],threshold:.000473652093205601,right_val:.5387461185455322,left_val:.4051581919193268},{features:[[1,7,18,6,-1],[1,7,9,3,2],[10,10,9,3,2]],threshold:.0117410803213716,right_val:.3719413876533508,left_val:.5295950174331665},{features:[[9,7,2,2,-1],[9,7,1,2,2]],threshold:.0031833238899707794,right_val:.6895126104354858,left_val:.4789406955242157},{features:[[5,9,4,5,-1],[7,9,2,5,2]],threshold:.0007024150108918548,right_val:.3918080925941467,left_val:.5384489297866821}],threshold:54.62007141113281},{simpleClassifiers:[{features:[[7,6,6,3,-1],[9,6,2,3,3]],threshold:.0170599296689034,right_val:.7142534852027893,left_val:.3948527872562408},{features:[[1,0,18,4,-1],[7,0,6,4,3]],threshold:.0218408405780792,right_val:.6090016961097717,left_val:.3370316028594971},{features:[[7,15,2,4,-1],[7,17,2,2,2]],threshold:.00024520049919374287,right_val:.5987902283668518,left_val:.3500576019287109},{features:[[1,0,19,9,-1],[1,3,19,3,3]],threshold:.008327260613441467,right_val:.5697240829467773,left_val:.3267528116703033},{features:[[3,7,3,6,-1],[3,9,3,2,3]],threshold:.0005714829894714057,right_val:.5531656742095947,left_val:.3044599890708923},{features:[[13,7,4,4,-1],[15,7,2,2,2],[13,9,2,2,2]],threshold:.0006737398798577487,right_val:.567263126373291,left_val:.3650012016296387},{features:[[3,7,4,4,-1],[3,7,2,2,2],[5,9,2,2,2]],threshold:3468159047770314e-20,right_val:.5388727188110352,left_val:.3313541114330292},{features:[[9,6,10,8,-1],[9,10,10,4,2]],threshold:-.005856339819729328,right_val:.5498778820037842,left_val:.2697942852973938},{features:[[3,8,14,12,-1],[3,14,14,6,2]],threshold:.00851022731512785,right_val:.2762879133224487,left_val:.5269358158111572},{features:[[6,5,10,12,-1],[11,5,5,6,2],[6,11,5,6,2]],threshold:-.0698172077536583,right_val:.5259246826171875,left_val:.2909603118896484},{features:[[9,11,2,3,-1],[9,12,2,1,3]],threshold:-.0008611367084085941,right_val:.4073697924613953,left_val:.5892577171325684},{features:[[9,5,6,5,-1],[9,5,3,5,2]],threshold:.0009714924963191152,right_val:.5415862202644348,left_val:.3523564040660858},{features:[[9,4,2,4,-1],[9,6,2,2,2]],threshold:-1472749045206001e-20,right_val:.3503156006336212,left_val:.5423017740249634},{features:[[9,5,6,5,-1],[9,5,3,5,2]],threshold:.0484202913939953,right_val:.3411195874214172,left_val:.51939457654953},{features:[[5,5,6,5,-1],[8,5,3,5,2]],threshold:.0013257140526548028,right_val:.5335376262664795,left_val:.315776914358139},{features:[[11,2,6,1,-1],[13,2,2,1,3]],threshold:1492214960308047e-20,right_val:.5536553859710693,left_val:.4451299905776978},{features:[[3,2,6,1,-1],[5,2,2,1,3]],threshold:-.002717339899390936,right_val:.5248088836669922,left_val:.3031741976737976},{features:[[13,5,2,3,-1],[13,6,2,1,3]],threshold:.0029219500720500946,right_val:.6606041789054871,left_val:.4781453013420105},{features:[[0,10,1,4,-1],[0,12,1,2,2]],threshold:-.0019804988987743855,right_val:.5287625193595886,left_val:.3186308145523071},{features:[[13,5,2,3,-1],[13,6,2,1,3]],threshold:-.004001210909336805,right_val:.4749928116798401,left_val:.6413596868515015},{features:[[8,18,3,2,-1],[9,18,1,2,3]],threshold:-.004349199123680592,right_val:.5098996758460999,left_val:.1507498025894165},{features:[[6,15,9,2,-1],[6,16,9,1,2]],threshold:.0013490889687091112,right_val:.5881167054176331,left_val:.4316158890724182},{features:[[8,14,4,3,-1],[8,15,4,1,3]],threshold:.0185970701277256,right_val:.9089794158935547,left_val:.4735553860664368},{features:[[18,4,2,4,-1],[18,6,2,2,2]],threshold:-.001856237999163568,right_val:.5577837228775024,left_val:.3553189039230347},{features:[[5,5,2,3,-1],[5,6,2,1,3]],threshold:.002294043079018593,right_val:.6580877900123596,left_val:.4500094950199127},{features:[[15,16,3,2,-1],[15,17,3,1,2]],threshold:.00029982850537635386,right_val:.3975878953933716,left_val:.5629242062568665},{features:[[0,0,3,9,-1],[0,3,3,3,3]],threshold:.0035455459728837013,right_val:.3605485856533051,left_val:.5381547212600708},{features:[[9,7,3,3,-1],[9,8,3,1,3]],threshold:.009610472247004509,right_val:.1796745955944061,left_val:.5255997180938721},{features:[[8,7,3,3,-1],[8,8,3,1,3]],threshold:-.0062783220782876015,right_val:.5114030241966248,left_val:.227285698056221},{features:[[9,5,2,6,-1],[9,5,1,6,2]],threshold:.0034598479978740215,right_val:.6608219146728516,left_val:.4626308083534241},{features:[[8,6,3,4,-1],[9,6,1,4,3]],threshold:-.0013112019514665008,right_val:.4436857998371124,left_val:.6317539811134338},{features:[[7,6,8,12,-1],[11,6,4,6,2],[7,12,4,6,2]],threshold:.002687617903575301,right_val:.4054022133350372,left_val:.5421109795570374},{features:[[5,6,8,12,-1],[5,6,4,6,2],[9,12,4,6,2]],threshold:.003911816980689764,right_val:.3273454904556274,left_val:.5358477830886841},{features:[[12,4,3,3,-1],[12,5,3,1,3]],threshold:-.014206450432539,right_val:.4975781142711639,left_val:.7793576717376709},{features:[[2,16,3,2,-1],[2,17,3,1,2]],threshold:.0007170552853494883,right_val:.3560903966426849,left_val:.5297319889068604},{features:[[12,4,3,3,-1],[12,5,3,1,3]],threshold:.001663501956500113,right_val:.5816481709480286,left_val:.467809408903122},{features:[[2,12,6,6,-1],[2,14,6,2,3]],threshold:.0033686188980937004,right_val:.3446420133113861,left_val:.5276734232902527},{features:[[7,13,6,3,-1],[7,14,6,1,3]],threshold:.0127995302900672,right_val:.7472159266471863,left_val:.4834679961204529},{features:[[6,14,6,3,-1],[6,15,6,1,3]],threshold:.0033901201095432043,right_val:.6401721239089966,left_val:.4511859118938446},{features:[[14,15,5,3,-1],[14,16,5,1,3]],threshold:.004707077983766794,right_val:.355522096157074,left_val:.533565878868103},{features:[[5,4,3,3,-1],[5,5,3,1,3]],threshold:.0014819339849054813,right_val:.5772724151611328,left_val:.4250707030296326},{features:[[14,15,5,3,-1],[14,16,5,1,3]],threshold:-.0069995759986341,right_val:.5292900204658508,left_val:.3003320097923279},{features:[[5,3,6,2,-1],[7,3,2,2,3]],threshold:.0159390103071928,right_val:.1675581932067871,left_val:.5067319273948669},{features:[[8,15,4,3,-1],[8,16,4,1,3]],threshold:.007637734990566969,right_val:.7085601091384888,left_val:.4795069992542267},{features:[[1,15,5,3,-1],[1,16,5,1,3]],threshold:.006733404006808996,right_val:.2162470072507858,left_val:.5133113265037537},{features:[[8,13,4,6,-1],[10,13,2,3,2],[8,16,2,3,2]],threshold:-.012858809903264,right_val:.525137186050415,left_val:.1938841938972473},{features:[[7,8,3,3,-1],[8,8,1,3,3]],threshold:-.0006227080011740327,right_val:.419786810874939,left_val:.5686538219451904},{features:[[12,0,5,4,-1],[12,2,5,2,2]],threshold:-.0005265168147161603,right_val:.5429695844650269,left_val:.4224168956279755},{features:[[0,2,20,2,-1],[0,2,10,1,2],[10,3,10,1,2]],threshold:.0110750999301672,right_val:.2514517903327942,left_val:.5113775134086609},{features:[[1,0,18,4,-1],[7,0,6,4,3]],threshold:-.0367282517254353,right_val:.4849618971347809,left_val:.7194662094116211},{features:[[4,3,6,1,-1],[6,3,2,1,3]],threshold:-.00028207109426148236,right_val:.539444625377655,left_val:.3840261995792389},{features:[[4,18,13,2,-1],[4,19,13,1,2]],threshold:-.0027489690110087395,right_val:.4569182097911835,left_val:.593708872795105},{features:[[2,10,3,6,-1],[2,12,3,2,3]],threshold:.0100475195795298,right_val:.2802298069000244,left_val:.5138576030731201},{features:[[14,12,6,8,-1],[17,12,3,4,2],[14,16,3,4,2]],threshold:-.008149784058332443,right_val:.4636121094226837,left_val:.6090037226676941},{features:[[4,13,10,6,-1],[4,13,5,3,2],[9,16,5,3,2]],threshold:-.006883388850837946,right_val:.5254660248756409,left_val:.3458611071109772},{features:[[14,12,1,2,-1],[14,13,1,1,2]],threshold:-140393603942357e-19,right_val:.4082083106040955,left_val:.5693104267120361},{features:[[8,13,4,3,-1],[8,14,4,1,3]],threshold:.001549841952510178,right_val:.5806517004966736,left_val:.4350537061691284},{features:[[14,12,2,2,-1],[14,13,2,1,2]],threshold:-.006784149911254644,right_val:.5182775259017944,left_val:.1468873023986816},{features:[[4,12,2,2,-1],[4,13,2,1,2]],threshold:.00021705629478674382,right_val:.345617413520813,left_val:.5293524265289307},{features:[[8,12,9,2,-1],[8,13,9,1,2]],threshold:.00031198898795992136,right_val:.5942413806915283,left_val:.4652450978755951},{features:[[9,14,2,3,-1],[9,15,2,1,3]],threshold:.005450753029435873,right_val:.7024846076965332,left_val:.4653508961200714},{features:[[11,10,3,6,-1],[11,13,3,3,2]],threshold:-.00025818689027801156,right_val:.3768967092037201,left_val:.5497295260429382},{features:[[5,6,9,12,-1],[5,12,9,6,2]],threshold:-.0174425393342972,right_val:.5457497835159302,left_val:.3919087946414948},{features:[[11,10,3,6,-1],[11,13,3,3,2]],threshold:-.045343529433012,right_val:.5154908895492554,left_val:.1631357073783875},{features:[[6,10,3,6,-1],[6,13,3,3,2]],threshold:.0019190689781680703,right_val:.2791895866394043,left_val:.514589786529541},{features:[[5,4,11,3,-1],[5,5,11,1,3]],threshold:-.006017786916345358,right_val:.4756332933902741,left_val:.6517636179924011},{features:[[7,1,5,10,-1],[7,6,5,5,2]],threshold:-.004072073847055435,right_val:.4092685878276825,left_val:.5514652729034424},{features:[[2,8,18,2,-1],[2,9,18,1,2]],threshold:.00039855059003457427,right_val:.5285550951957703,left_val:.316524088382721},{features:[[7,17,5,3,-1],[7,18,5,1,3]],threshold:-.0065418570302426815,right_val:.4652808904647827,left_val:.6853377819061279},{features:[[5,9,12,1,-1],[9,9,4,1,3]],threshold:.003484508953988552,right_val:.4502759873867035,left_val:.5484588146209717},{features:[[0,14,6,6,-1],[0,14,3,3,2],[3,17,3,3,2]],threshold:-.0136967804282904,right_val:.4572555124759674,left_val:.6395779848098755},{features:[[5,9,12,1,-1],[9,9,4,1,3]],threshold:-.017347140237689,right_val:.5181614756584167,left_val:.2751072943210602},{features:[[3,9,12,1,-1],[7,9,4,1,3]],threshold:-.004088542889803648,right_val:.5194984078407288,left_val:.3325636088848114},{features:[[14,10,6,7,-1],[14,10,3,7,2]],threshold:-.009468790143728256,right_val:.485181987285614,left_val:.5942280888557434},{features:[[1,0,16,2,-1],[1,1,16,1,2]],threshold:.0017084840219467878,right_val:.5519806146621704,left_val:.4167110919952393},{features:[[10,9,10,9,-1],[10,12,10,3,3]],threshold:.009480909444391727,right_val:.4208514988422394,left_val:.5433894991874695},{features:[[0,1,10,2,-1],[5,1,5,2,2]],threshold:-.004738965071737766,right_val:.4560655057430267,left_val:.6407189965248108},{features:[[17,3,2,3,-1],[17,4,2,1,3]],threshold:.006576105020940304,right_val:.2258227020502091,left_val:.5214555263519287},{features:[[1,3,2,3,-1],[1,4,2,1,3]],threshold:-.0021690549328923225,right_val:.5156704783439636,left_val:.3151527941226959},{features:[[9,7,3,6,-1],[10,7,1,6,3]],threshold:.014660170301795,right_val:.668994128704071,left_val:.4870837032794952},{features:[[6,5,4,3,-1],[8,5,2,3,2]],threshold:.00017231999663636088,right_val:.5251078009605408,left_val:.3569748997688294},{features:[[7,5,6,6,-1],[9,5,2,6,3]],threshold:-.0218037609010935,right_val:.496632993221283,left_val:.8825920820236206},{features:[[3,4,12,12,-1],[3,4,6,6,2],[9,10,6,6,2]],threshold:-.0947361066937447,right_val:.5061113834381104,left_val:.1446162015199661},{features:[[9,2,6,15,-1],[11,2,2,15,3]],threshold:.0055825551971793175,right_val:.4238066077232361,left_val:.5396478772163391},{features:[[2,2,6,17,-1],[4,2,2,17,3]],threshold:.001951709040440619,right_val:.5497786998748779,left_val:.4170410931110382},{features:[[14,10,6,7,-1],[14,10,3,7,2]],threshold:.0121499001979828,right_val:.5664274096488953,left_val:.4698367118835449},{features:[[0,10,6,7,-1],[3,10,3,7,2]],threshold:-.007516962010413408,right_val:.4463135898113251,left_val:.6267772912979126},{features:[[9,2,6,15,-1],[11,2,2,15,3]],threshold:-.0716679096221924,right_val:.5221003293991089,left_val:.3097011148929596},{features:[[5,2,6,15,-1],[7,2,2,15,3]],threshold:-.0882924199104309,right_val:.5006365180015564,left_val:.0811238884925842},{features:[[17,9,3,6,-1],[17,11,3,2,3]],threshold:.0310630798339844,right_val:.1282255947589874,left_val:.5155503749847412},{features:[[6,7,6,6,-1],[8,7,2,6,3]],threshold:.0466218404471874,right_val:.736396074295044,left_val:.4699777960777283},{features:[[1,10,18,6,-1],[10,10,9,3,2],[1,13,9,3,2]],threshold:-.0121894897893071,right_val:.5518996715545654,left_val:.3920530080795288},{features:[[0,9,10,9,-1],[0,12,10,3,3]],threshold:.0130161102861166,right_val:.3685136139392853,left_val:.5260658264160156},{features:[[8,15,4,3,-1],[8,16,4,1,3]],threshold:-.003495289944112301,right_val:.4716280996799469,left_val:.6339294910430908},{features:[[5,12,3,4,-1],[5,14,3,2,2]],threshold:-4401503974804655e-20,right_val:.3776184916496277,left_val:.5333027243614197},{features:[[3,3,16,12,-1],[3,9,16,6,2]],threshold:-.1096649020910263,right_val:.5198346972465515,left_val:.1765342056751251},{features:[[1,1,12,12,-1],[1,1,6,6,2],[7,7,6,6,2]],threshold:-.0009027955820783973,right_val:.3838908076286316,left_val:.5324159860610962},{features:[[10,4,2,4,-1],[11,4,1,2,2],[10,6,1,2,2]],threshold:.0007112664170563221,right_val:.5755224227905273,left_val:.4647929966449738},{features:[[0,9,10,2,-1],[0,9,5,1,2],[5,10,5,1,2]],threshold:-.003125027986243367,right_val:.5166770815849304,left_val:.323670893907547},{features:[[9,11,3,3,-1],[9,12,3,1,3]],threshold:.002414467977359891,right_val:.6459717750549316,left_val:.4787439107894898},{features:[[3,12,9,2,-1],[3,13,9,1,2]],threshold:.00044391240226104856,right_val:.6010255813598633,left_val:.4409308135509491},{features:[[9,9,2,2,-1],[9,10,2,1,2]],threshold:-.0002261118934256956,right_val:.5493255853652954,left_val:.4038113951683044}],threshold:50.16973114013672},{simpleClassifiers:[{features:[[3,4,13,6,-1],[3,6,13,2,3]],threshold:-.0469012893736362,right_val:.3743801116943359,left_val:.660017192363739},{features:[[9,7,6,4,-1],[12,7,3,2,2],[9,9,3,2,2]],threshold:-.001456834957934916,right_val:.3437797129154205,left_val:.578399121761322},{features:[[1,0,6,8,-1],[4,0,3,8,2]],threshold:.005559836979955435,right_val:.5908216238021851,left_val:.3622266948223114},{features:[[9,5,2,12,-1],[9,11,2,6,2]],threshold:.0007317048730328679,right_val:.2873558104038239,left_val:.550041913986206},{features:[[4,4,3,10,-1],[4,9,3,5,2]],threshold:.001331800944171846,right_val:.5431019067764282,left_val:.267316997051239},{features:[[6,17,8,3,-1],[6,18,8,1,3]],threshold:.00024347059661522508,right_val:.574138879776001,left_val:.3855027854442596},{features:[[0,5,10,6,-1],[0,7,10,2,3]],threshold:-.0030512469820678234,right_val:.3462845087051392,left_val:.5503209829330444},{features:[[13,2,3,2,-1],[13,3,3,1,2]],threshold:-.0006865719915367663,right_val:.5429509282112122,left_val:.3291221857070923},{features:[[7,5,4,5,-1],[9,5,2,5,2]],threshold:.001466820016503334,right_val:.5351811051368713,left_val:.3588382005691528},{features:[[12,14,3,6,-1],[12,16,3,2,3]],threshold:.0003202187072020024,right_val:.5700234174728394,left_val:.429684191942215},{features:[[1,11,8,2,-1],[1,12,8,1,2]],threshold:.0007412218837998807,right_val:.3366870880126953,left_val:.5282164812088013},{features:[[7,13,6,3,-1],[7,14,6,1,3]],threshold:.0038330298848450184,right_val:.6257336139678955,left_val:.4559567868709564},{features:[[0,5,3,6,-1],[0,7,3,2,3]],threshold:-.0154564399272203,right_val:.512945294380188,left_val:.2350116968154907},{features:[[13,2,3,2,-1],[13,3,3,1,2]],threshold:.002679677912965417,right_val:.4155062139034271,left_val:.5329415202140808},{features:[[4,14,4,6,-1],[4,14,2,3,2],[6,17,2,3,2]],threshold:.0028296569362282753,right_val:.5804538130760193,left_val:.4273087978363037},{features:[[13,2,3,2,-1],[13,3,3,1,2]],threshold:-.0039444249123334885,right_val:.5202686190605164,left_val:.2912611961364746},{features:[[8,2,4,12,-1],[8,6,4,4,3]],threshold:.002717955969274044,right_val:.3585677146911621,left_val:.5307688117027283},{features:[[14,0,6,8,-1],[17,0,3,4,2],[14,4,3,4,2]],threshold:.005907762795686722,right_val:.5941585898399353,left_val:.470377504825592},{features:[[7,17,3,2,-1],[8,17,1,2,3]],threshold:-.004224034957587719,right_val:.5088796019554138,left_val:.2141567021608353},{features:[[8,12,4,2,-1],[8,13,4,1,2]],threshold:.0040725888684391975,right_val:.6841061115264893,left_val:.4766413867473602},{features:[[6,0,8,12,-1],[6,0,4,6,2],[10,6,4,6,2]],threshold:.0101495301350951,right_val:.3748497068881989,left_val:.5360798835754395},{features:[[14,0,2,10,-1],[15,0,1,5,2],[14,5,1,5,2]],threshold:-.00018864999583456665,right_val:.3853805065155029,left_val:.5720130205154419},{features:[[5,3,8,6,-1],[5,3,4,3,2],[9,6,4,3,2]],threshold:-.0048864358104765415,right_val:.5340958833694458,left_val:.3693122863769531},{features:[[14,0,6,10,-1],[17,0,3,5,2],[14,5,3,5,2]],threshold:.0261584799736738,right_val:.6059989929199219,left_val:.4962374866008759},{features:[[9,14,1,2,-1],[9,15,1,1,2]],threshold:.0004856075975112617,right_val:.6012468934059143,left_val:.4438945949077606},{features:[[15,10,4,3,-1],[15,11,4,1,3]],threshold:.0112687097862363,right_val:.1840388029813767,left_val:.5244250297546387},{features:[[8,14,2,3,-1],[8,15,2,1,3]],threshold:-.0028114619199186563,right_val:.4409897029399872,left_val:.6060283780097961},{features:[[3,13,14,4,-1],[10,13,7,2,2],[3,15,7,2,2]],threshold:-.005611272994428873,right_val:.5589237213134766,left_val:.3891170918941498},{features:[[1,10,4,3,-1],[1,11,4,1,3]],threshold:.008568009361624718,right_val:.2062619030475617,left_val:.5069345831871033},{features:[[9,11,6,1,-1],[11,11,2,1,3]],threshold:-.00038172779022715986,right_val:.41926109790802,left_val:.5882201790809631},{features:[[5,11,6,1,-1],[7,11,2,1,3]],threshold:-.00017680290329735726,right_val:.400336891412735,left_val:.5533605813980103},{features:[[3,5,16,15,-1],[3,10,16,5,3]],threshold:.006511253770440817,right_val:.5444191098213196,left_val:.3310146927833557},{features:[[6,12,4,2,-1],[8,12,2,2,2]],threshold:-6594868318643421e-20,right_val:.3944905996322632,left_val:.5433831810951233},{features:[[4,4,12,10,-1],[10,4,6,5,2],[4,9,6,5,2]],threshold:.006993905175477266,right_val:.4192714095115662,left_val:.5600358247756958},{features:[[8,6,3,4,-1],[9,6,1,4,3]],threshold:-.0046744439750909805,right_val:.4604960978031158,left_val:.6685466766357422},{features:[[8,12,4,8,-1],[10,12,2,4,2],[8,16,2,4,2]],threshold:.0115898502990603,right_val:.2926830053329468,left_val:.5357121229171753},{features:[[8,14,4,3,-1],[8,15,4,1,3]],threshold:.013007840141654,right_val:.730746328830719,left_val:.4679817855358124},{features:[[12,2,3,2,-1],[13,2,1,2,3]],threshold:-.0011008579749614,right_val:.5415065288543701,left_val:.3937501013278961},{features:[[8,15,3,2,-1],[8,16,3,1,2]],threshold:.0006047264905646443,right_val:.5604041218757629,left_val:.4242376089096069},{features:[[6,0,9,14,-1],[9,0,3,14,3]],threshold:-.0144948400557041,right_val:.5293182730674744,left_val:.3631210029125214},{features:[[9,6,2,3,-1],[10,6,1,3,2]],threshold:-.005305694881826639,right_val:.4621821045875549,left_val:.686045229434967},{features:[[10,8,2,3,-1],[10,9,2,1,3]],threshold:-.00081829127157107,right_val:.542043924331665,left_val:.3944096863269806},{features:[[0,9,4,6,-1],[0,11,4,2,3]],threshold:-.0190775208175182,right_val:.5037891864776611,left_val:.1962621957063675},{features:[[6,0,8,2,-1],[6,1,8,1,2]],threshold:.00035549470339901745,right_val:.5613973140716553,left_val:.4086259007453919},{features:[[6,14,7,3,-1],[6,15,7,1,3]],threshold:.0019679730758070946,right_val:.5926123261451721,left_val:.448912113904953},{features:[[8,10,8,9,-1],[8,13,8,3,3]],threshold:.006918914150446653,right_val:.3728385865688324,left_val:.5335925817489624},{features:[[5,2,3,2,-1],[6,2,1,2,3]],threshold:.002987277926877141,right_val:.2975643873214722,left_val:.5111321210861206},{features:[[14,1,6,8,-1],[17,1,3,4,2],[14,5,3,4,2]],threshold:-.006226461846381426,right_val:.4824537932872772,left_val:.5541489720344543},{features:[[0,1,6,8,-1],[0,1,3,4,2],[3,5,3,4,2]],threshold:.013353300280869,right_val:.6414797902107239,left_val:.4586423933506012},{features:[[1,2,18,6,-1],[10,2,9,3,2],[1,5,9,3,2]],threshold:.0335052385926247,right_val:.3429994881153107,left_val:.5392425060272217},{features:[[9,3,2,1,-1],[10,3,1,1,2]],threshold:-.0025294460356235504,right_val:.5013315081596375,left_val:.1703713983297348},{features:[[13,2,4,6,-1],[15,2,2,3,2],[13,5,2,3,2]],threshold:-.001280162949115038,right_val:.4697405099868774,left_val:.5305461883544922},{features:[[5,4,3,3,-1],[5,5,3,1,3]],threshold:.007068738806992769,right_val:.643650472164154,left_val:.4615545868873596},{features:[[13,5,1,3,-1],[13,6,1,1,3]],threshold:.0009688049904070795,right_val:.6043894290924072,left_val:.4833599030971527},{features:[[2,16,5,3,-1],[2,17,5,1,3]],threshold:.003964765928685665,right_val:.323181688785553,left_val:.5187637209892273},{features:[[13,2,4,6,-1],[15,2,2,3,2],[13,5,2,3,2]],threshold:-.022057730704546,right_val:.520098090171814,left_val:.4079256951808929},{features:[[3,2,4,6,-1],[3,2,2,3,2],[5,5,2,3,2]],threshold:-.0006690631271339953,right_val:.3815600872039795,left_val:.533160924911499},{features:[[13,5,1,2,-1],[13,6,1,1,2]],threshold:-.0006700932863168418,right_val:.4688901901245117,left_val:.5655422210693359},{features:[[5,5,2,2,-1],[5,6,2,1,2]],threshold:.000742845528293401,right_val:.6287400126457214,left_val:.4534381031990051},{features:[[13,9,2,2,-1],[13,9,1,2,2]],threshold:.0022227810695767403,right_val:.3303655982017517,left_val:.5350633263587952},{features:[[5,9,2,2,-1],[6,9,1,2,2]],threshold:-.005413052160292864,right_val:.500543475151062,left_val:.1113687008619309},{features:[[13,17,3,2,-1],[13,18,3,1,2]],threshold:-14520040167553816e-21,right_val:.4325133860111237,left_val:.5628737807273865},{features:[[6,16,4,4,-1],[6,16,2,2,2],[8,18,2,2,2]],threshold:.00023369169502984732,right_val:.5447791218757629,left_val:.4165835082530975},{features:[[9,16,2,3,-1],[9,17,2,1,3]],threshold:.004289454780519009,right_val:.6778649091720581,left_val:.4860391020774841},{features:[[0,13,9,6,-1],[0,15,9,2,3]],threshold:.0059103150852024555,right_val:.3612113893032074,left_val:.52623051404953},{features:[[9,14,2,6,-1],[9,17,2,3,2]],threshold:.0129005396738648,right_val:.32502880692482,left_val:.5319377183914185},{features:[[9,15,2,3,-1],[9,16,2,1,3]],threshold:.004698297940194607,right_val:.6665925979614258,left_val:.461824506521225},{features:[[1,10,18,6,-1],[1,12,18,2,3]],threshold:.0104398597031832,right_val:.3883604109287262,left_val:.550567090511322},{features:[[8,11,4,2,-1],[8,12,4,1,2]],threshold:.0030443191062659025,right_val:.7301844954490662,left_val:.4697853028774262},{features:[[7,9,6,2,-1],[7,10,6,1,2]],threshold:-.0006159375188872218,right_val:.5464984178543091,left_val:.3830839097499847},{features:[[8,8,2,3,-1],[8,9,2,1,3]],threshold:-.0034247159492224455,right_val:.5089530944824219,left_val:.256630003452301},{features:[[17,5,3,4,-1],[18,5,1,4,3]],threshold:-.009353856556117535,right_val:.49407958984375,left_val:.6469966173171997},{features:[[1,19,18,1,-1],[7,19,6,1,3]],threshold:.0523389987647533,right_val:.787877082824707,left_val:.4745982885360718},{features:[[9,0,3,2,-1],[10,0,1,2,3]],threshold:.0035765620414167643,right_val:.2748498022556305,left_val:.5306664705276489},{features:[[1,8,1,6,-1],[1,10,1,2,3]],threshold:.0007155531784519553,right_val:.4041908979415894,left_val:.541312575340271},{features:[[12,17,8,3,-1],[12,17,4,3,2]],threshold:-.0105166798457503,right_val:.4815283119678497,left_val:.6158512234687805},{features:[[0,5,3,4,-1],[1,5,1,4,3]],threshold:.007734792772680521,right_val:.7028980851173401,left_val:.4695805907249451},{features:[[9,7,2,3,-1],[9,8,2,1,3]],threshold:-.004322677850723267,right_val:.5304684042930603,left_val:.2849566042423248},{features:[[7,11,2,2,-1],[7,11,1,1,2],[8,12,1,1,2]],threshold:-.0025534399319440126,right_val:.4688892066478729,left_val:.7056984901428223},{features:[[11,3,2,5,-1],[11,3,1,5,2]],threshold:.00010268510231981054,right_val:.5573464035987854,left_val:.3902932107448578},{features:[[7,3,2,5,-1],[8,3,1,5,2]],threshold:7139518857002258e-21,right_val:.526398777961731,left_val:.368423193693161},{features:[[15,13,2,3,-1],[15,14,2,1,3]],threshold:-.0016711989883333445,right_val:.5387271046638489,left_val:.3849175870418549},{features:[[5,6,2,3,-1],[5,7,2,1,3]],threshold:.004926044959574938,right_val:.7447251081466675,left_val:.4729771912097931},{features:[[4,19,15,1,-1],[9,19,5,1,3]],threshold:.0043908702209591866,right_val:.5591921806335449,left_val:.4809181094169617},{features:[[1,19,15,1,-1],[6,19,5,1,3]],threshold:-.0177936293184757,right_val:.4676927030086517,left_val:.6903678178787231},{features:[[15,13,2,3,-1],[15,14,2,1,3]],threshold:.002046966925263405,right_val:.3308162093162537,left_val:.5370690226554871},{features:[[5,0,4,15,-1],[7,0,2,15,2]],threshold:.0298914890736341,right_val:.3309059143066406,left_val:.5139865279197693},{features:[[9,6,2,5,-1],[9,6,1,5,2]],threshold:.0015494900289922953,right_val:.6078342795372009,left_val:.466023713350296},{features:[[9,5,2,7,-1],[10,5,1,7,2]],threshold:.001495696953497827,right_val:.5863919854164124,left_val:.4404835999011993},{features:[[16,11,3,3,-1],[16,12,3,1,3]],threshold:.0009588592802174389,right_val:.4208523035049439,left_val:.5435971021652222},{features:[[1,11,3,3,-1],[1,12,3,1,3]],threshold:.0004964370164088905,right_val:.4000622034072876,left_val:.5370578169822693},{features:[[6,6,8,3,-1],[6,7,8,1,3]],threshold:-.00272808107547462,right_val:.4259642958641052,left_val:.5659412741661072},{features:[[0,15,6,2,-1],[0,16,6,1,2]],threshold:.0023026480339467525,right_val:.3350869119167328,left_val:.5161657929420471},{features:[[1,0,18,6,-1],[7,0,6,6,3]],threshold:.2515163123607636,right_val:.714730978012085,left_val:.4869661927223206},{features:[[6,0,3,4,-1],[7,0,1,4,3]],threshold:-.004632802214473486,right_val:.5083789825439453,left_val:.27274489402771},{features:[[14,10,4,10,-1],[16,10,2,5,2],[14,15,2,5,2]],threshold:-.0404344908893108,right_val:.5021767020225525,left_val:.6851438879966736},{features:[[3,2,3,2,-1],[4,2,1,2,3]],threshold:14972220014897175e-21,right_val:.5522555112838745,left_val:.428446501493454},{features:[[11,2,2,2,-1],[11,3,2,1,2]],threshold:-.00024050309730228037,right_val:.5390074849128723,left_val:.4226118922233582},{features:[[2,10,4,10,-1],[2,10,2,5,2],[4,15,2,5,2]],threshold:.0236578397452831,right_val:.7504366040229797,left_val:.4744631946086884},{features:[[0,13,20,6,-1],[10,13,10,3,2],[0,16,10,3,2]],threshold:-.00814491044729948,right_val:.5538362860679626,left_val:.424505889415741},{features:[[0,5,2,15,-1],[1,5,1,15,2]],threshold:-.003699213033542037,right_val:.4529713094234467,left_val:.5952357053756714},{features:[[1,7,18,4,-1],[10,7,9,2,2],[1,9,9,2,2]],threshold:-.0067718601785600185,right_val:.5473399758338928,left_val:.4137794077396393},{features:[[0,0,2,17,-1],[1,0,1,17,2]],threshold:.004266953095793724,right_val:.5797994136810303,left_val:.4484114944934845},{features:[[2,6,16,6,-1],[10,6,8,3,2],[2,9,8,3,2]],threshold:.0017791989957913756,right_val:.4432444870471954,left_val:.5624858736991882},{features:[[8,14,1,3,-1],[8,15,1,1,3]],threshold:.0016774770338088274,right_val:.63642418384552,left_val:.4637751877307892},{features:[[8,15,4,2,-1],[8,16,4,1,2]],threshold:.0011732629500329494,right_val:.5914415717124939,left_val:.4544503092765808},{features:[[5,2,8,2,-1],[5,2,4,1,2],[9,3,4,1,2]],threshold:.000869981711730361,right_val:.3885917961597443,left_val:.5334752798080444},{features:[[6,11,8,6,-1],[6,14,8,3,2]],threshold:.0007637834060005844,right_val:.374494194984436,left_val:.5398585200309753},{features:[[9,13,2,2,-1],[9,14,2,1,2]],threshold:.00015684569370932877,right_val:.5614616274833679,left_val:.4317873120307922},{features:[[18,4,2,6,-1],[18,6,2,2,3]],threshold:-.0215113703161478,right_val:.5185542702674866,left_val:.1785925030708313},{features:[[9,12,2,2,-1],[9,13,2,1,2]],threshold:.00013081369979772717,right_val:.5682849884033203,left_val:.4342499077320099},{features:[[18,4,2,6,-1],[18,6,2,2,3]],threshold:.021992040798068,right_val:.2379394024610519,left_val:.5161716938018799},{features:[[9,13,1,3,-1],[9,14,1,1,3]],threshold:-.0008013650076463819,right_val:.4466426968574524,left_val:.598676323890686},{features:[[18,4,2,6,-1],[18,6,2,2,3]],threshold:-.008273609913885593,right_val:.5251057147979736,left_val:.410821795463562},{features:[[0,4,2,6,-1],[0,6,2,2,3]],threshold:.0036831789184361696,right_val:.339751809835434,left_val:.5173814296722412},{features:[[9,12,3,3,-1],[9,13,3,1,3]],threshold:-.007952568121254444,right_val:.4845924079418182,left_val:.6888983249664307},{features:[[3,13,2,3,-1],[3,14,2,1,3]],threshold:.0015382299898192286,right_val:.3454113900661469,left_val:.5178567171096802},{features:[[13,13,4,3,-1],[13,14,4,1,3]],threshold:-.0140435304492712,right_val:.518866777420044,left_val:.1678421050310135},{features:[[5,4,3,3,-1],[5,5,3,1,3]],threshold:.0014315890148282051,right_val:.5655773878097534,left_val:.436825692653656},{features:[[5,2,10,6,-1],[5,4,10,2,3]],threshold:-.0340142287313938,right_val:.4959217011928558,left_val:.7802296280860901},{features:[[3,13,4,3,-1],[3,14,4,1,3]],threshold:-.0120272999629378,right_val:.503223180770874,left_val:.1585101038217545},{features:[[3,7,15,5,-1],[8,7,5,5,3]],threshold:.1331661939620972,right_val:.2755128145217896,left_val:.5163304805755615},{features:[[3,7,12,2,-1],[7,7,4,2,3]],threshold:-.0015221949433907866,right_val:.5214552283287048,left_val:.372831791639328},{features:[[10,3,3,9,-1],[11,3,1,9,3]],threshold:-.000939292716793716,right_val:.4511165022850037,left_val:.5838379263877869},{features:[[8,6,4,6,-1],[10,6,2,6,2]],threshold:.0277197398245335,right_val:.7331544756889343,left_val:.4728286862373352},{features:[[9,7,4,3,-1],[9,8,4,1,3]],threshold:.003103015013039112,right_val:.4101563096046448,left_val:.5302202105522156},{features:[[0,9,4,9,-1],[2,9,2,9,2]],threshold:.0778612196445465,right_val:.127296194434166,left_val:.4998334050178528},{features:[[9,13,3,5,-1],[10,13,1,5,3]],threshold:-.0158549398183823,right_val:.5165656208992004,left_val:.0508333593606949},{features:[[7,7,6,3,-1],[9,7,2,3,3]],threshold:-.00497253006324172,right_val:.4684231877326965,left_val:.6798133850097656},{features:[[9,7,3,5,-1],[10,7,1,5,3]],threshold:-.0009767650626599789,right_val:.4788931906223297,left_val:.6010771989822388},{features:[[5,7,8,2,-1],[9,7,4,2,2]],threshold:-.0024647710379213095,right_val:.5220503807067871,left_val:.3393397927284241},{features:[[5,9,12,2,-1],[9,9,4,2,3]],threshold:-.006793770007789135,right_val:.5239663124084473,left_val:.4365136921405792},{features:[[5,6,10,3,-1],[10,6,5,3,2]],threshold:.0326080210506916,right_val:.2425214946269989,left_val:.505272388458252},{features:[[10,12,3,1,-1],[11,12,1,1,3]],threshold:-.0005851442110724747,right_val:.4758574068546295,left_val:.5733973979949951},{features:[[0,1,11,15,-1],[0,6,11,5,3]],threshold:-.0296326000243425,right_val:.5263597965240479,left_val:.3892289102077484}],threshold:66.66912078857422},{simpleClassifiers:[{features:[[1,0,18,6,-1],[7,0,6,6,3]],threshold:.0465508513152599,right_val:.6240522861480713,left_val:.3276950120925903},{features:[[7,7,6,1,-1],[9,7,2,1,3]],threshold:.007953712716698647,right_val:.6942939162254333,left_val:.4256485104560852},{features:[[5,16,6,4,-1],[5,16,3,2,2],[8,18,3,2,2]],threshold:.0006822156137786806,right_val:.59007328748703,left_val:.3711487054824829},{features:[[6,5,9,8,-1],[6,9,9,4,2]],threshold:-.00019348249770700932,right_val:.53005450963974,left_val:.2041133940219879},{features:[[5,10,2,6,-1],[5,13,2,3,2]],threshold:-.0002671050897333771,right_val:.3103179037570953,left_val:.5416126251220703},{features:[[7,6,8,10,-1],[11,6,4,5,2],[7,11,4,5,2]],threshold:.0027818060480058193,right_val:.3467069864273071,left_val:.5277832746505737},{features:[[5,6,8,10,-1],[5,6,4,5,2],[9,11,4,5,2]],threshold:-.000467790785478428,right_val:.3294492065906525,left_val:.5308231115341187},{features:[[9,5,2,2,-1],[9,6,2,1,2]],threshold:-30335160772665404e-21,right_val:.3852097094058991,left_val:.577387273311615},{features:[[5,12,8,2,-1],[5,13,8,1,2]],threshold:.0007803800981491804,right_val:.6150057911872864,left_val:.4317438900470734},{features:[[10,2,8,2,-1],[10,3,8,1,2]],threshold:-.004255385138094425,right_val:.5324292778968811,left_val:.2933903932571411},{features:[[4,0,2,10,-1],[4,0,1,5,2],[5,5,1,5,2]],threshold:-.0002473561035003513,right_val:.3843030035495758,left_val:.5468844771385193},{features:[[9,10,2,2,-1],[9,11,2,1,2]],threshold:-.00014724259381182492,right_val:.5755587220191956,left_val:.4281542897224426},{features:[[2,8,15,3,-1],[2,9,15,1,3]],threshold:.0011864770203828812,right_val:.5471466183662415,left_val:.374730110168457},{features:[[8,13,4,3,-1],[8,14,4,1,3]],threshold:.0023936580400913954,right_val:.6111528873443604,left_val:.4537783861160278},{features:[[7,2,3,2,-1],[8,2,1,2,3]],threshold:-.0015390539774671197,right_val:.518953800201416,left_val:.2971341907978058},{features:[[7,13,6,3,-1],[7,14,6,1,3]],threshold:-.007196879014372826,right_val:.4726476967334747,left_val:.6699066758155823},{features:[[9,9,2,2,-1],[9,10,2,1,2]],threshold:-.0004149978922214359,right_val:.5260317921638489,left_val:.3384954035282135},{features:[[17,2,3,6,-1],[17,4,3,2,3]],threshold:.004435983020812273,right_val:.3920140862464905,left_val:.539912223815918},{features:[[1,5,3,4,-1],[2,5,1,4,3]],threshold:.0026606200262904167,right_val:.6119617819786072,left_val:.4482578039169312},{features:[[14,8,4,6,-1],[14,10,4,2,3]],threshold:-.0015287200221791863,right_val:.5340266227722168,left_val:.3711237907409668},{features:[[1,4,3,8,-1],[2,4,1,8,3]],threshold:-.0047397250309586525,right_val:.4455145001411438,left_val:.603108823299408},{features:[[8,13,4,6,-1],[8,16,4,3,2]],threshold:-.0148291299119592,right_val:.5341861844062805,left_val:.2838754057884216},{features:[[3,14,2,2,-1],[3,15,2,1,2]],threshold:.0009227555710822344,right_val:.3361653983592987,left_val:.5209547281265259},{features:[[14,8,4,6,-1],[14,10,4,2,3]],threshold:.0835298076272011,right_val:.0811644494533539,left_val:.5119969844818115},{features:[[2,8,4,6,-1],[2,10,4,2,3]],threshold:-.0007563314866274595,right_val:.5189831256866455,left_val:.331712007522583},{features:[[10,14,1,6,-1],[10,17,1,3,2]],threshold:.009840385988354683,right_val:.233495905995369,left_val:.524759829044342},{features:[[7,5,3,6,-1],[8,5,1,6,3]],threshold:-.0015953830443322659,right_val:.4295622110366821,left_val:.5750094056129456},{features:[[11,2,2,6,-1],[12,2,1,3,2],[11,5,1,3,2]],threshold:34766020689858124e-21,right_val:.5564029216766357,left_val:.4342445135116577},{features:[[6,6,6,5,-1],[8,6,2,5,3]],threshold:.0298629105091095,right_val:.6579188108444214,left_val:.4579147100448608},{features:[[17,1,3,6,-1],[17,3,3,2,3]],threshold:.0113255903124809,right_val:.3673888146877289,left_val:.5274311900138855},{features:[[8,7,3,5,-1],[9,7,1,5,3]],threshold:-.008782864548265934,right_val:.4642167091369629,left_val:.7100368738174438},{features:[[9,18,3,2,-1],[10,18,1,2,3]],threshold:.004363995976746082,right_val:.2705877125263214,left_val:.5279216170310974},{features:[[8,18,3,2,-1],[9,18,1,2,3]],threshold:.004180472809821367,right_val:.2449083030223846,left_val:.5072525143623352},{features:[[12,3,5,2,-1],[12,4,5,1,2]],threshold:-.0004566851130221039,right_val:.5548691153526306,left_val:.4283105134963989},{features:[[7,1,5,12,-1],[7,7,5,6,2]],threshold:-.0037140368949621916,right_val:.4103653132915497,left_val:.5519387722015381},{features:[[1,0,18,4,-1],[7,0,6,4,3]],threshold:-.025304289534688,right_val:.48698890209198,left_val:.6867002248764038},{features:[[4,2,2,2,-1],[4,3,2,1,2]],threshold:-.0003445408074185252,right_val:.528769314289093,left_val:.3728874027729034},{features:[[11,14,4,2,-1],[13,14,2,1,2],[11,15,2,1,2]],threshold:-.0008393523166887462,right_val:.4616062045097351,left_val:.6060152053833008},{features:[[0,2,3,6,-1],[0,4,3,2,3]],threshold:.0172800496220589,right_val:.1819823980331421,left_val:.5049635767936707},{features:[[9,7,2,3,-1],[9,8,2,1,3]],threshold:-.006359507795423269,right_val:.5232778787612915,left_val:.1631239950656891},{features:[[5,5,1,3,-1],[5,6,1,1,3]],threshold:.0010298109846189618,right_val:.6176549196243286,left_val:.446327805519104},{features:[[10,10,6,1,-1],[10,10,3,1,2]],threshold:.0010117109632119536,right_val:.4300698935985565,left_val:.5473384857177734},{features:[[4,10,6,1,-1],[7,10,3,1,2]],threshold:-.010308800265193,right_val:.5000867247581482,left_val:.1166985034942627},{features:[[9,17,3,3,-1],[9,18,3,1,3]],threshold:.005468201823532581,right_val:.6719213724136353,left_val:.4769287109375},{features:[[4,14,1,3,-1],[4,15,1,1,3]],threshold:-.0009169646073132753,right_val:.5178164839744568,left_val:.3471089899539948},{features:[[12,5,3,3,-1],[12,6,3,1,3]],threshold:.002392282010987401,right_val:.6216310858726501,left_val:.4785236120223999},{features:[[4,5,12,3,-1],[4,6,12,1,3]],threshold:-.007557381875813007,right_val:.4410085082054138,left_val:.5814796090126038},{features:[[9,8,2,3,-1],[9,9,2,1,3]],threshold:-.0007702403236180544,right_val:.546572208404541,left_val:.387800008058548},{features:[[4,9,3,3,-1],[5,9,1,3,3]],threshold:-.00871259905397892,right_val:.4995836019515991,left_val:.1660051047801971},{features:[[6,0,9,17,-1],[9,0,3,17,3]],threshold:-.0103063201531768,right_val:.5274233818054199,left_val:.4093391001224518},{features:[[9,12,1,3,-1],[9,13,1,1,3]],threshold:-.002094097901135683,right_val:.4572280049324036,left_val:.6206194758415222},{features:[[9,5,2,15,-1],[9,10,2,5,3]],threshold:.006809905171394348,right_val:.4155600070953369,left_val:.5567759275436401},{features:[[8,14,2,3,-1],[8,15,2,1,3]],threshold:-.0010746059706434608,right_val:.4353024959564209,left_val:.5638927817344666},{features:[[10,14,1,3,-1],[10,15,1,1,3]],threshold:.0021550289820879698,right_val:.6749758124351501,left_val:.4826265871524811},{features:[[7,1,6,5,-1],[9,1,2,5,3]],threshold:.0317423194646835,right_val:.188324898481369,left_val:.5048379898071289},{features:[[0,0,20,2,-1],[0,0,10,2,2]],threshold:-.0783827230334282,right_val:.5260158181190491,left_val:.2369548976421356},{features:[[2,13,5,3,-1],[2,14,5,1,3]],threshold:.005741511937230825,right_val:.2776469886302948,left_val:.5048828721046448},{features:[[9,11,2,3,-1],[9,12,2,1,3]],threshold:-.0029014600440859795,right_val:.4693317115306854,left_val:.6238604784011841},{features:[[2,5,9,15,-1],[2,10,9,5,3]],threshold:-.0026427931152284145,right_val:.5169777274131775,left_val:.3314141929149628},{features:[[5,0,12,10,-1],[11,0,6,5,2],[5,5,6,5,2]],threshold:-.1094966009259224,right_val:.5183441042900085,left_val:.2380045056343079},{features:[[5,1,2,3,-1],[6,1,1,3,2]],threshold:7407591328956187e-20,right_val:.5362150073051453,left_val:.406963586807251},{features:[[10,7,6,1,-1],[12,7,2,1,3]],threshold:-.0005059380200691521,right_val:.437459409236908,left_val:.5506706237792969},{features:[[3,1,2,10,-1],[3,1,1,5,2],[4,6,1,5,2]],threshold:-.0008213177789002657,right_val:.4209375977516174,left_val:.5525709986686707},{features:[[13,7,2,1,-1],[13,7,1,1,2]],threshold:-60276539443293586e-21,right_val:.4748266041278839,left_val:.5455474853515625},{features:[[4,13,4,6,-1],[4,15,4,2,3]],threshold:.006806514225900173,right_val:.3424577116966248,left_val:.5157995820045471},{features:[[13,7,2,1,-1],[13,7,1,1,2]],threshold:.0017202789895236492,right_val:.6331263780593872,left_val:.5013207793235779},{features:[[5,7,2,1,-1],[6,7,1,1,2]],threshold:-.0001301692973356694,right_val:.4226869940757752,left_val:.5539718270301819},{features:[[2,12,18,4,-1],[11,12,9,2,2],[2,14,9,2,2]],threshold:-.004801638890057802,right_val:.5430780053138733,left_val:.4425095021724701},{features:[[5,7,2,2,-1],[5,7,1,1,2],[6,8,1,1,2]],threshold:-.002539931097999215,right_val:.4697605073451996,left_val:.7145782113075256},{features:[[16,3,4,2,-1],[16,4,4,1,2]],threshold:-.0014278929447755218,right_val:.539960503578186,left_val:.4070445001125336},{features:[[0,2,2,18,-1],[0,2,1,9,2],[1,11,1,9,2]],threshold:-.0251425504684448,right_val:.4747352004051209,left_val:.7884690761566162},{features:[[1,2,18,4,-1],[10,2,9,2,2],[1,4,9,2,2]],threshold:-.0038899609353393316,right_val:.5577110052108765,left_val:.4296191930770874},{features:[[9,14,1,3,-1],[9,15,1,1,3]],threshold:.004394745919853449,right_val:.702394425868988,left_val:.4693162143230438},{features:[[2,12,18,4,-1],[11,12,9,2,2],[2,14,9,2,2]],threshold:.0246784202754498,right_val:.3812510073184967,left_val:.5242322087287903},{features:[[0,12,18,4,-1],[0,12,9,2,2],[9,14,9,2,2]],threshold:.0380476787686348,right_val:.1687828004360199,left_val:.5011739730834961},{features:[[11,4,5,3,-1],[11,5,5,1,3]],threshold:.007942486554384232,right_val:.6369568109512329,left_val:.4828582108020783},{features:[[6,4,7,3,-1],[6,5,7,1,3]],threshold:-.0015110049862414598,right_val:.4487667977809906,left_val:.5906485915184021},{features:[[13,17,3,3,-1],[13,18,3,1,3]],threshold:.0064201741479337215,right_val:.2990570068359375,left_val:.5241097807884216},{features:[[8,1,3,4,-1],[9,1,1,4,3]],threshold:-.0029802159406244755,right_val:.5078489780426025,left_val:.3041465878486633},{features:[[11,4,2,4,-1],[11,4,1,4,2]],threshold:-.0007458007894456387,right_val:.5256826281547546,left_val:.4128139019012451},{features:[[0,17,9,3,-1],[3,17,3,3,3]],threshold:-.0104709500446916,right_val:.4494296014308929,left_val:.5808395147323608},{features:[[11,0,2,8,-1],[12,0,1,4,2],[11,4,1,4,2]],threshold:.009336920455098152,right_val:.265894889831543,left_val:.524655282497406},{features:[[0,8,6,12,-1],[0,8,3,6,2],[3,14,3,6,2]],threshold:.0279369000345469,right_val:.7087256908416748,left_val:.4674955010414124},{features:[[10,7,4,12,-1],[10,13,4,6,2]],threshold:.007427767850458622,right_val:.3758518099784851,left_val:.5409486889839172},{features:[[5,3,8,14,-1],[5,10,8,7,2]],threshold:-.0235845092684031,right_val:.5238550901412964,left_val:.3758639991283417},{features:[[14,10,6,1,-1],[14,10,3,1,2]],threshold:.0011452640173956752,right_val:.5804247260093689,left_val:.4329578876495361},{features:[[0,4,10,4,-1],[0,6,10,2,2]],threshold:-.0004346866044215858,right_val:.3873069882392883,left_val:.5280618071556091},{features:[[10,0,5,8,-1],[10,4,5,4,2]],threshold:.0106485402211547,right_val:.5681251883506775,left_val:.4902113080024719},{features:[[8,1,4,8,-1],[8,1,2,4,2],[10,5,2,4,2]],threshold:-.0003941805043723434,right_val:.4318251013755798,left_val:.5570880174636841},{features:[[9,11,6,1,-1],[11,11,2,1,3]],threshold:-.00013270479394122958,right_val:.4343554973602295,left_val:.5658439993858337},{features:[[8,9,3,4,-1],[9,9,1,4,3]],threshold:-.002012551063671708,right_val:.4537523984909058,left_val:.6056739091873169},{features:[[18,4,2,6,-1],[18,6,2,2,3]],threshold:.0024854319635778666,right_val:.4138010144233704,left_val:.5390477180480957},{features:[[8,8,3,4,-1],[9,8,1,4,3]],threshold:.0018237880431115627,right_val:.5717188715934753,left_val:.4354828894138336},{features:[[7,1,13,3,-1],[7,2,13,1,3]],threshold:-.0166566595435143,right_val:.521612286567688,left_val:.3010913133621216},{features:[[7,13,6,1,-1],[9,13,2,1,3]],threshold:.0008034955826587975,right_val:.3818396925926209,left_val:.5300151109695435},{features:[[12,11,3,6,-1],[12,13,3,2,3]],threshold:.003417037893086672,right_val:.4241400063037872,left_val:.5328028798103333},{features:[[5,11,6,1,-1],[7,11,2,1,3]],threshold:-.00036222729249857366,right_val:.418697714805603,left_val:.5491728186607361},{features:[[1,4,18,10,-1],[10,4,9,5,2],[1,9,9,5,2]],threshold:-.1163002029061317,right_val:.522645115852356,left_val:.1440722048282623},{features:[[8,6,4,9,-1],[8,9,4,3,3]],threshold:-.0146950101479888,right_val:.4715717136859894,left_val:.7747725248336792},{features:[[8,6,4,3,-1],[8,7,4,1,3]],threshold:.0021972130052745342,right_val:.3315644860267639,left_val:.5355433821678162},{features:[[8,7,3,3,-1],[9,7,1,3,3]],threshold:-.00046965209185145795,right_val:.4458136856555939,left_val:.5767235159873962},{features:[[14,15,4,3,-1],[14,16,4,1,3]],threshold:.006514499895274639,right_val:.3647888898849487,left_val:.5215674042701721},{features:[[5,10,3,10,-1],[6,10,1,10,3]],threshold:.0213000606745481,right_val:.1567950993776321,left_val:.4994204938411713},{features:[[8,15,4,3,-1],[8,16,4,1,3]],threshold:.0031881409231573343,right_val:.6287270188331604,left_val:.4742200076580048},{features:[[0,8,1,6,-1],[0,10,1,2,3]],threshold:.0009001977741718292,right_val:.394375205039978,left_val:.5347954034805298},{features:[[10,15,1,3,-1],[10,16,1,1,3]],threshold:-.005177227780222893,right_val:.5013138055801392,left_val:.6727191805839539},{features:[[2,15,4,3,-1],[2,16,4,1,3]],threshold:-.004376464989036322,right_val:.5128793120384216,left_val:.3106675148010254},{features:[[18,3,2,8,-1],[19,3,1,4,2],[18,7,1,4,2]],threshold:.002629996044561267,right_val:.5755215883255005,left_val:.488631010055542},{features:[[0,3,2,8,-1],[0,3,1,4,2],[1,7,1,4,2]],threshold:-.002045868895947933,right_val:.4558076858520508,left_val:.6025794148445129},{features:[[3,7,14,10,-1],[10,7,7,5,2],[3,12,7,5,2]],threshold:.0694827064871788,right_val:.2185259014368057,left_val:.5240747928619385},{features:[[0,7,19,3,-1],[0,8,19,1,3]],threshold:.0240489393472672,right_val:.2090622037649155,left_val:.501186728477478},{features:[[12,6,3,3,-1],[12,7,3,1,3]],threshold:.003109534038230777,right_val:.7108548283576965,left_val:.4866712093353272},{features:[[0,6,1,3,-1],[0,7,1,1,3]],threshold:-.00125032605137676,right_val:.5156195163726807,left_val:.3407891094684601},{features:[[12,6,3,3,-1],[12,7,3,1,3]],threshold:-.0010281190043315291,right_val:.443943202495575,left_val:.557557225227356},{features:[[5,6,3,3,-1],[5,7,3,1,3]],threshold:-.008889362215995789,right_val:.4620442092418671,left_val:.6402000784873962},{features:[[8,2,4,2,-1],[8,3,4,1,2]],threshold:-.0006109480164013803,right_val:.5448899865150452,left_val:.3766441941261292},{features:[[6,3,4,12,-1],[8,3,2,12,2]],threshold:-.005768635775893927,right_val:.5133677124977112,left_val:.3318648934364319},{features:[[13,6,2,3,-1],[13,7,2,1,3]],threshold:.0018506490159779787,right_val:.6406934857368469,left_val:.4903570115566254},{features:[[0,10,20,4,-1],[0,12,20,2,2]],threshold:-.0997994691133499,right_val:.5015562176704407,left_val:.1536051034927368},{features:[[2,0,17,14,-1],[2,7,17,7,2]],threshold:-.3512834906578064,right_val:.5174378752708435,left_val:.0588231310248375},{features:[[0,0,6,10,-1],[0,0,3,5,2],[3,5,3,5,2]],threshold:-.0452445708215237,right_val:.4677872955799103,left_val:.6961488723754883},{features:[[14,6,6,4,-1],[14,6,3,4,2]],threshold:.0714815780520439,right_val:.1038092970848084,left_val:.5167986154556274},{features:[[0,6,6,4,-1],[3,6,3,4,2]],threshold:.0021895780228078365,right_val:.5532060861587524,left_val:.4273078143596649},{features:[[13,2,7,2,-1],[13,3,7,1,2]],threshold:-.0005924265133216977,right_val:.5276389122009277,left_val:.46389439702034},{features:[[0,2,7,2,-1],[0,3,7,1,2]],threshold:.0016788389766588807,right_val:.3932034969329834,left_val:.530164897441864},{features:[[6,11,14,2,-1],[13,11,7,1,2],[6,12,7,1,2]],threshold:-.0022163488902151585,right_val:.4757033884525299,left_val:.5630694031715393},{features:[[8,5,2,2,-1],[8,5,1,1,2],[9,6,1,1,2]],threshold:.00011568699846975505,right_val:.5535702705383301,left_val:.4307535886764526},{features:[[13,9,2,3,-1],[13,9,1,3,2]],threshold:-.007201728876680136,right_val:.5193064212799072,left_val:.144488200545311},{features:[[1,1,3,12,-1],[2,1,1,12,3]],threshold:.0008908127201721072,right_val:.5593621134757996,left_val:.4384432137012482},{features:[[17,4,1,3,-1],[17,5,1,1,3]],threshold:.00019605009583756328,right_val:.4705956876277924,left_val:.5340415835380554},{features:[[2,4,1,3,-1],[2,5,1,1,3]],threshold:.0005202214233577251,right_val:.3810079097747803,left_val:.5213856101036072},{features:[[14,5,1,3,-1],[14,6,1,1,3]],threshold:.0009458857239224017,right_val:.6130738854408264,left_val:.4769414961338043},{features:[[7,16,2,3,-1],[7,17,2,1,3]],threshold:916984718060121e-19,right_val:.5429363250732422,left_val:.4245009124279022},{features:[[8,13,4,6,-1],[10,13,2,3,2],[8,16,2,3,2]],threshold:.002183320000767708,right_val:.419107586145401,left_val:.5457730889320374},{features:[[5,5,1,3,-1],[5,6,1,1,3]],threshold:-.0008603967144154012,right_val:.4471659958362579,left_val:.5764588713645935},{features:[[16,0,4,20,-1],[16,0,2,20,2]],threshold:-.0132362395524979,right_val:.4695009887218475,left_val:.6372823119163513},{features:[[5,1,2,6,-1],[5,1,1,3,2],[6,4,1,3,2]],threshold:.0004337670106906444,right_val:.394582986831665,left_val:.5317873954772949}],threshold:67.69892120361328},{simpleClassifiers:[{features:[[5,4,10,4,-1],[5,6,10,2,2]],threshold:-.024847149848938,right_val:.3873311877250671,left_val:.6555516719818115},{features:[[15,2,4,12,-1],[15,2,2,12,2]],threshold:.006134861148893833,right_val:.5973997712135315,left_val:.374807208776474},{features:[[7,6,4,12,-1],[7,12,4,6,2]],threshold:.006449849810451269,right_val:.2548811137676239,left_val:.542549192905426},{features:[[14,5,1,8,-1],[14,9,1,4,2]],threshold:.0006349121103994548,right_val:.5387253761291504,left_val:.2462442070245743},{features:[[1,4,14,10,-1],[1,4,7,5,2],[8,9,7,5,2]],threshold:.0014023890253156424,right_val:.3528657853603363,left_val:.5594322085380554},{features:[[11,6,6,14,-1],[14,6,3,7,2],[11,13,3,7,2]],threshold:.0003004400059580803,right_val:.576593816280365,left_val:.3958503901958466},{features:[[3,6,6,14,-1],[3,6,3,7,2],[6,13,3,7,2]],threshold:.00010042409849120304,right_val:.5534998178482056,left_val:.3698996901512146},{features:[[4,9,15,2,-1],[9,9,5,2,3]],threshold:-.005084149073809385,right_val:.5547800064086914,left_val:.3711090981960297},{features:[[7,14,6,3,-1],[7,15,6,1,3]],threshold:-.0195372607558966,right_val:.4579297006130219,left_val:.7492755055427551},{features:[[6,3,14,4,-1],[13,3,7,2,2],[6,5,7,2,2]],threshold:-7453274065483129e-21,right_val:.390406996011734,left_val:.5649787187576294},{features:[[1,9,15,2,-1],[6,9,5,2,3]],threshold:-.0036079459823668003,right_val:.5267801284790039,left_val:.3381088078022003},{features:[[6,11,8,9,-1],[6,14,8,3,3]],threshold:.002069750102236867,right_val:.3714388906955719,left_val:.5519291162490845},{features:[[7,4,3,8,-1],[8,4,1,8,3]],threshold:-.0004646384040825069,right_val:.4113566875457764,left_val:.5608214735984802},{features:[[14,6,2,6,-1],[14,9,2,3,2]],threshold:.0007549045258201659,right_val:.532935619354248,left_val:.3559206128120422},{features:[[5,7,6,4,-1],[5,7,3,2,2],[8,9,3,2,2]],threshold:-.0009832223877310753,right_val:.3763205111026764,left_val:.5414795875549316},{features:[[1,1,18,19,-1],[7,1,6,19,3]],threshold:-.0199406407773495,right_val:.4705299139022827,left_val:.634790301322937},{features:[[1,2,6,5,-1],[4,2,3,5,2]],threshold:.0037680300883948803,right_val:.5563716292381287,left_val:.3913489878177643},{features:[[12,17,6,2,-1],[12,18,6,1,2]],threshold:-.009452850557863712,right_val:.5215116739273071,left_val:.2554892897605896},{features:[[2,17,6,2,-1],[2,18,6,1,2]],threshold:.002956084907054901,right_val:.3063920140266419,left_val:.5174679160118103},{features:[[17,3,3,6,-1],[17,5,3,2,3]],threshold:.009107873775064945,right_val:.2885963022708893,left_val:.5388448238372803},{features:[[8,17,3,3,-1],[8,18,3,1,3]],threshold:.0018219229532405734,right_val:.58521968126297,left_val:.4336043000221252},{features:[[10,13,2,6,-1],[10,16,2,3,2]],threshold:.0146887395530939,right_val:.2870005965232849,left_val:.5287361741065979},{features:[[7,13,6,3,-1],[7,14,6,1,3]],threshold:-.0143879903480411,right_val:.4647370874881744,left_val:.701944887638092},{features:[[17,3,3,6,-1],[17,5,3,2,3]],threshold:-.0189866498112679,right_val:.5247011780738831,left_val:.2986552119255066},{features:[[8,13,2,3,-1],[8,14,2,1,3]],threshold:.0011527639580890536,right_val:.593166172504425,left_val:.4323473870754242},{features:[[9,3,6,2,-1],[11,3,2,2,3]],threshold:.0109336702153087,right_val:.3130319118499756,left_val:.5286864042282104},{features:[[0,3,3,6,-1],[0,5,3,2,3]],threshold:-.0149327302351594,right_val:.508407711982727,left_val:.2658419013023377},{features:[[8,5,4,6,-1],[8,7,4,2,3]],threshold:-.0002997053961735219,right_val:.374072402715683,left_val:.5463526844978333},{features:[[5,5,3,2,-1],[5,6,3,1,2]],threshold:.004167762119323015,right_val:.7435721755027771,left_val:.4703496992588043},{features:[[10,1,3,4,-1],[11,1,1,4,3]],threshold:-.00639053201302886,right_val:.5280538201332092,left_val:.2069258987903595},{features:[[1,2,5,9,-1],[1,5,5,3,3]],threshold:.004502960946410894,right_val:.348354309797287,left_val:.518264889717102},{features:[[13,6,2,3,-1],[13,7,2,1,3]],threshold:-.009204036556184292,right_val:.4932360053062439,left_val:.680377721786499},{features:[[0,6,14,3,-1],[7,6,7,3,2]],threshold:.0813272595405579,right_val:.2253051996231079,left_val:.5058398842811584},{features:[[2,11,18,8,-1],[2,15,18,4,2]],threshold:-.150792807340622,right_val:.5264679789543152,left_val:.2963424921035767},{features:[[5,6,2,3,-1],[5,7,2,1,3]],threshold:.0033179009333252907,right_val:.7072932124137878,left_val:.4655495882034302},{features:[[10,6,4,2,-1],[12,6,2,1,2],[10,7,2,1,2]],threshold:.0007740280125290155,right_val:.5668237805366516,left_val:.4780347943305969},{features:[[6,6,4,2,-1],[6,6,2,1,2],[8,7,2,1,2]],threshold:.0006819954141974449,right_val:.5722156763076782,left_val:.4286996126174927},{features:[[10,1,3,4,-1],[11,1,1,4,3]],threshold:.0053671570494771,right_val:.3114621937274933,left_val:.5299307107925415},{features:[[7,1,2,7,-1],[8,1,1,7,2]],threshold:9701866656541824e-20,right_val:.5269461870193481,left_val:.3674638867378235},{features:[[4,2,15,14,-1],[4,9,15,7,2]],threshold:-.1253408938646317,right_val:.5245791077613831,left_val:.2351492047309876},{features:[[8,7,3,2,-1],[9,7,1,2,3]],threshold:-.005251626949757338,right_val:.4693767130374908,left_val:.7115936875343323},{features:[[2,3,18,4,-1],[11,3,9,2,2],[2,5,9,2,2]],threshold:-.007834210991859436,right_val:.5409085750579834,left_val:.4462651014328003},{features:[[9,7,2,2,-1],[10,7,1,2,2]],threshold:-.001131006982177496,right_val:.4417662024497986,left_val:.5945618748664856},{features:[[13,9,2,3,-1],[13,9,1,3,2]],threshold:.0017601120052859187,right_val:.3973453044891357,left_val:.5353249907493591},{features:[[5,2,6,2,-1],[7,2,2,2,3]],threshold:-.00081581249833107,right_val:.5264726877212524,left_val:.3760268092155457},{features:[[9,5,2,7,-1],[9,5,1,7,2]],threshold:-.003868758911266923,right_val:.4749819934368134,left_val:.6309912800788879},{features:[[5,9,2,3,-1],[6,9,1,3,2]],threshold:.0015207129763439298,right_val:.3361223936080933,left_val:.5230181813240051},{features:[[6,0,14,18,-1],[6,9,14,9,2]],threshold:.545867383480072,right_val:.1172635033726692,left_val:.5167139768600464},{features:[[2,16,6,3,-1],[2,17,6,1,3]],threshold:.0156501904129982,right_val:.1393294930458069,left_val:.4979439079761505},{features:[[9,7,3,6,-1],[10,7,1,6,3]],threshold:-.0117318602278829,right_val:.4921196103096008,left_val:.7129650712013245},{features:[[7,8,4,3,-1],[7,9,4,1,3]],threshold:-.006176512222737074,right_val:.5049701929092407,left_val:.2288102954626083},{features:[[7,12,6,3,-1],[7,13,6,1,3]],threshold:.0022457661107182503,right_val:.6048725843429565,left_val:.4632433950901032},{features:[[9,12,2,3,-1],[9,13,2,1,3]],threshold:-.005191586911678314,right_val:.4602192938327789,left_val:.6467421054840088},{features:[[7,12,6,2,-1],[9,12,2,2,3]],threshold:-.0238278806209564,right_val:.5226079225540161,left_val:.1482000946998596},{features:[[5,11,4,6,-1],[5,14,4,3,2]],threshold:.0010284580057486892,right_val:.3375957012176514,left_val:.5135489106178284},{features:[[11,12,7,2,-1],[11,13,7,1,2]],threshold:-.0100788502022624,right_val:.5303567051887512,left_val:.2740561068058014},{features:[[6,10,8,6,-1],[6,10,4,3,2],[10,13,4,3,2]],threshold:.002616893034428358,right_val:.3972454071044922,left_val:.533267080783844},{features:[[11,10,3,4,-1],[11,12,3,2,2]],threshold:.000543853675480932,right_val:.4063411951065064,left_val:.5365604162216187},{features:[[9,16,2,3,-1],[9,17,2,1,3]],threshold:.005351051222532988,right_val:.6889045834541321,left_val:.4653759002685547},{features:[[13,3,1,9,-1],[13,6,1,3,3]],threshold:-.0015274790348485112,right_val:.3624723851680756,left_val:.5449501276016235},{features:[[1,13,14,6,-1],[1,15,14,2,3]],threshold:-.0806244164705276,right_val:.5000287294387817,left_val:.1656087040901184},{features:[[13,6,1,6,-1],[13,9,1,3,2]],threshold:.0221920292824507,right_val:.2002808004617691,left_val:.5132731199264526},{features:[[0,4,3,8,-1],[1,4,1,8,3]],threshold:.007310063112527132,right_val:.6366536021232605,left_val:.4617947936058044},{features:[[18,0,2,18,-1],[18,0,1,18,2]],threshold:-.006406307220458984,right_val:.4867860972881317,left_val:.5916250944137573},{features:[[2,3,6,2,-1],[2,4,6,1,2]],threshold:-.0007641504053026438,right_val:.5315797924995422,left_val:.388840913772583},{features:[[9,0,8,6,-1],[9,2,8,2,3]],threshold:.0007673448999412358,right_val:.5605279803276062,left_val:.4159064888954163},{features:[[6,6,1,6,-1],[6,9,1,3,2]],threshold:.0006147450185380876,right_val:.5120148062705994,left_val:.3089022040367127},{features:[[14,8,6,3,-1],[14,9,6,1,3]],threshold:-.005010527092963457,right_val:.5207306146621704,left_val:.3972199857234955},{features:[[0,0,2,18,-1],[1,0,1,18,2]],threshold:-.008690913207828999,right_val:.4608575999736786,left_val:.6257408261299133},{features:[[1,18,18,2,-1],[10,18,9,1,2],[1,19,9,1,2]],threshold:-.016391459852457,right_val:.5242266058921814,left_val:.2085209935903549},{features:[[3,15,2,2,-1],[3,16,2,1,2]],threshold:.00040973909199237823,right_val:.3780320882797241,left_val:.5222427248954773},{features:[[8,14,5,3,-1],[8,15,5,1,3]],threshold:-.002524228999391198,right_val:.4611890017986298,left_val:.5803927183151245},{features:[[8,14,2,3,-1],[8,15,2,1,3]],threshold:.0005094531225040555,right_val:.5846015810966492,left_val:.4401271939277649},{features:[[12,3,3,3,-1],[13,3,1,3,3]],threshold:.001965641975402832,right_val:.4184590876102448,left_val:.5322325229644775},{features:[[7,5,6,2,-1],[9,5,2,2,3]],threshold:.0005629889783449471,right_val:.5234565734863281,left_val:.3741844892501831},{features:[[15,5,5,2,-1],[15,6,5,1,2]],threshold:-.0006794679793529212,right_val:.5356478095054626,left_val:.4631041884422302},{features:[[0,5,5,2,-1],[0,6,5,1,2]],threshold:.007285634987056255,right_val:.2377564013004303,left_val:.5044670104980469},{features:[[17,14,1,6,-1],[17,17,1,3,2]],threshold:-.0174594894051552,right_val:.5050435066223145,left_val:.7289121150970459},{features:[[2,9,9,3,-1],[5,9,3,3,3]],threshold:-.0254217498004436,right_val:.4678100049495697,left_val:.6667134761810303},{features:[[12,3,3,3,-1],[13,3,1,3,3]],threshold:-.0015647639520466328,right_val:.532362699508667,left_val:.4391759037971497},{features:[[0,0,4,18,-1],[2,0,2,18,2]],threshold:.0114443600177765,right_val:.5680012106895447,left_val:.4346440136432648},{features:[[17,6,1,3,-1],[17,7,1,1,3]],threshold:-.0006735255010426044,right_val:.5296812057495117,left_val:.44771409034729},{features:[[2,14,1,6,-1],[2,17,1,3,2]],threshold:.009319420903921127,right_val:.7462607026100159,left_val:.4740200042724609},{features:[[19,8,1,2,-1],[19,9,1,1,2]],threshold:.00013328490604180843,right_val:.475213497877121,left_val:.536506175994873},{features:[[5,3,3,3,-1],[6,3,1,3,3]],threshold:-.007881579920649529,right_val:.5015255212783813,left_val:.1752219051122665},{features:[[9,16,2,3,-1],[9,17,2,1,3]],threshold:-.005798568017780781,right_val:.4896200895309448,left_val:.7271236777305603},{features:[[2,6,1,3,-1],[2,7,1,1,3]],threshold:-.0003892249951604754,right_val:.5344941020011902,left_val:.4003908932209015},{features:[[12,4,8,2,-1],[16,4,4,1,2],[12,5,4,1,2]],threshold:-.0019288610201328993,right_val:.4803955852985382,left_val:.5605612993240356},{features:[[0,4,8,2,-1],[0,4,4,1,2],[4,5,4,1,2]],threshold:.008421415463089943,right_val:.7623608708381653,left_val:.4753246903419495},{features:[[2,16,18,4,-1],[2,18,18,2,2]],threshold:.008165587671101093,right_val:.419164389371872,left_val:.5393261909484863},{features:[[7,15,2,4,-1],[7,17,2,2,2]],threshold:.00048280550981871784,right_val:.5399821996688843,left_val:.4240800142288208},{features:[[4,0,14,3,-1],[4,1,14,1,3]],threshold:-.002718663075938821,right_val:.5424923896789551,left_val:.4244599938392639},{features:[[0,0,4,20,-1],[2,0,2,20,2]],threshold:-.0125072300434113,right_val:.4550411105155945,left_val:.5895841717720032},{features:[[12,4,4,8,-1],[14,4,2,4,2],[12,8,2,4,2]],threshold:-.0242865197360516,right_val:.518917977809906,left_val:.2647134959697723},{features:[[6,7,2,2,-1],[6,7,1,1,2],[7,8,1,1,2]],threshold:-.0029676330741494894,right_val:.4749749898910523,left_val:.734768271446228},{features:[[10,6,2,3,-1],[10,7,2,1,3]],threshold:-.0125289997085929,right_val:.5177599787712097,left_val:.2756049931049347},{features:[[8,7,3,2,-1],[8,8,3,1,2]],threshold:-.0010104000102728605,right_val:.5144724249839783,left_val:.3510560989379883},{features:[[8,2,6,12,-1],[8,8,6,6,2]],threshold:-.0021348530426621437,right_val:.466731995344162,left_val:.5637925863265991},{features:[[4,0,11,12,-1],[4,4,11,4,3]],threshold:.0195642597973347,right_val:.6137639880180359,left_val:.4614573121070862},{features:[[14,9,6,11,-1],[16,9,2,11,3]],threshold:-.0971463471651077,right_val:.5193555951118469,left_val:.2998378872871399},{features:[[0,14,4,3,-1],[0,15,4,1,3]],threshold:.00450145686045289,right_val:.3045755922794342,left_val:.5077884793281555},{features:[[9,10,2,3,-1],[9,11,2,1,3]],threshold:.006370697170495987,right_val:.6887500882148743,left_val:.486101895570755},{features:[[5,11,3,2,-1],[5,12,3,1,2]],threshold:-.009072152897715569,right_val:.5017563104629517,left_val:.1673395931720734},{features:[[9,15,3,3,-1],[10,15,1,3,3]],threshold:-.005353720858693123,right_val:.524263322353363,left_val:.2692756950855255},{features:[[8,8,3,4,-1],[9,8,1,4,3]],threshold:-.0109328404068947,right_val:.4736028909683228,left_val:.7183864116668701},{features:[[9,15,3,3,-1],[10,15,1,3,3]],threshold:.008235607296228409,right_val:.2389862984418869,left_val:.5223966836929321},{features:[[7,7,3,2,-1],[8,7,1,2,3]],threshold:-.0010038160253316164,right_val:.4433943033218384,left_val:.5719355940818787},{features:[[2,10,16,4,-1],[10,10,8,2,2],[2,12,8,2,2]],threshold:.004085912834852934,right_val:.4148836135864258,left_val:.5472841858863831},{features:[[2,3,4,17,-1],[4,3,2,17,2]],threshold:.1548541933298111,right_val:.0610615983605385,left_val:.4973812103271484},{features:[[15,13,2,7,-1],[15,13,1,7,2]],threshold:.00020897459762636572,right_val:.542388916015625,left_val:.4709174036979675},{features:[[2,2,6,1,-1],[5,2,3,1,2]],threshold:.0003331699117552489,right_val:.5300992131233215,left_val:.4089626967906952},{features:[[5,2,12,4,-1],[9,2,4,4,3]],threshold:-.0108134001493454,right_val:.4957334101200104,left_val:.6104369759559631},{features:[[6,0,8,12,-1],[6,0,4,6,2],[10,6,4,6,2]],threshold:.0456560105085373,right_val:.2866660058498383,left_val:.5069689154624939},{features:[[13,7,2,2,-1],[14,7,1,1,2],[13,8,1,1,2]],threshold:.0012569549726322293,right_val:.631817102432251,left_val:.484691709280014},{features:[[0,12,20,6,-1],[0,14,20,2,3]],threshold:-.120150700211525,right_val:.4980959892272949,left_val:.0605261400341988},{features:[[14,7,2,3,-1],[14,7,1,3,2]],threshold:-.00010533799650147557,right_val:.4708042144775391,left_val:.5363109707832336},{features:[[0,8,9,12,-1],[3,8,3,12,3]],threshold:-.2070319056510925,right_val:.497909814119339,left_val:.059660330414772},{features:[[3,0,16,2,-1],[3,0,8,2,2]],threshold:.00012909180077258497,right_val:.5377997756004333,left_val:.4712977111339569},{features:[[6,15,3,3,-1],[6,16,3,1,3]],threshold:.000388185289921239,right_val:.5534191131591797,left_val:.4363538026809692},{features:[[8,15,6,3,-1],[8,16,6,1,3]],threshold:-.0029243610333651304,right_val:.4825215935707092,left_val:.5811185836791992},{features:[[0,10,1,6,-1],[0,12,1,2,3]],threshold:.0008388233254663646,right_val:.403813898563385,left_val:.5311700105667114},{features:[[10,9,4,3,-1],[10,10,4,1,3]],threshold:-.0019061550265178084,right_val:.526001513004303,left_val:.3770701885223389},{features:[[9,15,2,3,-1],[9,16,2,1,3]],threshold:.00895143486559391,right_val:.7682183980941772,left_val:.4766167998313904},{features:[[5,7,10,1,-1],[5,7,5,1,2]],threshold:.0130834598094225,right_val:.3062222003936768,left_val:.5264462828636169},{features:[[4,0,12,19,-1],[10,0,6,19,2]],threshold:-.2115933001041412,right_val:.4695810079574585,left_val:.6737198233604431},{features:[[0,6,20,6,-1],[10,6,10,3,2],[0,9,10,3,2]],threshold:.0031493250280618668,right_val:.4386953115463257,left_val:.5644835233688354},{features:[[3,6,2,2,-1],[3,6,1,1,2],[4,7,1,1,2]],threshold:.00039754100725986063,right_val:.5895630121231079,left_val:.4526061117649078},{features:[[15,6,2,2,-1],[16,6,1,1,2],[15,7,1,1,2]],threshold:-.0013814480043947697,right_val:.4942413866519928,left_val:.6070582270622253},{features:[[3,6,2,2,-1],[3,6,1,1,2],[4,7,1,1,2]],threshold:-.0005812218878418207,right_val:.4508252143859863,left_val:.5998213291168213},{features:[[14,4,1,12,-1],[14,10,1,6,2]],threshold:-.002390532987192273,right_val:.5223848223686218,left_val:.420558899641037},{features:[[2,5,16,10,-1],[2,5,8,5,2],[10,10,8,5,2]],threshold:.0272689294070005,right_val:.3563301861286163,left_val:.5206447243690491},{features:[[9,17,3,2,-1],[10,17,1,2,3]],threshold:-.0037658358924090862,right_val:.5218814015388489,left_val:.3144704103469849},{features:[[1,4,2,2,-1],[1,5,2,1,2]],threshold:-.0014903489500284195,right_val:.5124437212944031,left_val:.338019609451294},{features:[[5,0,15,5,-1],[10,0,5,5,3]],threshold:-.0174282304942608,right_val:.4919725954532623,left_val:.5829960703849792},{features:[[0,0,15,5,-1],[5,0,5,5,3]],threshold:-.0152780301868916,right_val:.4617887139320374,left_val:.6163144707679749},{features:[[11,2,2,17,-1],[11,2,1,17,2]],threshold:.0319956094026566,right_val:.171276405453682,left_val:.5166357159614563},{features:[[7,2,2,17,-1],[8,2,1,17,2]],threshold:-.003825671039521694,right_val:.5131387710571289,left_val:.3408012092113495},{features:[[15,11,2,9,-1],[15,11,1,9,2]],threshold:-.00851864367723465,right_val:.4997941851615906,left_val:.6105518937110901},{features:[[3,11,2,9,-1],[4,11,1,9,2]],threshold:.0009064162150025368,right_val:.5582311153411865,left_val:.4327270984649658},{features:[[5,16,14,4,-1],[5,16,7,4,2]],threshold:.0103448498994112,right_val:.5452420115470886,left_val:.4855653047561646}],threshold:69.22987365722656},{simpleClassifiers:[{features:[[1,4,18,1,-1],[7,4,6,1,3]],threshold:.007898182608187199,right_val:.5946462154388428,left_val:.333252489566803},{features:[[13,7,6,4,-1],[16,7,3,2,2],[13,9,3,2,2]],threshold:.0016170160379260778,right_val:.5577868819236755,left_val:.3490641117095947},{features:[[9,8,2,12,-1],[9,12,2,4,3]],threshold:-.0005544974119402468,right_val:.3291530013084412,left_val:.5542566180229187},{features:[[12,1,6,6,-1],[12,3,6,2,3]],threshold:.001542898011393845,right_val:.5545979142189026,left_val:.3612579107284546},{features:[[5,2,6,6,-1],[5,2,3,3,2],[8,5,3,3,2]],threshold:-.0010329450014978647,right_val:.5576140284538269,left_val:.3530139029026032},{features:[[9,16,6,4,-1],[12,16,3,2,2],[9,18,3,2,2]],threshold:.0007769815856590867,right_val:.5645321011543274,left_val:.3916778862476349},{features:[[1,2,18,3,-1],[7,2,6,3,3]],threshold:.143203005194664,right_val:.7023633122444153,left_val:.4667482078075409},{features:[[7,4,9,10,-1],[7,9,9,5,2]],threshold:-.007386649027466774,right_val:.5289257764816284,left_val:.3073684871196747},{features:[[5,9,4,4,-1],[7,9,2,4,2]],threshold:-.0006293674232438207,right_val:.4037049114704132,left_val:.562211811542511},{features:[[11,10,3,6,-1],[11,13,3,3,2]],threshold:.0007889352855272591,right_val:.3557874858379364,left_val:.5267661213874817},{features:[[7,11,5,3,-1],[7,12,5,1,3]],threshold:-.0122280502691865,right_val:.4625549912452698,left_val:.6668320894241333},{features:[[7,11,6,6,-1],[10,11,3,3,2],[7,14,3,3,2]],threshold:.0035420239437371492,right_val:.3869673013687134,left_val:.5521438121795654},{features:[[0,0,10,9,-1],[0,3,10,3,3]],threshold:-.0010585320414975286,right_val:.5320926904678345,left_val:.3628678023815155},{features:[[13,14,1,6,-1],[13,16,1,2,3]],threshold:14935660146875307e-21,right_val:.5363323092460632,left_val:.4632444977760315},{features:[[0,2,3,6,-1],[0,4,3,2,3]],threshold:.005253770854324102,right_val:.3265708982944489,left_val:.5132231712341309},{features:[[8,14,4,3,-1],[8,15,4,1,3]],threshold:-.008233802393078804,right_val:.4774140119552612,left_val:.6693689823150635},{features:[[6,14,1,6,-1],[6,16,1,2,3]],threshold:2186681012972258e-20,right_val:.5457931160926819,left_val:.405386209487915},{features:[[9,15,2,3,-1],[9,16,2,1,3]],threshold:-.0038150229956954718,right_val:.4793178141117096,left_val:.645499587059021},{features:[[6,4,3,3,-1],[7,4,1,3,3]],threshold:.0011105879675596952,right_val:.3529678881168366,left_val:.5270407199859619},{features:[[9,0,11,3,-1],[9,1,11,1,3]],threshold:-.005770768970251083,right_val:.5352957844734192,left_val:.3803547024726868},{features:[[0,6,20,3,-1],[0,7,20,1,3]],threshold:-.003015833906829357,right_val:.3887133002281189,left_val:.533940315246582},{features:[[10,1,1,2,-1],[10,2,1,1,2]],threshold:-.0008545368909835815,right_val:.5273603796958923,left_val:.3564616143703461},{features:[[9,6,2,6,-1],[10,6,1,6,2]],threshold:.0110505102202296,right_val:.6849737763404846,left_val:.4671907126903534},{features:[[5,8,12,1,-1],[9,8,4,1,3]],threshold:.0426058396697044,right_val:.0702200904488564,left_val:.51514732837677},{features:[[3,8,12,1,-1],[7,8,4,1,3]],threshold:-.0030781750101596117,right_val:.5152602195739746,left_val:.3041661083698273},{features:[[9,7,3,5,-1],[10,7,1,5,3]],threshold:-.005481572821736336,right_val:.4897229969501495,left_val:.6430295705795288},{features:[[3,9,6,2,-1],[6,9,3,2,2]],threshold:.003188186092302203,right_val:.3826209902763367,left_val:.5307493209838867},{features:[[12,9,3,3,-1],[12,10,3,1,3]],threshold:.00035947180003859103,right_val:.5421904921531677,left_val:.4650047123432159},{features:[[7,0,6,1,-1],[9,0,2,1,3]],threshold:-.004070503171533346,right_val:.5079116225242615,left_val:.2849679887294769},{features:[[12,9,3,3,-1],[12,10,3,1,3]],threshold:-.0145941702648997,right_val:.5128461718559265,left_val:.2971645891666412},{features:[[7,10,2,1,-1],[8,10,1,1,2]],threshold:-.00011947689927183092,right_val:.4343082010746002,left_val:.563109815120697},{features:[[6,4,9,13,-1],[9,4,3,13,3]],threshold:-.0006934464909136295,right_val:.5359959006309509,left_val:.4403578042984009},{features:[[6,8,4,2,-1],[6,9,4,1,2]],threshold:14834799912932795e-21,right_val:.5164697766304016,left_val:.3421008884906769},{features:[[16,2,4,6,-1],[16,2,2,6,2]],threshold:.009029698558151722,right_val:.6114075183868408,left_val:.4639343023300171},{features:[[0,17,6,3,-1],[0,18,6,1,3]],threshold:-.008064081892371178,right_val:.5075494050979614,left_val:.2820158898830414},{features:[[10,10,3,10,-1],[10,15,3,5,2]],threshold:.0260621197521687,right_val:.2688778042793274,left_val:.5208905935287476},{features:[[8,7,3,5,-1],[9,7,1,5,3]],threshold:.0173146594315767,right_val:.6738539934158325,left_val:.4663713872432709},{features:[[10,4,4,3,-1],[10,4,2,3,2]],threshold:.0226666405797005,right_val:.2212723940610886,left_val:.5209349989891052},{features:[[8,4,3,8,-1],[9,4,1,8,3]],threshold:-.002196592977270484,right_val:.4538190066814423,left_val:.6063101291656494},{features:[[6,6,9,13,-1],[9,6,3,13,3]],threshold:-.009528247639536858,right_val:.5247430801391602,left_val:.4635204970836639},{features:[[6,0,8,12,-1],[6,0,4,6,2],[10,6,4,6,2]],threshold:.00809436198323965,right_val:.3913882076740265,left_val:.5289440155029297},{features:[[14,2,6,8,-1],[16,2,2,8,3]],threshold:-.0728773325681686,right_val:.4990234971046448,left_val:.7752001881599426},{features:[[6,0,3,6,-1],[7,0,1,6,3]],threshold:-.006900952197611332,right_val:.5048090219497681,left_val:.2428039014339447},{features:[[14,2,6,8,-1],[16,2,2,8,3]],threshold:-.0113082397729158,right_val:.4842376112937927,left_val:.5734364986419678},{features:[[0,5,6,6,-1],[0,8,6,3,2]],threshold:.0596132017672062,right_val:.2524977028369904,left_val:.5029836297035217},{features:[[9,12,6,2,-1],[12,12,3,1,2],[9,13,3,1,2]],threshold:-.0028624620754271746,right_val:.4898459911346436,left_val:.6073045134544373},{features:[[8,17,3,2,-1],[9,17,1,2,3]],threshold:.00447814492508769,right_val:.2220316976308823,left_val:.5015289187431335},{features:[[11,6,2,2,-1],[12,6,1,1,2],[11,7,1,1,2]],threshold:-.001751324045471847,right_val:.4933868944644928,left_val:.6614428758621216},{features:[[1,9,18,2,-1],[7,9,6,2,3]],threshold:.0401634201407433,right_val:.3741044998168945,left_val:.5180878043174744},{features:[[11,6,2,2,-1],[12,6,1,1,2],[11,7,1,1,2]],threshold:.0003476894926279783,right_val:.5818032026290894,left_val:.4720416963100433},{features:[[3,4,12,8,-1],[7,4,4,8,3]],threshold:.00265516503714025,right_val:.5221335887908936,left_val:.3805010914802551},{features:[[13,11,5,3,-1],[13,12,5,1,3]],threshold:-.008770627900958061,right_val:.5231295228004456,left_val:.294416606426239},{features:[[9,10,2,3,-1],[9,11,2,1,3]],threshold:-.005512209143489599,right_val:.4722816944122315,left_val:.7346177101135254},{features:[[14,7,2,3,-1],[14,7,1,3,2]],threshold:.0006867204210720956,right_val:.424241304397583,left_val:.5452876091003418},{features:[[5,4,1,3,-1],[5,5,1,1,3]],threshold:.0005601966986432672,right_val:.5601285099983215,left_val:.439886212348938},{features:[[13,4,2,3,-1],[13,5,2,1,3]],threshold:.0024143769405782223,right_val:.6136621832847595,left_val:.4741686880588532},{features:[[5,4,2,3,-1],[5,5,2,1,3]],threshold:-.0015680900542065501,right_val:.4516409933567047,left_val:.604455292224884},{features:[[9,8,2,3,-1],[9,9,2,1,3]],threshold:-.0036827491130679846,right_val:.5294982194900513,left_val:.2452459037303925},{features:[[8,9,2,2,-1],[8,10,2,1,2]],threshold:-.000294091907562688,right_val:.5251451134681702,left_val:.3732838034629822},{features:[[15,14,1,4,-1],[15,16,1,2,2]],threshold:.00042847759323194623,right_val:.4065535068511963,left_val:.5498809814453125},{features:[[3,12,2,2,-1],[3,13,2,1,2]],threshold:-.004881707020103931,right_val:.4999957084655762,left_val:.2139908969402313},{features:[[12,15,2,2,-1],[13,15,1,1,2],[12,16,1,1,2]],threshold:.00027272020815871656,right_val:.581342875957489,left_val:.465028703212738},{features:[[9,13,2,2,-1],[9,14,2,1,2]],threshold:.00020947199664078653,right_val:.5572792887687683,left_val:.4387486875057221},{features:[[4,11,14,9,-1],[4,14,14,3,3]],threshold:.0485011897981167,right_val:.3212889134883881,left_val:.5244972705841064},{features:[[7,13,4,3,-1],[7,14,4,1,3]],threshold:-.004516641143709421,right_val:.4545882046222687,left_val:.605681300163269},{features:[[15,14,1,4,-1],[15,16,1,2,2]],threshold:-.0122916800901294,right_val:.5152214169502258,left_val:.2040929049253464},{features:[[4,14,1,4,-1],[4,16,1,2,2]],threshold:.0004854967992287129,right_val:.3739503026008606,left_val:.5237604975700378},{features:[[14,0,6,13,-1],[16,0,2,13,3]],threshold:.0305560491979122,right_val:.5938246250152588,left_val:.4960533976554871},{features:[[4,1,2,12,-1],[4,1,1,6,2],[5,7,1,6,2]],threshold:-.00015105320198927075,right_val:.4145204126834869,left_val:.5351303815841675},{features:[[11,14,6,6,-1],[14,14,3,3,2],[11,17,3,3,2]],threshold:.0024937440175563097,right_val:.5514941215515137,left_val:.4693366885185242},{features:[[3,14,6,6,-1],[3,14,3,3,2],[6,17,3,3,2]],threshold:-.012382130138576,right_val:.4681667983531952,left_val:.6791396737098694},{features:[[14,17,3,2,-1],[14,18,3,1,2]],threshold:-.005133346188813448,right_val:.5229160189628601,left_val:.3608739078044891},{features:[[3,17,3,2,-1],[3,18,3,1,2]],threshold:.0005191927775740623,right_val:.3633613884449005,left_val:.5300073027610779},{features:[[14,0,6,13,-1],[16,0,2,13,3]],threshold:.1506042033433914,right_val:.2211782038211823,left_val:.515731692314148},{features:[[0,0,6,13,-1],[2,0,2,13,3]],threshold:.007714414969086647,right_val:.5776609182357788,left_val:.4410496950149536},{features:[[10,10,7,6,-1],[10,12,7,2,3]],threshold:.009444352239370346,right_val:.375665009021759,left_val:.5401855111122131},{features:[[6,15,2,2,-1],[6,15,1,1,2],[7,16,1,1,2]],threshold:.00025006249779835343,right_val:.5607374906539917,left_val:.4368270933628082},{features:[[6,11,8,6,-1],[10,11,4,3,2],[6,14,4,3,2]],threshold:-.003307715058326721,right_val:.551823079586029,left_val:.4244799017906189},{features:[[7,6,2,2,-1],[7,6,1,1,2],[8,7,1,1,2]],threshold:.0007404891075566411,right_val:.5900576710700989,left_val:.4496962130069733},{features:[[2,2,16,6,-1],[10,2,8,3,2],[2,5,8,3,2]],threshold:.0440920516848564,right_val:.3156355023384094,left_val:.5293493270874023},{features:[[5,4,3,3,-1],[5,5,3,1,3]],threshold:.0033639909233897924,right_val:.5848662257194519,left_val:.4483296871185303},{features:[[11,7,3,10,-1],[11,12,3,5,2]],threshold:-.003976007923483849,right_val:.5483639240264893,left_val:.4559507071971893},{features:[[6,7,3,10,-1],[6,12,3,5,2]],threshold:.0027716930489987135,right_val:.3792484104633331,left_val:.534178614616394},{features:[[10,7,3,2,-1],[11,7,1,2,3]],threshold:-.00024123019829858094,right_val:.4576973021030426,left_val:.5667188763618469},{features:[[8,12,4,2,-1],[8,13,4,1,2]],threshold:.0004942566738463938,right_val:.5628787279129028,left_val:.4421244859695435},{features:[[10,1,1,3,-1],[10,2,1,1,3]],threshold:-.0003887646889779717,right_val:.5391063094139099,left_val:.4288370907306671},{features:[[1,2,4,18,-1],[1,2,2,9,2],[3,11,2,9,2]],threshold:-.0500488989055157,right_val:.4703742861747742,left_val:.6899513006210327},{features:[[12,4,4,12,-1],[12,10,4,6,2]],threshold:-.0366354808211327,right_val:.5191826224327087,left_val:.2217779010534287},{features:[[0,0,1,6,-1],[0,2,1,2,3]],threshold:.0024273579474538565,right_val:.3497397899627686,left_val:.5136224031448364},{features:[[9,11,2,3,-1],[9,12,2,1,3]],threshold:.001955803018063307,right_val:.640838086605072,left_val:.4826192855834961},{features:[[8,7,4,3,-1],[8,8,4,1,3]],threshold:-.0017494610510766506,right_val:.5272685289382935,left_val:.3922835886478424},{features:[[10,7,3,2,-1],[11,7,1,2,3]],threshold:.0139550799503922,right_val:.8416504859924316,left_val:.507820188999176},{features:[[7,7,3,2,-1],[8,7,1,2,3]],threshold:-.00021896739781368524,right_val:.4314234852790833,left_val:.5520489811897278},{features:[[9,4,6,1,-1],[11,4,2,1,3]],threshold:-.0015131309628486633,right_val:.5382571220397949,left_val:.3934605121612549},{features:[[8,7,2,3,-1],[9,7,1,3,2]],threshold:-.004362280014902353,right_val:.4736475944519043,left_val:.7370628714561462},{features:[[12,7,8,6,-1],[16,7,4,3,2],[12,10,4,3,2]],threshold:.0651605874300003,right_val:.328159511089325,left_val:.5159279704093933},{features:[[0,7,8,6,-1],[0,7,4,3,2],[4,10,4,3,2]],threshold:-.0023567399475723505,right_val:.5172886252403259,left_val:.3672826886177063},{features:[[18,2,2,10,-1],[19,2,1,5,2],[18,7,1,5,2]],threshold:.0151466596871614,right_val:.6687604188919067,left_val:.5031493902206421},{features:[[0,2,6,4,-1],[3,2,3,4,2]],threshold:-.0228509604930878,right_val:.4709596931934357,left_val:.676751971244812},{features:[[9,4,6,1,-1],[11,4,2,1,3]],threshold:.004886765033006668,right_val:.4059878885746002,left_val:.5257998108863831},{features:[[7,15,2,2,-1],[7,15,1,1,2],[8,16,1,1,2]],threshold:.0017619599821045995,right_val:.6688278913497925,left_val:.4696272909641266},{features:[[11,13,1,6,-1],[11,16,1,3,2]],threshold:-.0012942519970238209,right_val:.5344281792640686,left_val:.4320712983608246},{features:[[8,13,1,6,-1],[8,16,1,3,2]],threshold:.0109299495816231,right_val:.1637486070394516,left_val:.4997706115245819},{features:[[14,3,2,1,-1],[14,3,1,1,2]],threshold:2995848990394734e-20,right_val:.5633224248886108,left_val:.4282417893409729},{features:[[8,15,2,3,-1],[8,16,2,1,3]],threshold:-.0065884361974895,right_val:.4700526893138886,left_val:.677212119102478},{features:[[12,15,7,4,-1],[12,17,7,2,2]],threshold:.0032527779694646597,right_val:.4536148905754089,left_val:.531339704990387},{features:[[4,14,12,3,-1],[4,15,12,1,3]],threshold:-.00404357397928834,right_val:.4413388967514038,left_val:.5660061836242676},{features:[[10,3,3,2,-1],[11,3,1,2,3]],threshold:-.0012523540062829852,right_val:.5356451869010925,left_val:.3731913864612579},{features:[[4,12,2,2,-1],[4,13,2,1,2]],threshold:.00019246719602961093,right_val:.3738811016082764,left_val:.5189986228942871},{features:[[10,11,4,6,-1],[10,14,4,3,2]],threshold:-.038589671254158,right_val:.51888108253479,left_val:.2956373989582062},{features:[[7,13,2,2,-1],[7,13,1,1,2],[8,14,1,1,2]],threshold:.0001548987056594342,right_val:.5509533286094666,left_val:.4347135126590729},{features:[[4,11,14,4,-1],[11,11,7,2,2],[4,13,7,2,2]],threshold:-.0337638482451439,right_val:.5195475816726685,left_val:.3230330049991608},{features:[[1,18,18,2,-1],[7,18,6,2,3]],threshold:-.008265706710517406,right_val:.4552114009857178,left_val:.5975489020347595},{features:[[11,18,2,2,-1],[12,18,1,1,2],[11,19,1,1,2]],threshold:14481440302915871e-21,right_val:.5497426986694336,left_val:.4745678007602692},{features:[[7,18,2,2,-1],[7,18,1,1,2],[8,19,1,1,2]],threshold:14951299817766994e-21,right_val:.5480644106864929,left_val:.4324473142623901},{features:[[12,18,8,2,-1],[12,19,8,1,2]],threshold:-.018741799518466,right_val:.517853319644928,left_val:.1580052971839905},{features:[[7,14,6,2,-1],[7,15,6,1,2]],threshold:.0017572239739820361,right_val:.5773764252662659,left_val:.4517636895179749},{features:[[8,12,4,8,-1],[10,12,2,4,2],[8,16,2,4,2]],threshold:-.0031391119118779898,right_val:.5460842251777649,left_val:.4149647951126099},{features:[[4,9,3,3,-1],[4,10,3,1,3]],threshold:6665677938144654e-20,right_val:.5293084979057312,left_val:.4039090871810913},{features:[[7,10,6,2,-1],[9,10,2,2,3]],threshold:.006774342153221369,right_val:.612195611000061,left_val:.4767651855945587},{features:[[5,0,4,15,-1],[7,0,2,15,2]],threshold:-.0073868161998689175,right_val:.5187280774116516,left_val:.3586258888244629},{features:[[8,6,12,14,-1],[12,6,4,14,3]],threshold:.0140409301966429,right_val:.5576155781745911,left_val:.4712139964103699},{features:[[5,16,3,3,-1],[5,17,3,1,3]],threshold:-.005525832995772362,right_val:.5039281249046326,left_val:.2661027014255524},{features:[[8,1,12,19,-1],[12,1,4,19,3]],threshold:.3868423998355866,right_val:.2525899112224579,left_val:.5144339799880981},{features:[[3,0,3,2,-1],[3,1,3,1,2]],threshold:.0001145924034062773,right_val:.5423371195793152,left_val:.4284994900226593},{features:[[10,12,4,5,-1],[10,12,2,5,2]],threshold:-.0184675697237253,right_val:.5213062167167664,left_val:.3885835111141205},{features:[[6,12,4,5,-1],[8,12,2,5,2]],threshold:-.0004590701137203723,right_val:.4235909879207611,left_val:.541256308555603},{features:[[11,11,2,2,-1],[12,11,1,1,2],[11,12,1,1,2]],threshold:.0012527540093287826,right_val:.6624091267585754,left_val:.4899305105209351},{features:[[0,2,3,6,-1],[0,4,3,2,3]],threshold:.001491060946136713,right_val:.4040051996707916,left_val:.5286778211593628},{features:[[11,11,2,2,-1],[12,11,1,1,2],[11,12,1,1,2]],threshold:-.0007543556275777519,right_val:.4795120060443878,left_val:.6032990217208862},{features:[[7,6,4,10,-1],[7,11,4,5,2]],threshold:-.0069478838704526424,right_val:.5373504161834717,left_val:.408440113067627},{features:[[11,11,2,2,-1],[12,11,1,1,2],[11,12,1,1,2]],threshold:.0002809292054735124,right_val:.5759382247924805,left_val:.4846062958240509},{features:[[2,13,5,2,-1],[2,14,5,1,2]],threshold:.0009607371757738292,right_val:.3554979860782623,left_val:.5164741277694702},{features:[[11,11,2,2,-1],[12,11,1,1,2],[11,12,1,1,2]],threshold:-.0002688392996788025,right_val:.4731765985488892,left_val:.5677582025527954},{features:[[7,11,2,2,-1],[7,11,1,1,2],[8,12,1,1,2]],threshold:.0021599370520561934,right_val:.7070567011833191,left_val:.4731487035751343},{features:[[14,13,3,3,-1],[14,14,3,1,3]],threshold:.005623530130833387,right_val:.2781791985034943,left_val:.5240243077278137},{features:[[3,13,3,3,-1],[3,14,3,1,3]],threshold:-.005024399142712355,right_val:.5062304139137268,left_val:.2837013900279999},{features:[[9,14,2,3,-1],[9,15,2,1,3]],threshold:-.009761163964867592,right_val:.4934569001197815,left_val:.7400717735290527},{features:[[8,7,3,3,-1],[8,8,3,1,3]],threshold:.004151510074734688,right_val:.3407008051872253,left_val:.5119131207466125},{features:[[13,5,3,3,-1],[13,6,3,1,3]],threshold:.006246508099138737,right_val:.6579058766365051,left_val:.4923788011074066},{features:[[0,9,5,3,-1],[0,10,5,1,3]],threshold:-.007059747818857431,right_val:.503284215927124,left_val:.2434711009263992},{features:[[13,5,3,3,-1],[13,6,3,1,3]],threshold:-.0020587709732353687,right_val:.469508707523346,left_val:.590031087398529},{features:[[9,12,2,8,-1],[9,12,1,4,2],[10,16,1,4,2]],threshold:-.0024146060459315777,right_val:.5189201831817627,left_val:.3647317886352539},{features:[[11,7,2,2,-1],[12,7,1,1,2],[11,8,1,1,2]],threshold:-.0014817609917372465,right_val:.4940128028392792,left_val:.6034948229789734},{features:[[0,16,6,4,-1],[3,16,3,4,2]],threshold:-.0063016400672495365,right_val:.4560427963733673,left_val:.5818989872932434},{features:[[10,6,2,3,-1],[10,7,2,1,3]],threshold:.00347634288482368,right_val:.3483993113040924,left_val:.5217475891113281},{features:[[9,5,2,6,-1],[9,7,2,2,3]],threshold:-.0222508702427149,right_val:.5032082796096802,left_val:.2360700070858002},{features:[[12,15,8,4,-1],[12,15,4,4,2]],threshold:-.030612550675869,right_val:.4914919137954712,left_val:.6499186754226685},{features:[[0,14,8,6,-1],[4,14,4,6,2]],threshold:.013057479634881,right_val:.5683764219284058,left_val:.4413323104381561},{features:[[9,0,3,2,-1],[10,0,1,2,3]],threshold:-.0006009574281051755,right_val:.5333483219146729,left_val:.4359731078147888},{features:[[4,15,4,2,-1],[6,15,2,2,2]],threshold:-.0004151425091549754,right_val:.4326060116291046,left_val:.550406277179718},{features:[[12,7,3,13,-1],[13,7,1,13,3]],threshold:-.013776290230453,right_val:.5201548933982849,left_val:.4064112901687622},{features:[[5,7,3,13,-1],[6,7,1,13,3]],threshold:-.0322965085506439,right_val:.4977194964885712,left_val:.0473519712686539},{features:[[9,6,3,9,-1],[9,9,3,3,3]],threshold:.0535569787025452,right_val:.666693925857544,left_val:.4881733059883118},{features:[[4,4,7,12,-1],[4,10,7,6,2]],threshold:.008188954554498196,right_val:.4240820109844208,left_val:.5400037169456482},{features:[[12,12,2,2,-1],[13,12,1,1,2],[12,13,1,1,2]],threshold:.00021055320394225419,right_val:.5563852787017822,left_val:.4802047908306122},{features:[[6,12,2,2,-1],[6,12,1,1,2],[7,13,1,1,2]],threshold:-.00243827304802835,right_val:.4773685038089752,left_val:.7387793064117432},{features:[[8,9,4,2,-1],[10,9,2,1,2],[8,10,2,1,2]],threshold:.003283557016402483,right_val:.3171291947364807,left_val:.5288546085357666},{features:[[3,6,2,2,-1],[3,6,1,1,2],[4,7,1,1,2]],threshold:.00237295706756413,right_val:.7060170769691467,left_val:.4750812947750092},{features:[[16,6,3,2,-1],[16,7,3,1,2]],threshold:-.0014541699783876538,right_val:.533073902130127,left_val:.3811730146408081}],threshold:79.24907684326172},{simpleClassifiers:[{features:[[0,7,19,4,-1],[0,9,19,2,2]],threshold:.0557552389800549,right_val:.6806036829948425,left_val:.4019156992435455},{features:[[10,2,10,1,-1],[10,2,5,1,2]],threshold:.002473024884238839,right_val:.5965719819068909,left_val:.3351148962974548},{features:[[9,4,2,12,-1],[9,10,2,6,2]],threshold:-.00035031698644161224,right_val:.3482286930084229,left_val:.5557708144187927},{features:[[12,18,4,1,-1],[12,18,2,1,2]],threshold:.0005416763015091419,right_val:.5693380832672119,left_val:.426085889339447},{features:[[1,7,6,4,-1],[1,7,3,2,2],[4,9,3,2,2]],threshold:.0007719367858953774,right_val:.5433688759803772,left_val:.3494240045547485},{features:[[12,0,6,13,-1],[14,0,2,13,3]],threshold:-.0015999219613149762,right_val:.5484359264373779,left_val:.4028499126434326},{features:[[2,0,6,13,-1],[4,0,2,13,3]],threshold:-.00011832080053864047,right_val:.5425465106964111,left_val:.3806901872158051},{features:[[10,5,8,8,-1],[10,9,8,4,2]],threshold:.0003290903114248067,right_val:.5429521799087524,left_val:.262010008096695},{features:[[8,3,2,5,-1],[9,3,1,5,2]],threshold:.0002951810893137008,right_val:.5399264097213745,left_val:.379976898431778},{features:[[8,4,9,1,-1],[11,4,3,1,3]],threshold:9046671038959175e-20,right_val:.5440226197242737,left_val:.4433645009994507},{features:[[3,4,9,1,-1],[6,4,3,1,3]],threshold:15007190086180344e-21,right_val:.5409119725227356,left_val:.3719654977321625},{features:[[1,0,18,10,-1],[7,0,6,10,3]],threshold:.1393561065196991,right_val:.4479042887687683,left_val:.552539587020874},{features:[[7,17,5,3,-1],[7,18,5,1,3]],threshold:.0016461990308016539,right_val:.5772169828414917,left_val:.4264501035213471},{features:[[7,11,6,1,-1],[9,11,2,1,3]],threshold:.0004998443182557821,right_val:.5685871243476868,left_val:.4359526038169861},{features:[[2,2,3,2,-1],[2,3,3,1,2]],threshold:-.001097128028050065,right_val:.5205408930778503,left_val:.3390136957168579},{features:[[8,12,4,2,-1],[8,13,4,1,2]],threshold:.0006691989256069064,right_val:.598065972328186,left_val:.4557456076145172},{features:[[6,10,3,6,-1],[6,13,3,3,2]],threshold:.0008647104259580374,right_val:.2944033145904541,left_val:.5134841203689575},{features:[[11,4,2,4,-1],[11,4,1,4,2]],threshold:-.0002718259929679334,right_val:.5377181172370911,left_val:.3906578123569489},{features:[[7,4,2,4,-1],[8,4,1,4,2]],threshold:3024949910468422e-20,right_val:.5225688815116882,left_val:.3679609894752502},{features:[[9,6,2,4,-1],[9,6,1,4,2]],threshold:-.008522589690983295,right_val:.4892365038394928,left_val:.7293102145195007},{features:[[6,13,8,3,-1],[6,14,8,1,3]],threshold:.0016705560265108943,right_val:.5696138143539429,left_val:.43453249335289},{features:[[9,15,3,4,-1],[10,15,1,4,3]],threshold:-.0071433838456869125,right_val:.5225623846054077,left_val:.2591280043125153},{features:[[9,2,2,17,-1],[10,2,1,17,2]],threshold:-.0163193698972464,right_val:.4651575982570648,left_val:.6922279000282288},{features:[[7,0,6,1,-1],[9,0,2,1,3]],threshold:.004803426098078489,right_val:.3286302983760834,left_val:.5352262854576111},{features:[[8,15,3,4,-1],[9,15,1,4,3]],threshold:-.0075421929359436035,right_val:.5034546256065369,left_val:.2040544003248215},{features:[[7,13,7,3,-1],[7,14,7,1,3]],threshold:-.0143631100654602,right_val:.4889059066772461,left_val:.6804888844490051},{features:[[8,16,3,3,-1],[9,16,1,3,3]],threshold:.0008906358852982521,right_val:.3895480930805206,left_val:.5310695767402649},{features:[[6,2,8,10,-1],[6,7,8,5,2]],threshold:-.004406019113957882,right_val:.4372426867485046,left_val:.5741562843322754},{features:[[2,5,8,8,-1],[2,9,8,4,2]],threshold:-.0001886254030978307,right_val:.5098205208778381,left_val:.2831785976886749},{features:[[14,16,2,2,-1],[14,17,2,1,2]],threshold:-.0037979281041771173,right_val:.5246580243110657,left_val:.3372507989406586},{features:[[4,16,2,2,-1],[4,17,2,1,2]],threshold:.00014627049677073956,right_val:.391171008348465,left_val:.5306674242019653},{features:[[10,11,4,6,-1],[10,14,4,3,2]],threshold:-49164638767251745e-21,right_val:.3942720890045166,left_val:.5462496280670166},{features:[[6,11,4,6,-1],[6,14,4,3,2]],threshold:-.0335825011134148,right_val:.5048211812973022,left_val:.2157824039459229},{features:[[10,14,1,3,-1],[10,15,1,1,3]],threshold:-.0035339309833943844,right_val:.4872696995735169,left_val:.6465312242507935},{features:[[8,14,4,3,-1],[8,15,4,1,3]],threshold:.005014411173760891,right_val:.6248074769973755,left_val:.4617668092250824},{features:[[10,0,4,6,-1],[12,0,2,3,2],[10,3,2,3,2]],threshold:.0188173707574606,right_val:.2000052034854889,left_val:.5220689177513123},{features:[[0,3,20,2,-1],[0,4,20,1,2]],threshold:-.001343433978036046,right_val:.53016197681427,left_val:.4014537930488586},{features:[[12,0,8,2,-1],[16,0,4,1,2],[12,1,4,1,2]],threshold:.001755796023644507,right_val:.5653169751167297,left_val:.4794039130210877},{features:[[2,12,10,8,-1],[2,16,10,4,2]],threshold:-.0956374630331993,right_val:.5006706714630127,left_val:.2034195065498352},{features:[[17,7,2,10,-1],[18,7,1,5,2],[17,12,1,5,2]],threshold:-.0222412291914225,right_val:.5046340227127075,left_val:.7672473192214966},{features:[[1,7,2,10,-1],[1,7,1,5,2],[2,12,1,5,2]],threshold:-.0155758196488023,right_val:.4755851030349731,left_val:.7490342259407043},{features:[[15,10,3,6,-1],[15,12,3,2,3]],threshold:.005359911825507879,right_val:.4004670977592468,left_val:.5365303754806519},{features:[[4,4,6,2,-1],[6,4,2,2,3]],threshold:-.0217634998261929,right_val:.4964174926280975,left_val:.0740154981613159},{features:[[0,5,20,6,-1],[0,7,20,2,3]],threshold:-.165615901350975,right_val:.5218086242675781,left_val:.2859103083610535},{features:[[0,0,8,2,-1],[0,0,4,1,2],[4,1,4,1,2]],threshold:.0001646132004680112,right_val:.5380793213844299,left_val:.4191615879535675},{features:[[1,0,18,4,-1],[7,0,6,4,3]],threshold:-.008907750248908997,right_val:.4877404868602753,left_val:.6273192763328552},{features:[[1,13,6,2,-1],[1,14,6,1,2]],threshold:.0008634644909761846,right_val:.3671025931835175,left_val:.5159940719604492},{features:[[10,8,3,4,-1],[11,8,1,4,3]],threshold:-.0013751760125160217,right_val:.4579083919525147,left_val:.5884376764297485},{features:[[6,1,6,1,-1],[8,1,2,1,3]],threshold:-.0014081239933148026,right_val:.5139945149421692,left_val:.3560509979724884},{features:[[8,14,4,3,-1],[8,15,4,1,3]],threshold:-.003934288863092661,right_val:.466427206993103,left_val:.5994288921356201},{features:[[1,6,18,2,-1],[10,6,9,2,2]],threshold:-.0319669283926487,right_val:.5144183039665222,left_val:.3345462083816528},{features:[[15,11,1,2,-1],[15,12,1,1,2]],threshold:-15089280168467667e-21,right_val:.441405713558197,left_val:.5582656264305115},{features:[[6,5,1,2,-1],[6,6,1,1,2]],threshold:.0005199447041377425,right_val:.6168993711471558,left_val:.4623680114746094},{features:[[13,4,1,3,-1],[13,5,1,1,3]],threshold:-.0034220460802316666,right_val:.4974805116653442,left_val:.6557074785232544},{features:[[2,15,1,2,-1],[2,16,1,1,2]],threshold:.00017723299970384687,right_val:.3901908099651337,left_val:.5269501805305481},{features:[[12,4,4,3,-1],[12,5,4,1,3]],threshold:.0015716759953647852,right_val:.5790457725524902,left_val:.4633373022079468},{features:[[0,0,7,3,-1],[0,1,7,1,3]],threshold:-.00890413299202919,right_val:.5053591132164001,left_val:.2689608037471771},{features:[[9,12,6,2,-1],[9,12,3,2,2]],threshold:.00040677518700249493,right_val:.4329898953437805,left_val:.5456603169441223},{features:[[5,4,2,3,-1],[5,5,2,1,3]],threshold:.0067604780197143555,right_val:.6689761877059937,left_val:.4648993909358978},{features:[[18,4,2,3,-1],[18,5,2,1,3]],threshold:.0029100088868290186,right_val:.3377839922904968,left_val:.5309703946113586},{features:[[3,0,8,6,-1],[3,2,8,2,3]],threshold:.0013885459629818797,right_val:.5349133014678955,left_val:.4074738919734955},{features:[[0,2,20,6,-1],[10,2,10,3,2],[0,5,10,3,2]],threshold:-.0767642632126808,right_val:.522824227809906,left_val:.1992176026105881},{features:[[4,7,2,4,-1],[5,7,1,4,2]],threshold:-.00022688310127705336,right_val:.4253072142601013,left_val:.5438501834869385},{features:[[3,10,15,2,-1],[8,10,5,2,3]],threshold:-.006309415213763714,right_val:.5378909707069397,left_val:.4259178936481476},{features:[[3,0,12,11,-1],[9,0,6,11,2]],threshold:-.1100727990269661,right_val:.4721749126911163,left_val:.6904156804084778},{features:[[13,0,2,6,-1],[13,0,1,6,2]],threshold:.0002861965913325548,right_val:.5548306107521057,left_val:.4524914920330048},{features:[[0,19,2,1,-1],[1,19,1,1,2]],threshold:2942532955785282e-20,right_val:.4236463904380798,left_val:.5370373725891113},{features:[[16,10,4,10,-1],[18,10,2,5,2],[16,15,2,5,2]],threshold:-.0248865708708763,right_val:.4969303905963898,left_val:.6423557996749878},{features:[[4,8,10,3,-1],[4,9,10,1,3]],threshold:.0331488512456417,right_val:.1613811999559403,left_val:.4988475143909454},{features:[[14,12,3,3,-1],[14,13,3,1,3]],threshold:.0007849169196560979,right_val:.4223009049892426,left_val:.541602611541748},{features:[[0,10,4,10,-1],[0,10,2,5,2],[2,15,2,5,2]],threshold:.004708718974143267,right_val:.6027557849884033,left_val:.4576328992843628},{features:[[18,3,2,6,-1],[18,5,2,2,3]],threshold:.0024144479539245367,right_val:.4422498941421509,left_val:.530897319316864},{features:[[6,6,1,3,-1],[6,7,1,1,3]],threshold:.0019523180089890957,right_val:.666332483291626,left_val:.4705634117126465},{features:[[7,7,7,2,-1],[7,8,7,1,2]],threshold:.0013031980488449335,right_val:.5526962280273438,left_val:.4406126141548157},{features:[[0,3,2,6,-1],[0,5,2,2,3]],threshold:.004473549779504538,right_val:.3301498889923096,left_val:.5129023790359497},{features:[[11,1,3,1,-1],[12,1,1,1,3]],threshold:-.002665286883711815,right_val:.5175036191940308,left_val:.3135471045970917},{features:[[5,0,2,6,-1],[6,0,1,6,2]],threshold:.0001366677024634555,right_val:.530687689781189,left_val:.4119370877742767},{features:[[1,1,18,14,-1],[7,1,6,14,3]],threshold:-.0171264503151178,right_val:.4836578965187073,left_val:.6177806258201599},{features:[[4,6,8,3,-1],[8,6,4,3,2]],threshold:-.0002660143072716892,right_val:.5169736742973328,left_val:.3654330968856812},{features:[[9,12,6,2,-1],[9,12,3,2,2]],threshold:-.022932380437851,right_val:.5163992047309875,left_val:.349091500043869},{features:[[5,12,6,2,-1],[8,12,3,2,2]],threshold:.0023316550068557262,right_val:.3709389865398407,left_val:.5166299939155579},{features:[[10,7,3,5,-1],[11,7,1,5,3]],threshold:.016925660893321,right_val:.8053988218307495,left_val:.501473605632782},{features:[[7,7,3,5,-1],[8,7,1,5,3]],threshold:-.008985882624983788,right_val:.465702086687088,left_val:.6470788717269897},{features:[[13,0,3,10,-1],[14,0,1,10,3]],threshold:-.0118746999651194,right_val:.5258755087852478,left_val:.3246378898620606},{features:[[4,11,3,2,-1],[4,12,3,1,2]],threshold:.00019350569345988333,right_val:.3839643895626068,left_val:.5191941857337952},{features:[[17,3,3,6,-1],[18,3,1,6,3]],threshold:.005871349014341831,right_val:.6187043190002441,left_val:.4918133914470673},{features:[[1,8,18,10,-1],[1,13,18,5,2]],threshold:-.2483879029750824,right_val:.4988150000572205,left_val:.1836802959442139},{features:[[13,0,3,10,-1],[14,0,1,10,3]],threshold:.0122560001909733,right_val:.3632029891014099,left_val:.5227053761482239},{features:[[9,14,2,3,-1],[9,15,2,1,3]],threshold:.0008399017970077693,right_val:.5774148106575012,left_val:.4490250051021576},{features:[[16,3,3,7,-1],[17,3,1,7,3]],threshold:.002540736924856901,right_val:.5858299136161804,left_val:.4804787039756775},{features:[[4,0,3,10,-1],[5,0,1,10,3]],threshold:-.0148224299773574,right_val:.5023537278175354,left_val:.2521049976348877},{features:[[16,3,3,7,-1],[17,3,1,7,3]],threshold:-.005797395948320627,right_val:.4853715002536774,left_val:.5996695756912231},{features:[[0,9,1,2,-1],[0,10,1,1,2]],threshold:.000726621481589973,right_val:.3671779930591583,left_val:.5153716802597046},{features:[[18,1,2,10,-1],[18,1,1,10,2]],threshold:-.0172325801104307,right_val:.4994656145572662,left_val:.6621719002723694},{features:[[0,1,2,10,-1],[1,1,1,10,2]],threshold:.007862408645451069,right_val:.6256101727485657,left_val:.4633395075798035},{features:[[10,16,3,4,-1],[11,16,1,4,3]],threshold:-.004734362009912729,right_val:.5281885266304016,left_val:.3615573048591614},{features:[[2,8,3,3,-1],[3,8,1,3,3]],threshold:.0008304847870022058,right_val:.5550957918167114,left_val:.4442889094352722},{features:[[11,0,2,6,-1],[12,0,1,3,2],[11,3,1,3,2]],threshold:.00766021991148591,right_val:.2613354921340942,left_val:.5162935256958008},{features:[[7,0,2,6,-1],[7,0,1,3,2],[8,3,1,3,2]],threshold:-.004104837775230408,right_val:.5019031763076782,left_val:.2789632081985474},{features:[[16,3,3,7,-1],[17,3,1,7,3]],threshold:.004851257894188166,right_val:.5661668181419373,left_val:.4968984127044678},{features:[[1,3,3,7,-1],[2,3,1,7,3]],threshold:.0009989645332098007,right_val:.5551813244819641,left_val:.4445607960224152},{features:[[14,1,6,16,-1],[16,1,2,16,3]],threshold:-.2702363133430481,right_val:.515131413936615,left_val:.0293882098048925},{features:[[0,1,6,16,-1],[2,1,2,16,3]],threshold:-.0130906803533435,right_val:.4447459876537323,left_val:.5699399709701538},{features:[[2,0,16,8,-1],[10,0,8,4,2],[2,4,8,4,2]],threshold:-.009434279054403305,right_val:.5487895011901855,left_val:.4305466115474701},{features:[[6,8,5,3,-1],[6,9,5,1,3]],threshold:-.0015482039889320731,right_val:.512808084487915,left_val:.3680317103862763},{features:[[9,7,3,3,-1],[10,7,1,3,3]],threshold:.005374613218009472,right_val:.6101555824279785,left_val:.4838916957378388},{features:[[8,8,4,3,-1],[8,9,4,1,3]],threshold:.0015786769799888134,right_val:.4118548035621643,left_val:.5325223207473755},{features:[[9,6,2,4,-1],[9,6,1,4,2]],threshold:.003685605013743043,right_val:.6252303123474121,left_val:.4810948073863983},{features:[[0,7,15,1,-1],[5,7,5,1,3]],threshold:.009388701990246773,right_val:.3629410862922669,left_val:.520022988319397},{features:[[8,2,7,9,-1],[8,5,7,3,3]],threshold:.0127926301211119,right_val:.673801600933075,left_val:.4961709976196289},{features:[[1,7,16,4,-1],[1,7,8,2,2],[9,9,8,2,2]],threshold:-.003366104094311595,right_val:.5283598899841309,left_val:.4060279130935669},{features:[[6,12,8,2,-1],[6,13,8,1,2]],threshold:.00039771420415490866,right_val:.5900775194168091,left_val:.4674113988876343},{features:[[8,11,3,3,-1],[8,12,3,1,3]],threshold:.0014868030557408929,right_val:.6082053780555725,left_val:.4519116878509522},{features:[[4,5,14,10,-1],[11,5,7,5,2],[4,10,7,5,2]],threshold:-.0886867493391037,right_val:.5180991888046265,left_val:.2807899117469788},{features:[[4,12,3,2,-1],[4,13,3,1,2]],threshold:-7429611287079751e-20,right_val:.408762514591217,left_val:.5295584201812744},{features:[[9,11,6,1,-1],[11,11,2,1,3]],threshold:-14932939848222304e-21,right_val:.4538542926311493,left_val:.5461400151252747},{features:[[4,9,7,6,-1],[4,11,7,2,3]],threshold:.005916223861277103,right_val:.4192134141921997,left_val:.5329161286354065},{features:[[7,10,6,3,-1],[7,11,6,1,3]],threshold:.001114164013415575,right_val:.5706217288970947,left_val:.4512017965316773},{features:[[9,11,2,2,-1],[9,12,2,1,2]],threshold:8924936264520511e-20,right_val:.5897638201713562,left_val:.4577805995941162},{features:[[0,5,20,6,-1],[0,7,20,2,3]],threshold:.0025319510605186224,right_val:.3357639014720917,left_val:.5299603939056396},{features:[[6,4,6,1,-1],[8,4,2,1,3]],threshold:.0124262003228068,right_val:.1346601992845535,left_val:.4959059059619904},{features:[[9,11,6,1,-1],[11,11,2,1,3]],threshold:.0283357501029968,right_val:.0006104363710619509,left_val:.5117079019546509},{features:[[5,11,6,1,-1],[7,11,2,1,3]],threshold:.006616588216274977,right_val:.7011628150939941,left_val:.4736349880695343},{features:[[10,16,3,4,-1],[11,16,1,4,3]],threshold:.008046876639127731,right_val:.3282819986343384,left_val:.5216417908668518},{features:[[8,7,3,3,-1],[9,7,1,3,3]],threshold:-.001119398046284914,right_val:.4563739001750946,left_val:.5809860825538635},{features:[[2,12,16,8,-1],[2,16,16,4,2]],threshold:.0132775902748108,right_val:.4103901088237763,left_val:.5398362278938293},{features:[[0,15,15,2,-1],[0,16,15,1,2]],threshold:.0004879473999608308,right_val:.5410590767860413,left_val:.424928605556488},{features:[[15,4,5,6,-1],[15,6,5,2,3]],threshold:.0112431701272726,right_val:.3438215851783752,left_val:.526996374130249},{features:[[9,5,2,4,-1],[10,5,1,4,2]],threshold:-.0008989666821435094,right_val:.4456613063812256,left_val:.5633075833320618},{features:[[8,10,9,6,-1],[8,12,9,2,3]],threshold:.006667715962976217,right_val:.4362679123878479,left_val:.5312889218330383},{features:[[2,19,15,1,-1],[7,19,5,1,3]],threshold:.0289472993463278,right_val:.657579779624939,left_val:.4701794981956482},{features:[[10,16,3,4,-1],[11,16,1,4,3]],threshold:-.0234000496566296,right_val:.5137398838996887,left_val:0},{features:[[0,15,20,4,-1],[0,17,20,2,2]],threshold:-.0891170501708984,right_val:.4942430853843689,left_val:.0237452797591686},{features:[[10,16,3,4,-1],[11,16,1,4,3]],threshold:-.0140546001493931,right_val:.511751115322113,left_val:.3127323091030121},{features:[[7,16,3,4,-1],[8,16,1,4,3]],threshold:.008123939856886864,right_val:.2520025968551636,left_val:.50090491771698},{features:[[9,16,3,3,-1],[9,17,3,1,3]],threshold:-.004996465053409338,right_val:.4927811920642853,left_val:.6387143731117249},{features:[[8,11,4,6,-1],[8,14,4,3,2]],threshold:.0031253970228135586,right_val:.3680452108383179,left_val:.5136849880218506},{features:[[9,6,2,12,-1],[9,10,2,4,3]],threshold:.006766964215785265,right_val:.4363631904125214,left_val:.5509843826293945},{features:[[8,17,4,3,-1],[8,18,4,1,3]],threshold:-.002371144015341997,right_val:.4586946964263916,left_val:.6162335276603699},{features:[[9,18,8,2,-1],[13,18,4,1,2],[9,19,4,1,2]],threshold:-.005352279171347618,right_val:.4920490980148315,left_val:.6185457706451416},{features:[[1,18,8,2,-1],[1,19,8,1,2]],threshold:-.0159688591957092,right_val:.4983252882957459,left_val:.1382617950439453},{features:[[13,5,6,15,-1],[15,5,2,15,3]],threshold:.004767606034874916,right_val:.5490046143531799,left_val:.4688057899475098},{features:[[9,8,2,2,-1],[9,9,2,1,2]],threshold:-.002471469109877944,right_val:.5003952980041504,left_val:.2368514984846115},{features:[[9,5,2,3,-1],[9,5,1,3,2]],threshold:-.0007103378884494305,right_val:.4721533060073853,left_val:.5856394171714783},{features:[[1,5,6,15,-1],[3,5,2,15,3]],threshold:-.1411755979061127,right_val:.4961591064929962,left_val:.0869000628590584},{features:[[4,1,14,8,-1],[11,1,7,4,2],[4,5,7,4,2]],threshold:.1065180972218514,right_val:.1741005033254623,left_val:.5138837099075317},{features:[[2,4,4,16,-1],[2,4,2,8,2],[4,12,2,8,2]],threshold:-.0527447499334812,right_val:.4772881865501404,left_val:.7353636026382446},{features:[[12,4,3,12,-1],[12,10,3,6,2]],threshold:-.00474317604675889,right_val:.5292701721191406,left_val:.3884406089782715},{features:[[4,5,10,12,-1],[4,5,5,6,2],[9,11,5,6,2]],threshold:.0009967676596716046,right_val:.4003424048423767,left_val:.5223492980003357},{features:[[9,14,2,3,-1],[9,15,2,1,3]],threshold:.00802841316908598,right_val:.7212964296340942,left_val:.4959106147289276},{features:[[5,4,2,3,-1],[5,5,2,1,3]],threshold:.0008602585876360536,right_val:.55384761095047,left_val:.4444884061813355},{features:[[12,2,4,10,-1],[14,2,2,5,2],[12,7,2,5,2]],threshold:.0009319150121882558,right_val:.4163244068622589,left_val:.539837121963501},{features:[[6,4,7,3,-1],[6,5,7,1,3]],threshold:-.002508206060156226,right_val:.456250011920929,left_val:.5854265093803406},{features:[[2,0,18,2,-1],[11,0,9,1,2],[2,1,9,1,2]],threshold:-.0021378761157393456,right_val:.5280259251594543,left_val:.4608069062232971},{features:[[0,0,18,2,-1],[0,0,9,1,2],[9,1,9,1,2]],threshold:-.002154604997485876,right_val:.5255997180938721,left_val:.3791126906871796},{features:[[13,13,4,6,-1],[15,13,2,3,2],[13,16,2,3,2]],threshold:-.007621400989592075,right_val:.4952073991298676,left_val:.5998609066009521},{features:[[3,13,4,6,-1],[3,13,2,3,2],[5,16,2,3,2]],threshold:.002205536002293229,right_val:.5588530898094177,left_val:.4484206140041351},{features:[[10,12,2,6,-1],[10,15,2,3,2]],threshold:.0012586950324475765,right_val:.4423840939998627,left_val:.5450747013092041},{features:[[5,9,10,10,-1],[5,9,5,5,2],[10,14,5,5,2]],threshold:-.005092672072350979,right_val:.5263035893440247,left_val:.4118275046348572},{features:[[11,4,4,2,-1],[13,4,2,1,2],[11,5,2,1,2]],threshold:-.0025095739401876926,right_val:.4998494982719421,left_val:.5787907838821411},{features:[[7,12,6,8,-1],[10,12,3,8,2]],threshold:-.0773275569081306,right_val:.481112003326416,left_val:.8397865891456604},{features:[[12,2,4,10,-1],[14,2,2,5,2],[12,7,2,5,2]],threshold:-.041485819965601,right_val:.5176993012428284,left_val:.240861102938652},{features:[[8,11,2,1,-1],[9,11,1,1,2]],threshold:.00010355669655837119,right_val:.5417054295539856,left_val:.4355360865592957},{features:[[10,5,1,12,-1],[10,9,1,4,3]],threshold:.0013255809899419546,right_val:.4894095063209534,left_val:.5453971028327942},{features:[[0,11,6,9,-1],[3,11,3,9,2]],threshold:-.00805987324565649,right_val:.4577918946743012,left_val:.5771024227142334},{features:[[12,2,4,10,-1],[14,2,2,5,2],[12,7,2,5,2]],threshold:.019058620557189,right_val:.3400475084781647,left_val:.5169867873191833},{features:[[4,2,4,10,-1],[4,2,2,5,2],[6,7,2,5,2]],threshold:-.0350578911602497,right_val:.5000503063201904,left_val:.2203243970870972},{features:[[11,4,4,2,-1],[13,4,2,1,2],[11,5,2,1,2]],threshold:.005729605909436941,right_val:.6597570776939392,left_val:.5043408274650574},{features:[[0,14,6,3,-1],[0,15,6,1,3]],threshold:-.0116483299061656,right_val:.4996652901172638,left_val:.2186284959316254},{features:[[11,4,4,2,-1],[13,4,2,1,2],[11,5,2,1,2]],threshold:.0014544479781761765,right_val:.5503727793693542,left_val:.5007681846618652},{features:[[6,1,3,2,-1],[7,1,1,2,3]],threshold:-.00025030909455381334,right_val:.524167001247406,left_val:.4129841029644013},{features:[[11,4,4,2,-1],[13,4,2,1,2],[11,5,2,1,2]],threshold:-.000829072727356106,right_val:.4974496066570282,left_val:.541286826133728},{features:[[5,4,4,2,-1],[5,4,2,1,2],[7,5,2,1,2]],threshold:.0010862209601327777,right_val:.5879228711128235,left_val:.460552990436554},{features:[[13,0,2,12,-1],[14,0,1,6,2],[13,6,1,6,2]],threshold:.0002000050008064136,right_val:.4705209136009216,left_val:.5278854966163635},{features:[[6,0,3,10,-1],[7,0,1,10,3]],threshold:.0029212920926511288,right_val:.375553697347641,left_val:.5129609704017639},{features:[[3,0,17,8,-1],[3,4,17,4,2]],threshold:.0253874007612467,right_val:.5790768265724182,left_val:.4822691977024078},{features:[[0,4,20,4,-1],[0,6,20,2,2]],threshold:-.00319684692658484,right_val:.3962840139865875,left_val:.5248395204544067}],threshold:87.69602966308594},{simpleClassifiers:[{features:[[0,3,8,2,-1],[4,3,4,2,2]],threshold:.005803173873573542,right_val:.596198320388794,left_val:.3498983979225159},{features:[[8,11,4,3,-1],[8,12,4,1,3]],threshold:-.009000306949019432,right_val:.4478552043437958,left_val:.6816636919975281},{features:[[5,7,6,4,-1],[5,7,3,2,2],[8,9,3,2,2]],threshold:-.00115496595390141,right_val:.3578251004219055,left_val:.5585706233978271},{features:[[8,3,4,9,-1],[8,6,4,3,3]],threshold:-.0011069850297644734,right_val:.3050428032875061,left_val:.5365036129951477},{features:[[8,15,1,4,-1],[8,17,1,2,2]],threshold:.00010308309720130637,right_val:.5344635844230652,left_val:.363909512758255},{features:[[4,5,12,7,-1],[8,5,4,7,3]],threshold:-.005098483990877867,right_val:.5504264831542969,left_val:.2859157025814056},{features:[[4,2,4,10,-1],[4,2,2,5,2],[6,7,2,5,2]],threshold:.0008257220033556223,right_val:.3476041853427887,left_val:.5236523747444153},{features:[[3,0,17,2,-1],[3,1,17,1,2]],threshold:.009978332556784153,right_val:.621964693069458,left_val:.4750322103500366},{features:[[2,2,16,15,-1],[2,7,16,5,3]],threshold:-.0374025292694569,right_val:.527806282043457,left_val:.334337592124939},{features:[[15,2,5,2,-1],[15,3,5,1,2]],threshold:.0048548257909715176,right_val:.3700444102287293,left_val:.5192180871963501},{features:[[9,3,2,2,-1],[10,3,1,2,2]],threshold:-.001866447040811181,right_val:.5091944932937622,left_val:.2929843962192535},{features:[[4,5,16,15,-1],[4,10,16,5,3]],threshold:.0168888904154301,right_val:.5431225895881653,left_val:.3686845898628235},{features:[[7,13,5,6,-1],[7,16,5,3,2]],threshold:-.005837262142449617,right_val:.5221335887908936,left_val:.3632183969020844},{features:[[10,7,3,2,-1],[11,7,1,2,3]],threshold:-.00147137395106256,right_val:.4700650870800018,left_val:.5870683789253235},{features:[[8,3,3,1,-1],[9,3,1,1,3]],threshold:-.0011522950371727347,right_val:.5140954256057739,left_val:.3195894956588745},{features:[[9,16,3,3,-1],[9,17,3,1,3]],threshold:-.004256030078977346,right_val:.4814921021461487,left_val:.6301859021186829},{features:[[0,2,5,2,-1],[0,3,5,1,2]],threshold:-.006737829186022282,right_val:.5025808215141296,left_val:.1977048069238663},{features:[[12,5,4,3,-1],[12,6,4,1,3]],threshold:.0113826701417565,right_val:.6867045760154724,left_val:.495413213968277},{features:[[1,7,12,1,-1],[5,7,4,1,3]],threshold:.005179470870643854,right_val:.3350647985935211,left_val:.5164427757263184},{features:[[7,5,6,14,-1],[7,12,6,7,2]],threshold:-.1174378991127014,right_val:.5234413743019104,left_val:.2315246015787125},{features:[[0,0,8,10,-1],[0,0,4,5,2],[4,5,4,5,2]],threshold:.0287034492939711,right_val:.6722521185874939,left_val:.4664297103881836},{features:[[9,1,3,2,-1],[10,1,1,2,3]],threshold:.004823103081434965,right_val:.2723532915115356,left_val:.5220875144004822},{features:[[8,1,3,2,-1],[9,1,1,2,3]],threshold:.0026798530016094446,right_val:.2906948924064636,left_val:.5079277157783508},{features:[[12,4,3,3,-1],[12,5,3,1,3]],threshold:.008050408214330673,right_val:.6395021080970764,left_val:.4885950982570648},{features:[[7,4,6,16,-1],[7,12,6,8,2]],threshold:.004805495962500572,right_val:.365666389465332,left_val:.5197256803512573},{features:[[12,4,3,3,-1],[12,5,3,1,3]],threshold:-.0022420159075409174,right_val:.4763701856136322,left_val:.6153467893600464},{features:[[2,3,2,6,-1],[2,5,2,2,3]],threshold:-.0137577103450894,right_val:.5030903220176697,left_val:.2637344896793366},{features:[[14,2,6,9,-1],[14,5,6,3,3]],threshold:-.1033829972147942,right_val:.5182461142539978,left_val:.2287521958351135},{features:[[5,4,3,3,-1],[5,5,3,1,3]],threshold:-.009443208575248718,right_val:.4694949090480804,left_val:.6953303813934326},{features:[[9,17,3,2,-1],[10,17,1,2,3]],threshold:.0008027118165045977,right_val:.4268783926963806,left_val:.5450655221939087},{features:[[5,5,2,3,-1],[5,6,2,1,3]],threshold:-.004194566980004311,right_val:.4571642875671387,left_val:.6091387867927551},{features:[[13,11,3,6,-1],[13,13,3,2,3]],threshold:.0109422104433179,right_val:.3284547030925751,left_val:.5241063237190247},{features:[[3,14,2,6,-1],[3,17,2,3,2]],threshold:-.0005784106906503439,right_val:.4179368913173676,left_val:.5387929081916809},{features:[[14,3,6,2,-1],[14,4,6,1,2]],threshold:-.002088862005621195,right_val:.5301715731620789,left_val:.4292691051959992},{features:[[0,8,16,2,-1],[0,9,16,1,2]],threshold:.0032383969519287348,right_val:.5220744013786316,left_val:.379234790802002},{features:[[14,3,6,2,-1],[14,4,6,1,2]],threshold:.004907502792775631,right_val:.4126757979393005,left_val:.5237283110618591},{features:[[0,0,5,6,-1],[0,2,5,2,3]],threshold:-.0322779417037964,right_val:.4994502067565918,left_val:.1947655975818634},{features:[[12,5,4,3,-1],[12,6,4,1,3]],threshold:-.008971123024821281,right_val:.4929032027721405,left_val:.6011285185813904},{features:[[4,11,3,6,-1],[4,13,3,2,3]],threshold:.0153210898861289,right_val:.2039822041988373,left_val:.5009753704071045},{features:[[12,5,4,3,-1],[12,6,4,1,3]],threshold:.002085556974634528,right_val:.5721694827079773,left_val:.4862189888954163},{features:[[9,5,1,3,-1],[9,6,1,1,3]],threshold:.005061502102762461,right_val:.1801805943250656,left_val:.5000218749046326},{features:[[12,5,4,3,-1],[12,6,4,1,3]],threshold:-.0037174751050770283,right_val:.4897592961788178,left_val:.5530117154121399},{features:[[6,6,8,12,-1],[6,12,8,6,2]],threshold:-.0121705001220107,right_val:.5383723974227905,left_val:.4178605973720551},{features:[[12,5,4,3,-1],[12,6,4,1,3]],threshold:.004624839872121811,right_val:.5761327147483826,left_val:.4997169971466065},{features:[[5,12,9,2,-1],[8,12,3,2,3]],threshold:-.0002104042941937223,right_val:.4097681045532227,left_val:.5331807136535645},{features:[[12,5,4,3,-1],[12,6,4,1,3]],threshold:-.0146417804062366,right_val:.5051776170730591,left_val:.5755925178527832},{features:[[4,5,4,3,-1],[4,6,4,1,3]],threshold:.00331994891166687,right_val:.6031805872917175,left_val:.4576976895332336},{features:[[6,6,9,2,-1],[9,6,3,2,3]],threshold:.003723687957972288,right_val:.541588306427002,left_val:.4380396902561188},{features:[[4,11,1,3,-1],[4,12,1,1,3]],threshold:.0008295116131193936,right_val:.3702219128608704,left_val:.5163031816482544},{features:[[14,12,6,6,-1],[14,12,3,6,2]],threshold:-.0114084901288152,right_val:.4862565100193024,left_val:.6072946786880493},{features:[[7,0,3,7,-1],[8,0,1,7,3]],threshold:-.004532012157142162,right_val:.5088962912559509,left_val:.3292475938796997},{features:[[9,8,3,3,-1],[10,8,1,3,3]],threshold:.00512760179117322,right_val:.6122708916664124,left_val:.4829767942428589},{features:[[8,8,3,3,-1],[9,8,1,3,3]],threshold:.00985831581056118,right_val:.6556177139282227,left_val:.4660679996013641},{features:[[5,10,11,3,-1],[5,11,11,1,3]],threshold:.036985918879509,right_val:.1690472066402435,left_val:.5204849243164062},{features:[[5,7,10,1,-1],[10,7,5,1,2]],threshold:.004649116192013025,right_val:.3725225031375885,left_val:.5167322158813477},{features:[[9,7,3,2,-1],[10,7,1,2,3]],threshold:-.004266470205038786,right_val:.4987342953681946,left_val:.6406493186950684},{features:[[8,7,3,2,-1],[9,7,1,2,3]],threshold:-.0004795659042429179,right_val:.4464873969554901,left_val:.5897293090820312},{features:[[11,9,4,2,-1],[11,9,2,2,2]],threshold:.0036827160511165857,right_val:.347266286611557,left_val:.5441560745239258},{features:[[5,9,4,2,-1],[7,9,2,2,2]],threshold:-.0100598800927401,right_val:.500482976436615,left_val:.2143162935972214},{features:[[14,10,2,4,-1],[14,12,2,2,2]],threshold:-.0003036184061784297,right_val:.4590323865413666,left_val:.538642406463623},{features:[[7,7,3,2,-1],[8,7,1,2,3]],threshold:-.0014545479789376259,right_val:.4497095048427582,left_val:.5751184225082397},{features:[[14,17,6,3,-1],[14,18,6,1,3]],threshold:.0016515209572389722,right_val:.4238520860671997,left_val:.5421937704086304},{features:[[4,5,12,12,-1],[4,5,6,6,2],[10,11,6,6,2]],threshold:-.007846863940358162,right_val:.5258157253265381,left_val:.4077920913696289},{features:[[6,9,8,8,-1],[10,9,4,4,2],[6,13,4,4,2]],threshold:-.005125985015183687,right_val:.5479453206062317,left_val:.422927588224411},{features:[[0,4,15,4,-1],[5,4,5,4,3]],threshold:-.0368909612298012,right_val:.4674678146839142,left_val:.6596375703811646},{features:[[13,2,4,1,-1],[13,2,2,1,2]],threshold:.0002403563994448632,right_val:.5573202967643738,left_val:.4251135885715485},{features:[[4,12,2,2,-1],[4,13,2,1,2]],threshold:-15150169929256663e-21,right_val:.4074114859104157,left_val:.5259246826171875},{features:[[8,13,4,3,-1],[8,14,4,1,3]],threshold:.0022108471021056175,right_val:.5886352062225342,left_val:.4671722948551178},{features:[[9,13,2,3,-1],[9,14,2,1,3]],threshold:-.0011568620102480054,right_val:.4487161934375763,left_val:.5711066126823425},{features:[[13,11,2,3,-1],[13,12,2,1,3]],threshold:.004999629221856594,right_val:.2898327112197876,left_val:.5264198184013367},{features:[[7,12,4,4,-1],[7,12,2,2,2],[9,14,2,2,2]],threshold:-.0014656189596280456,right_val:.5197871923446655,left_val:.3891738057136536},{features:[[10,11,2,2,-1],[11,11,1,1,2],[10,12,1,1,2]],threshold:-.0011975039960816503,right_val:.4927955865859985,left_val:.5795872807502747},{features:[[8,17,3,2,-1],[9,17,1,2,3]],threshold:-.0044954330660402775,right_val:.5012555122375488,left_val:.2377603054046631},{features:[[10,11,2,2,-1],[11,11,1,1,2],[10,12,1,1,2]],threshold:.00014997160178609192,right_val:.5617607831954956,left_val:.4876626133918762},{features:[[0,17,6,3,-1],[0,18,6,1,3]],threshold:.002639150945469737,right_val:.3765509128570557,left_val:.516808807849884},{features:[[10,11,2,2,-1],[11,11,1,1,2],[10,12,1,1,2]],threshold:-.0002936813107226044,right_val:.4874630868434906,left_val:.5446649193763733},{features:[[8,11,2,2,-1],[8,11,1,1,2],[9,12,1,1,2]],threshold:.0014211760135367513,right_val:.669133186340332,left_val:.4687897861003876},{features:[[12,5,8,4,-1],[12,5,4,4,2]],threshold:.0794276371598244,right_val:.273294597864151,left_val:.5193443894386292},{features:[[0,5,8,4,-1],[4,5,4,4,2]],threshold:.0799375027418137,right_val:.1782083958387375,left_val:.4971731007099152},{features:[[13,2,4,1,-1],[13,2,2,1,2]],threshold:.0110892597585917,right_val:.3209475874900818,left_val:.5165994763374329},{features:[[3,2,4,1,-1],[5,2,2,1,2]],threshold:.00016560709627810866,right_val:.5307276248931885,left_val:.4058471918106079},{features:[[10,0,4,2,-1],[12,0,2,1,2],[10,1,2,1,2]],threshold:-.0053354292176663876,right_val:.5158129930496216,left_val:.3445056974887848},{features:[[7,12,3,1,-1],[8,12,1,1,3]],threshold:.0011287260567769408,right_val:.6075533032417297,left_val:.4594863057136536},{features:[[8,11,4,8,-1],[10,11,2,4,2],[8,15,2,4,2]],threshold:-.0219692196696997,right_val:.5228595733642578,left_val:.1680400967597961},{features:[[9,9,2,2,-1],[9,10,2,1,2]],threshold:-.00021775320055894554,right_val:.5215672850608826,left_val:.3861596882343292},{features:[[3,18,15,2,-1],[3,19,15,1,2]],threshold:.00020200149447191507,right_val:.4363039135932922,left_val:.5517979264259338},{features:[[2,6,2,12,-1],[2,6,1,6,2],[3,12,1,6,2]],threshold:-.0217331498861313,right_val:.4789851009845734,left_val:.7999460101127625},{features:[[9,8,2,3,-1],[9,9,2,1,3]],threshold:-.0008439993252977729,right_val:.5374773144721985,left_val:.4085975885391235},{features:[[7,10,3,2,-1],[8,10,1,2,3]],threshold:-.00043895249837078154,right_val:.4366143047809601,left_val:.5470405220985413},{features:[[11,11,3,1,-1],[12,11,1,1,3]],threshold:.0015092400135472417,right_val:.5842149257659912,left_val:.4988996982574463},{features:[[6,11,3,1,-1],[7,11,1,1,3]],threshold:-.003554783994331956,right_val:.4721005856990814,left_val:.6753690242767334},{features:[[9,2,4,2,-1],[11,2,2,1,2],[9,3,2,1,2]],threshold:.00048191400128416717,right_val:.4357109069824219,left_val:.541585385799408},{features:[[4,12,2,3,-1],[4,13,2,1,3]],threshold:-.00602643983438611,right_val:.499188095331192,left_val:.2258509993553162},{features:[[2,1,18,3,-1],[8,1,6,3,3]],threshold:-.0116681400686502,right_val:.4927498996257782,left_val:.625655472278595},{features:[[5,1,4,14,-1],[7,1,2,14,2]],threshold:-.0028718370012938976,right_val:.524580180644989,left_val:.3947784900665283},{features:[[8,16,12,3,-1],[8,16,6,3,2]],threshold:.0170511696487665,right_val:.5794224143028259,left_val:.4752511084079742},{features:[[1,17,18,3,-1],[7,17,6,3,3]],threshold:-.0133520802482963,right_val:.4544535875320435,left_val:.6041104793548584},{features:[[9,14,2,6,-1],[9,17,2,3,2]],threshold:-.0003930180100724101,right_val:.5544905066490173,left_val:.4258275926113129},{features:[[9,12,1,8,-1],[9,16,1,4,2]],threshold:.0030483349692076445,right_val:.3780272901058197,left_val:.5233420133590698},{features:[[9,14,2,3,-1],[9,15,2,1,3]],threshold:-.00435792887583375,right_val:.4838674068450928,left_val:.6371889114379883},{features:[[9,6,2,12,-1],[9,10,2,4,3]],threshold:.0056661018170416355,right_val:.4163666069507599,left_val:.5374705791473389},{features:[[12,9,3,3,-1],[12,10,3,1,3]],threshold:6067733920644969e-20,right_val:.5311625003814697,left_val:.4638795852661133},{features:[[0,1,4,8,-1],[2,1,2,8,2]],threshold:.0367381609976292,right_val:.6466524004936218,left_val:.4688656032085419},{features:[[9,1,6,2,-1],[12,1,3,1,2],[9,2,3,1,2]],threshold:.008652813732624054,right_val:.2188657969236374,left_val:.5204318761825562},{features:[[1,3,12,14,-1],[1,10,12,7,2]],threshold:-.1537135988473892,right_val:.4958840012550354,left_val:.1630371958017349},{features:[[8,12,4,2,-1],[10,12,2,1,2],[8,13,2,1,2]],threshold:-.00041560421232134104,right_val:.4696458876132965,left_val:.577445924282074},{features:[[1,9,10,2,-1],[1,9,5,1,2],[6,10,5,1,2]],threshold:-.0012640169588848948,right_val:.5217198133468628,left_val:.3977175951004028},{features:[[8,15,4,3,-1],[8,16,4,1,3]],threshold:-.003547334112226963,right_val:.480831503868103,left_val:.6046528220176697},{features:[[6,8,8,3,-1],[6,9,8,1,3]],threshold:3001906952704303e-20,right_val:.5228201150894165,left_val:.3996723890304565},{features:[[9,15,5,3,-1],[9,16,5,1,3]],threshold:.00131130195222795,right_val:.5765997767448425,left_val:.4712158143520355},{features:[[8,7,4,3,-1],[8,8,4,1,3]],threshold:-.0013374709524214268,right_val:.5253170132637024,left_val:.4109584987163544},{features:[[7,7,6,2,-1],[7,8,6,1,2]],threshold:.0208767093718052,right_val:.1757981926202774,left_val:.5202993750572205},{features:[[5,7,8,2,-1],[5,7,4,1,2],[9,8,4,1,2]],threshold:-.007549794856458902,right_val:.4694975018501282,left_val:.6566609740257263},{features:[[12,9,3,3,-1],[12,10,3,1,3]],threshold:.0241885501891375,right_val:.3370220959186554,left_val:.5128673911094666},{features:[[4,7,4,2,-1],[4,8,4,1,2]],threshold:-.002935882890596986,right_val:.4694541096687317,left_val:.658078670501709},{features:[[14,2,6,9,-1],[14,5,6,3,3]],threshold:.0575579293072224,right_val:.2775259912014008,left_val:.5146445035934448},{features:[[4,9,3,3,-1],[5,9,1,3,3]],threshold:-.0011343370424583554,right_val:.5192667245864868,left_val:.3836601972579956},{features:[[12,9,3,3,-1],[12,10,3,1,3]],threshold:.0168169997632504,right_val:.6177260875701904,left_val:.5085592865943909},{features:[[0,2,6,9,-1],[0,5,6,3,3]],threshold:.005053517874330282,right_val:.3684791922569275,left_val:.5138763189315796},{features:[[17,3,3,6,-1],[18,3,1,6,3]],threshold:-.004587471019476652,right_val:.4835202097892761,left_val:.5989655256271362},{features:[[0,3,3,6,-1],[1,3,1,6,3]],threshold:.001688246033154428,right_val:.5723056793212891,left_val:.4509486854076386},{features:[[17,14,1,2,-1],[17,15,1,1,2]],threshold:-.0016554000321775675,right_val:.5243319272994995,left_val:.3496770858764648},{features:[[4,9,4,3,-1],[6,9,2,3,2]],threshold:-.0193738006055355,right_val:.496871292591095,left_val:.1120536997914314},{features:[[12,9,3,3,-1],[12,10,3,1,3]],threshold:.0103744501248002,right_val:.4395213127136231,left_val:.5148196816444397},{features:[[5,9,3,3,-1],[5,10,3,1,3]],threshold:.00014973050565458834,right_val:.526988685131073,left_val:.4084999859333038},{features:[[9,5,6,8,-1],[12,5,3,4,2],[9,9,3,4,2]],threshold:-.042981930077076,right_val:.501850426197052,left_val:.6394104957580566},{features:[[5,5,6,8,-1],[5,5,3,4,2],[8,9,3,4,2]],threshold:.008306593634188175,right_val:.6698353290557861,left_val:.470755398273468},{features:[[16,1,4,6,-1],[16,4,4,3,2]],threshold:-.0041285790503025055,right_val:.5323647260665894,left_val:.4541369080543518},{features:[[1,0,6,20,-1],[3,0,2,20,3]],threshold:.0017399420030415058,right_val:.5439866185188293,left_val:.433396190404892},{features:[[12,11,3,2,-1],[13,11,1,2,3]],threshold:.00011739750334527344,right_val:.5543426275253296,left_val:.4579687118530273},{features:[[5,11,3,2,-1],[6,11,1,2,3]],threshold:.00018585780344437808,right_val:.5426754951477051,left_val:.4324643909931183},{features:[[9,4,6,1,-1],[11,4,2,1,3]],threshold:.005558769218623638,right_val:.3550611138343811,left_val:.525722086429596},{features:[[0,0,8,3,-1],[4,0,4,3,2]],threshold:-.007985156029462814,right_val:.4630635976791382,left_val:.6043018102645874},{features:[[15,0,2,5,-1],[15,0,1,5,2]],threshold:.0006059412262402475,right_val:.55331951379776,left_val:.4598254859447479},{features:[[4,1,3,2,-1],[5,1,1,2,3]],threshold:-.0002298304025316611,right_val:.5322461128234863,left_val:.4130752086639404},{features:[[7,0,6,15,-1],[9,0,2,15,3]],threshold:.0004374021082185209,right_val:.5409289002418518,left_val:.4043039977550507},{features:[[6,11,3,1,-1],[7,11,1,1,3]],threshold:.0002948202018160373,right_val:.5628852248191833,left_val:.4494963884353638},{features:[[12,0,3,4,-1],[13,0,1,4,3]],threshold:.0103126596659422,right_val:.2704316973686218,left_val:.5177510976791382},{features:[[5,4,6,1,-1],[7,4,2,1,3]],threshold:-.007724110968410969,right_val:.4980553984642029,left_val:.1988019049167633},{features:[[12,7,3,2,-1],[12,8,3,1,2]],threshold:-.004679720848798752,right_val:.5018296241760254,left_val:.6644750237464905},{features:[[0,1,4,6,-1],[0,4,4,3,2]],threshold:-.005075545981526375,right_val:.5185269117355347,left_val:.3898304998874664},{features:[[12,7,3,2,-1],[12,8,3,1,2]],threshold:.00224797404371202,right_val:.5660336017608643,left_val:.4801808893680573},{features:[[2,16,3,3,-1],[2,17,3,1,3]],threshold:.0008332700817845762,right_val:.3957188129425049,left_val:.5210919976234436},{features:[[13,8,6,10,-1],[16,8,3,5,2],[13,13,3,5,2]],threshold:-.0412793308496475,right_val:.5007054209709167,left_val:.6154541969299316},{features:[[0,9,5,2,-1],[0,10,5,1,2]],threshold:-.0005093018990010023,right_val:.5228403806686401,left_val:.3975942134857178},{features:[[12,11,2,2,-1],[13,11,1,1,2],[12,12,1,1,2]],threshold:.0012568780221045017,right_val:.5939183235168457,left_val:.4979138076305389},{features:[[3,15,3,3,-1],[3,16,3,1,3]],threshold:.008004849776625633,right_val:.1633366048336029,left_val:.4984497129917145},{features:[[12,7,3,2,-1],[12,8,3,1,2]],threshold:-.0011879300000146031,right_val:.4942624866962433,left_val:.5904964804649353},{features:[[5,7,3,2,-1],[5,8,3,1,2]],threshold:.0006194895249791443,right_val:.5328726172447205,left_val:.4199557900428772},{features:[[9,5,9,9,-1],[9,8,9,3,3]],threshold:.006682985927909613,right_val:.490588903427124,left_val:.5418602824211121},{features:[[5,0,3,7,-1],[6,0,1,7,3]],threshold:-.0037062340416014194,right_val:.5138000249862671,left_val:.3725939095020294},{features:[[5,2,12,5,-1],[9,2,4,5,3]],threshold:-.0397394113242626,right_val:.5050346851348877,left_val:.6478961110115051},{features:[[6,11,2,2,-1],[6,11,1,1,2],[7,12,1,1,2]],threshold:.0014085009461268783,right_val:.6377884149551392,left_val:.4682339131832123},{features:[[15,15,3,2,-1],[15,16,3,1,2]],threshold:.0003932268882635981,right_val:.415048211812973,left_val:.5458530187606812},{features:[[2,15,3,2,-1],[2,16,3,1,2]],threshold:-.0018979819724336267,right_val:.5149704217910767,left_val:.3690159916877747},{features:[[14,12,6,8,-1],[17,12,3,4,2],[14,16,3,4,2]],threshold:-.0139704402536154,right_val:.4811357855796814,left_val:.6050562858581543},{features:[[2,8,15,6,-1],[7,8,5,6,3]],threshold:-.1010081991553307,right_val:.4992361962795258,left_val:.2017080038785934},{features:[[2,2,18,17,-1],[8,2,6,17,3]],threshold:-.0173469204455614,right_val:.4899486005306244,left_val:.5713148713111877},{features:[[5,1,4,1,-1],[7,1,2,1,2]],threshold:.000156197595060803,right_val:.5392642021179199,left_val:.4215388894081116},{features:[[5,2,12,5,-1],[9,2,4,5,3]],threshold:.1343892961740494,right_val:.3767612874507904,left_val:.5136151909828186},{features:[[3,2,12,5,-1],[7,2,4,5,3]],threshold:-.0245822407305241,right_val:.4747906923294067,left_val:.7027357816696167},{features:[[4,9,12,4,-1],[10,9,6,2,2],[4,11,6,2,2]],threshold:-.0038553720805794,right_val:.5427716970443726,left_val:.4317409098148346},{features:[[5,15,6,2,-1],[5,15,3,1,2],[8,16,3,1,2]],threshold:-.002316524973139167,right_val:.4618647992610931,left_val:.594269871711731},{features:[[10,14,2,3,-1],[10,15,2,1,3]],threshold:-.004851812031120062,right_val:.4884895086288452,left_val:.6191568970680237},{features:[[0,13,20,2,-1],[0,13,10,1,2],[10,14,10,1,2]],threshold:.002469993894919753,right_val:.4017199873924255,left_val:.5256664752960205},{features:[[4,9,12,8,-1],[10,9,6,4,2],[4,13,6,4,2]],threshold:.0454969592392445,right_val:.2685773968696594,left_val:.5237867832183838},{features:[[8,13,3,6,-1],[8,16,3,3,2]],threshold:-.0203195996582508,right_val:.4979738891124725,left_val:.213044598698616},{features:[[10,12,2,2,-1],[10,13,2,1,2]],threshold:.0002699499891605228,right_val:.5543122291564941,left_val:.481404185295105},{features:[[9,12,2,2,-1],[9,12,1,1,2],[10,13,1,1,2]],threshold:-.0018232699949294329,right_val:.4709989130496979,left_val:.6482579708099365},{features:[[4,11,14,4,-1],[11,11,7,2,2],[4,13,7,2,2]],threshold:-.006301579065620899,right_val:.5306236147880554,left_val:.4581927955150604},{features:[[8,5,4,2,-1],[8,6,4,1,2]],threshold:-.0002413949987385422,right_val:.4051763117313385,left_val:.5232086777687073},{features:[[10,10,6,3,-1],[12,10,2,3,3]],threshold:-.001033036969602108,right_val:.4789193868637085,left_val:.5556201934814453},{features:[[2,14,1,2,-1],[2,15,1,1,2]],threshold:.0001804116036510095,right_val:.4011810123920441,left_val:.5229442715644836},{features:[[13,8,6,12,-1],[16,8,3,6,2],[13,14,3,6,2]],threshold:-.0614078603684902,right_val:.5010703206062317,left_val:.62986820936203},{features:[[1,8,6,12,-1],[1,8,3,6,2],[4,14,3,6,2]],threshold:-.0695439130067825,right_val:.4773184061050415,left_val:.7228280901908875},{features:[[10,0,6,10,-1],[12,0,2,10,3]],threshold:-.0705426633358002,right_val:.5182529091835022,left_val:.2269513010978699},{features:[[5,11,8,4,-1],[5,11,4,2,2],[9,13,4,2,2]],threshold:.0024423799477517605,right_val:.4098151028156281,left_val:.5237097144126892},{features:[[10,16,8,4,-1],[14,16,4,2,2],[10,18,4,2,2]],threshold:.0015494349645450711,right_val:.5468043088912964,left_val:.4773750901222229},{features:[[7,7,6,6,-1],[9,7,2,6,3]],threshold:-.0239142198115587,right_val:.4783824980258942,left_val:.7146975994110107},{features:[[10,2,4,10,-1],[10,2,2,10,2]],threshold:-.0124536901712418,right_val:.5241122841835022,left_val:.2635296881198883},{features:[[6,1,4,9,-1],[8,1,2,9,2]],threshold:-.00020760179904755205,right_val:.5113608837127686,left_val:.3623757064342499},{features:[[12,19,2,1,-1],[12,19,1,1,2]],threshold:29781080229440704e-21,right_val:.5432801842689514,left_val:.4705932140350342}],threshold:90.25334930419922},{simpleClassifiers:[{features:[[1,2,4,9,-1],[3,2,2,9,2]],threshold:.0117727499455214,right_val:.6421167254447937,left_val:.3860518932342529},{features:[[7,5,6,4,-1],[9,5,2,4,3]],threshold:.0270375702530146,right_val:.675403892993927,left_val:.4385654926300049},{features:[[9,4,2,4,-1],[9,6,2,2,2]],threshold:-3641950024757534e-20,right_val:.34233158826828,left_val:.5487101078033447},{features:[[14,5,2,8,-1],[14,9,2,4,2]],threshold:.001999540952965617,right_val:.5400317907333374,left_val:.3230532109737396},{features:[[7,6,5,12,-1],[7,12,5,6,2]],threshold:.0045278300531208515,right_val:.2935043871402741,left_val:.5091639757156372},{features:[[14,6,2,6,-1],[14,9,2,3,2]],threshold:.00047890920541249216,right_val:.5344064235687256,left_val:.4178153872489929},{features:[[4,6,2,6,-1],[4,9,2,3,2]],threshold:.0011720920447260141,right_val:.5132070779800415,left_val:.2899182140827179},{features:[[8,15,10,4,-1],[13,15,5,2,2],[8,17,5,2,2]],threshold:.0009530570241622627,right_val:.5560845136642456,left_val:.428012490272522},{features:[[6,18,2,2,-1],[7,18,1,2,2]],threshold:15099150004971307e-21,right_val:.5404760241508484,left_val:.4044871926307678},{features:[[11,3,6,2,-1],[11,4,6,1,2]],threshold:-.0006081790197640657,right_val:.5503466129302979,left_val:.4271768927574158},{features:[[2,0,16,6,-1],[2,2,16,2,3]],threshold:.003322452073916793,right_val:.5369734764099121,left_val:.3962723910808563},{features:[[11,3,6,2,-1],[11,4,6,1,2]],threshold:-.0011037490330636501,right_val:.5237749814987183,left_val:.4727177917957306},{features:[[4,11,10,3,-1],[4,12,10,1,3]],threshold:-.0014350269921123981,right_val:.4223509132862091,left_val:.5603008270263672},{features:[[11,3,6,2,-1],[11,4,6,1,2]],threshold:.0020767399109899998,right_val:.4732725918292999,left_val:.5225917100906372},{features:[[3,3,6,2,-1],[3,4,6,1,2]],threshold:-.00016412809782195836,right_val:.5432739853858948,left_val:.3999075889587402},{features:[[16,0,4,7,-1],[16,0,2,7,2]],threshold:.008830243721604347,right_val:.6027327179908752,left_val:.4678385853767395},{features:[[0,14,9,6,-1],[0,16,9,2,3]],threshold:-.0105520701035857,right_val:.5213974714279175,left_val:.3493967056274414},{features:[[9,16,3,3,-1],[9,17,3,1,3]],threshold:-.00227316003292799,right_val:.4749062955379486,left_val:.6185818910598755},{features:[[4,6,6,2,-1],[6,6,2,2,3]],threshold:-.0008478633244521916,right_val:.3843482136726379,left_val:.5285341143608093},{features:[[15,11,1,3,-1],[15,12,1,1,3]],threshold:.0012081359745934606,right_val:.3447335958480835,left_val:.536064088344574},{features:[[5,5,2,3,-1],[5,6,2,1,3]],threshold:.002651273040100932,right_val:.6193962097167969,left_val:.4558292031288147},{features:[[10,9,2,2,-1],[10,10,2,1,2]],threshold:-.0011012479662895203,right_val:.5327628254890442,left_val:.368023008108139},{features:[[3,1,4,3,-1],[5,1,2,3,2]],threshold:.0004956151824444532,right_val:.5274940729141235,left_val:.396059513092041},{features:[[16,0,4,7,-1],[16,0,2,7,2]],threshold:-.0439017713069916,right_val:.4992839097976685,left_val:.7020444869995117},{features:[[0,0,20,1,-1],[10,0,10,1,2]],threshold:.0346903502941132,right_val:.276660293340683,left_val:.5049164295196533},{features:[[15,11,1,3,-1],[15,12,1,1,3]],threshold:-.002744219033047557,right_val:.5274971127510071,left_val:.2672632932662964},{features:[[0,4,3,4,-1],[1,4,1,4,3]],threshold:.003331658896058798,right_val:.6001101732254028,left_val:.4579482972621918},{features:[[16,3,3,6,-1],[16,5,3,2,3]],threshold:-.0200445707887411,right_val:.523571789264679,left_val:.3171594142913818},{features:[[1,3,3,6,-1],[1,5,3,2,3]],threshold:.0013492030557245016,right_val:.4034324884414673,left_val:.5265362858772278},{features:[[6,2,12,6,-1],[12,2,6,3,2],[6,5,6,3,2]],threshold:.0029702018946409225,right_val:.4571984112262726,left_val:.5332456827163696},{features:[[8,10,4,3,-1],[8,11,4,1,3]],threshold:.006303998176008463,right_val:.6034635901451111,left_val:.4593310952186585},{features:[[4,2,14,6,-1],[11,2,7,3,2],[4,5,7,3,2]],threshold:-.0129365902394056,right_val:.5372971296310425,left_val:.4437963962554932},{features:[[9,11,2,3,-1],[9,12,2,1,3]],threshold:.004014872945845127,right_val:.6437833905220032,left_val:.4680323898792267},{features:[[15,13,2,3,-1],[15,14,2,1,3]],threshold:-.002640167949721217,right_val:.5314332842826843,left_val:.3709631860256195},{features:[[8,12,4,3,-1],[8,13,4,1,3]],threshold:.0139184398576617,right_val:.713080883026123,left_val:.4723555147647858},{features:[[15,11,1,3,-1],[15,12,1,1,3]],threshold:-.00045087869511917233,right_val:.5370404124259949,left_val:.4492394030094147},{features:[[7,13,5,2,-1],[7,14,5,1,2]],threshold:.00025384349282830954,right_val:.5514402985572815,left_val:.4406864047050476},{features:[[7,12,6,3,-1],[7,13,6,1,3]],threshold:.002271000063046813,right_val:.5967984199523926,left_val:.4682416915893555},{features:[[5,11,4,4,-1],[5,13,4,2,2]],threshold:.002412077970802784,right_val:.3018598854541779,left_val:.5079392194747925},{features:[[11,4,3,3,-1],[12,4,1,3,3]],threshold:-3602567085181363e-20,right_val:.4471096992492676,left_val:.560103714466095},{features:[[6,4,3,3,-1],[7,4,1,3,3]],threshold:-.0074905529618263245,right_val:.4989944100379944,left_val:.2207535058259964},{features:[[16,5,3,6,-1],[17,5,1,6,3]],threshold:-.017513120546937,right_val:.5017648935317993,left_val:.6531215906143188},{features:[[3,6,12,7,-1],[7,6,4,7,3]],threshold:.1428163051605225,right_val:.1482062041759491,left_val:.4967963099479675},{features:[[16,5,3,6,-1],[17,5,1,6,3]],threshold:.005534526892006397,right_val:.5954223871231079,left_val:.4898946881294251},{features:[[3,13,2,3,-1],[3,14,2,1,3]],threshold:-.0009632359142415226,right_val:.519607424736023,left_val:.3927116990089417},{features:[[16,5,3,6,-1],[17,5,1,6,3]],threshold:-.0020370010752230883,right_val:.4884858131408691,left_val:.5613325238227844},{features:[[1,5,3,6,-1],[2,5,1,6,3]],threshold:.0016614829655736685,right_val:.5578880906105042,left_val:.4472880065441132},{features:[[1,9,18,1,-1],[7,9,6,1,3]],threshold:-.0031188090797513723,right_val:.5397477746009827,left_val:.3840532898902893},{features:[[0,9,8,7,-1],[4,9,4,7,2]],threshold:-.006400061771273613,right_val:.4533218145370483,left_val:.5843983888626099},{features:[[12,11,8,2,-1],[12,12,8,1,2]],threshold:.0003131960111204535,right_val:.4234727919101715,left_val:.5439221858978271},{features:[[0,11,8,2,-1],[0,12,8,1,2]],threshold:-.0182220991700888,right_val:.4958404898643494,left_val:.1288464963436127},{features:[[9,13,2,3,-1],[9,14,2,1,3]],threshold:.008796924725174904,right_val:.7153480052947998,left_val:.49512979388237},{features:[[4,10,12,4,-1],[4,10,6,2,2],[10,12,6,2,2]],threshold:-.004239507019519806,right_val:.5194936990737915,left_val:.3946599960327148},{features:[[9,3,3,7,-1],[10,3,1,7,3]],threshold:.009708627127110958,right_val:.6064900159835815,left_val:.4897503852844238},{features:[[7,2,3,5,-1],[8,2,1,5,3]],threshold:-.003993417136371136,right_val:.5060828924179077,left_val:.3245440125465393},{features:[[9,12,4,6,-1],[11,12,2,3,2],[9,15,2,3,2]],threshold:-.0167850591242313,right_val:.5203778743743896,left_val:.1581953018903732},{features:[[8,7,3,6,-1],[9,7,1,6,3]],threshold:.018272090703249,right_val:.6626979112625122,left_val:.4680935144424439},{features:[[15,4,4,2,-1],[15,5,4,1,2]],threshold:.00568728381767869,right_val:.3512184917926788,left_val:.5211697816848755},{features:[[8,7,3,3,-1],[9,7,1,3,3]],threshold:-.0010739039862528443,right_val:.4529845118522644,left_val:.5768386125564575},{features:[[14,2,6,4,-1],[14,4,6,2,2]],threshold:-.00370938703417778,right_val:.5313581228256226,left_val:.4507763087749481},{features:[[7,16,6,1,-1],[9,16,2,1,3]],threshold:-.0002111070934915915,right_val:.4333376884460449,left_val:.5460820198059082},{features:[[15,13,2,3,-1],[15,14,2,1,3]],threshold:.0010670139454305172,right_val:.4078390896320343,left_val:.5371856093406677},{features:[[8,7,3,10,-1],[9,7,1,10,3]],threshold:.0035943021066486835,right_val:.5643836259841919,left_val:.4471287131309509},{features:[[11,10,2,6,-1],[11,12,2,2,3]],threshold:-.005177603103220463,right_val:.5280330181121826,left_val:.4499393105506897},{features:[[6,10,4,1,-1],[8,10,2,1,2]],threshold:-.00025414369883947074,right_val:.4407708048820496,left_val:.5516173243522644},{features:[[10,9,2,2,-1],[10,10,2,1,2]],threshold:.006352256052196026,right_val:.2465227991342545,left_val:.5194190144538879},{features:[[8,9,2,2,-1],[8,10,2,1,2]],threshold:-.00044205080484971404,right_val:.5139682292938232,left_val:.3830705881118774},{features:[[12,7,2,2,-1],[13,7,1,1,2],[12,8,1,1,2]],threshold:.0007448872784152627,right_val:.5974786877632141,left_val:.4891090989112854},{features:[[5,7,2,2,-1],[5,7,1,1,2],[6,8,1,1,2]],threshold:-.0035116379149258137,right_val:.4768764972686768,left_val:.7413681745529175},{features:[[13,0,3,14,-1],[14,0,1,14,3]],threshold:-.0125409103929996,right_val:.5252826809883118,left_val:.3648819029331207},{features:[[4,0,3,14,-1],[5,0,1,14,3]],threshold:.009493185207247734,right_val:.362958699464798,left_val:.5100492835044861},{features:[[13,4,3,14,-1],[14,4,1,14,3]],threshold:.0129611501470208,right_val:.4333561062812805,left_val:.5232442021369934},{features:[[9,14,2,3,-1],[9,15,2,1,3]],threshold:.004720944911241531,right_val:.6331052780151367,left_val:.4648149013519287},{features:[[8,14,4,3,-1],[8,15,4,1,3]],threshold:-.0023119079414755106,right_val:.4531058073043823,left_val:.5930309891700745},{features:[[4,2,3,16,-1],[5,2,1,16,3]],threshold:-.002826229901984334,right_val:.5257101058959961,left_val:.3870477974414825},{features:[[7,2,8,10,-1],[7,7,8,5,2]],threshold:-.0014311339473351836,right_val:.4561854898929596,left_val:.552250325679779},{features:[[6,14,7,3,-1],[6,15,7,1,3]],threshold:.0019378310535103083,right_val:.5736966729164124,left_val:.4546220898628235},{features:[[9,2,10,12,-1],[14,2,5,6,2],[9,8,5,6,2]],threshold:.00026343559147790074,right_val:.4571875035762787,left_val:.5345739126205444},{features:[[6,7,8,2,-1],[6,8,8,1,2]],threshold:.0007825752254575491,right_val:.5220187902450562,left_val:.3967815935611725},{features:[[8,13,4,6,-1],[8,16,4,3,2]],threshold:-.0195504408329725,right_val:.5243508219718933,left_val:.282964289188385},{features:[[6,6,1,3,-1],[6,7,1,1,3]],threshold:.00043914958951063454,right_val:.589909017086029,left_val:.4590066969394684},{features:[[16,2,4,6,-1],[16,4,4,2,3]],threshold:.0214520003646612,right_val:.2855378985404968,left_val:.523141086101532},{features:[[6,6,4,2,-1],[6,6,2,1,2],[8,7,2,1,2]],threshold:.0005897358059883118,right_val:.550642192363739,left_val:.4397256970405579},{features:[[16,2,4,6,-1],[16,4,4,2,3]],threshold:-.0261576101183891,right_val:.5189175009727478,left_val:.3135079145431519},{features:[[0,2,4,6,-1],[0,4,4,2,3]],threshold:-.0139598604291677,right_val:.5040717720985413,left_val:.3213272988796234},{features:[[9,6,2,6,-1],[9,6,1,6,2]],threshold:-.006369901821017265,right_val:.4849506914615631,left_val:.6387544870376587},{features:[[3,4,6,10,-1],[3,9,6,5,2]],threshold:-.008561382070183754,right_val:.5032019019126892,left_val:.2759132087230682},{features:[[9,5,2,6,-1],[9,5,1,6,2]],threshold:.000966229010373354,right_val:.5834879279136658,left_val:.4685640931129456},{features:[[3,13,2,3,-1],[3,14,2,1,3]],threshold:.0007655026856809855,right_val:.389642208814621,left_val:.5175207257270813},{features:[[13,13,3,2,-1],[13,14,3,1,2]],threshold:-.008183334022760391,right_val:.5208122134208679,left_val:.2069136947393417},{features:[[2,16,10,4,-1],[2,16,5,2,2],[7,18,5,2,2]],threshold:-.009397693909704685,right_val:.4641222953796387,left_val:.6134091019630432},{features:[[5,6,10,6,-1],[10,6,5,3,2],[5,9,5,3,2]],threshold:.004802898038178682,right_val:.439521998167038,left_val:.5454108119010925},{features:[[7,14,1,3,-1],[7,15,1,1,3]],threshold:-.003568056970834732,right_val:.4681093990802765,left_val:.6344485282897949},{features:[[14,16,6,3,-1],[14,17,6,1,3]],threshold:.0040733120404183865,right_val:.4015620052814484,left_val:.5292683243751526},{features:[[5,4,3,3,-1],[5,5,3,1,3]],threshold:.0012568129459396005,right_val:.5452824831008911,left_val:.4392988085746765},{features:[[7,4,10,3,-1],[7,5,10,1,3]],threshold:-.0029065010603517294,right_val:.4863379895687103,left_val:.5898832082748413},{features:[[0,4,5,4,-1],[0,6,5,2,2]],threshold:-.00244093406945467,right_val:.5247421860694885,left_val:.4069364964962006},{features:[[13,11,3,9,-1],[13,14,3,3,3]],threshold:.0248307008296251,right_val:.3682524859905243,left_val:.5182725787162781},{features:[[4,11,3,9,-1],[4,14,3,3,3]],threshold:-.0488540083169937,right_val:.496128112077713,left_val:.1307577937841415},{features:[[9,7,2,1,-1],[9,7,1,1,2]],threshold:-.001611037994734943,right_val:.4872662127017975,left_val:.6421005725860596},{features:[[5,0,6,17,-1],[7,0,2,17,3]],threshold:-.0970094799995422,right_val:.495098888874054,left_val:.0477693490684032},{features:[[10,3,6,3,-1],[10,3,3,3,2]],threshold:.0011209240183234215,right_val:.5354745984077454,left_val:.4616267085075378},{features:[[2,2,15,4,-1],[7,2,5,4,3]],threshold:-.001306409016251564,right_val:.4638805985450745,left_val:.626185417175293},{features:[[8,2,8,2,-1],[12,2,4,1,2],[8,3,4,1,2]],threshold:.00045771620352752507,right_val:.4646640121936798,left_val:.5384417772293091},{features:[[8,1,3,6,-1],[8,3,3,2,3]],threshold:-.0006314995116554201,right_val:.51302570104599,left_val:.3804047107696533},{features:[[9,17,2,2,-1],[9,18,2,1,2]],threshold:.0001450597046641633,right_val:.5664461851119995,left_val:.4554310142993927},{features:[[0,0,2,14,-1],[1,0,1,14,2]],threshold:-.0164745505899191,right_val:.4715859889984131,left_val:.6596958041191101},{features:[[12,0,7,3,-1],[12,1,7,1,3]],threshold:.0133695797994733,right_val:.3035964965820313,left_val:.519546627998352},{features:[[1,14,1,2,-1],[1,15,1,1,2]],threshold:.00010271780047332868,right_val:.4107066094875336,left_val:.522917628288269},{features:[[14,12,2,8,-1],[15,12,1,4,2],[14,16,1,4,2]],threshold:-.0055311559699475765,right_val:.4960907101631165,left_val:.6352887749671936},{features:[[1,0,7,3,-1],[1,1,7,1,3]],threshold:-.0026187049224972725,right_val:.5140984058380127,left_val:.3824546039104462},{features:[[14,12,2,8,-1],[15,12,1,4,2],[14,16,1,4,2]],threshold:.005083426833152771,right_val:.6220818758010864,left_val:.4950439929962158},{features:[[6,0,8,12,-1],[6,0,4,6,2],[10,6,4,6,2]],threshold:.0798181593418121,right_val:.1322475969791412,left_val:.4952335953712463},{features:[[6,1,8,9,-1],[6,4,8,3,3]],threshold:-.0992265865206718,right_val:.5008416771888733,left_val:.7542728781700134},{features:[[5,2,2,2,-1],[5,3,2,1,2]],threshold:-.0006517401780001819,right_val:.5130121111869812,left_val:.3699302971363068},{features:[[13,14,6,6,-1],[16,14,3,3,2],[13,17,3,3,2]],threshold:-.018996849656105,right_val:.4921202957630158,left_val:.6689178943634033},{features:[[0,17,20,2,-1],[0,17,10,1,2],[10,18,10,1,2]],threshold:.0173468999564648,right_val:.1859198063611984,left_val:.4983300864696503},{features:[[10,3,2,6,-1],[11,3,1,3,2],[10,6,1,3,2]],threshold:.0005508210160769522,right_val:.5522121787071228,left_val:.4574424028396606},{features:[[5,12,6,2,-1],[8,12,3,2,2]],threshold:.002005605027079582,right_val:.3856469988822937,left_val:.5131744742393494},{features:[[10,7,6,13,-1],[10,7,3,13,2]],threshold:-.007768819108605385,right_val:.5434309244155884,left_val:.4361700117588043},{features:[[5,15,10,5,-1],[10,15,5,5,2]],threshold:.0508782789111137,right_val:.6840639710426331,left_val:.4682720899581909},{features:[[10,4,4,10,-1],[10,4,2,10,2]],threshold:-.0022901780903339386,right_val:.5306099057197571,left_val:.4329245090484619},{features:[[5,7,2,1,-1],[6,7,1,1,2]],threshold:-.00015715380141045898,right_val:.4378164112567902,left_val:.5370057225227356},{features:[[10,3,6,7,-1],[10,3,3,7,2]],threshold:.1051924005150795,right_val:.0673614665865898,left_val:.5137274265289307},{features:[[4,3,6,7,-1],[7,3,3,7,2]],threshold:.002719891956076026,right_val:.5255665183067322,left_val:.4112060964107513},{features:[[1,7,18,5,-1],[7,7,6,5,3]],threshold:.0483377799391747,right_val:.4438967108726502,left_val:.5404623746871948},{features:[[3,17,4,3,-1],[5,17,2,3,2]],threshold:.0009570376132614911,right_val:.5399510860443115,left_val:.4355969130992889},{features:[[8,14,12,6,-1],[14,14,6,3,2],[8,17,6,3,2]],threshold:-.0253712590783834,right_val:.5031024813652039,left_val:.5995175242424011},{features:[[0,13,20,4,-1],[0,13,10,2,2],[10,15,10,2,2]],threshold:.0524579510092735,right_val:.1398351043462753,left_val:.4950287938117981},{features:[[4,5,14,2,-1],[11,5,7,1,2],[4,6,7,1,2]],threshold:-.0123656298965216,right_val:.496410608291626,left_val:.639729917049408},{features:[[1,2,10,12,-1],[1,2,5,6,2],[6,8,5,6,2]],threshold:-.1458971947431564,right_val:.494632214307785,left_val:.1001669988036156},{features:[[6,1,14,3,-1],[6,2,14,1,3]],threshold:-.0159086007624865,right_val:.5208340883255005,left_val:.3312329947948456},{features:[[8,16,2,3,-1],[8,17,2,1,3]],threshold:.00039486068999394774,right_val:.5426102876663208,left_val:.4406363964080811},{features:[[9,17,3,2,-1],[10,17,1,2,3]],threshold:-.0052454001270234585,right_val:.5189967155456543,left_val:.2799589931964874},{features:[[5,15,4,2,-1],[5,15,2,1,2],[7,16,2,1,2]],threshold:-.005042179953306913,right_val:.4752142131328583,left_val:.6987580060958862},{features:[[10,15,1,3,-1],[10,16,1,1,3]],threshold:.0029812189750373363,right_val:.6307479739189148,left_val:.4983288943767548},{features:[[8,16,4,4,-1],[8,16,2,2,2],[10,18,2,2,2]],threshold:-.007288430817425251,right_val:.5026869773864746,left_val:.298233300447464},{features:[[6,11,8,6,-1],[6,14,8,3,2]],threshold:.0015094350092113018,right_val:.3832970857620239,left_val:.5308442115783691},{features:[[2,13,5,2,-1],[2,14,5,1,2]],threshold:-.009334079921245575,right_val:.4969817101955414,left_val:.2037964016199112},{features:[[13,14,6,6,-1],[16,14,3,3,2],[13,17,3,3,2]],threshold:.0286671407520771,right_val:.6928027272224426,left_val:.5025696754455566},{features:[[1,9,18,4,-1],[7,9,6,4,3]],threshold:.1701968014240265,right_val:.1476442962884903,left_val:.4960052967071533},{features:[[13,14,6,6,-1],[16,14,3,3,2],[13,17,3,3,2]],threshold:-.003261447884142399,right_val:.4826056063175201,left_val:.5603063702583313},{features:[[0,2,1,6,-1],[0,4,1,2,3]],threshold:.0005576927796937525,right_val:.4129633009433746,left_val:.5205562114715576},{features:[[5,0,15,20,-1],[5,10,15,10,2]],threshold:.3625833988189697,right_val:.3768612146377564,left_val:.5221652984619141},{features:[[1,14,6,6,-1],[1,14,3,3,2],[4,17,3,3,2]],threshold:-.0116151301190257,right_val:.4637489914894104,left_val:.6022682785987854},{features:[[8,14,4,6,-1],[10,14,2,3,2],[8,17,2,3,2]],threshold:-.004079519771039486,right_val:.5337479114532471,left_val:.4070447087287903},{features:[[7,11,2,1,-1],[8,11,1,1,2]],threshold:.0005720430053770542,right_val:.5900393128395081,left_val:.4601835012435913},{features:[[9,17,3,2,-1],[10,17,1,2,3]],threshold:.000675433489959687,right_val:.4345428943634033,left_val:.5398252010345459},{features:[[8,17,3,2,-1],[9,17,1,2,3]],threshold:.0006329569732770324,right_val:.4051358997821808,left_val:.5201563239097595},{features:[[12,14,4,6,-1],[14,14,2,3,2],[12,17,2,3,2]],threshold:.00124353205319494,right_val:.5547441244125366,left_val:.4642387926578522},{features:[[4,14,4,6,-1],[4,14,2,3,2],[6,17,2,3,2]],threshold:-.004736385773867369,right_val:.4672552049160004,left_val:.6198567152023315},{features:[[13,14,2,6,-1],[14,14,1,3,2],[13,17,1,3,2]],threshold:-.006465846206992865,right_val:.5019000768661499,left_val:.6837332844734192},{features:[[5,14,2,6,-1],[5,14,1,3,2],[6,17,1,3,2]],threshold:.000350173213519156,right_val:.5363622903823853,left_val:.4344803094863892},{features:[[7,0,6,12,-1],[7,4,6,4,3]],threshold:.00015754920605104417,right_val:.5732020735740662,left_val:.4760079085826874},{features:[[0,7,12,2,-1],[4,7,4,2,3]],threshold:.009977436624467373,right_val:.3635039925575256,left_val:.5090985894203186},{features:[[10,3,3,13,-1],[11,3,1,13,3]],threshold:-.0004146452993154526,right_val:.4593802094459534,left_val:.5570064783096313},{features:[[7,3,3,13,-1],[8,3,1,13,3]],threshold:-.00035888899583369493,right_val:.4339134991168976,left_val:.5356845855712891},{features:[[10,8,6,3,-1],[10,9,6,1,3]],threshold:.0004046325047966093,right_val:.5436776876449585,left_val:.4439803063869476},{features:[[3,11,3,2,-1],[4,11,1,2,3]],threshold:-.0008218478760682046,right_val:.5176299214363098,left_val:.4042294919490814},{features:[[13,12,6,8,-1],[16,12,3,4,2],[13,16,3,4,2]],threshold:.005946741905063391,right_val:.5633779764175415,left_val:.4927651882171631},{features:[[7,6,6,5,-1],[9,6,2,5,3]],threshold:-.0217533893883228,right_val:.480084091424942,left_val:.8006293773651123},{features:[[17,11,2,7,-1],[17,11,1,7,2]],threshold:-.0145403798669577,right_val:.5182222723960876,left_val:.3946054875850678},{features:[[3,13,8,2,-1],[7,13,4,2,2]],threshold:-.0405107699334621,right_val:.4935792982578278,left_val:.0213249903172255},{features:[[6,9,8,3,-1],[6,10,8,1,3]],threshold:-.0005845826817676425,right_val:.5314025282859802,left_val:.4012795984745026},{features:[[4,3,4,3,-1],[4,4,4,1,3]],threshold:.005515180062502623,right_val:.5896260738372803,left_val:.4642418920993805},{features:[[11,3,4,3,-1],[11,4,4,1,3]],threshold:-.006062622182071209,right_val:.5016477704048157,left_val:.6502159237861633},{features:[[1,4,17,12,-1],[1,8,17,4,3]],threshold:.0945358425378799,right_val:.4126827120780945,left_val:.5264708995819092},{features:[[11,3,4,3,-1],[11,4,4,1,3]],threshold:.004731505177915096,right_val:.5892447829246521,left_val:.4879199862480164},{features:[[4,8,6,3,-1],[4,9,6,1,3]],threshold:-.0005257147131487727,right_val:.5189412832260132,left_val:.391728013753891},{features:[[12,3,5,3,-1],[12,4,5,1,3]],threshold:-.002546404954046011,right_val:.498570591211319,left_val:.5837599039077759},{features:[[1,11,2,7,-1],[2,11,1,7,2]],threshold:-.0260756891220808,right_val:.4955821931362152,left_val:.1261983960866928},{features:[[15,12,2,8,-1],[16,12,1,4,2],[15,16,1,4,2]],threshold:-.00547797093167901,right_val:.5010265707969666,left_val:.5722513794898987},{features:[[4,8,11,3,-1],[4,9,11,1,3]],threshold:.005133774131536484,right_val:.4226376116275787,left_val:.527326226234436},{features:[[9,13,6,2,-1],[12,13,3,1,2],[9,14,3,1,2]],threshold:.000479449809063226,right_val:.5819587111473083,left_val:.4450066983699799},{features:[[6,13,4,3,-1],[6,14,4,1,3]],threshold:-.0021114079281687737,right_val:.451171487569809,left_val:.5757653117179871},{features:[[9,12,3,3,-1],[10,12,1,3,3]],threshold:-.0131799904629588,right_val:.5160734057426453,left_val:.1884381026029587},{features:[[5,3,3,3,-1],[5,4,3,1,3]],threshold:-.004796809982508421,right_val:.4736118912696838,left_val:.6589789986610413},{features:[[9,4,2,3,-1],[9,5,2,1,3]],threshold:.0067483168095350266,right_val:.3356395065784454,left_val:.5259429812431335},{features:[[0,2,16,3,-1],[0,3,16,1,3]],threshold:.0014623369788751006,right_val:.4264092147350311,left_val:.5355271100997925},{features:[[15,12,2,8,-1],[16,12,1,4,2],[15,16,1,4,2]],threshold:.004764515906572342,right_val:.5786827802658081,left_val:.5034406781196594},{features:[[3,12,2,8,-1],[3,12,1,4,2],[4,16,1,4,2]],threshold:.0068066660314798355,right_val:.6677829027175903,left_val:.475660502910614},{features:[[14,13,3,6,-1],[14,15,3,2,3]],threshold:.0036608621012419462,right_val:.4311546981334686,left_val:.5369611978530884},{features:[[3,13,3,6,-1],[3,15,3,2,3]],threshold:.0214496403932571,right_val:.1888816058635712,left_val:.4968641996383667},{features:[[6,5,10,2,-1],[11,5,5,1,2],[6,6,5,1,2]],threshold:.004167890176177025,right_val:.5815368890762329,left_val:.4930733144283295},{features:[[2,14,14,6,-1],[2,17,14,3,2]],threshold:.008646756410598755,right_val:.4132595062255859,left_val:.5205205082893372},{features:[[10,14,1,3,-1],[10,15,1,1,3]],threshold:-.0003611407882999629,right_val:.4800927937030792,left_val:.5483555197715759},{features:[[4,16,2,2,-1],[4,16,1,1,2],[5,17,1,1,2]],threshold:.0010808729566633701,right_val:.6041421294212341,left_val:.4689902067184448},{features:[[10,6,2,3,-1],[10,7,2,1,3]],threshold:.005771995987743139,right_val:.3053277134895325,left_val:.5171142220497131},{features:[[0,17,20,2,-1],[0,17,10,1,2],[10,18,10,1,2]],threshold:.001572077046148479,right_val:.4178803861141205,left_val:.5219978094100952},{features:[[13,6,1,3,-1],[13,7,1,1,3]],threshold:-.0019307859474793077,right_val:.4812920093536377,left_val:.5860369801521301},{features:[[8,13,3,2,-1],[9,13,1,2,3]],threshold:-.007892627269029617,right_val:.497173398733139,left_val:.1749276965856552},{features:[[12,2,3,3,-1],[13,2,1,3,3]],threshold:-.002222467912361026,right_val:.521284818649292,left_val:.434258908033371},{features:[[3,18,2,2,-1],[3,18,1,1,2],[4,19,1,1,2]],threshold:.0019011989934369922,right_val:.689205527305603,left_val:.4765186905860901},{features:[[9,16,3,4,-1],[10,16,1,4,3]],threshold:.0027576119173318148,right_val:.4337486028671265,left_val:.5262191295623779},{features:[[6,6,1,3,-1],[6,7,1,1,3]],threshold:.005178744904696941,right_val:.7843729257583618,left_val:.4804069101810455},{features:[[13,1,5,2,-1],[13,2,5,1,2]],threshold:-.0009027334162965417,right_val:.5353423953056335,left_val:.412084698677063},{features:[[7,14,6,2,-1],[7,14,3,1,2],[10,15,3,1,2]],threshold:.005179795902222395,right_val:.6425960063934326,left_val:.4740372896194458},{features:[[11,3,3,4,-1],[12,3,1,4,3]],threshold:-.0101140001788735,right_val:.5175017714500427,left_val:.2468792051076889},{features:[[1,13,12,6,-1],[5,13,4,6,3]],threshold:-.0186170600354671,right_val:.4628978967666626,left_val:.5756294131278992},{features:[[14,11,5,2,-1],[14,12,5,1,2]],threshold:.0059225959703326225,right_val:.3214271068572998,left_val:.5169625878334045},{features:[[2,15,14,4,-1],[2,15,7,2,2],[9,17,7,2,2]],threshold:-.006294507998973131,right_val:.5141636729240417,left_val:.3872014880180359},{features:[[3,7,14,2,-1],[10,7,7,1,2],[3,8,7,1,2]],threshold:.0065353019163012505,right_val:.6310489773750305,left_val:.4853048920631409},{features:[[1,11,4,2,-1],[1,12,4,1,2]],threshold:.0010878399480134249,right_val:.3723258972167969,left_val:.5117315053939819},{features:[[14,0,6,14,-1],[16,0,2,14,3]],threshold:-.0225422400981188,right_val:.4887112975120544,left_val:.5692740082740784},{features:[[4,11,1,3,-1],[4,12,1,1,3]],threshold:-.003006566083058715,right_val:.5003992915153503,left_val:.2556012868881226},{features:[[14,0,6,14,-1],[16,0,2,14,3]],threshold:.007474127225577831,right_val:.5675926804542542,left_val:.4810872972011566},{features:[[1,10,3,7,-1],[2,10,1,7,3]],threshold:.0261623207479715,right_val:.1777237057685852,left_val:.4971194863319397},{features:[[8,12,9,2,-1],[8,13,9,1,2]],threshold:.0009435273823328316,right_val:.549125075340271,left_val:.4940010905265808},{features:[[0,6,20,1,-1],[10,6,10,1,2]],threshold:.0333632417023182,right_val:.2790724039077759,left_val:.5007612109184265},{features:[[8,4,4,4,-1],[8,4,2,4,2]],threshold:-.0151186501607299,right_val:.4973031878471375,left_val:.7059578895568848},{features:[[0,0,2,2,-1],[0,1,2,1,2]],threshold:.0009864894673228264,right_val:.3776761889457703,left_val:.5128620266914368}],threshold:104.74919891357422},{simpleClassifiers:[{features:[[5,3,10,9,-1],[5,6,10,3,3]],threshold:-.0951507985591888,right_val:.4017286896705627,left_val:.6470757126808167},{features:[[15,2,4,10,-1],[15,2,2,10,2]],threshold:.006270234007388353,right_val:.574644923210144,left_val:.399982213973999},{features:[[8,2,2,7,-1],[9,2,1,7,2]],threshold:.000300180894555524,right_val:.5538809895515442,left_val:.355877012014389},{features:[[7,4,12,1,-1],[11,4,4,1,3]],threshold:.0011757409665733576,right_val:.5382617712020874,left_val:.425653487443924},{features:[[3,4,9,1,-1],[6,4,3,1,3]],threshold:4423526843311265e-20,right_val:.5589926838874817,left_val:.3682908117771149},{features:[[15,10,1,4,-1],[15,12,1,2,2]],threshold:-29936920327600092e-21,right_val:.4020367860794067,left_val:.5452470183372498},{features:[[4,10,6,4,-1],[7,10,3,4,2]],threshold:.003007319988682866,right_val:.3317843973636627,left_val:.5239058136940002},{features:[[15,9,1,6,-1],[15,12,1,3,2]],threshold:-.0105138896033168,right_val:.5307983756065369,left_val:.4320689141750336},{features:[[7,17,6,3,-1],[7,18,6,1,3]],threshold:.008347682654857635,right_val:.6453298926353455,left_val:.4504637122154236},{features:[[14,3,2,16,-1],[15,3,1,8,2],[14,11,1,8,2]],threshold:-.0031492270063608885,right_val:.5370525121688843,left_val:.4313425123691559},{features:[[4,9,1,6,-1],[4,12,1,3,2]],threshold:-1443564997316571e-20,right_val:.381797194480896,left_val:.5326603055000305},{features:[[12,1,5,2,-1],[12,2,5,1,2]],threshold:-.00042855090578086674,right_val:.5382009744644165,left_val:.430516391992569},{features:[[6,18,4,2,-1],[6,18,2,1,2],[8,19,2,1,2]],threshold:.00015062429883982986,right_val:.5544965267181396,left_val:.4235970973968506},{features:[[2,4,16,10,-1],[10,4,8,5,2],[2,9,8,5,2]],threshold:.0715598315000534,right_val:.2678802907466888,left_val:.5303059816360474},{features:[[6,5,1,10,-1],[6,10,1,5,2]],threshold:.0008409518050029874,right_val:.5205433964729309,left_val:.3557108938694},{features:[[4,8,15,2,-1],[9,8,5,2,3]],threshold:.0629865005612373,right_val:.2861376106739044,left_val:.5225362777709961},{features:[[1,8,15,2,-1],[6,8,5,2,3]],threshold:-.0033798629883676767,right_val:.5201697945594788,left_val:.3624185919761658},{features:[[9,5,3,6,-1],[9,7,3,2,3]],threshold:-.00011810739670181647,right_val:.3959893882274628,left_val:.547447681427002},{features:[[5,7,8,2,-1],[9,7,4,2,2]],threshold:-.0005450560129247606,right_val:.5215715765953064,left_val:.3740422129631043},{features:[[9,11,2,3,-1],[9,12,2,1,3]],threshold:-.0018454910023137927,right_val:.4584448933601379,left_val:.5893052220344543},{features:[[1,0,16,3,-1],[1,1,16,1,3]],threshold:-.0004383237101137638,right_val:.5385351181030273,left_val:.4084582030773163},{features:[[11,2,7,2,-1],[11,3,7,1,2]],threshold:-.002400083001703024,right_val:.5293580293655396,left_val:.377745509147644},{features:[[5,1,10,18,-1],[5,7,10,6,3]],threshold:-.0987957417964935,right_val:.5070089101791382,left_val:.2963612079620361},{features:[[17,4,3,2,-1],[18,4,1,2,3]],threshold:.0031798239797353745,right_val:.6726443767547607,left_val:.4877632856369019},{features:[[8,13,1,3,-1],[8,14,1,1,3]],threshold:.00032406419632025063,right_val:.5561109781265259,left_val:.4366911053657532},{features:[[3,14,14,6,-1],[3,16,14,2,3]],threshold:-.0325472503900528,right_val:.5308616161346436,left_val:.31281578540802},{features:[[0,2,3,4,-1],[1,2,1,4,3]],threshold:-.007756113074719906,right_val:.4639872014522553,left_val:.6560224890708923},{features:[[12,1,5,2,-1],[12,2,5,1,2]],threshold:.0160272493958473,right_val:.3141897916793823,left_val:.5172680020332336},{features:[[3,1,5,2,-1],[3,2,5,1,2]],threshold:710023505234858e-20,right_val:.5336294770240784,left_val:.4084446132183075},{features:[[10,13,2,3,-1],[10,14,2,1,3]],threshold:.007342280820012093,right_val:.660346508026123,left_val:.4966922104358673},{features:[[8,13,2,3,-1],[8,14,2,1,3]],threshold:-.0016970280557870865,right_val:.4500182867050171,left_val:.5908237099647522},{features:[[14,12,2,3,-1],[14,13,2,1,3]],threshold:.0024118260480463505,right_val:.3599720895290375,left_val:.5315160751342773},{features:[[7,2,2,3,-1],[7,3,2,1,3]],threshold:-.005530093796551228,right_val:.4996814131736755,left_val:.2334040999412537},{features:[[5,6,10,4,-1],[10,6,5,2,2],[5,8,5,2,2]],threshold:-.0026478730142116547,right_val:.4684734046459198,left_val:.5880935788154602},{features:[[9,13,1,6,-1],[9,16,1,3,2]],threshold:.0112956296652555,right_val:.1884590983390808,left_val:.4983777105808258},{features:[[10,12,2,2,-1],[11,12,1,1,2],[10,13,1,1,2]],threshold:-.000669528788421303,right_val:.4799019992351532,left_val:.5872138142585754},{features:[[4,12,2,3,-1],[4,13,2,1,3]],threshold:.0014410680159926414,right_val:.350101113319397,left_val:.5131189227104187},{features:[[14,4,6,6,-1],[14,6,6,2,3]],threshold:.0024637870956212282,right_val:.4117639064788818,left_val:.5339372158050537},{features:[[8,17,2,3,-1],[8,18,2,1,3]],threshold:.0003311451873742044,right_val:.5398246049880981,left_val:.4313383102416992},{features:[[16,4,4,6,-1],[16,6,4,2,3]],threshold:-.0335572697222233,right_val:.5179154872894287,left_val:.26753368973732},{features:[[0,4,4,6,-1],[0,6,4,2,3]],threshold:.0185394193977118,right_val:.2317177057266235,left_val:.4973869919776917},{features:[[14,6,2,3,-1],[14,6,1,3,2]],threshold:-.00029698139405809343,right_val:.4643664062023163,left_val:.552970826625824},{features:[[4,9,8,1,-1],[8,9,4,1,2]],threshold:-.0004557725915219635,right_val:.4469191133975983,left_val:.5629584193229675},{features:[[8,12,4,3,-1],[8,13,4,1,3]],threshold:-.0101589802652597,right_val:.4925918877124786,left_val:.6706212759017944},{features:[[5,12,10,6,-1],[5,14,10,2,3]],threshold:-22413829356082715e-21,right_val:.3912901878356934,left_val:.5239421725273132},{features:[[11,12,1,2,-1],[11,13,1,1,2]],threshold:7203496352303773e-20,right_val:.5501788854598999,left_val:.4799438118934631},{features:[[8,15,4,2,-1],[8,16,4,1,2]],threshold:-.006926720961928368,right_val:.4698084890842438,left_val:.6930009722709656},{features:[[6,9,8,8,-1],[10,9,4,4,2],[6,13,4,4,2]],threshold:-.007699783891439438,right_val:.5480883121490479,left_val:.409962385892868},{features:[[7,12,4,6,-1],[7,12,2,3,2],[9,15,2,3,2]],threshold:-.007313054986298084,right_val:.5057886242866516,left_val:.3283475935459137},{features:[[10,11,3,1,-1],[11,11,1,1,3]],threshold:.0019650589674711227,right_val:.6398249864578247,left_val:.4978047013282776},{features:[[9,7,2,10,-1],[9,7,1,5,2],[10,12,1,5,2]],threshold:.007164760027080774,right_val:.6222137212753296,left_val:.4661160111427307},{features:[[8,0,6,6,-1],[10,0,2,6,3]],threshold:-.0240786392241716,right_val:.5222162008285522,left_val:.2334644943475723},{features:[[3,11,2,6,-1],[3,13,2,2,3]],threshold:-.0210279691964388,right_val:.4938226044178009,left_val:.1183653995394707},{features:[[16,12,1,2,-1],[16,13,1,1,2]],threshold:.00036017020465806127,right_val:.4116711020469666,left_val:.5325019955635071},{features:[[1,14,6,6,-1],[1,14,3,3,2],[4,17,3,3,2]],threshold:-.0172197297215462,right_val:.4664269089698792,left_val:.6278762221336365},{features:[[13,1,3,6,-1],[14,1,1,6,3]],threshold:-.007867214269936085,right_val:.5249736905097961,left_val:.3403415083885193},{features:[[8,8,2,2,-1],[8,9,2,1,2]],threshold:-.000447773898486048,right_val:.5086259245872498,left_val:.3610411882400513},{features:[[9,9,3,3,-1],[10,9,1,3,3]],threshold:.005548601038753986,right_val:.6203498244285583,left_val:.4884265959262848},{features:[[8,7,3,3,-1],[8,8,3,1,3]],threshold:-.00694611482322216,right_val:.5011097192764282,left_val:.262593001127243},{features:[[14,0,2,3,-1],[14,0,1,3,2]],threshold:.00013569870498031378,right_val:.5628312230110168,left_val:.4340794980525971},{features:[[1,0,18,9,-1],[7,0,6,9,3]],threshold:-.0458802506327629,right_val:.4696274995803833,left_val:.6507998704910278},{features:[[11,5,4,15,-1],[11,5,2,15,2]],threshold:-.0215825606137514,right_val:.5287616848945618,left_val:.3826502859592438},{features:[[5,5,4,15,-1],[7,5,2,15,2]],threshold:-.0202095396816731,right_val:.5074477195739746,left_val:.3233368098735809},{features:[[14,0,2,3,-1],[14,0,1,3,2]],threshold:.005849671084433794,right_val:.4489670991897583,left_val:.5177603960037231},{features:[[4,0,2,3,-1],[5,0,1,3,2]],threshold:-5747637987951748e-20,right_val:.5246363878250122,left_val:.4020850956439972},{features:[[11,12,2,2,-1],[12,12,1,1,2],[11,13,1,1,2]],threshold:-.001151310047134757,right_val:.490515410900116,left_val:.6315072178840637},{features:[[7,12,2,2,-1],[7,12,1,1,2],[8,13,1,1,2]],threshold:.0019862831104546785,right_val:.6497151255607605,left_val:.4702459871768951},{features:[[12,0,3,4,-1],[13,0,1,4,3]],threshold:-.005271951202303171,right_val:.5227652788162231,left_val:.3650383949279785},{features:[[4,11,3,3,-1],[4,12,3,1,3]],threshold:.0012662699446082115,right_val:.387761801481247,left_val:.5166100859642029},{features:[[12,7,4,2,-1],[12,8,4,1,2]],threshold:-.006291944067925215,right_val:.5023847818374634,left_val:.737589418888092},{features:[[8,10,3,2,-1],[9,10,1,2,3]],threshold:.000673601112794131,right_val:.5495585799217224,left_val:.4423226118087769},{features:[[9,9,3,2,-1],[10,9,1,2,3]],threshold:-.0010523450328037143,right_val:.4859583079814911,left_val:.5976396203041077},{features:[[8,9,3,2,-1],[9,9,1,2,3]],threshold:-.00044216238893568516,right_val:.4398930966854096,left_val:.5955939292907715},{features:[[12,0,3,4,-1],[13,0,1,4,3]],threshold:.0011747940443456173,right_val:.4605058133602142,left_val:.5349888205528259},{features:[[5,0,3,4,-1],[6,0,1,4,3]],threshold:.005245743785053492,right_val:.2941577136516571,left_val:.5049191117286682},{features:[[4,14,12,4,-1],[10,14,6,2,2],[4,16,6,2,2]],threshold:-.0245397202670574,right_val:.5218586921691895,left_val:.2550177872180939},{features:[[8,13,2,3,-1],[8,14,2,1,3]],threshold:.0007379304151982069,right_val:.5490816235542297,left_val:.4424861073493958},{features:[[10,10,3,8,-1],[10,14,3,4,2]],threshold:.0014233799884095788,right_val:.4081355929374695,left_val:.5319514274597168},{features:[[8,10,4,8,-1],[8,10,2,4,2],[10,14,2,4,2]],threshold:-.0024149110540747643,right_val:.5238950252532959,left_val:.4087659120559692},{features:[[10,8,3,1,-1],[11,8,1,1,3]],threshold:-.0012165299849584699,right_val:.4908052980899811,left_val:.567457914352417},{features:[[9,12,1,6,-1],[9,15,1,3,2]],threshold:-.0012438809499144554,right_val:.5256118178367615,left_val:.4129425883293152},{features:[[10,8,3,1,-1],[11,8,1,1,3]],threshold:.006194273941218853,right_val:.7313653230667114,left_val:.5060194134712219},{features:[[7,8,3,1,-1],[8,8,1,1,3]],threshold:-.0016607169527560472,right_val:.4596369862556458,left_val:.5979632139205933},{features:[[5,2,15,14,-1],[5,9,15,7,2]],threshold:-.0273162592202425,right_val:.5308842062950134,left_val:.4174365103244782},{features:[[2,1,2,10,-1],[2,1,1,5,2],[3,6,1,5,2]],threshold:-.00158455700147897,right_val:.4519486129283905,left_val:.56158047914505},{features:[[14,14,2,3,-1],[14,15,2,1,3]],threshold:-.0015514739789068699,right_val:.5360785126686096,left_val:.4076187014579773},{features:[[2,7,3,3,-1],[3,7,1,3,3]],threshold:.0003844655875582248,right_val:.5430442094802856,left_val:.4347293972969055},{features:[[17,4,3,3,-1],[17,5,3,1,3]],threshold:-.0146722598001361,right_val:.5146093964576721,left_val:.1659304946660996},{features:[[0,4,3,3,-1],[0,5,3,1,3]],threshold:.008160888217389584,right_val:.1884745955467224,left_val:.4961819052696228},{features:[[13,5,6,2,-1],[16,5,3,1,2],[13,6,3,1,2]],threshold:.0011121659772470593,right_val:.6093816161155701,left_val:.4868263900279999},{features:[[4,19,12,1,-1],[8,19,4,1,3]],threshold:-.007260377053171396,right_val:.4690375924110413,left_val:.6284325122833252},{features:[[12,12,2,4,-1],[12,14,2,2,2]],threshold:-.00024046430189628154,right_val:.4046044051647186,left_val:.5575000047683716},{features:[[3,15,1,3,-1],[3,16,1,1,3]],threshold:-.00023348190006799996,right_val:.5252848267555237,left_val:.4115762114524841},{features:[[11,16,6,4,-1],[11,16,3,4,2]],threshold:.005573648028075695,right_val:.5690100789070129,left_val:.4730072915554047},{features:[[2,10,3,10,-1],[3,10,1,10,3]],threshold:.0306237693876028,right_val:.1740095019340515,left_val:.4971886873245239},{features:[[12,8,2,4,-1],[12,8,1,4,2]],threshold:.0009207479888573289,right_val:.4354872107505798,left_val:.5372117757797241},{features:[[6,8,2,4,-1],[7,8,1,4,2]],threshold:-4355073906481266e-20,right_val:.4347316920757294,left_val:.5366883873939514},{features:[[10,14,2,3,-1],[10,14,1,3,2]],threshold:-.006645271088927984,right_val:.516053318977356,left_val:.3435518145561218},{features:[[5,1,10,3,-1],[10,1,5,3,2]],threshold:.0432219989597797,right_val:.7293652892112732,left_val:.4766792058944702},{features:[[10,7,3,2,-1],[11,7,1,2,3]],threshold:.0022331769578158855,right_val:.5633171200752258,left_val:.5029315948486328},{features:[[5,6,9,2,-1],[8,6,3,2,3]],threshold:.0031829739455133677,right_val:.5192136764526367,left_val:.4016092121601105},{features:[[9,8,2,2,-1],[9,9,2,1,2]],threshold:-.00018027749320026487,right_val:.5417919754981995,left_val:.4088315963745117},{features:[[2,11,16,6,-1],[2,11,8,3,2],[10,14,8,3,2]],threshold:-.0052934689447283745,right_val:.5243561863899231,left_val:.407567709684372},{features:[[12,7,2,2,-1],[13,7,1,1,2],[12,8,1,1,2]],threshold:.0012750959722325206,right_val:.6387010812759399,left_val:.4913282990455627},{features:[[9,5,2,3,-1],[9,6,2,1,3]],threshold:.004338532220572233,right_val:.2947346866130829,left_val:.5031672120094299},{features:[[9,7,3,2,-1],[10,7,1,2,3]],threshold:.00852507445961237,right_val:.6308869123458862,left_val:.4949789047241211},{features:[[5,1,8,12,-1],[5,7,8,6,2]],threshold:-.0009426635224372149,right_val:.4285649955272675,left_val:.5328366756439209},{features:[[13,5,2,2,-1],[13,6,2,1,2]],threshold:.0013609660090878606,right_val:.5941501259803772,left_val:.4991525113582611},{features:[[5,5,2,2,-1],[5,6,2,1,2]],threshold:.0004478250921238214,right_val:.5854480862617493,left_val:.4573504030704498},{features:[[12,4,3,3,-1],[12,5,3,1,3]],threshold:.001336005050688982,right_val:.584905207157135,left_val:.4604358971118927},{features:[[4,14,2,3,-1],[4,15,2,1,3]],threshold:-.0006096754805184901,right_val:.522942304611206,left_val:.3969388902187347},{features:[[12,4,3,3,-1],[12,5,3,1,3]],threshold:-.002365678083151579,right_val:.4898357093334198,left_val:.5808320045471191},{features:[[5,4,3,3,-1],[5,5,3,1,3]],threshold:.001073434017598629,right_val:.5470039248466492,left_val:.435121089220047},{features:[[9,14,2,6,-1],[10,14,1,3,2],[9,17,1,3,2]],threshold:.0021923359017819166,right_val:.3842903971672058,left_val:.535506010055542},{features:[[8,14,3,2,-1],[9,14,1,2,3]],threshold:.005496861878782511,right_val:.2827191948890686,left_val:.5018138885498047},{features:[[9,5,6,6,-1],[11,5,2,6,3]],threshold:-.0753688216209412,right_val:.5148826837539673,left_val:.1225076019763947},{features:[[5,5,6,6,-1],[7,5,2,6,3]],threshold:.0251344703137875,right_val:.702544629573822,left_val:.4731766879558563},{features:[[13,13,1,2,-1],[13,14,1,1,2]],threshold:-2935859993158374e-20,right_val:.465608686208725,left_val:.5430532097816467},{features:[[0,2,10,2,-1],[0,3,10,1,2]],threshold:-.0005835591000504792,right_val:.5190119743347168,left_val:.4031040072441101},{features:[[13,13,1,2,-1],[13,14,1,1,2]],threshold:-.0026639450807124376,right_val:.5161771178245544,left_val:.4308126866817474},{features:[[5,7,2,2,-1],[5,7,1,1,2],[6,8,1,1,2]],threshold:-.0013804089976474643,right_val:.4695515930652618,left_val:.621982991695404},{features:[[13,5,2,7,-1],[13,5,1,7,2]],threshold:.0012313219485804439,right_val:.4425831139087677,left_val:.5379363894462585},{features:[[6,13,1,2,-1],[6,14,1,1,2]],threshold:-14644179827882908e-21,right_val:.4222503006458283,left_val:.5281640291213989},{features:[[11,0,3,7,-1],[12,0,1,7,3]],threshold:-.0128188095986843,right_val:.5179932713508606,left_val:.2582092881202698},{features:[[0,3,2,16,-1],[0,3,1,8,2],[1,11,1,8,2]],threshold:.0228521898388863,right_val:.7609264254570007,left_val:.4778693020343781},{features:[[11,0,3,7,-1],[12,0,1,7,3]],threshold:.0008230597013607621,right_val:.4671724140644074,left_val:.5340992212295532},{features:[[6,0,3,7,-1],[7,0,1,7,3]],threshold:.0127701200544834,right_val:.1472366005182266,left_val:.4965761005878449},{features:[[11,16,8,4,-1],[11,16,4,4,2]],threshold:-.0500515103340149,right_val:.5016592144966125,left_val:.641499400138855},{features:[[1,16,8,4,-1],[5,16,4,4,2]],threshold:.0157752707600594,right_val:.5685362219810486,left_val:.4522320032119751},{features:[[13,5,2,7,-1],[13,5,1,7,2]],threshold:-.0185016207396984,right_val:.5137959122657776,left_val:.2764748930931091},{features:[[5,5,2,7,-1],[6,5,1,7,2]],threshold:.0024626250378787518,right_val:.3795408010482788,left_val:.5141941905021667},{features:[[18,6,2,14,-1],[18,13,2,7,2]],threshold:.0629161670804024,right_val:.658043384552002,left_val:.5060648918151855},{features:[[6,10,3,4,-1],[6,12,3,2,2]],threshold:-21648500478477217e-21,right_val:.401988685131073,left_val:.5195388197898865},{features:[[14,7,1,2,-1],[14,8,1,1,2]],threshold:.0021180990152060986,right_val:.5954458713531494,left_val:.4962365031242371},{features:[[0,1,18,6,-1],[0,1,9,3,2],[9,4,9,3,2]],threshold:-.0166348908096552,right_val:.517544686794281,left_val:.3757933080196381},{features:[[14,7,1,2,-1],[14,8,1,1,2]],threshold:-.002889947034418583,right_val:.5057178735733032,left_val:.6624013781547546},{features:[[0,6,2,14,-1],[0,13,2,7,2]],threshold:.076783262193203,right_val:.8047714829444885,left_val:.4795796871185303},{features:[[17,0,3,12,-1],[18,0,1,12,3]],threshold:.003917067777365446,right_val:.5719941854476929,left_val:.4937882125377655},{features:[[0,6,18,3,-1],[0,7,18,1,3]],threshold:-.0726706013083458,right_val:.4943903982639313,left_val:.0538945607841015},{features:[[6,0,14,16,-1],[6,8,14,8,2]],threshold:.5403950214385986,right_val:.1143338978290558,left_val:.5129774212837219},{features:[[0,0,3,12,-1],[1,0,1,12,3]],threshold:.0029510019812732935,right_val:.5698574185371399,left_val:.4528343975543976},{features:[[13,0,3,7,-1],[14,0,1,7,3]],threshold:.0034508369863033295,right_val:.4218730926513672,left_val:.5357726812362671},{features:[[5,7,1,2,-1],[5,8,1,1,2]],threshold:-.0004207793972454965,right_val:.4637925922870636,left_val:.5916172862052917},{features:[[14,4,6,6,-1],[14,6,6,2,3]],threshold:.0033051050268113613,right_val:.438204288482666,left_val:.5273385047912598},{features:[[5,7,7,2,-1],[5,8,7,1,2]],threshold:.0004773506079800427,right_val:.5181884765625,left_val:.4046528041362763},{features:[[8,6,6,9,-1],[8,9,6,3,3]],threshold:-.0259285103529692,right_val:.5089386105537415,left_val:.7452235817909241},{features:[[5,4,6,1,-1],[7,4,2,1,3]],threshold:-.002972979098558426,right_val:.5058795213699341,left_val:.3295435905456543},{features:[[13,0,6,4,-1],[16,0,3,2,2],[13,2,3,2,2]],threshold:.005850832909345627,right_val:.5793024897575378,left_val:.4857144057750702},{features:[[1,2,18,12,-1],[1,6,18,4,3]],threshold:-.0459675192832947,right_val:.5380653142929077,left_val:.4312731027603149},{features:[[3,2,17,12,-1],[3,6,17,4,3]],threshold:.1558596044778824,right_val:.1684713959693909,left_val:.5196170210838318},{features:[[5,14,7,3,-1],[5,15,7,1,3]],threshold:.0151648297905922,right_val:.6735026836395264,left_val:.4735757112503052},{features:[[10,14,1,3,-1],[10,15,1,1,3]],threshold:-.0010604249546304345,right_val:.4775702953338623,left_val:.5822926759719849},{features:[[3,14,3,3,-1],[3,15,3,1,3]],threshold:.006647629197686911,right_val:.231953501701355,left_val:.4999198913574219},{features:[[14,4,6,6,-1],[14,6,6,2,3]],threshold:-.0122311301529408,right_val:.5262982249259949,left_val:.4750893115997315},{features:[[0,4,6,6,-1],[0,6,6,2,3]],threshold:.005652888212352991,right_val:.3561818897724152,left_val:.5069767832756042},{features:[[12,5,4,3,-1],[12,6,4,1,3]],threshold:.0012977829901501536,right_val:.5619062781333923,left_val:.4875693917274475},{features:[[4,5,4,3,-1],[4,6,4,1,3]],threshold:.0107815898954868,right_val:.6782308220863342,left_val:.4750770032405853},{features:[[18,0,2,6,-1],[18,2,2,2,3]],threshold:.002865477930754423,right_val:.4290736019611359,left_val:.5305461883544922},{features:[[8,1,4,9,-1],[10,1,2,9,2]],threshold:.0028663428965955973,right_val:.5539351105690002,left_val:.4518479108810425},{features:[[6,6,8,2,-1],[6,6,4,2,2]],threshold:-.005198332015424967,right_val:.5434188842773438,left_val:.4149119853973389},{features:[[6,5,4,2,-1],[6,5,2,1,2],[8,6,2,1,2]],threshold:.005373999010771513,right_val:.6507657170295715,left_val:.471789687871933},{features:[[10,5,2,3,-1],[10,6,2,1,3]],threshold:-.0146415298804641,right_val:.5161777138710022,left_val:.2172164022922516},{features:[[9,5,1,3,-1],[9,6,1,1,3]],threshold:-15042580344015732e-21,right_val:.4298836886882782,left_val:.533738374710083},{features:[[9,10,2,2,-1],[9,11,2,1,2]],threshold:-.0001187566012958996,right_val:.5582447052001953,left_val:.4604594111442566},{features:[[0,8,4,3,-1],[0,9,4,1,3]],threshold:.0169955305755138,right_val:.0738800764083862,left_val:.4945895075798035},{features:[[6,0,8,6,-1],[6,3,8,3,2]],threshold:-.0350959412753582,right_val:.4977591037750244,left_val:.70055091381073},{features:[[1,0,6,4,-1],[1,0,3,2,2],[4,2,3,2,2]],threshold:.0024217350874096155,right_val:.5477694272994995,left_val:.4466265141963959},{features:[[13,0,3,7,-1],[14,0,1,7,3]],threshold:-.0009634033776819706,right_val:.5313338041305542,left_val:.4714098870754242},{features:[[9,16,2,2,-1],[9,17,2,1,2]],threshold:.00016391130338888615,right_val:.5342242121696472,left_val:.4331546127796173},{features:[[11,4,6,10,-1],[11,9,6,5,2]],threshold:-.0211414601653814,right_val:.5204498767852783,left_val:.2644700109958649},{features:[[0,10,19,2,-1],[0,11,19,1,2]],threshold:.0008777520270086825,right_val:.4152742922306061,left_val:.5208349823951721},{features:[[9,5,8,9,-1],[9,8,8,3,3]],threshold:-.0279439203441143,right_val:.5018811821937561,left_val:.6344125270843506},{features:[[4,0,3,7,-1],[5,0,1,7,3]],threshold:.006729737855494022,right_val:.3500863909721375,left_val:.5050438046455383},{features:[[8,6,4,12,-1],[10,6,2,6,2],[8,12,2,6,2]],threshold:.0232810396701097,right_val:.6968677043914795,left_val:.4966318011283875},{features:[[0,2,6,4,-1],[0,4,6,2,2]],threshold:-.0116449799388647,right_val:.5049629807472229,left_val:.3300260007381439},{features:[[8,15,4,3,-1],[8,16,4,1,3]],threshold:.0157643090933561,right_val:.7321153879165649,left_val:.4991598129272461},{features:[[8,0,3,7,-1],[9,0,1,7,3]],threshold:-.001361147966235876,right_val:.5160670876502991,left_val:.3911735117435455},{features:[[9,5,3,4,-1],[10,5,1,4,3]],threshold:-.0008152233785949647,right_val:.49497190117836,left_val:.5628911256790161},{features:[[8,5,3,4,-1],[9,5,1,4,3]],threshold:-.0006006627227179706,right_val:.4550595879554749,left_val:.585359513759613},{features:[[7,6,6,1,-1],[9,6,2,1,3]],threshold:.0004971551825292408,right_val:.5443599224090576,left_val:.4271470010280609},{features:[[7,14,4,4,-1],[7,14,2,2,2],[9,16,2,2,2]],threshold:.0023475370835512877,right_val:.3887656927108765,left_val:.5143110752105713},{features:[[13,14,4,6,-1],[15,14,2,3,2],[13,17,2,3,2]],threshold:-.008926156908273697,right_val:.497172087430954,left_val:.6044502258300781},{features:[[7,8,1,8,-1],[7,12,1,4,2]],threshold:-.013919910416007,right_val:.5000367760658264,left_val:.2583160996437073},{features:[[16,0,2,8,-1],[17,0,1,4,2],[16,4,1,4,2]],threshold:.0010209949687123299,right_val:.5560358166694641,left_val:.4857374131679535},{features:[[2,0,2,8,-1],[2,0,1,4,2],[3,4,1,4,2]],threshold:-.0027441629208624363,right_val:.464577704668045,left_val:.5936884880065918},{features:[[6,1,14,3,-1],[6,2,14,1,3]],threshold:-.0162001308053732,right_val:.5193495154380798,left_val:.3163014948368073},{features:[[7,9,3,10,-1],[7,14,3,5,2]],threshold:.004333198070526123,right_val:.3458878993988037,left_val:.5061224102973938},{features:[[9,14,2,2,-1],[9,15,2,1,2]],threshold:.0005849793087691069,right_val:.5870177745819092,left_val:.4779017865657806},{features:[[7,7,6,8,-1],[7,11,6,4,2]],threshold:-.0022466450463980436,right_val:.5374773144721985,left_val:.4297851026058197},{features:[[9,7,3,6,-1],[9,10,3,3,2]],threshold:.0023146099410951138,right_val:.4640969932079315,left_val:.5438671708106995},{features:[[7,13,3,3,-1],[7,14,3,1,3]],threshold:.008767912164330482,right_val:.6771789789199829,left_val:.472689300775528},{features:[[9,9,2,2,-1],[9,10,2,1,2]],threshold:-.00022448020172305405,right_val:.5428048968315125,left_val:.4229173064231873},{features:[[0,1,18,2,-1],[6,1,6,2,3]],threshold:-.007433602120727301,right_val:.4683673977851868,left_val:.6098880767822266},{features:[[7,1,6,14,-1],[7,8,6,7,2]],threshold:-.0023189240600913763,right_val:.4424242079257965,left_val:.5689436793327332},{features:[[1,9,18,1,-1],[7,9,6,1,3]],threshold:-.0021042178850620985,right_val:.5187087059020996,left_val:.3762221038341522},{features:[[9,7,2,2,-1],[9,7,1,2,2]],threshold:.000460348412161693,right_val:.5771207213401794,left_val:.4699405133724213},{features:[[9,3,2,9,-1],[10,3,1,9,2]],threshold:.0010547629790380597,right_val:.5601701736450195,left_val:.4465216994285584},{features:[[18,14,2,3,-1],[18,15,2,1,3]],threshold:.0008714881842024624,right_val:.3914709091186523,left_val:.544980525970459},{features:[[7,11,3,1,-1],[8,11,1,1,3]],threshold:.00033364820410497487,right_val:.5645738840103149,left_val:.4564009010791779},{features:[[10,8,3,4,-1],[11,8,1,4,3]],threshold:-.0014853250468149781,right_val:.4692778885364533,left_val:.5747377872467041},{features:[[7,14,3,6,-1],[8,14,1,6,3]],threshold:.0030251620337367058,right_val:.3762814104557037,left_val:.5166196823120117},{features:[[10,8,3,4,-1],[11,8,1,4,3]],threshold:.005028074141591787,right_val:.6151527166366577,left_val:.5002111792564392},{features:[[7,8,3,4,-1],[8,8,1,4,3]],threshold:-.0005816451157443225,right_val:.4390751123428345,left_val:.5394598245620728},{features:[[7,9,6,9,-1],[7,12,6,3,3]],threshold:.0451415292918682,right_val:.206303596496582,left_val:.5188326835632324},{features:[[0,14,2,3,-1],[0,15,2,1,3]],threshold:-.001079562003724277,right_val:.5137907266616821,left_val:.3904685080051422},{features:[[11,12,1,2,-1],[11,13,1,1,2]],threshold:.00015995999274309725,right_val:.5427504181861877,left_val:.4895322918891907},{features:[[4,3,8,3,-1],[8,3,4,3,2]],threshold:-.0193592701107264,right_val:.4773507118225098,left_val:.6975228786468506},{features:[[0,4,20,6,-1],[0,4,10,6,2]],threshold:.207255095243454,right_val:.3034991919994354,left_val:.5233635902404785},{features:[[9,14,1,3,-1],[9,15,1,1,3]],threshold:-.00041953290929086506,right_val:.4460186064243317,left_val:.5419396758079529},{features:[[8,14,4,3,-1],[8,15,4,1,3]],threshold:.0022582069505006075,right_val:.6027408838272095,left_val:.4815764129161835},{features:[[0,15,14,4,-1],[0,17,14,2,2]],threshold:-.0067811207845807076,right_val:.5183305740356445,left_val:.3980278968811035},{features:[[1,14,18,6,-1],[1,17,18,3,2]],threshold:.0111543098464608,right_val:.4188759922981262,left_val:.543123185634613},{features:[[0,0,10,6,-1],[0,0,5,3,2],[5,3,5,3,2]],threshold:.0431624315679073,right_val:.6522961258888245,left_val:.4738228023052216}],threshold:105.76110076904297}],size:[20,20],tilted:!1};var svmFilter=function(){var e,t,r,a,n,i,o,s,l,u,h;this.fft_inplace=function(t,r){void 0===r&&(r=u);for(var a=0;a<i;a++)r[a]=0;return e.real_fft2d(t,r),[t,r]},this.ifft=function(t,r){return e.real_ifft2d(t,r),t};var c=function(e,t){for(var r,a=0;a<i;a++)r=e[0][a]*t[1][a]+e[1][a]*t[0][a],e[0][a]=e[0][a]*t[0][a]-e[1][a]*t[1][a],e[1][a]=r};this.init=function(c,f,d,p,g){var _;n=v(p-1+g),i=n*n,(e=new FFT$1).init(n),t=Array(d);for(var m=(p-1)/2,y=0;y<d;y++){for(var b=new Float64Array(i),x=new Float64Array(i),k=0;k<p;k++)for(var w=0;w<p;w++)b[w+(w<m?n-m:-m)+(k+(k<m?n-m:-m))*n]=c[y][p-1-k+(p-1-w)*p];_=this.fft_inplace(b,x),t[y]=_}for(a=new Float64Array(d),y=0;y<d;y++)a[y]=f[y];for(r=Array(d),u=Array(d),y=0;y<d;y++)r[y]=new Float64Array(g*g),u[y]=new Float64Array(g*g);h=new Float64Array(i),l=d,o=p,s=g},this.getResponses=function(e){for(var i,u,v=o-1+s,g=0;g<l;g++){for(var _=0;_<n*n;_++)h[_]=0;for(e[g]=f(e[g]),_=0;_<v;_++)for(var m=0;m<v;m++)h[_+n*m]=e[g][m+v*_];for(i=this.fft_inplace(h),c(i,t[g]),i=this.ifft(i[0],i[1]),u=(o-1)/2,_=0;_<s;_++)for(m=0;m<s;m++)r[g][_+m*s]=i[u+m+(_+u)*n];for(_=0;_<s*s;_++)r[g][_]+=a[g];r[g]=d(r[g]),p(r[g])}return r};var f=function(e){for(var t,r=o-1+s,a=0,n=1e3,i=0;i<r;i++)for(var l=0;l<r;l++)(t=e[l+r*i])<n&&(n=t),t>a&&(a=t);var u=a-n;for(i=0;i<r;i++)for(l=0;l<r;l++)e[l+r*i]=(e[l+r*i]-n)/u;return e},d=function(e){for(var t=0;t<s;t++)for(var r=0;r<s;r++)e[t+r*s]=1/(1+Math.exp(-(e[t+r*s]-1)));return e},v=function(e){return e--,e|=e>>1,e|=e>>2,e|=e>>4,e|=e>>8,e|=e>>16,++e},p=function(e){for(var t=e.length,r=0,a=1,n=0;n<t;n++)r=e[n]>r?e[n]:r,a=e[n]<a?e[n]:a;var i=r-a;if(0==i);else for(n=0;n<t;n++)e[n]=(e[n]-a)/i}},webglUtils=createCommonjsModule((function(e,t){var r,a,n,i,o;r=function(e){throw window.console&&(window.console.error?window.console.error(e):window.console.log&&window.console.log(e)),e},a=function(){return window!==window.top},n=function(e,t){return window.WebGLRenderingContext&&i(e,t)||null},i=function(e,t){for(var r=["webgl","experimental-webgl"],a=null,n=0;n<r.length;++n){try{a=e.getContext(r[n],t)}catch(i){}if(a)break}return a},o=function(e,t,a,n){var i=n||r,o=e.createShader(a);return e.shaderSource(o,t),e.compileShader(o),e.getShaderParameter(o,e.COMPILE_STATUS)?o:(i("*** Error compiling shader '"+o+"':"+e.getShaderInfoLog(o)),e.deleteShader(o),null)},e.exports={setupWebGL:n,createProgram:function(e,t,a,n){for(var i=e.createProgram(),o=0;o<t.length;++o)e.attachShader(i,t[o]);if(a)for(o=0;o<a.length;++o)e.bindAttribLocation(i,n?n[o]:o,a[o]);if(e.linkProgram(i),!e.getProgramParameter(i,e.LINK_STATUS)){var s=e.getProgramInfoLog(i);return r("Error in program linking:"+s),e.deleteProgram(i),null}return i},createShaderFromScript:function(e,t,r,a){var n,i,s=document.getElementById(t);if(!s)throw new Error("*** Error: unknown script element"+t);if(n=s.text,!r)if("x-shader/x-vertex"===s.type)i=e.VERTEX_SHADER;else if("x-shader/x-fragment"===s.type)i=e.FRAGMENT_SHADER;else if(i!==e.VERTEX_SHADER&&i!==e.FRAGMENT_SHADER)throw new Error("*** Error: unknown shader type");return o(e,n,r||i,a)},getWebGLContext:function(e){return a()&&(a()&&(document.body.className="iframe"),e.width=e.clientWidth,e.height=e.clientHeight),n(e)},loadShader:o}})),webglUtils_1=webglUtils.setupWebGL,webglUtils_2=webglUtils.createProgram,webglUtils_5=webglUtils.loadShader,webglFilter=function(){var e,t,r,a,n,i,o,s,l,u,h,c,f,d,v,p,g,_,m,y,b,x,k,w,C,T,S,I,A,R,N,E,F,M,D,O,L,z,B,P,V,U,W,G,H,j,q,X=!1,K=!1,Q=["attribute vec2 a_texCoord;","attribute vec2 a_position;","","varying vec2 v_texCoord;","","void main() {","   // transform coordinates to regular coordinates","   gl_Position = vec4(a_position,0.0,1.0);"," ","   // pass the texCoord to the fragment shader","   v_texCoord = a_texCoord;","}"].join("\n"),Y=["attribute vec2 a_texCoord;","attribute vec2 a_position;","","varying vec2 v_texCoord;","","void main() {","   // transform coordinates to regular coordinates","   gl_Position = vec4(a_position,0.0,1.0);"," ","   // pass the texCoord to the fragment shader","   v_texCoord = a_texCoord;","}"].join("\n"),J=["attribute vec2 a_texCoord_draw;","attribute vec2 a_position_draw;","attribute float a_patchChoice_draw;","","uniform vec2 u_resolutiondraw;","","varying vec2 v_texCoord;","varying float v_select;","","void main() {","   // convert the rectangle from pixels to 0.0 to 1.0","   vec2 zeroToOne = a_position_draw / u_resolutiondraw;","","   // convert from 0->1 to 0->2","   vec2 zeroToTwo = zeroToOne * 2.0;","","   // convert from 0->2 to -1->+1 (clipspace)","   vec2 clipSpace = zeroToTwo - 1.0;","   ","   // transform coordinates to regular coordinates","   gl_Position = vec4(clipSpace * vec2(1.0, 1.0), 0, 1);","","   // pass the texCoord to the fragment shader","   v_texCoord = a_texCoord_draw;","   ","   v_select = a_patchChoice_draw;","}"].join("\n"),Z=["precision mediump float;","","// our responses","uniform sampler2D u_responses;","","// the texCoords passed in from the vertex shader.","varying vec2 v_texCoord;","varying float v_select;","","const vec4 bit_shift = vec4(256.0*256.0*256.0, 256.0*256.0, 256.0, 1.0);","const vec4 bit_mask  = vec4(0.0, 1.0/256.0, 1.0/256.0, 1.0/256.0);","","// packing code from here http://stackoverflow.com/questions/9882716/packing-float-into-vec4-how-does-this-code-work","void main() {","  vec4 colorSum = texture2D(u_responses, v_texCoord);","  float value = 0.0;","  if (v_select < 0.1) {","    value = colorSum[0];","  } else if (v_select > 0.9 && v_select < 1.1) {","    value = colorSum[1];","  } else if (v_select > 1.9 && v_select < 2.1) {","    value = colorSum[2];","  } else if (v_select > 2.9 && v_select < 3.1) {","    value = colorSum[3];","  } else {","    value = 1.0;","  }","  ","  vec4 res = fract(value * bit_shift);","  res -= res.xxyz * bit_mask;","  ","  //gl_FragColor = vec4(value, value, value, value);","  //gl_FragColor = vec4(1.0, value, 1.0, 1.0);","  gl_FragColor = res;","}"].join("\n");this.init=function($,te,re,ae,ne,ie,oe){if(ie==oe)if(ie%2!=0&&oe%2!=0){F=te,r=ie,a=oe,n=ae,i=ne,o=re,f=Math.floor(o/4)+Math.ceil(o%4/4),s=n,l=i*f,x=n-r+1,w=(k=i-r+1)*o,I=Math.floor(o/4)+Math.ceil(o%4/4),A=n,R=i*I,N=n*i,E=new Float32Array(N*I*4);var se=[1/n,1/(i*f)];if(q=["precision mediump float;","","const vec2 u_onePixelPatches = vec2("+(1/n).toFixed(10)+","+(1/(i*f)).toFixed(10)+");","const vec2 u_onePixelFilters = vec2("+(1/r).toFixed(10)+","+(1/(a*f)).toFixed(10)+");","const float u_halffilterwidth = "+((r-1)/2).toFixed(1)+";","const float u_halffilterheight = "+((a-1)/2).toFixed(1)+";","","// our patches","uniform sampler2D u_patches;","// our filters","uniform sampler2D u_filters;","","// the texCoords passed in from the vertex shader.","varying vec2 v_texCoord;","varying vec2 v_texCoordFilters; // this should give us correct filter","","void main() {","  vec4 colorSum = vec4(0.0, 0.0, 0.0, 0.0);","  vec4 maxn = vec4(0.0, 0.0, 0.0, 0.0);","  vec4 minn = vec4(256.0, 256.0, 256.0, 256.0);","  vec4 scale = vec4(0.0, 0.0, 0.0, 0.0);","  vec4 patchValue = vec4(0.0, 0.0, 0.0, 0.0);","  vec4 filterValue = vec4(0.0, 0.0, 0.0, 0.0);","  vec4 filterTemp = vec4(0.0, 0.0, 0.0, 0.0);","  for (int w = 0;w < "+r+";w++) {","    for (int h = 0;h < "+a+";h++) {","      patchValue = texture2D(u_patches, v_texCoord + u_onePixelPatches * vec2(float(w)-u_halffilterwidth, float(h)-u_halffilterheight));","      filterValue = texture2D(u_filters, v_texCoordFilters + u_onePixelFilters * vec2(float(w)-u_halffilterwidth, float(h)-u_halffilterheight));","      maxn = max(patchValue, maxn);","      minn = min(patchValue, minn);","      colorSum += patchValue*filterValue;","      filterTemp += filterValue;","    } ","  }","  scale = maxn-minn;","  colorSum = (colorSum-(minn*filterTemp))/scale;","  // logistic transformation","  colorSum = 1.0/(1.0 + exp(- (colorSum) ));","  gl_FragColor = colorSum;","}"].join("\n"),j=["attribute vec2 a_texCoord;","attribute vec2 a_position;","","const vec2 u_resolution = vec2("+s.toFixed(1)+","+l.toFixed(1)+");","const float u_patchHeight = "+(1/f).toFixed(10)+";","const float u_filterHeight = "+(1/f).toFixed(10)+";","const vec2 u_midpoint = vec2(0.5 ,"+(1/(2*f)).toFixed(10)+");","","varying vec2 v_texCoord;","varying vec2 v_texCoordFilters;","","void main() {","   // convert the rectangle from pixels to 0.0 to 1.0","   vec2 zeroToOne = a_position / u_resolution;","","   // convert from 0->1 to 0->2","   vec2 zeroToTwo = zeroToOne * 2.0;","","   // convert from 0->2 to -1->+1 (clipspace)","   vec2 clipSpace = zeroToTwo - 1.0;","   ","   // transform coordinates to regular coordinates","   gl_Position = vec4(clipSpace * vec2(1.0, 1.0), 0, 1);"," ","   // pass the texCoord to the fragment shader","   v_texCoord = a_texCoord;","   ","   // set the filtertexture coordinate based on number filter to use","   v_texCoordFilters = u_midpoint + vec2(0.0, u_filterHeight * floor(a_texCoord[1]/u_patchHeight));","}"].join("\n"),"lbp"in $&&(G=["precision mediump float;","","uniform vec2 u_onePixelPatches;","","// our patches","uniform sampler2D u_patches;","","// the texCoords passed in from the vertex shader.","varying vec2 v_texCoord;","","void main() {","  vec4 topLeft = texture2D(u_patches, v_texCoord + vec2(-"+se[0].toFixed(5)+", -"+se[1].toFixed(5)+"));","  vec4 topMid = texture2D(u_patches, v_texCoord + vec2(0.0, -"+se[1].toFixed(5)+"));","  vec4 topRight = texture2D(u_patches, v_texCoord + vec2("+se[0].toFixed(5)+", -"+se[1].toFixed(5)+"));","  vec4 midLeft = texture2D(u_patches, v_texCoord + vec2(-"+se[0].toFixed(5)+", 0.0));","  vec4 midMid = texture2D(u_patches, v_texCoord);","  vec4 midRight = texture2D(u_patches, v_texCoord + vec2("+se[0].toFixed(5)+", 0.0));","  vec4 bottomLeft = texture2D(u_patches, v_texCoord + vec2(-"+se[0].toFixed(5)+", "+se[1].toFixed(5)+"));","  vec4 bottomMid = texture2D(u_patches, v_texCoord + vec2(0.0, "+se[1].toFixed(5)+"));","  vec4 bottomRight = texture2D(u_patches, v_texCoord + vec2("+se[0].toFixed(5)+", "+se[1].toFixed(5)+"));","  vec4 lbp = step(midMid, midRight)*1.0 + step(midMid, topRight)*2.0 + step(midMid, topMid)*4.0;","  lbp = lbp + step(midMid, topLeft)*8.0 + step(midMid, midLeft)*16.0 + step(midMid, bottomLeft)*32.0;","  lbp = lbp + step(midMid, bottomMid)*64.0 + step(midMid, bottomRight)*128.0;","  gl_FragColor = lbp;","}"].join("\n")),"sobel"in $&&(H=["precision mediump float;","","uniform vec2 u_onePixelPatches;","","// our patches","uniform sampler2D u_patches;","","// the texCoords passed in from the vertex shader.","varying vec2 v_texCoord;","","void main() {","  vec4 bottomLeft = texture2D(u_patches, v_texCoord + vec2(-"+se[0].toFixed(5)+", "+se[1].toFixed(5)+"));","  vec4 bottomRight = texture2D(u_patches, v_texCoord + vec2("+se[0].toFixed(5)+", "+se[1].toFixed(5)+"));","  vec4 topLeft = texture2D(u_patches, v_texCoord + vec2(-"+se[0].toFixed(5)+", -"+se[1].toFixed(5)+"));","  vec4 topRight = texture2D(u_patches, v_texCoord + vec2("+se[0].toFixed(5)+", -"+se[1].toFixed(5)+"));","  vec4 dx = (","    bottomLeft +","    (texture2D(u_patches, v_texCoord + vec2(-"+se[0].toFixed(5)+", 0.0))*vec4(2.0,2.0,2.0,2.0)) +","    topLeft -","    bottomRight -","    (texture2D(u_patches, v_texCoord + vec2("+se[0].toFixed(5)+", 0.0))*vec4(2.0,2.0,2.0,2.0)) -","    topRight)/4.0;","  vec4 dy = (","    bottomLeft +","    (texture2D(u_patches, v_texCoord + vec2(0.0, "+se[1].toFixed(5)+"))*vec4(2.0,2.0,2.0,2.0)) +","    bottomRight -","    topLeft -","    (texture2D(u_patches, v_texCoord + vec2(0.0, -"+se[1].toFixed(5)+"))*vec4(2.0,2.0,2.0,2.0)) -","    topRight)/4.0;","  vec4 gradient = sqrt((dx*dx) + (dy*dy));","  gl_FragColor = gradient;","}"].join("\n")),(t=document.createElement("canvas")).setAttribute("width",n-r+1+"px"),t.setAttribute("height",(i-a+1)*o+"px"),t.setAttribute("id","renderCanvas"),t.setAttribute("style","display:none;"),(e=webglUtils_1(t,{premultipliedAlpha:!1,preserveDrawingBuffer:!0,antialias:!1})).getExtension("OES_texture_float")){"raw"in $&&ee($.raw,e.TEXTURE0),"sobel"in $&&(ee($.sobel,e.TEXTURE4),K=!0),"lbp"in $&&(ee($.lbp,e.TEXTURE5),X=!0);for(var le=[],ue=(r-1)/2,he=0;he<f;he++)le=(le=le.concat([ue,(de=he*i)+ue,n-ue,de+ue,ue,de+i-ue])).concat([ue,de+i-ue,n-ue,de+ue,n-ue,de+i-ue]);le=new Float32Array(le);var ce,fe=[];for(he=0;he<le.length;he++)fe[he]=he%2==0?le[he]/s:le[he]/l;if(fe=new Float32Array(fe),"lbp"in $||"sobel"in $){var de,ve=1-2/(i*f),pe=1-2/f+2/(i*f),ge=[];for(he=0;he<f;he++)ge=(ge=ge.concat([-1,ve-(de=he*(2/f)),1,ve-de,-1,pe-de])).concat([-1,pe-de,1,ve-de,1,pe-de]);ge=new Float32Array(ge),ve=1-1/(i*f),pe=1-1/f+1/(i*f);var _e=[];for(he=0;he<f;he++)_e=(_e=_e.concat([0,ve-(de=he*(1/f)),1,ve-de,0,pe-de])).concat([0,pe-de,1,ve-de,1,pe-de]);_e=new Float32Array(_e)}for(C=new Float32Array(12*o),he=0;he<o;he++)de=he*k,C[ce=12*he]=0,C[ce+1]=de,C[ce+2]=x,C[ce+3]=de,C[ce+4]=0,C[ce+5]=de+k,C[ce+6]=0,C[ce+7]=de+k,C[ce+8]=x,C[ce+9]=de,C[ce+10]=x,C[ce+11]=de+k;T=new Float32Array(12*o);var me,ye=(r-1)/2/n,be=(r-1)/2/(i*I),xe=i/(i*I);for(he=0;he<o;he++)de=Math.floor(he/4)*xe,T[ce=12*he]=ye,T[ce+1]=de+be,T[ce+2]=1-ye,T[ce+3]=de+be,T[ce+4]=ye,T[ce+5]=de+xe-be,T[ce+6]=ye,T[ce+7]=de+xe-be,T[ce+8]=1-ye,T[ce+9]=de+be,T[ce+10]=1-ye,T[ce+11]=de+xe-be;for(S=new Float32Array(6*o),he=0;he<o;he++)S[ce=6*he]=me=he%4,S[ce+1]=me,S[ce+2]=me,S[ce+3]=me,S[ce+4]=me,S[ce+5]=me;if("sobel"in $){var ke=webglUtils_5(e,Y,e.VERTEX_SHADER),we=webglUtils_5(e,H,e.FRAGMENT_SHADER);z=webglUtils_2(e,[ke,we]),e.useProgram(z),U=e.getAttribLocation(z,"a_position"),W=e.createBuffer(),e.bindBuffer(e.ARRAY_BUFFER,W),e.bufferData(e.ARRAY_BUFFER,ge,e.STATIC_DRAW),e.enableVertexAttribArray(U),e.vertexAttribPointer(U,2,e.FLOAT,!1,0,0),P=e.getAttribLocation(z,"a_texCoord"),V=e.createBuffer(),e.bindBuffer(e.ARRAY_BUFFER,V),e.bufferData(e.ARRAY_BUFFER,_e,e.STATIC_DRAW),e.enableVertexAttribArray(P),e.vertexAttribPointer(P,2,e.FLOAT,!1,0,0),e.uniform1i(e.getUniformLocation(z,"u_patches"),1)}if("lbp"in $){var Ce=webglUtils_5(e,Q,e.VERTEX_SHADER),Te=webglUtils_5(e,G,e.FRAGMENT_SHADER);M=webglUtils_2(e,[Ce,Te]),e.useProgram(M),O=e.getAttribLocation(M,"a_position"),L=e.createBuffer(),e.bindBuffer(e.ARRAY_BUFFER,L),e.bufferData(e.ARRAY_BUFFER,ge,e.STATIC_DRAW),e.enableVertexAttribArray(O),e.vertexAttribPointer(O,2,e.FLOAT,!1,0,0),P=e.getAttribLocation(M,"a_texCoord"),D=e.createBuffer(),e.bindBuffer(e.ARRAY_BUFFER,D),e.bufferData(e.ARRAY_BUFFER,_e,e.STATIC_DRAW),e.enableVertexAttribArray(void 0),e.vertexAttribPointer(void 0,2,e.FLOAT,!1,0,0),e.uniform1i(e.getUniformLocation(M,"u_patches"),1)}var Se=webglUtils_5(e,J,e.VERTEX_SHADER),Ie=webglUtils_5(e,Z,e.FRAGMENT_SHADER);h=webglUtils_2(e,[Se,Ie]),e.useProgram(h);var Ae=e.getUniformLocation(h,"u_resolutiondraw");e.uniform2f(Ae,x,w);var Re=e.getUniformLocation(h,"u_responses");e.uniform1i(Re,2);var Ne=webglUtils_5(e,j,e.VERTEX_SHADER),Ee=webglUtils_5(e,q,e.FRAGMENT_SHADER);u=webglUtils_2(e,[Ne,Ee]),e.useProgram(u);var Fe=e.getAttribLocation(u,"a_position");if(b=e.createBuffer(),e.bindBuffer(e.ARRAY_BUFFER,b),e.bufferData(e.ARRAY_BUFFER,le,e.STATIC_DRAW),e.enableVertexAttribArray(Fe),e.vertexAttribPointer(Fe,2,e.FLOAT,!1,0,0),y=e.getAttribLocation(u,"a_texCoord"),m=e.createBuffer(),e.bindBuffer(e.ARRAY_BUFFER,m),e.bufferData(e.ARRAY_BUFFER,fe,e.STATIC_DRAW),e.enableVertexAttribArray(y),e.vertexAttribPointer(y,2,e.FLOAT,!1,0,0),"lbp"in $||"sobel"in $){e.activeTexture(e.TEXTURE3);var Me=e.createTexture();e.bindTexture(e.TEXTURE_2D,Me),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n,i*f,0,e.RGBA,e.FLOAT,null),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST),B=e.createFramebuffer(),e.bindFramebuffer(e.FRAMEBUFFER,B),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,Me,0)}e.activeTexture(e.TEXTURE2),_=e.createTexture(),e.bindTexture(e.TEXTURE_2D,_),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n,i*f,0,e.RGBA,e.FLOAT,null),c=e.createFramebuffer(),e.bindFramebuffer(e.FRAMEBUFFER,c),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,_,0),e.viewport(0,0,n,i*f),d=e.createTexture(),v=e.createBuffer(),g=e.createBuffer(),p=e.createBuffer()}else alert("Your graphics card does not support floating point textures! :(")}else alert("filters used in svm must be of odd dimensions!");else alert("filter width and height must be same size!")},this.getRawResponses=function(t){$(t),e.useProgram(u),e.uniform1i(e.getUniformLocation(u,"u_patches"),1),e.uniform1i(e.getUniformLocation(u,"u_filters"),0);var r=e.getAttribLocation(u,"a_position");e.bindBuffer(e.ARRAY_BUFFER,b),e.enableVertexAttribArray(r),e.vertexAttribPointer(r,2,e.FLOAT,!1,0,0);var a=e.getAttribLocation(u,"a_texCoord");return e.bindBuffer(e.ARRAY_BUFFER,m),e.enableVertexAttribArray(a),e.vertexAttribPointer(a,2,e.FLOAT,!1,0,0),e.bindFramebuffer(e.FRAMEBUFFER,c),e.viewport(0,0,n,i*f),e.clearColor(0,0,0,1),e.clear(e.COLOR_BUFFER_BIT|e.DEPTH_BUFFER),e.drawArrays(e.TRIANGLES,0,6*I),te("raw")},this.getSobelResponses=function(t){if(K){$(t),e.useProgram(z);var r=e.getAttribLocation(z,"a_position");e.bindBuffer(e.ARRAY_BUFFER,W),e.enableVertexAttribArray(r),e.vertexAttribPointer(r,2,e.FLOAT,!1,0,0);var a=e.getAttribLocation(z,"a_texCoord");e.bindBuffer(e.ARRAY_BUFFER,V),e.enableVertexAttribArray(a),e.vertexAttribPointer(a,2,e.FLOAT,!1,0,0),e.bindFramebuffer(e.FRAMEBUFFER,B),e.viewport(0,0,n,i*f),e.clearColor(0,0,0,1),e.clear(e.COLOR_BUFFER_BIT|e.DEPTH_BUFFER),e.drawArrays(e.TRIANGLES,0,6*I),e.useProgram(u),e.uniform1i(e.getUniformLocation(u,"u_filters"),4),e.uniform1i(e.getUniformLocation(u,"u_patches"),3);var o=e.getAttribLocation(u,"a_position");e.bindBuffer(e.ARRAY_BUFFER,b),e.enableVertexAttribArray(o),e.vertexAttribPointer(o,2,e.FLOAT,!1,0,0);var s=e.getAttribLocation(u,"a_texCoord");return e.bindBuffer(e.ARRAY_BUFFER,m),e.enableVertexAttribArray(s),e.vertexAttribPointer(s,2,e.FLOAT,!1,0,0),e.bindFramebuffer(e.FRAMEBUFFER,c),e.viewport(0,0,n,i*f),e.clearColor(0,0,0,1),e.clear(e.COLOR_BUFFER_BIT|e.DEPTH_BUFFER),e.drawArrays(e.TRIANGLES,0,6*I),te("sobel")}},this.getLBPResponses=function(t){if(X){$(t),e.useProgram(M);var r=e.getAttribLocation(M,"a_position");e.bindBuffer(e.ARRAY_BUFFER,L),e.enableVertexAttribArray(r),e.vertexAttribPointer(r,2,e.FLOAT,!1,0,0);var a=e.getAttribLocation(M,"a_texCoord");e.bindBuffer(e.ARRAY_BUFFER,D),e.enableVertexAttribArray(a),e.vertexAttribPointer(a,2,e.FLOAT,!1,0,0),e.bindFramebuffer(e.FRAMEBUFFER,B),e.viewport(0,0,n,i*f),e.clearColor(0,0,0,1),e.clear(e.COLOR_BUFFER_BIT|e.DEPTH_BUFFER),e.drawArrays(e.TRIANGLES,0,6*I),e.useProgram(u),e.uniform1i(e.getUniformLocation(u,"u_filters"),5),e.uniform1i(e.getUniformLocation(u,"u_patches"),3);var o=e.getAttribLocation(u,"a_position");e.bindBuffer(e.ARRAY_BUFFER,b),e.enableVertexAttribArray(o),e.vertexAttribPointer(o,2,e.FLOAT,!1,0,0);var s=e.getAttribLocation(u,"a_texCoord");return e.bindBuffer(e.ARRAY_BUFFER,m),e.enableVertexAttribArray(s),e.vertexAttribPointer(s,2,e.FLOAT,!1,0,0),e.bindFramebuffer(e.FRAMEBUFFER,c),e.viewport(0,0,n,i*f),e.clearColor(0,0,0,1),e.clear(e.COLOR_BUFFER_BIT|e.DEPTH_BUFFER),e.drawArrays(e.TRIANGLES,0,6*I),te("lbp")}};var $=function(t){for(var r=0,a=0,s=0,l=0;l<I;l++)for(var u=0;u<i;u++)for(var h=0;h<n;h++)E[r=4*(N*l+(s=u*n+h))]=(a=4*l)<o?t[a][s]:0,E[r+1]=a+1<o?t[a+1][s]:0,E[r+2]=a+2<o?t[a+2][s]:0,E[r+3]=a+3<o?t[a+3][s]:0;e.activeTexture(e.TEXTURE1),e.bindTexture(e.TEXTURE_2D,d),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,A,R,0,e.RGBA,e.FLOAT,E),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST)},ee=function(t,n){for(var i=r*a,o=new Float32Array(i*f*4),s=0;s<f;s++)for(var l=0;l<a;l++)for(var u=0;u<r;u++)o[4*(i*s+l*r+u)]=4*s<t.length?t[4*s][l*r+u]:0,o[4*(i*s+l*r+u)+1]=4*s+1<t.length?t[4*s+1][l*r+u]:0,o[4*(i*s+l*r+u)+2]=4*s+2<t.length?t[4*s+2][l*r+u]:0,o[4*(i*s+l*r+u)+3]=4*s+3<t.length?t[4*s+3][l*r+u]:0;e.activeTexture(n);var h=e.createTexture();e.bindTexture(e.TEXTURE_2D,h),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,r,a*f,0,e.RGBA,e.FLOAT,o),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST)},te=function(t){e.useProgram(h),e.bindFramebuffer(e.FRAMEBUFFER,null),e.viewport(0,0,x,w),e.clearColor(0,0,0,1),e.clear(e.COLOR_BUFFER_BIT|e.DEPTH_BUFFER),e.bindBuffer(e.ARRAY_BUFFER,v),e.bufferData(e.ARRAY_BUFFER,C,e.STATIC_DRAW);var r=e.getAttribLocation(h,"a_position_draw");e.enableVertexAttribArray(r),e.vertexAttribPointer(r,2,e.FLOAT,!1,0,0),e.bindBuffer(e.ARRAY_BUFFER,g),e.bufferData(e.ARRAY_BUFFER,T,e.STATIC_DRAW);var a=e.getAttribLocation(h,"a_texCoord_draw");e.enableVertexAttribArray(a),e.vertexAttribPointer(a,2,e.FLOAT,!1,0,0),e.bindBuffer(e.ARRAY_BUFFER,p),e.bufferData(e.ARRAY_BUFFER,S,e.STATIC_DRAW);var n=e.getAttribLocation(h,"a_patchChoice_draw");e.enableVertexAttribArray(n),e.vertexAttribPointer(n,1,e.FLOAT,!1,0,0),e.drawArrays(e.TRIANGLES,0,6*o);var i=ne();i=ie(i),i=ae(i,o);for(var s=(i=re(i,F[t])).length,l=0;l<s;l++)i[l]=oe(i[l]);return i},re=function(e,t){for(var r,a=0;a<e.length;a++){r=Math.exp(t[a]);for(var n=0;n<e[a].length;n++)e[a][n]=1/(1+(1-e[a][n])/(e[a][n]*r))}return e},ae=function(e,t){for(var r=[],a=e.length,n=a/t,i=[],o=0;o<a;o++)o%n==0&&(0!=o&&r.push(i),i=[]),i.push(e[o]);return r.push(i),r},ne=function(){var r=new Uint8Array(4*t.width*t.height);return e.readPixels(0,0,t.width,t.height,e.RGBA,e.UNSIGNED_BYTE,r),r},ie=function(e){for(var t=[],r=e.length,a=0;a<r;a+=4)t[a/4>>0]=e[a]/4294967296+e[a+1]/16777216+e[a+2]/65536+e[a+3]/256;return t},oe=function(e){for(var t=e.length,r=0,a=1,n=0;n<t;n++)r=e[n]>r?e[n]:r,a=e[n]<a?e[n]:a;var i=r-a;if(0==i)e=e.map((function(){return 1}));else for(n=0;n<t;n++)e[n]=(e[n]-a)/i;return e}},mosseFilterResponses=function(){var e=[],t=[],r=0;this.init=function(t,a,n,i){for(var o=0;o<a;o++){var s={};s.width=n,s.height=i;for(var l=n*i,u=new Float64Array(l),h=new Float64Array(l),c=0;c<l;c++)u[c]=t[o][0][c],h[c]=t[o][1][c];s.real=u,s.imag=h,e[o]=new mosse.mosseFilter,e[o].load(s)}r=a},this.getResponses=function(n){for(var i=0;i<r;i++)t[i]=e[i].getResponse(n[i]),t[i]=a(t[i]);return t};var a=function(e){for(var t=e.length,r=0,a=1,n=0;n<t;n++)r=e[n]>r?e[n]:r,a=e[n]<a?e[n]:a;var i=r-a;if(0==i)console.log("a patchresponse was monotone, causing normalization to fail. Leaving it unchanged."),e=e.map((function(){return 1}));else for(n=0;n<t;n++)e[n]=(e[n]-a)/i;return e}},model_pca_20_svm=createCommonjsModule((function(e,t){var r;r={scoring:{size:[20,22],bias:-1.3970965781063711,coef:[-.019443206312618266,-.008462655136937398,-.0056439963412376806,-.0030632716896851417,.00505819387986131,.003867199969294663,.007378142189325282,.008408844556368901,.002107991667489747,.008802151798966045,.008463420285129255,.00913418810487556,.0021677708519095705,.005790582602295826,.01002704292430879,.010018015835686447,.011074574130386098,-.0006169578361774428,-.0060840083569450205,-.009448767880890366,-.012441209862965338,-.0038650406223106025,-.00031049888008515014,.003187872856386012,.007818302118092636,.010960251877128001,.012100913210202307,.012289318801648701,.012872315936395949,.0134197639066574,.012863004278393353,.012570470005854794,.0144288424245574,.01333943052400528,.013248442014867023,.012998181709015256,.008056198630310941,.0014670228332206666,-.011928206846124195,-.009790927665988413,-.019951337591485003,-.014601516863452837,-.013174779761633797,-.006051490369656748,-.0010407140556988824,.005465099755534548,.010448591237341475,.014061216421035866,.015918382919452134,.016360925963435087,.02175676516818845,.017301016139781272,.014195207612699818,.012452400847919372,.010454129710215853,.004088301926982683,-.0014194361456059026,-.003849859914217695,-.010769873280441659,-.011758097810167857,-.004692730262498565,-.002213411234938204,-.003980443406752217,-.012186682535867691,-.011886732829841436,-.008198434083715244,.0028353930104073055,.007082018952877583,.012238372017639833,.016348014515026394,.02098025121015047,.01731275318263429,.01186526524722499,.007237133559106634,.002878758237322798,-.007467321804467685,-.012293394385884527,-.014833951237083715,-.00838863948674114,-.001277206299448029,-.004323776226736641,-.0007999555489078964,-.009044693937783461,-.015715154398522533,-.01637435302016491,-.018048467332774626,-.012034275948581882,-.00724304399758809,.0005125240784108197,.01309194391257256,.01857040908507438,.013098815816852492,.0008591564011330168,-.0064555113363009954,-.014574145037132261,-.018221531408352937,-.01805986873321162,-.01666595999261013,-.016742981997331947,-.012862200876738698,-.03740877678221599,-.02683031532226969,-.03669286789535555,-.0347880739448974,-.0218850319679039,-.024484660949111742,-.028068870569776663,-.018631752402912666,.0003386250226657851,.01559117928255003,.021178968053305464,.015184030917486158,.002942909802540911,-.014374637994945122,-.025568052116952664,-.025717989966112242,-.023218559873459776,-.043064179414035626,-.04224466749057232,-.04056098939759206,-.029282249261991376,-.03709718041495928,-.05020937144504969,-.043175446636272506,-.038799263945784764,-.03791335031217714,-.024596940746816367,-.013391546719824746,.0026176056292311106,.0161600431397954,.021950494557360537,.018824694902420232,.006927363884398058,-.006709974776830696,-.018258612142465137,-.031150030943545643,-.030987027023796063,-.033628054995754796,-.04343705380087554,-.034534827602693656,-.0027688241949539527,-.004549275180497156,-.0029637241504820444,-.003406700423480626,-.005815867591608318,-.0050003474884839725,-.005218902767395339,-.003509430269612119,.004807586605047698,.015230282965296896,.017877023790346995,.015060123226282708,.006830114845501906,-.0007473542577977511,-.004712922425024908,-.002017247560106044,-.002873371575985725,-3216525956375969e-20,.005257631846099062,.0043528918718454875,.016945619656148794,.015930900625567117,.013751773645422991,.010130474427749569,.008048089829708472,.006653967439781698,.006832470034884443,.006957704411470728,.004039912948910134,.011715241103133139,.017439724961211336,.014273924944517397,.006148597549223434,.00645013298676054,.00641548242674101,.008797261748865885,.008537108473799983,.008728211283033556,.011782866421798245,.016746943082334282,.022118218282678175,.020835875059091086,.018311801034637344,.01589801188949137,.01783342296051293,.01556573659143182,.014048773907766661,.009241576620658817,.008151842723012729,.011230814598071655,.01256801671117759,.012111623945116202,.00983817412742883,.007361162802690301,.009554115733366411,.011727533965135649,.018125902932239795,.01946924820706354,.017398513191690286,.021144199041044975,.021132145666912093,.019499184169656004,.019592876054570843,.02028149781228069,.01745060509084696,.01415914728419608,.006229051144510064,.0038367364618697264,.007020631149365693,.009656116146710875,.011406409148288063,.007327377475605029,.0046725824974188255,.005253560299244529,.0001875842284737577,.008152362961246195,.012760089024104778,.021600004613459223,.02330330354276354,.023745752734397885,.018230549428489853,.02001338863792708,.0198421711017051,.018799688221643948,.010638029835974899,.00047497591850582786,-.007177935918128386,-.0013492660142831474,.0015382005340972228,.0026091901041104195,.0005404682454971559,-.0004966422184611876,-.0004620349686195485,-.005244022876608114,-.005215235448209645,-.010002649985436339,.0014386382744505852,.012845063185194877,.020827676960957435,.02373841052172394,.01571668571346539,.01638066669873605,.014902611437895159,.007373035779786103,.0019356373041797752,-.006199971232118993,-.009116541477138968,-.008810991502401562,-.014849548271736901,-.002088752298238026,.005214097048844173,.0010527273675475608,-.010321625138183299,-.016207678046552692,-.012439252596672909,-.013087206027715756,-.002796996928583211,.0023632017053047227,.011157492323637063,.018368837091378775,.009522424063657664,.010552085697652452,.006561107470035311,-.0015314856230301123,-.003249203820988987,-.003132985735142634,-.0009277374824954263,-.0020968871213430215,-.002752601764726735,.0009438837129042068,5916433694984531e-20,-.001725467988837404,-.0034420772687673035,-.004577360958590432,-.0025304599008137956,-.0003821556159806081,.0005707858453624459,.003132596619556824,.006023783141733366,.01158476991744758,.0016262584963572593,.0032288122743198387,.0012532877511827127,.0006274779428878639,.002376673070768022,.0028182202873619686,.0023771129569157626,-.0033402786707182365,-.004895422636916792,.0030746977489523515,.006264859067042066,.005023115930404464,.00044657525636142406,-.004827090498873711,-.004023720007629251,.002498818345759046,.005458039465951253,.007288031192023364,.0036009634090189563,.010569246292394684,-.0045836905885612515,.0005793643998226257,.00102991877614139,.0030014799750564766,.003667515928752245,.004471800582196911,.006892742110051421,.0039124352937196984,.007139428500837236,.010304447674314087,.012609007891982103,.008958913992549505,.008603791251174015,.005540849488829477,.004672179031230026,.0047921200350865495,.005881820100455876,.005604722572404298,.005411245001991173,.007326498514953648,-.0027341865318231302,-.002724700534666883,-.003490049841464953,-.007995715468728556,-.004076110506711122,-.002077804850112882,-.0028478822594267903,-.0039662744056797195,-.00261612035304613,.0009261126741127569,.001742688698674802,.0005518705877623288,-.001372339198004937,-.004599586886222826,-.004201475995629732,-.005472177851887195,-.002341678055566526,-.002544084181193918,-.007877754680715537,5340267621167532e-20,.004687346571394124,.0021887942815206605,.0013036188253628853,-.001369820467079858,-.015804998363084376,-.016267691007421516,-.018900936626522147,-.01765945032079295,-.011812605534381678,-.0034436129735933847,-.00234833217156215,-.005011146346425207,-.005092238624051651,-.015030789874247219,-.020198024497642013,-.021620507739756673,-.018586140603325793,-.018723839025246693,-.005572269849920948,.006448045830050279,.002682265163248593,.006001001756989062,.003998624466137994,.005081325942641908,-.005911407232368929,-.027745788024718613,-.029251292823436387,-.023066523347947315,-.017210413752997977,-.015963112589643183,-.021075188283476324,-.023666705491108494,-.020005598090990763,-.019062969033403668,-.01779211719234862,-.025322677372927888,-.0209712403520562,-.003436645553932082,.004335089683955427,.008455718362753438,-.006321337322179261,-.0012841346959162978,-.0012350140140767124,.004020967306281667,.009227486761414333,.0045264965008091395,.004131589813441068,.0007710844545262394,.001758081991837795,-.0011577021001876594,-.0036195352433658614,-.003731990866591472,-.001666179302724247,.0031110879435167255,.0014906582671670387,.004844301505441868,.005999082929420393,.008475097921929535,.005582716891229391,.0025145315352065756,-.004631923000619128,-.007618251428388232,-.0046593775053102,-.0031253513278243637,.007465336752811483,.010125926733440484,.009474705361680475,.003565757195444251,.005783369506083248,.003888133034710705,.0019960148005530504,.0015056031401225207,.0011132050024144288,.005487654792876848,.004736573364903342,.007210635062716214,.01007774641754751,.0038570243972044947,-.003118757327733293,8694979275512165e-20,-.02144138726654334,-.007210297606987767,-.007835905822355455,-.00594066743311885,-.00161002982250586,.005345006481645826,.007104949657808108,.01019687544512947,.005757787329337457,.007457080004758256,.006273105317508202,.00762420836735205,.006843693093305499,.007002142239943064,.008725084064059078,.00899957896818086,.0034314447644411355,-.001989159567628072,-.007896602411841893,-.010924672368545567]},path:{normal:[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],[15,16,17,18],[19,20,21,22],[23,63,24,64,25,65,26,66,23],[28,67,29,68,30,69,31,70,28],[34,35,36,42,37,43,38,39,40],[33,41,62],[44,45,46,47,48,49,50,51,52,53,54,55,44,56,57,58,50,59,60,61,44],27,32],vertices:[[0,1,23,0],[1,23,66,1],[1,2,66,1],[2,66,26,2],[2,26,35,2],[2,35,36,2],[2,36,3,2],[36,44,45,36],[3,4,44,3],[3,44,36,3],[4,44,55,4],[4,5,55,4],[5,55,54,5],[5,6,54,5],[6,53,54,6],[6,7,53,6],[7,8,53,7],[8,52,53,8],[8,9,52,8],[9,51,52,9],[9,10,51,9],[10,50,51,10],[10,11,50,10],[11,38,50,11],[11,12,38,11],[12,38,39,12],[12,31,39,12],[12,31,70,12],[12,13,70,12],[13,28,70,13],[13,14,28,13],[14,15,28,14],[15,28,67,15],[15,16,67,15],[16,67,29,16],[16,17,29,16],[17,68,29,17],[17,18,68,17],[18,68,30,18],[18,30,33,18],[30,40,69,30],[39,40,69,39],[39,31,69,39],[26,65,35,26],[34,35,65,34],[25,34,65,25],[22,25,33,22],[22,25,64,22],[21,22,64,21],[21,24,64,21],[20,21,24,20],[20,24,63,20],[19,20,63,19],[19,23,63,19],[19,23,0,19],[36,45,46,36],[36,42,46,36],[42,37,46,42],[37,46,47,37],[46,37,47,46],[37,47,48,37],[38,48,49,38],[37,43,48,37],[43,38,48,43],[38,49,50,38],[22,18,33,22],[40,41,30,40],[25,33,41,25],[33,41,30,33],[25,34,41,25],[41,40,62,41],[34,41,62,34],[34,35,62,34],[35,36,62,35],[36,42,62,36],[42,37,62,42],[37,43,62,37],[43,38,62,43],[38,39,62,38],[39,40,62,39],[44,45,61,44],[45,46,61,45],[46,47,61,46],[47,61,60,47],[47,59,60,47],[47,48,59,47],[48,49,59,48],[49,50,59,49],[50,51,58,50],[51,52,58,51],[52,57,58,52],[52,53,57,52],[53,54,57,53],[54,56,57,54],[54,55,56,54],[44,55,56,44],[23,63,27,23],[63,24,27,63],[24,64,27,24],[64,25,27,64],[25,65,27,25],[65,26,27,65],[26,66,27,26],[66,23,27,66],[28,67,32,28],[67,29,32,67],[29,68,32,29],[68,30,32,68],[30,69,32,30],[69,31,32,69],[31,70,32,31],[28,32,70,28]]},patchModel:{patchType:"SVM",bias:{raw:[-.964306520867,-1.03566919244,-.874989992149,-.916328634351,-.84503678968,-.844297101434,-.738523173234,-.808714131663,-.726541145855,-.843675312327,-.869822246614,-.917260263832,-.873711733476,-1.02671396751,-.98146088848,-.873014174242,-1.02044597636,-1.05803547484,-1.22124828051,-.881683950651,-1.03317042471,-1.05134750237,-1.24054665894,-1.16383797435,-1.06699587696,-1.23916761432,-1.18767751229,-1.12345203915,-1.13546600331,-1.08024044629,-1.24021266444,-1.16700091429,-1.11195019559,-.729540672833,-1.12391599663,-1.3005410545,-1.31472443469,-1.08705339489,-1.33623226644,-1.32469845456,-1.11491083141,-.762875763426,-1.12163285295,-1.09863140074,-1.29945157973,-1.27843894877,-1.00589316549,-.912330645934,-.962922353705,-1.25265133142,-1.29458347282,-1.15225762288,-1.00045652806,-.887710450269,-1.01416634829,-1.19650803217,-1.03872671577,-.86719070075,-1.008904644,-1.12379151191,-.950687461141,-1.12241433736,-.889224862634,-1.11762094609,-1.22489133968,-1.24702333407,-1.24517637612,-1.09819559472,-1.2104134101,-1.2217112657,-1.17731763127],sobel:[-.83934766225,-.62721260575,-.558840580329,-.699564404116,-.711116468654,-.800405507582,-.800598028802,-1.11367567263,-.800716892269,-.800194374505,-.719852733547,-.699662339749,-.583473094463,-.656586463686,-.82585939445,-.777588904797,-.772328358153,-.858083769483,-.819377339675,-.764279660704,-.799960100345,-.867018791717,-.823023270097,-.742640730114,-1.00863469391,-.717177931342,-.795282566734,-.882814402127,-.781504747967,-.996713581871,-.712255820555,-.811275119279,-.961002025204,-1.20550193802,-.862430611162,-.755762286162,-.788966054175,-.962730404866,-.785589168563,-.783168017095,-.891439881469,-1.08053052724,-.818953010952,-.823990582718,-.610975113014,-.706369334087,-.83607795072,-.86536700094,-.861887789379,-.706860677903,-.604669076545,-.638959509959,-.600205200156,-.601208908689,-.600265306283,-.666594192176,-.706937637112,-.806432197551,-.701267093778,-.697408794637,-.851407473703,-.696453841977,-1.00957402773,-.888081735997,-.883778307995,-.801014108655,-.802707601144,-.902478661063,-.867497240701,-.826525935114,-.828361611411],lbp:[-1.2775026474,-.801223028353,-.800091623644,-.800009851969,-.706840077597,-.771744181593,-.764756730848,-.668987349384,-.722732252285,-.669412768606,-.599571546235,-.799859783453,-.800085025062,-.800151690407,-.800453693963,-.770896454141,-.657297455691,-.599810309052,-.583090394926,-.952970571559,-.7654582373,-.799938792024,-.727414989246,-1.31723075305,-1.14076054405,-1.33781061842,-1.40029321489,-1.29006497698,-1.28367040173,-1.15693629435,-1.21680694398,-1.40041878805,-1.29047691479,-.928378863331,-.926795080454,-.921170431637,-.911039053934,-.843072087859,-.863356945439,-.975893430292,-.891645275689,-1.19772729821,-.994481526443,-.974741126221,-.796142704788,-.771301703397,-.911422811844,-.920856682866,-.865902542856,-.849751055127,-.806605497263,-1.05057278424,-1.21923288747,-1.3182935345,-1.30915908452,-.608079191461,-.939755202343,-1.10582615252,-1.02794612196,-.913831959238,-.874524304042,-.818753505759,-1.06509012802,-1.18557061801,-1.18891869024,-1.3461331468,-1.39693404573,-1.19088607628,-1.13830203374,-1.37361790282,-1.39128680085]},weights:{raw:[[-.00641929350098569,.029808749809618604,-.026783847528159686,-.022626445601288438,-.06769654478392964,-.3330801701058753,.028196651717386736,.18244853629138108,.015034328565348129,.06785273618154651,.06670760102804295,.04375774477293372,-.04943204693546423,.028764976579739795,-.023780221712776294,-.019043996534914023,-.1459760995456534,.07674812965123064,.10031267415956342,.022404267686006132,.03948930481064268,-.06917255594192799,.06445393061200727,-.03568078024136126,.029477578218046946,.013670321310075631,-.04008674643487946,-.16483725729324836,.060739714509717116,.1342127393151894,.02422269183439342,-.0231794397202719,-.023938362360883966,.0008056447282202492,-.020188203981491876,.035394353296754666,.0205064246422616,.02899344816440129,-.15875938903288647,.08638017630000529,.06961235394930866,-.005149628317893187,-.08621251663291626,-.11615256372599751,-.10171915312404266,.05044362294149464,-.010944856179506302,-.001993957790501183,-.08249632373737503,-.19805282268418445,.14503065839704138,.10472965706111854,-.05450410065575717,.058558989674775644,.02150968078817124,.01730546008925736,.05479743583896092,.08144986165856803,-.015926761159011912,-.0266458258524559,-.293957896046404,.26045433455042083,-.014750981039322313,.013565969503019568,-.05204369663142167,-.06850765601608066,.026714598423665525,.015030040573038209,-.0036695544345779346,.00383258647431671,-.029296334816602605,-.2168604461047042,.23218142341105868,-.00327038976446066,.0010937576464049442,.022865074396730092,-.0024710599676689565,.027138580199090406,-.01679885289520537,.05289654559111395,.006877363228005057,-.11534615443720748,-.20002833023471947,.26776687274414374,-.012990564848598472,.014507044952519324,-.028376794482919257,.00618216485194005,.0889219146062195,-.02926862382222637,.023549402065920405,.005011976866251447,-.10302390187256479,-.11265110616376864,.2362166399750627,-.023189771813893006,.0035722520614683423,-.03418213706662514,.05063039309457559,.010945258403000244,-.0026518946618147438,-.025155322122281942,.028530077090590744,-.13115618895267522,-.09325600139501289,.16420560614466395,-.010547265652414012,.03555013933252189,-.020259214475918323,.02246656772503501,.034170311222606,.11907609035635143,-.0015743444390024786,-.064020366156778,-.22057027736788293,-.07230997390748017,.3020467193547322,.023274069917025395,.063584377222265,.042978528220157006,.1184620505912367],[.1666751450718194,-.06105649607736628,.006921123396451054,.017084537322497012,-.2260817686595176,-.3734473319351409,.0799408682638239,.16478474110226196,.022649460741459224,.05289358066562716,.029321578215087005,-.06568683076912647,-.017175099236391184,.05342642508666981,.13196524692583625,-.03891597035567766,-.2214210563511815,.1701888918075543,.037968714516855254,.03243303857962143,.013114263754535838,-.004713976681790598,.01449378481921762,.016836144088159047,-.03538252197938949,.06459440929029997,-.1686419424136731,-.18183649747692435,.2201119970415321,.017097680726078424,.044439120834852616,-.06574464759714618,.1020917702829201,.012977428388828996,.01977596493630697,-.020715077614501087,.03753609961730282,.07318814378973455,-.2573933108232303,.17910460975300116,-.012201308491933793,-.012488637353357972,-.027937934041822002,.09083951985921551,.05606169228127485,-.02959213495132615,.08379737554962405,.02690901960800999,.02844725619429324,-.2672429524643786,.17601512398468455,.05747403764496381,-.02175445157089756,-.016094120395692652,.034960605520111765,-.06613609379939898,-.08682227581682511,.021267627399376515,.02491383906151458,.08335124804544296,-.2123391815448888,.14528347788592133,.05210322011013152,.00605269353127303,.004105795692207578,.07374252723173551,-.06315098228507052,.07170651328073925,.05027696784566078,.05947386035797521,.04109277684503734,-.23158549693983016,.03982435330236364,.03516809644185254,-.03932662577032886,-.04671341171222192,-.029438846368243326,.03037322262500354,.010642421674176408,.03544309823317393,-.06489736931049253,-.032863903246691833,-.15394029962311223,.011777952930909712,.17418487412288675,-.05475758571404693,.04792406601368864,.05434649000577907,-.0033548564463232317,.023589666170022047,-.024599944457705122,.06065500572988429,.13656620662733865,-.09366338113990888,-.04744440772227543,.06287271944447118,-.02272823079189625,-.02726612072929817,.1294937855467878,-.016064969466370635,-.029023009596784263,-.05570334330637803,-.0840107251201864,.06758267309536246,-.021201313484205356,-.12021659219227125,.09485936016857895,-.023785622470961085,-.031181057005649077,-.004546101199478264,-.0009687804195086802,.07543593802259964,.010017282477206416,.06897995798959812,.07714796080101254,.01605850787004124,-.19045442262141093,-.010877182945437318,.12221413195895285,-.0351155412356487,.06195748510363465],[.0011017024675275405,-.10082831174460544,8594795150784762e-20,-.004422049478273848,-.09673952628000249,-.13240523784777558,.13984373949584222,-.00313787541686765,.06839962137118966,.041644858137291046,.1246603542346705,.05746879604248942,.07361120898568357,-.010863604812754085,.004840634820014525,.01639620645886397,-.021671035744779854,.044733205419186794,.06792156583497788,-.01587229208239721,-.055943430884781355,.01970238776563854,.01861633041967882,-.005658956684688951,.03403751236246519,.03441147508211587,-.10871009154186473,-.08095953984145883,.0674276232825569,-.019879897471494754,-.01366520816807866,.035789793103949114,.06623139637196183,-.04591799977774408,-.00420191665726459,.021126802087625032,.040187642280355346,-.03666439487226949,-.030092902147062638,.008811740476730875,.0024160167750989087,-.03859253346469508,-.031144322454676222,.03504205275969649,-.018244427580942767,.0189160005658235,.0008242036653817869,.09247456507290092,.0732971691285424,-.024311595897201867,-.0027452015976400512,.06792073218745394,.0011865809331642052,-.02829414542225548,.04281208602061819,-.022452858987935732,.02261009594352785,-.028250777066103218,.04326259106400333,.0925323906952393,-.15324339008135635,.05021126046953936,.013929622339187875,-.0008978138468668517,-.06366120100595833,.004848552355720334,.0785800941235526,.02575794561866239,-.032352350433290294,.028485056134963452,.02362139569139944,-.2117470445371154,.10461485137190293,.047597936964786855,-.013272615927845698,-.060311993172769994,.02193128143972145,-.05466583518135374,.02458965449621621,-.05314264114611795,.04992839103128853,-.024452908798012384,-.13669941087219498,.013882012829174228,.1070905994912941,-.03027728857497334,.045488870557272854,.021158864845617006,.004550470470934022,.05214959922096879,-.03112491408752256,-.025892240716889583,.051505846702740755,-.15850714978032798,-.07743410057907743,.1444219758540272,.025520694414871425,-.013359740227537047,-.032691479720369884,-.05076075577061953,.006726712466217588,.053582968166709294,-.0660913290710981,.028319458261919814,-.023395468585636847,-.12189855936069849,.1264108145125255,.04107040225763695,-.038345327797452616,-.005103783589953988,.01115753611454251,-.025558001982792473,-.015803280214702852,-.014570255682172791,.058581784915518444,.048613151833675504,-.2965749163672431,-.06764565935277526,.13108882918808282,.05456992979648274,.06252397190390564],[-.025232963701757677,.022348786079614824,-.07225884031672042,-.18573054835716424,.06115371568490616,.16052559660045873,.03573522287613719,.03264581953820091,.04997287054493556,-.017744962590501873,.12327939069776968,-.0020676327098313324,.01746290767019347,.06278946307849151,-.11704698186369022,-.06525458717047697,.09452513318995885,.044950125896693824,-.028763679134251888,-.0075590072060936625,-.018042703509056443,-.042766926478698966,.006472665330244001,-.02449852894821654,.015095977860562756,.011479770091646538,-.22511989496614118,.1374997596027168,.0421743831469316,-.0009797392756477757,.005345865322224516,.006695870860846068,.05293878324449834,.02866288570467257,.008378826462652478,.00039142479042951484,.05893591963645446,-.20560278009245425,.07950278129895037,.10223896059315847,-.04113799190793238,.02733007338967257,-.010752121223537789,-.0022306851331074934,-.007924201477948527,-.008279495647935058,-.03208506233715542,.08612259920756052,-.12113263279497796,-.12790727680874353,.13902963426409898,.008853966604374208,-.035846424270882665,.004579108178465921,-.043586755702451435,-.02644030622989594,.012179387770686292,.07404187243630776,.01288390088442623,.0631378025037042,-.3001337956577562,.19884603307627666,.06381579707055893,.049734977180621504,-.059941845556548135,.06608231683752042,.018259553212376337,.017779633684347013,-.03063237250430595,-.05294008910372007,.12680914791412304,-.23860332882902754,-.07293743785631161,.12736775458078498,.0635659183412351,-.05117287506106216,.009779050114535295,-.004340704267483765,-.016155615544080057,-.009192392330326163,.050665742508667524,.006098472165673663,.017307742609543222,-.20367784360158347,.12046177714866035,.012913438963355811,-.009205184571941166,.03536275630143247,.030747952698754938,-.006848330425988862,.060769663776634064,-.024830671275067155,.03220482558814165,.08851298653495965,-.20132344254131007,.002548413815897023,.140122587765108,.01961859385120905,.030770253761956967,-.044844034190508676,.010829012004067717,-.01860457458041309,.004870118723122603,-.05383562252519328,.06565573244826663,-.08783449445825132,-.10019900548070505,.019098697970463,.032625675487211764,.013786208177970036,.01459298085632256,-.02245319975032244,.023627062323695644,.04456787584724979,.051820387537472895,.05896083203079447,.011808887606369993,-.24302913455395336,-.10331035325930389,.04312222197544385,.04478411411677549],[-.11131891807709643,-.14268474406555598,-.11319512819486531,.16616863430344642,.21669051126658584,.14580497808064175,.015659490036423723,.08129976577263026,-.024809345136602795,.04021044222676087,.1147788050575636,.018929993321792474,-.08089736615545767,-.05933670525564233,-.10482248256522532,.10573530196882865,.0631408717985007,.059506144939088096,-.10685781396759031,.03408209651191432,-.04492878624667285,-.023391401657096106,-.021033602025377948,.011729129297605986,-.12518841502550898,-.24524516894120252,.07503634089773896,.16915003534917084,-.01104335485702547,.01869801655833349,.008919381060601264,-.009574206883586497,.0749513760802387,.052515621176523086,.0007625567461485294,.14447253116659836,-.16116755572117158,-.2943535080561774,.21097730948472182,.1532239111676963,-.031396770107823796,-.07319949962206841,-.0005813891955292749,.03837364808790836,.07166124298300858,-.02522805699198942,.09435561905590027,-.005506626027510814,-.31676942832713584,-.17017797276453395,.20181171910078166,.03895103544935513,.020699071667054786,.007352495909389606,.01925107008541585,.02771336549368973,.022207504221021385,.017801567429584678,.1612676210022263,-.00979265416273932,-.39692367057618455,-.016344797834207933,.08433496504920006,.12332269298102864,.04685154450642956,.002636755382792469,-.01561848475266879,-.009436542015435909,-.02615768632490699,.09309181623129058,.015836673962272785,-.03610417595442539,-.2519463776351575,.06651888922706571,.08876872373304114,-.054177349140414666,.11363104423136496,-.07433609691566458,.026411919672457762,-.0069934713872144005,-.011837151565905812,.20495766925622727,.04065257446984291,-.1095170141673022,-.19525613842871348,-.026690291071139877,.025635090198280266,.0841424871807917,.08156051741344665,.03389958127434067,-.04177793659445489,-.009501675246059646,.014146738677450046,-.008345664039773965,.06615605391728069,-.13607639700339172,-.07520007682223616,-.0994873515069512,.097954762781141,-.06803133834165287,-.028816943621434,.06211656943949179,-.056509543958784436,-.01645775253059964,.07817870576774648,-.011547980097176877,.054587296091729326,-.01756300038547995,-.07269143851776608,-.03485607595050838,.05857371177073828,-.0602890204905569,-.012302959633281041,.05215547808996612,.07522769209224177,.05372691554672293,.0021832390619121317,-.002344923538649027,.06900194647824753,-.05514982572329348,-.1813815383750435],[-.23224131638764922,.07903469662446332,.2067918064109477,.17116975450055194,.06039325579902376,.07007210980485583,-.06190466024121998,.10747334033766655,.01433196398767149,-.03256186482121042,.09613665022049653,-.11702112011574746,-.1864804302468564,-.07263583233067163,.12519462388086205,.07088720261632298,-.03271329648281499,-.014132673438533166,.0038161968326955314,.06596606828134262,.02045739986512317,.05133413578390264,-.001116824372617925,-.08650385257532717,-.1785625235356172,-.024882107163551152,.17291742960211148,.07663613794861675,.09577626737118992,-.07664408368156322,-.054109190285893664,-.037610346895478264,.10646735039870757,.005106033165145046,.05630446848381131,-.02815452123015502,-.3172866921301339,-.058091370831929535,.11556013989779028,.06572349088657835,.030550971916660702,.04174710309339162,-.06958785825069148,.09246126396658998,.05229901039500466,-.010485795012401211,.011062345730906517,-.04525324732355647,-.23598087205664336,-.07089255746370644,.10680685304416297,.11990972610746585,-.020183291742381704,.0005727301827296999,.09656302661129444,.08439413274340078,.0061097222161349135,.052438465571679,.012127916344441741,-.0257064038739874,-.3742573188077962,-.1276874097835226,.057044219322174475,.11342314858398521,.08990901529141647,.08875860180043092,-.017367003795174522,.05857393693614622,.0024241782448618243,.08109965832409753,.07161451991128079,-.01563620268743912,-.21764039015095288,-.20280985898846876,-.10017064401745751,.07648124633085683,.07207247607484658,.07483195051351595,-.07166912711289458,.0033343139896645224,-.020106231127842517,.12484552374687989,.088741504624313,.01253935252290507,-.08037165138919668,-.20667576524399633,-.04282468905818822,-.041960654306219244,-.01131931097222521,.008735105318849586,-.00734658047955114,-.014035434722362766,.06098093434751581,.004495721964022023,.06013604234048665,.12862638541641686,-.04340711738426402,-.17199184431209702,-.12411968467220214,-.0678783666252617,-.01454311580267198,.01330421418710441,.0866161567100902,-.05086944418717247,.05903651637207552,-.03008247843263918,-.03915069183312177,-.013410175971461852,.08202413261695805,-.18429763963038856,.04381998829312517,.031005210064727645,.010111390046324928,-.0064173858317888854,.024542598321298154,.003326533057552636,.04021021589655824,.10549988851835322,.06646601329742752,.049201722388277136,-.0939321536148138],[-.12203267064152819,-.036980237066742305,.12682937376396922,.10063288694137082,.08215419826803332,.031376504219097656,.0761930646076317,.02964354031201931,.06719515773118173,.014606114158926237,.21693479369516466,-.09199099991065045,-.11495742760629782,-.05785437441465155,.02698330863563836,.05370374419050639,-.0273941556868533,.06205078188675167,-.014064800119151746,-.030464390345027792,.0502232298623065,.0695221694583664,-.04791508006637751,-.07631273807225611,-.10542836060878844,-.06996306274716022,.06388780976819086,.047703502973526726,.04962563211466377,7.937110578365436e-7,.06693802016800053,.0223312679300762,-.013204459193458515,-.051208345754393744,.017251686675046174,-.16855866147278023,-.08171836268720581,-.051493312235764005,.044258122147233556,.07986075057146982,.04025690490590825,.06116790096664046,-.04445412975620007,.07605855153730079,.02448453321308726,.0237388901616193,.022211385002816955,-.03909556756500325,-.26993986747191345,-.13809797457481326,.10638240754104332,.07416453466566666,.1361114507013107,.08862011177027157,.023942633928693842,.05945503505976131,.018810531601996444,.1333285511666898,.019080517712641562,.04095366870170747,-.19369280785037196,-.33096708018422843,-.3153716399945978,-.051011822183710684,.10153083596477822,.10646364340542763,.014630901225096263,-.0037911814153038514,-.031174186442994762,.12574438878630761,.08274660855089384,.13910378358879222,.015618015934354273,-.09701003161915218,-.25736850771835984,-.23890047875932624,-.3920141608141943,.014631649728319138,-.004957651679090035,.03224914217266181,.01990648283333149,.009003071269804548,.026111426002791746,.06289786783199448,.1463890162014621,.10175160175705127,-.008366542972654184,-.22694639696488025,.016644643336980125,.010640427487024477,-.033902595425888096,-.05887030600117281,.022391466116807472,.010861548153134476,.028661031141596176,-.00897323660083852,.05200412153695907,.030892998140363448,-.06629876851654298,-.045462972141964375,-.03653407501604951,.05825510998520326,-.09030077093272416,.08752918060369558,-.048367137056150394,-.02186992064128039,-.061934612997809474,.02284265461094593,.0870990153167514,-.038225524845750966,.042582590594014876,.04640395416303122,.0380440573383962,.013279662526628024,-.0244758709967295,.04264842707545879,.021205045270171127,.02354074407698388,-.007329919947495406,.00907767220495534,.07270438554369765],[.07613532294423606,.07592874232876966,.10248245044059716,.12142390869553117,.061858857352832766,.025464191080837695,.048676474818140573,.030285797856824295,.11128631305542007,.1945532737788299,.11002956054185524,.07460681426549293,.013898060531860643,-.012868505144617515,.03811974665790328,.007148462430406344,-.03738969490673246,.027891841345889026,-.004018077277820727,.05119166474350638,-.05141505993337936,-.06594790510444799,-.07721628063745908,.07879227456062733,-.014940451970767085,-.04242817117298531,-.02277362203587799,.009552105313378119,.0892249730187428,.0026288446459537393,.02779528927690774,-.011245376233293055,.00277897025591206,-.08464626341108711,.1085122984586782,.06478748838514646,.07177453301553025,.101565447736036,.13538683839366522,.022702180797543253,.08138250439122006,.10182220145207069,.1341459901576617,-.06725473581240397,-.25199554524555356,-.131377327178401,-.16365674311148973,-.018740825554245097,-.06288280746917164,-.022204060979254633,-.07230826470434813,-.06002150860570432,-.15902262422755242,-.2376226356188884,-.27876101597724223,-.040263587475045666,-.08015604055016233,-.054338910081926026,-.19775317420562621,-.28232046584273385,-.23353688528539848,-.2887146857983052,-.14101654202670044,-.1025403206842016,-.09107919131866912,-7602192051990307e-20,.08433377565121718,.02577687564589032,.027110928294315155,.12586947033203832,.1709457201826477,.12107947589739056,.23253719852668123,.02250844292994217,.10869072456768857,.1033561446413986,-.004469702938813581,-.01904362338576933,-.038539230833867344,.05962320530191288,-.02837250486063366,-.029359754569747713,.0008751651167976204,-.06591807220345962,-.06935624266520128,.023580387356890727,.021727207917053997,.0395706064528708,-.029876932333496215,.03870634021722194,.054322914583595866,-.04361035086891106,-.014678116576553712,-.03939690057342893,.028347288864635375,.13841137622066219,-.09066089747647116,.036895873473620874,-.03722916214694882,-.009894930351075984,-.0452390438366378,-.027744940547884053,.04194009544497118,.01055398542008456,-.12123151432640322,-.008749343949550598,-.022343273408815235,-.036722825249752025,-.07423504949617987,.13502817700337175,.046152107059304906,-.0008971308328727529,.05590475965294445,.07280055024298283,-.014134363015890009,.047445934632441455,.08585904743319968,.05507048598685206,.022278702781022022,.06417229339280382,-.07076569906072622],[.11799509004720471,.07821040962176024,.1281616951498617,-.020597034003169923,.014336534229225872,.11621450358247642,.08905643393668677,.05443846379640299,.040501447910613234,.07708874490871268,-.1658906017777812,.09832791591756529,-.02810333763323619,-.02658838870983915,.02405475335525964,.07281433646587437,-.012893740245567331,.08129422425099614,-.01963885112438346,-.05946135547166009,-.07071909172253173,-.1275944247901823,.02999311492449748,.001969744529841,.026356695570939392,.07745617703691782,-.006579905739970027,.034984205817837566,-.011141116727752032,.03720594351235931,-.07804833218835576,-.04293728091952059,-.127535289131475,.02845913050306173,-.02514121956008758,.03211084759065019,.04295176152957764,.11294381552310545,.02004775184404517,.05151590030912234,-.235725744910211,-.0723083822615434,-.019056219840507427,.003032114250306528,.09697112519659604,.07580971830316449,.1171582304881571,.10956914475118423,-.002478119754026231,-.06415838742812259,-.26848100360863303,-.05975449894120426,.061910526180559394,-.021664296531182625,.0861100259271432,.05323351302011188,.1717544124205841,.028047054519386466,-.08590298082104386,-.3361141075282763,-.2814411422220313,-.008033032578359078,.10513880861366756,-.016382627034826625,.06894681074416012,.03299796127286976,-.2575094211066173,-.14536580095096197,-.35542177348703685,-.31543540234741724,-.015389034147835323,.25815532917511536,.08960742973783267,.024873996600298487,.06881003961835548,.03489017570215826,.009440239145994206,-.3317042945602514,-.08402150713002367,.050999687890954576,.11407450625706317,.12380980581221895,.0615416857398525,.02453750806553323,-.05141269110053853,-.03796914500894999,-.08315921986961804,.06097402386871387,-.06968263999399987,.013136896914555662,.05433543614442471,.08637574960433275,.02576801827516423,-.03028474620608318,.004674564793187563,.014048250096520054,.0039043180440717223,-.013243528792716869,-.010234982174629259,-.03434871862675892,.08930669941750319,.023672596441143168,-.07406388091432402,-.03941626691223293,-.051467563793051355,.006651409176777756,-.00560210732348132,.037530284479276185,.022917723699947115,-.028514057580272867,.047001295013920974,.011663892903344658,.03157742912810527,.03674321708145567,.00016789538350847621,-.032412649376776737,.06117671525999013,-.014965782274795558,.027963582472569012,.04959601543222854,.01749369590499883],[.09511182747695554,-.06159820603503502,-.027848508902761582,.1628509117750848,.011485186070697095,.08822763141834358,.03347684156076733,.21311907036597436,.12562992528833603,.005658534272657195,-.1966929150915634,.12201627871631479,.0650038757477849,-.06463757847623203,.007601127043420197,-.014992832356838792,-.01371412582796748,.06518983519203567,.06050177288708594,-.007320488021864191,-.1583739057936029,-.11374672007199678,-.011219765388015224,-.037241451866588046,-.003534620740694161,.01418414744662963,-.018804529282363244,.0022002993190636394,.08630412389588042,.050730302973426275,-.19347784099407583,-.024336852899701306,-.022104084039211852,.11856239536141804,-.0040746848315117296,-.02163636804096198,.032834767679033816,.0800344731484097,.18177097586869298,.04019529190670533,-.2702679651504349,-.046764731646186594,.008852085437052834,-.009539810787766306,.07383822425025457,.0022341455913789526,.08094684201408663,.06491115331910723,.06885287564917604,.05292714860543306,-.410107120913947,-.0033883005740702465,-.07662046460696448,.02802671910476224,.076992030561193,.13499559219777985,.0010835539682531592,-.009452155890097347,.1189809113716918,-.10886395857171732,-.3183906210009257,-.07953657581636578,.08803540022726711,-.01994821470243107,.05503118151079713,.01735589174740365,.11548823748390151,.04731880261354447,.0035588736908875526,-.19090242902977161,-.16923224535916537,-.10343904409632039,.11611444215342794,.030139907826970232,.09203792773944927,-.0005281111654557753,-.0198996720404131,.11041139740159193,-.11354626622456132,-.13266289678027732,-.1682771948622956,-.03667619558596544,.07817736675850409,.06504914695853675,.06126589575010016,-.045421314698528795,.038673845042327876,.026641279640920345,-.10482185618696178,-.10700981328292422,-.06525874643904839,.10279723823243007,.025140628570866255,.07899525265930846,.05558624922961755,-.0282367233747758,-.0025877363105662674,.03312745537775298,-.028093023704546808,-.19114920828266518,-.0843724450404052,.03275218120073499,.04457342148390127,.07856958017781845,-.07616797315805927,-.011917584687660975,.03886281331675661,-.044585012472417355,-.041774790744191534,.06654393572162462,-.20856381862218065,.1683937797503331,.028096195344995425,.02974664466893967,-.028107306876337092,.040206628818593826,-.005022332794664606,.06168318096730564,.11123093181504413,.0025290457228258033,-.02120297614281566],[.09043563503585106,-.04229707907295113,.07943640034074831,.03842552427230031,.018479439174666504,.1518877271211962,.24325152032590197,.1180155679366982,-.0801567958141105,-.21178228375212024,-.1321898119943531,.01847519834858842,.09201844332333244,-.050722043815425485,-.06837456067208372,-.01537540593449041,.031479819423878536,.08735840730776676,-.06835423776229127,-.1466417272423975,-.00015826019866193447,.01568223599310714,.05170912892782582,.008747090174751185,-.08297559742427506,.06105929068549017,.055712846563533064,.11256404620171304,.12009580657518015,-.2412015915622755,-.014823455006292133,-.021320510868446968,-.006482678969039604,.011517249723710349,-.002937897815077306,-.03651189081303338,.040278214553535516,.0514440140450457,.17560605653482164,-.1655984657580802,-.17723807338794942,.06664090603454581,.02544398237775264,.01188465218452904,.0289513499031155,-.062269615752451546,.008151008187768163,.07413923996606689,.15951734948521942,-.023426085135995006,-.3978217497642247,-.10908536196954385,.198107190750192,-.03969354994135716,.07471723651890819,.06765746234109257,.0023721387419759488,.05010623382157028,.11669499140233328,.10445484529679147,-.18066291770941748,-.13732855962266888,.12305831238941373,.037248666546407946,.04039521027170892,-.013511371889906032,-.012463530395042041,-.011253154667815578,.05726371459440446,.06412373474273139,-.18290915356692017,-.2869372990564419,.16662290255364237,.052133698720201724,-.03451997264628831,-.0020692840094172008,.06741251393032432,.06937855150391262,.01734148416121529,.11249597819545545,-.12114447333731211,-.16394194327719122,.04261853427181071,.00824423904044877,.03221154330120412,.0013431370481797045,.05979357567988297,-.04185352167064698,.16141583247142297,.025290287768054538,-.09277195016263434,-.2215981176835778,-.017539993864623925,.04468468836207484,.07652630029505583,.056281907644482626,-.03832256952568285,-.024136451744282625,-.06372718452176626,.1019524390722753,-.11143716683774609,-.13769182869235727,.05085564633400147,.0118757042451966,.07578815217910018,-.07629006882364105,-.0814113136736546,.07294179897639616,.06876848468158583,-.033997564379039544,-.16790192551365551,-.13094257760158287,.030092743795544198,-.020741964391416696,.00030251423268644675,.0886427375796117,.052492146460725884,.08700777751717687,.024692689071073824,-.11263451468661019,.07566395763319325],[.10661930608242243,-.024041018022432886,.023732105856747315,.012547179712792927,.06620015268771856,.07288083873685963,.141959809755441,-.1884630302757157,-.10001494467301893,-.03039936470744807,.006508432539056433,.03539598055038491,-.016756476798346576,.0399634135437803,-.03292076128242971,-.005227900049309453,.1455513515779632,-.045218123785947764,-.15712918904629083,.019388410485656385,.06907342606271524,-.0298852890481313,-.013668142441217765,.03550729334105425,-.0339053532299763,-.06639806441685941,.06936725822695652,.09906846780184428,-.1617694660299022,-.04974368531705499,.04941732724894762,.11584329961758463,-.009976533533724782,-.005894615309377543,.024852267791530103,-.022953834411929233,.03536477637026525,.07091098453159729,.16506591436250806,-.20260600332750361,.004082260035043597,-.020994635237100143,-.01738045300747007,-.0681694778746119,-.016583306399167802,.01633535683844098,.017414685172079863,-.06550954477620465,.17533271724699692,-.07779762905043745,-.16426179882147435,.06799082437012988,.015164258343913037,.007850917795739223,.023952622885856464,-.022724061899056167,.006468972562307412,-.004686262441803951,.023956271557396727,.17796984486026562,-.14583559757339518,-.06427923090509419,.007285889169011656,.10176352460866914,-.05375838816707103,.031829796138471395,-.006931087788905416,.011744209650540821,-.022880287482633932,.06170435943557881,.07377432172162823,-.20953311948246117,.0228569133898398,.05472937737865659,-.019111901041743054,-.03021023886313212,.003031327469750489,.015874354673913807,-.006452292082758354,-.029379891777454897,.17844565039391092,-.07110452708435416,-.12962834428996683,.07450443681000475,.028226182768918535,.028593401178049288,-.01959147691077351,.02627469148789329,.04932937679184403,-.002525771203732069,.01518419078458555,.07937762244019535,-.19505648192438618,-.03458185384929216,.03928442530245542,-.06096185307071548,.03210462198422711,.001008720871932746,-.0029091919090189974,.001344468156507149,.005023713003350715,.10378546719878355,.022547607122337512,-.11488746863511244,-.022120532171003134,.04365532771842716,.006775696120825271,.025228229845891133,-.019273769704258592,.021906840282590274,.07611102221477332,.017667767612816868,-.01550884847076102,-.23798198014252242,-.10029292828221784,.06896242747818639,-.00958082155355134,.07180806987187889,.009692454495817494,.008957116977043107,-.008277462473503971],[.1471154036752462,.04870375978312018,.03828157145025493,.07333208261344225,.09260331466273668,-.0694062794405356,-.18039118017356837,.03046188792697367,-.07652780153927276,-.028459829410684742,.0039885048607745666,.09153106699799837,-.09704741860389973,-.021416261913473872,.022880799394652915,.11630110494121575,-.1109134904433731,.005260123748833667,-.0013446292981080382,.019772833215237998,-.01068052654249596,.08790171771830792,-.006232776333750578,-.022953022264458,-.011871195380737234,.005762706715319532,.09058996390258162,-.0325911561965106,-.028720174599054245,.018764947431906404,.03419839806504654,.09248312592865889,-.03903575783794387,.04606097164647015,-.031919717673297834,.0359756576146678,-.021429646453529204,.08731212903003346,-.10752464144662353,.00152080949832821,.010463878802001378,.01772082101834206,-.05437049272297912,-.04194883289533528,.025352619756942793,-.033214062148915535,-.021243138027047942,-.0008823990590214881,.12798500264531565,-.14587827997097436,.004915455687989331,.1154467113814605,.02439416473282259,.02683709160566132,-.007026041908772006,-.020081222854955234,.023704875110253917,.02295042461409627,-.05338528177481898,.0831341083498527,-.19190518676745988,.028255792687062964,.051622701485504116,.026882922200025916,.008377616973125737,-.005670991108533512,-.015187911842930016,-.052821700067161415,.00390644247145519,.005281151829406819,.10527786608533028,-.15535307659177727,.012627301510895916,.03327206086519928,-.016015509511655836,.04732339385165741,.02967603368046102,.06267237670914183,.020359709219910163,-.05632841301488273,.0620322629350282,.13944415500977614,-.1628837619018858,-.06273619582859068,.008907350651879399,-.0034474543722587785,-.01618817237363423,-.05835778037156301,-.038566049097796054,-.007742247801509866,-.04525485397522294,.13886799518652831,.08480154460363377,-.19493114682149953,.06796205402333232,-.03966925365228234,-.042999032230963616,.05692279356728236,.021310369562604587,.02365210042359392,.005385039849544027,-.03187215578986556,.12124236413591115,-.0967183304019613,-.09464086971309904,.0500533099786503,-.04109568378358891,.06766934251303211,-.013020222193800675,-.017936312558531065,.03088458798641326,.01794055692503145,.1231815166762023,.08261243140085138,-.19694230673329102,-.08458714194399125,-.003658775266082319,.04619076988589604,-.015214414660308498,-.037796750375678645,-.037660099586230414],[.028789729303638767,.024918790237205758,.04618374488536684,.11406524547975325,.12089401164677463,-.33167640134016596,-.3019921406198615,.07550502772956444,.015980848677207844,-.03024616910429527,.07077779981499352,.0217051545082647,-.014784416452853898,-.09279738694628449,.07338712132904485,.21513353226194643,-.13135516496728,-.041009990688083156,.0027232866435380892,.10443594986053156,.01923470231389363,.02666839309457343,.07745434217814501,.03770465398827287,.02834589176207839,-.009978163134861707,.1639247590037968,-.12998366709084602,-.16954434602341487,.044201694038575996,.022535303634435802,-.08057008558198017,.02832273196113292,.030852307058754604,-.05728126290696384,-.03064229252466788,.027439907981706396,.19418932496000404,-.21394127367168303,-.10822827097568048,.07877628685823149,-.05472648405401626,-.0018935512700742757,.02755405503595884,.12724208320232813,-.05340181008736572,.03257936953505483,-.005366876389614403,.14925943338428535,-.15555203727220704,.007001480168193544,.04759665424917628,.1576250635167004,-.0017752319114590492,-.07847953723896937,.0473805967808605,-.05401735337902787,-.01080960218579173,.031689669706736825,.23862777088364684,-.17967729863408127,-.0025414623844454364,-.004492274547398853,-.033450167802196534,.07325147963052886,-.0025312860424687696,.04727033427370148,-.018763729160332636,-.08570708165879015,.03745633447412122,.24243173611028618,-.2540866535861975,.04329414106499292,.04014814340000768,.013087435326473265,-.01985332459618848,-.02322582618398012,.03017700297747758,.030922203127136713,-.04095285821911897,-.005933061506276691,.059823934711038376,-.22840162828405616,.05383586489573299,.039215482051845246,-.019168216146914205,.036601452638986925,.007121698155200182,.005519491684324002,.017118320543367746,-.010329430802956993,.022891605120926584,.10730721508339976,-.08107168941575164,-.05273116873786587,.020938629685354523,.027472939746776587,.008732138872189002,-.0119734318888386,.029541130454324258,.02543753191678985,-.0032417425087455515,.09216900132169707,-.06348471226183452,-.08486420181923614,-.005545540001265031,.047829727088973206,-.03872852314389602,.02165612388923753,-.04840402618833343,.0811061440872816,-.050252564268459365,.06253850150864079,.050008949642628864,-.06683406976276449,-.22862797363149073,.13880779851328123,.0819568934706139,-.03653428459406832,-.0197239565455885,.07425296558847368],[.08097454476787322,.05652987009549951,.0325475746002,.10152684966806072,.0464353057497012,-.21467483931903908,-.20894615765238955,-.014892577371206056,.020894015871834565,-.0067217043883879,.03525206208069309,-.0060354856627079095,-.027461302429899262,.010095861403046108,.05459236563694944,.16828861382181534,-.17463234553413226,.021867928311703422,-.04139614121234397,.019379712333095322,.012675043495296218,-.02769514972624032,-.04124356774303546,.016051533116298963,-.00101868400485787,.1443779580581858,.07840763971617284,-.21215391984114734,-.05768089573932096,.12664817413140378,-.12395328524150205,.07177306687717147,.007574115007237647,-.05186632546637224,.03844472826365078,-.11281826148125848,-.013662478929553454,.21924860974778201,-.14332413200544142,-.054997300283757516,.0029602719156689994,.047502977291317666,-.028485684862829264,.020466736113513295,-.10612328436560343,.011155779036764471,.013002308851003064,.023295819752587626,.26377227907343925,-.2593114787690108,-.08109145681460468,-.0003967438491567221,.042663298620291695,-.002947897600341226,-.02670641642999412,-.08931025185163168,-.005043909355646095,-.005502048300267223,-.04536679903201592,.23013430030607201,-.09011555355216193,-.21358662268181244,.06901078184379858,.01987760740252234,.0044608961159714605,.029591032895087147,-.03501687061020328,-.016930134483468168,-.028665218589185693,-.01412651469531108,.2322333547477818,.02002227602869769,-.2510070762993298,.08930726728169826,-.007704470738758448,.033183418337549606,.009776425117414306,.034273315295213935,.020164835552348936,-.01004293041366619,.008413773164709273,.23502650629556968,-.024429730500986124,-.1683160553754982,.0005290142948826404,-.023487633169125,.096815945866332,-.03617787949756057,.002670053453748697,.0060485344731694285,-.03294986612777788,-.029843164527927693,.14655979582549006,.0353911847412616,-.20847127037801366,-.05789190603857196,-.01027014008034767,.07653773694218623,.08278152241511945,.11258631635960367,-.01659949953591877,-.0939475830037867,-.02515826814708777,.13710963679628882,.1328515249193337,-.22309506076529734,-.12553570046740603,.0251101088832225,-.03021547801359524,-.01174868668974658,.14400425060338853,.04316351632896839,.08594108251756169,.03518474139012809,.17622159819914116,.19444104428116626,-.23633459893577083,-.07738918159815503,.01463895746781499,.022800332745270047,.08354573665288247],[.12261253014406985,.16705127800103603,.19069455483447878,.06420078538135668,-.00016272403782892353,-.06594284936202306,-.007935106047411558,-.057893265858712836,-.05400622028081925,-.10458693453007292,-.0541799679401193,.06698967860824229,-.09921985327259494,.062446370884785274,.09094500180354774,.028277578410574628,-.04706939185341526,-.00715103160335491,-.050252538655332246,-.01470682832330765,.0954797205454355,-.11061849427089886,-.14255959604920565,.02685876773169789,-.1946544063779132,.18484819329409546,.17890314023634024,.15499366437705026,-.02824153524614157,.04479597904441586,-.05844408099644072,.013625007131520706,-.07969283436026622,-.11450496688056046,-.12377645767247314,-.06590643546844899,-.15742481688127266,.1298542504205754,.20266035853202718,.038497383031025165,-.025653639466894,.07572582376521164,-.022083431516520723,-.08548666750395979,.03208052290688007,-.1647946456821573,-.22037943812265476,-.2229737334363267,-.3806112513021312,.12775872709984104,.31739568607954666,-.01583423996906068,.055459428402900815,.011929160033288685,.02419312724618705,.0909706152760127,.16123203632279148,.008911780115480258,-.017294928512088706,-.3585408236670206,-.48144436153782677,.033786213483589664,.1209940431097762,-.022527387589338276,.049459009623695566,-.029490765269415273,.25612944261482823,.11469128278773146,.1280808496538225,.11403331019353928,.3050689704613208,-.19904848217033866,-.20053793259626246,.03964120520327791,-.04376670404571352,.033609985206833295,.00989966406617964,.11272141584817373,.18547440193507447,.1524434424661974,.06114521088463705,.11826241926353079,.12074606754768391,-.019667238146597897,-.00048386258516668057,-.12175688660479972,.036172066069231526,-.11868521523662726,-.1250203703417119,.03590491922718671,.017839906841583555,.060859449561677506,.09635166317000958,-.04921249262557434,-.04537260738200266,-.05589734571682231,-.0023764214791030455,-.03838286527828639,.006411603378155321,-.17558791205718122,.0023250224817987636,-.05172725980261646,-.057790529308374375,.013791061402471952,.13644846669520244,-.010155313334871414,-.017625717203356758,.07365290214345152,.0006932854524008755,-.050008478647772345,-.3192788812600195,-.18353351499079812,-.08553823582354872,-.07309629001232881,.0901901782107604,.10660823241153998,.09035141763949854,.132917195679079,-.01185735726791673,.052935295307996386,.043012618340511746],[.0636870265598327,-.02747449334477116,.04079252412326359,.03394429370263362,.06749399659832274,-.08420299053786681,-.024906649626728283,.00915836869445534,-.06882017046042568,.0031107283830948407,-.09710858504912417,.11878373624948577,.03710017079293685,-.0894027100464124,.021829275829537725,.05069263318004659,.012340313923680318,-.02368578576938657,-.026839662252448132,.034846261621930025,-.016166129228329065,-.02786495830089994,.12115538210609175,.0037368644565901332,.13531841970369599,.021592046315438054,.01817100573094571,.015072771881264005,.07040088369444276,.0022893852554199817,-.038531873505113653,.07341259725477861,-.029637114380846583,.14796659731395348,.12294211400056784,.06835532178907966,.1684693398714534,.09208858358733514,.124710416844108,.06941030055801004,.002828209679920146,.028941147392732833,-.08240586386178332,-.09934010666270433,-.0023105045076858566,-.044477583601388274,.0008809594027263945,-.08509910778848345,-.006458648569850088,-.04429511418026441,.10095939402980549,.1485911432241273,.14469873810179945,.07867563696833521,.04110277787821804,-.185748731574369,-.17064830498300138,-.17155221512879462,-.25171330168462724,-.27337273571997955,-.21265235556569007,-.17172557194975863,.02752712495534959,.05618012242699108,.12158172746105769,.0793384866287001,-.12195189294100098,-.13969446903752442,-.0265722227610123,-.0741704803065521,-.145127075010832,-.11500093509170173,-.18278877520622416,-.24714583432028586,-.1374776022980368,-.06839261036959236,.09867159287027971,-.1674030675690175,.07527407612466389,-.0044961465547186386,.13260037497576577,.3123405549781268,.15517911386484973,.06645992820391539,-.015467888667656748,-.030267329366836557,-.05625951840729994,-.03821591469125371,.06712871954308432,.12318688834042112,.18468566964642463,.0865250012197846,.09578353948499435,.1593076190452768,.07562987308980218,.11756704875720572,-.0760161520649867,-.011817169363246532,-.05195737709430641,.17488796559917713,.14148464642191833,.0869568383172606,.08105847566397013,.04695877234878462,.04918174254075236,.003410992382455305,.01558094374411114,.02651508429838243,-.06287888673146473,-.056347428448159036,-.09378127446608192,-.2396439753724413,-.13258713878159228,-.08436585933662782,-.12790680365138707,-.07008370693809016,-.04496190763532695,.04925129846530313,.07244661869675435,-.016196819754861112,.10029423625804029],[.022794829328282723,.03185540222137828,.02436717299490787,-.08829056624608388,.07232262276136471,-.06292516861381596,-.004086146110761454,-7972988029088246e-20,.01396609724411256,-.0251310357298712,.017075722683559433,.043144050114759525,-.07779117219058024,.048533511736318036,.007217025612539632,-.0354751368789569,.03569176722755009,-.005375235042171175,.04305370316223915,.03642594292131633,.026331797944731436,.018922402485978082,.0344245723793809,-.0433065305205069,-.02376931591851794,.0809939677232169,.0014022744912380036,.06800816187289091,.09510458708661795,.10798396936955548,.024411086728309606,.04370802516100046,.05651039482804686,.03801298940438935,-.016918964127942582,.1307634062004953,.11446285199173112,.2123910909324717,.28795590334995447,.0926874508077318,.09676400883214167,.07011596892193131,.04694467724843658,-.02810952172495436,.1864395624402158,.07787071989570529,.11792219460655051,-.03560826755933394,-.03664881215874992,-.13441333664206742,-.1209205303400708,-.1562438512284114,-.17025727483799705,-.12517931808717464,-.14934420137275992,.15932332483022202,.04839021776339017,-.10847969953324497,-.12255999835004713,-.19725754430522846,-.15715530383375914,-.21752678931536223,-.20062628687872636,-.09226733990822335,-.02057347231288091,-.07163667099809229,.06339759934382078,-.10020592169765151,-.1558036149028662,-.14943697528943115,-.11920849551682298,-.08120227653725197,-.11695355604037566,-.006728370826129856,-.04683793895431371,-.0077863170130979195,.019980965641957497,-.121667094665772,-.11522589823910821,-.05747177610963532,-.05222910064785673,-.04689107902121323,.06157405580787187,.11811240080682403,.17401725345189034,.1337150650275799,.1927256229810148,.13837697707498475,-.04368248952610823,-.035940773077983296,.011031099888345858,.06603510802719832,.16273538350576014,.1001587158991207,.15018677215060725,.05156079973064387,.05840588957394238,.020232732914280432,.08034215705932544,-.06688430472152501,.0430917720201435,.061075670741261745,.043764943962592874,.03137922924483363,-.005463533366559248,.039411450527978564,-.017169301013184327,-.027826140912018828,-.004714899656728756,.0361035243729722,.05466723031402954,.04623956359132372,-.04545606793086849,.04940225271078921,-.04766846057913162,-.014224514341087915,-.05950947149587994,-.13173838602104682,-.010384251552911242,-.08781221112410761,-.07760331144516386],[-.03235599468881076,.018326722847476676,.017295570021311088,-.027670634962396815,-.007680939104993054,-.04137668585653098,-.01506163061039549,-.04378113665897382,.03647714971239879,.044228566218286886,.18106239449231315,.042891343822209826,-.02085324572429434,-.024082163468429868,.041552139122004575,-.014678545508214125,-.04084197637584003,.01743202169508909,.0070216535002669556,.12929994168147696,.15511189221305455,.24789881463360725,.01524433890020907,-.016082932861742782,-.051589389728025764,-.09248737426657166,.04574401673887636,.05751681891908622,.16869815200400168,.2635471084233346,.13879401206280972,.1425191292736655,-.07845550913751209,.0045617718808213525,-.04996569794639541,.08036867162942538,.05014678092238277,.06747673498101589,.13151901964758053,.16708907133321474,.014140597465528995,-.09537822385677033,-.20288372470514504,-.39934020254115926,.01878272803339666,.055848444235998176,-.005273028114115508,.09488362821079908,.0926620841901206,.02634239108860291,-.08683895061096016,-.21345767462167456,-.282107822115785,-.14895903217754436,-.15887716612865338,.014524384805330928,.0641050616596199,.015209021241474052,.09483634647478044,.056562751972782294,-.16636322513631874,-.241320708765963,-.2596236883574559,-.1398205940714011,-.15531689505376495,.011694908155279474,.03201061104057169,-.037560894238744175,.06660778747741622,-.0076642057689953885,-.04070977708688811,-.04226030127644731,-.09001186030957144,.06926683868168232,.15114898488461287,.15845318802936526,.1565353536374282,.05796322755853696,-.03160324201159791,-.0055733045265627945,-.06334520571126113,.014274572871990451,.03168059960306968,.03982017671620115,.09341585936541662,.11919257043750534,.03989717150118903,.1715005214515096,.0032916843093048626,.004484666942523072,-.021098541490893137,.02580972076749155,-.13673281369087914,-12468117886521579e-21,.04530363098145215,-.0526550700395952,.020909495487494364,.08478967987071337,-.06333911092467263,.09137694505686653,.07252165751693404,-.07920992614819855,-.06729398745387948,-.04390991712744949,.029396455943145994,.023947405883684936,.0171670258216942,.030553476010320116,-.0586216899830546,-.00984268569256612,.20196311694537442,-.023668678155415387,-.014001946149787309,-.03728327654318217,-.023078128502029227,.015589706964187003,-.013168968136987605,-.031499036112030365,-.03978623603377021,.0545163256041528,-.04051296895686381],[-.11874501434881572,-.08229285106151511,-.0956081678686052,-.02057786834221975,-.05184628950761827,-.010859373167837721,-.022716678939708967,.12820642967693277,.20208152628630544,.10326830535107219,.19572108975580454,.018529266875907807,-.06234376403958489,.03617672535394453,.04106993308366061,.007976201268774658,-.10314299674810966,.006495517179795268,.12398900983956046,.024168115641601748,.030884610087337075,-.07499913799626025,-.04039994706996733,-.02634834152878826,-.0040063358136547406,-.0982142012530413,-.03343598299911335,.11941221649994889,.2555558860547529,.03896020421376146,-.07260447413235296,-.08030629503994723,-.10380646122757918,-.05732049324245034,.015515746045367804,.06255592200477092,-.07382948751156268,.09234710762260769,.19891060046749282,.1697336598168339,-.044617838703860296,-.17458925689074178,-.16855591416735904,-.12959176095156721,.0028653211948725388,.039281815318144675,.05181104086434815,.054229861553504496,.13870864137978747,.27288253125832607,-.3143878348089388,-.4393019728526426,-.1406383436455399,-.11423051269906785,.04779660456302437,-.06506150510615961,-.004260423637650848,.02946332359287078,.025104961380266577,.14743399932390186,-.34597564760602995,-.4201722978505261,.0350728315572825,.07959646999214702,.13322835735966732,.13339746737800906,-.0619576139450089,.06892042530749935,-.03853620657347431,.04721526298898002,-.1433449789679961,-.21161459673878405,.14176441081563174,.17098183292990443,.14174756095000518,.037859045933541086,.3108572822718966,-.02922935514410599,.015150100201128183,.034324197511492696,-.011781519634235918,-.07739711582860612,.0008248139395220372,.04253496183022143,.04985424198595359,.13020790077736055,.20732411001715473,.07004194288134588,-.03702686021725021,-.031791667690004716,-.06480616459090541,-.08258662171950007,-.07437530116242388,.01385894189294383,.15057409353019663,.13055028224014828,.023193912685637932,-.0793709118644385,-.07674722077519751,-.05651538715616186,.07066301035783962,-.08298069385057515,.03859091949287638,.03688503261834894,.10304253122200434,.02858154892479417,-.1138945464654084,-.023276097872029958,-.02020813146390732,-.14669512203229218,.02373056640770148,-.018262941034164024,.11113049123798203,.017809780077411436,.20203876814616534,.050784801616453046,.06146956758956332,-.007550751209127307,.00039041405665547757,-.1472153798567385,-.36919673052117485],[-.11817248565975272,.050807995924907354,.027086462019090568,-.05832408598310841,-.06975188697206569,-.021026807770255104,-.0010775384566174273,.07435038493842659,-.008399653634296178,.024897232303854835,.08743561284106252,-.01909898532346485,-.04609789190069946,-.03978145183433568,.008889473198062846,.007556922405348734,-.019310705820979837,.05536781248319076,.044255697213517686,.003269187287821218,-.010373408718694646,.07260112152530654,-.008100354989332079,-.024375359119167946,-.005175740470757712,-.007608303655937336,-.03860774568782323,.09247837502307099,.00029773934680776826,.041278394763053186,.08171588879027601,.024739987393328,.18485522219427483,-.0256447127811721,-.025676231567332224,-.06974714637606025,.054381153884765894,.049824898758326436,.13026732540299155,.17109724133509682,.059607917528576915,.0898551064946915,.09543727716276107,.1587642227085923,-.05913375761020232,.09097655659151871,.09510881397945067,.11556486887071599,.17970536904884052,.033055045328156785,-.035525492509829046,-.10877929753051407,-.05079396460228644,-.07639132244393337,-.05675798967236886,.1347731234822974,.12869357538617032,.13013531388087007,.006388712212117984,-.08972948672558663,-.31295031978607873,-.28325157301095855,-.22477218093756324,-.2145675780259611,-.13307930518541367,-.26981212419965894,.005016585566453173,-.08039808860717024,-.08521624861927016,-.18399362322745855,-.23965470437008415,-.12035412983362095,-.07698358306804472,-.018020432830199287,-.023775391914850265,-.10766179954942284,-.16700211823558328,.015040770227884616,.04251038144007874,-.1295843290841098,.029351080812140877,-.0197858882149356,.12163685368807528,.19449321821046042,.18157312421218158,.13917958348474402,.03625925982605473,-.05933035618988736,-.053816217365371406,-.05801219277539678,-.02499106046491168,-.0396560923543915,.16051410507047068,.14621181331244598,.0765292418848361,.2061768947045735,.08612988608968827,.23683312856300526,.17799588816524972,-.03156868591107587,-.011339033584039513,.007592900019644758,.036795050434868116,.033074275171315504,.02413735006868855,.025795926857207403,.01249666081014379,-.019552843326395453,.05284990813360595,.09051803542268566,-.012948046871117346,.07767191529914241,.03560950915943991,.07732824755456554,-.03709406667288549,-.004715107385355787,-.05921655824523059,-.13706040241569367,-.08499799651345004,-.2036404817250472,-.1023980466551825],[.0032466543865972697,-.005061914962075351,-.02181781055551349,.020873615011084853,-.023531149044787023,.03236851492334604,.023279668597308872,-.06907932017764035,.028858662573673435,-.02291220091069275,.03504956758463669,.021373318115011183,.0431771630216619,.031000576507821495,-.02272799250828532,-.04113033790693525,-.011956655086753407,-.0073657698466143146,.01951306245600455,.05648936597537918,-.0180069174946471,.023594044549755097,-.06097471095863413,.13275136748820646,-.02028861314235185,.0933234697534089,.183759358028883,.0933077625261312,.017002171822373846,.02900112839294272,-.032620309649792054,-.07714446633666172,-.026312985524931123,-.03637619977745446,.03001653999320339,.08106844871887645,.17134303640361637,.1454521161962567,.14411586594973091,.2508953402160685,.1895315775753576,.10961959096303461,.11868995411865033,.0976490741614215,.01753917806278653,-.1607658351969666,-.08944189051045412,-.1662700174191715,-.19945945515698124,-.12053950329957802,-.09997479716657263,-.0030787654511070864,.17592486845741467,.009404761123874367,.24137587097504254,-.10616945372175415,-.04129526390997809,-.18662857060598367,-.10128658810243146,-.15612237408478322,-.19263459821003462,-.26517496264532614,-.2107547873859761,-.15240183455933287,-.016383869315923158,.10147080642825733,.008766114310321066,.033117317571517424,.022841544673590577,-.12277060576748028,-.10456605790706747,-.04681087742708395,-.051309908127680354,-.12955150951531408,-.08588318728862879,-.21065306139257753,.06742355168622795,.07409025822200359,.08214740786947217,.09575687890732651,.12800788880163314,.19242466407747882,-.010488011809805561,.0024629531735309296,-.014172878937930886,-.06993883875353082,-.07193778845464721,-.07364200527100781,.03140427344801179,.1105219490341731,.08262921650452189,.0722242208307422,.08194142882250403,.14730626716129064,.1368836421937018,.09392788242913958,.026163487559181867,-.03421725273288698,-.09625367662647977,.052568923694275654,.058021118675766356,-.06948662344056641,.10387349833640262,.016885436566802817,.005752374710489408,-.03385762730057319,.09919971997827448,.002758758622581625,.02888308251792683,.007798772719153607,-.026129748383045506,-.10092939633783646,-.05972518155086229,-.16032203807483622,-.026295964226010465,-.08181702664666154,.019856334497422835,.011592637104098677,.03353573139538846,-.037190296797926556,.039208766263747495],[.1510565981517946,.0077705624895111625,.04042802168461637,-.0017942995443031018,-.041653694509876826,-.06859077437682252,.006298784217715708,.026863472745659034,-.032303950577093066,-.01903335591525457,.007997959526692383,.27835546979835657,.06863127471111802,.1003446445291738,.09687976547773058,-.0033597601637389563,.05432613468920053,-.05594167487163827,-.005418728541006751,-.007755238576383203,.004575943998333623,-.00017646288706738011,-.009475982818670042,.20486066918593301,.23125707799370063,.16313521549416574,.09853910567431817,-.00992570736879192,.05367234352995434,-.088888704815857,.023933003966042796,.012746466899076839,.013847645420023147,-.39203581787528585,-.21351183585569017,-.1791720163353998,.01068683181804335,.1669535291647476,.20160459511575174,.16448815854770155,.011414537180906403,-.026561248426133832,.00725645807883285,-.006350824391933685,-.1600711578168632,-.15188987832197204,-.22445870647203575,-.21974868512281032,-.14907696976575383,-.011673426129634679,.10655889056027106,.1667289488285415,.027289163008064776,-.008044546331004432,.07580932711770764,.02383788693419224,-.06031878412843887,-.15808704038753496,-.15079581692449417,-.21784799920378062,-.1841139188637343,-.034761650797478574,-.003078110011040372,.1443522382170338,.09819159401433701,.0188995113243184,.14330730009269013,.13334147887544215,.10003033854405316,-.011990871182064697,-.08118372537331713,-.09185322612857909,-.059061176343404506,-.03070241061676092,.009131792422277976,.030031451106893217,-.02916560965388293,.11124860010301604,.10478624646896353,.060405900026046816,.13088294144967497,.0944468233253217,.04688844062754824,-.09989417050319033,.00043866828312585926,-.07915901899077886,-.03095799592580474,.051180956797886826,.03653220034115198,-.026313715866520357,.0487715405583303,-.019626512408325483,.041811742473138486,.020274853199404738,-.03531125186149117,-.03570043534772557,.03777639113084559,-.015390360725990176,.10246466374888295,-.004494955166304659,.005158808183997554,.03834429330297548,.052952011747411765,-.02014141503088371,.03891118599786242,-.02580996905072971,-.054106671252965456,-.05908080867179331,-.019798138018163675,.05184924826995934,-.07376317515842332,-.03834091661300342,-.06687962421744942,-.018985614490330482,.04871042816996554,-.01980872890750089,.010561838400676829,-.02456274941936872,-.01514121795616151,-.04795833725693799,.21088916658617063],[-.1251912106765544,-.11688358418954034,-.05896115401747269,.04223537875473468,.027384636957009777,.0733784772929354,.19970246516712672,.18078323729328397,.17754089590649072,-.12635528181833747,.08320974959041295,.029824111195079443,-.0015424767491013895,-.016459376017527724,.07753356123704731,.00013267738458831377,.09375027916191704,-.04472699730074159,-.19635306229962388,-.22782377363617864,.1158824654511761,.2894446913107698,-.06877233841174803,.010802089827676834,-.007867632781378895,.07985107130712792,.21292640866678078,-.008978445378834802,-.06841787699813894,.022956354752557615,-.026211043907313703,.057828305945572214,-.07948302025407236,-.0161717155946158,.06268931522460307,-.021796237786981598,.12691374422028867,-.04752547764539633,-.04930128304103931,.0482064777494462,-.2171608705725426,.02813017983255572,.12406052692394327,-.0861311209500024,.07689460503666104,.03813505264063799,.011628762315091006,.07069849377635645,.008413533617812868,-.11267273154459259,-.3975484240537875,.07304069354916054,.16994373683501546,-.11001260539983146,-.24501206201543754,-.016540271332897986,.037588646441523585,.12220568704299391,.04683975277378849,-.19361692505980962,-.5034060728708488,-.4622460574539702,.3012728616783651,.3851257612605975,-.19298521871344812,-.5088287167621777,.0577662914811312,.0859156882107849,.0025825469644762365,-.15401989963515647,-.0810666445754652,.13998594331352224,.17360289429870265,-.008211331775624785,.03416443347671071,.033688177254881144,-.15383945741404872,-.0035717910256200143,.011347483637652627,-.017873166525061147,.03914679658772492,.1063684799467139,.07624763639976428,.13995849083497702,-.12176042704433512,-.06437548220810757,.022871601462242333,.20473954746266876,.014948129510764279,-.039363453803276216,.024752228243803808,.06253014347756412,.007827349934518012,.08753987689455507,-.03454293596457564,.0587464432839514,-.07512628597575663,.07659748512077515,.19454209279112086,.021682122234847927,-.07348869550130263,-.05808267910197129,.012328447567534092,.07603887813254051,-.03691347272445111,-.018862970847490845,-.07931652130403127,.01609398288094103,-.18419160468838913,.04922668323196122,-.06145731499091828,.0282830319555805,.10422016934925292,.018036735639772688,.06290511255874787,.07205279732777245,.01238787011781239,.09073002929031532,.1143934398810977,.10142758766032614,.19506458179923916],[-.03747154794061502,.07900305916888334,-.118094514839233,-.011575517807246187,-.04735483715894843,-.04381990508782336,-.02204068674980534,-.015582330906619458,-.060450140546324756,.005671070917878641,.08734219976791799,-.04748458685556487,.05557846862917353,.014640579783893624,.10885390788005234,.07256075044057561,.05363600621372138,-.017555923047039936,.04213350785318807,-.02906136252712694,-.12501847301134028,-.017196570903083498,-.01339795071661689,.011501218082141058,.02770235909099609,.02741155292168642,.029974564956617343,.07336426312558758,.010914273919724583,.07540989196611064,.13043893685947877,.023410994104295653,-.004825368563342529,.07497843221817937,.054355304633943134,.04204747510162269,-.0154640673353326,.022630801443203577,-.06388823754110312,-.04044630874727343,-.11272446316765139,-.07731188141641226,.01898064857748586,.07948412647314071,.042423015302388865,-.0006940351035240808,-.06922908845278616,.07743030379264013,.20473753110391857,.2871923796668266,.30503589992248753,.32550043922428146,.14073163480952872,-.015200746246803488,-.041860347134460144,.17135640555161447,.1527355824602927,.15944325028772327,-.04636067975835752,-.2227663558507864,-.343742026059417,-.3875625228553149,-.37352669157727963,-.17546418763106925,.02494184485831446,.03853348528230306,.12621571033694096,-.29897191326894157,-.47416602764115157,-.4053376998776362,-.044666674782561915,.12588265080168398,.1850321413968945,.07448172492372299,-.10021514102767744,-.3473176366872461,-.09928221388321762,-.2983750610269019,-.1866202358670671,.03565212625203349,.4013035269477947,.06080080045364062,-.020916204012535085,-.017432090909172804,.0064526884627329265,.314471233100664,.2781426659269365,-.042857339346656316,-.10711074543649843,.12304888506893627,.34204207221679617,.11781479381803128,-.09820750529246548,-.22534157766971744,-.173369554604215,.025185350745411,-.11167805937105306,.2142012132418766,-.04395005843596544,-.023906769270708315,-.06558463884581744,.0920406527523769,-.035310034547302485,-.13396895532331693,-.03899490443982933,-.12154265439434478,-.13006356630340574,-.17041731619250497,.11042010979150567,.09265124738716436,.13111238457685057,.058001891637747924,-.002652110312396515,.1572234782164298,.06607130870328556,.039488088992435756,.03927448274994905,.19071883885744992,.10773181848300134,-.02812558988695802,.05797883312162265],[.14781185661120058,-.039386331432373266,-.022921264342725164,.05388189603876585,.12598813182555718,.028202774466358597,.0346074867144123,-.04238131256263251,.03884963956920999,.03641008565585076,.16289756506012004,.08984523861558368,-.046052810070111194,-.08209578041456302,-.22396972511791116,-.11679212172424258,.10053680749504602,-.00823224882303256,-.01090733225309412,-.029537833982867273,.004945131369650824,.10219160122974023,.1866374510485118,.21337195182960642,.09692801730212781,.08222540149967027,-.042534134329079154,-.05225940644990682,-.02030912059550327,-.10672463441898887,-.08822130798732822,-.15579389025604545,.23092722621811365,-.079955537176635,-.13801119251604682,-.0569662885529685,-.28523441407005473,-.006823425984885539,.2637658797263801,.03525661052999585,-.0009694807897623753,-.13354739530762744,-.09529223469456388,.10809316225785848,-.22622473692942502,.1375096440563321,.3058868523607385,.47089738278075627,-.26225597341681434,-.2429165794956724,.22231836629884105,.09054374170971215,.0433012887700934,-.05519533311547409,.012450074560341884,-.483386622957673,-.41101568836876,.015182853563479719,.2686700361155807,-.18587591997040018,-.6574604765676167,-.3708028169924963,.26181673556057816,.20685619441423742,-.06291346653609113,-.0046315163613586535,-.3460271088384187,-.05787583147321959,-.0800736633904083,-.06073296828377071,-.06313172224047209,.33222972618047136,.1600402390728511,.08404710209986747,-.02976989350386039,.04542127487553971,.03450430416325412,.3753624233823881,.08893561816209909,.18255926007618903,.07993617252967636,.2352440711079648,.11129319261560268,.10974139035902221,-.04722071086520177,-.11616310797947724,-.06730980582471298,.03459913262322464,.23285705965606096,.1319034928296215,-.04174928439903445,-.18971912136060662,-.07031412451546298,-.04433981468312003,-.052799114165529494,-.12425748565008495,.04548785477452552,-.13703396222511421,.05917219535467702,-.05667902413997435,-.07418473669584665,-.09695247453613126,-.02183641852612041,-.06573120701236759,.021349416929545006,-.08341902593987408,.0525663677690868,-.0026602316535740966,.03873498024493624,.06817581722807808,.22646127086716095,.08289023239764355,.03539905465475633,.06732065297074195,.14239677197520148,.08513876908816612,.050369804354669645,.0010887532169456537,-.018280111009442837,-.01722592461817163,.08422037289529935],[.11800749409978381,.048641544731680905,-.10678911358350332,.005291117990921301,.23136181762806476,.17221088012028055,.17682279225882522,.20044631087373868,.05212243965219243,-.1402595079578749,.02243868573975058,-.01982804806120863,-.1373081753593374,.09257718698058398,.20995915555570394,-.16372378150074623,-.15700734079198975,-.1736927596916677,-.0580537721038506,-.0157237265316914,.01939859961370008,-.049310374137502805,-.11375225205060403,-.014247453019732223,.07073949494212364,-.0883277135102292,-.13682329114661984,-.07888847959680247,.053144758392313945,-.19437922851131084,-.0001706889902193115,.13424778030432938,.009332072526130886,-.18143139441084224,.12020647648261903,.2963908916390815,-.009097465083453715,.0398558854537292,-.08463057056034079,.03693155284069398,-.1478889489144798,.19686627422843606,.40663533420008574,-.1433628367370896,-.18437286091816663,-.0387524786508332,.29570661700880807,.05368898279511149,-.19564754353990196,-.3448638572850823,-.5012130700076909,-.40626297518108834,.13382493808540968,-.00028761919063780006,-.20091903070867112,.11021116432324056,-.18695906308384752,-.2395200513010894,-.18820014759183346,-.020408212645899093,-.10626227681963624,.10776229335456736,.19941878614236833,-.05827657288789745,.02752174113496536,.18134851852604528,.06869487900843496,.014109730230775254,.019795706580671063,-.06951944503242655,.08599870525279386,.2512168355426164,.24991886206451533,.20675478705920156,.09380246704308468,-.07150568358107444,.08395660862250853,.04266422246954499,-.04489797514980388,.0756332294513642,.18470969085810693,.09231209792140999,.1647712315503363,.0674074677084526,-.03539149215963413,-.1005117354806793,-.14948457456306743,-.0859115996358253,.11899616835413444,.02223203994893508,-.05960418036718538,-.08371413479598194,-.12267228192899818,-.07181755365520867,-.06136485403133418,-.03712235502712,-.024043277802218023,-.007718335058683745,-.027902500393156213,-.07022897684458969,.06728304821879091,-.022096929111434786,.030068653546629937,.016508794156056245,.007991022812565085,.053657963888500304,-.01697467785547141,.03788848360559102,-.10340431444912367,.0939470116916453,.17568681512805212,.05319327446333484,.08332828325168111,-.012241690018234677,.11152581385082602,8877751397590172e-20,-.005979464667969045,.07957622903533018,-.011219166299368227,.13062677267175682,.13093666750650848],[.14423093057173975,-.01008076678423761,.007377104459413508,.06526902731825053,.05584860582390246,.05236387975722907,-.022518577948855645,-.00998540544349874,.007488119357989409,-.007637027399657208,.09511536499739359,.007486862308122141,.015230162163870492,.04021789142515911,-.08536714963206432,-.17282741030837942,.011588285357803,-.05898200358863245,-.09121420159304248,-.05548553721852835,-.08505617995392528,-.012889357099271234,.08219150348451196,-.08821554146779652,-.17609926241410598,.020767875260274078,.2973162999706101,.3447305749860291,.35075038554356563,.1675765045908931,-.08431744533615992,-.08765032447768258,-.0293005697765467,.008219759797923734,-.14178517944724803,.2016378749777812,.30622658040655926,-.08983427255695514,-.3299115437753259,-.23770186950896088,.14059485558234217,.2293501884825727,-.06954897481239436,.13056609682447454,-.03149728621810852,.007927379146063895,.08481154415183993,-.2914627030183241,-.12913123455806388,.07096605105569494,-.08948667472649491,-.07685719628317632,-.03186671799932277,-.09490557138676806,-.07682123007601649,-.28837628451753605,.08779954200080047,.20019432782413554,-.17096915847133118,.015333878953658897,-.28908252284426406,-.02952668950598297,-.31385369627251253,.043040218080409316,.4557678194478584,-.1807055900807637,-.13846940283256665,.04262264840257386,.2723173783565324,-.1914801913205901,-.11016274974475865,-.1176991482916686,-.20542229438804735,-.34623488704400734,.23754568531606332,.2859997220700538,-.07796298777428269,.034879273993081605,-.026162450274433972,.12712327036253446,.14403182667963604,-.03414888705288188,-.08855082368809689,-.027745606072896507,.12772199691917124,.10001931959841266,-.18643104606782843,.041460676340255576,.05771435221180913,-.08388195420023732,-.08331277637087868,.02614741925611943,.057512048083849625,.09877685805254571,.20838336844764122,.08141626738643452,-.031359090867443505,.010864074615252003,.05416772437770708,.03633576655386271,-.03773405682796377,-.058460234722864275,-.050705505416570866,.07210000699293825,.0772373715279393,.03203418995256717,.08368828595046637,-.0187409316170321,-.06823692076172613,-.06725245236398913,.12643108826975322,.09241136185081472,-.03283218324214139,.1036074935038833,-.02064167472267718,.05039606128905021,.014052376131391174,-.02423136333623187,-.05009375566336979,.02935370249151292,.10979499165058046],[.06063756206193438,.01163357669854459,.114137229829593,.11754589579378544,.020855057347248462,.1097493044915731,-.04499029293678297,-.011032547892272426,-.053612766250269506,-.04475819760291194,-.10039035625686599,.1343544845920419,-.024159164234305225,-.08452442777970376,-.09196037551452901,.10788802496504861,.04599807823235408,.0552750050379892,.06435881986085769,.015789766512200487,.020929919215574633,.0408268323092314,.13163339908596128,.059409419123521795,-.026657113464773563,-.14316517070653423,-.105418542401858,.07323749589709133,.08243361011408763,.06259632374994317,-.003104446434026492,-.0858401391142894,-.05285515481307368,-.05803703807964217,.029721950798359945,.09266920936373313,-.14987389757269964,-.13353796595923728,.050257684298183,.014996004118443262,.11313878950895426,.052153057368792013,.010577754712894294,.013768087181216748,-.23145094612919812,-.06758686960983734,.14187556860642475,.21502139869877795,-.23699602207891432,-.28070386994651997,.02443305911955751,.017265628634335395,.017657686358856672,.026414327638663804,.08807797576864566,-.19378616438963833,-.33747330456037095,.10010384808690605,.3681340911471589,-.03425924318529136,-.5152900491931715,-.21455976987161104,-.029064252143607,.029684271548058694,.11428024956830421,.03599724323714473,-.3178054530585862,-.03893900280960352,.1708263110456912,-.01983209806788927,-.015434962482212933,.2106729777023667,-.062119854775684574,-.026936094188691473,-.05553110408369888,-.025879857930813016,-.05653702058897206,.0822515132533288,.13249378757784364,-.050895123398873254,-.023068884844874127,-.006580414354771538,-.029028619952673668,.16670678797071425,.03728723954927361,.032006611053345235,.02298554186851373,.0330979700612698,.25106958648152244,.05524767984135848,-.07842728617881933,-.06517953010256305,.001902992764642758,.015118472262848806,.03162932993377893,.0744705682056874,.032407934317240886,.033762676771467104,-.05510921371766836,.029518107237236926,-.00557251827090087,-.022571921481206444,.004978260357756517,-.03489286195148675,.03015227783836147,-.04631753619484458,.01721742444845621,-.09059543804766393,.010986708242086585,.01475361802999256,.11880942290428557,-.018853830715500133,.054570000910600755,.052880256948674695,.0833878827973407,.06829123863233161,.06359772129360039,.0518869232839437,.08308711624415947,.021602565983420394,-.059861424749677705],[.09080714473952173,.04477713049248769,-.006004236596012319,-.05036343325604714,-.038872008341752945,-.12117244583538275,.022973279126560026,-.0317124478295967,.03805414842795499,.004598740943125623,-.035659664256043694,-.035674765832077376,-.09299015020156876,-.03916261171227617,-.006904393089097821,.0138362499846926,.03066070836750659,.07054913875846983,.02941004691229679,-.012521892141359542,.051323314480405155,-.0037634551331882926,-.07001383105665589,.01086073225646847,.03272678318756453,.1374861322513778,.05818397355634958,.1375096932090067,.07872032070283921,.10378646515411444,-.02894911437094108,.06208158795328925,-.036944529962483555,.11289672176654392,.034425804553726264,.04491504898654261,-.05700718304868935,-.15438271229617534,-.08287102372873018,-.1298228276365384,-.04361166568800395,.06596435175319629,.036324136181226305,.06371398603755794,.02173517939440031,-.07825856376940868,-.03695665713662548,.1335536638973711,.2820127488291951,.3248715566879344,.3382707227204252,.1853812908283755,.07322333197701335,.019788327920499546,.13765137512483783,.07806827112667367,.08518024330180544,-.06912579487432846,-.09087857281110145,-.22904348013123638,-.33513853608255195,-.3410714482164571,-.3514787315094477,-.1429837248305727,.07534805803134563,.14776217747988318,-.0458557013057877,-.24152324430590322,-.21753420627734718,-.1309360208776029,.020511261336832037,.0976716577514131,.14601331736207362,-.12506767652167178,-.3725235767315107,-.4082390489365429,-.04590580754479254,-.1600759086755924,.07937818266133348,.3143974221346838,.19157945898080572,.02903065545276176,-.114833479865943,.0767261382297855,.3013511457136653,.27545746842581786,-.006862075032061946,-.3652247609294275,-.06701923494448854,.20620489038853418,.052499913955829466,-.1326523991171371,-.0789502460821889,-.206419805797655,-.24381499902372766,-.08679768063808978,.23653031161361043,.22019310254213031,-.036973082188424586,-.04916248284765505,.1462592159198925,.14505339243853665,-.22743035761938601,-.08206610455658943,-.12119372823467633,-.04318168254304364,-.09801604542519023,.029470016170797184,.1374726762360411,.006291702539247157,.16322306590540175,-.09136353558362603,.07328769661982434,.11422898762272718,.08521042286656524,.15331572095963925,-.07266053822766287,.20466593159451976,.026700931142256593,.03601107429783196,.07882770790371899],[.18112261990369827,.07330552477050538,.04073594357969182,-.030592173175515824,-.014723051663569992,-.009717724172896347,.12724950542153152,.03039707805193355,-.05888919817899542,-.026611166982695778,.06668104671222798,.06660808816758836,-.0719187452250616,-.008316532379624916,-.017286314033053696,.03860276428662211,.06708355106867812,-.07028210329075844,-.06969068677450957,-.025274574618584636,-.11014662057019094,.24938498020809974,.13937639935994262,-.05719784127987072,-.07333099431064974,-.1447911227660449,.052420027937541525,-.12934942016932524,.030685317385975658,.06161111711627355,-.10213214383142413,.2239301020176982,.11685706457732412,.16687464021324355,-.1111052075644686,-.17122260866286426,.05658186998329005,-.04893903568767982,.15917940910095132,.19178174933281159,-.34144279330828603,-.0002934693651933523,-.04690094735591402,-.19493783020620092,.0454123494907242,-.009503367612825525,-.02911712645509991,.04140979388731324,.23150478397061292,.05244868872817422,-.5672713598377552,.3002926921538524,.46090762088909437,.06831896235005604,-.37007579263516616,.042656412910046834,-.13943043649625064,.11478477562923234,.2674056989846191,-.10448691247946103,-.6682765409186954,-.28237532775707574,.17754279911041,.17370357234732237,-.172164890655841,-.47505336754415434,.05483627683056928,-.03016239745576678,.0684929075971628,.14670950434159008,.007173184059208887,.29965767091965445,.20250028242592366,-.1778433792734916,-.11561865754268655,-.1332395677790339,-.09722185347399298,-.028986446755459486,-.03580733604518049,-.10615355684023776,-.13901885393191493,.016240710560221847,.17310497729481505,.19618607123165227,.11531910216918494,.08586332648038018,.1662738713960034,.31073734902957373,.04635899062683328,-.006680554768541611,-.11949504899391879,.049149985727881776,-.11684899113755934,-.07762195316655388,-.15566484457471233,-.042823410792438815,-.07595852938904664,-.047231781924106236,.18266592599709178,.10710563631894213,-.03180444558515859,.06409971260243988,-.0833395715986823,.08860645005897541,-.049001943443667206,-.06079112950227804,-.01193856606819367,-.02896633660169206,-.020442949029082044,.030720122959175578,.060613751104797636,-.03989766326711776,.06370141812986851,.04736875093917328,.02939838110752288,.10605597723541271,.08701259983398457,.06714372555475887,-.01789226663164903,.06980756581123632,.20793552791413253],[-.03618525659164709,-.06842365139802556,.03394826901898129,.25798065842164275,.05575468840983275,.14928617791426527,.20629310863112724,.22367188663579815,-.04603354314311116,-.10954993360673064,.12202419922148086,.03368602518519828,-.11811717921720266,.12833540839950633,-.1289736286658285,-.05630428493998846,-.29473302723096206,-.0251960264590843,-.04980420634957777,.05295377195778636,-.06701949757192097,-.06822657644339594,-.047831454949617075,.026913257256672624,.08873411083890301,-.19263180519366901,-.011955075780035074,.08630641050648535,-.16802175795413904,-.0833792793293596,.08789596149715312,.12511813454172754,-.12767661265744493,-.21930070432606474,.4048499986447403,.2168179404643775,-.07267430101361208,-.08764912913266763,-.11089339548416925,.01529602176215343,-.11229804131529554,.29574346278635255,.08099137436155679,-.1694969856716752,-.09718111838701589,-.07648951845905894,.2409585525298908,-.24206344311267508,-.33278560146628966,-.40823989525531124,-.1698311866948436,-.11497220840475923,.28957955830284815,.028529279547082176,-.04802349179664002,.06300024473077781,-.03072187457794187,-.06696304681523214,-.01101372815939157,.07593151427854354,-.08086212076080368,-.16771239481709987,.10099670337031591,-.24229068894050565,-.3155489339818376,.03738906044904006,.15550442487747781,-.021450780534793025,.07802412591630939,.22670078648533437,.3000180336950578,.2480396752804122,.09553868166157423,-.03803456347604652,-.02863161982409773,.008302809789431043,.09655412538737305,-.09365578170734311,-.17003471525346986,-.046727860698759775,.05438730002622244,-.011590570354357996,.19038974433125128,.08009708874232974,.18123484236756301,.11932337787747498,.021024215763941437,.00924516718706997,.06740553047068025,.017941188287962664,-.040749800063489494,-.0824405264837239,-.11871195451512397,-.13318249702629348,-.05403632677909899,-.08100167732143712,-.02666368597188626,-.010406736043617935,.07620903935649641,.011611786985809086,-.005668402381206444,-.030538187745098727,.02057524731714261,.053927702112941525,.047348833795707576,-.03821865610616923,.03433663622575353,-.00018565997117961364,-.026356654841611753,.08069116291754706,.12906802891828614,.05459184679453908,.05656101126111417,.04819361188817354,-.03235204198972036,.015293367697285426,.016804531631558026,.13319266151582276,.003858408301107147,.11727652977520774,.10128996888306026],[.08703900182821628,-.08603086192239877,.02399938271861143,-.05500080253829832,-.04527545615333299,.02871882797765658,.023278548014906846,.007215412469654849,.07922698843858238,-.03263231259403387,.15267091964537238,.044269487995447235,.10051883763832034,-.11766420459825427,.06744641253041428,-.016434712072576442,.03005259848934051,.10105556654675149,-.10170349865733713,-.06647672300628357,.012013167877748929,.006246493542248601,-.05765997313132239,-.11952174430584045,-.014950531682345641,-.030954419784185765,.18711958320008767,.2158829444493494,.18760853314788856,.09582257029334881,-.0402218539555546,-.07324981058296466,.00427782188615114,.05578173796802546,.0821923573331367,-.012445928409250004,.1770510242908752,.1158017657021186,-.2410736481902913,-.08583678680040902,.1500735566893015,.2849842667051099,-.14535341708480665,.010094356111924016,.09591670670864094,-.29873458100190536,.1787464039020454,-.22302317330187477,-.1748799384747195,-.04371284561005248,-.11620374099610192,-.23806617911756578,.004300379571986694,.05421223197894738,-.11567683342313427,-.2933900664902095,.12100456390445283,.44189519506953484,-.15496760773507526,-.022722335616015554,-.21405336749991405,-.020547287844339426,-.27084401995117324,-.09504419903562081,.28060020656129225,-.27074453207286275,-.1368725199810682,.17055001589057026,.3385971361439663,-.27109736561922526,-.3558606466659258,-.2653473240178172,.08294313791592142,-.3584667824051136,.34730776588311096,.15494380599014224,-.10539865152649901,.09482805238671117,-.10941051423376011,.019908568726464734,.13261552724999176,-.04972481104338111,-.1069662016590855,-.2543870855366049,.17440858544741758,.106900230981372,-.07767114581696778,-.009371867736708964,.11752430326382256,.0257521198608271,.06802819580542684,.109859958346973,.19781198384741466,.20369617905172333,.17359025162546643,.16858127865343278,-.07158828773352177,-.02785843176203006,.02699518121637298,-.04796739911574098,-.1744826031817358,-.09643156876483198,-.07082085959804948,.12975749185900132,.10168587218941928,-.012905483555157513,-.007214488876249814,-.0763086595547202,-.07477688141721188,.049861846430829346,.13897204424792844,-.016419927285720337,.08786080203387957,-.03555942986073202,-.03426567268440027,-.04115834635724783,.11153373670141298,.021064007443562835,.06665374839578932,.03112257100450526,.21873333106656628],[.024271907098944792,.2115259074770901,.10968836638996259,.059160601041090916,-.04224950737739813,-.0874798377525959,-.010602704832708497,.08245487941116698,.12207559803506536,.17548011074082592,.04848664317003136,-.10566377044967423,.007271286441249761,.004826482494559969,-.03710832182179358,.03696918924262571,.05926595272339992,-.09112427948614352,.016031767906761155,-.026239172447726146,-.05902193542915756,-.0886727039049454,-.07726406615726103,.05627513322316084,-.05104738191599313,.02338781460654444,-.017324327411277735,.012251187743591036,.02566561133241816,-.020852848518282376,.006696834539652391,.07368626960106157,-.09990258345110824,-.12413190403188956,-.018048937015446576,-.018586297307219612,-.04479300570534413,.017307608148219817,.10244118561809155,.000327998002201714,.006467135179971887,-.1022459225049749,-.025294477732110757,-.03444156941877695,-.1278928232704679,-.022149310544806594,.014835263850125215,.12138287707221934,.03188295858123323,.032470116515611644,.009095652074956856,-.06347866160303998,.10606577340598457,-.0991694513237349,-.1638198945736264,-.14343340117378295,-.032182651726264416,-.05801804456528885,.02291614513355533,.04015014638434972,.1059135990465968,.1170336117688416,.051143184046495,.024664034757263892,.022331370571566023,-.14794372876832823,-.04622553224763706,-.05297556705197623,.01763335871577283,-.08308803979537915,.039154465132006294,.08355877555883494,.07437151644464061,-.010152289765342187,.0052220614930217485,-.09477730846615871,-.07107653498195644,-.019630080815721984,-.04040811670233907,-.04665257173207507,-.01262859087675526,.026326307291913,.057107467446696494,.09172417840424178,-.0027241597818778163,-.15413869342653225,.04417172095985869,-.037480373466733836,-.05858180541180702,-.10281951751655544,-.030064069517148434,-.030479321832951416,.09260783822417436,.04494467880990302,.04540409714496889,-.010356704162888877,.006004097299951078,-.0740531500924772,-.04177688565691491,-.0005014536555735596,-.03499091395166101,-.03612566084615568,-.04510043410920088,.02586124884961563,-.05321849606461524,.012117104458325631,.12779186353261135,-.16438404194145712,-.012740091450395306,.01918508147926716,.08477090641897354,.019614329268121566,-.03480721117425563,-.0017216001979017959,.15755321182059503,.005374991982287608,.03944387013558573,.14282549594886118,-.04793440470126041,-.10055944078648103,.08325739558742525],[-.12767186993116422,-.06241249849097049,-.09414071614574093,-.06479614654348836,-.01780983423676153,-.06909977220751642,-.023074608267024246,-.017483825565269805,-.0664528454354431,-.036871983239677726,.24167468985862534,-.043100584664250055,.08879797960904616,.07457891471218783,.041306113766767155,.04109954163943659,.054754800348057686,.0840866406961843,-.009724776925342373,-.049452947316442196,-.08113274209477493,.06480280977245492,.05833403551933676,.04885826397449831,.0030690275504097336,-.03772168814794402,.05419419343854186,.008135356718494746,.012381719155275236,-.008132915823203319,-.05345605868496609,-.0916530693946343,.06463035335955475,-.0018237773961607869,.07998316861203618,-.08516832162278348,.0788338200352338,-.03684140700570926,.14405274156018966,.015136780025423867,-.15091802612252794,-.03598558709040784,.07090091761370856,.0031644970002940084,.012721805049422611,.017055461026181423,.03574043553568611,.020664246268072436,.28800157393241543,-.04394647689774655,-.06990450386033469,-.028875975086598206,.013241447478979717,-.09393278013154133,.007354819070810997,.021222759365131662,.08867432010496162,.15572293451123756,.18553868377788824,.051415801134578276,-.3081375111639719,-.15349895484431902,.01561395969351688,.03325809279434146,.007274046671437939,.06854592169946613,.15637538018177105,.027911256742741787,.1847624277661041,.01747681129365855,-.3288251419976758,-.27338241826081056,-.08244213190925273,.04034605235864276,-.010354560475994028,.04833301714323619,.10853011009473441,.20222782945874304,.06016381619348406,-.016735356900245406,-.16834359646244612,-.29914164075483063,.034354440985680856,.045517620346114396,.02028784764878888,5420636718756616e-20,.055521485631890424,.07856131702031662,.16849991072472859,-.07018428877093495,-.07948858451510113,-.29650023726543373,.10263152418119534,.11173763966050175,.13931259707716614,.026570560269986006,.08165824214947512,.08182791954792654,.08309841695532953,.11143074354409321,-.13932942872613946,-.22917697770142686,-.06435192708336077,.16181167668638935,.2516725917047546,.04248064722329049,.08831818496302116,.10703227267716384,.09766745183982732,.24656917917661206,.0007754387716052205,-.20364545582535332,-.1289119075706024,.07437188613829426,.25015791541828036,-.0027411825679765148,-.09112970905373685,-.23136145870314523,-.30385031086279557,-.14845722077749013,-.10313261555912184],[.004730555686647375,-.025050870591785984,-.005842007282679279,.02307655688894711,-.0021831092635067884,.09320507166130654,.16891912625347902,.13474245274119315,-.019108929587973292,-.10105317234996111,.06261943633798375,.016839567168991848,.011719509323776495,-.00134875178646586,.03840722773166853,.05423056305140707,.20955349223966924,.05131056730763628,-.17892491374001546,-.15156726115951782,-.10802521892872952,.021081696304648248,.0505265958683242,.03702853564819125,.08408559663964328,.0971944530077457,.11629929727819752,.10291870790396596,-.16562571881514881,-.2921066043789103,-.05420291541114747,-.025850956821510424,.1369780722645214,-.07143272643021953,.10357501123134705,-.05826651239785307,.04189860720936701,.1230315434450864,-.1285936576462311,-.32801177977089907,-.028641152078696178,.13915118347077776,.07061244591556715,.1786319600769697,.03674048532849944,.08260422396030954,.0015218003492134188,.09369582535674857,-.11859178530895662,-.24264276329284795,-.17081519888982888,.3193726601204938,.10806272202525118,-.025075843766076897,.2890616633898619,.16912014921604904,-.005992530361836397,.11216887671301161,-.1176651180296165,-.05510479012461407,-.3507493830201991,.07552167121245068,.29101950812834954,.03292404572723242,.07392491000907583,.13285512889163054,.1103248869067967,.017465838707485977,-.008877070377960719,-.12337468108094925,-.026449945142423825,-.03257443380049248,-.17411766159108377,.27114933838313676,.1301898019063164,-.07233304955924891,-.22304228227998185,-.0049242594509487925,.062008119511538555,-.05484288082188994,-.07783669190067082,.0620964630329456,.21462918302865225,-.09288225705487943,-.2827276046512071,-.21340003804680172,-.1728612669484559,-.2332036825991265,.10997606955733633,-.0075161519634147494,-.11006988886634309,-.0034270246972780347,.0785910676375492,.1034985859689351,.2543107883765958,-.1592651072899461,-.2703360047929644,-.10635029202050295,.04893473787238945,-.021263028799828415,-.12238693572764943,.007005475481166264,-.04236502584618259,.06762340501699357,-.048466809027905976,.15102700530288016,.2213293088726995,.03973816092968011,-.08447965715835702,.05146220877494188,-7.755161048478287e-7,-.009743711957172663,-.011728655305820936,.09125484074111134,.030319653452282984,-.009868356036538815,-.004386704329111514,-.06374454349155942,.18971937116088505,.08390672246062883,.08162238154222203],[.353966373646464,.2234934652433919,.057983505942766994,-.17547583945845743,-.28193274673617186,-.03504651024167714,-.061419133419918656,.07306424533872763,.061645400882380796,.07730935757559629,.1738934451295475,.09258470374614886,-.19128325987736688,-.21873404610448355,-.15487049984698836,.14901919885041942,.20523341842652873,.08939779439350315,.029360736601431098,.18968274233971363,.06948137386920081,.22547823381719437,.09354627997783385,-.13281477240705325,-.1771612465057681,-.1334592215959362,.26005342174676893,.18501277795048918,.053589401248721524,-.047950155872760955,-.06845365886286399,.09067110082267779,.11835517359698741,.067373868734555,-.07958946496632971,.00040370973759143447,-.18012258798893063,.09018024865877883,.17515551139257118,.06670413647983608,-.32348954157841836,-.43601738248961186,-.1534376785143956,.078031085272144,.0026002087661166073,-.00683081689257263,.25009089531454276,.08659309491471537,-.2944999843548831,-.2805784904294457,-.21672085891086823,.0075953856677573595,-.05735734527500479,.0507856499257783,-.13227728339293254,.06381628014655549,-.024929518821545885,.10319690016698474,.2736185728743198,.10838211070562667,-.10088643508412568,-.3663610844763572,-.09977069874425773,.16157118049598923,.055579136554848696,-.12792118168652652,-.09778215315059746,.03895002926239646,-.011346882847028943,-.005784054092837325,.1616038060142092,.2273189551175043,.17202324199924374,.11473390762833699,-.02500974001443315,-.012532965249099831,-.1828653485672124,.005861998482054848,.08763706261945395,-.037284740577833916,-.02890657791152753,-.012640604713656682,.029752428424497962,.023715793388017523,.018978087051175017,-.06887159345950368,.06234408583728679,-.02972089599387552,-.027411765498387287,.09285676183975064,-.0170305764695348,-.04056883608692545,.028206942400903268,-.06699101433088019,.018045780660311594,.027421414987953724,.026028854880743246,-.012256884841293818,.07194600621797326,.13443066125142392,-.055826414183730286,.029494113298897784,.06766922491748559,-.09608377106190427,.02915667166871025,-.0005704450156028551,-.1012677530478366,-.02499949517149559,.11149857559031927,.0680801807269178,-.004536233801044023,-.02923546591451348,-.10839343595243112,-.03088096531015025,-.021535888254581387,.03491673509206554,-.05557277843848245,.14692935465907733,.05709297000138028,.07005377086717599,.09282952325090901],[.09030155279624164,-.03223350510005364,.0860114341421496,.05765604123897919,.08500173811685355,-.018556863703405688,.10987613215108859,.15413524848686627,.039385960963009475,.04734658874791156,.13260893050724268,.17209307394684362,.08797653562398965,.10797764580249691,.0630046346605018,-.025038437509689246,.0015666115477200454,.04229801081355139,-.010856979351061558,.03856503147764864,.09115043454113361,.07042935680799814,-.3396544044384905,-.2162661542877142,-.07979304930410006,.05248190409555156,.1173724758043013,.1235642779570921,.14985928358577055,.15132449797129932,-.02085384010086927,-.27884211234458556,-.36994374970749644,-.23348038589121675,-.35031284933769036,-.21235792854120503,-.009620330055204282,.168787422376413,.10884138052914208,.19509683780071668,-.022160352730551752,-.13795256421389535,-.3822999217754979,-.15708260361782242,.24650430788233268,.21040788017836443,.003888187609512664,-.15092402578388575,-.14972725998264072,-.2765782498853994,-.13642930996703762,-.20644056003736766,-.10322436864055039,.20311966005105042,.24971877621575894,.09878430703097159,.050021919690342045,.11216084960540927,.008212498111881836,-.15895814488393667,-.24966006782360367,-.22420253854921096,-.08186709645977171,.16097051245293995,.13084583517748466,.08977702362367761,.00955363650622601,-.045308319112909445,-.023384874480698578,.0572702815105712,.11323262469471058,.14403681369736615,.07651415697047916,.16610902479691686,.0012913967538901033,-.061224715322185846,.02333831592924522,.04630266176675936,.04650233773286035,.05308009267823177,-.022080323199307,-.016463338605887348,-.02458989511744046,.036155104538384816,.01685267226066283,.03835086922298872,-.0316232931305202,-.015008982063713011,-.002560016668288506,-.044171433583490446,.02013631082858025,.03892295204420082,.023164046669806176,.018929516041055958,.016294884187040823,-.026449976012229093,-.031755575007436365,.037952166059081735,.04783026936122837,.03908092702128371,.01265262678231073,.019181657421850795,.052408264758088366,.0677715824316517,.07108394325267388,-.03664644384012068,.13604484537303868,.010094694913875435,.020674151088393357,.050958350828004075,-.01728930686163349,-.021563726054119672,-.011484727923504814,-.07647678867464341,.002591246971674878,-.03505974264828875,.022443138066393878,-.022650773632337605,-.01342746115044742,-.08468406347695795,-.027860149727744976],[.22047100243692846,.13488498444135597,-.004531354429943388,-.027832268966114612,.003192790356583916,-.11096409714434197,-.14950903865889092,-.26496526299411616,-.004669726241513586,.18622994506205637,.4302664490904938,.083650446683214,.05711258633200342,.14220244940637913,.1016853991938502,.09773127609774497,.2161248251313766,.1544665764710919,-.13859854879935934,-.296593957844271,-.1749736404727628,.1981769863999281,.16783396706831674,.03535728114230485,-.028902513964357626,-.021290874734355772,.08722101311995752,.1695855748932285,.2927428283549552,-.06114659798081619,-.15119828846582967,-.14884448122495453,-.03918965843981135,.04540786676769229,-.07847145786098313,-.27300141965542785,-.386456981797718,-.05975952205649149,.17695994497522133,.15889943771092974,-.09004526718230733,-.0058036165937682405,-.029934384123982583,.053751431227512886,.037133238140849054,.04063469715995631,-.04801997048835674,-.2106977260916849,-.14410169096947742,-.1866709303028477,-.28265061246537715,-.00363691950510249,.2224073985185515,.03935330224080641,-.008678580780593678,-.1503774171375511,-.012859139058527952,.1563515063208134,.04229919735511681,-.2926762526373937,-.40523406706284226,.09651810449996288,.2315533468508727,.135427422332347,.01229163523628965,-.052368935922538475,-.13532074699031243,-.033103483521052836,.07332780226049335,.04465702260382873,.08615140353256832,.2738534610945499,.1626748458095355,.0615257386308546,-.019745008995468723,.10503228658291718,-.019420795585633283,-.10476767983876313,-.005174830751616261,-.06961208659767662,.013174971860819291,.0808472332726217,.06460137356274206,-.021748261542462316,-.009428880981830558,-.01628181963249114,-.03634446590498919,.03045941582072914,.056433611785583565,.11018103278275186,-.043666018041548925,-.004255561008099956,-.07312417510494831,.029156650518305273,-.0457823133053314,-.018177965266959403,-.026033702937208858,.06274239508732427,.057057268610088474,.11269084904432485,-.014280509829636322,.06609209338269165,-.026887244247685523,.015276292205476869,.007659209356699899,-.04890289344426344,-.10791896457597597,.09321014713625528,.028852996778161395,.032763059790276036,-.01149082145704293,.17616247675226981,.10570157158224326,.021852869595400226,-.0058603280864050755,.005249575575618989,.02060800110040724,.02646204855256118,-.0826182858214727,-.07935218525069834,-.012264971540938308],[.02446321233144179,-.027351907989107187,-.0232645712975229,.11579335581687163,.1254129410075328,.07165562039677403,.05907599632212859,-.02112538385802262,-.05219027448637403,-.0033401470291263557,-.00845371711306439,.08091240385900585,-.057403073303803696,-.1672123397226157,-.1580049626202198,.06375355403319963,.195605998224537,.07141394017031064,.11891901474904588,.03716110055836719,.07708690931238334,.03586257381477892,.13139726047159417,-.11150130163799671,-.040614316851042415,-.26027911447712615,-.1892555532237831,.06608252557511399,.13273683807010106,.03484859844309304,.019787968851060656,.014094611768949439,.062232334317776306,.14344093791872772,.04285605684136319,.10733309533450026,.009822385407151364,-.23833993172951007,-.21248877298655605,.08427358488784562,.008842342714184687,.03294820774049226,.07173397245537652,.006321699992033886,.19400277202336147,.014862104507331025,.10869294352091964,.19642768165098223,.010298200186124436,-.2922629400577431,-.08001915271679619,-.013688342983296166,.11310866378660053,.012927749370945735,.15630089388412413,.2579716446934899,.006868817642695951,.15135988266283087,.20516522088286016,.2237748670112354,-.3761870680703064,-.13386204003429708,-.02044096415441802,-.013775408344473918,.04057333580258529,.05518943736730181,-.12708652754184502,-.05820955144607966,-.008442005140080477,.1752271553524188,.03337012057051414,-.18112622842082776,.03421923310848149,-.11090094662237482,-.14629941730977009,-.006969888247914585,.09479625983069603,-.23704721824065272,-.15881064516551835,-.2284109786264935,-.054433255322752165,-.1747399426720595,.06764352517562967,.08591510219394204,.06346388421453882,-.02090061906722552,-.03839507219106326,.07198571261259104,-.05257094054098344,-.09266739122762524,-.13826762537196235,-.2490025436972389,.047882934688813134,.31223581965614494,.08826603319767183,-.06280990428624039,.034915131736476576,-.06970806334741436,-.001886525747319484,.09809542003362959,-.05581304445284347,-.060679329007625814,.05606187061664643,.17983405258220592,.07431375122226905,-.027044632224345715,-.00044358577837397273,-.067457849836666,-.04545314563040439,.04296890766427394,.0793811229032145,.058880837077551956,.16904284405336217,.010963007005239452,.04232145435063103,-.071452129585916,.043645640277912456,.07705838003488835,.08022355663312197,-.01756140110947707,-.04448196078210949],[.08454947106533715,.014073183835550993,-.1230740160197884,-.06106928366319017,.030869726497065195,-.09312115465442286,-.0251680854955023,.015403998680830158,-.05696565475512205,-.1083328369385506,-.16715071572866108,.12222148379971674,.013801001029832352,-.10225459810121829,.0023687253436320416,.08739415653391681,.04921800242896775,.029333823960360647,-.0008802610574126374,.11339493779706229,.07952956423592335,.06489349179476962,.07666930748413499,-.06308226484188081,.03702333889463327,-.059661049037454804,.016600380137564735,.09131425731989115,-.011485508114042087,-.09993245361952255,.0651595327623546,-.037572072667034676,.01446335550350343,.06762197858236785,.002545821510838972,.015802700036307044,-.10993602991728399,-.06941914935714077,.021295475983666365,.060596105301526815,.026423669980028666,.009900557896967158,.06538974328391674,.043327597311754604,.009551072791873144,-.07647475518702684,-.034130568923233656,-.07509892649043061,-.049786970498281125,-.004217944264050741,.20027598699372212,-.001573509922832908,.11546201651339859,-.0078019181260197,.047540267194441585,.0074073899524036285,-.003566145239787183,.05050567924482331,.07584713312149688,-.14425580282111874,-.24270846769727125,-.04607257822500753,.24352730974674286,.10854500954947886,.02131873964668131,.182084369062658,.0704651064976845,.030956011752212256,.021330978755012248,.016480979771810872,.008619823357056008,-.2974229047198671,-.41813209224239584,-.16138204950131452,.14572029672416026,.1694280555459074,.15422865108745415,.11272693480731671,.046495243397517025,-.023984750652771926,.12619529270753593,.029740806671949657,-.012887870344092549,-.11865448348338473,-.2593300591669442,-.10806327708697712,.041596362223892985,.1802209794471923,.10169601556475943,.018289098449946008,.13183884426091172,-.004465981018493832,.052209042897218866,.1723710149631174,.1489240004557414,-.11529855402495276,-.29240160552568695,-.13273718724417694,.14348887171904712,.12546368827384355,.1196988780241929,.0966060351971295,.08392920071045752,.24096145794638008,.1815913879707431,.21525720611281124,.09481713746061823,-.17303248008130043,-.1675082459920464,.05318863681832798,-.014842848833645155,-.1326281634090825,-.22760143827483528,-.2847413352046097,-.2674956904116588,-.11356293770181579,.12871811981161485,.2094039432720809,.03806786773053737,-.18388869167744798,-.09872177272560079],[-.2933214566389058,-.07667357016545112,-.030749933623699748,.12027682321697916,.12710910454233743,.05189666199799811,.13913969924673966,.11540205050551869,-.06812516368464866,-.009023820729079299,-.2910170972813963,-.061268943436541726,-.05450635008685455,.051033716593179984,.012541368369093815,-.006469324927334021,.017938091969742803,-.054229542502671674,.011335519373694994,-.025653575674649303,.04830030462684408,-.11406149945577017,-.024236484184631396,.09793951365593359,-.04313742435573863,-.07078625551451188,-.0684965936363334,.09685754375386202,-.06143218109610647,-.03806383239276817,.05707117474284797,-.035894598788348775,.015329272078617107,.05650425000529566,-.01033577367928705,.027053972547184557,-.034952760442069394,-.012868480551019405,.07634283343591436,.04732229831998288,-.0374625981610526,-.009397945142425035,-.014027283741116559,.06456217377265523,.05372171771661644,-.06759036201053721,.0139109516369285,-.016445194379612716,-.019461686721338484,.010439817092615947,.09941813341186459,-.09200305824622829,-.01811022986050546,-.06911649213921842,.0900852700931869,.054159665897273314,-.0018642885725487952,.004059758827055469,-.0859460118760888,.1086179140161275,.027099949435567414,.09914159471687442,.0006668208775746365,-.057660689819417535,.024056864968152455,.06822140018667797,.03672191197686131,-.001371709620556029,-.028205736414335034,-.04575999931494447,.053361593077059094,.05263111499428202,.009810392941796912,-.012203636403062709,-.16438519522356373,-.021001549026839584,.10556807205560682,.13827298919396377,-.007021314516612202,-.16276133871590864,-.18906392185671284,.05990413388935295,.10225970117457966,.07403976488270332,.004285185925191032,-.1845936659626026,-.06968379491636967,.14111364483842084,.12749376377877644,-.10699417534257408,-.058972794911818865,-.027184342145305414,.09229414727274587,.04273077259891042,.029013756855529385,.09155292463404226,-.07505670968340764,-.13842728606415003,.004980535912558804,.009737695191306493,-.17762638306662676,-.053055611222672334,.005121251385045832,-.03116006824631598,.018285642027540898,-.06298941054579099,.008767262260065106,.04540640740806459,-.15525094289000227,-.1042418032870643,-.3385946149081417,.0009293137713083342,.0715237990978847,.24813145448099272,.17764819914849853,.054741690878753094,.12448607192690106,.21578173215435317,.11743015273985927,.11810059765594877,-.27756282596086734],[.23860743861101838,.03722048139150523,.031909831457287416,-.14966246683358922,-.09854985223320224,-.09509134530775376,-.03080260476878982,-.04066312098825503,.017506583940867015,.028513850752452302,.0830596487648795,.0012190679580447311,-.03322879208763989,-.06314210534576002,.03554495240244422,-.02360819898883483,.022431271094160515,-.01882760371767553,.052735695833279514,.04158050289699862,.031033870999142746,-.020524724375181047,-.0743775543137551,-.05885156877786435,-.018416900291008273,-.020185360544406894,.056555515730563666,-.0026618188225642214,.052187819479918976,.12531509017121725,.019467695962588835,.09699328063194843,.05262931447147379,-.09566833700478698,-.10779966462682439,.04701333204652823,.1288079363853076,.1184985604004099,.0469385253190267,.011551507295904942,-.10251614984375894,.03481915394565334,.08999348560140583,.11883560873126586,-.026071450999984924,-.10858930623330341,-.02899296545303913,.12481231448842042,.240071552691944,.40869246369383216,.2610526030445546,.050071705679084866,-.009946724542624241,-.032287346107244264,-.03788110437515235,-.0425405367084845,.1804739272670992,.1072902350620442,.05624496816269857,-.45229392780009436,-.8393105202937271,-.32646697573387123,.14835849608015655,.1562873589444303,.14740464227965588,.04845550723214104,.08315696608407838,.09633095557582368,-.04253114222340426,.02499194757816174,-.13244791761311936,-.16920198721111196,-.4644054259116293,-.34744594651326566,-.04738004288146105,.01476231865355268,.05673622859242153,.03669477148484114,.013278997131524375,-.05424778359736634,-.01483859686236641,.16411279929712191,.2849931014187217,.3327015399151244,.0779326456118718,-.21057989235427169,-.1802826760596537,-.2879924712549247,.04902004026647146,-.03705750354431878,.005205481454092546,-.01712557992945455,-.00346994888954498,.11284391028265023,.050041748407580855,.039230018094625674,.08377861787041321,.0301096552457792,-.10733376231898197,.052780693840456264,.030825522124256793,.04821793526249081,-1217969571825489e-20,.037877834340168115,-.1130077331768389,.025972330279050104,-.040361720693582716,.06066255131600193,-.002917558867538264,.019233415533092907,-.023247268944077137,-.02426803365936525,-.04805095714874434,-.03910051253226012,.05572428616165724,.01959390543904424,.0019309926921863563,.05287495509962646,.11053404299243735,.059716361896183456,.06582938745587003],[.06703351499989466,.026572971026187026,.061902556598039754,-.05061268032779824,-.07124686056496743,-.061282119254154305,-.1324398852622981,-.07738291307031675,-.03298629915876127,.050994057269436274,.23205864835108797,-.01742647772753282,.016764191996464284,-.004526287312756019,.07267955193736919,.07214327666948436,-.025652321290280722,.011718912127102923,.015719207964445966,-.14235466059508073,-.012765609360204759,-.05581518967549461,.06222843069200659,.11098589289358554,.1277675820548782,.03905398744735568,-.010542995704417739,.05252155701041346,.04550010649059387,.004755199611933554,.040037242307058615,-.041869690382639844,-.07774364371048634,.03662275644957076,.026947327196116463,.00487126551883902,.011449791638995233,-.012157643728774703,.024207033059366057,.0832834587920158,.0798380024536907,.07361642149700239,-.0724124752971182,-.03988089295601278,.09027496435082809,-.005939762870456632,-.07968319294885341,-.055948766561327426,.16964650730513986,.4619422658594891,.274371381660658,.17637187708430974,.005575486968196396,-.04096932205649082,-.04839114608603749,.025694944612614096,.09998296774411645,.12605224667151532,.27677019407409076,-.09038245918831778,-.7236672936582023,-.665420163928323,-.09385060419247812,.12499856033014405,.09099751183736064,.01806746394072714,.02389578130798624,.11109874613217101,.03372618204276939,-.22604680738211497,-.5579844807375651,-.23540780599042138,-.09480450351325287,-.09120845911429162,.007777282093728341,.13248330185889684,.03986004692941836,-.25215810577191916,-.20250122934799764,-.17881248119439586,-.11431317224159114,.2967685677091049,.227171515318765,.2741046467956507,.04964877358081762,-.056866369619851614,-.06478477710546181,.03731336719388256,-.11706718911764522,-.05250186940095287,.047052857758273475,.024035553726984002,.13017390712450239,.05620612147178229,-.04023766931372118,.048845435975711976,-.010397341013248448,.005906105784847723,.038085874448897966,-.010126504089425892,-.011702353668809645,-.036778984080859556,.010230544538505373,.010568912857967669,-.005032312616026352,.002298236071386281,.017050551716730533,.016180147956727883,.04610299769637821,.010501996704126618,.09256731572088686,.07940094833931868,.10570431930113847,.10682942997287241,.05721856104500127,-.04967097657754896,.04269303935960564,-.03868401599168558,-.03950368263198317,-.020740434284436046,.014243631289787631],[.0628531917885396,.07071489693059246,.0043518201422265285,-.02666655406813033,.04452549232912813,.008860926522419946,-.05943194592026661,.12208756283717534,.10823813013338997,-.025642885151491657,.055452978682526785,-.030909671398170552,.004875453431961385,-.1108275207792192,-.028823536945349906,-.005046409915945169,-.002080191609223833,.06515373811494736,.004231808753945118,-.01650245863095516,.03936868171171452,.14469597694100828,.0361474181836422,-.025105477318655298,-.0029752642733928553,-.02723056752954177,-.02650028085601097,.05208373347532018,.1593909313365149,.02911085741998974,.005887954749810825,.07068365760062763,-.1050189134990479,-.012994883599022608,-.027730543376280184,-.038084041899524274,-.028850174915976398,.08889910768758223,.12716053788475778,.09387808681070002,.12445983906256813,-.06046361458863396,-.12925780819854998,.05885870825697016,.16394889767626275,.06625876498139954,.0403244530383884,-.035531467041199284,.07478276042279453,.027441833600079138,-.03454844586249447,-.1523754288892702,-.13604857549753155,.06514673541554891,-.007426474884044451,.0046040279752218305,.07835195010218919,.1297338379704709,.0956815791371677,.10648034656296729,-.471163369507132,-.7625405429183585,-.3582093555686478,-.013245699569145133,-.1330263189646133,-.10815491503392521,.012182904199392754,.014156573471716255,-.026231788982935246,-.04005988132301978,.013820645260828969,.24427073416124961,.3073995405209625,.05052759501270948,-.02309562329583871,.03293769077258174,.08587868851219474,.04110788258651937,-.0006755008402004326,.03830005820641175,-.054725024091938995,-.03259687179316071,.07823103165214763,.1687303908988761,.08515646972460937,-.07547738102066995,.07584584414979197,-.06561586880251555,.026372053076710963,-.012261443544603602,.018816373445303562,-.04602102643070516,.06367691185742902,.009164298437269125,.021381107032976132,.010298974711400581,.025836499120846023,-.003203403742612264,.09385994820963858,-.044506983815036136,-.00942753466249503,.014356944789664046,.0003773641960363172,-.047078136939779545,-.0009669706311834147,-.01014675428259769,.009951687280227148,-.0004165588952472349,-.035460419946042106,.013200958086152861,-.03459767773144218,-.04073574913457678,.051473603477795754,-.03068228734251964,.03380413458858601,.04377149062165768,.08986671687926767,.007630195440781043,.042985878682231804,.007334828402367863,.08949838726656334],[.1558856448193424,.01562994008350531,.07753118222162185,.035198943491464685,.09861500040811498,.06922036778641759,-.05101584537030045,.01353173349292082,-.16689427943715818,-.07793915572307779,.021709195750235555,.05142762271778331,-.06434889451670449,-.015227872851937468,.012758529221202047,-.012491873951225668,-.05254474415477606,-.06903989975126718,.05043125423098552,.03666359516598733,.10484513386583763,.0864155605488912,.050031783118376666,.05699360617899488,-.002548962981594405,-.0007907985441265586,.001499228924733878,-.1832893267901335,-.0010930528968453174,-.05199522065295656,.007617813274078844,.05013961775552819,.08366071886103055,-.028368100712067607,-.057670540943290494,-.024746519800128597,-.17552062616716269,-.053853554159497635,-.04949241504826227,.0280958047888709,.1665673976451451,.17516444743795742,.1107778641386053,.23647066109018683,-.019600601715928354,.0020068984825111352,-.10475575204030461,-.053073335318213274,.07898428406768707,.28336794782700825,.35165561151087343,.20795642216210236,-.00514228127184084,-.06619375962902396,-.04904726214441646,-.035658104876826635,-.05320185516400289,.0768025784616267,.29382065156517917,.27041543845259264,.32595175559668715,-.147970460039699,-.18679187035905376,-.049878575994829755,-.09967059890064993,-.04029577406911841,.02296184564424504,.11787385733947886,-.0725774376494295,.15220959346283963,-.11057067643262666,-.2750887317897437,-.22643642891650884,-.21711971918615147,-.0656735501900763,-.052040181244765185,-.09195969857115036,.052341425230670466,-.029014278335724536,-.02648664939513143,-.09917608123943031,-.11757437729038858,-.13254020998829666,-.07632698439949917,.07995522456749951,-.17744204932338672,.08037590540456921,-.07385621532757777,.08773958673979658,-.13914743753820652,.009984405808856886,-.058680483231997344,-.057028749498486214,-.07979372462974618,.0015768478264207159,-.004152634914412423,.03459730460531342,.008664587126902684,.05726941728243845,-.026265220900470704,.04809355192718936,.021793273125612952,-.11755126367641769,.0004993699577908323,-.09136988608727073,.17327200177522672,.03157285949795091,.022296920170734737,.002804071952933196,.1205545883355781,.22973360335482984,.053206330310550984,-.014610065818932663,.1166412205908703,.08275817531532122,-.08917179472851308,.0613094636224925,-.04112368177803037,.0013240930679478125,-.022404870056693074,.06651364833047835],[.10641476126921573,.09479186002008372,-.0315285745450013,-.0686627425673651,-.04558326470604901,-.044170709745188025,-.06237336850034459,-.04088203520378501,.03668066666622283,-.03189063917404211,-.088635427534217,.0724860558179567,.001791308761835142,.07161810650829248,-.1084084708991033,.05553720862803699,.02079069078849588,.05266823137740509,-.011257567794659987,-.0845031454727679,-.05535460216235832,.06947073679124802,-.028454654127522738,-.09220412520837246,-.05913864458612066,-.00886041918768854,.013755932301681914,.013007606849729902,.11916500018693715,-.005476677104839456,-.004638549694124777,.1060717732490861,.13190402522499708,.033044593081882234,-.0059853447957998185,-.06320300871293905,.042930422332914636,-.07752013732283718,.10193484761260346,-.1276802490146556,-.09156687259817076,-.057976474892979336,-.13595312824385677,-.048451573720558666,.011191570795142991,-.00688513805192606,-.09662145108891612,.08177243143586935,-.04900728572854625,.1976245378232617,.18536337530011557,.05445905362650444,-.08541554314837492,-.1103049477795886,.2678431056696512,-.04245325920849799,.07976003455399179,.15028246342565876,.27326896910753634,.2358435331414003,.02923823551667206,.14907460060498415,.31048708671669695,.40128067591951677,.38540963021580366,.27326818523111684,.15636736514996508,.14854725998180202,.13416742860268516,-.1553995297347727,-.21625457306714183,-.2818917855090248,-.25441318585728456,-.2439240989802351,-.045056214003550595,-.1358388455552396,-.360465262117296,.05410988196640397,-.27377967101430223,-.08756863130760863,-.027320638024760924,-.03926220394642365,.17562805271419396,.0038011471806441294,-.11815538049076468,-.14961832586766177,-.07103473733528481,-.11256171108967788,-.06734756701569736,.0433174953016065,-.1030173747997237,-.1512534418799959,-.04534821129294686,-.2275535515430907,.05019965344487859,-.029910369292175915,-.1088343982348304,-.0018044946393091232,-.1457567912675976,.009524471365601167,.017124703501667587,-.003512674529803056,-.058372842364167565,.0898400610688096,-.043367454110254694,.09673874674903568,.03700212707151404,.08699507184639746,.0198918856448589,.02114467720396908,-.09345703999410607,.0271127587491565,-.10194181462653785,.08387926250693878,.07507598385744273,.050127083431861647,.08865327972783277,.0205252376574786,.0861157887475191,-.005491408073156595,.14180153649129834],[-.023176335194873693,-.02454462131799809,-.03235787579333514,.06154831745087844,-.028031573107483762,-.11117017121562775,-.02855717336520522,.034625006110213255,-.07697264256777937,-.011745965892935112,-.009959765051347658,-.0542835516019904,.04796909671149692,-.058234554069283725,.03220334560199091,.03182887188613838,-.00859087753770603,-.018539673712725524,.0594933266712222,.03266716766061176,.011822214610879928,.011903166151583794,-.09130294980595315,.010420910286473448,.047573929466955864,-.010085595935941855,-.08213100141148173,-.035237661500281195,-.00953659972525775,-.002108262261587307,-.011204831036011803,-.10622317570891325,.008867306909228295,.08068204658678166,-.09053303518527786,.00920033185400368,.04757968064365228,-.00347364060163316,-.2609501387739116,-.1992357096012872,.12707903816980357,.07681711491674911,.008946773095926924,-.017430379757375963,.27183434461804845,.29540869945884163,.24001157736704778,.3283466672975648,.3045311934812409,.1573830891516765,.27144447211271683,.27186726673366013,.31737875140339933,.17968138137001657,.34963615466399944,.17947799656684207,-.19852203981785516,-.23131890333905614,-.30348558107287027,-.018142171891952316,.3280178945510914,.10087717573413153,-.2737313642446935,-.3440544835785095,-.10799042948918298,-.028605058848439946,-.19185111341784114,-.027745548740637616,-.010639473223188992,-.06235838944179839,-.22873300656916182,-.17306684979686754,-.10579424926972862,-.1259471270541468,.005213374464294457,-.033020737140507975,-.0719287337159639,-.0840423740133801,.03728925720093966,-.14901085254024224,-.05187797466416461,-.06244982997776256,-.14709231061360803,.018448830420891835,.00395213381123892,-.07925706662867615,-.06834198956830408,-.12331516121995928,-.09956349294129528,-.12282998155312592,-.0063813760831064326,.1523734333688188,.05622547857018989,-.004510692004970673,-.05758843640393062,.09840261205418808,.02709244060964458,-.005126527871872316,-.1788182638868932,.012716901548097112,.014254282884224326,.10921274021001333,.12698286341450832,-.04126909131947766,.08552049256409998,.04384704473182563,.024665056914998047,.12247197871922337,.1343982336574217,.05619986570933662,-.07048736575183942,.05011496173948175,-.0003055425117918717,-.002306678299941481,.054045599348802625,-.05888984896473381,.056481833161273906,-.07470125703659997,.05430658304758444,-.00244846915271469,-.12795957386439072],[-.008771942383881112,-.08790268555612359,-.0550523469305907,-.05389471931288859,-.021765025216602493,-.03249620127490992,-.05393652454524279,-.05960180358333237,.018682206945497708,-.02404185692664896,.18080120923175,.013387152203562694,-.019460024812665497,.08584050842604711,-.04295988833316678,.05613997974719091,-.007482261747828851,.07263795223017669,-.0457731161083395,-.007907437407252686,-.03961767159491197,.06200946857700187,.06967381700346785,-.0017890764951173505,-.017922949357011164,-.017328735082365487,.10429286568139526,-.07533656359298069,-.019897609787032887,.0664971323777355,-.041929713620319324,-.017542325191820356,-.04937505049725365,.04705546281032482,-.11658200494772165,-.050367703232498756,-.08774512274558624,.10296881777328262,.0010435280990956572,-.11190238889003506,-.058552489144718556,-.09360192242001669,-.058917359043089,.124279868888969,.2042198490820221,-.08692730923047455,-.15846153558915144,-.0442311502944039,.14028149426418587,.20301345397769968,.2099677015675084,.07836837351704316,.023616204532563738,.046474099815913654,-.1091873317264778,.34227918211166714,.40922200549215987,.32977893025607696,.35276397881502514,.17347731354344686,.04965405597947745,.046852605375659315,.18540273672730367,.2348705535220503,.07406602745660301,.09089532801383862,-.3563708193631316,-.1789009821684034,.06702378169407544,-.1450909663576207,-.2414525478367974,-.3135214310957382,-.2085394028841733,-.1694233082437144,-.05072999227745726,.07083911431869358,.11262033996513801,-.05565357077731857,-.18252807611047162,-.09511103368535778,-.20810789102436822,-.0852157922020671,-.0378083091325826,.20962708773356045,-.08751882809284073,-.008327094922276693,-.18306482243805655,.012319186741073546,-.16489228124607314,.07423361221491917,-.11013637802070915,.00018776862044833642,.0033474012470800438,.10043781830311685,-.2400961884572265,-.05521351245265479,-.09880639995530324,-.014981735119631731,-.1254106702918007,-.03586303805654162,.04621371745994664,-.11767772671757684,.07569695823851941,.25102280647850195,-.1506185088468181,.10273881268388778,-.14457410135153065,-.008431593022887443,.07382193598490527,.034203057734345316,.1299769597309955,.06494650143030745,.1003816513120292,-.04268279073187238,.034385732695719776,.1329989256859449,.08468051325324809,.16750112561515856,-.14488980909132015,.09722609048473656,-.17221966876845224],[-.032220950917092345,.008191729916867813,-.08028184906386833,-.08138138190483107,-.06384203481562005,-.015615271736948433,.10708665173062173,.0806513082282087,.05434529779137898,.027073639464279806,.16812503709317206,.1341526646829076,.0386310434951056,-.005550736776574361,.04233455589842684,-.028373758652471104,.003959858465034369,-.06359711746689202,.056587509472392425,-.027554813118545185,-.0017875113664636427,.004102569849982515,.09271899868558242,.008658513044341907,.10683629867740597,-.0741957582155177,-.06305739990406109,-.0215234426268935,.009234132026667993,-.1461035675941248,.014750802208444519,-.005216493259361257,.0032641614965498306,.09780683422134498,.12926590150531192,.06269754981180288,.2747542117642643,.09244606560871818,-.12768877877435683,-.14805761147879182,-.019825200460864806,-.008631459056792135,.01448064785908898,-.0089873586037066,.10470942538393144,-.11054476667297426,.007503550537864213,.060005840448526,.317102991916461,.323244401767086,.10720495398460449,-.058101525474285445,-.031760977729127976,-.1142935909746058,-.03155090370904701,.0017246932881514604,-.032140984544803027,-.01313116025549961,-.14824372987991144,-.10766487248252816,.10593875445284681,.4002122749634542,.19725349113949914,.08374752314487478,-.030750695721978777,-.028330043664018603,-.09987385017922976,-.2603924703966779,-.02597866375704655,-.07431355578907298,-.14253780748212694,-.27783688778439536,-.10552358523835495,-.011202718784634674,.12855854774382316,-.0003920736373502591,.0716967171985385,-.06071544811269014,.07955483422274615,-.04444953812945317,-.03623930280233029,-.05495011342047597,-.07587822560403587,-.13219044743679167,-.11463986228711373,-.014321816516995132,.05463305449331487,-.0021865578330653515,.04759921466679906,.07159056388055896,-.06180693135761069,-.09870327963970563,-.17720783806969967,-.05044458308894424,-.0881580915004552,.17305912499532888,-.18012041201202472,-.13789844469843426,.06965483931368788,.1066025347744837,.04299490598990669,.1324687310724105,.10691785253509371,.06392523123749476,.08494942418234978,-.14824978071410777,-.17981670747688494,.07988721651901637,.009987884496301742,.0916588094992,.003947580853707729,-.022988366514234783,-.025003961189405333,.022312743486262065,.03210612448956117,.006097804502443571,-.00910978092642118,.13841562948388741,.05721814889507093,.03424942423144969,.1416589548265959],[.07740308039110118,.002790278913536351,.08584865990894512,.08162158018334643,.044686861117663595,-.01072051215054455,.000766928295162006,.10466386076912294,-.015221602350874539,.0009621466382152971,.10250217221999841,.1010312655349861,-.028640249406738497,-.050144288137646154,.08802950942107401,-.03918429001904877,.02794217853450119,-.10921729182270348,-.0915511218863667,.038578400934963716,-.04708943707002815,.008224855691662966,-.01669805211816973,.14190580766416327,.023164625852484036,.07260330385813556,.11866577336553505,.014093258001003195,.004763860840952233,-.012686837885249339,-.036660213196534036,-.07741676763094042,.04926838576821911,-.044394153830466104,-.17871803212100118,.028784448095554194,-.0103622383273788,.15180646423700633,.21859707883104096,.11630023909217539,-.09258036855282813,-.019700955892187733,-.04586065984796202,.02999664377636277,.022719309002418732,.025101662257832447,-.08565056428112373,-.12410629154164783,-.18246293106608358,.0919660088126218,.08708100156944652,.10736116620783882,.028110496703318152,.11507649255715754,.038288111619517784,-.0748575383489467,.0003646230535695183,-.07572809524302741,-.2581164616498122,-.606915157176296,-.5773636654765935,-.1230196932349347,.10818482658632861,.016912673562240535,.13529133328209006,.09004414536044865,-.017373878996459924,.016143047062772586,.007470552573112604,.038153120918174875,.13808042440556922,.23128272372791026,.06221216678294059,-.0007810593524213635,-.008835248496889034,.01594835862972488,-.0005022452937268676,.1123236473438533,.01096161537525979,-.06396196854028567,.042697690474159465,.07569768323400101,.1879710839073851,-.03427071856083034,-.07601029239183162,.04071149796250454,.003927652671956227,-.008113852698322141,-.015998115624021494,-.06035618630647174,.025951586831793848,.042163344429453686,.08242572970835828,.14260227985381085,-.042848628451185186,-.06334146945950032,.009286345867861052,.0298638146904988,.006082389039917674,.059612446109644765,.03008202391345085,-.027239380162663276,-.007365870352607056,-.015225093891979673,.044419085486733505,-.00536911602886922,.022425434671702167,-.0082635729409229,-.04083689377986616,-.015422443671092656,.061348129149263644,-.052846129433506105,.0943655962480354,.014525718078802685,.0037072160051032756,.044122648659048434,.04579492559717612,-.030930673355086962,.017194230501010505,-.019462858484744144,.001243582445288452],[.08411366503492146,-.025621034960445016,-.023221811619521998,.05300805218847138,.1722413378552653,.012469440442448243,.07512154062252505,.04076344824912387,.09810078361457866,.041479003131258046,.126359775176814,.07029844401928054,-.05000724672049672,-.005484087070299931,.03040544684160737,-.0897546644621845,-.2154076640230436,.01723010217169227,-.1355698820582185,.09561822628692274,-.11059773025824354,.10124548152459008,-.07649806064651052,-.00028541240089785536,-.026245513796004843,-.019479552802034616,-.3977802512394253,-.06214359190225917,-.02434109216991953,-.012826724183031463,-.014661926972310418,-.11254901345954736,.16096037573300526,-.11227786126177444,-.06853253299267562,-.16356466589407062,-.19653804062868085,.031038393193058594,.13193348705643318,-.0834229630415911,-.04071568578732557,.013809808214387778,.03966584754536576,.009988774332939876,-.047952715523986306,.0006100311386056656,.10343067208630369,.24890751819447962,.3578226490040739,-.2093341264862744,-.03992638234909847,.19419655464006366,.03218836966881375,-.04050363309640448,-.00323484767842086,.17053386793770461,.35047600865548467,.24645797779268205,-.12388716569831495,.017230415937178875,-.20274807116351118,.13927324407566935,-.014868221439288953,-.11606370921716812,.0504068986996378,.052284706862743335,.2179885999524844,-.056957003125337274,-.20647158156376177,-.04577872257609619,-.174715212494163,.05273980569373052,.0991336755502916,.09436406062086941,-.06020237277551874,-.043715737000694935,.0563702907847852,-.008589032917977996,-.09605700522203697,.01976742575379628,.008912837788508238,-.043514983487809494,.07143401706926975,.03636602312918305,.013983885718858599,.07384754249140454,.0640699028180339,-.1243079073528052,-.07747339495112496,-.0030770402418191234,.01241157384951519,-.07723339546489952,.05221329816616044,.09848090118791958,-.044983495910957086,.009317544959183868,-.014435731895740433,-.01857466675654701,-.01664212446049934,-.20214085319841704,.0230001056663649,-.056257873953405604,-.01762107897153789,.019130131746270068,.020007586924534165,.03483339161645628,-.06663505896832214,.019122648234895845,.10427685298428223,.02651078540520231,.16286923233388592,.02793257220207912,.049606524388094764,.0500494914298579,.1019360210121309,-.025880325806131227,.05853446564641469,-.06118051935875887,.17253450900113493,-.13459923259367187,-.09040759731301262],[-.027550816137581063,.2055673522355854,.08213180283129054,-.04257032756369259,.01586831912703765,.009369833376479536,-.11462856052306328,.044711856850138204,-.15995802392503708,.11865990971326171,.0673921974401607,-.1386272184611748,-.24991581191756615,-.12741658368348494,-.04894224580807628,-.10908521327615617,-.015851721850914276,.030010677013469683,-.15749365231887502,-.053420943220933284,-.025662830013189836,-.01109292562794384,.058388641152087056,.08824456178100334,-.05372811700478099,-.068366341306591,.002650845805140495,.09781787269745365,.01689586977779997,.029099746903975626,.15597074244969705,-.017162667301283602,-.04785786758606349,-.06664135729164668,-.04104966548941642,-.02934190873579519,.18068461986324288,.23841021509849827,.10720477806483233,.0032504209495289177,-.16875590654789738,-.055651624441500805,.03786429305939924,.14496557145479333,.301650389285414,.21780633210507225,.2478067430020475,.2061143822397045,-.03050504538481298,-.22354863754123386,-.22057742020428542,.02616077723100449,-.014489792871384327,-.0013992789264812011,-.032142807111526076,.06985840449587952,.12952310052385177,.06213402466583354,-.09585019736978478,-.1500574228079729,-.04869042238772166,.027625676945502317,.08775153927655127,.05938206863631171,-.1554768555359688,-.008993040636737754,-.2169595372240255,-.20894528496184284,-.17492068880682238,-.10306183600146183,-.08325953472860717,.10865204818788957,.060744670090415315,.050196375528596446,.05934717394154612,.08055016301128984,.0960411834034681,-.1792150255632714,-.08635951576168496,-.1986163302647143,-.08530559536559432,.07340445346870429,-.0006091553528993349,.017864996966518068,.015229839479410548,-.028738700704038833,-.030631095956117516,.08354654237468648,-.015199467885082363,.007919656876690773,.10542259168905797,.04587959073812549,-.01617681752477279,-.0644040297730474,.05644952354136398,-.0011675857621973734,.001996187711647404,.06741670149782594,-.006887296475045754,.03485587005632951,.017610685547011118,-.06497452993906422,.07213511303965964,-.038534030205095104,-.014020364161441437,.0002936023904013124,.12282296947714948,-.08452607883924697,.07273352008210596,-.02619933777716406,.2622823203473173,.05646693764295346,.026818371415154252,.09399186859592003,.035828326553373244,.18170527988919383,-.015152288577127748,-.017615532167961634,-.003186157887469676,-.021179342150732736,-.1521371584686061],[-.1377452343640997,.038746368626390894,-.0007085704465362858,.049355010027965204,-.08827922532366628,.3384991916323753,-.06415478287260948,.013423151043787954,-.019629041697081684,-.07451448337699605,-.09035578126457038,.09694121671352816,-.11910664582618065,-.15100751467224666,-.013947233410068524,-.2874783493286283,-.37903665180179325,-.2028061966058827,-.1130350051672437,.025054091741846772,-.08101873700422167,.09255212771864864,.0008224646261129828,.24245844724477272,.12843614602564724,.13562020313059403,.08959454097829489,.23076896835282149,.17282137454049196,.15120139028220045,.2108003848913195,.13274188314172597,-.11296580760432726,-.23425804061193015,-.15388856567280207,.047550247591945885,.13675765224748537,.1497088750064109,-.014598687955070258,.02452413980077512,.15008479234563366,.021969575372334967,-.0172093144411839,-.1256658935629884,.05746214979358381,-.12422822668708502,.027717976800794235,.07647002845638551,.15084174315157894,.16363419431275902,.10314072255216514,.09860444551135499,-.07788908621899912,-.1661031133394909,-.01552372934979565,.033968447572520016,-.006428773323451792,-.07778412369454052,-.13138597183951684,-.1649253758470458,-.1370771806362736,-.24996598417430377,-.09938731567148065,-.04181627247096907,.06339279526203859,.08465679200332674,.07359611177518106,.009674275157159157,-.05618448490225525,-.09782611167515598,-.20167456268371736,-.035743089697776065,-.05385375421400665,-.09408860273308252,-.11120588730571836,-.03767166625239412,.031541190146133206,.09272555579809894,-.02405726855688603,.006010846171522255,.026069243416314662,.05295237846002254,-.000745387114251081,-.03941542133520414,.00012581754959352376,-.07480582090826393,.010523867284072515,.06240607752864875,.015813904262298846,-.06483823993809258,.031265967377395135,.027507834966997668,.00012699672107176554,.05079690966459828,.07896987791599193,.09831750590543942,.054192666869303546,-.013030640855035372,.04968331523000394,.08350897163216592,.011784477594072869,.0918716806710779,-.0066226790079174785,-.04795612370392129,-.017090317814363196,-.07874097948062875,-.04673070524082774,.01851394723831396,.07149989754335787,.06473669024793555,-.032650670337155206,.06136379490065435,-.039888121585693735,.06940981414444819,.07797729781948878,.06613371983371227,.05598211257429133,.072595488855595,-.05384452691395356,.09608563004350644,-.028805713693717965],[.044235218750753806,.03452490583678916,-.1304293688025541,-.03539195098364023,.017969397644679183,.03517803650463722,-.01078844355414521,-.0016502053765038854,.03915036425843466,.21472717137309544,-.0947995796191501,-.028715342944390494,.05486033756860608,-.03932379550394833,-.07194086090689658,-.11930894160210025,.007811767433128516,-.13496527011108017,-.22468220163734792,-.04196371662613939,-.1884031750999897,-.12848466572254685,.03276214663384305,-.002205615246800914,.10277613826454918,.0012177391079194258,.0777628448021851,.014832783378042141,.2549270879104647,-.14122761490223984,-.02812892511916594,-.09059342329139256,.07874630303010743,-.013334851815846885,-.01309841797683857,-.08599743156779172,.0011500587455686162,-.09629195757061756,.16218222843705965,-.026280879180661507,.4059162672347385,.2242570275495756,.08891480121909084,.08738093668566946,.04323574227105897,.10434670998406992,-.02968326553011473,-.096106796162175,-.16572721595924714,-.17366678905777666,-.030961339846240048,.05950555408116688,.049325908092511556,.12756582867533076,.23979790342729132,.12399889130520506,-.27711805486247987,.10320304516755278,.07136692347312475,.06613898533574539,-.017570740572059176,-.2184882103530213,-.09632573857873612,-.013236997628355902,.14099804783148318,.04865647605438084,.030847391971354002,.12062557790469333,.03194037828951044,.012663844222798573,.05303477801402277,.023358934432241123,.07360073866342859,-.10514949440993024,-.16524216303765682,-.2566907598845994,-.2689659488714767,.01856594608215354,.09358951276616725,.028127974684171123,.018696901200308494,-.015875163077901967,-.007937909761738419,.030609616137362825,-.015794143119850355,-.09523631283737082,-.02908738730552715,-.13651567962256067,-.07368305845021562,.05490162321896337,-.060990796740251554,.09317039578109665,-.002387120569026433,-.02619076519977723,-.04798880819540316,.01989179253677983,.05363228445470823,.02199641543685798,-.05848482961974336,-.008297166618256895,.08592298257318774,.007834953787222033,.007497274721557912,.033528171976771326,.034258795986853316,.040069268495681584,.01664217005217485,.033376554888908505,.009458989740060878,.05206455171706346,-.08492944446978946,-.09186129377429487,-.07233529310987354,.017511044864076567,.08382279108366908,.029829413251507158,.02267644856017263,.09282351274921564,.027104627928702215,.04993312794348181,.25204397185842226],[.04501707059571113,.0498642789949671,.08232096915601292,.11789478363532714,.11183772343297438,-.1253322045343096,.0730110893562333,.0770037215770574,-.03717900545496422,.11530429785134244,.05730001513322304,.0978487816702014,-.03060524384717013,-.006989918349842278,-.04381468916114001,-.041086107026221175,-.10156550268991253,-.03098425744620953,.06224227084282018,-.08565990211020953,-.031199205006548048,.09466362301479106,.1869636075210107,-.1661308799155149,-.009008549501699978,-.126066461725453,.06174431253445521,-.10058744884305808,-.3255438697933249,-.09397283393441772,-.08409967501745218,-.19412666055289363,-.0737528830414833,.09320666895036434,.053698626158480575,-.03050997649543366,.03549926506931229,-.08821841540993962,.14081935255976538,-.015418397657317465,-.14008063599426096,-.02141577110665445,.0730178872426362,-.1772662023908141,.04967098759114277,.034513230883957385,.10331367544756308,-.039224198145387315,.03200138764978423,-.3170993196754844,.3639474141807881,.15239466974253513,.12006928728376079,.012632970433185474,.13528479946899857,-.04326335129410329,-.04198638907336186,.06983905723759978,.001010584034370668,-.001177493293526035,-.011794825581052382,-.14348506855517926,.022137252763930207,-.039687582510860714,.2621815908699157,.19436953435957777,.11018262120789611,.02279144487223891,-.09737455097152174,-.016625841483821784,.159809384074366,.07956114879698994,-.07545184277034313,-.02802352727821577,-.12778377344107292,-.07060095297691774,.07585474550259086,-.06110411458322956,-.03425506534845529,.047000517227076224,.0859568504259988,.04282729750891924,.03582441766288798,-.006123191145355145,-.038509250299150546,.052491286674368046,-.012429025518286289,.02780241004668932,-.045633571810510726,.05732991916540041,-.074157742801149,.0012829945233095302,.04703190758387131,.024833428093670173,.037204577451850254,-.028766340858447596,.04836022604994912,-.0532700977375509,-.1225368009934108,.037120069768975875,-.08928400790752453,.06495529707871285,.07753906440902517,-.027111775203657915,.09566272146318118,-.024483731157729047,-.03621165014592378,-.09391579872500003,-.017320414345298095,-.10222122825099972,-.08839882935836986,.018021145195601808,.014346493014463765,-.0045931108148111605,-.04133099909611131,.03707125175822254,.03210908865075661,.1327316051894474,.0751095411672087,.02562779748474479,.14212920960470612],[.15729146952739428,-.052978575964526695,-.002625845437807875,.07899544804862188,.08204405612651289,-.13536453065722548,-.013649345776134983,-.013140590068438054,.01151285607422449,.05159617743029746,.0255502204738193,-.039487220487149505,-.03465828805821605,.07249054445839179,-.11567294550509376,.06786380161748312,.06865077339493647,.07398589069835013,-.16153712899081113,.040446464260465734,.07146643825094859,-.11469018047321458,.054050503923005255,-.04104301219121387,.14996547269454152,-.25422330965645823,.1969719351437533,.11290777964377821,-.020530641521012943,.12889998621276044,-.10368261923120013,.09609190196541599,.15324884079071813,.051489779311227196,.03355956220646843,-.20829917204727766,.022893590362530233,-.2624960431410919,.01920855427735553,.23588413973673644,.012602139087501865,.20972078789304485,.09256853638097748,.10590976891238137,.07421375809945621,.02827848613104754,-.034766214821145405,.025387015471766056,-.21114625235885243,-.18142723897056606,-.036903154611340375,.07454224421279146,-.0739427173333076,-.12923367863313379,-.10286993284460598,-.0020478562727464372,.0070327870476685345,.04165877026376459,-.030913879256598803,.20126029986072963,-.361494069722841,-.5918877032494142,-.34765190314312044,-.29917756970453346,-.04319546567921677,-.30777208287521557,-.05457087346476583,.03567745314425927,.03377903501088328,-.11152465910750621,.11790825287438664,.5074240277961515,.23855694673921737,.10488558912344918,.07481493616449232,-.010757602002390856,.09842217441789791,.06801151298652418,.04008106731763751,-.17815840391411603,.015218382958913604,-.04304478707274706,.06947878597880759,.2624834865643778,.1306172564649099,.15898046016824569,.09891308507712536,.16690881596534685,-.04545578838937801,-.051217783957418925,.08865176474629312,-.024238261127295962,-.12061118524458514,-.13932561033045077,-.0984478243981586,.08410412844353249,.03609504694316075,.06467717927085943,.019556502245895897,.05458483748926474,.011804485067672219,.04962752013073167,.03158019227826489,-.0421276060749001,-.03724684536620476,-.0009022803555269465,.05127558828330446,.017591411946701482,.020608297506701782,.12021482673005342,.03902195231667063,.021711754771879227,.04717219947996956,.11457521712485876,.06552926094190885,.057133065165575314,-.06414584331371753,-.07915357008973892,-.0842035889087247,-.13317811959911652,-.09719310872141479],[.016239054180390664,.003966272793749406,-.004554660848846634,.013554085633964541,.04287384927044155,-.15274614529097097,-.027274870950224753,.009662815968977459,.00030503272333276543,.03221825484285479,-.036021236700139334,-.042600552093793376,-.041216087356306746,.07022527918241118,.08825146379981735,-.11943869442811812,.01600941743312269,-.02589229623832287,.043718898111848606,.046349743840285895,-.045519881760365574,.05780246328619649,.03299849377053235,-.07478902796227593,.0856125736138434,-.08296703677200613,.12226353323600213,.05699564798388623,.22311371083336579,-.1289229263989481,.02871159759083955,-.08229481100611669,.07467088143614656,.024025896326078336,.07065603601313146,.052863436123422466,.13162507032318282,.08385001225280878,.019373316885252463,.06860118604540767,.1604542662376101,.14512299636928327,.09097198717670087,-.11720878638068641,-.10960101740165,-.2298993299842687,-.04037549365049509,-.20170065712267327,.2103219398545147,.02843676680847962,.06486878856813136,-.18348723541305237,-.17888322479271676,-.24993108343054868,-.1218218035048543,-.032694964791572315,-.0037869041619365135,-.2488566096487292,-.15602019937684342,-.42475936671170156,-.42360041816934524,-.3608016539425717,-.18904408350207366,-.05662803401652919,.0019947298303030075,.009984728877567475,.1075269031323472,.21965496214815466,.18511412087840118,.19939690136264532,.2370619476665271,.1585535076891107,.23755501089495354,.24026771887297607,.14806350471741694,.22743537801775957,.1250723276134384,-.12207706841814078,.04122540755875127,.12974091028573875,.1387734322212655,.09281907427262334,.0414569330167312,.1281097174245397,.08628227803965438,.04648215221462616,.03598526522115604,-.14999835453581617,-.0619947530635693,-.12774624354082473,-.05546853075465755,-.07205565632683267,-.031200201377666728,-.02169770596970337,-.02031960579447556,-.011808386343022212,-.10716560570031625,-.08234244918512784,-.019256109946120217,.06667881100363682,-.04153672357168933,-.04068751960092851,.04472457352709275,-.0683052168964735,.035585363893159354,.026945608802347733,-.011423097664885327,.061366414602964534,-.049741414287749496,.054484604133461456,.1424743669625888,.03770989015507005,.014814583813689983,-.12196638284522934,-.04085297097341757,-.004807269841994491,-.0938444533454384,-.11066938503473484,-.01308544267539942,.02000366128381234,.11572349318879958],[.02861973429703818,.054226325319119265,.01767875753214382,-.054622115279891297,.0006816615854381564,-.061011028044801754,.025449624542795035,.03924876355135573,-.017614050568012716,.08668906895517887,.129015781827036,-.059155840152992877,-.03365828707580499,-.11303253492598647,-.009440740328775697,.0383001060010507,-.024382057855670103,.13094817594507807,-.17637051833702583,-.04253643417939962,.024839476402364308,.025341112503526046,.0733792409158455,.1249039423629602,.0523345284024839,.01959442719741869,.014409551889643532,.06939173936687891,.10114636722821412,-.017834270494535995,-.005253874895870772,-.04944962911154373,-.018515125726140946,.02732694249374093,.09763594846358073,.13398387575020193,.028128579416720284,.10345916561982525,.14559912798485353,-.062225750838370064,-.04320538531304752,-.13615012492801842,.00945958022416611,.07764329328098614,-.01883839881610818,.040124806139584204,.04608276260496105,.11596384414343883,.041671199210061065,-.03525512383283549,-.24210069103686924,.1341304895480569,-.12174034267618312,-.002494033774044037,.019159096554587522,-.2859624847968232,-.06448621966076783,-.3159404613081046,-.3210369275565501,-.5270362132034808,-.523706814301239,-.2219710388945374,.07817795320959023,.03715277663413105,.0794293501758099,.05471087361571522,-.030973473678087608,-.1710933884130195,.09607172590451177,.02326460744017457,.18229765892428224,.5084153793392225,.3632713737575951,-.17442768533982334,-.07594077455705245,.08458269142045552,-.08264079354279294,.2407877830671493,.12327508787645428,30311214018877153e-21,.20734217619087927,.13348805342234585,.1420447853746671,-.01668300914372979,.0026274236589628186,-.05059978347067792,-.09350164253401919,.049346638059468484,.027169521962694204,.008806677564154888,.29974077633101837,-.017370887640425853,.06047261147506215,-.08327458013745889,-.04873436025865573,-.12258982430184573,.07453840474434334,.0016868192049145497,-.04667837568798733,.10225565600123501,.09641338261476909,-.08516767534491451,.011074699633376178,-.058526124313595766,-.03274311396661824,-.1722075038150731,.1062569945912887,.045122620395145224,.06315689942429545,-.023657194122683647,-.08618942142993294,-.09715567921688867,-.1177859601186664,-.0018160616946504698,-.01837453110222613,-.022154736774935388,.06907254318267533,.06184270109132414,.05741719116358045,.030372244451354793,.08978777546456254],[-.001637558807711853,-.01523399155873769,.033084196663500154,.010429688997138621,.02638730725610114,-.05549304953240504,-.08986798608277412,.03131836942976357,-.06021207204170201,.06034508162027746,.033637859079548624,.07490767444257655,.06734422144223931,.04540898533245702,-.016588163375265065,.11808910368697124,.10674593565355751,.014356560764954368,-.00029905420194112353,.03248992573614229,-.0796910048701078,.0021152438820417965,.12842998293419816,.027685506112132927,.051037174605280025,.009502773414105138,-.08857714395595993,.07241521761687471,.1875858733675072,-.046260082649078216,.03283445740031349,.00027333660832160045,-.005625872973384093,.05133522775792196,-.028997953896369527,.010803615722912593,.03927886287402181,.05993481823719196,-.036672818526105114,.0020455805172246433,.08420494892293047,.07872249743197642,.07292782932833436,.0029102454584164217,-.014711323072181468,.06197894952171591,-.005861364004429596,-.006509600464702996,.15462308680710604,.10998731441673203,.05511993976474949,.05724647785751881,.08467350723014512,.04541561483198189,-.027011213416260203,-.41690504010919505,-.2381619432525145,-.26802740977048395,-.4297396023947019,-.4712893669692756,-.4753811771185376,-.23332878411143415,-.02866052018803172,-.046785685844234697,-.01391066188194462,.06355734031900377,.20816618228755654,.1268039069069368,.19584967158175218,.24120710644978025,.34247879950952587,.22000223848712153,.03699358515317182,-.24940743884977212,-.12911855055552002,.006760778385861643,-.016380373357314598,.023975770224144183,.1728134079555655,.06774703585492528,.09934809469516141,.03539753804030679,-.03463166182179102,.1100865505604692,.005313191434559647,-.1852260149514699,-.015871161665418073,.008623043744521788,.03892375012569235,-.014894463369033356,-.015235500642311592,.0015905054090605206,-.02594208321337546,-.048032891124765054,.056968059211618904,-.005355047118697581,.0700413676970709,-.01990406337666332,.10013072647581948,-.030663141377206063,.01493648218721405,-.05337707766838567,-.04619114379822308,-.04973710460144862,-.03203494019210336,-.026289206287861282,-.00738021535276584,-.008577652107519318,-.067451013841573,.03696496979064143,.012119189183510626,-.01273226528095213,-.014067660545222016,.011208506370721377,-.003419775502049388,.12161984708872418,-.09096703322865128,.06206136765809177,-.023761385872915743,.11195006309284704,.10944483983918517],[-.0614292177676861,-.024854862147621323,.03753390059305069,.05305521847540143,-.029090391144677347,-.07660753258923039,-.056250478754706124,.03851333502343017,.009411112285780607,.02762775859881378,-.04048433394446757,.06257228413844763,.018534104488487108,.09995392307538145,-.011584012590548413,-.02705235445809122,-.005996134596044159,-.021253583302654644,-.03155182648452626,.1384156406272948,.004465498896228312,.07915857594998048,.09330712693847118,.021057360335951708,-.020072455903489106,.007834926199344353,.10646163879333373,.11394158834484362,.09562400708473465,-.0003797337300617959,-.01056664270801766,-.02122943319759627,.11951412079200276,.15658745914488753,.051156677361355526,-.06149908185714912,.08007784197043882,-.06031278155582331,.10862415451751303,.09083345714134636,.03774980229812818,.12669250756084155,.019289318800248804,.11166309161116607,-.1161166273753233,-.03827059678071661,-.013961859511050188,.05745637300788146,.035911303378527666,.1168536631662633,.020811499706270893,.04227481917429324,-.11786932199756393,-.20631689099465444,-.10339540502604118,-.03237104484552287,-.14327246772273436,-.25192334370553027,-.43351265016373064,-.322530105334642,-.39759972190268117,-.39288382422516366,-.39114382180517604,-.2466951151334749,-.08792059370029912,-.08861343277350736,-.15980594976718124,.187856441602355,.19150833663803338,.46363761289278804,.15919333829593552,.19352833505902622,.23198389189372812,.41944067807959584,.29116622643028034,.13265224163991357,-.04128087529606902,.024460830389148203,-.0586492458711208,-.0484310682254976,.07445852470398351,.03804830411581207,-.040110091881074464,.05986990292482574,.052511568070781466,-.009056215226947145,.023537459561038466,-.06819758275382648,-.05868207848921336,-.03143761270972536,.05728960562093009,.09631916110523682,-.010631903539778567,-.0724228306321863,.026755462358263725,.01866551389504969,-.03508272943464433,.0033658937666455023,-.025999751547288244,.05153059400512512,-.09587763934474401,-.07290350322473715,-.067948463067868,.00432611757225175,-.004011781154024653,-.005486415003636537,-.007040607698489056,-.023664491880765207,-.02134891455269128,-.05576494503770434,.07620346105654131,.057794773037288215,.004991409560975428,-.014553984524648442,-.029743957901801635,-.05716512536765295,-.0010086458792998715,-.03536175147104669,-.004753083205477092,-.011301320960084231,.11501077964365991],[.15173553770142628,-.014179130345110133,.016877350096463503,-.07720465698340188,.07810802077917843,-.13112570903713622,.002753461595534773,.051910634906651945,.02894784682477934,.05020881252165019,-.004579484116651808,-.1068451534743251,.011155331270464766,.06518611188126323,-.13027319256310377,-.08014430895919698,.10735864824242532,.04887972464555236,.015758793271349616,.12191464251681002,.09698466873189877,-.008083344199497508,.02070520927773202,-.0819378070896832,.004646536698726236,.05614793344286019,.16628267002053893,.04618252947477354,.07765799492206311,-.019960907459527263,-.09653834364365096,.07946604612246112,.25805196379884,.007762217116777187,.06951957517852637,.009523819637301936,.2615169383792941,.08678835064866287,-.03740226079816272,.06948574061480542,.07169472236220033,.13258033500501015,-.02145849038805818,.05604635052020862,-.00039374783734824614,.03222219258902316,.18458145122623904,-.0425397829560613,-.012963640462772971,.170102640969749,-.023561860478587326,.05115294828510181,-.1316626386662188,.02066528156095445,-.24022517587189773,.038647270662851535,-.025858147741203062,-.08145590938506822,-.11686693255496608,.04440129268023965,-.3573050560712243,-.6458048862282926,-.4058796460765634,-.3057125966673067,-.12682355113036897,-.3349793732242465,.015693363372025454,-.0787123262427005,-.043104245874849255,-.15482305108138567,-.23546372175602243,.11116967724198698,.4554474594999793,.18491255398354933,.29246815522355635,.196730228549847,.1971071562521477,.07329223993943043,.008241154297332805,-.1150654509172613,-.009769859408377483,-.10085941287032674,.0684199574716632,-.05433818455572499,.07743806985014343,.17116462221553444,.0012880410065990583,.13426211870566188,.11060346830231947,-.07324738364271675,.037258219358590916,-.012266626223890298,.07365939898386821,.04378341477475915,-.10714901521414893,.08665409577527164,-.0687630196871663,-.0587222961213732,.044547323244407605,-.05531794447013578,.033044549367641826,.057546028232389426,.001372219860547634,.024825635569633846,-.12204262640334872,-.10189632816975304,.054772548849134656,-.07957783281017018,-.03822925555621319,.03649472890803328,.13217334923490376,.057211373582709266,-.025832313366592516,-.05471628313966308,.013913569251103083,.1233331303710279,.0048703487927865205,.005174360919211619,.028390246160885126,-.021507757354650846,-.03467232955821534],[-.005638399019864418,-.034134669652071015,-.02298517127417314,-.06042490511676622,.054918574572591805,.0688808563980851,-.007013485383146376,-.00648857975984031,-.07499651415043673,-.002575895078660656,.023015025445107737,.008365293639519378,-.031176094638168075,.04257338372246873,-.0661088511417105,.029356311647627392,-.013291948615577448,.05636197405267865,.03421948261127945,-.012594934239664096,-.014011911140779154,-.06238097812075309,-.07113998097633528,.002419585241737937,-.035945491331999854,.0456380080016745,-.004718376331055318,.06674523587421312,.04530010627049259,-.04447867397014303,.08964050895430327,-.09649618199492596,-.027741072518757348,-.005716770675369451,.015013223612745458,-.024603266772382323,.0013274270991194131,-.035626865786564946,.017128923114182848,-.04597251722973113,.00700365315826125,-.04314749126071507,-.029564377599491043,-.02069536902039537,-.07978474654225476,.026833980742834287,-.0019308823001443487,.08325761674178708,.1073292905313316,.07487684328165595,.04849810672333138,.09169820062468502,.04818495710565103,.05209594899642121,.0076798336966644315,.1051949011075242,.022530132067634476,.12672233854609458,.059196502607268456,.07316560175671755,.11595348012337076,.0561543812261827,.12932878620836885,.08842436444709308,.03008655496417094,.06915562578899845,.12091856805585206,-.08993159870879548,-.01901478695671717,-.044734780540160696,.11875971731148252,.0019621703161090687,.09896262685457068,-.014935988916705181,-.05815665104963902,-.03028052756295238,.03900429075159827,-.08499089906358405,-.04601308312736738,-.014913760028022027,.021155606661541995,.06421560453257494,-.023980009754675097,.028088175416754846,-.015711319084152214,.05535467732664144,-.10471526203870407,-.0896827246271393,-.285340049872218,-.18318938265740103,-.08077353622648484,.00516649268446813,.057862500220190766,.06436392965987806,.08930527605764388,.033737553106247584,-.12462760155848271,-.15876787514393648,-.3559472010693181,.09512910727572213,-.14724808649647816,-.20315881235781566,-.0841426908653908,-.21320097373742838,-.18018782707193445,-.2119440854367126,-.10022760576175327,-.021533171965098907,-.03730908877302891,.12624286755807518,.22034948666962345,.18909901249809574,.15892762405783045,.012004127757768795,.05401853470010004,-.028528312561415387,.0032335748506411056,-.006627178039866982,.08469326627498211,.11628744535951219,.19103429211412726],[-.08632014587085493,-.04251610912847509,-.00877624577521903,.021241060023051747,.004785142683889937,-.035472062577375424,.0066937243438659755,-.00018713747041253226,.008276426093388398,.03873976801523668,-.06807775532448711,-.05024192857483541,.005362760135839445,-.04672304155801983,.0941592536360896,.0259868706565127,.028402847338834608,.12799263106977857,.052174185297818504,.03174223717567129,.043516542799932806,.10029999162817296,.009887971508390159,-.035094445123424634,-.007013648134597858,.06906108560461019,.09671072321105059,.08138116248657243,.057644504950450134,.011067196959459139,-.01838110668834969,-.08260170572994886,-.052683720386780014,-.019959970942575705,.019919134901318802,.07476413421487832,.003773354381044272,-.0014401279343240897,-.10890764410839328,-.05790156875359698,.06240285701799966,.10607261825733119,.09335586616638367,.16321573911501755,-.0443119052420356,-.006651931903878361,.024113039196997976,.06455344205631933,.1517128045863824,.3045776806070726,.08704170613240109,-.1300649085600688,-.11937696051908048,.026590394860137298,-.06187432805245787,.09997255193914875,.06382034869711367,.1176673091939654,.1041271101548924,-.06465138383635163,-.6483883244212054,-.5771868264045272,-.03625579288192479,.17483800093943763,-.08287899322519875,-.05289553791191878,.09345077929752676,.13222855504871267,-.003115895567640581,-.2050426388737532,-.5671309856064656,-.17042057724882412,.5127831574851569,.08057209143675742,-.06903481377819876,-.07649368600841486,-.008790831321444051,.06335917927728338,-.019296007009984323,-.2631077868691519,-.2643185488881028,.004389997491811792,.41748261831713607,.23966204304538938,-.07356228697618065,-.09550984819738148,-.23474683230766644,.02829833913410154,.06107471342323981,-.1617670664788456,-.002836662810929355,.09422220116207343,.1282749752649281,.1470689521208139,.07130221932440324,-.07473727988964095,-.2388522427596929,-.08502220429118704,-.07147003526069204,.00917906455872776,-.0009260579751391024,.08422396047774673,.07314989431319953,-.027624077571723846,-.10044220817006712,-.002887278419193756,.08486607958654896,.010310191760266263,-.0005486928083007075,.08421774232249293,.00540301472144504,.09530544860146802,.02141628298841297,.03209302388025993,.09515759978867049,-.0644210308822171,.02897465190310715,-.006988550471036609,.15811077547403324,.07738806251162884,.2228246896047446],[.07646808884176232,.09452548036967595,.013417457238376423,-.06541130247343482,.0022049098738461115,-.19542909991536384,-.01036325544715716,.0006824005641406505,-.025036329876752375,.10709994456938719,.1750934250468698,.14614357796041205,.05371808936012237,.03339878494049728,.05851426192031009,.10088626385947798,.123932599842568,.0003003679535087955,-.07250605302149415,-.05354946770191708,-.0689749450619817,.06814291076573938,-.0032046953892697905,-.023764344412627286,-.03305737261273434,-.04676939809650768,-.12086069080136047,.13198139059769748,.010909080970491494,.11805853563674065,.0005565448918684879,-.005804908679251972,.03599303672957467,-.008265716167325882,.06835085226718729,.030100108849902718,.11300169606234395,.04942335820173879,-.18768681794943032,-.08981622929146402,.12209444756370379,.0653983410219775,-.23087808851819352,.013400992883371765,-.09688703226527526,.09659335704424854,.08971453199525714,-.0038843040921827804,.12013144346588932,.3740423508496588,.21211466109416433,-.011527049200226763,-.04928358151693285,.018754604765659974,-.08264495139577743,.10817924171979713,-.058116213333392674,-.04976144143312866,.03846781052897595,-.27345429596810805,-.8464347571120541,-.2964510122739593,.08827559134332728,.11386954716890384,-.04324619613058804,.008036679746938918,-.10745428649421408,-.3104660594305501,-.04414792146240294,-.1780528735930817,.27176076889250983,.5237460398834308,-.3460333131926374,-.2555265202640044,.041698726893088206,.17631040231935152,.08900046345108938,-.03497190747260501,.015213546106438838,-.16155001168047278,-.004461612295541831,-.19608326491524342,.5239073730025521,.38353319497536614,-.18308498375136645,-.36865739333612096,-.05159976969809135,.18507587383644392,-.03905957968438431,-.11293732152378697,-.29448175156766543,-.24257847708785274,-.020336287901657812,.16460493865286885,.04202856070974578,-.03457877025452506,-.08062131133030623,.0023780590689402997,.09709014003611553,.2558741717766987,-.2528423785018282,.06161063026546784,.09606953110690702,-.0530490597234618,-.01615817882356896,-.05142755507875746,.15564444153816212,.18885757011599216,.008434900332647044,-.048989097338605264,.1771206856070406,.19164022835084701,.18133053179257821,.13611731878917838,.1652962851740026,-.029342409275796733,-.04278844315258058,-.05354612070195941,.04304847553991831,.00043498176350832696,.043391550136365135],[-.06739249619527954,.15603790499391812,.33005542485267503,.17019472884597617,-.009769894849549418,-.11247473585306066,-.0946396047616811,-.024494294275221998,-.003979234801726267,.10994471173246248,.034232693599063196,.17574157070401114,-.05830787394227463,-.08603561885055908,-.08937780302783849,.13060740524380768,.08334257877723908,.04558934315321972,-.02150019774465524,-.0396176985432692,-.04028289543604181,-.05490829999440229,-.02962070100561462,.033422070447237745,-.18107420807866342,.06262831004917643,-.15452481995687467,.1630239124577403,-.19245645289137592,.025898631717022558,.138019985248594,.04258082061725732,-.10231719535275768,-.04787866997999869,-.0846515395363138,-.10421201862848327,-.11475351378970063,-.07744751140730396,.1751315391960965,.31630961804401514,-.21234361067848667,-.13717780192340084,.0322563150273593,.16117460365654565,.12436610992083444,-.1960223209372981,-.10316972333420724,-.17989050580766375,-.030776595813913885,.36723472811894087,.2682282294834628,-.14255591471090923,-.3428439710747905,-.1686302689762979,.20717723978005761,-.0436102979406257,-.21591071858781744,-.35645281884894064,-.3591414517208855,-.356538210400283,-.22838433437597963,-.2541479444751975,-.027037660554611806,.10429938241738665,.07031310042281527,.19633410406749333,.011469003363448749,.056100652037588905,.20979311430234168,.31382740777390794,.3626609041849276,.15632710796745802,.04311821555373582,.15941891562233157,.1379981045600984,.08245654792292287,-.0973627067657066,.017535763817111305,.18875412500763653,.1322991804906124,.09315987867725894,.10015739152045183,.0417718281395823,-.1646122684692592,-.010269758847271757,-.016121723288740217,-.10277571356356704,-.09304291065640949,-.049186781888682446,.011398226094967184,-.0002700750754074388,.007439703510469686,-.200281126111086,-.11832761511884456,.015078283473006854,-.018452548998716053,-.03636517698179263,-.020537843773772754,.06746735860641695,.09898114873241157,-.005567440273129359,-.09202733157199142,-.011441078700565044,.04049342007394224,.0721069064339574,.047544507543730935,-.010627683042822508,.010378739620038546,-.03736112469411146,.04944072910180286,.23172672133978298,.0662240370661964,.053604258546808725,.07022403043169811,.00044743519172646407,-.024040752967206758,.01702740005498063,.08250217651753305,.04411754553266678,.09444575948019618,.026070122517550864],[-.014874410513740596,.006465269516725436,.18058268416301498,.10639801800645622,.1462435538011862,-.1854908571677263,-.11946585223026567,.13336875353850036,.1431606374421438,.2126832457834811,.074573037321912,-.02366332846738356,.0003016250518083352,.034923909748155624,.0004976437330811434,-.278607959140356,.019649427691563706,.2242872822116851,.10634587212193486,-.05574719156641576,-.1720320898158253,.14652429997383487,.08367806166302114,.08005999685354703,.1267699091356168,-.2096000474917565,-.11992969772303724,.07965105241880661,-7050015517075237e-20,-.13159968070216072,-.12185636491051369,-.12212386528350992,-.06347159979080245,.11591606931628659,-.0003121176220944738,-.1615853169207239,-.20509977937167723,-.015211020089078528,.33419363858602386,-.021197972311742794,.051573854058283256,-.08119082461245453,-.024248010908752227,.03195278614490318,.08988999412280829,-.05534767428796654,-.19026769408809097,-.20571271554392964,-.0034200030533805825,.4233706083448675,.2726093091939193,-.08499767431735698,-.2700903003356256,-.269846791820592,-.17357361480162312,.04962098882240612,-.0035750137874818316,.03659266345297582,.008635942409048396,-.27032750814312834,-.39994957932057346,-.17183609797060095,-.24083907079152436,-.20001978264666828,-.2526432903468412,.04388992532969703,-.06425983460410711,.07404393306025628,-.0141401497703907,.12916245281008937,.13074274654586848,.027929401203914232,.018943370061503276,.12690634935975603,.2876472565385513,.2888724236948665,.2999817956216291,-.03702797972780987,.049533958877091146,-.018197380038773844,.19754195456455448,-.004838219692821645,-.06700194220608034,.09532874300771776,-.0773285941177754,.09792160200102382,.11726746577896972,.05120619892319547,.014744273305796744,.07451554959247797,.07659473159347036,-.10212719204511148,-.01010359791820685,.05340526943316216,.02596768348900778,.04284255334511395,-.031649551549700956,-.10112182853935778,-.06200392753579289,.08099671084730073,-.09622742200248849,.0027222873646967627,.0032193461798180056,.028018068894715878,-.08039298406512714,-.06824368067567846,-.006576337726493846,-.10138976161964301,.0057770284685309745,-.001933310874106156,-.028478055121693616,.07814848124477439,.004671826940859908,.08652550552054145,.07514987579413773,.08091190400159867,.14299067937575605,.05825481165877586,.060032259045003374,.06930919820604647,.13733947078713762],[-.026403086547123783,-.020917609288306105,-.03510190404818561,-.014306912310371803,-.004297219536436386,-.058077881414638405,.03817856444432709,-.0028111815245872307,-.003894108451895112,.0018813296297546939,-.10078688565961993,.021583238308296865,.07351192637081023,.05452848256552978,.18987936161675673,.13986078152038808,.07294072514890901,.059256836874555796,.031090669459266307,-.015844740201760396,-.02361837940991314,-.06493720410953477,.07564298381185089,-.07946619582017297,-.02076901494464639,-.1040432783776685,-.03301296713352203,.07278846470181086,.10548105228938642,.001940545938049626,-.007042592457223856,-.028398618166747935,.04518643635595633,-.01918619986250676,.10714569627787791,.11822684975817753,.0385712171883888,-.027458148938472732,-.09826461163629269,.05639089468873522,.0401565173462511,.12886782282388654,-.031555895682836455,-.02313957239134061,.06912242744289229,.02510224988131035,.029789415685897214,-.07065287059550626,.01631478330110331,.2868868423095696,.1702619783984527,.012540634976734383,.07085086586162258,.0048605100782281585,.03319775346107286,-.09132869763063686,-.1509740873764873,-.024120509010246885,-.024570140846357655,-.4148094433546702,-.7768715321932411,-.27460992951941543,.13785951824037135,.13544781633672992,.13313817386432886,.08265280252024546,.0892378541549983,-.04408118699325547,-.07688310132127552,.12600419964023202,.4095936605238212,.08706928311680576,-.4662116815658208,-.43761485411451395,-.10812067804268631,.01768640051563608,.12729816882590003,-.06474744869465016,-.10763464536172436,-.08524826938436865,-.2315031932038772,.15315343856469926,.5561967810025037,.23774692046366147,-.1666896681928125,-.17715538120217467,-.16976838686613122,.025008504484853387,.06037757212092375,-.207132941454224,-.18646194822017553,-.08066176191384393,-.006108527904106376,.13478699831707003,.05663233125435585,.17462609841438137,.017491495363805537,-.015088475844073315,-.05179208029802235,.08667865349188252,-.04388543437840227,.048343192446375916,-.11502969777881612,.14059893815190727,-.06225829113308384,-.1133470132940385,-.06495391079798758,.027741435654062445,.11898150752091059,.030260843676813906,.1715435352553567,.05733311701306816,.16205339464116109,.0986088130067229,.07391231880159047,-.09081555366559062,-.010370607459546058,.09227572604484349,.11030039690306363,-.005880817865530123,.03315047782928856],[.265497784006023,-.001196563628947503,-.022916846645374064,.04242967231828259,-.13811673855846254,-.037430883372056925,-.04055976165522489,-.023933501028027243,.07925869079288599,-.03452188619865604,.1745046250935801,.041790623206738556,-.022740750277082458,-.0013539969792274592,-.10138864950556396,-.05330591399510319,.05890876091911343,.09337290317905102,.050140067951328054,.008453902706993435,.021166550278200705,.10388208219238029,.007634804692830455,.013138640062169096,-.07521733873467416,.015069141903176639,.24056352482102478,.06446432376128192,-.06152056570701016,-.08469410484337414,-.06805808373087846,-.010291588861849124,-.035798773818091045,-.04713757879339735,-.03026500105857148,.025114433975426814,.16953416528873916,-.0817543143366256,-.16483577488792853,-.0902156026048015,.19963523508019926,.18826320002737132,.0456147336838748,.1086113915966117,-.028328921848054453,-.1035162472195403,.07532162352055781,-.034012524380715156,-.05869582193122358,.44090992264428214,.08401925187495345,-.012849576849437369,-.04246094681649424,.13375661768225128,-.12950865617271876,.0026410719089161178,.044977821596146744,-.09031241110853559,.05573382619971841,.06006110600243948,-.7152771146839577,-.2823457778181207,.031272225391427405,.11880824524917351,-.004276759953008441,-.011347995604354372,.0023675469047975545,.0004348550966036674,.18958682252204556,-.08575981341015436,-.4525757422905344,.15961507301364802,.31736731659376055,-.06241231309053391,-.33746000415329924,-.24412114938634538,-.06141338958196621,.1307879363651085,.20848205264195724,-.20955124959973886,-.28812988786360966,.1444444314401861,.4681527258922822,.08513893261549756,-.22658732896395356,-.027717075192951288,-.16856281398342385,-.13753538355338668,.15059745895188464,.0007847737668332105,-.17890918828775537,-.06728879470102206,.11813620983475538,.1093966751655376,.10647641748777864,-.077849502674635,-.24214140318686445,-.15597210638677117,.01845193625122546,-.06530042705198695,.042693539088593954,.11063899895595043,.1345960282646932,.03073808878575153,-.014969922588453921,.03930721328436604,.041004905630175364,-.02833378555913796,.015742037834556716,.1142681683436582,.021003468182292317,.007722156555425588,-.0008480579679850803,.05639697053390247,-.11249629487295199,-.06403127972799066,.026888150461400945,.12621843363263308,.2506155533712283,.11067999815380504,.2625673114962656],[.07204136693885738,-.02294216842145158,.2065458637349623,.002151772315104397,-.14297221024604706,.0006065344407096968,-.058092024602730497,.13818306134022745,.17791598188652985,.1233364171367471,.004452851854572046,-.04605978546113265,-.07158630070162336,-.10073784448195211,-.07374001181908801,-.018045859949657725,-.11863305748309075,.17617564045249434,.1497784150689691,-.060747330352864684,-.002795567821259906,.16785791445724135,-.1069842654168507,.08299954323961768,.1290318983655246,.0472029159600786,-.030333770559695314,.09912149513807601,-.0517466008166365,-.20797950839871948,-.006052325355080657,-.24640179139614737,.0025429730685309904,.05667595309098608,.13754251807005335,-.07912609105408717,-.17638998336346334,.055182291054404795,.2999299991215481,-.12374985838286831,-.15473061907953733,-.015285688493998806,-.005413536155938592,-.08584047767716647,.22138328866134657,-.1312953691874637,-.331468720330966,-.21124338516694569,.24711637651267865,.4637243206427061,.002706170884996334,-.24160873975021052,-.10141666077006732,-.18322786018052334,.11158412852904591,.16760494025045042,.029994319879768874,.02568209912242493,-.11958702177240098,-.33142254026746104,-.15444906222705926,-.16381735574030895,-.18306921419313,-.40205221035750643,-.26593698021713486,-.15682020509672343,-.0002611999532893261,-.028755553239042705,.27424611760615036,.21592566014741185,.2548708412154177,.09766726443852504,.2003429726573298,.19878852497931995,.3068586161555329,.1724661104441013,.018739306158119473,-.031064357609991294,.02636646794424298,-.1877675901403973,-.1548117904943781,-.03742920818066736,-.11875155323060346,.1072645136817657,.17942453854019957,.11733499751282206,.005277889557191551,.239715757430863,.007970067197280564,-.05150273918961891,.05532003743668318,-.04000791210638338,-.09270810707710164,-.03147116641129902,-.09875931193346452,-.0929302236954023,.05551794898235975,-.037796492017755555,-.006342559497925185,.024882508886736474,.03498315663644572,.07193149606026825,-.03159247501458931,-.08635043298071296,-.00900169516689478,.07145747296891478,-.06072161509294199,-.14319100457707667,-.04832107159680491,.08148534066502974,-.028272073748030507,.06368387177606752,.005547975403340871,.11811279082577647,.1406537167258409,.0040600159105901035,-.01371930228275231,.1272415599265802,.0996273526994874,.13231658613798591,.13873127011038072],[-.027795762801489036,.19015374353251102,.09786449937030461,.1260265818055256,-.03326907462898673,-.08950071549954294,.04755987206442841,.07374106017939597,.10899124384412755,.010865871673477301,-.057265695902511626,.17802866217244057,-.06386667438683014,.018021373487705536,.025918690785187992,.05257574438698637,-.02127434335573966,-.13048583355248472,.029635938133951767,.02172060868160656,.07492647379441873,.05982963712461653,-.07690117928929213,-.026484578757325183,-.15053176420715175,-.13725487193154184,.08783323609942534,.06602307477877348,-.09194730471659307,-.2149017706218482,-.02002200413959808,.061471356479686365,.041399022424228,.03151238583282206,-.015300106252072884,.02606847025532051,-.033971179507359804,-.056571591160507355,.18971099504863476,.08899534885782014,-.15964206297954237,-.1658659652422706,-.11188281516561152,.12234793752765391,-.05230788663927277,-.3784533866593174,-.09661391326206117,-.06904822287997459,.06616884325249589,.4501083804430483,.11905472109942555,-.08909289493361428,-.12904510069418687,-.03652636132387262,.05482157876641917,.024810152389095064,-.2974723222653995,-.29999245801199964,-.3052508677798769,.020996924029338435,-.24088524064845188,-.24200960208227415,-.08979063621228703,.040398429108714586,.02526034075506383,.02738946668147809,.27071204540517796,.36231522138833033,.17799155604913797,.14461290644587801,.03918838067034987,-.12174172594558236,.06237969867131351,.053786808004118926,.07756536337785302,.08914298237579163,-.08291349820194119,.04793594103860757,.03222752136962408,.1350352800448287,.01205967148514378,-.004540301049576534,.04815794062847277,.08165162134080209,.0420055425519394,.0009471989558243119,.013451602816859323,.04615829282097319,-.08677011014133904,-.019510393108648688,-.011154645591627543,.027566377877780268,.06172844763368893,.01211458002765884,-.023208391928071358,-.03160731272004374,.05964254050869681,-.03676588913311459,-.01592889621276914,.006408090161429653,-.08189925434449696,-.029769584611185507,-.08882088193245963,-.028070658348809674,-.02369186063763514,-.019599361049671284,.05743812858231336,-.03819567161611324,-.011284460479520503,.039955132103732395,.0994475360757134,.06854955752169739,.07304758551276755,.062482862870410376,.026345779828657455,.05133517242772345,.05507457313109733,.05467724826002196,.0249056938059083,.045383956637533654,.03290849847519013]],sobel:[[.021622445358756535,-.0390444160061629,-.037053874418492755,-.07022176288405753,-.1427717878903811,.010719228314107376,.23521416713985532,.042585931839459745,-.06683861743458991,-.03578595224955572,-.04059161986118337,-.04764960919347714,.015365501205621496,-.008941291103032187,-.01809360705194145,-.041156433480069976,.05919352610154368,.03497012407302869,.008553519349948524,-.012132573309561322,.0371186042198053,.0111042284552757,.013666753799685936,.05711592790632492,-.039502379569608656,.0017172576948862456,-.10081077815789569,.037477947956047315,.16094952648226463,-.0671743911548443,-.03419754633951289,.043780102673210156,-.028950198305796655,-.07533857364442487,-.037953071524472706,.015621349282515417,-.006293662956530381,-.11863605824421611,.04918319370719824,.17069808619279628,-.019042518561221543,-.04243830041050764,-.017632482496080508,-.07573152098334562,.009532427173592498,.032929665395846554,-.014258152251170213,-.009896702557296536,-.08072755471094212,.0769505477203023,.1301045387299078,-.11441193151685329,.020647144228869374,.00749014842997215,.02952445728451479,-.012759212791825812,-.009358056202397089,-.005836205655333548,.06410438831050584,-.16470494179736736,.09441790187367777,.13506762949639728,-.044141557668112785,-.052786309985618965,-.01084112869678737,-.006663012542954316,-.023002077304622413,.028816328444530765,.04166077615413055,-.03202795718132918,-.061564972379557034,.13252072121529024,.13006898279253504,-.12914934815826734,.0036201984235415957,.03610542205997497,-.012106081202489141,.004058192101201268,-.061907628638589444,.007600367784796228,.03671952219823914,-.1410576836731265,.20291678804533386,.06038866116811876,-.09658956095157467,.05458913933858801,-.10018987380801381,.04112291504887511,-.036635205055412415,.11599660938438668,-.07295900961980108,.00583809207032291,-.08045918512870237,.15241049645522284,.06425812812905529,-.09976023757909988,-.03850852240843291,.0044401907717541295,-.027741747177757195,-.03436923493861925,-.015116464251280038,.0058884423068488005,.046096447137350165,-.05757678749304351,.10122734774744221,.07473544575211773,-.08287021420448253,.016464177481322798,-.03580810970765566,-.03475071464244962,-.003747381569910571,-.026826464835886445,.0056597480426354915,-.06776975169819949,.0568032112071548,.2204344679083607,.017122291321192216,-.14459243689689222,-.07900148882372424,-.044799531513801144,-.09998183610900521],[-.03942173319674756,-.057937375185619755,.07472938315329024,-.04804478632173838,-.03718790427316931,.052702736653325186,.2614265568109154,-.06194891259233615,-.10675064435044604,.03181210215084286,-.05138458731313046,-.006001020166593533,-.000758963231271774,-.005034712330520122,-.04106468549039451,-.017208529601601026,-.00959059876381125,.1312641811720012,-.05145780525032916,-824568465870798e-19,-.06300141610663909,.00662330181235226,.004505103028334206,-.00832061971740649,.03491261870366369,.012366610223709981,-.059276577400723146,.05228846208155291,.15469918793188286,-.05159177086372573,-.04577876556723351,-.007896035294524772,-.018756915070729453,-.09497130156345444,.06552949060396415,-.02915852966712413,.04686948866825649,-.07002482417194189,.06273064008554734,.12065622163679911,-.06865756120992836,-.019058676809837402,.007433748881822612,-.06712318925947033,.02052950643564122,.01304440247401717,.003508766683547923,-.012030134512047277,-.09718324129496053,.02850191391272701,.15192055414504166,-.07064017538379264,-.07574867617411588,.031913417912056846,-.03198191683603016,-.0230492148272136,-.030048256280766128,-.003272100719358767,.06000911662855034,-.10610745181060459,.07159991097201013,.029747261693937183,-.05575743675365958,.010540784627845606,-.03857943910359096,-.013055960468351072,-.046603955087347805,.04582465684306406,-.011912196563431354,-.011526854332901983,-.09532744148529379,.05183976113236992,.06949193683229409,-.07878846639780829,-.022076046119921762,.055685206611929355,-.02869018935857525,-.010750075363214893,-.03415858882057192,-.038029784044701004,.057878914546968016,-.13134480414052568,.0856079923756359,.12614414610906796,-.04482730622503464,-.049757164378562924,-.024712106659159953,-.07150714875938241,-.024192130054643594,.01362951330665179,.04843395308108374,.02435938666073026,-.005115510677492163,-.1051390039795366,.14444393915678838,-.008854843167052682,-.06877201694896912,.04154889078317525,-.03416715215551938,-.02158218803411909,.030182799067988354,-.004001462906150586,-.008366208163518175,.026868483822945988,-.022177672343113145,.08331376244831487,.010010211142558997,-.030072184867643174,.03784348921872213,-.0703839029107394,-.08354862092459728,-.03639193566116092,-.01661593760376544,.062407519296053184,-.09160202412195503,-.006843043428917624,.09508596316493824,.048338691169388215,-.027514079584110885,-.1310899111751886,-.09668378141294953],[.02652155293290502,-.04575770696844337,-.006541188406767798,-.0850611791651533,.14722881834024182,.047880871068860825,-.019733975062189213,-.051041982772424166,-.06667461611485706,-.018868367139866095,-.041407892531913994,-.1135165849534281,.06494420088328412,.02647152281327755,-.0009023323279171679,.012634138439591477,.016736706302279282,.006622967558128835,-.027195497182580936,-.013683547901060635,-.05313406694033209,-.03712665111485396,-.02263257568938737,-.0018942229311252846,.03346211015366675,-.1182492365861096,.020164248753763356,.11022756484626357,-.03439933132264335,-.004049118679745123,.01554080038394597,-.01876268414416564,.031382890856517,-.03490611065951857,.008409065294535818,-.04433470712905613,-.018500134350316173,-.03677441221924304,.11924665863029466,-.06655695631623004,-.0157217782738675,.008804996944793225,-.07306105742656663,.024309817051911063,-.0022227005091241224,-.027084812593866206,.11300564532044208,-.0896577241954244,-.06933069492567155,.1522788162456262,-.1181410719140571,.04152270594429727,-.055858865503919525,.03589699264499422,-.02283997385633508,-.06235905686569805,.017954041686744696,-.002351693056876304,.024292471256874525,-.020140941604535046,.1661637815621748,-.06054747904050768,-.09599363187714963,-.03517153185773671,.00017003372512303105,-.05448690490066162,.005104687483287511,-.024970809646617714,-.026948648737005924,.13211777318770576,-.015912595374394843,.14876817147359678,.0796408202313956,-.11230282633524796,-.009244179138250534,.05881906813164031,-.077920153621443,-.09048227175758561,.11102826856966876,.04262609405288573,-.002195518726305995,-.03612226711997726,.04714670601583837,.18615910807929142,-.06326936864527846,-.06350591196288817,-.029534950411274838,-.02998682138584287,-.01600285092423518,-.030794045583080902,.007041927810126417,-.03044439031995083,-.12718798875016957,.041134467878119835,.20405185525846614,-.02981115718000413,-.08705268526814279,-.016364346582207326,-.037891810417653854,-.026401963421238878,-.01377908482257758,-.013032137299750876,-.0535382795543113,-.05677960797001068,-.07937722305377937,.1823700488331369,.04187996112061794,-.046827200345602865,-.01941969694818884,-.03279614251473426,-.1704434512500123,-.05402585591400131,-.01264725681794126,-.06730558838276793,-.10224311399966124,-.3497190298002362,.21798581432121136,.3312151668296328,-.020319476107282762,-.12056665218545416,-.11656639490906624],[-.034745756067027414,.011922066572062268,-.09844929180493724,.18031082717496805,.17476539334005353,-.04651834678078855,-.10946016872645539,-.07572746991726476,-.004279528158131065,-.017696596899397482,-.0939835628640418,-.010800135732187889,-.004556932318507428,-.0313793616124137,-.11850675752648224,.2367012443070334,-.014785597277977354,-.06330233126223941,.0225368275762782,-.025071938686129294,-.0027915071853978554,-.020334914936012752,-.0260080270892961,.010703003018176116,-.04302986734354733,-.04719551951341225,.12321706281055818,.07178600528297852,-.06528227400456835,-.0676382212399581,-.030061503019037598,.0027284619191995756,-.03074601987445027,.034300317469793756,-.01548496672283399,.0006179721819279116,-.12212293111148122,.05002280333117751,.14679567560544277,-.0844548887536185,-.010415558440521971,.017746373390555303,-.037888913263606695,-.004245286137776923,-.07444532374647941,-.011522402982276407,.006531765327581377,-.09306768567122295,.0002576849794380092,.23352117567061204,-.004983968115974451,-.07096139483486509,-.040406385819728594,.0038935193964216783,-.06308769534344781,.002854920112929586,-.011365105715306072,-.005187184085771797,-.011323145685494362,-.15258276867230808,.10052717621074529,.12368458705231265,-.07784739054660597,-.05947141825026764,.028026328084379253,.048885641757861406,-.019665152356733828,-.017240548423916428,-.041027265162514856,.0011509894918183342,-.08224193528889252,.07860486788553207,.16228781290785055,-.01052370034412145,-.030965934865738454,-.04150395922722867,-.03971893854081693,-.038748556042536665,.05147042014917219,.030039107409380247,-.05146929592994629,-.06031302048942426,-.08141793665406812,.17732474397593703,.025219765376655087,-.012727987606368688,-.06452329607912104,-.013167312882832634,-.013895314055951707,-.04937557221951774,.014179550428987366,.0006231274166943537,.007284514890717856,-.10894474372759466,.027784507036578657,.19201834106729118,-.08503636154991112,.023988581116611958,-.02282810457170993,-.014372052338263167,-.026342474575395736,-.005546792145770824,-.019470544310970943,-.033931503651495665,-.009153654429471615,-.03673949260822036,.10446088448224827,.02096972633566819,.02477619301857615,-.07882973010453503,-.05324513285593391,-.01043331061186759,-.010210640679316214,-.0513080253985015,.037884008160365974,-.09932414289546485,-.12671107025252934,.08382856754313096,.12485291624334745,-.019875141138885395,.021159178415280137],[-.07381342857851532,.0455540146431333,.21317974541835555,.05448580409181898,-.10981511144389543,-.10268425646919861,-.04650116351920065,-.055663971820637946,-.020862778212020025,-.0016239951963715644,-.002629558452717437,.009997409413537085,-.1034433191717149,-.008081438535099912,.20536698014540328,.06126371127783943,-.059836319781441494,-.03879029447603735,-.053677695944028214,.01992364774611377,.0006753675996654038,-.03572620746404241,-.03544101559998049,-.024733560212268406,-.15079839806148979,.10615849316820197,.18684548267040532,-.06407028093214549,-.06708715087119563,-.0055311193006368775,-.08609293439519577,.061425846472940575,-.0352191555938125,-.039575091828705944,.049801600957609174,-.033980895382327146,-.11533858246663227,.18080146842113642,.12760232482142872,-.08327397929149902,.004050625643949118,-.009980892873738614,-.06775913770201022,.0026835543791823638,-.00803433817430127,.023532332559458254,.04311746952929076,-.14058656961156304,-.0016268330065314137,.1558532497649482,.06962658020587428,-.1243686355938375,-.02647962384653368,.02038319920383414,-.028768935662109356,-.006285770213208797,-.028321313745657696,-.01168709222463879,-.029152829240080027,-.09492216145725302,.05287227428314446,.11087851911197262,.05425160893742777,-.053296632141531824,-.02755855040578903,-.03854510047924891,.011349127429016066,-.026961940685359908,-.005884952735511401,.00206567265274352,-.06205567284106403,.02710712046861733,.07672022654060172,.009554614295410758,.06212095818042384,-.03262997618859226,-.02150746774468064,-.05278408473616569,.003042324765367102,-.00803157070172712,-.06392451109412368,-.00021021475214931008,-.10024981203982601,.1015512962019214,.06415755572356177,-.06991649277121507,.08210312205359811,-.04650333410340245,-.004884800731244601,-.02758565365129036,-.0140809555182348,.019042840231226918,-.033131129031483485,-.00891359281431682,-.054256262048008735,.11973166937117143,-.01826858015786499,-.023883645532026994,.04923183201129361,-.014577787660792423,.04612778717043076,-.0751102026691928,.04662688612671707,-.04174713495693605,-.03251487077000792,-.05433873340003095,.017222361404870275,.11676824759018707,-.026438027156220366,-.032102992542435496,-.055241109787953276,.05623591331540999,.009962320928060292,-.03247355703691324,-.019767314495135732,-.029422259501493818,-.05097365566473705,-.08644257971970679,.012598629009327726,.06612221542730885,.01211368001348305],[.0004667357969735525,.0005484962618241966,-.00013618713228205742,-.0001325308516655052,-.0008015746157093179,-2691133605066146e-20,-.0006576428843258145,-3657968399891406e-20,-5466011820027881e-20,.0001460463513297764,-.0001696182636010491,-.00015906228894248253,.00011235296245967744,.0005051823397537377,.00015356454550761702,-.0003132396323740176,-.000443009848644497,.0005320046122783456,23644509619358614e-21,-8483171427942043e-20,-.00027200405736615936,.00022416316434788062,-7119462531548662e-20,-.0001921201138109542,.0005739617778319649,.00035815207686277155,.00031159259445471095,-4693731115592045e-20,-.000655063269267907,-.00011995580027392686,-4234800514009546e-20,.00010587326804443578,-7932255000570351e-20,-23721764802441496e-21,-.0001704014757213674,-.0005759316542972587,.0006522217712101383,.0002665414702900902,.00035667127123066925,-7769177785828997e-20,-38172905741614115e-21,.00010049476721076365,-.00012168481580056376,-40491064147097386e-21,-4815954797536162e-20,-.00023287151964227542,-50225019821443275e-21,-.0008018262289789277,.0010438945255279268,619697064224538e-19,.00028901935081157955,.00010579037778190963,-.0002724803030345158,-.00018248333714674828,-9789360941573534e-20,5612226678763241e-20,-24109435187230215e-21,-8256402305014017e-20,12275769358770228e-21,-.0011837300475309662,.0010387599962857208,-.0003010645692578806,-8294294955041304e-20,.00046305034318953886,-34941522492179e-18,.0002604782638884796,800633144412387e-19,-.00023204308256855825,.00028043251942060473,-.00017992926522449743,.00024111256847714896,-.000777073687135317,.0008725867023055139,-.00047310681975866464,-4890356661830034e-20,.0003016510539483913,.0001523693782892032,-.0003214720006770571,.000145004901686719,-.00014868675403801115,-8406917150712012e-20,-11488930694997235e-21,-7310353847784362e-20,-.00027257580575307944,.0010045581248467467,-.0006063389015931106,-.00030283901680250476,.00023946215844236965,40874050688199964e-21,.0002066877668432881,4626416595003647e-20,.0002212022580360476,-.00025433190468929917,-6962082684627835e-20,-.00011541458342628763,-.00025522292698570287,.000908077213322929,-.0001479625967791515,-.00027356753032273425,-.00019226090250733943,.00015027389750788632,-.0001041059494256247,-.00012272487478783012,.0003376683677376868,-.00040885269632123106,14064712871159069e-21,-60893502923708986e-21,-1227014387847336e-20,.0004636730771513907,.00018271794499197247,-33562064556917105e-21,-.0001861452801387312,.0002474759769718931,-.0002203964126913302,-.0002655235806198683,-48267361401083814e-21,-.00013654454453562725,-.00016522236506379823,-9985241041834958e-20,-7308470539467734e-20,7649675181982088e-20],[.0001419249300921993,-10849997241092063e-21,.0001677566369007906,-.00011605018962013852,6675611545678417e-20,-.00015562939648154986,6416442818616905e-20,-.0001614403193715211,-11567201873632915e-21,-29389666004610293e-21,-.00018545690110512159,-.0001419296577092402,.00015688900011993565,-.000229871704751812,.0005060189485679434,1147904121199389e-20,-3535800418509594e-20,5415137837850442e-20,.0001162675133458968,3718585855791434e-20,5955359052348119e-20,31314783550819014e-21,12057174878739307e-21,-9669598794523337e-20,.0001044847847413502,-.000155071439923736,.00022022799757739214,8386688043080653e-20,-.00012962060856349517,-67578262074236e-18,-13555990987554334e-21,-3573770488207728e-20,-4580879555246553e-20,-6354878206941278e-21,-.00015612384897251141,7008522349730151e-20,.00029763597940726805,-.00010577343553129503,.00012730480076296458,12399248204064683e-21,18645837807265697e-21,.00024212785489370614,-.00015872860498579444,8370724121332246e-20,-.0003259753596085574,.00041133058083372975,-8868765658752442e-20,-.0004929644470749728,.00020605423444788884,9356117414315718e-20,.00024762885023246056,.00036524470776032325,-.00023688791970755824,.0003317223665558061,12629398500677014e-21,.00024080466741264323,-.0004006372668640644,-5956312920551987e-20,.00028033907001259045,-.00028345593539583214,.0001339187071822609,304935126049094e-20,-.00034838001372515526,.0005974623821075192,-9984648697297649e-20,.00041453928701537524,-.00023073595005270592,.0003420850861519109,-.00016580817990245744,3976576445351848e-20,-.00027830373100982964,.00012537929853667987,14736238159517717e-21,.0002756723723416135,-.0004888438970630446,8721286611335088e-21,-20493341142208132e-21,.00020499966401848688,-.00032257655852790945,.00032032979815644486,-.00024321547888298814,29086686149870644e-21,-.00028867101368240666,308253988305085e-19,-3679758949304973e-20,.0002922835678795463,.0005289131903343444,-.0002405873549854512,-.0002989896758484323,.00023190078400971148,-.0002429945590425725,.00012631644056069861,6836571335519515e-20,.00010549540200119334,-7322581853928811e-20,-.0001018216734522126,-7634194521848048e-20,-.00040021222480832175,.000518688311283471,.0004528227836673032,-.00025642054830855854,-5331243306501074e-20,-.00015071920454498566,.00026346273973178874,1572313523398594e-20,-.00010611552565827076,.00010030771494402846,-.00022901452791959653,.0002951541391374296,-.000378103168520591,-.00048426748955096577,.00022179377366644826,-6552153219173927e-20,.00033674118948758686,-.00046179298814816305,.0001050701224512944,-8138607593656533e-20,-8540917054615516e-20,-889958796901763e-19,-7585331122395705e-20,26564465721370945e-21],[-.010683117891894434,-.02620351731802986,-.03534863123446273,-.008903947669758876,-.07826483213345957,.014533495211292522,-.03973549743914442,.0028868136525013826,.008256343228267193,-.03687632798624772,.0019617637025766575,.05292419388952615,.03547852648387356,.021452215773512737,-.012058498396393419,.032415748027272206,.008148731343012645,-.008287843059112744,-.011301795333024143,.045191867790093425,.0443272347840628,.019363765884505585,.11356516329476325,-.03297909837716518,.07569751640913967,.019096851467574182,.008341756670470307,-.006060831718435461,-.024521250232898754,-.0062563950604268,-.01942454996601342,.042617826976536294,.11771045618920394,.14806853397919761,.07242131632098367,.05825312332492652,.036446775225891515,.06185042985131853,.049704669459738865,.05543056149812341,.07026667566078945,.10791776313079825,.05311703744365072,.12942596556811628,-.037520978380153586,.09370958660148157,.06757677036036652,.06872498144163033,.07612678330985373,.12311586010135872,.08341133633610057,.03938707776246564,.056425147284172514,.014237983090907416,.05663383500458416,-.007586313673593262,-.08304140447131836,-.03312998363135067,-.02763623864202023,-.047768510607462976,-.0632962042530323,-.0625787861890991,-.046277350408935075,-.0014999128228245229,.03590831793842944,-.15153224136771898,-.06746002500304579,.05297916353806439,-.025619303894120496,.037941615130038006,.0649108950810626,.02230202042681128,.05527075190732955,.09270549756162146,.018963378238524085,-.05397308646482572,.008330149548244339,-.021218159929265457,-.030570605486973344,-.0021454021899788445,-.026875831051993617,-.049042673990263554,.005126075452093991,-.0069454575735653475,-.05554130502902047,-.024578161869174033,.015168445899802574,-.06800332043927534,-.0004811209803101679,-.056520449187868235,.049669608030607104,.01631627846344143,-.03408574477458805,.06306672693556993,-.008003322830341992,.03338583748912691,-.04457596702970919,-.023441355247158995,-.04450920952691433,-.037161871027802405,.0073190175238074615,-.07315762665564123,-.011373417119033976,.07203060276007722,-.01801567006958655,-.00013858608242610544,.02837432120799207,-.02556727198730242,-.013903313076025374,.052807958873996745,-.03831841666326997,-.022987196513577734,.0062781886098834845,.029733530440722515,-.09023650482004696,.0094683723177513,-.06760687073712972,-.012207168455778569,.003949880911342205,.0017680506907682904,-.1320506501819677],[-.0004896583334386695,-9613383588834984e-20,9502440927711825e-20,-9483128665062346e-21,-.00027318400850575436,-12859674043262659e-21,-.00018753431578469315,.0002535982748430171,.00013593197045175948,.00010671640250792952,.0002520834422912871,.00030575486026798715,-18677323289251202e-21,-.0001359879426809929,-1.859672404264101e-7,.00018716058456554746,-29456499708931105e-21,1740372235658344e-20,.00029170983943693773,-16893395160838542e-21,.0002914265737280833,9820001306080905e-21,-.00012201675367805309,-.0001821511041478624,5872783585957053e-21,-23871151498152526e-21,-.00016916476120136525,-7717554238115265e-20,.0005388762586042359,-759543277033814e-19,.00047546289643572714,-.00048532553637742337,.0002524348829850197,-5288970316780217e-20,.00026631391925304587,-5706901207734594e-21,948050040261092e-20,.00012583697976619596,.00045284900761148605,-3792132542147775e-20,.00010519128394604477,-.00021574981428573378,.0001305879900506124,-.0005551202035402965,.0001429939062747021,-1537039116969452e-21,8065370761985158e-20,.0004067755777601087,.00038999196381222373,3687737451229384e-20,-26107472160714212e-21,-8558362711672332e-20,-.00015583615391241354,-.00011965945062380329,-36535280401381234e-21,.0005409408483182249,.00037630623255849316,.0005226965893515845,.0001311189140969643,-.0004006033211368873,-.0002699354254764169,-43072617173671446e-21,-4658295413017405e-20,.0001170409315355593,-.00025561950600206523,-9798859756077194e-21,.00028045364993524793,-.0001608395418377477,-.00025723583975659214,-.00046505036856739346,.0004039314021320739,.00034091132239879793,-.00019370884391506013,-.00012426188246242656,.00014610355538470163,4887463226376648e-20,-.00016902502798560315,-.00037191521627369384,-.00021579609440836728,.0003996153018098192,.0007981264512366137,6535068239886532e-20,-.0006637329476850487,14201540184693995e-21,-30668778868838537e-21,-.00013015400162084967,11834065800214733e-22,-6045268667183301e-20,.0004600310403380242,.0002964915299992765,-9742215850019886e-20,-.0005461539479859404,-.0005455504543375317,.00030505150102402845,-.000122823071145077,3104235413028261e-20,.0001268834643597741,-11535964674028176e-21,-.000176869063298763,.00011095223633189599,-.0005922445599075704,.00021684456404430508,-.00045799378668898855,.0005799531522856713,-.00013936531291453697,-.00021220643616092633,-5413656980053638e-20,3660890747885295e-20,45939329531563544e-21,.00021478664432446337,-.0003269975562177341,.0001268963426280592,-.0003423046849268599,.0003476774203064331,-.0006754907234843358,-41513304792857586e-21,.00018063222856385536,-.0001881377600047654,28973339703669554e-22,13507237580291653e-21,-.00041261401631562805],[-.0001343678115740335,.00012210804930180494,-824144225993334e-19,-5730186380512037e-20,-.0003073948625443232,-22492441595647894e-21,-.00017176271831247786,-771017116939221e-19,4710757033194596e-20,.00017636492999561354,.00032836342762108256,4108769956619879e-20,49949350228714606e-21,-.00011875800957268645,-.00023943950047199125,6100576503324101e-20,-5478607070270522e-20,-.00036631651977345886,.00016730329224556167,.00025493108839291095,22226604097883018e-21,-4460834588607826e-20,4891726226349813e-20,41964097110273185e-21,-6131431820233235e-20,.00022686166653692816,-8924793820791477e-20,-.00019302109650852495,.00023804561802531765,556913355820865e-19,.00016699837552209412,.00017965604481385428,-.00038349627139956134,3191863916031032e-20,-.0002191428537772662,.00033657077159139626,-.00015380926340578804,-.0001264037732578785,7844359819078606e-20,-25921418374194594e-21,.00038527701539335657,-14538798784193008e-21,-.0004928838914605993,.0001028736165327223,-6438312383352796e-20,.00023810111270487072,-.0003138610278263735,.0001400826247810147,-5891302942668403e-20,.00032747301458163625,.00039023015135071504,-7447541605180158e-20,-.00041729123414768754,-5226020210982729e-21,.00012735624759406539,3662905984705249e-20,6562876120307787e-20,.00021839305017589544,-.00011813071478151277,.0002169814330799935,9628751475676545e-20,-.00026080214823867576,-.00039654273422187053,.0001167125140248762,-4016262676008464e-20,-9660908197616641e-20,.00019201207703931078,3589467907609556e-20,-.0001321581580999917,-2203113921459693e-20,-9310837541985639e-20,.0002539171933422669,-40757163905339486e-22,-.00012808461454903692,-.00015139230658256335,.00022616830885492656,-.00010182951161811366,-2148301565258609e-20,.00028356599204855393,-.00028490640829138825,-4289175013874602e-20,.0004145591668924045,-.0001260379310736165,-.00039707365188554333,760334794278339e-19,.00029653613924018885,-.00021374066277618509,2327117911399279e-21,9516417231490021e-20,-.000680147729170702,.00037026320560729076,.00019251368934372626,.00013551091552941458,-.00031120640022949675,9684992877975057e-20,-.00011268464289018038,-.00023013062013480662,.00015401847444745237,6420534280956319e-20,-.0003497429765618107,.0006485339651306349,-44729954720712506e-21,.00021224544758897262,-.00034308486716421273,-37733988311935626e-21,-3886834937037731e-20,864986593905187e-19,.00014456882901125664,-.00014732698311536454,-2761325023053346e-20,.0002635436170520672,-9631500919806552e-20,-8032375598398395e-20,-.00018998607556105357,-5912725043037692e-20,.00014091011956727205,-.000129965375526217,-5035229587568163e-21,-.00015231914400671252,.00023099545000895144,-.00021587551857769893],[-.011113779995796793,-.03264498365428932,.03239332397703781,-.053019160588067986,-.05228963164641236,-.14090905182270536,-.10662971417607917,.0767432911258378,.19183514586283293,.09051278080603262,-.09834501649578946,-.011356541223655056,.036592642227365337,-.05386114520342726,.02133640185891116,-.047044247520027484,-.07954300486607012,.06913481526096213,.16070569312483246,.003845693903315633,-.08669557060029598,-.030081196583984296,.02266518207617302,-.023072771394334196,-.018331023996742943,.0011057635434971857,-.10917005303651976,-.046906120609124184,.10879721410619564,.17214824601663198,-.16345419009446593,.04738712977608745,-.05013066351126129,-.029615346796994284,-.03838162551818361,.0016626820450895159,-.03477979881909356,-.07094315047427265,.07790962934702458,.2301997612697828,-.14284459018595042,-.0333055990505881,-.012579026667957113,.008416322955214002,-.03299358057460782,-.048339483281004764,-.01952530866179105,-.06984453532422541,.014727444216795713,.14996686179447366,.07803165303386042,-.15724129008645732,-.0040330836908469385,.020646425620089916,-.010654017089976087,-.06865623112225558,.02429760117440692,-.00248772472321912,-.030227587432549025,.09022701473345793,.080842697753929,-.08665487622028453,.012959715152821044,.018917133744079905,-.04562303577648189,-.03273939111155515,-.036378708143565655,-.052934938098819245,.007262840131973619,.025315816651209383,.06535498883148017,.050830135881118316,-.051373434850408066,.012062843823364068,-.05392149517917579,.004169526857924672,-.00822648311683467,-.011220404620470506,-.007584883382162197,.05900004822275351,-.0399206568488865,.11125743952652592,-.02151903494012392,-.057332486848285534,.005525995387836064,-.004210488740013946,.009154376366908981,-.0295339965731944,-.004661891680095134,.08682679220521433,-.08790568197773525,.06004909473502472,.08223957443365432,-.06795099725920267,-.05283650885563538,-.08178791847111451,.043805514127629036,-.03591864415070863,.03094303412250326,.04887370765404538,-.07841929294906942,.036039114074194384,.15301950458013516,-.0020635318713273093,-.06214429501471075,-.004218297412045746,.01834272293845469,-.006300758423097505,-.011523161046205615,-.04725822724231044,-.028717665984571757,.07880162607227713,.0692019757290932,-.08005962691627755,-.14106514638245227,-.025481816722181624,-.02050899754304229,-.01550940323134436,-.009470541064192074,.014878235172793254,-.0034914923955158606],[-.04971843100034001,-.03575889242398292,-.02224283272765947,-.03562318295011419,-.06894626983188856,-.14441155948249546,.23465172605260556,.15846679355786267,-.0659719826581496,-.018535961144545934,-.024797174426993557,-.007636807485574512,.006622761255119671,-.017526536442783753,-.010789194077319021,-.04028603232029023,-.005696164031687334,.1397321836105699,-.04284104175594611,-.030912602586234482,-.05061285701670149,-.014451167351557435,-.033321133339262024,-.05328285157863482,.008495658270799577,-.03339861810668631,-.10205034437720886,.030196139746642148,.2111090058125159,-.08571158678594976,-.03076667731951701,.006500592107532695,-.03210762330314061,.010380556950672306,.03767059594921794,-.0562060877406645,-.03260370052730352,-.1561008405998785,.15115473184883424,.08746800240785815,-.07971426742988837,.018202271840872142,-.004510543134351204,.026832614720378654,-.043425866989209555,-.02606652386909608,-.02528972705916014,-.04209686959874565,-.07092572120010054,.2353047649955322,.011520678728863858,-.09581658456091145,-.018725466710660395,-.03704855812065811,-.02682191249783396,-.01958185753544785,.04467674875991068,.02880963595396352,-.05826188687569988,.024776575417213054,.12549740842491305,-.03592912939341686,-.08711888567377409,-.0026901477265302994,.004623747514651455,-.01805029602659732,.01677903389914825,-.012651134169698123,-.08994468500400721,-.061952592133401846,.10990524701743055,.15037999590612067,-.09016358068481367,-.035133862878716476,.019258114736171422,-.02301007896962138,-.02628302255772117,-.06621484314682742,.0036081782275008047,-.019205792810695364,-.020171831093293915,.1989806157237472,-.02415868145760247,-.04808238946626517,-.027408223538038137,-.07552513961268857,.06445412216125246,-.05857538201324869,-.008636818611504817,-.008603557448920447,-.06007705027057858,.045971736951263456,.1261833313396889,.02241086029687553,-.11049746928652586,.006961916938878258,-.009411296340127936,.015502770454642434,-.04843838105449936,-.04682917755552031,-.00022238890926721058,.0014117579120073859,.08952534381204688,.0791414649635066,-.09246249793068118,-.01804897261050772,.0014867057354299527,.004759547594927055,-.0017287964469103294,-.027304885422683407,-.03211096685661927,-.017611444082195685,.07341586774044973,.11601887154016219,-.04434827491478467,-.0984071844483927,-.00881828136321402,-.042990020804917144,-.03940265377754293,.014836527788627827,-.05063500634395848],[-.06870061977666025,-.032923512495656206,-.02868483865794043,-.027346807901848392,-.012437513369475654,.04530776482700738,.1414696366919664,-.024737285685323483,.021872256378449306,-.029614351891534337,.0014704403181207623,.0006144922740007053,-.065002449904544,.03664380823329959,-.032209783114478335,-.013719980201209792,.00426188928669817,.043978918430192894,-.046107785040272825,-.020623098141049494,.09266822988184892,-.08522650911863006,-.047326937943777285,.05689568993385545,-.03886774424531114,-.0917328495389379,-.0024675929250557657,.05478810995731871,.09232475402368089,-.08397650829996617,-.022272456922531034,-.0152787501100025,-.037660821714487036,.007948005039252179,.035560068131964134,-.05192514292376262,.004863455499818217,-.05161245009194064,.06992677022937326,.019603910194766427,-.058129948226766356,.03412046818670464,-.02278922943675725,.005680354742385249,-.011190673015587217,-.04520953921646584,.042701687889130674,-.027745655178843524,-.08307583567399829,.1566134871969524,-.028533516906845684,-.06401890449044573,.007163733294636168,.010946513456513277,-.026171760394870333,-.039176510971348735,-.052625382319528485,-.03261061584915651,-.024151118786911202,-.029592259235384895,.1436711807651598,-.017566095578734467,-.05465952396135736,.05715543878269193,.029811006572219523,-.06133985657961934,.040778203393560836,.011699351049567291,-.008824374183937844,-.13867569479385672,.0070547616779323835,.13839794109305759,.03459564127055502,.011188421962504996,.04842384205952972,.010037686002641197,-.001849752028092358,-.03785572945780738,-.043325856166240725,.008041188746280075,-.13690073357640112,.15427462008814505,.05318588242155513,-.0628488005805444,.0989080080739189,.024336051774163703,.0012517787347508663,-.02085091104539423,-.01045887168510497,-.013997622908016392,-.06299508039917381,-.1271771187032044,.18117010896522742,.12557740084057686,-.13691773676225652,-.022943723539645338,-.023607554390057763,-.005930858697200191,-.029008536818149494,-.11052936897449649,.01676636486201016,-.0299062367975718,-.010995032071071418,.17825885072525774,.052695253789213546,-.1585687154017169,.018373413764860413,-.0626192972782274,.02519282178146548,-.0018928521098937135,-.06784052805659943,-.050794234172886574,-.10116936098857549,.13362153032125096,.3407549635188265,-.12171874249866213,-.21070461874955115,-.08335948599574525,-.07847568766745316,-.029251874573081954,-.22249275032005275],[-.06557132981627023,.05738770283308524,-.13424650578557906,-.09589658463641701,.24651372455616202,.14475023251856034,-.10963067096889349,.025484984396096345,-.0066750222960001646,.018031088995289345,-.07282721762829031,.03072620730408979,-.044556908489582235,-.015540996433387919,-.05684501901116374,.08563323248437722,.10033013618746886,-.03742948303225134,-.062461794161772756,-.03392685415786098,.014833446973797017,-.031363558199583357,-.023246290106997476,-.0327584721013548,.02961216484574446,-.09820928377189234,.0779439521252258,.09567131375265248,-.0832456125771979,.02090571766159638,.050810743632591124,-.0391322080110265,.038703668840843024,-.040633395391036504,.0006752785313583094,.013989351386346478,-.13054119279823606,.04516367083208646,.11112335558160061,-.06373552516471757,.03778245134663255,.017424010888546733,.06158322351593924,-.06367375205409963,-.08535776536497154,.03471529887784667,-.0030215396455599607,-.07451461098895126,.12038888042278573,.11914516519976012,-.06649815958028849,-.05748981868984826,.02124787410688792,-.04339580161445786,.05609240585926381,-.05090562582130901,.030755476067636615,-.01704186923067369,-.08637267081993893,.04370717517162562,.07172909488097384,-.04617200925522033,-.12569107869407672,.06277755106184849,-.05487776937287737,.009849298301623788,.042534935799133616,-.025427465203307967,.004850414083161267,-.03453433126307495,.05714138711583339,.07182413008592944,-.0788566890824005,.04618658938424866,.01402194350192731,-.005972411899040125,-.059074101001239145,-.05231144745761093,-.018659392189258467,.01679541713523589,-.04857610065474247,.005696565881307656,.17000984187958204,-.14025171691578273,-.014920288189935977,-.02450105995756531,.06767970387277354,-.05264157700657106,-.07708134460423079,.04250499017663266,-.035988224869212784,-.0484505957175579,.04767468325269961,.055032983271467065,-.06476109655440714,.02029272112323993,.0052680731730131965,-.008724092125284879,-.06060669340950089,-.06911080849629166,.024795838594949066,-.02709793851891864,-.001238691496232761,.015076588937461598,.05587409661404934,-.027944142757713664,.005228808655026744,-.04832118189051454,.0859618445014223,-.0020462600675238323,-.11993808096408821,-.04960087738705985,-.09297380182954165,-.03198034913961813,.15102131486065962,.08275513010266165,-.05812569461482564,.041661463970234,-.03704705799323233,.000876268336261118,-.08028339097351245],[-.0340486219621066,-.013918394846682072,-.06548772211399817,-.04731007365314881,.23782208982702535,.10576669895809315,-.16563976884791567,-.0108553004703765,-.0788364106559585,-.050020076625922213,-.08231163698432487,.004622159286883381,.027970146226042773,.005895316254228362,-.04040394188418152,.08525380530113646,.028249211911977573,-.05679902522817456,-.038359856825438986,.0645616517837107,-.004954534081803498,-.00268722370959314,.015597774984475364,-.018251513667145277,-.059710086387074215,-.05715073284894628,.13137766031471873,.05684248925104454,-.02347708934561005,-.04715337162739789,.0008577029751011787,.011008761901938887,.005612370393199692,-.055914997492275034,-.028097049059282828,.04862452952582646,-.09611678916961594,.13044452791174554,.1272054903208456,-.12259017298086688,-.02244577462454636,.0076033086689639515,-.007813929706646499,-.040902985091359895,-.000980222289772098,.010151778602803127,-.05530879288878149,-.09226196374306854,.07871023494618042,.14963503373654086,-.05960116711405472,-.07591037274393221,.0697560193883311,-.012391419754460144,.016171610667790957,-.01017022339581132,-.009940859762634521,.05786281891442392,-.05350019383391824,.0023150521701103197,.24267633702175795,-.1627124626737711,.0030389904814953246,-.0019134583602005394,-.03193473372056354,.03124072934772428,-.013447900401826515,.018762854504427245,-.02719410349707868,-.06383461172931906,-.019315034866382974,.1729629692465321,.004777956656449228,-.04672408796801385,.0006375017978076832,.012018498525607005,-.04990623142803467,.0631023423942359,-.05911314871008452,-.0019439172858828069,-.014409167351918703,-.015148208183996925,.158027298534601,-.009547054530539667,-.14207668185762945,.10783009215784571,-.0293163415939047,.0049958861272639266,-.027229716588043594,-.027547849025221866,.011938104583316997,-.054219992876510435,-.09213502026012844,.2366571402781235,.04381912695915194,-.041978283190380716,-.005602932677075387,-.027255334727821774,.009614504323891875,-.04154993190319173,-.03406843633019107,-.012401382536206651,-.041537969321840174,-.04931433365199229,.16482326808377185,.042083362292458376,-.1097240094748354,.06603360181201932,-.007724959812059354,.0029248566859087777,-.08085063161269566,-.057690051594666086,-.037836445771667115,-.09375000983186849,-.14353454214499062,.17090805592445343,.14406736607449203,-.019806817871862357,-.037179860963505104,-.013199402310805103,-.04737800672527124],[-.08935579558985787,-.04359861333466415,-.04068549086934767,-.05631480149874235,-.06431725727173337,-.03630570340246155,.0871245497432262,-.025232182382037796,.06076258307108177,-.0169324426881141,-.04097456182492439,.0011692733530746166,-.023469947694595206,.03936015166522691,-.004433224342906196,-.014202479654525112,-.0704636648773633,.013142057597150633,.0033619826211813905,-.010205721175565105,.039510232304449916,.02016745030270929,.05693801155584716,.03417449164261989,-.06266677460391629,.08390039705725347,-.0039050936206950077,-.12023709783757955,-.01912747727787286,.0681952032045624,.004239692936547787,-.0247270685186844,.013195391150686318,.10092335285374379,.08373297809847169,.09360148822269915,-.028064279101364227,.1530929534721796,.01908068436728888,-.13458558446941826,-.04181911859599221,.023907908538223728,-.0036807630455928317,.007893862945026961,.06400696833171123,-.027474745577589776,-.014962346779522961,.01943103904009246,-.10421624372835411,.18788293784249166,.0038646939965042704,-.021850967831761797,-.07162000950390228,-.00733041969522252,.023479102591966762,-.03299246606173216,.07477193086079781,.11997396053811867,.16652757445893027,-.04345092572887981,-.19633494915962973,-.015120380697294114,.015595534851796003,-.04143571068691104,.07582665057516966,-.006269813566701522,-.1352326255832109,-.13542793759250013,-.07939999295566169,.013399321738180064,.2984644348332156,.12612688550553225,-.08208469016768857,.034499018867023584,-.06088746066634903,.028443725041023785,-.03612203963838308,.005128423199872348,-.04605609290697394,-.18431251645987262,-.209810670926456,-.12018234374910172,.09562380971931125,.012101575052632325,-.022524769880679987,-.04528247702805672,-.012822428753938651,.043771209187441484,.08044224153659445,.05368502763886268,.04066169032092117,-.010274132182098798,-.10557211882546326,-.07359578243436811,.038444068551446525,-.01907471602474492,.012245888918847134,-.0015393549215302338,-.02103651726593944,.05518243063690028,.0440936452282807,.028389644682731155,.00974360403842902,-.041472720807566095,-.05537768479039205,-.01699110904627927,-.008161761925085331,.007601624939662949,-.0066456574053765025,.04056509686862016,.08175131568741872,.050780047897429154,.1155676026022933,.05548306767964138,-.057897491813207046,-.1105898575072263,-.07182868196645323,.06197051129025689,-.030281369882132307,.01930483148357584,.05429693375685699],[-.2437388912119279,-.07231352508050291,-.04197198417546903,-.14300397257914568,.0615225969575571,-.030205439566140864,-.020864680638780005,-.04764788631907614,-.004129658790494567,.04027736046562435,.005909209292041959,-.06142621575884755,-.04922762165324958,-.07000433401936937,-.0642727614873787,-.026633980149117817,-.06574138461396309,-.0510503164030645,.004341077279830428,-.01611617835404172,-.03151537271021844,.037031195841364675,-.1228147574490851,-.030325889054245894,-.04712194689963531,.006945477959475678,-.12020262635091686,.033919560718345204,-.03650146838528817,-.02324945518003005,-.11560461380300818,.03838719766063929,-.0026532986572997824,.06160145270189432,.10391565419224812,.10819008673388165,.06868520306990575,.11775867403705874,.017679110509122742,-.05890182129315433,-.020290611595912264,.0001469059966410502,-.12261361036045612,-.010208071253787782,.25551979619962417,.13824223662087887,.1446794738346442,.13522961725652033,.19144244169061975,.3152710823580756,.11571778386301039,.11681561560364913,.032566473003269106,-.05027812834573525,-.13473831638652176,.00889663273590241,-.06668638820919999,-.10871364490994836,-.1865898629656108,-.34157171141342124,-.3463849380814918,-.011264008251140406,.029142444614928986,.12461122431395127,.10800578593966685,-.022809897357387282,-.04743159485324953,-.01606581136196815,-.012088172884114928,.13024386066616567,.16585917678227963,.08223171490137017,-.1807342728182353,-.23905771961269479,-.0034760942387594,-.0025528511815767485,-.008070327040005876,.035854903717420804,.06088980398458432,.05280523963556441,-.003315996418949821,.12385169566242266,.1882404204902328,.2921006004212733,.11943421064782488,-.07449416534755314,-.03746173468446186,-.02373764880104703,.07259857298818612,-.0004548609529310965,.000742982347122334,-.0015928557141097338,-.17246645124725063,-.15444027225745488,-.13465384352760257,.032776686516006764,.07085980921638423,-.0004770524214243281,-.032343629149890175,-.03998615774381613,-.0747523883878472,-.06985171147299116,-.08281924695145423,.03277817716203964,-.004293778232758214,-.015012757926196954,.01819273756147026,-56098151787711825e-21,.019859569434228445,.03307416609427032,.01657215652083551,.09196410641313665,.07337691110550851,.09847828591365677,.036105178755291706,.05086952098687199,.010385433683375911,.04024210563212227,-.07013475089051985,.002804107584466531,-.10929235377523264],[-.07611894920251742,-.019269106767557935,-.03175453504599139,-.04645565349145586,-.040704384737309626,-.050843290857606804,-.021973706618717698,-.025543401663111642,-.07416056040918946,-.013170588459795768,-.11347265323402626,-.05722789305562933,-.029590820633760687,-.03424362577024041,.006190533489689523,-.009464455719964258,-.04462566755515039,-.10436846800575,-.02868624932261281,-.04109001764788102,-.04615186981661845,.009832594893937292,-.06769577838509153,-.02801270141413941,-.07139685716526316,-.07535307217786064,-.10565554313610695,-.07552279458087882,-.02628396178676297,-.03103543937362352,.04598188141517205,-.029752407317735798,.011392587697051898,-.1039429255200454,-.03476444142769863,-.03784605600000727,.00012123885743986484,.09127870654753747,.14577205157542866,.1104215855219802,.18869952301023718,.10738370259626208,.13268927139759373,.010378228400827957,-.05273440542676597,.07627991587110855,.13003488750036463,.24685954687761555,.21183725748584104,.24704340387352622,.22867523573571288,.03692105718898259,-.028737222239043028,-.07038461578867175,.0055155357845693,.11568430941686651,.10660133014829948,.19511953592195094,.04542248983932193,-.0757682816724795,-.18361820859428674,-.3180407296251035,-.19549450758187809,-.0779951641446663,-.031296132745874644,-.07732791740627362,.1287056402740756,.04148651653515334,-.13922180905243858,-.20395686432544152,-.1572834919140717,-.07216672289336687,.08656396312924423,.10757801321268952,.0818090030611119,.06672406040192093,.047445258557963374,.01763919853891298,-.1058218276867447,-.05675437854673249,.04822435235570756,.14306872525152498,.12358807932424302,.07172675453500708,-.018593224747300865,.06924719407023926,.002973789338171648,-.0012683824671753524,.005861656242400579,-.03995517877699061,.06986818094196388,.014017003861568525,-.04660091093892585,-.04706833338566816,-.04668186328123152,-.024440679090069646,-.037553368502167325,-.05913830213731215,.03926952632374346,-.03380315978502683,-.016677251343357832,-.036287370622927695,-.03365315850639354,-.08105461811920786,.02244873177796554,-.05186460570451614,-.002256458892453801,.00655005685680992,.019613695988714784,.03567461915717384,-.08813793560494294,-.0498610068690889,-.04652333525032509,.015602894296518968,.07030267878057928,.025611762172576102,.06845737037990568,.035739036571478075,.014800222944481767,.028993857532204525,.0267735236457695],[-.05878986641924969,-.03992289616881476,-.010605417103711993,-.01849945772971233,-.004865080190320413,-.060301330529616955,.000318344693392425,-.12557104846760686,-.08000427404698846,-.13698273850528309,-.22799077610365462,-.025563254532452423,.031596931721125744,.034180802606017344,-.05037968319057705,-.03690057459729384,-.020122798822353932,-.11425996362570746,-.08244994909616676,-.12939384502163268,-.015453432533256775,.1652599896996217,.00547338995617791,-.021933035683807854,-.058344539474112764,.02296171324966527,-.03743706837426452,-.1277856597415159,-.02889063933688247,-.002891920932796374,.2694864672144822,.1755823507659644,.347335943805435,-.0990056047654185,-.03282593950620348,-.06517444533813571,-.02845735040351216,-.06260237229850985,.03202239758295789,.15695159271707296,.3415429967359971,.20280139720653914,.12458150522764966,-.09337572372774013,-.0722390206835535,.009094716391750565,-.04438901528392604,-.052574599103869434,.029479831254029615,.269248596916258,.22826750438753873,-.0022877017320989818,-.1114646531276304,-.13529114203352183,-.15036111092012305,-.08584275531476493,-.024536907507225265,.00868908074973005,.02194420964235891,.16653403493301283,.08152009064661242,-.14404674546435942,-.1499010254142704,-.11121323411132536,.0010729953777799395,.09809523451113474,-.03422119724863869,.004017596168495318,-.018012784825030465,.07321010680580091,-.007227210625433467,-.015972640001127802,-.06100368766466495,.05483342618811111,.06757633914572526,.07412701786597606,-.04242393057967831,-.03733736388249516,.022891392960963857,-.0034269311956898834,.04377607969407446,-.005555019886568348,-.06068485209626889,-.045928233440519814,-.008883095175340736,-.07757461777213527,-.07306857388940499,-.007584522491668699,-.05870405744262968,.03242972778850402,.11139987187807623,-.061069384823273565,-.022957481391546936,-.08145666831072357,.013486103859614872,-.10699268871745335,.026815142447461103,-.046958076560392775,-.009564367718198612,-.007812626535492735,.021325652288010453,.027800587316513206,.05672864586254596,-.07588999178312969,.001849623431887229,.02293374039398799,.013435613550251885,-.0308796268041236,-.00494685886235564,.004099219900474169,-.009140816111173159,.10871928144408688,.020712482757044768,-.030869482809578623,-.0019257988508574048,-.011927083397448635,-.08140574063448228,.0639221123679519,-.010456133387573327,.03707660212821462,.08883535592177383],[-.03664125917408396,-.02231878233881525,.024522274312524583,.03344049176094059,.08832531880509731,-.07844722319120005,-.047208492835296774,-.04725941667067688,-.025215781435357056,-.015414996185524978,-.09211510123803548,.04402413126160831,-.009115398771310443,.004897427090914452,.030833576332085333,-.02076523692106788,-.020723615749795563,-.012243854655765614,-.04628981737770624,.01859320434467141,.005145334732878801,.034378456965152134,-.060076223671287794,.05746226251504405,-.02960475988971381,-.03298476106224857,.01979381546009243,-.09180187834560868,-.03956459119173994,.14253192152349636,-.01806439485632861,.012289491688936907,.04911968723662781,.05713145555326994,-.005396850998742632,-.02777303740430507,-.004555343723759847,-.016293864219002016,-.1018126126459068,.2150785308613384,-.03923357354407525,-.01388758790666203,.04550692138583132,.12176852006259906,-.004958536521353366,.012483286148479648,.00022150651974826852,-.004748949499599517,-.05635960141439626,.17519663761795012,-.055694439201051764,-.08219683971653795,.06453774107784033,.04748422973872729,-.0028928449210207825,-.015338697146168576,.002703261150090952,.006749796318342771,-.04024813366872231,.07896814108081664,-.10963403655958821,-.17062543905350416,.22859560603386642,.07851962872419016,.008033015227410876,-.01142427708908322,-.015145649505435649,-.02353286828418851,.009965961234181087,-.02674309919977451,-.04241465458951302,-.049675570929287774,.29646343280477494,.025690805425905093,-.04851122793262243,-.10023827450589579,-.166470124185738,.026747181544677607,.03491899287778923,-.012381071612453791,.03132896084018424,-.03808798675298581,.13554403224476577,-.038600519161136035,-.15955152669761682,-.18650119722295797,-.05706215548943987,-.012769517962987352,.014753730819575053,-.034539139458789864,.006058740052616929,-.009810871341003483,.06911727762284098,-.07124414623757076,-.13192760007023469,-.03181589684860323,.027197733872446832,.044915537687674,.13641539907523023,.05154134410927202,-.023022917497770818,-.007502464706218043,.007530182665296141,-.0593475280116412,-.04423494728466312,-.011581128699856197,.0014665467844986665,.04713569829665076,.015656423092764042,.06601295637665004,.05820047335404656,-.015586985696736753,.0052092264230974294,.014817241711833552,.018388023474896837,-.08667587709882278,-.06704406352277273,-.0035215449899233878,.06416137393114985,.06531849854882125,.06725914898915135],[.0045060454140400386,.0456551203749645,-.006483070071701782,-.003262843608432653,-.010410124902832244,-.03702402040624643,-.03696326647414959,-.09109390602842458,-.11864573227941409,-.0642897976877913,-.19247581164633484,-.001736762598627155,-.0097469459578441,.0016447907097145286,-.040872882087491146,-.014221224057596007,-.03584268905350064,.016146856355897986,-.03984313919471384,-.09313042056065576,-.002374653898420077,-.13830477342208627,.02842845222473841,-.01369746807949367,-.11156935100514298,-.00898642064539835,-.08075286469116237,.012804209858369449,-.06240645031613498,-.01072588083421415,-.0334198537759676,-.013381072105187686,-.1260137612796078,-.001165141498430465,-.09630279416083432,-.03396083363654561,-.07271627207480294,.035903231272948394,-.0503667761298118,.039465836216112535,.08959524095799345,.08032372276092553,.1569423059368658,.13046741922551686,-.10541702655016309,-.05508012611731074,-.008104344189879431,.049795401559017696,.0850501178976381,.33220650657354384,.25591351064686196,.17170416430885482,.11686339946258112,.11405546450621301,.22946835883838218,-.012135608835537007,.08366532451625484,.13743718640771305,.20760286167445086,.024810385626267768,-.2548528703799036,-.3763512092744435,-.27148633180868637,-.10307518032579147,-.07375802107706905,.006322005152026515,-.007161424119159696,.02439463953541414,-.030595356710155303,-.22377146981167628,-.21688041618965234,-.06060439724464941,.18640642704652977,.1411775414679666,.0717157086049539,.013663567087826838,-.059637629532230764,-.07913330438108314,.05150110041211838,-.10958403078776109,.0403576535282537,.24551987265937023,.19850031772812765,.13276295660894386,-.0033277520526472926,.09571728127089923,.006075481161998112,.07021403207490051,-.06029573735270763,.023305858534584164,.03624168330198945,.09478519668470878,-.051030541969498217,-.04858206078396703,-.13620414142167206,-.042785196097045466,-.055491249841953014,.0010026144494500872,.011273492179008152,-.007041741738462531,-.02690303608673969,.012495419954788797,-.004965267489168652,.014207910106334196,-.05831635659918213,.020100992201083454,-.055565658068763756,-.05825785057728911,-.12154724005307756,.036276619232864585,-.11927424459722163,.1109090327897103,-.08720458924414443,-.002912921205281794,-.02502839026013983,.012106502056846706,.06861388637866325,.0713742951200057,.09812526384527692,.1403732243896444,-.002956042341701392],[-.08666670845132765,-.06556451914539954,-.023817463535297907,-.020440748189549322,-.07196961406511598,.0002866895100226141,-.04872757269467967,-.025160320872547617,-.07150219876728449,.009494008240030879,-.07238658909465089,-.02515378885894442,.02345985022475472,-.05950332009913685,-.04561531120543299,-.0835197702842417,-.08554321902563844,.013730208280768347,-.02114898129517523,-.007316258817724797,-.037712812535064255,-.0747738009766015,.03462239265337725,-.02547365067836567,.030186212545732116,-.019963247487852623,-.04969209404043104,-.11327298065324004,-.0745192272171176,-.12603792583344542,-.03706399784431323,-.024954205133118107,-.08373596490537769,.02475017354637457,.05933028270181469,.06220474996892193,.17133136972067453,.1612164822474685,.16387294452638612,.05830811732360376,.025830807003138445,-.04347998217618816,-.0416364296879362,-.12914102690849677,-.04010936033682415,.020146168363946934,-.0014664956647692795,.0913420164679114,.11971706786628006,.23880056181382195,.3099751928891531,.2462192594400915,.1858678558103501,.12052801882874073,-.0034211287368824117,-.030529992172357766,-.03229057765056662,-.07619354278341188,-.1960657681886227,-.20015100244650072,-.19677279724795954,-.18308786989283266,-.0005571348010621688,.1374350415823574,.12949126333024466,.20559599476304927,.02351134428016869,.016946777735827437,.07362396828619763,.06564932347225631,.06269941357959752,-.05017906172626907,-.0922520621441229,-.22544582106641978,-.144988552828773,.01919825020697947,.08296161046033787,-.019486237898005958,.011992512029289193,.04132998105832346,.07636271244077264,.031761554053674354,.15907477211435514,.1033646508693545,.03986612649674784,.021911878458555786,-.15923424669690406,-.013828911493878555,.07621409773017977,-.018094163035829308,-.02278410845419094,-.07576679032280903,-.00479472472165271,-.12287034163039613,.03115869695322046,-.051655022084203854,.0961873164812637,.009567098414075013,-.0316236624247789,-.05256799777879337,-.0031420233178607662,.02330873392779794,-.0023387082999069553,-.009448798609391264,-.04582399432870362,-.005481024602380563,-.08125791057512843,-.053087043188049285,-.0010084105650565306,-.10300285383556548,.05010294929397674,.039084033656922076,.0007826041668727857,.06658472055870629,.019512702741612473,.07854049370674819,.012933307469298647,.061861312662757253,-.03774862123595534,-.044013957061032435,-.058653414400645094],[-.23765593793991233,-.10644252010202958,-.14205331737791968,-.033409658821102896,-.05174652574003901,-.04902914905506061,-.010142689387288009,-.045800121111205794,.034452092003027894,-.037462523290761315,-.0526175683528874,.10954838938856398,-.13610118046500422,-.009547151192997195,-.1270613223195173,-.09222879836177242,.02126365188275801,-.08002764243120157,-.0100550311904971,-.021203318677089,.016576191285134906,-.028370386427869553,.3329100308690229,.2809010603820785,.12847553299199477,.03379276394257304,-.023904470117744384,-.16851016358623308,-.0060729181420751625,-.023245122034615213,-.056640550891660243,-.012010707479483837,-.09877409447514467,-.06450432755021224,.10265691959773923,.2555423371971479,.24276990386303868,.21966976582871933,.1109109095262635,-.10183584175603527,-.08745964479530179,-.0029720828981545685,-.00012924753214214532,-.02507997701344871,-.08643506110440782,-.1808754771319409,-.1135226786257817,.03288961120236014,.15787019926944854,.23051337575410985,.14879854133516468,.032437611765298205,-.05705919651139533,-.06930807765797053,-.08235606459943465,.04228548674166778,.04341292393318395,-.07226482693958322,-.166891794497269,-.16026349114722624,.0284748747846941,.1813119848910822,.041852912264988044,.004930652716399964,-.0008324974963782924,-.04783199637200942,.0010252465231246899,.017497628114831826,.0740319720382964,.05406275931212354,-.004878867885803946,-.1017614042122941,.018693005132704797,.007621049297355767,.008593458603581535,.029130058487575196,-.07672234087840843,-.04443504101988021,-.0419041810848098,-.04218165703359543,-.027448364698935662,.043452694941417874,-.014281471541844684,-.11364364120314924,.02162434276722493,.059887867734099376,.048249692701759446,-.025917915651940925,.02805763343822287,-.035965266748084215,.010590677166796214,-.0612326934312252,-.057899063583557495,-.08844340564057801,.001260097739806506,.015191608284153623,.014315608183696132,.039038170262391945,-.01107037296450485,.004467558279334817,.005152500191803518,-.07685640846438324,.024632015663543207,-.04693364754890696,-.004311800945201054,-.041968903018102854,-.01569526374931584,.013525540172630385,.04879677361470204,.00035467155966114033,.07190119836996509,.016274926781300325,.07092347738292792,-.00882484521729196,.043457848227967125,-.01463905425635062,-.013191689698509215,-.03752432074947305,.024708931479837257,.05708661405727926,.005857613973619061],[-.024541961538258487,.03267163162338621,.11772757167816214,-.0341742331687588,-.0717426324714492,-.16174536289395333,.014164562611569745,.019531072825155295,-.054978468415161165,-.0038956868428951796,-.09019611379000925,.06481225188516541,-.0472339389168712,-.019133679594543138,-.08094811594870567,-.1101849445159255,.10726549986933923,.11986161329611322,-.1389804237872641,.02946980586009676,-.0699411974612361,.10165481762063706,.0042591037232074525,-.04934754729797832,-.08366141657178541,-.08765584371719554,.020522117345934385,.08019181740581913,-.15728279592142505,-.028885847231444647,.07354432109552318,.2070634438107788,.06614427870545567,-.06963188166133302,-.0553872708879464,-.009915896052403297,-.03971779391566155,.14583324737347106,-.022727060768185453,.01771337471880642,.2806207518407471,.07576339464353285,-.15759577923577814,.12669291481079187,-.0065957965533044935,-.023038500644189407,-.016203548822575214,.011443563605701524,.031044733818071997,.09939000939660528,-.05047331939795989,-.03075072393685019,-.15956288120485115,.01286776308068685,-.1670547469453125,-.04796383196176479,-.07740295582740828,.025311426471354537,.040894848866229114,.09010852492868432,-.3117498185712026,.059978928418208476,.17392049002395632,.06821512672796996,.22655017146929168,-.11277740982522262,.015117918949874534,-.06289972480687755,-.06994549012447958,-.04490974228702188,.14433444462851913,.2923293722639599,.1955873798585851,-.05785071425898121,-.014726496195370711,.08884076116031449,.26941150721674784,-.05403377101100326,.0111591965306495,.024544359195103477,-.005010275987762103,.12289773365466525,-.042268194241055185,-.04507245610456721,-.023985660885704002,-.01877664162645465,-.06487210844107691,.17923288498496057,.017718431179447353,.012676757235305675,-.08414191856302267,.0927046391653705,-.14741704405082073,-.07740529352468248,-.041954355353188345,-.018944672617029513,.060652295217796734,-.04456309707948054,-.04624883612665029,.033353665903115184,-.0018617038323594237,-.06767774687847654,-.023333614214616976,.0136221936446786,-.012602435194539463,.05614191590875041,-.019617155818133693,-.09341602139109267,.025935720217831887,-.2107611868683418,.040245343412419005,-.07718887132622963,.01421259796769439,-.11506917731449372,-.08020994495632774,-.12403747829586499,-.034792135391462455,-.051307124154093234,-.04447890407041982,-.0424021340836127,-.07481694410337217],[.011580340758841009,.07646341230178315,.0007980340485847198,.048838428314634974,.12248324878819095,.013743650358534375,.01886113812138237,.011586008838870166,.04538974603279466,.03169337659425382,.07498964911220182,-.009866261755352353,-.10340488386695112,-.07157216043448571,.004378747473831513,-.07778860136521136,-.019559075604586286,.012039914910358105,.0018614793888236656,.017976562122428465,-.04708343149187328,-.007136790096560307,-.1755555075346009,-.0800290909454322,-.03180022376907658,-.05759734706966019,-.0225914309402037,-.024015557136778228,.020306356095828103,.007064686590984591,-.04974550929527993,.010918207861832434,-.007975957405642796,-.057844329934535914,.0404150927566851,.05051297898637875,-.02867983030295244,-.08887808505812922,-.11596341833461316,-.14726999841028157,-.12186458373388864,-.013719238451893214,.003233782779039059,-.10004453617576921,-.01778352056711716,-.043426790290178846,.002516237987708639,.031180239925685315,.0925649386768777,.021358915086836516,.17681853360539368,.06626948027510339,-.056798463424251405,.020214558939605977,-.08873014020716714,-.01904345584185504,.1214938649443671,.03967073622873205,.12658659654781676,.25102106759056364,.313616299442317,.22183627286461596,.1359746158531317,.10115711474812561,-.24302403404704537,.00972961252553064,.18356713494692423,-.026126940847291485,.03441669500112385,-.004751712035568109,-.19721799705664833,-.3026191738381685,-.3148196023147316,-.1434027289225949,.09324731668986243,.26017905533217356,-.15231835953736883,-.11886377910271781,-7950240878037973e-20,.1499516734816025,-.07737337854954085,-.01599863660324637,.2521561754016366,.22726143797909176,.05176193697442563,-.07037576738487816,.03930414272863277,.046344087243253736,-.018432448385731964,.22509099226938978,.05991765954553817,.046242964966830113,.11839665900852914,-.19506738398455795,-.14025844275720523,.057466302603268626,.11019012358572904,-.013541932475265537,.047028476991846445,.024667584373991497,-.0058190883316349695,-.08733652527364544,.08909615487577643,.06500967167977309,-.04333820555710416,-.019092524599200814,.14832868404659605,.07802106964087593,.07072421293402839,-.03135841096502585,-.07295871402641475,-.1311266808316646,-.08626374008281915,-.07284124228253856,.07704292723293696,.07756289974428618,.10315256178304716,-.05345771200065474,-.04582744733899361,-.02900391837847402,-.22848349838247778],[-.06905121549035584,-.13695919912679141,-.005656327528274977,.017174473739632906,.05475099046543196,-.059932166353439724,-.015330830129175563,-.006819228446751612,.0012622017178931346,-.019229773264106312,-.05976102432266391,.07869285696972217,.1089393724650921,-.07568139444402566,-.20952756667787314,-.005312913294763244,.10044708684084892,-.11640309355112993,.02435615957399239,-.0012586164900474876,.05069107388375764,670843932146694e-19,.20191076124513427,-.04518113305913338,.10144127341109486,.11705452040763065,-.22632970742930147,.0184688808155756,-.0013541832015389887,-.12017877991510166,.016842236983854095,.052652180804933044,.08314551113070343,.057329748095278965,-.04037471277618378,-.11575057028044615,.11707621621679364,.06967278501868657,-.13863634203166464,-.07960798308224916,-.022216919274236187,.033593966744265236,-.11362588566413499,.10269722191626784,-.24155215048670942,.018756954826990843,.2795615740189987,.039218371860729156,.07358848034574486,-.0448889991570369,.13769429349072093,.0032477373467352548,.022428521170885826,-.03846564053828194,.031154883554520594,-.16441653723937766,.23625286909405968,-.08142843240593813,-.011107263657897232,-.06266640020700553,-.17075494746168615,.27269490990139,.031157268147637196,-.055470185891144386,-.006952885879328791,-.05343628199397289,.4253706841445903,.018283114946247542,.13283560236845615,-.015069149158958085,.10328347994406929,.44999154699931465,-.0011928954570129824,-.16086510891352077,-.12774404557332408,-.04209917936869759,-.0018649195557395998,.24605932528385696,.07429826498160587,697844776116844e-19,-.05213562694105044,-.08674501781876036,-.22499073514863255,-.04534478939567861,.0331080659138004,.032025942933416617,-.05369969730872638,.03362435602342259,-.12434062876294572,-.13435098170091592,-.10102320426887956,-.10333974326967209,-.07274410409852337,.03002607925519314,-.027686487813203597,.0035344601119742178,-.0595921808234547,.0313533871549327,-.031956460680317295,-.18985564540590008,-.0666739375710196,-.030281628842088536,.015287505098408646,.010680344185151468,.04431667406026578,-.009200214429480782,.044711089149172344,.032936423173475296,-.028902000094102702,-.019831895072516134,-.1083289835481895,.017001459487365853,-.016581037303639058,-.04745248079680795,.01964408724082841,-.043525154566764424,.02279365672743948,-.031968227415916144,-.1191326261973889,-.012951530456903462,-.07794590627618334],[-.004218043520333323,-.177849827056837,.10345176940428125,.14691821176034053,.032856437685713946,.06990618872851263,-.006394511069391708,.012858674522952751,-.031362305638645026,.04878846413475773,-.21008276813725216,-.14262226241092743,.2735068267070019,.13675983935772454,-.29666625074261765,.1307319827053882,.05287935422186301,.2081906011712086,.05469233552333722,-.0707121892774517,-.007230298162275778,-.037876207980575435,.01620529896428768,.032611323558465855,-.21236590603680106,.19488138090854343,-.05018368888799876,-.10106171926311576,-.19451804410928483,-.09757027333480761,.14803373393480754,-.11936458691698297,.09035709161416731,.005992345500458018,.025455653887793486,-.019228242751246096,.08419178533389118,-.1088352303605908,-.1970966632622524,-.08465377782965226,-.08688814478949355,.36808967859442904,.10964208390108912,-.06453781682173701,.015795651214486534,.0372255583573948,.043017883593270814,.11952788902899536,.10395017914010175,.04553068266111155,.05441345422005224,.24912633653507255,.002223137297252974,-.10580881478072197,.09008761390657143,.16662136065460986,-.15730886509144254,-.09124852539366271,-.053757621594197856,.022178794252692133,.27116243919778504,.3386687989043923,.14040194814605061,-.051936697245067276,.013903415563632955,-.06567603955564724,-.128255822012439,.19222801891437483,.06617668613631897,.07380389825587082,.14569502232430348,.07116003048056466,-.009545659600963374,-.10489910337220464,-.0814579207091837,-.07898537959076238,-.11641729288088618,.02271274135586502,-.04078357320429621,-.005662258943002986,.003683593255068004,-.06678030919384308,-.12713315993774849,-.1586600519695244,-.06332858622223766,-.05575975878394748,-.03745808657448742,-.02246068529533081,-.022028900024817097,-.011882201801517509,-.046972799168275,-.1470120455163894,-.037217728702544514,-.08283121886988569,-.0016295615745458014,-.021758715372862947,.059906725662667415,-.013176728966978149,.06451884578598786,-.04090749352173143,-.02724481426696284,-.014614954526350594,.11052684024818323,.027444907166189095,.022162414399074806,.0024547001841418916,-.01609068146442251,-.058966580405083346,.021584412865348603,.0327652511050653,-.1716263843502637,.03852569660342458,-.10090104298395008,-.08275548039706716,-.12651405684060268,-.031346851498544215,-.051126139081003386,-.08804630534441346,-.003187155224522592,-.02711013335703315,-.11431300136421083],[-.06692422713534293,.041699164002372696,-.10385522794561593,.055675362062145774,-.07426047046232623,-.09118996048071717,-.045789683018577006,-.05340854661614097,.00164106322835709,-.010001962022561817,.021791861105379333,-.0519512913238683,-.07020062246220365,.09727987658203881,-.15048632688284508,.12149505097298019,.015842805768137305,.01783019614395083,.028679225099310354,-.1309301585947812,-.003272424996237158,-.0763925607801052,.023827921599709007,-.10048639075186741,.05764773480097791,.14769797654526404,-.058573134153914214,.03656647088725989,-.03811300125261728,-.035949645768287825,.1321495021982136,-.11750728810678948,-.027309528175229383,-.15554238984918572,.18384157344434507,.10897982741577553,-.055054919090396615,.23295461106984391,.16692460259498326,.3435082179560621,-.06181893528790025,-.024811829586858465,.07996342931317071,-.18727278866453625,.07713408949306179,.20554995099374251,-.02510860245457273,-.016911421678591866,.027522221377421628,-.18467242934043285,-.12870450689623072,.2705100330044119,-.23570033354568337,.1600690210988466,.06077273125729859,-.040057046042739526,.0061976917126070254,-.21240599027215282,.22776373257918395,-.24459850621169732,-.11110091474536704,-.32900610024199545,-.0659572745932869,.38918437667082284,-.03706198899848393,-.013214304459370309,.11361559841851943,-.1311609141686415,.26148934106645616,.13109860511874102,-.02559270333763761,-.10769559173489475,-.029541835495651814,.21030527945911404,.20083517469185433,-.15455102744651888,.09848594172144295,.0537591442107843,.082713231452363,-.24255028029402606,.0257336570472612,.17680889892790308,.23330773415315006,.2775277637359232,.17725610536084593,-.16258826629493126,-.17144766528315306,.08364442451113455,.016994501600820736,-.07147739754052639,.07491202436334046,-.07565486524045649,.021346987911851578,.122851568542261,.03174117674501058,-.07971191921163676,-.010975662352579296,.020719019955012588,-.14947464235426425,-.05912634010598853,.025068359943792605,-.07695432573770543,.01069978220983156,-.03572638016686003,.010452571251196202,-.02080143368776719,-.10029057450694524,-.05347120776294563,-.048791402971955875,-.04340697149663218,-.10411181696202407,-.009611579536761644,-.04012233817738498,-.046812122680620266,-.06405811241708922,-.14541168506254615,-.07567973026400644,-.03246673865673291,.007979069550343144,-.07581427323024105,.02030348516686146],[-709566052794347e-20,-.09505143818296452,-.08788157558086013,.004706240869816247,-.09802726327071064,-.0027616522983207395,-.0972271272799842,-.0630007371062122,.1183446266588927,.054456621706851616,-.009941350269921295,-.0701391953356735,.058249435624697594,.03289065810180454,-.07790879665087327,.12060553802938856,.041916937919234294,-.12018601094319402,.024991064566815515,-.15610551053004948,.02744736184155717,.006169180646906348,.2227792373999314,.07777153698627623,.15813994477460777,-.017009298898611493,-.14311974342433334,.17959497330783272,.05152575484703006,-.11409305598330613,.008734804721459079,-.11631550153784051,.014926258001363192,.035969081785568666,-.05362584353691356,-.023997302411323432,.19964826933410396,.03609677601766327,-.0492108086280641,.12245938533273446,.06061126929931415,-.09579693275136134,-.06951938657502774,-.050249772835886296,-.005837542816139126,-.012563499903927425,-.14780320613165895,.031772227910289275,.1340288392048273,-.15156587379880926,.12631446141014752,-.00528899530076795,-.001966825944666885,.05403033642006514,-.06363140317086635,-.3491984282017457,.08631600223051457,.1498086851219177,-.01958777908962751,.12206293626181336,-.19933801771288356,-.04802912870685339,.05260106817645469,.038693350122585096,-.09300705047400432,-.02556334426459282,.177347641964092,.22163601611492076,.09468068745167789,.03798535351360027,.00888763906212247,.3324882968804432,.16504809583361016,-.007867568306585793,-.004089442342142393,-.07388229257667839,-.023509082885282934,.38130178103352774,-.019291678040942513,-.08684344856036832,-.040173020823503824,-.04644318688990192,-.10185859440346755,.16438891805551265,.0026682289367386675,.07674917445874799,-.06794769221690736,-.0010386668473387935,-.1071413883705663,-.03057659181029552,.032786203858462565,-.005551088212040679,.020069023492512786,-.017109613552384946,-.1436550284492504,-.01671177936251748,-.06988612362481263,.011359667056578288,.0048980919655428265,-.07113085832567206,-.0655454347719733,-.07979468812911322,-.06972764987510671,.057019363580092276,-.021992787171872023,.015178002477788638,-.00020471363886212166,-.02551443073604223,-.026882894230500245,-.04529785380524637,-.1583259300662112,-.03142874931209887,-.006288840890221775,-.005780758329521199,-.08771917581213398,-.014850613830471766,-.09857015749334436,-.1178588681684648,-.058161768326308934,.02549633093721411,-.027500922923648384],[.03338587212363374,.029449410773330013,.05037316576022653,.03375955332056181,.04397821217557251,.08318007698295568,.07168667676840466,.026805901274190462,-.04021294852733876,.07445576589969213,-.015556797943286706,-.005234974918222002,-.0192416975214125,.05581160077211536,-.0615556921400091,.022157119108767706,-.03749977104188705,-.09184201339517832,.0021346112094529357,-.07752844587058055,-.07033956942792571,-.02184378008695914,-.028323350880137224,.00011164923792164605,-.06304367896930116,.0312281473289511,-.02781451796188883,-.023586402460836806,.014274870264679794,-.009911294862428394,-.03942160773539444,-.03612469475518851,-.14334911700158648,-.030906231546069748,.02645680536402054,-.055731905472351545,-.09979102306515067,-.11300163966955051,-.09670230764839448,-.14134937562707614,-.0957620993423668,.012996731697811542,.061452509807262426,-.10845706522050219,-.0959545356508271,-.026481658468726504,-.09342212328404359,.025974710463679895,.048411867352889076,.13854747029920722,.008987793963835353,.1412865429641629,.018873766998065353,.006861932826833013,.06602899875587977,-.0695769909258018,-.13630992697783664,.05326103549591463,.17932579331025728,.20451416645740492,.2541788583442864,.4279401171911464,.08044763293045501,.06080781290645063,.05097923191228729,.06872455106216999,-.07958512546717691,.16947242780377064,.07175039956474313,-.17602834598556363,-.20609506703378996,-.2758518326523662,-.45996207117951626,.04197708539224045,.14013188266658397,-.10129069427591146,.04203209765353061,.0010700558006018247,.033269813089743,.04526128415979727,.18492968093047082,.11250515788380208,.07914601199788789,.27604374526273284,-.2933737982490173,-.03240496208140364,.24482947691686244,-.11730122219590641,-.0003930817307346082,-.08285521046720493,.14722185737303153,-.050887412106644436,-.11313790447392723,-.04597183780354573,-.129764526821759,.36520902694991747,-.09182199979949662,.08586439033749481,.07651271554227465,.1029210140799042,.0027325839402362467,.07058671033367886,.10533730048009346,.11195874976952475,-.07214784390727155,.04958613688607464,-.03105073259803546,.14407295372271284,-.08558760630063905,.08722880414707304,-.1719062867308017,-.11561123789185015,-.09287516888956364,.02930881212576048,.03997500953017151,.12185883649720056,.10737184929932188,-.039136971459624983,-.08075374206140308,-.05337735427482881,-.19749855557352708],[-.07885663149000183,.0286097540412072,.028065667582647003,-.02183404125227629,-.07173164422917319,.04194350302169928,.0034420782526643334,.09985241677210488,-.07205432251463359,-.14404103188347261,-.09945327244261506,.030831458745725907,.029895496253457346,.0015406398850859385,.05063743421782619,-.06153637148212447,.02259540959954133,.05829928062976937,-.21504560821843677,-.10742200693101064,.13531193618860787,.1292569094640518,-.0232289536460595,.081512184345085,.0005579866070073835,-.09802380260257147,-.06693386993184158,.030281268644703027,-.19700701283846223,-.07452246871817525,.29428494587030196,-.01935717600415609,.0978856486314639,.08681975155019979,-.04323149220650484,-.018463852192367017,.06274538327106084,.009297134801895708,-.24863827359607188,.010777357730302948,.2316312466976955,-.08532957550855783,-.1144533554642945,.08380128540268185,.07583092703097156,-.01403260334241798,.049484524164173316,-.021590806395398253,.01544196314913996,.08616243293609659,-.04410273331478405,.12334022048862069,.0731644245704271,.1088690387955715,-.15316811061648344,-.07873748966775482,-.01728488820739873,-.039703575150386236,-.05690551916158362,.18660214037769024,-.023526673216460528,.009711910543003716,-.11068696302980902,-.003332212012764034,.2217120146816864,-.14381135593764638,-.04415943147544279,.05689928131533024,-.0625355584793738,-.09671566572438636,-.042463185527764596,.33605398681131693,.1277199996921095,.02930603789213919,.05296083974268942,.018388136003953504,.5836401595356645,.07836978200602936,-.1477401885678089,.07931057524689336,-.13568107571099638,.03372612864581227,-.19371960002191677,-.04892333637773401,-.07904827509549606,-.09345765767848567,.008468799104924943,.02446655940112101,.02407280777600001,.045654023909503204,-.049520678628329894,.11131277121530644,-.08267195966951263,-.01281734719311349,-.05843634673292153,-.09002706589088959,-.06129154716836275,-.12266871096386792,-.100840795703969,-.03868596960954555,-.034857542952191456,-.0006953168471420038,-.05711976301891046,.06589460663735189,.07684392713262432,-.009922191175709,.03838253342573381,-.0018487126462470374,-.03501906580527725,-.16441171510027652,-.08279114832431804,-.0660471349418349,-.08193261888661948,-.010547381209761031,-.05103836972697648,-.025578508207813648,.00959733436024926,.004953323058302567,-.06106280301756026,.033453744496612564,-.12571424039710155],[-.07943913690230883,-.09707485383450068,.06901363906242049,-.07450576106533434,.07501158747888118,.15666344682780237,-.08119350539206813,.09211868301161705,.1689488283829152,-.06430071189323708,-.10649892578590311,-.20661689203008798,.1403179918871823,-.13859623598009607,.15068161397003726,.0818655854637374,-.014124777365337841,.15933582287539705,-.05612295620026611,-.14961952361740766,.26418260048580505,.00014354663354841646,-.007354717737453671,.0793066834987079,.02092894146022027,-.10994253368145199,-.1737068099917021,-.02379067594900478,-.08691844514295496,-.004334967378948219,-.08595495488157225,-.029420848660444726,-.009050005850250002,.04153099950743196,-.06942356753438923,.24688351427911395,.20546023916088876,-.17598878843872648,-.24389316703559294,-.1901543977003906,.22071277516100238,.07721059904573113,.014424585107587845,.0067033339564058075,.1455775666622114,-.10028307012545846,-.04626376631068428,.17807074556144536,.2320736518816967,.06891900955018974,.13997442592318893,.08843295944139111,-.06619014796452205,.03995493032409315,.04442911147469998,-.08101096747844388,.06841095526480746,-.04805923478806473,-.005252312475646934,.19319439038918368,.22920446006103862,.08610106347614639,.031256459311461635,-.01776966858509721,-.08151486180422801,.05257244191659842,.006514680965800178,-.17665071040880326,-.019856913059721516,.08110204963368318,.043277973324065216,.1177242078686942,.11137298745761917,-.0007326154220056724,.09197829061899734,.0823894233129203,.03402252591269925,-.05309760977925895,.099288071298098,-.10854924126379789,-.17742490622599222,-.1788673671646884,-.14114600439166541,-.0640047728968173,-.0530848482065642,-.001659672063313692,-.07067687176460664,-.09880353864027858,-.055944765770140174,-.005275164418993845,.03200778095516948,.057629819382953605,-.019709560268588652,-.057823914219534894,-.06825696475667284,.027890820691469885,-.07665623931170103,-.02363197722992646,.01970554278030521,.06278002322832307,.00430808120124361,-.006853929899442522,-.06958545243479107,.05669894602505417,.04217344775125749,-.02598409561655364,-.03309760410899597,.009592182310081215,.041800833565904215,-.050819206523713883,-.10689758970874308,-.01584792905503407,-.060764599912676534,-.006217521991337155,-.08534731020245273,-.09747486944116751,-.059282139115269104,-.035577269192877056,-.07501416104561663,-.06053607928652331,-.11817678424233188],[-.02490608975726987,-.0020839929168818827,.03600621465641745,.0403881994066299,.004636782809577224,-.050097408580542964,-.019438803749024975,-.09939845419489737,-.039682250621000295,-.0028157838678664303,.003598249335640377,-.05409942588674063,.09875156736614263,-.13208302404353375,-.18035374659388975,-.004373211123337235,.052329318134350926,-.04335824692063206,.17086900465322874,-.08778890580987994,-.04498040557659065,-.03163490494923718,.07037693042008056,-.22835180537374491,-.05322868536812466,.20061806426747758,-.010253623864425198,.01591621537957571,.11152189577260957,-.12242970393701272,.20444421875737073,-.11370776685859571,-.07991394664261305,-.15288251066153316,.013009551196509275,.24933943719410992,-.15783799994383102,.14723844916068518,.12653772742745573,.08784453193760376,.15842166298167773,.048090301745894584,.3080112755740838,-.11761230465763839,-.09838866239110361,.21453595775800124,-.1423387911053251,-.005787503443497183,.14715035050010203,.03704725946747452,-.05084128184560635,.14408577985508386,-.2038513895714491,.12419113537768206,.16468328842666694,.012860540177512661,-.06025999185508847,.07514960246286088,.3270713887817316,-.40030305735760485,-.2693599411499121,-.27607955331013073,-.11367870913437449,.18759384386653338,-.1163031684096954,.011359887068835964,.09104201353611753,-.023930250513817877,.02714561670275309,.2686781075276697,-.04094404306984706,-.05118534644263647,-.0625551565727482,.1472213528555063,.17279204270125498,-.045587324746883026,.040778081769105995,.07730745420184884,-.04591786188539398,-.14679289792741518,.05885719281090503,.30472542738820174,.2683300390974695,.20924065894919816,.2122502057005108,-.22492319213360987,-.1053571313533698,.10129898309130989,-.05869965855648472,-.056962291919962646,-.05378456732345653,-.06419935629090436,-.023276261041638765,.1463492641852929,.1729800539768475,-.17279567370535234,-.028270599211786665,.05436900311469026,-.10106883014481371,-.14024347735480464,.018313526646667293,-.03798367362983118,-.06530166405225782,-.012949891765581065,-.0946041074239276,-.11534207274853202,.007667464400692849,.06632153982923492,-.050400969350873806,.007421954822023637,.02886957081162436,-.015979869180987795,.004754709812372182,-.02324202738303754,-.10363187962188126,-.08083238636814595,-.0383137546384923,-.08683960034898046,-.019540426477005362,.031333439883288614,-.15193982135608425],[.26630462964519636,.030128294989303788,-.11791438037260804,-.11737308015815517,-.06286110001712555,-.09676604610759919,-.08219931617239096,-.08602044544779823,-.0752465020528408,-.029806813487391677,.24281116497344327,.06704216540136453,-.007344555268005606,.019073705951446834,.02402774328620054,-.02203686579841367,-.041360734184431945,-.021551677954214206,-.020934734000922058,.0016783573161842508,.044653551257398255,.047330499149608574,.07032091853943666,.0049339384317501345,.06828435825594341,.0027795836778768818,-.0466896472535712,-.05577779733601799,-.053408170439317705,-.00010746082973150939,.05364712425175393,.014169718568750114,.02905438269701309,.023031619273586216,.0006672708130855,-.0005146298427244692,.005649120437861247,-.0020259322895197036,-.016498390040156383,-.02244294078666332,-.03502916496002524,.06384615482620433,.0446871850960326,.05866824674961167,-.04515714757144492,.06041887311954984,.04036881154133638,.09923249950644725,.048066185349036866,-.0463249530349005,-.000808878736984619,.11409453701686445,-.00033137478785196135,.03735595742910118,-.00796740767397426,-.049741034524289095,.13611114777264577,.023766455706096472,.05349768798834608,.015733350480013578,-.0638249332597969,.03333056808886371,.027844489959796326,.08169189984293256,.09714592419415595,-.06482817498523231,.01437395739678209,-.04733110712152277,.04419699990791139,.10629752929835162,.07354268917674926,-.04442637013096748,.049683512301096674,.06836545628600792,.08152300976829795,-.015087145755708103,-.001963811552551528,.039051783324939186,-.017850512607641256,.02370779603383788,.06201068601506067,.07378376682337442,-.09184480384092411,.010696782251581938,.08603651471846394,.09459620799914793,-.07405492786688277,.02791585737749322,-.03764201473979117,-.040193374604089255,.0024468858328299675,.1274974581652491,.009340435148458864,-.04037527607286821,-.09011460912780393,.10326418667261725,.02917729347842522,-.007704623160573315,-.030226724173417804,-.02693842944612336,.03299558344045618,.03765528081620828,.06038405550633466,-.011607343174437262,-.08845866375604955,-.008962113021522874,.04133521207951915,.025264577237378585,.032067053817915525,.02383046613771511,-.07934593163277476,-.11617934147005861,.035620949281212844,.10013927849222683,-.04880947594334495,-.11446551821055255,-.09581301797367174,.016305663265873432,.11707531676597775,-.06319976004011861,-.16222515899222084],[.056794304038679966,.10167830608861393,-.016503737435740885,.004676434791165973,-.015979430307930184,-.047920295093506274,-.055022283646318906,-.10379295727074533,-.04971786226231269,.10568238875466442,-.031174132439086774,.08370460395000427,-.09136813320075263,.05726930258403117,.018684874349729957,-.032113253507965796,-.001736967749467095,-.0720797561165174,-.09935581393877263,-.024667483850197125,.08617572294614978,.04004015564413592,-.15099062261616583,-.0006787230318979556,-.015247157304283773,-.05252356534475065,.04255130736990405,-.14444354746621113,-.006548704692133499,-.07184261018986163,-.012850025711011279,.014122793694046731,-.0033943022739370415,-.039640354001140646,-.0031247601407242975,-.04585791859357094,.0019020572673282693,-.12415842588927675,.07389632414409256,-.04501551975006842,-.042377317003355355,-.01887609579498299,.06619955327224475,-.03822941020165674,-.081067787682231,-.03945825059342991,-.02157368864848786,-.08753783022136527,.03336603607606486,.1364118549990795,-.0632052012606045,-.0012659096018193816,.0057982623571657815,-.01152673538233475,-.007925731132165229,-.1412609714094465,-.03496489640042434,-.05417735615198177,.09866273585454319,.3174433337913785,.03945230475818361,-.12302035212752997,.09030770219610496,-.018426534125878427,.00760699176695355,-.0637860179259612,-.13634861844502966,.021706398551087892,.08848919736411925,.24006998601480642,-.03857437629126144,-.20903973825035016,-.028547940107015453,.0885427264994885,-.021390725008154893,.044285016775694894,-.026993312698921287,-.06446598380331271,.12944644855572515,.1908924405658075,-.030480082660302492,-.11056842407420524,-.03093608697570601,.11334521747158818,-.03512914824806446,-.0860177650137933,-.0072168706451755035,-.10752750376129108,.04312283194476934,.16933458944871088,.04045539432256913,-.23664539634671644,.11812030967359738,.07593996965085485,-.10351739032237361,-.03030058989819629,.08687845689896989,.020132080229428105,-.023337176463668542,.1929319867081439,.022201478223351577,-.09910113527342805,.15510108808703874,.06372792445269923,-.2536830626984794,-.11398510745687342,-.06071410028837733,.014445183346757966,-.07806077611983483,.019868445241697584,.008179845346074192,-.058441780232701836,-.12524948970895577,-.042729684478892374,-.10578506496128201,.0827616996595974,.2261084299196532,.1947210740917512,.1377097045002212,.25212791464266937,.07349814208536735],[-.0913812414018817,-.05807962032884409,-.07653050462847574,-.0199353534219689,-.11698549667840648,-.04962140173828169,-.0771326216570162,.15067146207913978,-.050781047593468576,-.02068608682311579,-.07749948573069973,-.09675856739156244,.007757156089556787,-.009597940621244975,-.09956585908433706,.005160048200887023,-.052061725176615475,.21007930845912845,.06515115768429228,-.07131801809693715,.018812215208894742,-.0008644213540234952,-.046564358647237104,.013463679946637018,-.04976028918104694,-.07512005231588614,-.01620573060652171,.20370769256587995,.21631569735613507,-.216398981017269,-.010174498767059056,-.08074439548196942,.0006576254028179337,-.10941455592056311,.005191951424415878,-.06152725313918852,-.01884736889232981,.21787195260154674,.22243219444192475,-.1557520054725607,-.10816017929215728,.005188190760194403,.03178551363990694,-.11820319244612582,-.09195548183466382,-.06588600256520286,.04574145836470744,.1622906548481503,.18370330017469805,-.08132400811582229,-.09689944492584578,.11220947396556524,-.12652409273694068,-.05695408368513595,.003719836141433931,-.04059853236821579,.03930021853282334,.11791439151540004,.0326000042015889,-.021776978247445074,-.04052905478698086,.01854198366161787,-.08573279147037881,-.004251519029603433,.03108816563584514,.1094691647659708,-.030520300750865037,.024588867262970132,.031028281179074996,-.026058776582265818,-.03473986428220393,.04201593006676825,-.15813943081690485,.0988112751465362,.17664760200291613,.12060292796297431,.28365889513274267,-.00988193914791291,.020720424432064774,.04137304199129589,-.021038365304358167,-.09520266405881016,.14910980302517288,-.025721833368892062,-.12819902853565343,-.023631492175036073,-.031597247870627954,.10824280634239519,-.09117342522287061,.0635674456333351,.02172819298538886,-.10568636568278675,-.03165356681046462,-.008747241857215787,.14635866247530055,.137170585551738,.04090240321757112,-.017771123105949502,.038560203534045476,.03924527363234595,.05681529146256253,-.11183679663036641,.0648176591144581,-.0814319418691829,-.03407437639196588,-.11203464618304287,.15240885057308393,.1353372484972077,.06863368720362897,-.03663300646086139,-.0466929203646385,-.033281368663026875,.0071094850495891995,-.024376962431089298,-.08646414280048685,-.04846188250080284,-.08587237831676,-.17119204490022732,-.1254806517577571,-.10025652608610795,-.06772415071796854],[-.11048795383128253,.17729666058333263,.16552135430896192,.034404289623548884,-.0895887248460928,-.009895690839867577,-.092669573892881,-.06203414994882403,-.1302799060080277,-.02774126581005951,-.033782876400120204,.06848564219607128,.07598957414475493,-.03657137794305152,-.027073113771866435,.05135860594109221,-.12486678803139802,-.11937553330158295,.0002767000813357068,.03924294011480317,-.06534165858855753,-.03259120989293393,.009487399520951526,.07722880227650034,-.11978965646742909,.06517562209880016,-.004533068211414557,-.0932109574682729,.20829565218067517,.03440769551031344,.20900868773517667,.18059530210220634,.08054644989894323,.011691715187434483,-.1036261996342592,.08944033936134933,-.18290277626865079,-.17449211585023297,.20463646978781697,.16205227161355945,.1248389858520476,-.03392094388558964,.005053869622726779,.011335298516995454,-.001853830495579134,-.13334091118720467,.1324427244468483,.131632260424145,-.09594957419751209,-.1490575136117396,-.1371680896219323,.07800686073521007,.22398467991789892,.06007709135914392,.08045908915697139,-.044226547302833194,-.02641690246856537,-.02104723651581712,-.022107985555041423,.27081392806687543,.20243579723370436,.052508427611470655,-.08168694542402519,-.02800043752181265,-.06900441348845979,-.019947203774680143,-.06510852357159547,.08730486889571296,-.07707712069010778,-.18137313212262005,-.11403701580048946,.1344871234635103,.23244603542157677,.05512462348619507,-.06646374787611556,-.0914518320725403,.01884922519180683,-.02465434024807353,-.024966200161235935,-.0914245752012077,.07252783149930173,-.06521605983078903,-.11921754880632893,-.1733789390994794,-.05721923895214434,.006742253462665288,.011248995976294755,.06804781118362863,.049614879488339,-.09727584689881193,.008235856768488136,-.015023386519351074,-.05393300053662252,.022181719818654445,-.07860305628683724,-.09699016052027243,.05334168617956066,.03859265838135287,.07327389299047157,-.0027339150021431086,.008723634927276416,-.056654841529851035,.008992940655092693,-.04799211106946037,-.07247038296559916,.013556901031652455,-.0027078537211853854,-.02080896174546669,-.023685877670394262,-.08288532087532409,-.024581734079028472,.011675698399989887,.010268763903630733,.0002772702590928197,-.10403456880151318,-.03132863032055746,-.04876264136951453,.013870483338988132,.009776937951070902,-.0016096606912818917,-.11084797308275902],[-.30333471569576326,-.09815445036057074,.0015410657868983949,.04592945878055083,-.06535599812167714,-.13987052383343457,-.08308856138252664,.08266906631470228,.06190477969807374,-.11069374343220081,-.28290200253357906,.22673155788863875,.1859441593552484,.07185440250312018,-.030528580748157334,.028577245402910886,.03106098503085323,-.04386161528425456,-.04410517667745482,.022159810237959286,.21654680444315066,.302783163041325,.01221380529451033,.08612658552109748,.18984475627300115,.17496536348485808,-.0848622819078765,-.0814565428085887,.01832638457011089,.13673417025774948,.27284413141414504,.09461233565929886,-.07613963041950092,.06293340618732787,-.09744395825120561,-.0684039807496924,.009665552475408398,.09504055208625063,.15936905785590366,.07299508406405472,.03125276372546791,-.16546942109824656,-.16677751455927864,.12669754079805604,.22204531073147377,.1873578562466022,-.03762165890090354,-.15711170707975403,-.17298791364700297,-.08255527320001282,-.14455053081729527,-.22415305552359763,.04254240281544681,.1038139770409886,.20625177708368309,-.1588088902658842,-.07565886555863988,-.021485883747037457,.10891607713839715,.0910928974734542,-.010416568160451598,.06954385232578379,.16542830711077747,.065217336152304,-.0148176716125085,-.2052152901185288,-.14264824540169307,.019756071252460615,.0058040644663103075,.03964333476919486,.15659048313489107,.22864706757459258,.1425465081375903,.05707318638844937,-.05315219130738143,-.03447729148590034,-.07759839544257986,-.0667257839779382,-.06423032552558904,-.08999109750185139,.02828983038805128,-.06612915519164726,-.11896201994465391,-.08255817032611182,.012810697942117068,-.024384133696020396,.015087500169279289,-.13601461458960581,-.07523698032881145,.03901412101119553,.02815424125400038,-.05501391625928448,-.008254101582952672,.002655866524947384,-.02112502002565013,-.023746573840204926,-.04268316477702107,-.059495722156300584,-.01904269481794754,-.12936213546879713,-.026222299825073875,-.025812691605142032,-.041703863747776904,-.0661914684158392,-.09750606364252096,-.05839607258356189,-.08996126773909852,-.0037007256822108175,.0011179813727885506,-.10090477889016067,.06414029876710457,.010238148607735212,.06440364812729471,.07668454711557673,.039151433631154905,-.025802896171529727,-.00019835521728821248,.07184148624238545,.1312516201443394,.0460566582461709,.0534991577638457],[-.1296572420770151,-.037580246387615174,-.0676100817448661,-.10396968869944452,-.05014668114304158,-.11661839201437256,-.0134094248817632,-.003812121401652345,.1455188948721716,.20960814138138711,-.11572556521584892,.03819977177625247,.053736720825050086,-.03378037681353664,-.013778088995604357,-.12296410846003263,-.190779199296427,.06362318419367503,.07271994862581554,-.18712323706253348,.13564826018751774,.10041735856871029,.0663871462462544,.07587510062160498,.10518317164208223,.14542272105614312,.12359189084318592,-.03375064243041405,-.1168093845370131,.04736317769791438,-.0781151584923715,-.006807254606538901,.022330740883073977,.04334500060367369,.00617725620989517,.10018581879835563,.12543189326433035,.29106180455164443,.15950577579932912,-.04101661472873144,-.24664638490921542,.10243965713284461,-.02224934097641969,-.03998099582023288,-.054513454865913025,.10149283919617619,.12490712516373728,.024443018843315022,-.1715648928173428,.009820925644263762,-.0994644826770697,.10892786493077161,.10795471728528551,-.03038255212780229,-.05209374289031926,.08108228681746447,-.09627405093063877,-.03626743641754988,.07518534571363009,.09680822000074882,.02028571579311067,.33290510761917347,.01733913364880374,-.16522028580434994,-.00408970623814911,-.051775053344798386,.0656704707195409,-.03277288539381715,-.08505880848807384,-.11929889732683205,.09245593621503218,.256554614565362,-.13119179078724852,-.09986832974978488,-.03323866904038695,-.014474294906370588,.022015269325752353,-.00687063436342121,.030438728104146773,.03821529450571252,-9867120331248647e-21,-.13106943853344732,-.11029667516487467,-.05651270541297225,-.03509147854934727,-.021024591609859103,-.037796865064866875,.0024114282376300894,.06687276048057275,.06279809114300125,.01586027365169357,-.06641798455889694,-.044395452917304,-.05673927805744089,-.07449061450417463,-.0017445397987308903,-.001856208967092543,-.031296834327762674,-.08037901085504706,-.03293270220964989,-.03946602721463426,.026868758362947193,.05272046911146789,.017821499479210093,-.0812792524309323,-.009824346280975775,-.035827346651628185,-.018665339965729243,-.030414846245718247,-.02539775011840935,-.12699585584653394,-.05127004606259838,-.05949279770541247,-.012977814302096748,-.04020116106812974,-.006300325503666278,-.05957231407273672,-.06087339785707998,.025500546592364254,.056765099592826794,.012716285965905683],[-.05334278564689118,.00524567552363564,-.04737475337063818,.09478107425150373,-.04097674041356622,-.09655255445740196,-.0748818025977348,-.04665790623657751,-.09133063248974037,-.040717971184299956,-.0930767550584704,.0037318258071586674,.001297992392240016,-.07297130643505188,.05769901611225838,.21677924213445596,.06269207737522899,-.04409019581272937,-.023130229334030562,-.021606172607987695,-.016753725645425696,-.08911491869580349,-.018011910259290234,-.048665499037987205,-.03888346831521437,-.1600836076867248,.12324454290748962,.16213596071632191,.08189099901085871,-.026691379256621572,-.0789390997229003,-.035177884757280425,-.0705591930836643,-.08144962945674292,.04125449531039412,-.008240928398008981,-.06410405058088145,-.19223363085057119,.19698561203334053,.07545770589039805,.10168065244977331,-.01140796836176737,-.027454319260572038,-.09690925377089334,-.02776255170402757,-.09943183534992105,-.06580477803864637,.00795764190114884,-.031079452139909713,-.02525499831188102,.13286239727231575,.10025133561412032,.06563726922854993,-.003144015511429633,-.04438351451718005,.05543647864685072,.05989104825077051,-.009852621741650755,-.15354872527543872,.1700617723129286,-.1844295002128809,.06801442722168898,.029876275367864972,.10799501360998554,.08561819985013334,-.10413623068849565,.2446474961421388,.10562029167251738,.15464122158870292,.11486770498168064,-.16275359615761803,-.10100376605498677,.09513892429359119,-.10761116645534677,.017873153892635395,.11423888867213229,-.0018411500448220972,.08687414783248225,.16367347677496105,.0447333862925188,-.09476162327303775,-.14397973597021768,.21757349732675985,-.03452929329507209,-.12834039570251105,.039442131452955824,.052146536402598725,-.0027754429203348772,.09248677146658194,-.10000875137392633,.0219682748340118,.0760962405146528,.26484488873456774,-.06877899802173247,-.13150962876054156,.0011599240934269256,-.06809291370428305,-.02760433387457486,.005512136066048813,-.07484891501437754,.031133754790612762,.10057960203336513,.16473981410325628,-.02165925360167365,-.08482488271056601,-.016801310205887945,.022993395502963216,.017167179382408942,-.05637411208975411,-.032324211286495264,-.01805390985547957,-.05002376514920981,-.14089885860421936,-.13965160319931622,-.11870197019087025,-.062036231181908014,-.04101797266105614,-.05086728667080216,-.05857306982066217,.021580959803428883,-.0426993658359731],[.019902842485734224,.15561506976085307,-.028017485754111875,-.17651276038235375,-.039197701387862535,-.060229014076549556,.0404138970808625,.003932466397300313,.035474887918964,.08618712771613933,.06621142347023612,-.011482759449640119,.02171132608879823,.011537755053333605,-.03184318371407818,-.08491361323535157,-.023265192234759174,-.11448125258912051,.0391810673233314,-.0569989021823593,-.0647768185163115,.06373369278233973,-.0430751726058327,.05638433416632907,.025730822225084077,-.10729102468091503,-.04311799185503203,-.053657854256318194,.01584487603201426,.013290760860429117,.010200015604431685,-.003179387871218768,-.11412253559205487,.030883839158126154,.02146226913689821,.03496986423752155,-.07945610423084608,-.08503173767812817,.11503343538242178,-.10993782268920241,-.08957280215792442,-.003943109423640893,-.04578774281544791,-.029069481413135097,-.029312843103912124,-.0022281839533548724,-.01546117417346161,.08016859253876335,-.09641746585159496,.06816954310974893,.14488842713652675,-.020620161448456426,-.12127975627620319,.0035402670006761464,-.10860121905429683,-.02575902507091015,-.015907799649678353,-.019318209958923922,.027711942877274104,-.010691765460204925,-.11261913121914686,.2291912754369751,.1954724062108288,.0625766137140257,-.03243750875696748,-.17049052524689434,-.05488775942175029,-.008660696452757896,-.032470312195105946,.05011793511142371,.03840976548866489,-.1518186844101738,-.17238837635837911,.17800490245662465,.15774737196971728,.11238684789419333,-.11549538053161687,-.1051441923254989,.029627428418807066,.010047460882148362,-.03595190922317814,.015687349765215325,.10710721567720438,-.04127605106438434,-.23137836087848457,.10813840323639234,.20398998249936215,-.014741356900987223,-.06268340861017435,-.049411487995288605,-.035967710177904844,.041871499068939354,-.07218490385989747,-.08386387261744571,.0987343200723431,.11031868253657633,-.22002867944446203,.12779602690138148,.1421870701595465,-.0011896001696623804,.07936653037109748,.043588532242198656,-.03542457471856049,-.05460945564146506,-.16492582250638183,-.17557350746334122,.15889132124334202,.004150330789596243,-.10134763057667201,.19023517186356353,.08465959220809688,.11510279765301401,.16224249442600286,.1776357621035125,.2213390802482224,.1459621852939618,.02887144459288063,-.10378678936442846,-.06720569157117245,-.088716399430537,-.04110164115872819],[.15920136420084935,.060406604769127695,.05812234660507303,.00477008922714715,.019787104327780913,.087203596056315,.03026419967803773,.017304599070370644,.08557542947361962,.02395859131400433,.12884963809652478,.06859990546641195,-.04556715459324529,.06496044003945911,-.05721799313593516,-.02544770539534373,.0909487087326179,-.07976949894975081,.036730991722000075,-.038480072535680726,.006076468777062756,.062315581478503454,.002067988991471037,.006557971995562371,-.00435179253736372,.009628999934129703,.029116266207693448,.01426370898438685,.02969045715243926,-.08162738342787826,.04685054235054226,.006214888501193401,.018397271891386333,-.012561848571951174,-.04055161952690402,.028504081990583418,-.011486869296661643,-.059191179697348155,.022429209245582032,.07803905527712499,-.015415531651337386,.019964992266425875,-.06650382954835445,-.0013193086595682316,-.1084201925564642,-.03697337790527494,-.0205342616873516,.04074753970092,.053337194618316,-.00116709964776604,-.009560152849719152,.016298910205605192,.007727762688989535,.00037443623014628974,-.19227631613374657,-.13238394826418348,-.030124775371821032,-.015887858135493947,.025013961658704745,.027518775349448854,.024198826147774258,-.047760885812468984,.12256242261650652,-.05585221308136415,.06502609391787252,-.1285269471537781,-.05905811081727891,-.03231403701227359,-.050141311125915716,.08014056175866828,.03577592263971894,-.052897492514335016,.0028741733491999197,.08262808723197822,-.021869185345972597,-.06985407467550889,-.06857598821622574,-.06458470181901094,-.00693137015502477,-.06383573926778226,.06518389497058724,.08557988777332176,-.08978337177854848,.02413243559151125,.1223664563301936,-.00810312413900488,-.10893007981107913,-.04104752003254414,-.04048557535756673,-.018772198351639475,.024153345138070187,.10036333221955367,.06874030640700345,-.10245398888523655,-.016349166098083526,.007038000943865266,.12265704999147381,-.043113460086378494,.013370230023298443,.01672913680151488,-.039288684774408056,.05772847642599509,.04101263878667613,-.049978733723102124,-.03234750606396412,-.08817543486159464,.0998699443600312,.06560033169605944,-.015359581783002035,-.028528989655607573,-.03719905146013661,.15244521122136684,.18336254107941996,.05428784703506424,-.04636903284687951,-.1119122723959507,-.11519151048090097,-.022731910011617007,.11225252067886338,.28560328365377685,-.06798525202044266],[.058958788260075945,-.021876278629613638,.03761247925721169,-.0990051595759641,-.1165516680699821,.021078862330256215,.01595744461688453,.05964768591654922,-.06550559157581091,-.08339527717943346,-.1821393326554508,.08430523075152437,-.025710617818550302,-.0014530727721881326,.062922294533444,.010828617512124508,.0775051244978469,-.0662083607637095,-.05500269560874616,-.06151063081938088,.06890034543684466,-.05553914485788056,-.020784660567228427,.08939823359974229,.1288331620004711,-.12816590368747446,-.0096792212613234,-.11505461495101575,.07319559699956205,.013390797267512064,.06315710679645309,-.11664356591893797,-.0876774999759579,.06406852741285998,.08955232915921069,-.012366311546488887,-.08484181420948479,-.3099283808536747,-.3159112467280153,-.19715224674545362,.020969019898039606,.14193745471028157,.061843173279961985,.07393616820121955,-.01304258854189852,-.07497702247252562,-.20603881883896738,-.07094554080953577,.28309265451797216,.5774219945941598,.312620236031755,-.08366161905609895,-.0039166593479060124,-.007008189710296639,.040088156481113336,-.04939498483360669,-.029191264319536905,-.0811635084847374,.19268793954258898,.21144872967342784,-.29773471400507556,.12406492440813296,.3660537274903351,.09308241356731457,-.024580539876515733,.10110689340406492,-.0629105392741612,-.0034612665515367895,.029116324782821203,.0020626436307547343,.10964075240294091,.06415892337926407,-.21854402897708003,-.1292523299127749,-.07967520029164828,-.01811196962139593,.03595782728121295,-.04672641769659795,-.060929938641963624,.01119071426640683,.02353396464233623,.07256841830271213,.232706372262673,.33170083850101384,-.057955687348093615,-.12545830581187295,-.03926715840526838,-.05615524448023813,-.046609200143938004,.06049884936647405,-.04301666208475387,.02484177970157162,-.09936788476360509,-.16431861879138088,-.15146165000437428,-.001754402651548869,.17032294123573102,.06486764820629992,.15233819334655943,-.032910847411962485,-.007173196496394883,-.008138084970463425,-.05072430724859362,.011173233429224511,-.06210169914245127,-.05230881701781969,.0005165485585672085,-.007519204343792031,.039091511248705406,.07146588912975532,.006335994296771542,-.09563012456008428,-.025392132057811982,-.10041647140235001,-.09792800568202219,-.027282327996318675,-.03811213125147381,.012061424608286169,-.03559658850654168,-.052821862323290544,-.11313037428451306],[-.15324006372195415,-.06196561240414205,-.020864586176693893,-.0004281080429524662,.0730549833543368,-.06134765102497534,-.03146636400788565,-.10327863822100901,.05755843576675308,.011198077448874383,.045234383554630685,-.06471122499211768,-.06701115581177043,-.0057205043684774096,-.0286430154316026,-.037131071599513364,.05374888955175996,-.0541993046517875,.021887370672747687,.016189862073254922,-.019016514253116644,.11379602147808761,-.11165312886440776,-.008749620005268827,-.014474316621162608,-.02625163443537415,-.002710236678190989,-.03099024873740052,-.04127464832894278,-.11453289829380965,.047907282053055035,.03842197851581872,.015082505447196207,.028769815253706164,.01684473164289961,.0947271889151216,.20593647137919804,-.15159924031985617,-.24555118979497925,-.27707522357288905,-.1804892128057499,-.01130767799913598,.1144132283511689,-.014636046617138777,.0791981257095576,.012007403858779957,.007242850158786611,-.18640141319376874,.16780516380957566,.5682630668550082,.34085510546495534,.15391020895285537,-.22202084848747994,-.09319368101756968,-.005005130632420085,.08016678637196774,-.001085626957433243,.033973275724025434,.29561270160331643,.3648275867235803,-.31466398989768735,.06249709857265316,.2196885379838747,-.026684311034055108,-.054686227873073694,-.15194326555534887,.05427824086088953,.07409840320590326,.0050038364543305,-.11139002424195973,-.29694277435857414,-.002808352419852035,.08592149265900917,.05428329480793352,.0411597530101447,-.040069399672292144,.020583515255041856,-.03296830649846775,-.12400399212637832,-.12690204319933657,-.0878643358019853,.25943260806255236,.2546890168440809,.11148837097156279,.016197234685087623,-.035512335618043525,.062529085678797,-.06187636659039267,.042653661514922,.1456886858554321,.100266511239698,.0491063741303856,-.1692085663504731,-.15021472143352776,-.03643779012508594,-.09417454497077024,.05214270146935694,-.02443775761673006,-.04390447075557277,.09732225336579545,.02596334006058436,.04495779540761817,.015315696105485712,.028566823650113198,-.09980451302541923,-.05657460363336682,-.0025488357793481964,-.06692433986350617,.010193965172470135,-.006176595295437015,-.10526334482403006,-.06459141811863767,-.008227384684336793,-.02893758909705861,-.0021874049091571094,.006402070643468996,-.08247369715383637,-.10584367018509927,-.016046741087392458,-.06509616833600146,-.07661098919312584],[-.0395114284194176,-.008017333397127138,-.016551615434322393,.0756169606326558,-.02972213260367114,-.025034558630525398,-.07217122008767299,-.09247418212417383,-.07521187088066139,-.04436043047893565,-.06934898438225123,-.022490503780794903,-.005714731692690812,.052051258112528066,-.05460771691636738,-.05837262123870284,-.06077735354605972,-.07733680979439969,-.045476724941883415,.03077258241421535,-.11620967239502454,.10797792795409909,-.027779187806584747,.042775504075928825,-.029085091874604285,.07066507082342799,-.10670180015368308,-.12972554862345784,-.06118474678273948,.022941312169178836,-.01197768577248755,.1648708418427861,-.04834140930336611,-.026936350074678175,-.04805636203319719,.03247376246004253,-.13513407425749813,-.11294851883996024,.028315126778450446,.10779312846779725,.13718980587277638,.09482846553325999,-.02966219352241401,.1321112375584729,-.11093428808802747,.02916687414928116,-.06579282428442002,-.08256500281821627,.024708088751542928,.2229367558385418,.2388187319246808,.08490311118438629,.04020849703235033,.0765455738357576,-.06123753763864033,.006328444152585322,-.051374467063856455,.06282708429581385,-.036988261540257486,.22358537142740625,.04843740261111502,-.2535321419507542,-.1926104577983085,-.01942234055203377,-.06284764377196571,-.0368534961734199,-.12964946819383125,.044458755188555237,-.12226738775926,-.07599864777666435,-.0662850361984892,.2852615582722664,.3916662609406049,.21583615293103556,-.0005967176380167055,.028281927318908495,.1415042056057566,.029357515776456754,-.007365256806601578,-.018181855688694376,.004505654970761774,-.11281100988725729,-.12216102487292639,-.045821897312377555,.027683086807535735,.044114075431245875,.012960273742704111,-.01033045914794202,.017525421607595383,-.026815178240449843,-.038433562205767026,-.02317646605739193,.018238150229464657,-.10609098396328405,-.007836527408866603,-.1692715238790774,.055230115768598605,-.03859912120101314,-.03008312241420639,.03349878615087269,.06454927378510011,-.054456334956194834,-.000561624340477046,-.12305574145274481,-.052312038879843335,-.006255987324141468,.06665880864100848,-.08366141006543384,-.0050756577353415835,-.05394576278351597,-.0002704114069893293,-.02919342508998127,.0602433231945494,-.018406883366667015,-.031509946993241944,-.02305392310291406,-.14523023321109388,-.08339822087046184,.008380140183402655,-.05452717749885746,.005180865935989931],[-.06584861959480079,-.0532610791207804,.03547393338792408,-.043773076764098175,-.042948902519114054,-.03583976327558023,-.03670964756282482,-.035889928945933514,.00843034240350148,.07095993548137726,-.03999093783602076,.0006291957612527682,.02301560832911255,-.01209375762579383,.023507991177519026,-.004385258375902524,-.017754505089411822,-.09839345133908661,-.02559852615356971,-.09325351786982229,-.06008459884003483,-.00677329546120123,.004732234321798239,.009885455292119864,-.007934314589489084,-.048435067329455274,-.011810163769240992,-.04446827749908428,.02916153717583106,-.05237348591276701,-.012794443685316442,-.07399977065503117,-.11228628800766731,.0005371885615329149,.054814439087026594,-.05861186179557899,.03170476444812075,-.007650152416065134,-.10568592093548473,-.19589466237166098,-.12315650606608049,-.011442858954517257,.11925985331634427,.0010363876176450598,-.099823252161576,-.010168708525203837,-.07718787943746307,-.0660046955144084,-.28363396719594336,-.09330046294742925,.03526227396896657,.1315555866231668,.09198066269231853,-.008116054125121211,.12425322308370529,-.04316031938519874,-.010050897456012592,-.025512330079287684,-.054800141064251164,.0200039868099144,.3167243634082388,.2782630901307965,.13789936294639166,.0488336696047498,-.033553110848946716,-.04310511729017502,-.04698670598703379,-.007936569897325663,.048609259060924025,.09187992284758031,.23510886392711264,.016599220831810764,-.12371629321306805,-.06323456296281568,-.08997041582264578,.010187402027455342,.0722312763892501,.013954273076743703,.06191724514263754,-.04380281732368861,.043710574812090564,.034237891220848124,-.14964785672058278,-.021062558513936316,-.0065214932642196285,.10036739854860938,.025703084368196946,-.023339141967235796,.03996056214623274,-.0620232565046033,.01983931991841379,.12567284760581157,-.12435675118258002,.05104231359059292,.05395714565825474,-.01694635229337549,.04332098462941552,.03818482834599253,.06706481039603254,-.09250774508547983,.13190717572685476,.07881879268456271,-.08728730729390641,.1368221956639014,.022366303998031124,-.0032543902188911095,.11492942524291971,-.07029322141387719,-.009766170189666268,.07912022044149272,-.13762756714606011,-.026907508147589007,-.12733408978979363,.08600916431669958,.011950067353004187,-.008931583380912033,-.049144400030709225,-.0446933264862705,.01772819118739517,.012376530468464944,-.08535521105761325],[-.15926058536081383,.08489658481255542,.010352869323630227,.024130584286049,-.009902524763821266,.016912897049950096,.07309247598639541,.0823695012331621,.004302238435681671,.08385543214443546,.032979428566029964,-.034178053263341474,-.02983859063202409,-.10512208483111922,-.008974556089922564,.03681355915406209,-.02070817955988763,-.010090767452007834,-.07287919801876053,-.0016777678298555698,-.07674331451272545,.03639911970925817,-.02229204539129641,-.07982096771590114,-.031169859791016094,-.023949824087409338,-.09000717940002298,.04946389516649899,-.01162443307990568,-.01219009445713038,-.038313237174491976,-.013830623631471112,-.0491682247170063,-.08738024755846124,.03625321685783492,-.13554744530431564,.023838368099940645,.050095096402370184,-.05327159587273026,-.085011920306738,.006167606412710434,.0016709301712408975,-.013992899617507056,-.06274287658445159,-.056305160151194564,-.08072705967225394,-.04239028060299212,-.1477669216452329,-.09702130958596067,-.0707340447035216,-.01552687001837725,-.2258827744334686,-.12300661118492401,-.11675473231723006,-.16926423521447898,-.11923817183461347,-.012360787613125972,-.0532425661020737,.030546117724330767,.11823686169287259,.1835792066113906,.16422671841790268,.13230129923057396,-.06662694905882213,.034498938620505855,.23002917423607563,-.10642345721363024,.0957207144145648,.18783595134907466,.1135920030571944,.025587855512019128,-.06743973075994303,-.04765764814588825,.10204615431399511,.3058964473801503,.1207425327574773,-.019907430927027056,.07905279205115111,.09149722809232859,.05353493588338261,-.0018597176390167877,-.03633230199269511,-.0677533805583534,-.038232412213873655,.00853338124463092,-.16436890766057954,-.04148143796817002,-.02449800446478983,.10683536971967762,.011812992251597404,-.1175917440126058,-.012836857177767773,.001045728278908989,.07214734756576442,.12614593084743808,-.05528169296868963,-.0069995168866165275,.06020094104930038,.019190774932036525,-.0006895939857644584,-.015094903464007381,.08256495616839067,.02935269669932245,.02052763134499494,-.03124630208458217,-.05933274918515974,.09675303608835002,.037229564658005795,.02552939083091145,.05686124733111168,-.02345084554174042,-.023607393595097947,.01954177012013153,.019437963266884198,.04454845971328382,.038280883907943236,.061662221134642245,-.0881552015250302,.07930408278804488,-.051664305162406034,.07775786173146697],[-.06170837072054834,.047170428243489285,.012296886297672109,.004808643011588981,.08927303726173832,.03230033333916793,.009921092241579652,.07731496066383318,.0072189861909926,-.005789590161049744,-.027110780745009062,-.13988755144130377,-.056492694825430186,.04374068348472923,-.001146343682998166,-.08711354876016822,-.049878803860526635,-.04460141329529405,.0370267591368818,-.019657603932586268,.0018226974562157855,-.1371821008360329,-.02365446978277948,.023928892232900345,-.06122045854429186,-.029673384135270382,.020848245415982687,.07833644761260682,-.04087552894668449,-.039873516281161016,-.05558396740446255,.08091231776784741,-.15785957027200945,-.10648703433887595,-.13229515155412883,-.04331017164951326,-.10793874347611057,-.08752730601633155,-.10889258052047679,-.09420017439695903,-.06830613525170248,-.04422556269513133,-.13934687419321917,-.1704639053008461,-.21416865484332515,.05518332839364329,.11437493872756643,.20663278657310677,-.10572022382588278,-.17195276126460635,-.07075394516471956,.056465453539173864,.1409941593083615,.1946078610379961,-.08266010138036431,.18247573517682947,.11507042684035029,-.012083622193608423,.07174209396316973,.19214713056103003,.19212718354463745,.17144674880884414,.1544838654242087,-.010181744325890758,-.0751062207627339,.17626659048347,.07292961106227598,-.08536252150394184,-.101891980495703,-.09391093364121281,.0033217473718428897,-.0056858529460113855,.010932950962091154,-.1295062582171746,-.04696074990943846,.0032455130187898154,-.009071778109973158,.006837084042853422,.05201533751109651,.01835745774621482,.012669751254791792,-.07441118751571182,-.0639739998867464,-.029665290241513848,.058058821799073575,-.018533488843353246,.010601655483648394,.08106712495222596,.020392890895924158,-.022919324383815623,.12127224411021978,.007100146218042218,.12312966006288995,.13042358466157222,.04687683112373964,.04270416929413779,.06807842388684252,.04605385479651503,-.00678360169209874,.04506514027632265,.03249542988682407,-.043798472997901496,.03950442276853199,-.050502036141981343,-.02941424277017704,-.07235605231228699,.01041464254613065,-.0375953575506948,-.024335687688017353,.025902421447803838,-.006311817127618385,.028123124281161538,.02743154969855563,.008821990965175233,.010829518047857936,.021827682953003358,.043520974366854995,.0035936083619636447,.056883805856356655,.04087709228201788,.01595663636965281],[-.008350746862047918,.06163937199165411,.06304264111952332,-.015296208138174606,.10245170405475104,.00399856785335391,.0776520242166163,.03002124455464285,-.02183599493843747,.05639660365532269,-.15006956293703871,.010032941582169524,.005016376321868882,-.018546011439547875,.015951124664690213,-.0011364559207565524,.011706775239053238,-.05860401544266863,.0015384317043948658,-.09247607401600234,-.061290397480221234,-.06437213513504575,-.03622734267699597,-.027815877384510204,-.024540854835821482,-.03665117868630987,.01780819541762635,-.13330602418496687,.09382543977629512,-.06364733953480488,-.05029341755903363,.04049780785943634,-.09330711840631761,-.051282463447807104,-.013632758698631245,.005177251054892366,.028088081363910312,-.06949363772703296,.02916951131051442,-.06571475121012882,-.009579966428208467,-.007563195294288092,-.04668939846943813,-.03603730882489646,-.16326411718263986,-.06809043583401264,-.09040215941701694,-.189584820342072,-.10038557840858034,-.08140974208274328,-.053687695693256356,-.16229791121556614,-.053231203082402576,-.07500210943583041,-.12647068989268548,.18340634478038664,.016324182102231133,-.095198942566775,.046462085929464936,.1380455870759975,.26953073102703096,.10023542270642752,.0530132013465859,.043485094470545015,-.01214558910123813,-.05664856700450746,.022122779976736926,.1492504777946008,.20113371911375733,.15087642306265311,.08158993972192415,-.09439974726211436,-.0019980179561955858,.10064758348146532,.14323151379670465,.13388503720638026,-.01334574239904679,-.027656328955928452,-.09883742284906553,-.015845908439641777,-.029293403577799304,-.12585250537276885,-.0765340538545077,-.025133636251120382,-.0783490751293564,-.02574433170418873,.03856432698310645,.08435214462345794,.03497180059356594,.021597995522587295,-.0096451137676173,-.024148476054881025,.03543901889081724,.09483888820433625,.013834291541066517,.04741612038963228,-.05276337737818716,.09928655794773157,-.042715908236761815,.06542372056116463,.012164923448017582,.048080933808946395,.046868409986020515,.043736365228833965,.03354743790039413,-.04638166163345046,.06276514242870704,.024133154758299614,-.09756871705363893,.13228826368262767,.043959645127688234,.0069923806816005706,.029834519712280835,-.02842119488910682,-.04275877728028401,.050490465625002964,.05063814327270262,.044201806819942,.01592836691970404,.05028381973002847,-.09457881127496151],[-.009300234014682413,.06642068786464962,-.05798826182978668,.030467914093403506,-.08894263286311416,-.014873330866996408,-.06903000288081293,-.05977259337654181,-.024750165724362155,.07698058518451763,-.1121917763907885,-.00026098838462658425,-.1064332436563662,.04696612592015199,-.10536876322983255,-.07342934948027295,-.01725860008224613,-.009754908309039705,.028937359707606723,.0583201452293885,-.10852363274246603,.00930340192160292,.003239488675901011,-.11758435763177846,-.03071652417368076,-.012968473875358794,-.07243267658598825,-.02951516712700545,-.030306917069408162,-.010562351852173165,.0005934753265023915,.04590183634434822,.009959243815588284,-.1472695806957643,.10665865350902941,-.05828873586184857,-.08133214090697385,-.10522554630509694,-.09270611819370647,-.08044877692547871,-.05472226200412563,.03500394529307579,.01823385065438496,-.06468218471334246,.08255229855835836,.043969243290146544,.10735340934065053,.1755119874560888,.028146227406542355,-.09303225304953966,-.08099188308628323,-.17304587761466295,-.08397564913817572,-.0821869944510589,.026086345132597978,-.024523009144156466,.06183716547163987,-.003153257941411511,.0138867394019625,.22791162384791516,.17839063189638452,.16802924166508618,-.02242358838747683,-.07047864822552609,.07563100014347351,-.13496798278125824,.06191444357903691,-.013965499326545715,-.04028717399616462,.004944231423449817,-.14234850191040116,.13422797072590037,.0044641492895416265,.17884346888192523,.033152160970333064,-.08418601459388463,.022681908276631663,.06950316754649397,-.10838151310589246,.025867188572352328,.06272635068791883,.051958392475047875,-.15684747676320326,.13621424644871002,-.07763575706962209,.027664309706770987,.0994262520879166,-.02406648271724445,.018369096774303477,.11490785777152708,.017998296859149974,-.02458427507431256,-.07297092825082435,.07092322827813306,-.08429449051860263,.14548924260173943,-.08148857829488734,-.04688306757082058,.06557102383832157,.08257811486473536,-.03674333501858794,.05490971339490931,-.024501097951853828,.19599838240616638,-.04741439714573305,.0027762441038286303,.03026805935619377,.14718296789670926,.04311186683321203,-.04524266215902584,-.05666670192620306,.011024035468495882,-.03746967817840401,.03453920016874658,-.09346994614785557,-.030232213433933387,.09252607527276398,.0033730560801506935,-.07495488768457344,-.05630955348568156,-.12734695058277604],[-.07400840629255256,.059418218830081374,-.16185533770248933,-.09511377575181565,-.054156530748324355,-.09524659355343601,-.027700374104369613,.1309596769464464,-.08289814773057447,.04323633024834905,-.0732657658446774,-.010406688952704322,-.17908099782642803,.11214349559047893,.011254398841125272,-.07213174644946746,.011242646811143842,-.12960939072644068,.01738837182774236,.05208185061396447,-.016141307058450453,-.0031876314325390964,.0604762980771201,.12062873361043944,-.11552428611131449,.053112984787895695,-.11175835774514202,-.08534494276082714,-.10341778301339327,-.07751212851826152,.022696330581442322,-.06116622795890771,-.02680129950339076,-.013512513628398493,.0728716489119607,.21355653955799342,-.06105176975794184,.23221322645596984,-.006049593164551087,-.11934471718699403,-.0487348966412308,-.0037696701788163915,.0015806523808981135,-.05901624282153879,.1691633875802479,-.10636213299345615,.013867670987275399,.13029048317364064,.17375284613983333,.3609697497347413,.07255734683387557,-.05062242706109578,-.061396795580056514,.01202817039979849,-.05973887884350142,-.15920195495822725,.07352556416907685,.01066435580390359,-.12349031715778719,-.20862800209268534,-.24386438086421988,.222695461575821,.04698208213520101,-.10969479870317536,.04679388042937237,-.06782844391656809,.1529621897287679,-.07419514198821806,.042910924531490646,-.0147654055974203,.37959648332332935,.41757874715387594,.021898097003166472,-.11237855306165129,-.04315320783073595,-.0018388342246165729,-.06544880277545752,-.010369032880327395,.043814853347705546,-.009064346657087552,.10571938625442225,-.044969836340908724,-.06001709893042255,-.12351913057017941,.07288836755809402,-.07301558300277278,.024488919824195432,-.04699486258065857,.006102580480916678,.03298894100401292,-.05586087652942285,.033548851659122456,-.10250477896692914,-.08536966088800849,-.09144709776442657,-.07175297330523189,.006001598145138044,.004878028870187248,.09177774204439978,-.06391124327661979,-.10839434894029129,.14049866674905956,-.16291269836434877,.04922746080966731,-.0539566557007129,-.025757221007218452,-.05949850932725881,.02902178421128332,.037106210375188055,-.04318224281511984,.004468562587269839,.03789091486086652,-.12462488658167202,-.015315868709315207,-.09942156409415501,-.05791207313008667,-.07046307506797155,-.06934945677768675,.03622490416908307,-.009666917459053025,.0072113489889556875],[.0005400037781949458,.019228224673755647,-.0041211476935454,.010351942594428495,.006064413551663622,.030583158266134808,.018242859270646162,-.01148471491658012,-.012453527735116602,-.013982904116162584,-.07349494525613852,.000610039089874911,-.03545692573186138,.009198148198758704,-.007930642240669111,-.031346516850493486,.056360544230430694,.02226925518256564,.02097553828852184,.02159266724595807,.02229244757161712,-.03637635466667719,-.004893428694286564,.018803611912471426,.021642092128736024,.02297935260531075,.05727899187240622,-.0628468829571148,.0080146423492344,.001741066749290629,.02331626054937483,-.001969245483005422,-.009766350913334498,.02655260293968668,.019311702846604575,-.04047894912896902,.04296345656975245,-.005557204714366611,.040028541338850074,.039092247288585756,-.014760769957556222,.03928708395050497,-.028685719461485404,-.013542811096967075,.04279694192402748,.009326485295681163,.0711045731208288,-.01285502554472399,.004812097490178826,-.019345118328359015,-.0068647366946253605,.06002650436955327,-.05171021704764937,-.008803783541314746,.008593656232294026,.011216837793947578,.00436599551284661,-.05236548521635015,.018585701567693985,-.043301048775860274,.017257179405366647,.033163069502218985,-.06337187087282822,.022236310454164437,-.010282665078434856,-.029097248102949336,-.07292855786427224,-.006526386582500402,.02170794880550138,-.012869723919694227,-.036092446130363755,.049588404031142494,.0037685978390409776,-.0354492999119638,-.0174997172625617,.0017064827547835885,.027702634451048022,.010552265815024279,-.015110098334354602,.010755306598934415,-.042384518316625354,.055155751834777625,-.04634167814163758,-.025334054233096058,-.03180439146719122,.007446831416419553,.014822972242049056,-.04150177712089112,.05565976059693688,-.015163449841913621,-.033479207943135934,-.03807430074830388,.018025384518394062,-.0421878061699516,-.06845863066515746,.03254289254551393,-.04300024705489787,-.01704186701570433,.031343919493743794,-.07998819951145825,.016715851151657413,.032905055715790735,.07075045847869674,-.02652191057953172,.009794889281753288,-.008359095601141911,-.022132176548511583,-.010266695795141155,.027387007127093858,-.01945661327421618,.04747122989735239,.006463945249493418,-.03682061138814995,-.014924071652059345,-.04838145119030405,-.03540145720228079,-.0011683979389548946,-.054012963892719104,.07919096250210245,-.04604060764604696,.010260604991224952],[-.0001569077120156144,-.00010972965005487043,868213356645213e-19,.0002895918293708104,.0001333682010118062,-.00020448462499146614,.0004636545850201651,-.0001952429751545387,.0003324840807350654,.0002625042692584595,-9902279260287639e-20,.00023043331960011237,.0003325021559779928,.00015431271343276792,-.00017517735947227692,.00017580915476165387,-27857926473168204e-21,.00010573427076637082,-.000165480397259693,-.00010017127208199195,-9313858279300785e-20,7629718954399456e-20,8422483860534222e-20,-9328679851063754e-20,-.00028719968349017605,.00021350040915488894,-.0003150556862943979,.0004518855251356285,-.0005495709535034074,.0005457914675567402,4292665511661936e-20,.0005230825423930205,-.0006859803831355815,.00018154537313607583,-.00019968317282380993,.00023651893221749917,8502048011076527e-21,.0004909646746514007,-.0004119603837152569,.00037236304958472577,-.00014792807116663712,-.00020787769585125376,-.0003163192179676949,.0003509716053853168,-.0005302482775174575,.0001920548407972275,-.00035924357541414903,-.00014479534658806692,-8220562624946387e-20,-.0002676219455012979,-.00032865721811569347,-.00013872646247882828,.00019337977765215147,-2893078271500732e-20,-.00021530682683792296,.0005007558342280394,12869664429884797e-21,.0002877888733890388,2151668885594371e-20,-.0003850355075187134,.0002692398906111934,.0002012045588500183,7126990807145711e-20,.00025510516920475984,-.0005497530710414731,7080130020775677e-20,-.000314434949907981,7272781453938892e-20,-6764731777177124e-20,-.000105969532620806,.0002042525509826365,-22660407178250186e-21,-.00046405924788414654,.00029312274831753277,-.0005791064920290384,.00046348258977586126,-.0001892141960505231,-6831069283591215e-20,-.00011583420771371644,.00024261083736967087,-.00013788873457702688,.0004658190984066779,-.00037781566966009483,.0008716245230738773,-.0006364250227483409,.0001914635008269036,-.00030213932128696913,.0001548061422106152,.000359478662719067,.00034064528670862265,-.00013396590679365383,.0006282001548930799,-.000262816864256582,.0006290045675361594,-.0008356505374108175,.0005550125162077091,-.0003922153146351179,30416452512397468e-21,-.0002189561194486725,-.000250508136889635,7579225944163992e-20,.00032480822488636235,-.00028410221135238486,5019706084559428e-20,-7604971099685331e-20,.0002972254682679469,-.0005977100300826113,4813754973029272e-20,-.0001438309620388073,.00046738458634185825,-.00043149354775268156,-22304724232195816e-21,-.0005350635724875007,-.00011828488032837592,-.00021777877913900512,-.00010840223620667971,-.0008066009231476462,.00028972319720168074,-.00013991311235211912,.000435976304913481,-.00043607463640516625],[.0007992911504804828,-30120444183670547e-21,-9.668328629364176e-7,.000864945159989125,.0005030529484980062,-34861905346544875e-21,.00042196435679157235,.0006568174335126256,.00012927605196788594,-.00026826496297133184,.0007048572872881756,-.0004505423245168838,.0006284185275765297,.00021810609410295723,-.00022766549944826936,-.0005743718719742955,.0001667039981521068,-.0004550487105457676,-.0005189640648836646,.00016278501839328552,.0007846798866815302,-.00020117424541528373,.0008133233405210466,-.000546613347067848,-46455199192108054e-21,.0003925110134400944,.000890454317246242,.0004480326332934603,.0006725243981668128,.0003432395336075006,2970582797436061e-20,-.00033407540980814887,.00020838216438882895,-.0014686441499898312,.0013210643314603837,.0003622979708427093,-.00042100922626168297,-.0010662328062863852,-.00047868856534150767,-.0011025209542825376,-.00011142308623937613,.0003605454081693979,.000805368483283761,-.0010504288820343197,.0012459778440163868,-.00128894177690737,-.00010349556762601422,-.0003259874452417391,.0008195978542099927,-.0003286953750876037,.0007842790431124916,-.0003102789124236477,-.00013199686164484803,-.0012037863711194877,.0005696662674320799,-.0015831212285748082,.0012383789939280389,-.00020329286471698974,.0005444151777521458,-.00047971421799346964,.0003639802447524265,30135996240618357e-22,.0003463026791720031,-.00016208082819759925,.0007653100934952896,-.0004374341893310929,.00035576070800035636,-.00024010306236346007,.00021524875497277648,-.0006550476921478102,.00036034608435831644,-.00028137429763217675,-.00014369965739139887,-.00019791219870676433,-.0005036156937956865,.0005614487217727865,-.0002316208715137033,-.0004190557849820635,-4582427172821965e-20,-75822332618488e-18,.0008003140757002376,.000558399734893824,2226587692822843e-20,.0008977254633047785,-985806312324422e-19,.0011729728289751398,-.000527695784392275,-.0005609613348941597,.00010460229482414998,.0004749779920359999,.0007370880620039648,-56914197126341215e-21,-.0003102421576837294,.0008752411241001248,-.00044804418685771147,.0004955562848460542,-.0007026457904857168,.0008545564187135354,.00012341905578699096,-.000935467102831657,.000378222510539916,-.000329023094410295,.0005664691467672459,.0002521641764011316,-.00037243077631574,.0006157672055980331,-.0004852753855330537,.00051397678370688,-.0007636882120910741,-.0002717643717346516,-.0003651782273257267,-.0012782404754204373,-.00037035199188238405,-.0012045089669873877,-.0005111585661751218,-.00047596944593941704,-.0007216126068211506,-.00037669329780016733,-.0007539851576227469,.0001343282945602117,-.0005905901473275219],[-.00025150140763611817,.0002000543548479755,.00019417083739569404,-5792301095815244e-20,.0005586382076858193,-.00029404960975239897,.0004641898804350125,.00016919725054860514,-.0001365681365060609,.00014340737825123363,-27245579659461233e-21,-.00017462744794458128,.0004320870347869557,-.00024872373436234194,.00033850066080495095,-.0004282450008767239,.0004527458938356002,-.00033817558566411835,-.00015836618254124374,.00037188063032157683,4001322304792815e-20,.0002963813147966963,-11757971572848584e-22,-.0001744667552400006,.0001268511029074151,-.0002576099870121168,.00047735971540077606,-.0001583414507774425,.00011916420387451162,.00015943376359087678,9365002254130717e-20,.00013240084078796482,25813088587590515e-21,7753877679932738e-21,-.00041105076291241384,.0004545220478361274,-4040458358791927e-20,-.00042518565093397536,29496406138524887e-21,.00022369184176485946,-.00022326384816004656,-5969684765263074e-20,9590019958132271e-20,-.00021800428194160856,-6628557645497676e-20,.0006383470103711519,-.00035775911240443345,-.00043585234193858034,.0005552031141922574,-.0004686784852901424,-.0003666824099504886,.00044104545236546815,-.00016743491057120887,-.00015286382598361098,-.00042267651180960325,.00017696200882469978,-.0008795455641963257,.0004146582259312644,.0003045032458691716,6846537634285204e-21,.00021324027853833406,5544423373813733e-20,-.0004553872771715659,.00036257374232944806,5812612913741011e-20,.0004870109844424884,-.0010394561974651842,.0011088516063339896,-.0004744671038700055,-.00021639705414199396,-.0003026456545315232,-.00031876669624713905,.000182567936551101,.00022085306808071166,-.0004570847865470322,-.00016764562120866666,-.00038680711837089563,.0002346549695738001,-.0008905859234485335,27029323083889965e-21,-.00019392260432311614,.0004315957078649057,.0001466476034520035,.00020276998330380014,-.00016623775962797588,3377296016834441e-20,-6900085899646776e-21,.0003173325151770612,.00013183707157224346,-.000262754515962364,.00030496779772497273,-.00022988038412455076,-.0003441066296248881,.0003397409639967002,-9437034630983875e-20,.00015929656150039573,.0002208318439938517,.00023298688340578377,.0002668471841276376,-.0004223616661706703,.0010171866741304654,-.0006656074902465917,.00023102910516509278,-5110533473639173e-20,-.0002524743916937494,.00027604436336503557,-.00017760551435710054,-.00010325189793795159,8821495793360275e-20,-.00022473324648105992,-9108273748473011e-20,-.00032298641944957397,.0004976843507103613,8618913329085944e-20,-.0002727878126327788,-.00012650947795273654,-.0005222727775637999,-5214077958895502e-20,-.00031611240635322224,.00017884485805307976,-.0003794131877055966],[-.17866885726802303,-.01004627890548361,-.04258967548780557,-.06593466407442874,.052273011858990394,.03312160535571991,.02795049686644964,.03459701777139025,.04065340185643863,-.006028884452193628,.012100171644170557,-.005823115292745859,-.07582851399159081,.114669445133851,.020113986866166972,.06830239973025178,.0536675149057223,-.0019151045898751218,.0032161515425703988,-.02286773204984241,-.036064260364357094,.0030444356366628143,.005026825113180613,-.016159035960289652,.01343428575788129,.046278393980945166,-.01986357651860629,.03308155415261836,-.011511204742527398,-.02336066267834247,.04803053127169171,.07216286312764807,-.03470696526283394,.015742792044845896,-.04365784041015932,.05298988616021803,-.0005778284434646286,.05368524140978516,.05640961604342286,.031927074543435394,.07620825227690615,.03508474849876196,.016016932367084777,.09782925262644122,-.010932961737962918,-.057604724295680525,-.046117493596561435,.1158683536837223,.016630360691506946,-.07238061224123352,-.02721078987250658,.10400189079503686,-.04986370811184261,.013157090965211962,.0687580755933804,-.08609338291433159,.10550940203644331,-.05192563629392106,-.08457695827736228,-.023868518013074047,.11534819907311766,-.029927793894114596,-.09880532106573656,.08174885118680475,-.1060908740185344,.03131709572154953,-.028082259348080146,.079441855776121,-.09321417457265918,-.06985811657883463,.1070256004886421,-.07154792343865429,.06446512920421217,-.09916465105825018,-.013469569177392421,.03435227148056593,-.10594412155782011,-.03578650235512626,-.011063899652176858,.01837774789897521,-.03925360751263275,-.1401687891122919,-.03721312667737868,.011543278654149135,.004656475419833515,-.0760812186959124,.02161652285659742,.005696374724535533,-.05422545641286053,.03997648210328526,-.014191880258275905,-.05603875416223365,-.08595546789835705,.022657092076657198,-.0022047701913627767,.002351972464999623,-.008640836044051557,-.06488063850524677,-.005552341996716701,.07959598156789904,-.01118968911944192,.019694004932030575,-.009080162837764867,.0030332790803103706,-.11172688994501827,-.037768645256787345,.14407928948205997,.00854179600675923,.051063118511239784,-.01380913347995522,-.01880415226931162,-.07472568370647939,.06221295634359636,-.031173033698703514,.023265775517157146,-.013229707925293089,-.0880873919352723,-.16850726894231444,.014989271963221966,-.04579025515430985,.03830156993922969],[-.12471960559298051,.016331688001818473,.010132274081235342,.0072416673905218165,-.059929049564220245,.014888737012368864,-.05241879684518604,.022430681494682764,-.04370183268160943,.021372011063678874,-.06655186710593347,-.07675155144909322,.03145408506904994,.0005069862036388229,.04820853702090235,-.04360636063972682,-.026401547797884867,.11494953428588206,-.0008448799329897217,.0417632292750263,.01662088156180045,.09574359592256741,.016932325856871336,-.031217493839729042,.021554336392332216,-.06122835182723427,.08169620652750695,-.05509950017990012,-.0953015830246275,-.03135197233503784,-.035124606327755464,-.028837124821496515,-.04788471540883535,.06070242512625609,.08068456476164618,-.03962789913976757,.06470980341954596,.013113165039676609,.16301141390375,.12824898952567468,.07463647681415406,-.01689728599051447,.010567173254586882,.0033568218888065868,-.0412160894144045,.08378062128267277,.102189508322764,-.048555074093876056,.09549314269554934,-.12104629625143107,-.1493368753465891,-.0389467848305356,.05367087918131229,.10886118501283593,.0623983957252945,-.06400486156580862,-.0011642109155079912,-.017989480311898197,.10376420696530403,-.021666202371688252,.20636172793169102,.06751567674647355,.022594628822994373,-.1087504952317593,-.1536783883022896,-.10156435275826153,-.056219286606131964,.004893557738526164,.0805088399913846,-.048986994532721484,-.05467357353544683,.03441724157108168,.13788724353627765,.17933790589816131,.2269420687448924,.1671473728685338,.2888790147793218,-.004550503908508637,.12853746432697205,-.14688209250590184,.039803550389166095,.001161697593967297,-.19133864743440931,-.11485627148408395,-.04055611652925376,-.07701433461570141,-.06491913606734276,-.17402303487112258,-.06945190797766371,-.17069839255636562,.09755338124630543,-.012417013824468703,.008779997988951951,.033808465522018064,-.04032395286090812,-.12350740477425591,-.07110377503699353,-.032842030960087386,-.02525651113024763,-.13557637802150552,.13026525943758985,-.09897866100762497,.016539720299720638,-.05539382900312294,-.01747784521356558,.08253314208431616,-.005269279253446573,.023714959705274333,-.025127637792893034,-.05449360375807459,-.00652514795320968,-.19551796620580655,.0005153308443185747,-.12469764291808262,-.010402114917957516,-.04085437197022542,-.05009127773951896,.006171429783149627,-.022234206683905616,.02500462259196987,.053771861975124485],[-.06953146063004409,-.02785516739677247,.018198128969876097,.015264256008671422,-.021354522403683483,-.060614589679217915,.007426020566030832,.04490934257839589,-.02229010045780016,-.04503811421576148,-.055530719421861996,.0902442269939355,-.003808075241290537,.0018190374684997207,-.023994658931284905,.022637227704013697,.034385575661622605,-.004132342662778982,-.015239537988315635,.059722981968446186,.003544656555215908,.10857055311904133,.01582758789789633,.008987865811832016,.021416627127059842,-.02600036471546474,-.07205361608785835,.0067502383554667415,-.043797404208141606,-.08622211669101225,.001246921678646755,.0139677771449414,-.01880006926090451,.09110646933785663,.07148285793357623,.0531413345214016,.00914808213505889,.003218881297825424,.10531967232382244,.013069231097604272,.11321624512420622,.024085428042357526,.10571237447906545,.0972494307993253,-.04035677339102225,-.052072201970584105,.009483848744708569,.023224654347251975,.048982273381055874,-.07704737716893406,-.016369059725570845,-.0483990050185562,-.017518918630372055,-.04872526407833252,-.09069556505420186,.14584898982636468,.020202497107516055,.052473273376908665,-.005921018255039059,.002281302741017288,.01143131488424251,.0986017144258021,.035390606662767,.11802445684529828,.014488333933066366,.14985625484032264,-.08336508118286931,.02604166398390495,.05753622347531037,.10289686959448127,.13376253308792016,.09859927901539622,.11296262694625853,.0668115199475845,-.03039233221979165,.037677148170599,-.08046540901337987,-.013433044614551137,-.0790502723823431,-.08692778549134847,-.13723308506024745,-.16180861780403702,-.1559436708245299,-.15633705073107523,-.15765816424278123,-.019054153693685204,-.06642804134677276,-.04031539430037858,-.15529720969926392,.12101901933989367,.007373943349677788,-.0390423130063269,.044864452505471414,-.03107425775017513,-.037869139729967256,.02693566917864209,-.025703296599595565,.030655452436583908,-.008329491639230698,.030463719734315588,-.016822379770469454,.010025642600714306,.023941947007600384,.0037369192163097253,-.006206138277264052,.040478298614511805,.015199733590990229,.035362093609806654,.03511391355505986,-.10029441782907185,-.10610472749034416,-.05209994244567258,-.0037985170316418085,.029290155294759784,.020763196785263893,.03757429726054337,.05056819389164744,.0025948365095440178,-.03403336490460493,-.031897318483976964,-.07255287776479732],[-.07415076132698015,-.0006698640194668509,-.03851515813421434,-.023181050413543618,-.032101285996002565,-.016813865511960804,-.043281469336209986,-.034096544273423686,.01015713603552236,.03002720104435845,-.13569617378270427,.05532035184255174,.04142268330483252,.05423769347171173,.07515835251781103,-.004561163523117667,.004933683544835622,-.02780420573125888,.037859313146976444,-.010636484133250523,.04303907463414708,-.031109281470661186,-.026842848775607248,-.03367029747858763,.005308192649811985,-.03971982646619191,-.011433401479806288,.0018726799542050226,-.030624975101159628,-.002938065158242298,-.009598931969133029,-.013587888941593039,-.009022840695484109,.013981082758308103,-.027132225331696645,-.0667222603414114,.02999630756200286,.10810874336228038,.07393253694528595,.09459689128832147,.02132698978555572,.005189532728890431,.0906255149562725,-.0014967572066416635,.09569159602867722,.07103280678529231,.09312149403009169,.08641023342246706,-.08291182791329474,-.06331718873820169,.05804082822532146,.0941232801306275,.04828946243389934,.0065600637976757845,-.017978915242308827,-.10529465762835961,-.09950537690388492,-.11641428549809074,-.16336914552196619,-.03066309873006054,.03732730251873738,.021715752289796372,-.0369844279935826,.10584212495392706,-.03890083728428326,.04238866204055994,.15761090374525039,.14948261048000774,.15123269083375968,.26082790242726567,.24549601207125132,.20845042919094864,.014092314529055919,-.08154430543701509,-.12046457900197742,.19946559288633667,-.12279301434870472,.04314746533657727,-.00393594331492679,.04194450773788314,-.14662824409559153,-.16841554816441323,-.21746364722425923,-.1459359862602846,.12453643290997443,-.018239200160202453,-.09647557951641697,.09674495834816152,-.16116049604787364,-.10959035389321688,-.18407080190584757,.028717350720618054,.017940145844063823,.06771260942640141,.07042689944917004,-.11002871292121127,.09308361930716741,.015479935983498054,-.15557089262678336,-.014144367587187956,.0325121377548612,.05556774883075101,-.017472918751953406,-.029533628631708192,-.03882773130669309,-.03021232345401817,.045497082764698535,-.15437986410128418,.13419753386333874,-.20134066892161695,.06224915561780282,.02428428678083827,-.03696519035720307,.004665449800701868,.019888261193014966,-.0834679804094206,-.016566558945081397,-.08316017593013263,.004519218414108621,-.15565975294086548,-.09184237743852727],[-.06648937254575553,-.047718799252733826,-.09410351655788475,-.013599740258147358,-.04553070517144151,-.08506153834585709,-.06309353250648561,-.05382077809893387,-.1222176787662156,.04751789291790755,-.10543817119017407,-.12135417994296471,.020628638474339593,.038231355833956926,-.04339236513181432,.004422474945044738,-.03808507779541288,-.07983017408586837,-.028985978187303432,-.06550574897768958,-.08840251902141742,.007568562641850877,.014599611957773671,-.002205201743726584,.018238800652908803,.06619949508942785,.014132567520511584,-.018584781288268692,.009727516773610915,-.013372741092406291,-.13951730470879722,-.09945443912852887,.002453680221218517,.02332571755292307,.05227317987494949,-.007843378956858688,-.019449100540297075,-.03793640930232544,.006026659571149097,.040309888608414196,.06132376182771021,.12961234902069763,-.05246356331115444,-.09231662522646916,.12501372859645493,-.02351102454092214,.06869985550821425,.08117843045299462,.08163633162079212,.13284552600960509,.11443480169918706,.03113735679365959,.03957361525706285,.06420669386790767,-.02658562344144533,-.069602244432453,-.006882701260322803,-.08664220320189941,-.12201442995127351,-.08760260145312744,-.0970812896359051,-.14353417247406297,-.03240409236874564,.016664803245589305,-.028877650787150662,.04666075652467404,.1676934927534405,.08185669802196274,.1329811871153378,.15796978913910928,.1542064762948671,.235079415664451,.10845077567152385,-.02663613626038222,.10225924257045012,.07481564010539572,-.06748434569715259,.014558971240431304,-.03179694396991569,-.060628238131727054,-.09157524027700095,-.02183696621719987,-.1828633961798013,.09450167322221116,.013464938214634688,.017062888577847678,.04728200179219444,.10222149429615252,.003262680854284855,.014576952315965966,.05370026657403589,.04846835624654347,.0033060862248684986,.10214575008785104,-.07724239403128261,.018934507344396237,.0009841345168209795,.04721181791202195,-.04252362691862514,-.059478892430034694,-.043645446723720886,.0072259828467460575,-.04536439790469501,.0015257865026378006,.03394202044018976,-.06286854398915662,-.011162136740504053,-.02618150392846805,.11832542908426394,-.11894486304453102,.0030266795551997794,-.019806603799353117,-.020184767444436195,-.0019914632003974475,-.02834856785282462,-.0519362080807298,-.114547660653914,.016934758716036884,-.037824591697152236,-.01375883701059563,-.14176618903476443],[-.12379363868138007,-.02279316359625219,-.05657201620013585,-.03920111999111422,-.014505658462787643,-.14164430469555672,-.0667725258352778,-.01689199875955201,.01839534170622534,-.06025737381415314,-.11708273412158036,-.16991897990888952,.02268184312792898,-.037431787558444535,.0278362850257034,-.10391555593395135,-.02489579210400666,-.10240649559419762,.027892065133358145,.03703024029062255,.02526907686570492,-.18054736103209962,-.13783839666730963,.03215416365047865,.10446321758795965,.04211631934401537,.0035951247503783063,.06534657732969931,.022452948281901614,-.001375477826345138,-.030524202281055096,.030663561315706717,-.09877455975225044,.2112460708578492,.03192256244424359,-.03470538917349143,.03662198851388872,-.010853119077650658,-.007389034533970693,.005678291025571713,.02956678266410269,.09643352067543778,.02915776715566533,.2985689206411888,-.07919582633844692,.0002570386604299063,.030975751575185936,-.07756102771115816,.10470636569751657,.1428460407644222,.09940178110316888,-.04083658577975097,-.11174053722087644,-.0673083114110804,-.18341503352838884,.13979526699252226,-.041934973700445265,-.09286647159600744,.019653227675469925,-.0903901487415567,-.20734375167567454,-.07287790447233498,.0027432574380281405,.0061245885209975925,.0945981262283641,.15505695773274958,.041295097014746554,.006098921880011085,.20246902024512597,.18772782665817625,.14967157503073222,.29059802382753935,.1882338796896202,.15999395370095998,.11915607104783087,.05601772378459351,-.02792887117414139,.05667642719401925,.01438157734700335,-.04359233535860563,-.10690022762213068,-.06224823853094813,-.17877352623373868,-.09228816984117275,-.18022508861455536,-.06139877342060056,.0666828177706692,.09579682657519611,-.07561033691668714,.03348431078761514,.009071001729659606,.0023841350072704715,.012849690649430291,.0037371676082230965,.05650773991275465,.07182082663799436,.0741867215293506,-.02790525813071086,-.08413548818267128,.10542017164154836,.028027285290237042,.06544500747562648,.06416164108658168,.03294077475246366,.005402065754669991,.03571524120997059,.007712003967908311,-.035145762312081205,.09573050302184019,.06829334144455895,-.1743073123711078,-.053416372888697425,-.0430730980903595,-.07504208424012832,-.0026001415644313353,-.026744723242628617,-.014014546902059697,-.037147009442388884,-.029554069220702237,-.052552735398048014,-.20455065610576798],[-.08033671891432478,.0315429073280028,-.08033328455238642,-.16579677604599055,-.012897402202476056,-.10178589629685617,-.01789079587139132,-.04793217410188362,-.06957271428915822,-.013085371055274415,-.06403048933442046,-.04738918650528029,-.048253300258942214,.010624097533814846,-.08830385359970645,-.024800418220789627,-.017016233501825004,-.0731122923145789,.01795798282892851,.020031779934763197,.026270539591568495,-.10026542176987073,-.055354197675606544,-.019202819676109054,-.17886561336922624,-.047929449603121586,-.01547661115883896,-.03658093134111133,-.0013977731542055873,-.024379638918464477,-.013239317850851168,-.016219240360668748,.03345591096152817,.03128153409780385,-.11781030984741167,.08675961993407609,.09683826020183105,.0075779597881384594,.04020793008597133,.03979664174325498,-.007964327106749873,.05767522648102494,.06597316905270549,.07636867790410523,-.09433822004769502,.02758181066279606,.1767303609051717,.00802817958817817,.07973353630133304,.1471114604522918,.06691827252092541,.05033400929997261,.001155762195899003,.013615235385982936,.003014912242312588,-.0015609840824338042,.13349258506848927,-.0805265237713217,.05030675773238505,-.1374407044204264,-.07379630519336368,-.03188040097533147,-.05786700321566071,-.06521749177065808,-.06679414818176112,-.08825063794815392,.009684457243462015,-.042763801342421685,.09463793468623016,-.06620162650963077,.1355507715437378,.15162691406173393,.11508260905995207,.0912659651060293,.14083962832741773,.12798665154188912,.2063621060271425,.028581014482874013,.14481738942061018,-.06449340862870821,.14635053020889283,-.03932501773954096,-.04927780972188391,-.08022828865695547,.016307833788669575,-.0646514288965923,-.0779270812226531,-.02957415818047504,-.024416232437453507,-.1330534799520876,.13699379135763934,-.022414216362762814,-.005868709852490793,.004999194370079764,.07054027770987265,-.0003799065544888118,-.011858514238347152,.09475069188854386,.03218866406000742,-.08487470279745359,.14236331721498632,-.03552454595773424,-.025841070343849228,-.0789528097144718,.048317846092031,-.08202671916385867,.04336429450841743,.002704584477566117,-.02792065407881463,-.0719509262043451,-.09967971570584394,-.1207171044051677,.027685856470463906,-.06539657712071668,.041932056613189474,-.06347044193335785,.015317705347783588,-.0889546180036192,-.0024258796088682186,-.055981681173908476,.02502279163090345],[-.16063469325056712,-.05067950894114695,-.017602698377438247,-.0024719881205989246,.02562693678639221,.006447455809475942,.04090523226766232,-.019412107970519368,.010907705003810574,-.05700007695501437,-.16989061568410888,-.047847975558597475,.04577096045089714,.03660513100503897,-.034700480386556126,-.03881416504376744,.059925472084798384,-.04504159209742578,.004479134427212532,.010085652451881422,.017232862062283152,-.014699311623237801,-.03115852988681901,.054785786247363535,-.04501867135535772,.027938316028020466,-.050947638456247675,-.05802757432125461,-.018142649252876362,-.07346728199269882,.02976135808388572,.020105401337809463,-.03083009871677686,.008938452935937466,.009491788342519472,.03125749363817319,-.07432462189929744,.0475022932284969,-.08720288166855467,.019497480457585127,.018801723895544558,-.020783146883739074,.03740722625319719,.01202907895240941,-.08564017449754333,-.01250123023712826,-.027083881602897025,.012926155302517221,-.020812027426987748,-.14055809283539628,-.11374506591076419,.017924843458942127,-.02851651614594349,.04585868851160263,-.1311782838895033,-.17389092870879497,.053714156567446165,.032300075701893374,.057520195145752226,.05904654140586256,-.11508635724303731,.04356577639305207,.05953659426272473,.07659913376420743,.014207229570090983,-.1199427514262921,.003483041457215938,.08308252095344841,.06867294978233036,.06634459181806078,.08401256751467098,.10863093494536288,.03602168813629669,.12380137951173706,.04323657632804835,.05939964366565413,.04244530947463224,.12789338744678247,.014244324437140979,.06713624665094575,.08669910549260079,.059557262090246026,.01809855186232609,.010713420148594992,-.0005957988401005254,.06134346008396229,-.0001398559588360257,.22412677713663717,.08801367584779327,-.058215067302030736,-.0012260538656294895,.042305970671931085,.05206734479785617,.07541467470573086,.07747117691561765,.04571138261393291,.017695427073964477,-.0030658636257887804,-.02962365327526081,.12896765936351437,.04218386696081909,-.039394998979108344,-.041007428922027155,-.13390483965174424,-.04249981868450559,-.05819462525466032,-.09519971864692886,-.049990903182070265,-.03535942882078717,.15859976300873996,-.11702120905543276,.022050407195940078,.04819282357221995,-.005656504731963163,.055321599542422356,.003977112651243536,.00887914724524403,.03097294566737252,.03613661485122133,.07763665745575973,-.11747304066916951],[.0032106468813388467,.0888851727208101,.10096080668798724,.022292605842750123,-.07152545324795105,.00574314306889687,.06538100129442326,.008264090951624635,-.05229792363355525,.05506324915670348,.04213595616555499,-.002733728335111471,.061070962060578285,-.10701158010008113,-.05582795617315865,-.06503269483246488,-.011795338702579206,-.16486859585693212,.021281059707202635,.011339055054131499,.015607579889776426,-.08575044928288486,.004308712238907317,-.0028333671241141632,-.07570465195497533,-.09502363453231939,-.024443325177031752,-.004874293172570161,.05373563149718516,-.046164464204305776,-.0933941298749114,-.0894919021353083,-.07009406612481467,-.03476491199500557,-.11036613659441624,-.041699289757935284,.04855541410532404,.03731659433016587,-.009125849568234395,-.02483773607684505,-.10811625353969287,-.011196019395676729,.062000571065406324,-.030908870870323263,-.20817374216641296,.02840804114908593,-.03422871356001763,.015547093956459614,.042037769469384534,.14900049504903043,-.07782808133751604,.3334366712423407,.362683474566741,.18381088902743745,.18801989730141397,-.02676010791724115,.001051001635363081,.04098821271669377,.14354810186479433,.14720129753717756,-.22198578529791352,.31511902115816237,-.09793363128417329,-.34108764393991897,-.17922303207403625,-.07503751616248808,-.060600402883750376,-.01919095040080467,.16686302854511445,-.012989494224628011,-.34656568745617206,.1466824188567722,-.05355752905245408,-.24973215975275748,.24117194525976043,.06744086845556567,.11113519003246129,-.17424338350633975,.12201079994643065,-.09274695092708538,-.06579081793244057,.3585559632229108,.2260824611739266,-.11160227633029404,.3057247528769656,-.10906402198659501,-.157141031858704,.06839556583237981,-.04092177107811989,.0013632455963754134,.10794141319894564,.11370966065944016,.05701046666820303,-.08263447320388241,.0463277770499568,.0563969354020957,.02021230107199888,-.029754364902733033,.05446689213094416,-.01420748508089218,.09398894647188305,.04457207384512044,-.07356623266476506,-.15318361570533576,-.06121218533961417,.02671053100083461,.03645536395889876,.1387979230893424,.23979908542525458,.11099690466514582,-.12734356041026987,-.07092110761905882,-.08403148804245866,-.05291120499450527,.008027027948386938,-.04833738261890975,-.04031508739306439,-.0891092654488945,-.10259547678103018,-.091800365225333,-.21140522933050648],[-.07054189829438295,.055085384725324385,.10152834971804957,.023622039667971106,.029955712367899665,-.026059948581330213,.11064289610687274,.02448902262906564,.021970470387027496,.020456590772125735,-.04111669361053552,-.024812216615053395,.009570381328390706,-.048146399939075685,-.0415428906870009,-.004548704608621744,-.022900698211748033,-.10095741160721779,-.03265220853381959,.03709112546748977,.014636490326762966,-.010920356400900416,-.02620802388201364,-.1421492222591433,-.1328932262467217,-.0332508284486821,.005475158414530362,.0918543916074954,.03601219590470964,-.0802670470963445,-.02961991599551142,.02687273746606801,.02497615529992274,-.10102174245681092,.10923707161980402,.07065506196696225,-.10935696983924399,-.32088041870161305,-.20436936980030787,.050938666453356984,.04630596161678227,-.05262469115928802,-.10829047665507778,.09088284694126186,.1917406651566634,.12934192659574403,.11859841393368513,.26210791199518413,.4376037251205329,-.07385994715913412,-.07658367956951675,.10680813952910222,-.08997439100075179,-.06155539629137219,-.0923508416585247,.024140264345503374,.029438378546550566,-.01563817377224519,-.149531624982499,-.10876112523177132,.19097881484789375,-.04989629255693268,-.16239346086432074,.04670990819198012,-.03345249467404621,.00463106172132965,.00642168837302657,-.12476862042997607,-.03131370997821171,.004210302086046537,-.025365848313462613,.06368428162444703,.13395358129694848,-.06557813559801265,.05746392908406647,.17256882128548656,-.11823900246670159,.060333559941145434,.0037599080210207157,-.03820046216335691,.06627600448818086,.2563406900545755,-.09393503103173206,.13649945906964844,.0034794918389711334,-.07276171981231429,.029458016256965223,-.015677874033259744,.19131561225163415,-.12071257308516789,-.04939723442900703,.0771758420509144,-.030486255311673066,.04978316949894561,-.05753275286302707,.14083206176111882,.17408755180270033,.009344634962950172,-.12819205088510488,.09792179760220199,.1484657616745283,.2171978344734984,.04431560174124034,.11561949899769568,.0792765520234058,-.12048788468641375,-.04967266400627008,-.032827416046744835,.00900155383757955,-.13278686515158378,-.20143225012684127,-.012865208501911994,-.05226303626701382,-.05920262987618654,-.11792756657567573,-.18198524247067943,-.0007483837776589841,-.13713941392620788,-.061325425375407194,.019950339910709103,-.06214736571349857],[.051024887449384534,-.01922395718204893,-.009174461854633904,-.022468174999506808,.021117503507854546,-.017503811543560385,-.22284744975320528,.022524903374325514,-.002424496075792471,-.09669110978372604,-.02536087003748085,.0734346080832236,.15108583605808631,.11522226443939282,.12970385672228196,-.07892908141229386,.0971984257244444,.21130504158510516,-.24960514180766633,-.011817596006589312,.06452775261913146,-.0853478690093349,.049274344563864814,-.061577460717206725,.06300063698633242,-.04302334930536886,.06905146361996362,-.09609209741271528,-.061694173137081795,.18034406030249844,-.1666445086341438,-.05109356223869132,.06917571184956009,-.11903894138190432,-.08578984916300497,-.20469477506639042,-.037005982899997764,.03479873154153816,.06328330768692338,.1478972715952706,-.06693283066180533,.1370086179892735,.007180549013978707,-.062055289428567216,.22475761134030817,-.07322221407641237,-.08035792293619494,-.11455643304613655,.20483233186130478,.10475578834704286,.10684387147188838,-.10691746278338331,.018058380084354078,.12868991682224998,-.071026767781369,.04412991359728386,.12003274537827949,.14236952685647059,.2190537724998522,.06972281443294898,-.08245383109483935,-.10618366730381419,.07981740169235607,.17121755891446927,.11078325008253855,-.15750058347569248,-.026069272820390225,.1750146727921084,.19358075940702646,.15583357970340797,.1314463732378697,.10802544440564531,-.01580916665744024,-.06610829927750542,-.14852678093276445,-.054744536677585956,-.06521712872590539,-.026931855854101287,.017929035819714334,-.025775341056924528,-.12464418113700747,-.13001928465651194,-.23174171618582257,-.06690040758341231,-.03709918303218513,-.030813190076789343,.11264856069224632,-.03527958243203841,-.06628848394994874,-.09488551131695906,-.13366242376792553,-.07720989271153213,-.09436897350941438,.05333587816027376,.04107406795843098,-.0447150092155036,.14382963030480442,-.05498812596125935,-.0022013354694158885,.021968655062323525,.0329439993755763,-.00677692035378656,.05570262724455168,.05111435516912972,-.007148749241351409,-.050493456857222105,.11605609625221396,-.10773904713211513,-.017706549245958297,-.029669410521942108,-.16640935186157127,-.04875160020425902,-.07476982145547481,-.06622722600955352,-.10651310165824517,-.0009259202999153306,-.004589917738051818,-.04181250460220687,-.029841850511205213,.04002980807041698,-.11834854906365051],[-.1416112996871003,-.061296967431052014,.008152802197050005,.09580526115002841,-.1214127956380826,-.15258322744582525,.1445927030579454,.10275339944853681,-.07691119884141498,.010478075151826548,-.064039029125021,-.08481304352806315,.025051235358785943,.08718079453348203,-.20873218012341008,.00402987842713752,.3908263188881774,-.018288190749202606,-.19371161443949322,.21355438299293414,.19218769418470427,.051337448826137444,-.09999922975422756,.06560446225038871,-.03319662795708754,.07785737584463275,.22272869520521954,-.09660168373600628,-.13244590058883512,.22634536048380136,-.02375972162136081,-.16636289752872985,.024375919555805453,.01118486694572602,.009020288519323162,.01738778004965464,-.04308044705175586,-.06475241767687137,-.1537332549380958,.1030300818297557,-.08629596402176289,-.18748306121414288,-.08318754746590966,-.03706603563440538,-.09136333793445853,.04305649858582673,-.007622316436817565,-.07230025752872918,.1894925008401041,.09158289855115606,.09320983446495831,.07843331855262725,-.08607143419763086,-.16935758248124871,.21392186250732342,-.07688049468387215,.1402483451766991,.18838915415855717,.1152888395062736,-.16631002548138826,-.13317013948622,-.01945242561990119,.013015089132922257,.28543941281728724,.2388198484611219,.2392913757225344,-.02547786873886692,.0117330467833913,-.03132957329691152,.026405820579143084,.17735025822121503,.1538678068616058,.02287846002087459,.1542302335146502,.10953014299545374,.19864560710489487,-.10957662520495322,.004096363221989148,-.0032426759955409418,-.06495977109603226,.0023590326963191174,-.08244372846458639,-.08719294144345449,.005623424808332746,-.02409368738540575,-.12474400395578267,-.14738765659502367,-.1384339616668971,-.09473659901959969,.04347567453548735,-.022122242308695854,-.05800862114062226,.0741040946979994,.02746811155866092,-.06814597348439966,-.0863811984694129,-.0727547775413536,.01615999106259601,-.0950641791933353,-.05594427267665092,.02497006087889182,-.09215561876351584,.02048570000419307,-.0495383796436729,.06212742736945331,.010981352953109556,.0281069884335561,-.023412794627361646,-.011846497332482567,-.04146028359695411,-.12375563021141642,-.007547760161504144,-.035060694212351605,-.05438205070951038,-.1278750006993222,-.06311331594403119,-.0786704970157521,-.005247233965600208,-.027462118424014734,-.04814512084639927,-.09709510446399748],[.03545597743673724,.0128099428975251,.018180045357868893,-.0038058205145671403,-.0473391428905785,.008615195889998109,-.046294359253758216,.016896391023979114,.07340276062823946,.05785371895283696,.04680123991164366,.017572755691014366,-.023834114056900314,-.02800510880140695,-.06170353602256768,.004149251834100753,-.09993449140405691,-.07415143924934381,-.09713415783444079,-.050639923311780105,-.05191574061349387,.04633997176765096,-.1012934597135337,-.010697452082017556,-.13071299055096386,.06522431405188234,.035157185372583166,.07844423662993796,.020870147580858485,-.0830089239809709,-.041877105840284014,-.03251360922176908,-.06593863979190927,-.08137176665262073,-.042073049920613614,.11944084377042556,-.1937336181189347,-.14790789457158546,-.09187052041979342,-.02184032185490263,.047335657392996534,.06039693830283108,-.07953507862322387,-.04669220242777411,.19614607438362058,.15002481494362754,.22469015540171652,.4336980233057709,.1762683606847948,.08500299107454862,.17628001447054742,-.08979810484234299,-.10576233006915464,-.00490481488295888,-.06459170950469487,-.07650366146768013,-.048692615426703015,-.1959757066288356,-.2756929869078443,.2625475120947292,-.05687436219884044,-.10875561753818253,.2705215482381407,.2063604487272373,-.0015736429213762324,-.17758806144586672,-.0015425548641356899,.05084244703010095,.09266811280723988,.030409316616439044,-.43178847946646337,.3670160540730404,-.05915552713614603,-.34464726238122173,.10848868139611262,.10612621366138617,-.04925116048880603,.1601444515038647,-.12372249481679706,-.15509121511818685,.10449868648330295,.1609037713099512,-.14487084764912184,.43188545598260436,.11981190997739517,-.13832753618194632,.011269255569863787,-.08101222726930843,.17513077192869736,-.046057084014966006,.03371088310478956,-.01526891657845986,.1826204514940089,-.10024918536752747,-.09702107848010232,.06611097262664944,.1577502390596653,.10256401881259318,-.06527800895654612,.019464702453137826,.188208579856381,.07608051722555227,.2071145488595253,-.009713325447248497,-.06760102277029938,-.045103764368489015,-.047137892479800776,-.043049664063698055,.02993233671744614,.005679077431092652,-.17630517422062925,-.03088436961453281,-.020628025119333808,-.10197146214534561,-.11425424743932233,-.020673918969270674,-.024767884264564922,-.07442495050694051,-.055048990658499254,-.037227045102696574,-.16215779511908984],[-.07004854198277595,.08530066759995442,.0028140785761861914,.010033301281905325,.08986762359259767,.0529128072797385,-.050135511453302736,-.02228583900517109,.04530241460992952,-.030119412353457265,.021823370321703377,-.006085642883348384,.02312572806344996,.014528954043079753,-.001568379465944304,-.02799562401482144,-.16607590496950553,.07873010375424233,.03699424295397007,-.01614183061388401,.06880105102941908,-.043417173628397525,.03898116984593247,-.06654045740379662,.003103912767383826,-.01300877439285942,-.0925951215880664,.12644069271642389,.040772818622368645,-.08544840678502637,-.13739227291848727,-.13311138084893973,-.11021206177568971,.0707625808043871,.08026074315831877,-.16877857679840644,-.05206002447695942,.13425360508864773,-.10535134533195308,-.3373757349842388,-.07080829111345337,.057003657841298426,.09227991837255382,-.011615223103444766,-.05091285023944582,-.16069489160844241,-.04884780321779832,.07138912918565635,-.04363920243088329,-.13394293080575723,.3051554427853363,.2378825509835351,.20977385697294298,.12056019868772624,.252825166497261,-.0023561720800214826,-.035137059913897026,.04960472579867997,-.10416358483192441,-.14206356834350237,.25291808177088004,-.038235474676427975,-.05322667789675871,-.16540845786613148,-.014617042590940904,.02880120515663584,-.10096787597225529,.10737683950894401,.12267043383933657,-.058069637469088484,.07352676227256455,.010539954637614604,-.05168825690470079,-.07282455206762647,.11389405098260616,-.09976301394153517,-.099681076524514,-.008315492485143607,.02878172341423068,-.016643684462931133,-.10306462657645374,.17421739601581576,-.012649043926851018,.2602579418293007,.13061127474097123,-.13680683615114592,-.05587822675260603,.0986701444365247,-.1397026142526857,.029744590816758114,.07390705654095783,.1684324925668621,.08906251617397061,-.08125408387015486,.008056241239143305,.1543330950158167,.06177496919834771,-.05038568057644794,.19950920633649696,-.09557933307478758,-.0788481139143054,.06665690153364066,-.07772986657418926,-.0596875925692331,-.0023500722459320737,-.004628203808677193,.07546071468405292,.11777073451853808,.24712980105754503,-.021968024854625706,-.09377391043437706,-.011643488223564324,-.05525333705073233,-.06744624445549519,-.09785971149418887,-.06774706138183413,-.11419175135531312,-.15447612433882574,-.05391384760070791,-.07208253018814058,-.10185711157346036],[-.014135164933848525,-.08351620053083936,.02506177369695615,.07597731383733511,-.1543708822276642,-.04240467277326615,-.03452427885496658,.1318746103998901,-.018956619417625505,-.0026675236384224726,.10305833569336915,.04032989332488479,-.10561491356176617,.017365472828129225,-.1593697493161278,.032279086189098444,.10529509601866645,.07502773684291111,-.11928350111773782,.10401492407708587,.14421269322823677,.007128635131672029,-.07999230142858263,.014274946401273955,-.038729777215095025,-.1369496012325143,.186445386861957,-.06511068772461528,-.1410148340207185,.22619054701312596,-.0019016328709244301,-.04933121168492856,.014047517480666363,-.03385219568968647,-.028526407496796823,.08622983044935185,.10755614463917934,-.04037824355494923,.0401683364611443,.254423683384837,-.3499242547867164,-.11829463044440175,-.11321507805468442,-.03604040215384159,.009141892405151082,.015127629290737882,.048542079162587376,-.11506255204173602,.08169630774673198,.17250695232340318,.15415826584650585,.10510570127990954,-.21704507894326638,-.14596864247047642,.1970892398119917,-.12398828975192644,.1006649481373078,.12172147584675422,.12480836369060534,-.05598789461769488,-.2182875907330571,.08053808104260994,.23046289660391583,.3188307130696074,.20521924642268785,.008184293940090487,-.05433468049224699,-.11191127753279448,-.005694662513528959,-.04305552710584918,-.040460404096243685,.10030692443116394,-.06003655304519767,.1452733061685307,.2579075437158094,.16199120552860652,.04930945198956036,.004073909578384924,.11099001371044198,-.02069114395125136,-.11143944147535105,-.08109487565146697,-.11638633381884322,-.03895624919097286,-.1298485818109307,-.2236539925226012,-.005858846799339226,-.03608666892894484,-.07714404221145209,-.04740737716788778,.02742854885666174,.09959705342375114,.040004259955310414,-.07300667320953605,-.01763581250990936,-.07207223200520288,-.003164568505454733,-.06556721401175034,-.10478061295325353,.009440525764280297,.025831878010087357,-.03882003987257043,.027511569211728273,.0367513377238121,.0405623227423257,-.003866548091157558,.012355677864371528,-.053858176855473526,-.0006595635459506807,-.0026597994151184197,-.11895782317212758,.02214340071685932,-.046808396987253115,-.0749102218744493,.018173403762517575,-.06641276881651718,-.03312873600388673,-.12808543381027454,.005088055874176094,-.08821524190039703,-.11219840847108876],[-.036364274597361676,.05608389184762077,-.05461452843012937,.12841266882397054,.03469491513025793,-.09926883893735927,.03521836057773046,.0017050223771709963,-.053720515111571325,-.10469756632201047,-.057793517872112406,-.00795045861665619,.07907900137487663,.17475876751746433,-.07374553605560771,.14078752799492825,.1794528978247699,-.028798495109090064,-.05341395361001689,.08864249759394749,.006758819460119546,-.13125029810181102,.03217045565830174,-.07593804991299713,-.045683415387781846,.098321469102132,-.11054865427299748,-.0852516840999124,.19879712870261834,.020722064313346493,.022471477480525272,.08237578817308527,-.1157579046569217,.0328426457385551,-.0834841949715926,-.07733155072037588,-.11177282516936979,.02498427327318196,-.030403360600728728,-.029024515371594548,-.10371511880806172,.01170137824392217,.009327774798813021,.002431192271711265,.1500675723201423,-.21394797471762256,-.11853920458017891,-.0019533526563885917,.18177937076706377,.054954598440171316,.1551092512502385,.030060622456317722,-.019865094069587117,.0708509919696671,-.0004859623728606624,.17946399285467196,.3063856996663314,.146942416449439,.10067729378037348,-.07308124369958816,-.08339445345331284,-.13131133309870838,.02608780563916567,.15390102230569283,.1496570405635262,-.12432072266765236,-.055197512874001355,.23539003120249477,.23071437717412627,.1781500643390805,.032433010859872255,.08525021523699895,.100993857605809,.07603880964904731,-.013731917856005003,.0186901648513353,-.032924756112736785,-.22858777194216445,-.12675914211780165,-.11187142301820072,-.12231050055181397,-.022442794199238097,.014664186213991334,-.04970852405255431,-.03197136015018911,-.03211971771044804,.044761469162405726,-.048496783217227474,-.03589974376074885,-.05985345480378995,-.046858773572646534,-.05426850895959756,-.025596949047592216,-.05982046484213491,-.029518961263161905,.003629743164617852,-.02050906475466513,-.0015230193399059302,-.09000268059633068,-.026575598812970537,-.010828662191731439,-.00958826298559367,-.008904725696501983,.0029521526762387035,.003804200299764901,.061865649665059336,.03368981709684108,-.06606612846773154,-.02437191906735954,-.034185476570230244,-.10893624295233989,.0071168280186506665,-.09401277488927702,-.018408076739696223,-.057181782869844225,-.026056248846387006,-.0888896053651359,-.10212222492182724,-.043049828055051656,-.08505074774988258,-.026051110695555976]],lbp:[[-.027900321369488244,-.006044199455398492,-.029117905545804415,-.012327610537342652,.06185447666208187,.09567131789532429,.045971729446465374,.01553067346468753,-.012023121825700329,-.04029316502294227,-.03322173306652716,-.0035958268721606613,-.01385740637219859,-.03450377517429722,.017543175352255434,.03680790299409022,.0847701638561991,.060825220456424196,-.00935843747826113,-.04819258479124828,-.006594678414882305,-.030168034388727068,-.007336172112964571,-.04981223035149489,-.028525647622325873,-.008985143677856357,.037542932347811336,.07584997109273485,.04046362717652212,-.0202219777393636,-.010643448968773972,-.02597332435700083,-.029295410910686326,-.04958557380007504,-.016454172237658507,-.01348227645475572,-.034207328190167335,.06916911709301511,.04341473868302394,.06651463175082448,-.028013646641570675,-.002808516849433361,.01284602628352663,-.020229423320994658,.026363734996447397,-.02400313852588018,-.07141862886147399,.019799399074940063,.04796180221159682,.09039578917374613,.054870436486652595,-.015562181031975555,-.0052396854064607895,-.01338270347368932,-.0017450580356042078,.0009739701663268041,-.034245488638524155,-.029304216678874513,-.015762970169531754,.01232351078031502,.11024357683264789,.0052690576096130134,-.008271066449519145,.029191444997078354,.010481969078390848,.004867535658230967,-.004357914887196321,-.025720306996157922,-.06530772196855876,.016283145128269706,.042681321861108915,.07498524732130186,.016473247914334525,.013771073119619424,.002409271209863519,.02402373658667337,.03311091154698853,-.05687492377498366,-.02779707998033664,-.033810769624174404,.015078596551516596,.04820954520557273,.11415003087810688,-.005045314880618407,-.02453712965304819,-.00468780761366161,.030698630375551105,.03616439372074893,-.01765972731560144,-.02758989133869354,-.023775739038709096,-.0031653848755319783,.04385389272570933,.09352219252385076,-.0015598570273860773,-.019099238204545323,.04150064282791227,-.0029952551344066894,.02004832980498979,-.025805960318499716,-.014023218349180466,-.05204508933789034,-.008967676159698228,.05968818401249389,.08279211495839547,.021692573098100312,-.012200151839688603,-.004015872271331863,.04825409050791357,.005056525905835652,-.02977959275157679,-.045801516188543855,-.02221712686320438,-.02680636546639706,.08055750324533141,.11124706386872835,.024835176089393517,.013030726244874311,.026214268291071548,.009254142110422293,.054743249486413466],[-8733405863695955e-20,3744511793518819e-20,-16718852112379556e-21,2644971743018601e-20,.000264462374124046,.00018012006397465953,.0001307947973358814,-8923372716270438e-20,8777826143574648e-20,-2862970558377073e-20,.00019466262098214414,401751329527876e-19,-24470034822768327e-21,-553029953063288e-19,-946423652840641e-19,.00013992126181657828,.00025974343567526995,.00010836805931595294,-28508338861643612e-21,2061224391589761e-21,-5454650161993693e-20,.00011548126318818193,-.0001788968780262537,10106236414454163e-22,-16477072134012073e-21,-5446247916799025e-20,4605661321252204e-20,.00020886964911843303,-5986031362176236e-21,3914661702177774e-20,-.00015653886989401913,-5089337183815379e-20,8382851271535735e-20,-3925996520955967e-20,2902291352309405e-21,-5565629934778556e-20,-39745247630351005e-21,8272782580313887e-20,.0002161522182193877,.00016964902161820464,-.00015046509771197286,-3921198670451664e-20,-4180425775067442e-20,9894267364120909e-20,-37700357389545795e-21,-2177725722603708e-20,-.00010841746095995551,-.00011250296826445516,-28088672225879026e-21,.00024500271057997097,.00011698005994424145,.00013699860971772872,-.00011632402760545536,3875862751891168e-20,-5038359769517133e-20,-56491249769561463e-21,4185884009918865e-20,.00010510216324040138,-9590859027243034e-20,-8266645789113854e-20,.00014673240802820162,.00017376564896403636,-6678574946682864e-20,7611797237477933e-20,-.00016836279120163201,.00012436785920524364,2572483873684861e-20,-6233739114039019e-20,-.00015376902099116518,-2748263618047534e-20,-28455141653132252e-21,.0001245843209365903,.00015628289279003135,-24736989716003788e-21,-2091205958625747e-20,4322119151170013e-20,-10154715937089193e-21,-9984940135583913e-20,.00014166961818393338,-9975850346157812e-20,-53681414486151866e-21,24697228767074902e-21,18249672491638027e-21,.00019364243897489978,-7270865905296443e-20,3833503229743254e-20,-1941096106845841e-20,-3211589312954611e-20,5194800902761157e-20,-3828665286790579e-20,9718914766922854e-20,-.00011816184055358711,-.0001608951052632472,.00011623698043458554,4914609018877997e-20,.00010181714739832155,-14287799392848771e-21,4329186978297046e-20,-19967142031866378e-21,-17367657007066883e-21,-1958295690860596e-20,-3283281790984749e-20,-53813630280598324e-21,-56207569526993666e-21,-53241932910777154e-21,.000246150675620279,9755325673970752e-20,2184380833295408e-20,30258380552987147e-21,-536994548692854e-19,-25230762735903084e-21,-58324496095124025e-21,-4704951979198578e-20,36195180921022346e-21,-29440640435682286e-21,-6951691214569111e-20,.0001245682381541666,-35053968305372846e-21,2198652730018625e-20,-15332062580714734e-21,-23047309958091743e-21],[-3608404341198324e-20,-19306572941766697e-21,6646962740002819e-20,-6962670685985856e-20,5371768560670769e-20,863369060391736e-19,8214216469496285e-20,-8171114091498795e-20,4020583642892067e-20,784794006856715e-19,-4903957279393974e-20,57453551592964724e-21,-.00010018086975340998,-26147792389851886e-21,7119822499740576e-20,256826894427754e-19,.00011929111371736115,27860714214499385e-21,32654486739197575e-22,-5557377778477035e-20,-2404083623067446e-20,-3701581477554526e-20,-.00013308586174926723,1923769352976841e-20,-2744584321235158e-20,-1199439585908063e-20,3503221513237692e-20,9488962331498894e-20,41828095702725956e-21,-3414743435345598e-20,3169205730994438e-20,-.00012748342849396022,-15840876485394284e-21,4707381531842206e-20,-5421937970362389e-20,-2705782355519326e-20,1957250209402156e-21,-4288536254476449e-21,5178424749251176e-20,9761401759530303e-20,26206437789333403e-21,-3840723379957417e-20,-4362072745626999e-20,6128293160232842e-20,-4148454691484116e-20,-18991776069687133e-21,-38766273328664363e-21,2484202617520498e-20,1943116733871264e-20,5702208359950611e-20,3694337177818918e-20,-22802079412020948e-21,5853333390840043e-20,-3813407529522361e-20,-.00010733273350739298,-21349054282106955e-21,20212901591327992e-21,-10308234675579855e-21,-.00013178259714422685,9279272103850794e-21,-6406096160121999e-21,.00010489353656312206,-3697248644238607e-20,19205959162101743e-21,-2511990116356623e-20,6667792694283825e-21,-531731014322967e-19,15595662104549764e-21,42063861440242226e-21,-.00011208840161249227,-804760850466775e-19,8680420622040122e-20,8634418119911509e-20,2871909928729363e-20,-5315547640919859e-20,-545706460408045e-19,27740013315707968e-21,31290284801600062e-22,18897139614309187e-22,-.0001217910193286112,6684001979999701e-20,-.00010633851278423791,3585974050224726e-20,.00015372154099424235,9348210886095994e-20,-5125286229408369e-20,-11146007599487084e-21,-1974434348965201e-20,-7876897525998811e-20,-7589343500492146e-20,1.324648660373383e-7,-.00019713417520837023,-1337483475241652e-20,-3224358743243727e-20,4596303620339401e-20,13630966931021948e-22,6109082431611079e-20,-3706394435481347e-20,53774349412737815e-21,28714809252497475e-21,4306878791979218e-21,-5939860073451411e-20,9406447132680748e-20,-.00012585758504905786,5046091931880468e-20,.00013218227218045244,9039100886970575e-20,-6429921493615598e-20,6142853695939934e-20,7.239739626676775e-7,-6366839054444684e-20,4875875996353772e-20,1370601692269463e-21,-9797285675387216e-20,2971466240122016e-20,-.0001706545086223566,5.612942066759996e-7,.00013050423194534838,395126482290141e-19,-3085847469895715e-20,-8077273509681307e-20],[-.00010041713705304361,-7500442798199884e-20,7757883670955843e-20,.00015060096637672937,.00010272729354795368,-13455811985058075e-22,-8513816673568278e-20,9527795830454114e-21,-5125057113741175e-20,21937041723950335e-22,-29906736665197275e-21,-17822507535654366e-21,15920560761634173e-21,-4.261982569468692e-7,7562151950798492e-20,.0001239109032662375,-3722711977173065e-20,-51851912943837175e-21,-803596655161512e-19,765565067066483e-20,-29340700929650354e-21,821553152150125e-19,-6.016349855747852e-7,-9023135480878573e-20,-.00014677611474230284,5845918636756403e-20,.00012920305793076987,6872786215014054e-20,-5083503031854536e-20,-49057975777679064e-21,14667265166828924e-21,2286695792285548e-21,-4079314741480466e-20,3183308135739065e-20,-4613990727000831e-20,-.00013108954174256143,-4501484916721865e-21,.00013512478717948309,826930538492766e-19,3721284922523528e-20,-.00021401767748336522,12160803497153136e-21,9.952609802427875e-7,-4075124924977393e-20,-5336328559522527e-20,13589464997432535e-21,-345759529827485e-19,-8622627695634676e-20,.00012833142734719472,.00017949919377930994,-765882636792354e-19,-5944682094518802e-21,-33933589792761384e-21,590313072185069e-19,-2015941600058864e-20,68480128461272105e-22,-3508045003294022e-20,-.00010776252403311049,-600921381866161e-19,-2159187449902837e-20,.0002085712636860533,.00013308075647107918,-.0001903889494856842,-4831173646739281e-20,-44977282909152566e-21,90492245632956e-19,-53993236004005844e-21,3127550397951338e-20,-32914668064622926e-22,-.0001300625110249795,-6266645850235139e-20,54666608924943544e-21,.00011702845908493319,10892085020900236e-21,-.0001916205540711466,17055725050175042e-21,2974210675293909e-20,15551139561116503e-21,-4502371600243263e-20,-6583516855715454e-21,-.00012255723604855578,-3920737276867474e-20,5771958770709948e-20,.00026173109381898325,.00011301129674169685,-5080215699575707e-20,-.0001243869391549888,-.00011512378434027151,-3374354581756056e-20,-3513223524136323e-20,-4634590006692987e-20,15030465562238389e-21,-7910833311019355e-20,-.00013976057205664083,.00019173792465106837,.0002331493622096184,-3268225732732245e-20,-2227669270683898e-20,-.0001315957648230781,-53703861605495715e-21,4665197153655133e-21,-2972979099864076e-21,-7426673074854666e-20,-5389279737498141e-20,-1316760153250926e-20,-7308982049164525e-20,.00020790545462955686,.00015786906649726715,-6960744974618783e-20,-7326178037883428e-20,-14507107393861574e-21,13219651490949808e-21,-6593083565341155e-20,8711061818104937e-20,-6526758037324852e-20,-9101278128805738e-20,-519613620658093e-19,.0001223100464897317,.00015993077204011844,5.661236479985454e-7,-6648288869066455e-20],[-.018520133751243464,.033336491324542555,.06081972052702993,.0403234188341325,-.049047834696932316,-.06347096044284493,-.04169138568148076,-.044039608866153525,.011258972442574882,-.025539787514069722,.04310353541979861,-.028504032717188526,.021790396749209295,.04481318360580548,.0723426773739236,-.005458099176353502,-.06882073452470694,-.027963615041034923,-.043243973359288305,-.007841875469478926,.024040296276847006,-.035356451324435254,-.0008604274289066407,.009646784441390738,.029019444355814925,.0670228673130171,.0570295199495771,-.04387390211614425,-.07566337240739801,-.04686804669941795,-.018264867445612423,-.0074626900784457925,-.021262044142767906,-.008244104627304624,.0029955900266555547,-.00897292208556475,.06110079190021996,.09963612574284308,.01246798784414134,-.10296028529728725,-.05237128920245662,-.027534950783727603,-.02944553940547851,-.01443811042623852,-.020597801030636742,-.006919272938826654,-.006835391157824029,.04688884353545417,.09541942261577638,.11952740651114951,-.07175987915284258,-.09754334934777459,-.038581839090091406,-.011359375549234043,.00964142181655377,-.019377865703622918,-.027301905307660128,-.018976931848243853,-.00978742203227878,.0524944655238334,.13673694152340612,.07952283938161182,-.12204275357398138,-.08665908796412561,-.05078845296122016,-.0095706052201628,-.03186742656352511,.006540302317521961,-.013821229136400558,-.02584184447720775,.039927962074705635,.07878385751956893,.1450947970513433,.015223051588865631,-.15795321280384766,-.07811502424267372,-.03558611880595702,-.007443419814041202,-.003139865749646073,-.0037907036206188023,-.017030151899642937,-.028687071734543906,.03323129261766285,.07811298264506993,.14321815919795058,-.019232041974005604,-.14758943164396549,-.07987934896985584,-.0083758813479438,-.001332845218467535,-.006955522360264185,-.013965719003215596,-.008451714274353456,-.03063597972542298,.06256465713920223,.09748393378111853,.09839310949156199,-.07576570448441355,-.1345049705963265,.01408859066995908,-.011155752837349455,-.013224455473029723,.016020761294862018,-.009200938406151202,-.026044280280468072,-.008994262269942425,.04051199985592628,.13765939646555747,.019532039084030235,-.113685740386246,-.014674643494660689,.010068963393355071,-.0027238337107524657,-.029503771627642287,.023985321668865342,-.030691543491141608,.0007527324046454065,.01650943903238357,.052598123173995245,.09380740707326368,-.01016129896564169],[.022420101691410947,-.012639778282766856,-.05496752491430325,-.09678359828499591,-.029278797210954027,-.027140150032464422,-.009086276427296383,-.01436525543604809,-.003687496591271795,.046401379667166204,.06944892468679216,.04643760574981822,.054029149328551414,-.014720520773996864,-.06291613085606523,-.09877570015592266,-.04567817860486598,-.010326416710093567,.0033233465331775174,-.003408377595803285,.01848914529385009,.061679618222812545,.030027128801833766,.05634758692836747,.02544036002266721,-.007935323661302764,-.09041002155588418,-.1291963326158919,-.03453677250699974,-.018948700084980397,-.0010618822071395313,.013098312160546995,.03236384831317149,.050549191984487554,.031990411924285006,.050348641795340286,.055949633963116994,-.021494030157359074,-.10945006672723176,-.09734195910364446,-.06973361211604338,.00046788820631171735,.008809643251631341,.02199434250102591,.0027410119068893707,.03937245459175063,.046870579313232824,.06560087237985632,.050120908492025634,-.01648319597891807,-.12612174723616837,-.11190212135650279,-.047331697359264666,-.01726103679627998,.012596718517964785,-.007534987691347805,.003800587779043199,.051789101650355995,.056092751053536116,.08408229549261982,.07714876790536954,.01105027135906226,-.12128857542605344,-.12084191927896829,-.053176729528096434,-.02708040311428029,-.007567852199102276,-.01607121542877013,-.019007628063393803,.030912220436668407,.06118279351109974,.067857694007842,.11648893540497803,.0512344485487121,-.06204776879033164,-.12295702506362237,-.11728242791483995,-.00044317389712395395,-.0022492229405423753,-.027298027461083098,-.0037412679982248703,.018339305301497556,.014062213845781296,.04277676110368374,.12121831309988876,.04392224162907524,-.06079051210766134,-.14710686167847625,.01682921191415422,.009774321084507043,-.02655745267922931,.01411019215769007,.0015911500130474376,.0048095535457472055,.029093722335047395,.02204063036696597,.11057315594923375,.028480643798939262,-.10628170570505348,-.03590828412810325,.0133539331015953,-.002633742567859254,.0037217642215676694,.01211758091302224,-.017185123404806685,.03753956093170496,.021332506924666678,.03707666923018141,.03494429733533575,.0038125076728691906,-.011494533354137266,-.0025310349463153192,.017794319144349827,-.0060675629645619775,.006180238569289925,.02308753972166691,-.00907376454764161,.03951653694732021,.034463079883642105,.03244860091570109,.03440298478617001],[.006833664799623482,-.018868811143753335,-.05913603583224984,-.028733110863327534,-.04829617939991479,-.013674449873764477,.021589567751534984,-.011045509577009407,-9258630983010165e-20,-.01960482191389674,-.04355428178094816,-.006765420902067568,-.02068305720368354,-.03070186802345203,-.028849057542991427,-.017812677518967715,-.04503183248327566,-.060820037371985124,-.010178321392366178,.015937284977666402,-.01698509349521011,-.040648498140976104,.06280897878456403,.033289631093537754,.008634099432145863,-.010322738843516595,-.05903252336323617,-.06391120751890109,-.04096234057148166,-.027001415147463827,-.03498983294880336,-.028182307754725123,-.04299820329555072,.06917007261987672,.043703797355855584,.05282910539234762,.047980736517133415,-.06274650882720548,-.07875819635466827,-.0751276708793455,-.0671438769251954,-.06672639917254525,-.041696339372405265,-.06075015207955728,.024187583912489444,.0686409384492342,.04159853360684597,.07890656921433366,.08397942165203948,-.003826384504148673,-.12006341244852366,-.11316397468328382,-.13578926241060613,-.09303774206309338,-.09433132526637494,.03937483983702499,.0018502894554712629,.000984038845573007,.04325107519511976,.10289600250798445,.10139457516638843,.09829631821399298,.0015172138792846615,-.09135330947280887,-.1440860031190805,-.17601217218477397,.002721697853233701,.0050459512202331094,.013052368344425278,-.02268381542321192,.0018963147223881672,.058561197832169565,.10081746684744355,.1284091469146558,.08188906646407153,.020432446864236044,-.04116799001043432,-.005502874712895622,-.006594260156849684,.014863290940840906,.0037309761431811826,-.0055733957673353585,-.009515414176632847,-.008563542363006937,.01325304930824055,.04873259122927679,.06968257130273349,.04672070338900198,.017479981197113373,.013140374943216824,.00573389677019673,-.012003741816435577,.023955505761992523,-.030000657870097674,.04756330464976506,.007725961017352905,.03323790246434746,.017011399778159172,.06153392137062173,.020212718731567866,.01730531135395401,.0022897792857957105,.0016835294612028012,.0010206390840901067,.01747502317182413,-.017949934386931946,.016500074421584708,-.011803197631711164,.007137586575514963,.02011099182013329,.006651065061760698,-.0353549624782888,.027934388454869896,.0035907122794057167,-.011547179475815586,.022730843153114938,.006345055638745614,.06398828539043275,.033769980297886006,.019839431713957675,.040068406254536615],[-.09183594794624823,-.0466043876758261,-.04167687453198425,-.033930262028828845,-.03517587565580586,-.008045362654548874,-.009021658985160448,-.02121447197147619,-.06292548586295785,-.05369020745787989,-.0618588076252395,-.06937986410985425,-.02060369128265696,-.03483097193988242,-.01988932284646744,-.011468099868646962,-.009484774253505406,-.025059650809968075,-.013132163916809988,-.03437383180845529,-.02938879979144582,-.0546787384022234,-.040920673499650034,-.07902649047779237,-.03130123722693372,-.00718723412900148,.003445843327260077,-.04206580964438329,-.021031719352458608,-.001277101170823379,-.005576040960812231,-.04990522219778968,-.06783574597887165,-.025379854810453996,-.06049669189310318,-.09568385034463026,-.06689754291617617,-.06521449364129495,-.042633834046964025,-.07740133422043802,-.06922515967705593,-.04659656740582098,-.04853220277612018,-.039853128982711955,.05879198798647087,.019029808637362255,-.024286125044301457,-.03253634836244591,-.054850631234694594,-.029159852423518498,-.017140255241788596,-.025126219632764957,-.02186622142452392,.028552819914696353,.03999190078200991,.09774584592893341,.07500340541645678,.07430547425958485,.046933143764967475,.09859668083056936,.06983018450778086,.07664797155219553,.05500541911083007,.032350115276010255,.09666596274036102,.010918853676894331,.022113519271821657,.0523225365915608,-.012178262012994243,-.010455542631323735,-.01888044146641481,.004719973212097298,.0026889619208184806,.01898501972382094,-.002328472551695579,.006228653959377713,.02991543479514363,.03554504200969132,.031166989162956585,.023817329421070923,-.027070265784234368,.012571032012612495,-.010191882170487051,.03802797654560244,.02158393678645775,.004170973015102178,.005575382535277115,.01728290035888932,.012313387276719573,.014888890182775907,.0026555936507575845,.004149131184151679,.008924752394914795,-.03519222344913451,.014939222809458778,.014096628107623346,.003899474407467603,.0038988514456372763,.017266521138772535,.03424435600609853,.049763931691756066,-.005218910309326261,.026330780935207528,.0018007141228710017,.0402018419673863,.008387995416966193,.008967125049808011,.021011865402405266,.005380946747830254,.011462851184232362,-.006613398874329282,.04584134978530288,.0475920900891177,-.01138244385540027,-.0007092748000230714,.0074075056026355335,.001984700907982452,-.030303270976541313,.01851775398647603,.02621673416832952,.034368064491053237],[-.02753103743267269,-.04099006670908386,-.02696562329553056,-.012312380363310317,-.03944768652546398,-.03666523046247578,-.03744739031566407,-.022587619011761463,-.0625821001747217,-.03342350871319178,-.007637317988414916,-.033315735899947165,-.003948341269635777,-.01627351051013091,-.012992687546803472,-.03437263696625451,-.03435111582313348,-.0510893061833293,-.04626801483244626,.033800057143038305,-.007358659571581477,.019133386626946858,-.05829785436340175,-.031082988073954963,.008377250974495693,-.03707132419860096,-.023704461959529924,-.039291684655309064,-.04826391044850603,-.012347480993205387,.035773003788554164,.03715665941723243,.026570153340676375,-.037942266517026105,-.024176653665932857,-.03130706147406964,-.054205313513014206,-.06768275375230659,-.053316198087527286,-.010338522140239293,.029942502875344803,.014711352823963025,.04980563760374265,.05237150204962154,-.10703071666798925,-.04501119930425149,-.09273134834521438,-.08509334969421603,-.06361011095044078,-.009523520649299257,.04274236525114643,.043444162762555597,.04603648581621214,.02877888643752123,.04790715055446394,-.12009138239136509,-.11012922541438776,-.07879836373267819,-.01873724788103188,.031173984486382707,.09507464957619034,.060365097674145295,.0192205547976207,.01388973862340221,-.007666683391016546,.01633660664697714,-.008940205583487165,-.009503128569333559,.06964533578156246,.10401039886252086,.052459790243731555,-.026938277073398003,.004284176371855913,-.010856375573225323,.01605273011301905,-.02894886868907141,.00023294115249347658,.10367861418152627,.050069068200320935,.03685333261379678,.006503829118936898,.00554763216473721,-.001084420000763836,-.0013256537401329926,-.0055543179731149875,.04532956341916991,.006535607422749515,.0006077852420976783,.0720387039555034,.028968613954759095,.01396712994861575,-.0072270944036459395,.007223170941502544,.008856422903267491,-.012818406202984009,.0018158551557052593,-.011048631845851281,.008195206301087388,.012550415026440526,.03069656579488156,.06797584711521609,-.02220979552793179,.01737394610788519,-.005838170895901457,-.01693308811992302,-.020606794484921063,-.003704387174378517,.0029398368329221804,.009607897483483577,.004161932105397739,.0516685017960679,.003998946113622753,.031118179883235883,.026294533996712728,.01753286865508474,.025533735463243126,.015158623449280213,-.007948093099936132,.0038964542185176585,-.0053933087386399264,.021361178289641174],[.012975868416211518,.019239320212785932,.015861069262982933,-.050083983501051685,-.014830404072943748,-.0424289245308103,-.0546374523172155,-.0878762149438238,-.026658677207938124,-.015590232984336386,.03689943449493213,.024659476737796934,.0020171111101438682,.01792183479538166,-.027324028879693207,-.013180029299528148,-.05575312970217452,-.04908486985614233,-.022370349979819272,-.004286198645007025,.04158855875057531,.026714819884015438,.033049974332900536,.008952144881169272,-.017401493840176877,.007542824301934162,-.05929647739931365,-.055868974136098246,-.05766043388721309,-.04284635119162802,.014163595597386905,.01612640939175765,.045832162409125146,-.03439907801328182,.02414139532328007,-.03480844516109875,-.04034265201985267,-.0712113540832054,-.06622081461788189,-.021197302763752403,.04015424602323608,.026897565966803642,.041075505774253465,.013102896697572107,-.05480234757474079,-.03615843428627315,-.0256495795872312,-.03170930021161294,-.07192249463955766,.0018536114632540868,.06135675209286226,-.0047182623867055755,.04074858701900924,.013385521369616127,.022021140563933967,-.07134501745680569,-.032751414465768555,-.061368302060063384,-.07748401723316255,.04023545911315542,.06810335862563427,.05265230480605027,.03710998185032392,-.006950220716361566,.0099627248261238,-.013836396194806236,-.1076545781769893,-.055495023231610416,-.03496995103010396,.01121193007638921,.0718124994253257,.07345257959210601,.01148280537459053,.0046876216072186,-.018292746840584097,.034170522532356445,-.010280828511826764,-.11953193347980212,-.027928919333068614,.0391831675566509,.0547844453121025,.0583643920865288,.010347645401137313,.02438343669115889,-.03722491457626667,.018329010676908897,-.02136233863485139,.016317900816211706,-.036988609665871267,.02534543374576112,.04992907977420978,.04624311416244649,-.004960518245054349,.0034919992815497097,-.04484656903233744,.008315169342987538,-.0013347971554703852,-.03179501043076588,.008411224541488016,.04299524896058729,.010370090496971934,.032726802355203644,.01761362144315562,-.017879863195363097,.01304441155731989,.003124595073743172,.01780561320147782,-.008391127850107934,.006798248666313525,-.013767337935693395,.05600843124586649,.046170998183484704,-.006763094409893727,-.011002116865157521,.021424043858876557,.024102164398572545,.034701661533462574,.021782351862351945,-.020308680817982358,-.016830911622128797,-.00899775054774562],[-.0005328872292873488,.01181232486259727,-.0097595448326459,-.032900195859997115,-.0400553091181672,-.08766411824986632,-.05468227136762457,-.012138385460291765,.008135289535704207,.05824964665941917,.030708308006623514,-.015344928171805335,-.017993990035881716,.004920391091459728,-.013878741210342176,-.030835237792518008,-.057101218092033765,-.032671359607370866,-.0037749689752403365,.0469752598884856,.027796476796038583,.009252309128265579,-.018920714229260328,-.017057777895009705,-.0026666003038471045,-.03211973189641702,-.04497372299943663,-.05538368996902822,-.009123266518274652,.042052749594025995,.005945540402227178,.05219989282131953,.01392172979504619,-.019417768980458633,-.004212080572451191,-.01605947649722595,-.019873270609575895,-.0632108563907854,-.06190209155478818,.010727975525090354,.04880108856817372,.03739279703849559,.007267363268597712,.012809806033498544,-.0034510716108627883,.016898125070602375,-.02258964010499252,-.062363076360741024,-.06095458595932454,.018029070106769074,.07160099269491219,.03903485527346992,.02091899590499463,.016561765175755305,-.02386696149634271,-.027629495788895585,-.029461697539283106,-.05511122466510598,-.0689533243854774,-.03177643247751053,.03810851559309378,.03261623684462288,-.005689124686065222,.009569063385281198,-.019286757729714242,.006244612168707565,-.028641062503210957,-.044571632732540445,-.05624718810414903,-.03574975310289123,.07336553909199203,.0676553327913772,.026480919164869672,-.022367434017255376,-.006912534712572561,.009889915693673396,-.013395387566733363,-.05983754383467262,-.05507139597108082,-.05723468266875836,.026937252303024146,.05677800350182122,.04551233137743267,.01048979528057183,-.021873444057054492,.00025673627436038904,-.009198435994732329,-.0032360325511277127,-.0984539463761526,-.05663439057337742,.040879143636173176,.05370778846834311,.021417408905106447,.03366002971067647,-.024266957419143365,-.03972053131311021,.025845458247811957,-.003673727574750832,-.0019562811556378054,-.09207564398085624,.007153773261709066,.04823548820375423,.031953649727852425,.003989147112834171,.013123842004803394,.011507174787329752,.004859902547353662,-.028069938515581847,-.01371471244881068,.00445041420022059,.011633142638130397,.016824865792836985,.04401041904923399,.043598608889422096,.010461702283433252,-.011713831073031492,.02335003228067359,.02582450844413056,-.040208662190134595,.02222162447392509,-.018983577713146488],[-.00012902298195700823,-6203914310290437e-21,3270188625541584e-20,-31071238546384605e-21,-780123899081081e-19,-12260737746391803e-22,-9342863494700947e-21,7583394283932829e-20,1883802543940164e-20,38241995713984844e-21,-58626520388890824e-21,12707156678677667e-21,-20943050504294153e-21,7261809523898682e-20,-.00010859928908422273,-2898545662871621e-20,-.00016736251968167692,5813389186073992e-20,.00011171839620466306,17754895131873172e-21,-9451887160561584e-20,21444236751338823e-21,4686530062475956e-20,-4638768128616827e-20,-895608969877365e-20,29042840169843376e-21,-819428493777051e-19,-6123646677875594e-20,-11152819677964776e-21,.00010188996994199562,-2219289260330104e-20,-2286896213429812e-20,-.00011509542457514149,-4975805732385097e-20,-19393139160640838e-21,-9473436244123584e-20,-3080227941041269e-20,-11207452486435205e-21,-8874927481172215e-20,.0001330064684000598,-3592527180081018e-20,.00013742103255615784,-.00011808493242440599,2241467472778591e-20,23854116688329374e-21,-4532237684537477e-20,3457318004287946e-20,-46142794075512694e-21,-7534899474759271e-20,813877472354528e-19,3379655202032095e-20,8444712037840307e-20,-9027489545843093e-21,700808572933545e-19,-6146002971858106e-20,-5396774592323077e-20,22718206186092202e-21,-.00015616234415340852,-5694850548253194e-20,-7411583686896261e-20,-6348787135312256e-20,7544618472959952e-20,44606522477112776e-21,-.00010450123996736185,9575220196807177e-20,-4457919795537724e-20,9041480675917729e-20,73014201662433e-19,-6609443264028042e-20,-.00017393323793045423,.00014375964009427644,.0001411308038314421,-14170194328547159e-22,9805969688744115e-21,6525306061404236e-20,-.00013047653881412095,34993317070665386e-21,-.00010216225080474789,-8421970014757811e-20,-9702506200079787e-21,-8518306964659054e-20,-18574643331822427e-21,3863750428530015e-20,7924976063334796e-20,-9677401340536795e-20,-6275449754510574e-20,.00014663167384857193,17006970539279118e-21,5515067301717358e-21,-5171150202431564e-20,-.00014948514404445907,4859077783214705e-20,3882034565911435e-20,43569583440402574e-21,11474225398808158e-21,7315650444834551e-20,-3817228096697489e-21,-6370758050999042e-20,7265951093617107e-20,-.00010594170361082414,-6334462175296759e-20,-54025363748051725e-21,8306140391016459e-20,.00010798285789356821,-18400164812460568e-21,-4980449602800738e-20,36572621350011714e-21,-4748162217272853e-20,17943415993419156e-21,47690435629216266e-21,-12465656421243882e-21,-.0001963530594405287,248024743702141e-20,.00015032297597119496,953196115957497e-19,24341784711353828e-21,8413530791243073e-21,-10237800380508144e-21,1763976802500629e-20,-49211961308678887e-21,-64779795722128e-19],[-21081829939189364e-21,-8362088116248235e-20,-7932390148413155e-20,-5636956366645684e-20,-25225019111016402e-21,6703834026125543e-20,18979428320805604e-21,-3638366764309063e-20,6353538152980426e-20,5820117801163101e-20,41579935042042955e-21,-8024625708595318e-20,-7702454308859512e-20,8015274585669932e-20,-.00014513612413195485,-25225497027576353e-21,.00016501583478403825,26271142708690046e-21,25316005334570513e-21,-6710314871762046e-20,-11803827654757997e-21,-372807048148985e-19,52411115100495795e-22,19188281117332165e-22,-4146106415075894e-20,24848310095391263e-21,-.00010693164000688581,2629464942982779e-20,.00024742918857803727,-13795393578770743e-21,5782187472772732e-20,-6354620165343336e-20,7918485955484174e-21,-29438053918515172e-21,-51191789614749364e-21,-5229702720297184e-20,-.00015826280154122114,4470993391159778e-20,.00010006580584785707,-15725171825552758e-21,.00011394254284542574,-12176783409917694e-21,-6200618380580725e-21,16735056790493242e-21,-323212180565087e-19,7045531076459556e-20,-11204046406237695e-21,-3775925249514204e-20,-9670731384767844e-20,852803283836217e-19,.00010626012688529703,-7905952313793047e-20,8752635172308131e-20,-60072534243107534e-21,290057435677212e-20,-2231589629678437e-20,-6257719900576181e-20,5183460169959201e-20,-7817887703419856e-20,28746546782532946e-21,9119700973142172e-20,-852854351947735e-19,15505315731474678e-21,-4311767428466929e-20,51101985086758703e-21,-25995519087103932e-21,9540315959162202e-21,54456486999133005e-21,-.00012492021323487425,-8446861626216855e-20,-9000869760849206e-20,4617292956130177e-20,7131283142743387e-20,-.00011470771088624421,-14346991649049484e-21,9745371306241332e-20,-4103792364993058e-20,46700567506506845e-21,-39864452388190625e-21,28496279151997124e-21,-9066823994197191e-20,-4474333361753689e-20,28884441623257457e-21,.00010540785842768621,3850540540015733e-20,-.0001569862310024095,7333505863876388e-21,4980302809686615e-20,4761492243998699e-20,21925161837212364e-21,-6862967496700987e-20,-.00015530778840890948,-3100212558819124e-20,63968237768941e-18,-3110652125908053e-20,919348370598315e-19,26946272223389578e-21,-5428276280328463e-20,4019534042066982e-20,-29248092071432023e-21,27237642583656692e-21,9818576660706167e-20,-4238942943930724e-20,437933802041688e-19,1648143860304152e-20,9624841075065588e-20,-3311887572221084e-20,676991250226841e-20,18952909147867698e-21,2937141984699513e-20,18803983863591715e-21,-.0001918611946931155,-5361492348410202e-20,-6462519662564503e-20,6210164219470058e-20,.00011142710960054477,2759753442293722e-20,-25794525775165963e-21,6410204084775217e-21,4368327011048268e-21,-6805603078857605e-21],[8728842187032126e-20,-.00016058377648589737,42400373088111865e-21,-54107084248774395e-21,30344295765780732e-21,882360890899353e-19,.00018665417186519012,-1061795279790577e-20,4885846037776739e-20,25608835436190377e-21,-.00010410765791478177,7933387506242617e-20,.00011912193130779857,-.00017617567516805917,-.00011561862531249794,-.00015414695744926516,.00014088130997128717,.00016468128155683326,.00011507720929629026,-.00015709778676884618,.00010763417094498772,-9118060462058597e-20,-5508653999588783e-20,5947422083681987e-21,-8629107368620162e-20,-.00012420251221447246,-.00010346788082849325,935995936971781e-19,.0002625472927860578,6422276557765906e-21,7257266193700323e-20,-4033497396762134e-20,6790572474528467e-20,-293776948290119e-19,-23486357610992304e-21,-8391032420942423e-20,-.00020864486749087939,-6775559021569597e-20,.0001515708034109664,.00017533733335889368,9533289604529704e-20,-7861973811299286e-20,-19995583621156693e-21,-3961877552998566e-20,-.00010062395102337484,-4900729568497309e-20,-3336005837242979e-20,-6022956312257328e-20,-.00015274074428942797,5806326265090991e-20,.00017946285495735103,-13678668845418327e-21,-7875724604470129e-20,2392826356772957e-21,-2383934382830591e-20,-9248265240540364e-20,2977020663417606e-20,-.00014104067824765015,-48579147311816374e-21,-.00017751495448386015,.00018735013824282797,.00010606389466041302,.00010933903734035946,4326901515144788e-21,-7174356635997919e-20,7032101453665685e-20,-893257874152939e-19,-3459205239020324e-20,-.00011018808045150374,-.00019880825872508473,5.201874976688142e-7,8541038789584583e-20,.0002000466893309139,-22823030905125513e-21,-6622604266612233e-20,-14683429230855091e-21,-9083007354734884e-20,-7053308710326537e-20,-4315510408097855e-21,-6661208988538347e-20,-.00012962736237221795,-842055627210533e-19,.000190155191316624,46517997794389906e-21,6502991919084787e-20,2524813370562021e-20,4950666894367065e-20,5403438876258235e-20,-8582074360451155e-20,-9144084922746638e-20,-.0001351188219344602,-6056408504869371e-20,21193874455255248e-21,.00015210079798582028,.00017075069883851484,-9084479071910746e-20,5430280204265364e-20,.00010180348435486356,-60323087261991346e-21,-9446302123957586e-20,-3224049544122138e-20,-.00012010188056445995,-.00012404303956506726,44630583568044946e-21,5250706105822123e-20,.00017356731784019808,-7695969697162913e-21,-28710064423776577e-22,-3492564386190812e-20,6244744275625373e-20,-.00017903527875390193,-20437146053053435e-21,-.00018575226473759824,-.00012521765442334218,-2421730944221934e-20,.00014051754345432033,-8.203517133124547e-7,8747580275354105e-20,2493462166015104e-20,6484582516230675e-20,-639344425781499e-19],[3539459461619765e-20,-6807572297566275e-20,-60927166479846084e-21,-.00015316315161422248,7348022235523916e-20,975638084422803e-19,-12450172577060936e-21,-1450056866179883e-20,-739706645667415e-19,-4034038674748499e-21,-38654627032383426e-21,14379221778954175e-21,34687131743454946e-22,-.0001584469264043209,-7293108115569113e-20,-.0001177513938244723,7404759221750663e-20,.00013239001684919123,4708171521483617e-21,8909822757253993e-20,-34630714238897964e-22,5042105589911361e-20,26442780926408394e-21,8658255948354454e-21,-37941259438345476e-21,-.0001398658685568422,4014544385513852e-20,-5475776104105906e-20,2303092327018974e-20,1535566924483478e-20,-7.691516928087783e-7,26449624305313613e-21,3403617751376875e-21,3916281041301678e-20,.00015363454768414775,33088056267130406e-21,-.00016826406184210219,-.0001495230192519459,35498105323300555e-21,488793394428505e-20,4926996229755176e-20,3206760857812907e-21,6.99860966898308e-7,-57017488941165685e-21,.00012398343835970382,28576108184866222e-21,4499695773151069e-20,-7658195626030276e-20,-.00017982376102392873,7791398798695504e-20,9182050843792311e-20,20136049025466763e-21,59720574201015814e-21,-9117137830576272e-21,224210594417934e-19,9299194513786441e-20,1550468055199622e-20,7248685161027196e-20,-8918020321007324e-20,-.00025973470234600185,30931649627910485e-21,9134164132330595e-20,2313149558239025e-20,12246773344729012e-21,423692775682466e-19,5325208096997047e-20,.00012342596764605002,8766507672586937e-20,12940257800994875e-21,-8493070452110655e-20,-.00012907568039395578,-12681617590354355e-22,.0001043685768841035,.00013644771823127788,16057523568244192e-21,-4431808882615629e-20,-740650807439236e-19,8941127855649489e-20,4045965655820327e-20,47207547890018575e-22,-12596513258189557e-21,-.00010567536025424262,-9499190341778763e-20,27651247338847385e-21,7609666823792105e-20,-19995057402716343e-22,677643671833511e-19,3525467233374269e-20,32643123012973674e-21,21440245180040507e-21,38887571817136646e-21,-.00012810855432182633,-.00019782945249277595,-776629514004229e-19,.00014426765708057399,-21274432415119282e-21,.00012320100907245446,10102538176598452e-21,-1605497818817081e-20,5771493331788169e-20,-56046568401510455e-21,-17521004885695524e-21,27609299548841948e-21,-.00021782421795693563,-.00010669318029415953,.00020791845527659558,.00011483573627234234,13285234615884045e-22,3805947785653305e-20,-12194043980374991e-21,38422458442419205e-21,.00012682223060628273,-445517234718279e-19,-3696272757425234e-20,-.00019867893992770206,-7996969862225525e-20,34788527334016846e-21,.00019429872846807102,-9225825125490361e-21,-2.181413375351715e-7,7666894785413048e-20],[-.04098936140702843,-.07259292653030401,-.020477833122960813,-.02577764470512875,.02239764804642516,.0030979965185144592,-.025475041444791693,.0014983432415610135,.013473198352794237,.015343737042018784,.013699123091301883,-.042585561573300484,-.04138694292044983,-.08863283586901946,-.05801849461561919,.015073506060712692,.003959174481256907,-.0024599044551481515,.01853234287806428,-.007252089677180176,.039351067096824496,-.010583759958094123,.03165900899445179,.004945997889558851,-.023228219899002735,-.09892235152941961,-.0837522798385647,-.03839268248055243,-.008434337000713082,.007672852300525959,.04878518659190467,.01710432507390263,.02075449961475878,.04911231578276837,.05763971849416781,.019838597096741267,-.002711097174265778,-.10015290955737972,-.1320216915887979,-.062977989737249,.02582360220580037,.01587980808283511,.023625409629796024,-.0046384308741842795,.02611406055078139,.09131915361659512,.15889496663514957,.07789102355143179,.09577507429885068,-.12439872197360356,-.1416053696046287,-.07550986156352214,-.02844030015622347,.021985439206375433,.015548610852228811,-.002388905870217735,.03488803395378694,.07107345826311753,.14647023139119036,.20034906031914418,.16005422621447674,-.08676011804338055,-.13617760143493793,-.015931290696152286,.005887974985659461,.008443989529487148,-.09581603348754476,-.06971296020482845,-.017803306714053436,.027850106601549955,.099568377990366,.185760283063699,.10917191640951349,-.06436537698162387,-.05321633140925054,-.029502881465266584,-.009862263178754077,-.10680613413351928,-.14825732796410135,-.113470811766606,-.06406135390230733,.0027156666630031856,.0918096329652617,.11261031536840553,.04378350181609904,-.0270698877015552,-.022521165339643115,-.010411461095651862,-.06242949060253991,-.07846292269580729,-.09912668450796194,-.0979319005853432,-.053658802519860244,.02002686052339145,.09746751189691709,.04526915563779382,3498289214537431e-20,.0009620569309527205,-.004204666656807007,.012970749419225602,-.01837649647943919,-.044256889054004316,-.0761504339983559,-.03979031194724934,-.03211080346166089,.060508684856887124,.0660252431275845,.04369638966356963,-.006241143438045035,.0065600929269337555,.07087669200430785,.055992154723297945,.017986548813861334,-.003824158105117728,.011310267599780391,-.010487970918616498,.020902380949651758,-.002544688736208306,.05900443040473491,-.013398145289176891,.003544342872007042],[.030346036175779943,.006072929172062355,-.039343234393949156,.015518327303993051,.026091031799842485,.05707488929867742,-.007681010104796868,-.008070924885863945,.016419173022353517,.0028420019312691766,-.013730810525757281,-.01952233856199849,-.016220877105556714,.014953867372257727,-.03402190869608687,-.013762279640316323,.024752967636295586,.039530055629976274,.004583286407384743,.00837650620964974,.036851407285838494,.055084117544986336,-.05697557854410243,-.029317707997872627,-.02559469724371854,-.0209462093989107,-.05804040682240884,-.013577428197324267,-.010020990828990349,-.0018451035217218088,.02002541977978445,-.007591748940904006,.01563101192714106,-.08266561936957596,-.08055144866454374,-.05044050942046925,-.07277700604354,-.06263641593018619,-.07128881460152567,-.04426927230393782,-.019290397771040843,-.0006364356599073417,.035648090161244705,.008066556690149287,-.06997303230616364,-.07240578702187785,-.06281316159223141,-.06085909934186933,-.10296927011026999,-.07472683729892657,-.07715100410356593,-.08963211742325006,-.06020756186961184,-.036005373570064905,.030580152351007542,.018237066287994937,.02174043579052555,.026790712318865414,.07839467900542839,.07977445389185939,.04884459695304787,-.011284404445060854,-.04289265591912322,-.06046929142112568,-.07771702221123683,-.04176847682913615,.11044800435479082,.08445303318981631,.05871665847568938,.11796990936830279,.15001483899962584,.1468226515192372,.13948544434843163,.07190053553504941,.02295158262339964,-.03757300941076615,-.06449726751612082,.10514145685057832,.014295615161356343,.04794627645478916,-.018432919080500723,-.004860316065150354,.039432239140444,.09092544302484268,.07527813236641887,.08117065522466874,.007383367216880286,.00032987076164094076,.02281444999829907,-.008682768064850164,-.04852118304640604,-.01910874794430977,-.06556074583054006,-.08018299151836861,.0032263375068990836,-.0009965854756597125,.05242413573800021,.022385739723059378,.03912049292203021,-.031163626046383244,-.06393958956771652,-.07911716509669843,-.07891704049597995,-.0588805208288222,-.10110781394222774,-.05114064572351204,.01488413557237507,-.014461306825219532,.03609161945428291,.03986593513944536,-.02862511720937755,.02387850967371026,-.02520581913037356,-.023467115929623323,-.07618759848175716,-.04023340673218248,-.05199566090362245,-.04046833647674131,-.026854374302776318,.02699990498988876,.0702555834549778],[-.002803003215468877,.04075890489006727,4176786332854565e-21,.02026013854644316,-.0059647140070275915,.05181012213641132,.02634646200863381,.012264698464511966,-.010147315743495306,-.03354793984589477,-.019732136738390867,-.002257760378232977,-.0162619803111506,-.01731409933017604,.014344127941805743,.03797040839495286,-.01383697548566333,.016742082124341348,-.03012320080717837,-.027735921784170836,-.002268324918850477,-.01917565837724932,-.01569341160239931,.013113857326043843,-.036320774018331614,-.06304319241359191,.004961448697348825,-.03680462956903752,-.037438386219278155,-.023603350699011483,-.0072298451341650145,-.05986851568610403,-.041755559167967415,-.03410396676411325,-.03769538328404935,-.019865628782664548,-.037320716015948836,-.02961465787379973,-.062378820692505714,-.07772622741030955,-.06433026092017383,-.06762742484498561,-.06691133639170264,-.051813667955715265,-.06404442793239708,-.040497690544443715,-.068570648963838,-.06478169154823443,-.07746520430507217,-.059300747266943024,-.04572912163676844,-.03397331700931669,-.014236662779295712,-.005140367998130205,-.015748032805591644,-.12090686617751288,-.11592358261333773,-.04603582196444924,-.026967258372596087,-.0013908674792289851,.07081445649809462,.06929190049980583,.07181659013788588,.07460517208313797,.09541452418967944,.10748657093841106,-.09599583700976712,-.004097579463900171,.04530638627677719,.0755543958699812,.11845891486270177,.08477604080057179,.08426398723503584,.10125452225992537,.07397738859348121,.080838313693574,.05421147663810812,.020058468071589643,.0718773969832042,.07361403959884011,.09026996491612302,.04795591471093459,.0431470975174203,-.0011985739101095343,-.013094268546257911,-.030256147604258272,-.009536691838955792,.016708576234233975,.06114245873571649,.08121745111260578,.010385841248297306,.03777759541528004,-.018148165795748364,-.025190339821193043,-.04777179689436069,-.06185527688971809,-.05365271254041373,-.051551732136435637,-.03437423223016557,.019703032705119687,.04021466487620792,.009446263618920375,-.022748100395121915,.006918036677643638,-.015913447714255638,-.02702812779628725,-.01432931266945543,-.027715089020423824,-.062068298599209024,-.06201486380850502,-.021183572775251798,-.039143122374945834,.022829943433131737,.003203890994971162,.00034299573515796187,-.012230615709466378,-.00321123286886877,-.025262706824797615,-.0022994727249915775,-.027050395247399217,-.03954942076316456],[.06522093747547308,.025071384298351367,.019912107113077518,.01931289301864427,.02245659932841622,.038123430189094545,.0055996572848110715,-.012446229774174283,-.020127115717722095,-.01960839712326881,-.05192039153735018,-.003802076622644604,.02754021132514629,-.0313942592920469,-.018499328737516675,-.028503473075545686,.010984204362234747,-.0021914954953508982,-.019643099824274573,-.042421207289507476,-.08150780546124696,-.07224388933146775,-.0017841827891482871,-.01089297304793769,-.009480015803344372,-.004107064135008169,-.031710787864217896,-.02531694336802308,-.04890459852333841,-.03909793761645401,-.06626651885000522,-.05717044208892212,-.12354156377380103,.0019260014740339094,.010454913576309843,-.047326416677592284,-.01495404872484582,-.014952122468299345,-.06039889069893172,-.05148188990929769,-.05699870752835452,-.05627894012903209,-.00825317615090031,-.00472800146630642,-.02488926751653961,-.04632461441132044,-.027070396350913073,-.03551136665508927,-.04156202778006492,-.0424110717471443,-.058674084084012826,.022288023763534795,.04256448256964385,.09151065178139976,.10752994926292046,-.02319027683008374,-.016616935256775666,-.083807089690502,-.0582594888081729,-.07074223249458611,.025573920295602542,.11913595016311473,.12549016018794748,.12135882291557651,.11708353956070845,.08642271793529142,-.000306674038066352,-.03844014599380597,-.04940532140895877,-.09297544388190015,-.03284956400921088,.10352519252428011,.1495830558840523,.08608357621580195,.03583095834071556,.024742932326467473,.036726117488561486,-.002442216116411461,.00040112728912663695,-.05251865968907733,-.044570270280448174,-.034618820381680696,.04981854990282133,.002454808154399357,.026915963481285166,.00043142435222983527,.012653778112578708,-.051855646667650884,.030046740129158762,.000616408216881123,-.031155023683595174,-.04432306874670301,.004537317614961289,-.0071958412445839864,.0063657993250404304,.018539257939901993,-.03033092031256785,-.03177366654254281,-.008822813246182906,-.015163459489751625,-.058175569457230444,-.00401833097698279,.018491731360507427,.002289811628686786,-.025630328318981953,-.03189676612438975,.020493167081276655,-.006086677203911053,.007919476679841025,-.020676688933417536,-.03162466098372743,-.02835372690119846,-.05878024973072718,.016740816129427953,.026376082128799203,.01589123674459242,.048440426175221846,-.003250090563076194,.0044459428797915534,-.0166556712813878,.009649552481872083],[.03871219417843989,.012490504356042306,.025251907017849726,-.0006342900379393557,.03592838646617745,.023762703799074122,.040774989926937774,-.02341481156439147,-.048639833740482294,-.050012993742178324,-.06442923154764985,.021779562035487404,.04986151946122798,-.018288852383901953,.03588998869912234,.020066404067603016,.04956314226250248,.007752233750127707,-.055571126615815716,-.06851083559618402,-.057716925501775554,-.0349005804130335,.021956366706459132,.035414544709005326,.026124404566658876,.0017094541674472288,.034316099935257596,-.027522376974677576,-.09928902136993129,-.0726994240994115,-.04003368220141704,-.0025525135698269523,-.002910098811699801,.02151519986852707,.040227070486607036,.03647640760109133,.031515192940717834,-.008661570449345884,-.13841198674869082,-.1145851936176304,.010450235100959555,-.0035535572148689162,.07125327688639957,.042723571343138186,.009341658700365442,-.012870114338850977,.03254557667078638,-.0156254021203472,-.1166589992557556,-.14109288836317121,.06734840271729552,.0760931813416596,.11561514970947856,.05022549520576293,.04212426995007988,.02144480828358869,-.008478265810372282,-.012099681800612577,-.03095626225613321,-.11121071517451651,.08286092692880892,.14790102050186232,.10500772996280258,.04674843638997146,.019903102032436296,.030520336087391395,.018229439697434548,-.010089005330986278,.001308077365090185,-.04636617623437089,.044459976275507344,.10593917475179987,.07951875578711416,.019359952078597017,-.005288773156741304,-.0722621162644943,-.06310662779112301,-.003266660446347769,.0318601656444429,.01864598039125592,-.012064807733087081,.08495823890756518,.04802342664859964,.005601477454409115,-.07119535495038484,-.07033323539772537,-.10990854275232402,-.1177120894307484,.019377435122344126,.02670672888875142,.07358386241576796,.0541532780227323,.025448394821031554,.0040382013610863465,-.05467886328326996,-.0899329958233211,-.07199641702193692,-.06277029849943339,-.06522587546471413,.03839617104707502,.016151719170832315,.027022919493260036,.08290421500236499,.047186912351547414,-.0007951610725080438,-.09589103202259053,-.04946194943734483,-.07230469437919085,-.011679870201172761,-.03019370550552411,.014156325508013962,.05085959729622467,.03918995516095654,.061498796624547394,.022736333947648714,.015951433136659473,.015999485485705945,-.043222982001008485,-.024248450132379966,.040111753431796314,.06052477324917584],[.00247687597552753,.023654123616632314,.006590479076578087,.029715029129248505,.016981592598277626,.035002323306005056,.015060065696298572,.002377540646737661,.015462766613147202,.008250822853533138,.04520421189152657,.02909906297104954,.03737107394676825,.04854671720538914,.03967454651675656,.025867829117725033,.014831551938788254,-.007582094087609806,-.020930287111501134,-.032499439495609725,-.0018020463301167342,.04393796707879063,.028725701880571525,.0010439011442610552,.04258810822266976,.017847587041736074,.002279834822021626,-.004587349161816804,-.008842237437494037,-.040477333059008636,-.08483317919906787,-.07525359276823704,-.043639965989430526,.04883111043556526,.031624229858512876,.012489522167499711,-.04444740416264285,-.02379386136756309,-.09439256686884244,-.07203235960877619,-.0647083446116518,-.0642167118343325,-.11171103897265756,-.09873003053553736,.03479092404599714,-.006269626535213395,-.037764001610176845,-.06603160021869137,-.08565484948794656,-.05646144630012521,-.06782619165430687,-.06058757075258735,-.06035941463931936,-.0751011736397387,-.11166068555690369,-.04968264301191692,-.03223836180949827,-.08648433157942526,-.05427449076243909,.010712582267959646,.05148433045951871,.0727373081995406,.0661740108703821,.04705250427849877,.01457256785498192,-.037236312562938446,-.0389263538948529,-.04589284087910635,.010370006985215077,.11284308997633244,.12481359471847972,.11597764568809359,.11519355137781671,.11439984797014933,.11282552440063413,.07265236792149134,.0696330416762262,.01208106094914059,-.012907318992784259,.0781969520967658,.0848424334686746,.025448732267674412,.03331830161640717,-.0032466624596392407,-.0007791600472203397,.019237134849348372,.04046772922000219,.08182504059766227,.03217300859253294,.007224645957833578,.035145895408776745,.032218364331414756,-.004156953045711051,-.032283733334807226,-.04806381353222544,-.03630798056499317,-.008879632854209354,-.05064778668384444,-.00020999998824228205,.029706187708307435,.03209911489628096,.007789994154167285,-.005991216818439102,-.037977889970615276,-.03294263269483791,-.07482792910608133,-.08659379822525845,-.07029461615119986,-.021597866813346515,-.034674752012622045,.03914951845018877,.016074895570088787,.007248605861354326,-.021666046904459044,-.015742207167039945,-.05712862549021637,-.06982585777437281,-.04304681823818908,-.00021744057288860825,.0031613995838588056,-.005483972769325985],[.007858409180958724,.010417579110589992,.0158263555713989,.027799757333554075,.03750430163420848,.021889790101079235,.038404904299075615,.03382366229288322,-.01511054590043489,.020273256963547384,.03294300250767965,-.001252367162650564,-.020725236647321815,-.012427007685905524,.015267851215295052,.015474020823992577,.021471502743067288,.031768288951377815,.012185070684608057,.0036406626398330366,-.0025327193617110944,.007885357440556288,-.042335704666714866,-.05668345383684903,-.026575160075451746,-.028598384095741225,-.04265775277516078,-.04142391517902475,-.036798184223634865,-.03826280791510171,.001902666130327288,.0093814405628216,.008471594548958614,-.04503818265497045,-.07579175364122971,-.05937521946842811,-.06183166531196126,-.043298853126234195,-.04380078136584589,-.05161784216678796,-.06561103766772261,-.047247281088380666,-.05796831398610836,-.009692699740570312,-.0009781358811463553,-.0011437786713959204,-.03286534603195844,-.03543397020422262,-.07232893380021267,-.04023608262418721,-.06694954641402831,-.08212638803345869,-.06280385347893304,-.08149158305684044,-.06753217902943902,.09455840560652598,.05016039148008439,.08567883686723025,.04632336862514813,.055992607831429286,.0489119532211901,.031194793059301035,-.002645350709232691,-.04034357688424243,-.0970325935155229,-.1003870758516373,.0739805809466271,.04468078911838225,.04952955172182877,.11289040045432666,.07705264098090751,.08763910565106886,.09066077003110973,.08397777948088223,.0640490072177986,.02432712562725322,-.042320375772835706,-.002138881880432028,.005953890630444381,.0021758658789993446,-.009358776674297811,.02428998075376837,.02607694341280449,.07877278332411712,.09198220273244762,.06436138552891969,.08198413068027004,.02864633165778327,-.04260462618725064,-.03965930144868732,-.023542389520778348,-.044811266972915445,-.03704741703987133,-.027700762351676803,.003355014276908888,-.013100169049559234,.05927068198924744,.0462821833376071,.08735480009026986,-.05379015249494169,-.05215554204399524,-.05679486910467426,-.021944281329168733,-.031143592336575283,-.0324088397693377,-.013571281557370071,-.031193974331133204,-.024377807778057786,.02914875701245999,.030672698641111273,-.022977914200020516,-.011077006000089942,-.005511238658071696,-.016195245042137235,-.010223061193558224,-.0017693869577628148,-.016982213231712635,.023120107237225143,-.004644894416102455,-.005181666051378653,-.022733320422779334],[-.009042111480020307,.017452648291795582,-.01783182421034299,-.0037291040947286724,.03906496999831048,.02317336140566292,.017934159994940135,.01309845554867919,.045167700869445056,.04219440502524552,.040022284994525766,-.1296495384639129,-.09869597929559121,-.05779170191526593,-.036039163287215216,-.028193969502811,-.00542516367252327,-.006951249012165914,.020700356583589666,-.02765883917552498,.015383455695099066,.029921130490476885,-.10604073203109947,-.13745243530604678,-.10216024104657673,-.08204456097798316,-.06254235926555962,-.00602663143483341,-.03485631054184798,-.019904486880246444,.00031967817856416725,-.03238967420670709,.02439765120257871,.10508921937209786,-.013046874416846273,-.07774395531312853,-.12222903080184096,-.11250348266352571,-.07449642419639521,-.05669735065660934,-.041103845003295766,-.036650131470619435,-.010932005853568957,-.016449841939567944,.1562234845656341,.09672664230741305,.05404169057430391,-.0030989655565997892,-.046208134463465035,-.06592349335322237,-.06557891740309915,-.05950706712768644,.00880627987998698,-.037442732388913005,-.017902872235218317,.0929562185397642,.14428628109803446,.1546096989661699,.1048812845736138,.07465009416124645,.031358758882895854,-.04452428857515188,-.028002592637281058,-.07428550653439359,-.017952472566438823,-.023442772221301825,.0006703656583408046,.0482564517826233,.06411237793532709,.12605612565913182,.11963258828536688,.10488112893887513,.03367932768563389,-.06098033908627067,-.04366390205424773,-.0236172411193771,.010588509810459399,-.042280794649115334,-.02090390603937928,.004245459603364268,-.00023866951219775334,.03685527074938692,.06422611650730096,.058946958099653515,-.001571395041331261,-.009570744787560717,-.013147541392034126,.01220983149141934,-.05139007557791643,-.05520567262249433,-.03365107683439328,-.030728487231012208,-.006939575932425689,-.011575545867157727,.007368596506356143,.0697471456037057,-.01352110025060841,.006596012723473543,-.01952537196860976,-.017643912421121496,-.03698320858742948,-.032526065041563926,-.05954232866304939,-.021432558932001102,-.03620802826342076,.0008277217823815042,.048327127751533125,.05795080737741723,.00157328627865716,.0068908384829364025,.04482168429267052,-.0029221677687706754,.001555929650738838,.015954469458610742,-.025599595653019336,.04782729598618077,.006228894973325669,.02126713164270998,.0570357351754727,.018964085848628326,-.042249457791622765],[.08256740827572094,.055832613072691675,.03765639009108503,-.025000895212346053,-.028412812812500174,-.05016161909385189,-.06410879812322645,-.08532277377194247,-.01353721252260974,.013708942774828675,.018599027844067556,.07534748503062028,.06255934305524692,-.03128511392926582,-.042802981085729774,-.03142942071154579,-.07382676341608124,-.02422165797383803,.007641260114981077,.024211901395114054,-.059471082878315346,-.030880411920166984,.06796700954618969,.04082287464016688,.010013710465744799,-.07623822041053195,-.06820001414613261,-.03367028790032036,.0026545839293711116,-.0464833643306049,-.013765405332683583,-.027634708597073385,-.06182622302046557,.031594341220290985,.021366233937152687,-.013394045470305607,-.09475775644966944,-.04911896674688537,-.04555247808044965,-9110634761277069e-20,.007938346419856593,.011254760704320157,-.006576707889103077,-.047661893009333725,.04444616608719597,-.0009320642125219408,-.009539060421327156,-.05073285896493765,-.08683128061656673,.03252627969419809,.09270170728992475,.009408379888223123,-.023484064976748834,.00929344497650073,.02279135558872019,.03900280647827911,-.008609839726177404,-.034767835308972636,-.031883916942249346,.06642867522546965,.15091207989976943,.13215693372891743,-.05920084309238203,-.13695949641012162,.048045367981310844,.09872137352439717,.01240735426146681,.015256770812382667,.052010168560839946,.10320819909661162,.04245915005083583,.08872439999155989,.068938951136573,.01700823743506874,-.08531752502889244,-.018126337068159522,.1151877033509508,-.02501683859550265,.019451431676204792,.022494547242750674,.05260028373892524,.03386730293679828,.032216970357249304,.059359611168712786,.014140731647494846,-.025091371779791677,-.026683396681205493,.04095832858134641,-.050855525747530585,.004932375448121732,-.0004981671256791605,.0165528823762962,-.005958023826024899,.045306611135122,.0578976399561205,.04272605270247874,-.0017969310686201884,-.014382085486339657,-.037002141588783934,.02511069814608676,-.00016281815464665172,.02451544657586113,.02125875868430828,.02440056095349824,.036876396850616146,.03942292609844728,.040371042135130944,-.0009256230177198815,-.005262877919380821,.00932704972850165,-.011241199658509435,.0019912846764176652,-.025004542955752537,-.005608583586459839,.014352464943112106,.050873140541023154,.10004246984101947,.06468124913941524,.04619569563666195,.06930063028653265,.02951032763533087],[.031888415387708945,.017285328668591005,.042744527705477556,.03122774045587115,.025513813891834124,.023253690464280233,.017244825416223117,.009114399338920935,.06125478783517867,.028607811797974354,-.017058017936675305,.03126025001137327,-.02279872758399017,-.027837704295921042,-.03193752291907209,-.007942659510187761,.002278187485560282,-.002979051839869534,.014262174386869931,-.011888449098713878,.10179674598415357,.017490236098508173,-.02165996876082555,-.029500462768637277,-.017844168428477268,-.006592543678926418,-.055317992740958985,-.009073270159867055,.00041946738785142434,-.05649264369093172,-.07320182771948931,-.04664521751707891,.06208186916430718,-.03133901253116169,-.0654095728502457,-.02625974376094732,-.028514182658014458,.010511476228221489,.02613935213955948,.03308089327842027,.010410015030915412,.008359399473395174,-.06664840960045965,-.061126901668253825,-.0606603817088827,-.029413222816308055,-.014383044755888905,-.0611128396493715,-.086766346192871,-.11103482776376336,-.09555898737155176,-.06964802327565453,-.04442774742720511,.025755829147256798,.006956014842130313,-.0815876044161628,-.10519239832835522,-.07133578641876726,.0005704173411741065,.01381305071587418,.02671011460828427,.04981220055097216,.09358191801031149,-.021925041934278508,-.05549766034276781,.006515013373986245,-.05455411923442439,.00830487062795153,.13185407364756932,.1221341345788353,.011707416843401106,-.02590715389907114,-.02481974770322092,.0540108737334904,.13634127194350476,.1239665593358083,-.009468415295336208,.08236026367919669,.12981624266421773,.03824468200113923,-.028862798409555725,-.012401760304334902,-.029028735431258695,.006099184288709073,-.004029723086668271,-.04688451714216009,-.0033330755921011992,.05532623880862575,.1303088292739335,.01446714058473307,-.05952675673155153,-.024457345180703714,-.0011606998001983324,.049886658808720834,-.021188637788723458,.005342293132243284,.019766544177656983,-.07505148675119032,.0555814059557561,.11043646644803568,.07196493868758001,-.09066329859838264,-.035117192369403236,.04806949037357433,.04113355205281519,.08349384113646205,.02911080012345353,.0312666151706631,-.03950797252389278,.02749066244564201,.09228405522757988,.06669838963281167,.004677073871221618,-.057627559498254564,.03584209191212352,.08267768517946922,.09733185489825846,.05068201651983458,-.010180548751966102,-.03310063083308393,.006005322792119457],[-.017680769530502086,.005057535982528047,.02521583578435982,-.005025833247320491,-.05703325304593862,-.052107314429079093,-.045596915669796345,-.00665024670919076,-.00408902585366247,-.003602657066238215,.05426453374924283,-.04105475453763187,-.0014472636395811613,.03459697460655711,.06083562097062121,.029247288961593898,-.07214035288481521,-.07967275019313143,.006394394745092916,-.0007507875839106309,-.002417122766177648,.00014142207761613443,-.07190065738260579,-.07130997769260232,-.07094676785308972,-.033682470049253795,.059045673260628345,.09858933856538961,-.001245384846723381,-.01886197406327271,.0703849625383901,-.0038593266123758303,-.035716458393740325,-.028903911986307623,.02216913541780052,-.005637983325335064,.015211997809574936,-.07780142651874718,-.029803914664715693,.0194618063722383,.0668760222428867,.0743470403902915,.075531131612437,-.0473549174409698,.03823130423494889,-.014507685304722101,-.08843527849921418,-.10062367804515003,.06734349922220056,.024924241317476573,-.09254619573503409,-.014997924286342293,.027950457247449642,.06606376845151182,.021890400355813813,.13086032772885903,.09032515848711939,-.05134374305948901,-.10634460607642149,.04157715486030453,.18956400875634438,.15361519295302384,-.11769518397502723,-.06393113140682108,.0537654171830164,.012820707173704704,.167023415641573,.09188345945149638,.04606406687246399,.025159894360370735,.0711251036155198,.03542303599910505,-.002838856695844709,-.06288134460513693,-.07852379046310881,.006048894202759295,.03132431227969934,.057799944092782066,.035258713861660206,-.015525519214079311,-.05149067842695848,-.07099843868427236,-.08833954892641027,-.06325839638208344,.0005815794495872273,-.016398858534322075,.06347204287248717,.05944812998567754,-.07202298014311552,-.020115104672309998,.019270115460302426,.04304460819968159,.00016106438180805288,.009691999561702698,.00685563839782885,.04938094646020125,-.004523537998711136,.0329779425641062,.0312528099407361,.056899719241569,.02826264920751151,.03515237551913688,.03546188426225892,.03985204747464501,.019659199103084442,.03395829906030764,-.019839700512063366,.05903682414285811,.009726012486880643,-.014938126441501644,.019066829899126298,.07068190922078597,.06710229359092283,.06901299259461469,.010044929257701042,-.006389311428403606,.005095615442864804,-.04581782964624811,.058780525393498484,.015058802906741012,.009386870299746053],[-.0592474186075294,.00214326915846505,.003053764423463598,.00585551031972327,-.08563021705558058,-.07175649349554311,-.04245030597116317,-.04268914713843119,-.011110262401512888,-.007940533921773962,.02707902272566813,-.027546655085047056,.039877525719018654,-.032474059766464794,-.046922091139332156,.03361772181552276,-.0342878025687481,-.043372117290399935,.0416139780456222,-.0430951183316134,-.010110834614272646,.022894839712910425,.07538660993415952,.009212959623099537,-.08827817592255309,.03739765963534586,-.002226306674960765,.009924507523420757,-.020030347390232447,.05681115019836551,.007392839820689723,-.0781863011094375,-.008146425982962759,.07920352761263033,-.04919398403505887,-.10782004673639323,-.04109395354819578,.03688301343713144,.03766947356805052,.013220385631969353,.05340788816283997,-.02673360675351314,-.12858397516523337,.02107535533459986,.12903555239275516,.017326720125844478,-.14567221562979574,-.08247212156657831,.05895693874970116,.11485586936136895,.1285955897812025,.09551855274274643,-.061066124259299644,-.0067976743155836045,.11055046294774236,.11155870568673898,.11891259668944891,.017851730403568578,.0006281699962116943,-.005602233426512779,.07762480622394381,.060406967434973535,.059516586297504614,.027001848941292254,-.04441219877188887,-.02565017828887654,.06836333345927718,.06302056436681892,.05944449745877395,.010334144455870962,.042110605756137134,.0154145426818727,.0023343740302978946,-.02706276577100951,-.053547005048963876,.02449922475139186,-.05226763051205905,.08885699312143107,.02355792938393257,-.013779427079024981,-.02357916164851793,-.06275519086456116,-.07823410171510638,-.04428664124215103,-.05597874471510085,.0321553391123421,.05440069299288364,.04822961003119705,.045141190902855795,.03870479897678619,.08591139091910995,.004357866690440651,.012844338732011615,.010882943225392516,.028932161983739102,.06484149431471856,.00831504971815256,.028736590709835023,.052023311678142746,.03341405244842211,-.0015520060820524428,.04260668744673382,.022301779226108837,.022174303630313905,-.01943573783712184,-.0005039577329179201,-.00521398221219091,.03017407278550048,-.004640982451910802,.04975585443539535,.004832172486069264,.0526257454470927,-.004346985676271432,.024475775577038505,-.001455068923858334,.0025587670842842497,.02335062238389126,.0007594542019464037,.06706131243941268,.06672006490669222,-.036179831263457696],[-.05711166871452407,-.031888560395926815,-.020364646131771198,.0031373605136144483,.013436737732060224,.005951255332585495,.008022136225053373,-.0033221874193103476,-.004827846253580151,-.026659247927967398,-.06278317555424762,-.0769672767706773,-.033637293299445814,.026369958665574775,.01389980731687723,.04192095366654633,.050480088450960914,.04006195238019991,.04456452813083517,.006994111774792464,.03093737186111541,-.006243629054118058,-.04632090876103635,.011237053256609078,.03625881873734127,.008296320294636228,-.1031515218693514,-.1297840088264633,-.10762360396379125,-.028238442365860296,.07777490841591576,.05764520084188644,.020682314424331508,.015698799166135785,.023614524698368555,-.041771874129604925,-.12746951561572256,-.03128255065893184,-.012702497649368927,-.03100282126672181,-.05323312562334649,-.11694882872058675,.01991533378727624,.030434079899803762,.034286620375398126,-.042572007349056584,-.08421562414356842,.06986128783468853,-.012204622606775559,-.01889140683417556,.019639551076716097,.0777245048625558,-.08036649451368691,-.015106150328832637,.03458846930117904,.11597907830248098,-.022649572331124024,-.10542134577114659,.0649091642415309,-.0032238315195849358,.10106249830020778,.028244619862228884,.13831334399041184,-.02940613006050865,-.1747975534137946,.10110596129570967,.10656117039170004,.007723586370306457,-.14344418956701926,.050109495007546564,.08671574569290358,.09308968550103064,.12450293694496621,.1288423000359782,-.0704197795640918,-.12323154963040814,.07075348661301689,.12050632408764064,.01023362279869472,-.09773323390366313,-.05933117448538212,.05878289588065397,.08532608320057898,.07677585523500229,.029787153121228482,-.018648323277872803,-.02104125062301928,-.0003430486081355544,.08429824151697698,.05683502064817744,.053326494938013475,-.03963866345914492,-.0050145752734991195,.013779029282405111,-.010485661499173113,-.007234560404816931,-.011950044363487594,-.002596863452470205,-.03948195531279117,.09282981387556488,.04294346095881349,-.007541521800072615,.01831664591755916,-.03913011009425575,-.041539280566723305,-.027051679902780887,-.042059150111380464,.051858253540492213,-.038626104291501345,.08962165947507582,.07138907399524949,.0864493116989368,.055650817209077025,.013638815876452798,.017995842737628248,-.01801617871484959,.06345870533067252,.053363636563368205,.07474224897420911,.07077924647780946,.03802131210007967],[.016782329804763754,.02218400925475634,-.017610151854017764,-.08378928689892737,-.061012255632239214,-.049436805730274716,-.016010628978889538,-.0012930764671227057,.018100227337522104,.04220318891077436,.09111510772543861,-.03097316375308616,-.003219528605249891,.001675986093178733,-.014121001324428797,-.048981904044656924,-.010745318377515141,-.09765232651778044,-.082418824248892,-.008667563405891476,.038492534598761105,.038421970823334595,-.023684080137090627,-.04257121143938264,.02767445118866517,-.004584611981808415,-.029036296488781282,-.014288492306115716,-.03649248395374892,-.07318841940678658,-.0584739383062427,.06115735662845738,.03751313259987714,-.044262690874014056,.037080163847070004,.00886596082820771,.0008027268783415559,-.029635044582425114,-.06189039461962856,.003898593565581407,-.05558893218122148,-.06482591035840052,-.04045436474773354,.07193640264162318,.0514679572406173,.016629850744416953,-.040009434139141736,-.01911582981785656,.09190492104908579,.06837146364091487,-.03538166889608524,-.031695935446360804,-.023950933267367816,-.0394003966580148,.03763781004513285,.1197050728253103,.08954209195117589,-.0483218637920278,-.10361580068468161,.03196026187380821,.2270831804718556,.0969928026121238,.02670984690200131,-.043788789977080037,-.030431230119196698,-.03619909170822681,.11281418451835055,.05835379763863459,-.06497527658584784,-.06578144640058851,-.00844820385193381,.09124152377195137,.12717594497795892,.07643536530804047,.05263655140428726,-.011143586147963506,-.03613783908570618,.06912457884644944,.013398711580413412,.029824240574494128,-.003761299877294923,.0021895992476564027,.0634119585567549,.05214012614545932,.05038609451252047,.035324986438009076,-.021229516140167864,-.04148108277996894,-.02340383743107953,.025148825203493166,-.007105428813655779,.029757691086840125,.008526491918542104,.049978808930559324,.04760848594702115,.007387529728713386,.023177640471752005,-.034372485157573206,-.02211841910582997,-.03255077177054265,-.009536063280811415,.02395181727198023,.009716700281809123,.03356178063598422,.04458951798473178,.040595502460242246,.03265377980093393,.005764866830982122,-.015195338017169461,-.04482684339688519,.07120843129770589,.04189326395203394,.048927297048636464,.07382784431726473,.06524454222081513,-.0017292511368722507,.058389555203693405,.04649227271464686,-.04444859218183471,.0032057986445928333,-.08349182407350575],[-.021979451476262124,.04174953651046617,.03631748281849932,.019303759385788856,.04333110565873803,.03953245104448282,-.03647609905532502,.012807077503951922,.02271357612772286,.026792414564902785,.017780821834078364,.021847416207194322,.03554278855147352,.022495282054875682,-.019211730168732774,.046687383535703716,.03207320019718867,-.02868683209550463,-.06812268823509858,.001294075100742806,-.0345641458352986,.050972273139714794,.01734451138777801,.03561326116943138,-.04769858976802946,-.03362333136575686,-.03252126067861601,-.0013900797467142137,-.038202063259482284,-.031763114785061,-.04696074911195749,-.049070236071480984,.017434726053958804,-.030703215315142654,-.05716230179174553,-.0037112416196131703,.006069636736906937,.038135057103153125,.011368938851434945,.04381188631406782,-.03421758839049199,-.05354120670482268,-.039937408320660416,-.06176962677527169,-.03524035091512567,.0016450283116066916,-.019800744266528034,-.07722000486464739,-.07550237849427585,-.08759204909688985,-.11012945508577086,-.06123250301560537,-.0382298927655147,-.0642652778275334,-.05261454482215244,-.023205841324039467,.011034902978061789,-.0009788013549310928,.015271729427483255,.010026868737236877,.05798534803553121,.07084072997149143,.01903940304422439,-.041761958313936615,-.15551177552373613,-.07628198734805558,.01704717652939459,.09301475442178672,.09358145811047996,.04340258066263397,.006646103834755933,-.028933285567003395,.07146887030373177,.09920319196425997,.16737897607114252,.06904365792934095,-.07749686881409408,.09957337833447535,.04857127897909015,-.0641451014524268,-.017708931611072284,-.03377335742082772,-.03677034174495371,.02112529728746601,-.03253144131642647,.016179841472347585,.0905777502291546,.10585324720051341,.10393909903192404,-.03914692869215848,-.03044788518844467,-.0058756393399591045,.004920095500769162,.06501453594029019,.02355974270510458,.008686195281332368,-.06630429664117311,-.0023589044880598853,.10485324285454203,.041243799776074036,-.0046939490366109116,-.05026550547323008,.079897314990576,.05181186062917782,.05936381965465605,.06303860230911956,-.009655375056475478,-.06924255657633648,-.04705175927555823,.07105790345020195,-.0344270352725327,.033352431404995275,-.038713428810432646,.04054111752342275,.06751369421091795,.08280595489296431,.10708141658638523,.01792805681214686,.0011601162267517867,-.04367357751154875,.12867110066084922],[-.051871694661995885,-.019280829936621956,-.05468260775816461,.0009447920461082629,-.013017072859738549,-.012890228722627788,-.03561689429472437,.00145145137959953,.04288321773410216,-.01052037984919773,.007557764016209687,-.022057597937526343,-.029115164929706994,.0012528790852251032,.02326933842173219,-.06747451424185189,-.039425127112679564,.04718264333405233,.018571000663569977,-.03145324857978511,-.004262754471068235,-.06539080821308715,-.06230958857335078,-.00018350956129405474,.03407593431333647,.020712134681679213,-.01581641293554665,.036106476966187746,-.0057176038296621896,-.007803458127565726,.022001767580951286,-.07506308951528975,-.05683326947967647,-.07848781116927157,.05331499430015378,.08979192045945919,.06557973516327162,-.02013808088107881,-.06935471925961723,-.012900359094848712,.06749429214896617,.005209168998674131,-.00504458173784908,-.03401334054431385,-.04922062437796544,.036992846717020605,.07352716442216241,.023626785644426024,-.12668833039918156,-.049929820048297914,.13709290290146586,-.04308335985604635,-.11283440510072536,-.022957546531399264,-.01638036356783324,-.061480443278703056,.08372278920304206,.026145798642064663,-.10930012120125338,.0934854174621553,.21229414611822872,.12152486504801896,-.008514307871436694,-.11195109821400444,.008756959128361129,.11393373946480671,-.058279470412456076,-.008042166232599512,-.003712796463390816,-.09061146139231427,-.02375044583242448,-.0033262359419465592,.051599394503568374,.11794682063279016,.05218760955456582,.051040480785423475,.13055799836266763,-.01221412005055704,.03643178936804285,.03667070372044032,-.007801213769850798,-.08063718231962559,-.09844174757709723,-.03508837974768049,-.032648567450681995,-.016984796908047974,-.02753645816699232,.06115870091554932,-.005166923162184538,.05434661214643194,.04574675243977309,.06473944675012012,.04955271127537388,.018862295590649777,.04898318715355623,.06254198557673991,.0072514834621828835,-.023346720324739785,-.07560192616940235,-.057354038392425574,-.01763069649387416,.02294588190926191,.0908731117154223,.004298484273507161,.028246302042173196,.008760700624817428,.07435181540431253,.03500492744240232,.031603063242742584,.0345240046509334,-.07659016038739996,-.017921124400819347,.006298857410999787,-.013815145103657209,.08061645493285907,.019781761084500894,.07564773522909524,.04318952518565638,.07414909690419025,.04770033275626058,.08084015618691076],[.026722003554860107,.011659299846958612,-.030401027328402285,-.07893351640938032,-.025083013651028968,-.051258138411005405,-.0637381335973991,-.0453609789056629,-.00724545401294531,-.0016165196721033143,-.08985506460065436,.009720785483362793,.03256663253009212,-.06354648779701046,.004058650541230897,-.011780242044409216,.04662208252817727,-.0061913239369574095,-.00040805875755831446,-.038285077303976116,-.045803388237714085,.00013567048096911616,.07184101163623027,-.0035184890415564662,-.054904449860221666,.02924191756204008,-.01689557308935365,-.018744528704994677,.07571692682817674,.019648278025953467,-.04388565465695437,-.018293295448074808,.029236899127084933,.0794807536527237,-.10678554242785285,-.13518893526708742,-.002161773644551196,.05783942256780753,.04685296385285121,.010613998677874176,.03943968413178789,-.09285753056846846,-.05413777579109947,.04101520787327624,.06345089058106948,.04746993713227171,-.11150623495169829,.024332828493630963,.10456565053537453,.11492526729638461,.06434912266603923,.02496020720753244,-.12312652337245503,-.0357276852240003,.05635784594804886,.035122396434681416,.040853396388258245,.004817123777440064,-.018877573782764997,.06383422339455941,.09959443330448116,.10457424633849259,-.005932386081802512,.051540993351738555,.043792467918237224,.06682182319421423,-.02298136662633478,.012623816899516915,-.0274341836235511,-.03732016627308282,-.04076059976772345,.005431111277504214,.07785661288634199,.06102583266836097,.06291439314075388,.03927894562874965,.05155143621189468,.06822820698213786,.05379324325679899,.03311629479996953,-.08723056668996514,-.06241328356257889,-.08217938733697006,-.04940845861667763,-.05135975985689112,.01704176534606279,.008305262989467432,.05797318188985636,.049273067989623984,.05054911568008644,.054189519887507934,.07635745928264115,-.02015976461491653,-.01496772437088123,-.008318755358141354,.032399494222174856,.029724547489281376,.08116750370631132,.001076680509177766,.003132081148303891,.03959912217748029,.03266510186245229,-.007612388952312757,.01439000505445691,-.024144476806805197,.015900895762450868,.03646344965447804,.005998318217993153,.00737710859384821,.06875758897911102,.0018450028156024381,.05898331702127498,.06102266049341076,.019189271609420328,.052228673471552065,.022903569800211365,.009354573933779468,-.022264194312743783,.028742917273488648,.031821039680558945,.031024768487282525],[-.024931914403123902,.006737110259103195,-.007391490442242972,.017496948430487498,.023422622609065046,-.009492885212203268,-.021940305477306223,.00025349416488679166,-.04163342727184216,-.04628033097131569,-.06778901544234435,-.024673968258041953,-.029907852335896074,-.006344921502507664,.03882830280660768,.06846252343470445,.02720529623013877,.034295058790694666,.020017420759176036,-.0441476446464151,-.05987200542226702,-.051482095492071264,.011124069340270715,.016763058258717323,.05088684044262448,.02549815480352427,-.0939546655207978,-.09239118927766134,-.03247903215362791,.034462594953754824,.05996947494254595,.025584824798319902,-.054353591667338476,-.02150223875281966,.05154650145299272,-.03400786667540163,-.10294183533637649,-.06821438494596432,-.03609112863531143,-.03586220966849209,-.06695036990267186,-.0788669358196743,.01348990123782938,-.009299162793653773,.05124225459459572,.0631551203245305,-.05757404601522353,.01889038869900163,-.042698436177047515,.006389719019489579,.035993788676757676,.10789490348622735,-.0681802362576189,-.07588192982481591,-.01974750467266321,.10735747383087241,-.03869822606166641,-.15857079396383206,.07771169887895407,.0027821735741544867,.033503358473603,.0445293284383837,.11469939192954226,.03762916616171235,-.11802211992760672,.08981613120089463,.1409489675223105,-.021944857285476876,-.1862848822075786,.05722715554404334,.17885030648332761,.12350597080986565,.03287297640709165,.13094265605576585,-.0790542766901317,-.0988742849736581,.07103695210415123,.024172138802402793,.044359819339575904,-.05101250569856564,-.03906592355322967,.10490932756038186,.12042204998724948,.16359720010359963,-.008314168547253115,-.029805224335517175,-.023079186944148275,.059849592266809526,-.03542421754230089,-.025330293256378603,-.03424283036642321,-.06344183955508415,-.04696419252051626,.0007181593259586345,.022784193984670673,.009108569033323938,.0175442564906213,.028537852311277645,.08090346700239713,.06228800968357412,.04818971516345996,.021557195959710354,-.022313472699576162,-.09120395902913733,-.048678117782736216,-.018880976433473903,.02319770864597645,.011883122070171566,.040745024174235034,.055217772192963144,.0752915524448943,.1295068596040488,.03406673322807277,.05526333239219492,.0009295634002260966,.0025829434849187483,-.012623470754591415,.04504546623409229,.035721398778730123,.07325121561096606,.09493979978832112],[-.05469399676188347,-.03614225770942098,.012139987915473143,-.015154402745934992,.006846330221683817,-.009313685152198724,-.048684400948289616,-.04943037204636254,-.04106497122299951,-.07725384967515565,-.05265970158042071,.02644006417674272,-.03582580388162346,.00018949187702807166,.020886062450068934,-.0006594946059192835,.022071058438621102,.004031370860700177,-.03533302223613667,-.028226767346863704,-.01809822098267436,-.02023438256140576,.015320984616764413,-.0014404272920333708,.011179661842263149,.011479905349418697,.05041504628814836,.011825597601556187,-.005886157338115677,-.010693467291456787,-.05271180377675751,-.03958729553624821,-.015153382931397254,.02177617767728962,.018485275683894062,.017270703576438604,.025545107202705496,.003552691996951074,-.007207719262824763,-.01692777758575857,.01010327735896166,-.011396759513419105,-.05413599520729581,-.008775918099563268,.045428799230223,.026078742599032825,.018401462157094414,-.010304766106153093,.03117527378397096,-.022964877769659248,.007348845920109134,-.033664533213207795,.00401734882876538,.000731056999637672,.0009292076776340613,.03845556465762351,.0510271844642047,.032163653730152494,.003091909476963195,-.01805086224294028,-.03758060003421246,-.04298340492307988,-.03297383649051419,.003435703965453424,-.0029191330430502482,.04910211456862451,.045968351963145374,.03753303456561088,.053551748804077495,.0025191362420830836,-.04750855266321341,-.07278889625912804,-.06442733522484985,-.0412205236670294,-.026780660598796205,.04589302900490849,.043426979158010505,.0633532294221866,.05767580515884707,.04031026644948954,.041067495849464855,-.05102937433263888,-.08122284800217158,-.10623271352478328,-.040384319505111455,.012698889514418027,.027850330309453372,.07342260372963759,.013872383376783981,.08683721986851066,.07823149819628432,.025402065662503196,-.008595930472269307,-.1009426660553958,-.07977089663491069,-.08930757500600739,.015197805521062258,.0612893395940822,.06594861064187786,.0410355464349752,.05955782690964693,.08000623286398297,.07488260702905102,-.014113346378857847,-.03242074765334265,-.11384852443855065,-.10291516846863054,-.012980508793377513,.05222040610333936,.12082717968395887,.10605397357987933,.08625518328137505,.08321354397182873,.048514817007833,.044243911058542376,-.04257863034380657,-.10029735035508303,-.10409726347948557,-.08630781046809344,.03336904973909116,.16060915775050888],[.12273861405978125,.04281450875204562,.01806196647866125,.005306238394237821,.035823523447581954,.010649293754868217,.016551078536122706,.01489993969426269,.06744415250585613,.0014205983259976962,.017061484842956845,.10625529836546962,.03566036041809528,.002751078412191129,-.012307530679996168,-.013785633291103078,-.05132782373436337,-.0860003854958359,.051802568141879196,.03904805873472704,.047853825999159286,-.02626574754203364,.03074125545333123,.039406757558914624,-.008219197052029309,.00994496907304343,-.011588775094071746,-.06986333186263376,-.07121940102174677,.026730481405145667,.06436126667704024,.04996247813016806,-.024025875808116548,.0638093233647707,-.014373658398046024,.023604867877091828,-.04285661691231339,-.0300141813336174,-.09889712170449008,-.04373899159435149,.03430942416671824,.07134773641895255,.03761434445919945,-.0008217042394506255,.020111151000193242,-.002331074922981506,-.01592823887394037,-.02423171369688913,-.1221269192682253,-.07741156910078753,.0032849717401806887,-.010022001408555678,.08436673394784786,.06828408021395,.02710960296854332,-.03452082243214557,.00597056223211298,-.05440545217067908,-.05878256408463395,-.10071244219183988,.006729761904628304,.05232588319480447,.021602083823943383,.033365772587175026,.060449981481694115,.028671597117484994,-.06927556388493583,-.046529106869698536,-.07103102260182936,-.06887154107359562,.04665381137079572,.13893639005159752,.0882067152203733,.009134009183213193,.03384801809444657,.04738123882592317,.043417512003515984,-.09968279313996906,-.07292935685356114,-.07642090913055272,.03078200877785969,.1419444858039401,.1054078132040758,.05034361323715683,.04262781628250187,.001986940817932714,.002912892694045377,.03341792768934017,-.10626474257229218,-.08979736495452365,-.012630641916284824,.10656465605540676,.0817874442411395,.015706150749096585,-.008147489496057633,.017962048380179174,-.007682075324779908,-.018533162764163613,-.025747232327919242,-.06863640651652167,-.016416507375672674,.05202743487028412,.08441518809008719,-.031665719212890506,-.0813849345909397,-.042068123788522205,.0005300177935280582,-.0340275512891538,-.03605849757866894,-.09412659960792563,-.02872384593042173,.036956160575588454,.11399236758087031,.04778429384887606,-.0846179742925371,-.1041988894674926,-.09693066326663204,-.038842231479212945,-.019078175570027882,-.04597010269833886,-.1043619020843051],[.0657579411091922,.07477789750899144,.018292785286432484,.02817302033881495,-.008948344943660355,-.05254558038679702,-.1087949901255694,-.039787230769942346,.0030209786294805308,.043861504558306494,.020559045374589795,.04470571436425777,.012784570202518724,.016258299543353186,-.0381269066583065,-.03749794320270999,-.1176914965804748,-.048822632662462465,.039098390799118754,.06705564932984903,.07550007148393775,.07614552682771833,-.04103203468659232,.015971731655258753,-.037660696603424096,-.03882889344260633,-.10585017234815822,-.04977232998168482,.0044956232113971175,.11402219053620558,.09097041075809398,.08280647818477407,.059837386632622405,-.013124940068416517,-.02905984071441372,-.008593185946861898,-.05564222566554638,-.08586524174843943,-.010731942001337424,.1291059421706544,.033630584320905196,.03496934530589975,.022613172456202865,.023083805067396955,-.026126622747118175,-.036555728898516215,-.03454946027988387,-.009697212267244612,-.03948526086895662,.044563725924654886,.10334272388553382,-.022990981360463417,-.06846171192441487,-.02665064017831875,-.04235340979767379,-.06314341272481047,-.03867047986008568,-.032190500890796184,.0024621208503444285,.033854260568938976,.10018347106209433,.03904977954159966,-.14322204153577417,-.06792156608979899,-.0831740585430357,-.08698554339873987,-.04999667685809363,-.0696421621408377,-.017580665091978198,.04566660098194077,.06447454232298583,.06638132353246268,.04975912032340299,-.16687707277418293,-.10148113813854155,-.04565185060144628,-.025088926732828348,-.046920284310850276,-.06309136328211268,.009245686588623986,.038333207077261205,.06157812554096906,.05622995001355239,.07737253433374919,.04318613112863495,-.03831331202585952,.011391766806405483,.02908571767432378,-.08735795377362537,-.04574539559564571,.035034140501439034,.038753107277930694,.01028453604755696,-.0177455095262024,.011578683352821917,.10678493475168932,.1292075972982187,.06210540437337586,.03161474224298588,-.03599156339869132,-.03580586208307926,.032429174955818194,.013349521240161158,-.00025561537496165965,-.007583653790460908,-.057809872184653305,-.02737962405414552,.07750444987804009,.13303768141468877,.07015160516243754,-.01870535480753501,-.015887137408581595,-.012405772738829302,-.036314766817913874,-.057460340751641914,-.034056167300506576,-.07157545200554731,-.06829951030826499,.0017292217190058162,.06083852156997098,.1505136438334828],[-.120254202400746,-.09616901718415632,-.017372420837296856,.11248443570944938,.14311280665471804,.08252801512798714,.040999748265665256,-.0022276752168216667,.010467790781802488,.023760234093264703,-.028258264318314828,-.08446917322920544,-.06310610366941509,.03455797950371857,.08054004022885886,.03092741485225429,-.05593172254919131,-.02359479370263956,-.02130792364289391,-.06310798271161458,-.07325346763411429,-.0583388409974394,-.04516561125159846,.02698523667013705,.0847024358332596,.0412808379810185,-.12024366873436408,-.10042897365913865,-.04976512360258615,-.02709528866297261,-.010458303155168436,-.08946214106286984,-.1289437118045591,-.010213525065954888,.05397954089416104,.06946877286954048,.12952759376479325,-.14182340494484172,-.14285062277610125,-.0528606979553762,.06396947679917783,.05393927019995231,-.022029152784641744,-.10818698528187731,.016491832436736686,.0386393185053574,.02402098933500152,.06559289742544211,.16112502640598336,.023615052509284043,.04335245013258387,.007697901891859968,.04311212102993753,.000719877562742291,-.045960857982681895,-.006912744259264064,-.007720488220110275,-.03189187184311454,-.01703696089280922,.03503732554839556,.16303059281511678,.17418427554606328,.05700124704157575,.022916289242805976,-.010513114683071652,-.05288620941847651,-.004312990845295235,-.0018884698638378054,-.044790060375371074,-.03232037451379753,-.048960971185410075,-.009405256462243008,.05225328638873236,.14016474879016858,.04065676611467136,.024408426423858556,.029985555367538438,-.0339732390428009,-.017546572766816648,-.037345271053038906,-.06137592893080722,-.03937344145819692,-.054467136784434225,.03787669322362747,.09858135152652249,.08915095169603543,.012958414651170758,.027624783264719604,-.005882801712167776,-.057086791129319164,.00032844804874246347,-.037840469280978235,-.033695751439804925,.025912743632823754,-.017024947537232993,.06774754790560647,.06452982934496422,.059856281606444586,-.0040794712071662576,-.0644920108179417,-.022926783895192725,-.06825694131223815,-.03878709110363016,.015688747762662825,55171662105987784e-21,.032388446527829046,.05350215246202396,.06262131056599893,.011267099083652837,-.03949045658114776,-.09431947563442254,-.047548409339035126,-.009154127828242004,-.04820143183530858,-.012240843418624294,.001254075929677509,.016595878790118618,.020434407588746067,.03670010902109627,-.002605549686391928,-.03918033435849864],[-.039044382493438445,-.01403183543909189,-.01717497943397446,-.04178154000278274,-.05937353609244046,-.00853443277067549,-.01630006917274754,-.0372949005672025,-.017549755907846534,-.07844796288252787,-.02004008529828297,-.05676869782942834,-.05996704021234596,-.049253129103857415,-.06947154100802728,-.0719026668505315,-.044718491551717546,-.03636510105928939,-.003441156329846132,-.04641103137376082,-.028589990691112652,-.08376849280851355,.09511618074241923,.06245224641903531,-.024833981241255007,-.0978585755597951,-.1127986872143521,-.08806785457243246,-.08883593725007502,-.0685451547778931,.0011510544062942052,.06827224992795805,.08089367361989853,.1353343839303309,.18057622473716234,.08939292101612739,-.03771266910646548,-.18004516845335108,-.16759680953524253,-.11135480418062912,-.046002363039963315,.06748803495826358,.16040808091097752,.16020908007929302,.03224274688353927,.07292654022565752,.1267341164708839,.07677496585231416,-.027586193949245066,-.06058505348398474,-.0659581038990508,.04618881719914493,.06405321366734254,.06654518437550146,.04695382149034999,.0044609113824994155,.009161834221931828,.04196031797497354,.09084851340325474,.0990188535089464,.09033375622499296,.06782563973870923,.012714203390510964,-.005208332247047302,.011531736842481339,.04691335152441583,-.002678931412419455,.028085116456833342,.027040588615283353,.015104267552866583,.05985280687552735,.03210141946334771,.025279126213945874,-.04549978299987813,-.00926545146344819,.032695973667332234,.005802306114184322,-.0018139112732011575,-.0029108731958343292,.010427305260203787,-9603247696692019e-20,.02128860745026588,.041079801640464084,.01635736301374753,-.03239627940962683,-.009646847303313416,-.015146538620363123,.013412806275636471,-.0013427741295518741,.038224090646334606,-.01337749153937268,.026455615442210673,.022399735833748824,.008320371809276087,.002198678924308431,-.014293946476503921,-.011197610424383816,-.02576460216500251,-.004440261456418362,.026453211631295465,-.01639227277354103,-.011847008501585585,-.030834902384847707,.009271130025040075,.007923165672710203,.015033519474474451,-.027785535484879158,-.03370942439196669,-.015542452577597912,.0004863505957318228,-.026694531555004813,-.012724799179976064,-.013286763364002738,-.04230632193151675,-.033424166864698804,.008729325548481352,-.030242759324034616,-.013050994461220922,-.03760398533593696,-.048537758115318075,-.06178421620230195],[-.06489561323139842,-.020224286971327814,.01590526440901255,.013551842188797097,.08222566405969617,.05259139940486349,.04225788747196117,.07064771573560033,-.0011991945255137408,-.03436664031206134,-.0723605555532815,-.05622360340450999,-.04625462902379899,-.030584855242000546,-.03499613386449457,-.043017778242875414,-.0741166184659999,-.058193036991492836,.09917490204744145,.08597915962376732,.0260790473140005,-.09033579595709361,-.10362582311773169,-.05683029227387211,-.03295522857034659,-.035953196903694445,-.0836695985016021,-.14307384019801234,-.17021343406030898,.056559505125885055,.1353903981543188,.11264594916548558,.011673755450064008,-.06580564917501655,-.015916968368204,.049371535828759125,.032602131500708426,-.023482372439204213,-.14884937691675146,-.14122378994790352,.038947574553526224,.09075477737772583,.11462434476555877,.04923296864969556,-.02068116271088981,.00591891665301571,.048035670932309434,.04875666889835771,.015029939401784822,-.00458228731729067,.044145082900123096,.050071852397185944,.009450975049327438,.02437866831683654,.052749214069398115,.006439013954362763,-.0002811989012708239,-.006454694040300538,.06724180485301293,.1464190668396421,.12089002549596747,.04552412319599981,-.0279038197772226,-.020728023595215268,.01197258968450408,.023139835261794185,.062288213971794335,.0030852567167743063,-.010563156113489056,.05474623114509661,.10798773024900726,.014816168604569607,-.06772912288071306,-.06942881995257864,-.039672679449664974,.007294484486903119,.03166580116924624,.07790346807147037,.03314357843621181,-.011090195620338333,.025953154918250638,.040728866157606014,.015524058836610692,-.021280018049330086,-.07460112434535052,-.032634705813619005,-.04076721430424921,.02906892748967471,.050403637093174664,.016601304925128416,.008256313251879244,.04007619904334764,.031009017378264954,.02125830223035903,-.002636450461610297,-.025393115408776517,-.04010043796874938,-.05110548671081025,-.06799337710361661,-.0004643255713012305,-.003987648316637903,.022729109377199703,.03955596435942922,.053830169668727355,-.0014414045704570968,.03726780218944692,-.022231980521954575,-.034050491080049324,-.07395165549402309,-.04355798360191523,.006327873479133189,-.0798842976776823,-.05179614099105008,-.012967977410458104,.01676967794141297,.03933948218335899,-.014906721458355397,-.02108264568598167,.0003744563633441408,-.0827232819772278,-.1030737258893234],[-.037002829518880356,-.051800501938286336,-.0608530045371766,-.00941504099452431,-.034328030870577425,.0033825861478738173,.012446709688320332,.028263939384084974,.05124125029402918,.02946721239068341,.09429607378175116,.01799633146224626,.07449490958421547,.018562434067668762,.0011775208660011255,-.03343642198912352,-.03584575868586926,-.02469974718432548,-.024948855129499292,-.02485643392073319,.022654621557346655,.013969959583284512,-.015621110631660393,.08434398198734791,.12526052771855398,.05840823182146438,.045127451768280695,-.0431642408693974,-.1023993834271598,-.09678107000960985,.005391639305122323,-.03384440231459526,-.012657848528438927,.0013785476814248063,.011572904307556139,.06840315435526513,.05298095991298454,.1266701829984114,.03504572572612572,-.0689602022298442,-.06007223145173397,-.0627205556932788,-.030009692601680373,-.009208935268622181,-.05334616924410386,-.05152183948165265,-.0196710242768371,-.05587360763057311,.04197887356304095,.1638861354064878,.00106361294464159,-.05391004051311221,-.06815359102208639,-.05529295073172845,-.03946217138840666,-.0957259375011219,-.09229091135904942,-.11338803995859958,-.13838339127374222,-.0357462740536892,.22606772554633187,.1281379577664759,-.0024481614307838503,-.03361116851957152,-.05183905928013263,-.084236132619829,-.02903224969906317,-.05889879465503125,-.11075161830580202,-.15312117095255712,-.02072478362064721,.16842588938808492,.12743855198340154,.08033192559741006,.021566448195444857,-.08235262002973757,-.0690179832500651,.04985737926707613,.040106054682231364,-.05533382077548356,-.04209621166425269,.06670870442526103,.04241981201260014,.06901166957622187,.07998367701871503,.034371804092794715,-.017332099818488572,-.08300941885464634,.042453939466233076,.051060642403565164,.07316878819733981,.10110928490296386,.015416346633545026,-.07412165176090033,.03750620537132491,.05637231638443497,.06980271245301944,.022830083664882234,-.08847619122475686,.056380990619929745,.11796759975891001,.0851595020681788,.005750678568051781,-.05215025241828278,.0007134118917190707,-.033052078906102914,.04246615456459355,.06615257067809975,.041058972780051016,-.07491213514221709,.05983265086360286,.0500362825184366,.07343910110660017,-.03505545168769433,-.04321396575721578,-.02843383525472158,-.04972287987174802,-.04246877526080026,.005821181336647704,.0033813738235871967,-.06457987851604302],[-.05204926560099437,-.05723788028923628,-.008390580400298928,.0062458102695772955,.03574661992690044,.07839946359958906,.07885215147600756,.06507937658407383,.05167443850164405,.05659949162584593,.1112401778738227,-.04945177019079997,-.03311327028822704,-.04470398589450323,-.0069392182793978074,-.02379457697725676,.010055161607694707,.05186192586124869,.032051221900923126,.003455103243123696,.06034250732565122,.071820561865178,-.011974167972497493,-.026068365839870898,-.020182681121343846,-.013949638537375686,-.050699316492772886,-.020355931447011116,.029014508674471667,.044992661189607805,.04170522023063189,.033987569666887124,.04209407154478602,-.03129262148575607,.02230132664279009,-.01743554965010255,.008640518922615942,-.03342911654326199,-.059143520853118206,.005585256580464881,.004150838713834478,.04946052885819559,.050859527708305804,.07993402373635779,.009595912870105656,.025688470585585318,.005560001931692558,.013382028934657897,-.05801380814888574,-.08949981847238914,-.07159208514989376,-.019107360505553072,-.008274485117911932,.03258501263496798,.0467012903088406,-.009606781001247233,-.020512636464317932,-.0038438246468142923,.014613700602723453,.06818628472451635,-.01830963397214188,-.11322752216975147,-.09640633091246717,-.052403236939622524,.027222341781097337,.03031775226862793,.01965700165907618,-.00966000423453436,-.018626726339795667,.008190809058583867,.12179883942046363,.1508103124239786,.07580663979213265,-.06276117094215328,-.10013344453499878,-.0682454837737192,-.022265844067301123,.0006558391459163034,-.015208724489903314,.018866572887032564,.005268488532491858,.06568402893132684,.10986728461260108,.14928723727825088,.0594347442891827,-.06018557163621725,-.08935459882000726,-.06621692696979133,-.023535680546190665,-.054962379947465514,-.05901330662719082,.01998960704862027,.005400320662715055,.03246277175846285,.04586664039469952,.10505871662329165,.05575551030694705,-.05988961634096395,-.09231581043391607,-.07161904594773644,-.07503119972223234,-.06225391144663185,-.04694709230045966,-.04811632104347953,-.036582441951753884,-.06110703633906731,.036504990974571036,.10110597080448579,.05117784511424983,-.044432074886152584,-.10159227266715132,-.0771585687479038,-.030393198761254205,-.050071313080747346,-.07459567617979161,-.0734585421005263,-.0783580627771585,-.030278657221277715,.08445387790494646,.12337283504154144,.06246916841256192],[.11115260218147537,.05156084299988399,-.01902732369284004,-.05373543891362918,-.007110107593170566,-.060331674975749636,-.01273389146899935,-.0839138995858443,-.006874281918481814,.03644953787571817,.057484281155208095,.1019949723289555,.08297654329738552,.01862379926670383,-.020037210469670844,-.05899168713382544,-.00430940921081718,-.06180113190773767,-.03213717152533137,-.019997943427430342,.02947771435838298,.09332163289552993,.07013604972397909,.05701993375827408,.05389997300421954,-.002638763453039261,-.00879447000911263,-.0448865167362323,-.03176715948743207,-.04217367206952945,-.032508457873831956,.03411523551142369,.09310599590723705,.018636796052156644,.046735806088687395,.02185817450129495,.027569212512874617,-.001974822818289687,-.020011467438642447,-.03826332723250643,-.04176070997146199,-.03081457693173932,.028817248098680567,.07178725501146116,-.009708063399979483,.040408045290464156,.04790294227271096,.049152309684650786,.016182293978584075,-.017238522908897977,-.04046859816317257,-.04570282053137038,-.01628160437135666,.0034546404119755736,.03480739077753514,-.018385622040759317,.01969433114929478,.06799866802700852,.06483129813863105,-.014464528171849848,.011124972290677312,-.0612303154617381,-.07662098811794275,-.023624167810504887,-.0028778143977437054,.03758925567499871,-.06926330403107468,.003135965696017262,.05737759509102358,.052691820606641286,.017399699182203937,-.018570302353960122,-.04621388920618046,-.06663271110793935,.004937253121457652,-.0038828611488524456,.025713646541403734,-.083379308461336,.005669139271292208,.11608252277008832,.07353316121959086,.03822657644961075,-.0771186501943501,-.05546319424175007,-.04304259780973764,-.019189005860534236,.017297615166657204,-.023170677964515524,-.09727131638277822,.026385141514079502,.08466881527957332,.0925048406292873,.016711157910872847,-.04436278262410276,-.0454511239473053,-.049550862988714514,.013625451869519002,.020561667154105095,-.030006622146731568,-.0639806474069757,.07587246772228866,.053120016709717416,.06592377490676236,.031465876517252786,-.012255926181853973,-.0313987899465122,-.01876926970569838,-.040221379151225214,-.0015619003771453512,-.006960438948961412,.06078341910204897,.07556870910322246,.05225568745879651,.07813955049428749,.03809501181427315,.05243456114965857,.048883832083824116,-.055025867820072974,-.045282107044195954,-.04101349777164463,.09904386685974172],[-.11203549175295996,-.03974163811224487,.011060178958798239,.06877152276086239,.09194702992686865,.06301346186484921,.05320845714394991,.020539339513306422,.038057193997243076,.038787465988623426,.028121764350374646,-.04491965003575355,-.028946060113256775,.0382499640499028,.0644486923167395,.07456688644847903,.05611798233910977,.05771208379857101,-.019732262989866904,.012262999619765316,.004034765188164621,.04311368950180577,.0036261933857882275,.04092871004332216,.05321964860596642,.046769367826384994,-.017166264963499114,.005489126872330413,-.020480699308758406,-.022929172836275616,-.019377222102737297,-.05039327467093438,-.028341154356359134,.0443687450803406,.03490629110767013,-.011071953214126184,-.06554414606891683,-.057326320735171105,-.09865404487925097,-.021150583208668992,-.03897105794825791,-.05195465279645114,-.06569705236973589,-.07666861846838118,.05753682622229832,.00590261315360243,-.04620387253927334,-.08261142012062225,-.08485219181649815,-.07914143032591006,-.0970041684358289,-.07606212552209854,-.06316389153647553,-.08332092946162584,-.057460537409920194,.02780118613240987,-.018767946276596975,-.029691882937965902,-.014540521259465585,.08390634737694766,.20739444418621977,.04670049384566572,-.06057173576227297,-.1303813417107452,-.1380526167498672,-.12358535758970328,.007471053958088045,-.022238309187360118,-.006783218212135688,.0005085683835639072,.12335224504872636,.15023440850791586,.2425587678439056,.13265122710423893,-.03634921595550453,-.09634226143484849,-.12379973942082877,-.005922294079732774,.009252871922863887,-.008641436640496804,.014911679170252864,-.006970962685308585,.0621921155758957,.048857235728622855,.0997362219025745,.10382748525934579,-.0017267232813016238,-.03337998864511238,-.041015759215952706,.028074948889879575,-.024175373112944334,.00037851506203986224,.02829008660122529,-.017177690879414606,.012211197073898714,.021090624041023867,.04880110436342628,.05889300676691906,.041186307677804096,-.05022803775793874,-.06358869101157405,-.01627885622405395,-.004755690985950509,.019166267525767756,-.004285985542694249,.07222129366422753,.027667668809319687,.007607234873196663,.046251642681222054,.04532751693659801,-.058087271467788915,-.0525686542532879,-.04476241350364093,-.02315551806532115,-.00017763235014638958,.05235999771198539,.017613369441475152,.02675424017353291,-.007159241026853261,.021450091526662492,.026061341438602878],[.07444303362221197,.02500970344944954,-.007238739688509119,-.034581203239581096,.007506922696264601,.05053220778206742,.09772895038203586,.10515405254550375,-.002088563116083089,-.06460650708474773,-.07190087700833939,.06270955516157596,.04810964818959447,-.0061288197958455914,-.048707571007934714,-.028878035144916103,.04928302961129614,.1030146407333215,.09188536866092206,.1083066909121139,-.006920186046306842,-.0710800467482154,-.03238540350174022,-.041456597157549895,-.03731828458452535,-.037271263481650524,-.04033581670492567,-.0305422084559889,.027846343886639854,.051125764403077464,.03945786312558099,.061533816212355034,-.008859713695695964,-.05800259437689445,-.03615103877043367,-.03985356005739935,-.048559742972093256,-.05876298366017621,-.0831018701176292,-.09187553006052346,-.0772668376513636,.0008620663628637198,.06456756049272938,.05176416503907634,-.08735727608117326,-.053385067235642,-.019429217609104946,-.02341541574438452,-.08563033699269586,-.126111383269721,-.08669161414437897,-.12449403321207964,-.05512595439100107,.030267444104458113,.0836024050777634,-.1258378190042574,-.09127814742360156,-.07353034604864678,-.08504552015304981,.011889706660064834,.13738456218349074,.1269175791837212,-.020511658061573332,-.0833315270062695,-.0456882908601092,.09472163178341901,-.1176819000585845,-.11560656474484407,-.060549525031994025,.08198488803341114,.1704420734813879,.11965727243025565,.1125448422909956,.07474105241393444,-.02573762291906274,-.03358721907248884,.03411352154081515,.051552692766032665,-.020222946025836006,.04569045105958281,.05607113335333701,.020997592772981258,.044561510792265,.02939148849213119,.02672527280652389,.013325176508616088,-.019772518292927338,.0027475572519997937,.12423204721233166,.04554971074538604,.01894738751080638,.005723987504926101,-.005869920830539471,.005036955065784027,.04372405490129991,.019509400602205587,-.0018887858002489578,-.009617738109261226,-.013199600334816992,.1014363612797737,.08518214265041664,-.013319980029247946,.002918907465938758,.010087593201327683,.009493285904375974,.017930356539244602,.03140663768500043,.011733720402003947,-.05090107026194785,-.01573578191125742,.029231279797781562,.048511610011102664,.013899380735429394,-.031157761675669398,-.04066208760310525,-.008301142375609458,.043045372058056516,-.01096803936953996,-.0012438578375955772,-.02262652033782551,-.11765611182461798],[-.03987348068518633,.00012184835774546317,.018432499523696314,-.06030489971984803,.014643208225874137,.012981315846513394,-.0070294048340999865,-.05562456698240353,-.011913096749220649,.008412497699637,.010420634562858239,.014232327032235419,.004683222693611322,.03281998263431921,.01320726418626594,-.02353380889127571,-.011404581263416494,-.04258217520341631,-.018915023456131434,-.049511208703627144,-.01836613958153846,-.005843344626253311,.02231630230741475,.021334764569425978,.0346662913884623,.060010301185060864,-.034246065227552185,-.04700549965012455,-.04792187180254644,-.04104883140323553,-.026713641204057077,-.03878999612701496,-.018331240491325174,.03797686786202398,.028813877664190697,.019770359402909235,.03728944535318747,-.0669629884115178,-.10295356437958489,-.09003533826746601,-.06041580278523514,-.030821512733484054,.02401335406847712,-.02361574077075567,.014617912689912915,.005197345658313313,-.005340876957806051,.019716826597634293,-.07876690419326429,-.029296548169388054,-.02328043082803078,-.014403388911157673,-.009226362874770445,-.03340903629912772,-.020726200729135634,-.035931925994181074,-.023010380673947554,-.039252395604041306,-.016760733401697973,.053608280303007586,.13329950551225564,.16489717632675976,.0902812683374847,.04522966550533915,.017404381514372763,.013597897839994186,-.047297713743641646,-.06762209432743164,-.02719563655941181,.06550639361374848,.02232560477300298,.046885888199241804,.043068894433185,.12018260070272857,.08430250848496149,.02067188016168707,.02018451176662973,-.07105089435926291,-.07954173909495858,-.016269072364149793,.03335471548526817,.02870602470630109,-.012011749840849373,-.015402866346903674,.031358471867631604,.104766674086863,.0025587486589462027,.02110857377048439,-.039307670372500075,-.09376755122840506,-.022120949123226506,.02365801675584322,.001624116197708074,.011496266326477288,-.03966683671453537,.010910001919740123,.0638158108270505,.06296474925617652,.011666021976556945,-.024049027553408542,-.0027908618863511994,-.053241603898009714,-.014763231808325047,-.009588040856415833,-.031086972870322235,-.030644620324520727,.010272461123314607,.03748199758443737,.060317495169656093,.024907320438576977,-.04559962354066016,-.020357685838190937,-.06210616698099473,.03698655605744725,-.03845306985689939,-.044856589426634154,-.03431065152416227,-.0117837233082248,.018762824804810944,.06165748915487904,.04080400995020607],[-.03096737664044258,-.034704706474157576,-.030029036584246833,-.07320913246644893,-.048949076143639865,-.03864066241044256,.05147476405244581,.07423685566323197,.11134675135754504,.07670405672405489,.047486303599635876,-.06845561373339852,-.03512851199649608,-.0025321681540545343,-.057133697514561765,-.05344060041967924,.01714865038536348,.052110170662047414,.058782183168318736,.04705696144603637,.0403223252560649,.007803002438069265,-.05608339456723066,-.04684682593449583,-.006557738579599515,.01547109497711198,.006661478090622973,.052620395249402485,.00019300929351519225,.07754706950878812,.05031378239481031,-.02456918809557169,.03466288694385679,-.00440299504585411,-.038893398080935566,.018694283839760885,.03542801836340945,.060685907655044814,.0587413540716437,.0014872430743369924,-.04575632584612705,-.04794464200830888,-.09281792081715598,-.021043716683786656,.007562208390103603,.00878028863524994,.024402794551533658,-.01824493391613341,.005681948678715126,-.122005902409504,-.11277710237979818,-.054719494073167244,-.09016688938377804,-.032774893151098286,-.07964048468698327,-.008143342580373303,.03641555473221397,-.02971924637905851,-.08343173036099473,-.09700971871393334,-.0783823363963309,-.0618524312337395,-.023645551992256014,-.040447890302015635,-.07855622620524906,-.03521895064035818,-.027448566314184852,-.002422165158715968,-.00865135823294761,-.0690559411874358,-.046263515682347614,-.02668358710641478,.008515128473477424,.01510527176030271,.031314100341752416,.03605607584214813,.025591220637012156,.005135383452748506,-.023005349498057173,.02104724020668694,-.014202301085685001,-.04360199270242936,.014083946209181006,.047988366041463205,.00407689495376469,.0400696156862377,.03136809244101747,.04140190793268148,.008354236628530194,.05352398489685497,.03834657618989342,-.007535488030160201,.03383654934661684,.03770195901377556,.023170719193185016,.000638745188949805,.022456779814042073,.05880400681490598,.033465949399417834,.011933873490689997,-.003120298876238995,.01606874667277748,.03762189304398071,-.010942651485316122,.04629938376653557,-.002763768259076385,42316925059140975e-22,-.0038944346280027366,.009657632377318735,-.01850966706940272,-.054006078059137416,.017238219091326883,.009159691015199018,.028996863874777658,.03395260188298865,.07075333983424409,.003780950647489843,.02719958720401633,.009141971904575387,.0271151884086808,.012709694003767591],[-.05922160665560868,-.0013807397121916331,.02761264595777964,.10526838045136652,.05616219064217892,.06338199684663096,.005281390721374816,.022701227707487698,.023071399548784132,.011640586008089752,.037100581562280036,-.09653730167124185,-.03797470422579462,.00038732579738916815,.05062505001626757,.06508672908567747,.0010273202640978113,.01030282761678826,.005032750022648261,.0509593427031422,.05316183247155901,.03088817116176755,-.02135902495678074,-.030126662636484423,.014336380788901357,.044081582390044685,.04514328491398001,.01394262266053127,-.0744795630241124,-.02119465049195851,.010166296540795764,.028011887127611046,-.022728767470732637,-.0337697506547496,.0042313533530659725,.022686514054856353,.04654204591333076,.11310013896650321,-.004505151104068197,.07238358893686615,.03789191997881325,.04463998545348823,.053304796345090825,.055297501218708925,-.025259737537897203,.023523250437604698,.029550788938781603,-.057103923688581644,-.03722805046402906,-.04033454711375974,-.06600239445486109,.051805877339979295,.09092132214492693,.01582333113937441,-.03866541214387774,.009290651557492625,-.028826426019922906,-.07498098908446209,-.05787442193814954,-.10795622255952429,-.046546338514420166,-.1118189944174967,-.1019241875217538,-.08570241416534531,-.09390586849193057,-.14398389568329137,-.05682858560544814,-.06626357512710776,-.07188323103088408,-.05541027253169447,-.00928225455038148,.0018363519548447033,-.006618338217431227,-.01182516248375036,-.09252025293113655,-.08826205934896571,.006952122206205752,-.025393087237703255,-.006394699129814933,-.043361744350810506,-.02217358952694239,.0077218815463931945,-.02533411774995424,-.008315264057263447,.03737058463828657,.012798906233440717,.01568549556443899,-.009659202034056957,-.005784888803287369,-.010756955350811635,.017757324648215944,.04452954766974304,.0041941047626251615,.05464518596179402,.03970959793814914,.033910773481424995,.0652717691003689,.034889848272914054,.09538710441349899,.012473593139358034,-.008993507577960132,.044380357060880754,.030765480187302234,.01888672423998297,.031787912403243176,.031673790743440955,.020196643029900062,-.0012983094411241694,.046204156701180166,.04361652893877668,.0522796751665047,.035528670172807794,.04875282742216639,-.010956478364744832,-.010948307255129602,.0023335073954288315,.0008261995970753819,-.028699221681917506,.014221929018802294,-.009806880683679096,-.03527276234282427],[.06294687244903106,.06451939487907767,.0328973595145653,-.0457118918796631,.020599391374711062,.0636551992364853,.014615769796257505,-.027440870743054617,.035616222562863675,.009403609382716852,.05650744619726519,.03127252900990134,-.011034554575282393,.038887056697409605,-.021343232536083438,-.016082974355130925,.03398009131937528,.05262640050415895,-.02529516749703499,-.02654872070640548,.030680991925506617,.027583071986928488,.08096671932533792,.035373199613146035,.03490025639293444,-.012798813313152833,.04319156099995615,.022703220357838422,.05026537385363263,.0003437400231437425,-.012567197236507482,.07342963378205924,.0065301063919971924,.017281768786973933,.04927600477908872,-.02725340162513791,-.008652057866240029,.047527074820523915,.1786194281868431,.0868090680216574,-.01935517824058866,-.04187030485372663,-.05530475360810071,.07829083723169422,-.12690621836570407,-.0962798905896546,-.0925411219328599,-.10216764911335079,-.04191334729172356,-.006156869539933545,-.02394181893475637,-.05181154571828913,-.12530688042526772,-.09786217959004864,-.10634083467860724,-.08874174563664096,-.06095883653512031,-.03199305637692427,-.036846220231738974,-.09227401034791582,-.11353320653734295,-.03614669556607285,.011596830638808633,-.013143670931630894,-.06391736056544586,-.11042459480083613,-.012415575911984202,-.0612866837920129,-.019683898333121175,-.02351836883559362,-.006652340016038455,-.014484754457127935,.018028020927321566,.008084275012827935,.03697237071656497,-.018618144071885362,-.10924354613828609,.030523206341700047,.01298880090453846,.04012014262037861,.061496119916373056,.04844996153098939,.01921366891131086,.021510068544701624,.07209312331150311,.0374101619172917,.04916012297501317,-.013141343062868835,.06064253700400801,.022194682981879085,.05129865380619493,.013217705879822975,.041765969490498975,.010615751276552232,-.010207688567782834,-.0005755982867169385,.07631424462253965,.017510356925100834,.060847396478783206,.03300347337813607,.04898473451202255,-.006482225209601922,-.0021063249759751858,.010622816122664164,.028538830399705187,.02861840870100916,-.023485260352655107,-.002827617418933684,.04410595418439364,.02257475962176672,-.025473428596684167,.026401062552437127,-.029859950686759645,-.03514814520727341,-.028004242193563095,-.010874515898578971,-.02520644976850539,-.03147261688793358,-.013822064554071298,-.01097289405425797,.0760923571868825],[.03690386612248002,.056002218089369685,-.010951719270400923,.040331097511643155,-.0037441455323561496,.04911212511418306,.007916966537418309,.11344386642727713,.0007563312264983052,-.03748257193135831,-.01873577218998579,.01174494526962254,.036505508708255696,.053399713960056966,.023086150106013142,.0044152509684453195,-.0036748654077677217,.04965698113538117,.0045969535450092955,.04039279416298312,-.029097892231179194,-.0748938652763218,.0016705057712694963,-.032135738557994634,.036750173986759005,.03202977495599156,-.025110352420147287,.0221106357762934,-.011118779729623884,.027123502587836187,.06109546207970022,-.024783808630182078,-.059955925032526225,.013711673076898898,.0365575333682475,.08411026188692816,.05595023129474677,-.020007452447925414,.020788588159875922,.049865734304206946,.03902192315122538,.08884566474640107,.012344115511745107,-.05538843672808838,-.0283890960033647,.025833332510384673,.10641983969927944,.05272291830145921,-.05478356057464559,-.10190284716601143,-.049794325260415453,-.006908561246873404,.018752575433158634,.00820978526312097,.013268033828822395,-.18180783799950825,-.1259586510866703,-.09458706276734465,-.027564647202767342,-.06433997097232488,-.09163078285949837,-.09227848834061905,-.07557002711963273,-.11647913534085745,.0033701825247711877,.029872248721253027,-.049119870012074435,-.1095049028754014,-.08298553382194322,-.020757266879069626,.032839871737627147,.027498688090949394,-.05126517784099288,-.02872690412919346,-.07436252040475247,-.07882837994500602,-.04821124597738093,.02417495141556668,.007447280767901082,-.007423249168852952,-.0007786618597691586,.056674802683761974,.022479560933966962,-.022053321065962445,-.025989291569709812,.0064102606195954315,-.020235352690214578,-.06483817157331549,.08153962706581591,.05055978719651685,.02764093148373714,.05666849133041683,.031151110583386293,.03987747631159184,.03244381912526212,.042982667461244774,-.0018215713348507297,.007063770010998928,-.00584297953517561,.06760376205929838,.03091253675538988,.028071888777783896,-.0010850231199715735,.015534670537972986,.04368719019400073,.01938400318015672,.03293968892788021,.05737048864426658,.007608329587750942,.004498692810154841,-.011421955766557471,-.02908127206914088,-.0036106413708782165,-.0032691409082095807,-.06355158619638394,-.022937264529547606,.009146701062682172,-.011390797309113472,.06818750604632794,.003884385505889279,.0714486250517464],[.09367005337881673,-.006018580372441212,.06497525344798,.05720481392857424,.03203935730331259,.017360690928795997,-.05431038836749526,-.07430401083115647,-.022133608826072,-.03441434222392329,.004416296324719113,.028938348016603214,.01658488166499885,.025525405954675534,.03589396196707194,.007674689565585258,-.0019368459518004297,.006670753595932805,-.1042360605814506,-.0005545484096969797,.0022380826663202374,-.02840948162941799,-.004017714090244609,-.013989051801159828,.02542809328073873,.06414836547218424,.07748576576667437,.03400735289340096,.04677126937473937,.05405600102557548,-.06829161572435846,-.01191564128605152,-.08236908091325304,-.034026953075964254,-.0939266964085038,-.02829902606827278,-.08318785606027235,.006867021340889956,.07996019523365458,.06377190265533947,.0008763423480259887,.020691801513151017,-.012739227946535911,-.018539467931270818,-.08215903388317325,-.03550926948648102,-.0903794995968909,-.07258235104829033,-.10221116757608581,-.10665056526245895,.0009025073342423806,.015334595491633053,.04622773006969833,.038103240152997334,-.006246122158059489,-.06724561414366495,-.05332552212209024,-.0029145163841420574,-.055345741892996264,-.05524613740870098,-.11556942735569369,-.12678748176917243,-.018650402834112373,.0201115675159311,.007237454432263194,.013539302016072579,.03910940758548388,.05164169890796305,.007896536595205877,.023870730531144614,-.017458058805458504,.018892420656760625,-.10504680212429973,-.08968000412836097,-.04272524613046922,.026724916448450958,.011635965581891422,.08488913381255783,.034194689506569786,.06585725545840555,.004242707893792936,-.012401464228490738,.042722865239520375,.03350923661538768,-.008645287457921886,-.0917697788048053,.020750157767451382,.01987667311893981,.010694698759597054,.04715645875848584,.044111484618501104,-.014434725200227233,.07137385570418422,.03475623227161978,.04057849325519469,-.00716628706542051,.025407664409730447,.0433394176317338,.010480242779609582,-.008730706368105114,-.013411411822995711,-.02039450903525014,.0060121542292144725,.024188238197290803,.04166819382248508,.041183226601004416,.10243115564821167,-.02940584456446451,.003109924528581767,.0030508999908164854,-.01738219553930828,.004826375063924693,-.026781565476663695,.011942148044968376,.002467828151880236,.04092900326552463,.08062259995716158,.029178579118654943,.04303871497674061,.005550173350657495,.00027909537625575576],[-.03339731139414968,.009641500771364497,-.018236744035314625,-.034138584815056695,-.00244389167533262,.0055087071850375355,-.00262680371191032,-.02824109883815166,.005215994203653013,-.021235364030436632,-.047073948370721506,-.026121704506604584,-.027138348751118566,-.04810743540836265,-.0402112798225784,-.030102378969085283,-.0032792712208641666,.05967861339205,.006758383300518157,.030667242997798105,.009543611534364461,-.01691908253325843,.003823309581384715,-.058995625065273824,-.030890606711754587,-.058149589871913064,-.0815351815818076,-.006357953877019928,-.017080813200946385,.04333747840689195,.06298359743661373,.0404013095948684,.007203402399887518,.011592685433827972,-.003302145650091806,-.0578167886071247,-.03781251270732555,-.12425681152290456,-.10985738895947982,-.0938128398806289,.06500129033876156,.03484356102898714,.05661600403485567,-.01492500765441565,-.02116473624418838,-.003216205277080053,-.012309755363306994,-.017827196918306518,.03555116186738867,-.07046756271563373,-.034864456303405046,-.017196442705869938,.02847927116818913,-.02280658118428358,.03213417823424855,.026469237488508546,.009589558238125101,.035119287178089,.13550727924378436,.13688661973317756,.1624799779614461,.015875158167285394,-.0208311518741172,-.0011812318416458828,-.019841048216886314,-.08808246489667347,.03045776887980317,.026063097480707995,.047026463061375465,.07056913665627884,.06291679280327833,.04979881242940511,.08548586022935979,.03514169693262574,-.02016744424568012,-.06168515964673668,-.09284755481441574,-.0015896852645350262,.016608882932934957,.05500158726927647,.0708679315701417,.013234850523530295,-.0008208370569672135,.03800485787791148,.07357330886595341,-.035371927316790286,-.03169750713706261,-.08624851669394049,.01039022343069513,.020133865530716527,.013595826448211168,.0552947028760203,.009562722633679382,-.021797178139167303,-.009191326998663762,.04272417857533575,.02896574564861093,-.04832930579382462,-.09700007638825506,-.03539209003656582,-.009123052872266751,.04773419441493815,.024899519254075436,.04020178333612377,-.042437436186437194,-.008886511592360535,.0034760730494084874,-.012834489181082792,-.011082107946660119,-.08637361262607073,.010906720579881624,.001585372406144106,.05993404935505266,.039390631946712135,.02593613064547083,.01835246554308609,-.06665498505357999,-.036968952314477735,3689082831739854e-20,-.0376222687795059,-.0877389932717216],[-.009692314530664325,-.014831123980443256,-.020109046114375438,-.04152978353183027,-.07911282329057025,-.028439541923334352,-.04721527776151122,.017919873457542868,-.04373062082547629,-.008307767309284932,.008063761509081668,-.042847844269627344,.015732582480551337,-.035877042331939335,-.02027462063142615,.006001733421295721,-.011038427925582694,-.007932185915453877,.0024669467939925456,-.04717475164878981,.019484888947581012,.03891215822644656,.039176172588516966,.005379757851188924,.01139452493864973,.022134514065384248,.10262246569682075,.06064544842725528,-.004904733554454838,-.026337548147820675,-.00031049715236153297,.02147108917750011,-.02913111856188328,.04902095414621717,.04824653180085528,.08754087282250271,.07299558540439087,.01971113347206911,.05334627599932268,.06871301346372924,.008923541533270477,-.009103604004815954,.00591298440909431,-.012742345396119917,.05621460641390912,.06379056565110597,-.020641135671904988,-.030946926450396303,-.016711976557631042,.1127244564225961,.02689697887910851,-.013567479905524482,-.017090058647780196,.01477668396540264,-.010781920436714542,-.006922091337546267,-.0894284594572852,-.06723257080182707,-.026910735478631764,.03533679397000919,.16956999523533778,-.006545783898859736,-.024077365950438537,.032166605250999306,-.01745920041250612,-.04008884443894074,-.0993011973611247,-.011984969849644441,-.02764133298839496,.012259320892963398,.099469618921912,.030178783959567166,.017806737961083313,-.031243892294941327,.03695296880951856,-.062248228689263954,-.0189666133444367,-.06605621564780957,-.02680077856103967,-.012533495449249166,.024584778032468828,.056249746142491924,.041206463201368705,-.010337287195679248,-.044756156557245824,-.07239119200591854,-.005660051253971912,-.02219153290606332,-.02597985228049178,-.004856931768196144,.00224564954242325,.04804184523060072,.021878224718166694,-.031093682711296713,.03107864582201561,.02861996862032013,-.059947445075684995,.016801646203229784,-.0025822067852190656,.08443882166553197,-.003253904863717641,.02175579697998456,.04439614359960797,-.008178732752852219,.04342802310153146,-.012815929012254187,.014790808529243901,-.028622217225797268,-.048854772240751264,-.035404776408354405,.07088064527850518,.05472466206775853,.08606869484637912,.049869516112302004,.02413461801985961,.016045127809092008,.02140815268480656,-.001959434892235346,-.05275660955271612,-.0464843033251154,-.0680628131201182],[-.04433192523077072,-.054329522119882984,-.051769461081186574,-.01525353279808098,-.01070122111548966,.00928045700858434,-.006241020917187658,.02007158696040288,.0633492605457348,-.04992151146932073,-.02484793573744559,.06107732839719229,.07312670376581512,.034270104298964765,.035888286964653064,.06555881241229555,.005089380157636925,-.01742526677567887,.06410303374113939,.06369099896053182,.011936936642071773,.006555889310454588,.059351618349500423,.036170614252957374,.07314487602014239,.043276296735218094,-.0077362104397021465,-.022748848048502378,.004668960540261835,-.000690026604987154,.06393971290183598,-.014966710082811807,.0030727592791528514,.026662644906728487,.05282034694297989,.017109036507216773,-.022408542987520336,-.08708472499414721,-.09756976542087417,.021721228084129754,.05171241993900287,.03275676867724427,.017819938585971133,-.037825552779906096,-.09990658237408458,-.11007916981172988,-.0630399698323383,-.11065720406183299,-.05646397133191597,.026810997895988217,.075619829451266,.07318402769983712,.03550137712065904,-.023904618994720753,-.017844665146339908,-.1175651419891549,-.12168288991626966,-.08311427985099747,-.034920888410994,.04676645007233282,.05877383374135378,.010496365445282875,-.0022130497808088385,.05109952838941806,.024774714859440425,.023471290407304626,.01563187671646295,.017970346390513474,.0019335540535132985,.03051462142073259,-.031110061550176205,.03360548749067617,.03625821259240384,-.022201080422089837,-.023002827294496608,.014758321300040728,-.007036805867247212,.11790263516593479,.04947434149385239,.06241317330987395,.052777269288969954,.009432637846820961,.03216379281079698,-.007137568055199119,.0032748797229581496,.006789619968039357,.022973239078915367,-.03004403885091666,.09505479220317958,.07791827880929669,.025170796867169457,.03248633395739102,.00548093487382893,.04628843125322531,-.0048346651023809,.010140951369667767,.006405041468368794,-.016192674375299247,-.020769896639595678,.07154315526795414,.041811635752456604,-.0011513813928812448,-.006960922701834835,.016359548418687996,.025002761420305327,.02055238314967053,-.0015891153508810953,.03668826543254401,-.059254810876512506,-.004524146766604867,-.02276489684400551,.05569732283143427,.05883509034932295,-.017695954014236,.01434475115987981,-.020605598415603534,.02101001537229521,-.02247477074116654,-.040296790452836906,-.04055168253818354,-.03657965859200197],[.048679672604873575,-.005221078091748697,.011189809961728723,-.014770773614183955,-.034142207536203256,-.028004372616342227,.005949358010194248,.015102059175930433,.01990083591770852,.03996081933195852,.0038194214559740605,.01388991934048571,.0755029956508474,.05989103883686564,.07551240437243657,.07375628206272977,.10697289779941345,.06874076246956287,.04803132511577131,.04236624977011188,-4202677860609336e-20,-.012109444919293957,-.011318629446975792,-.03738162672947794,-.02154842050017325,.018481632817077147,-.005201334100467268,.02747650575675644,-.013858276037494007,.04372837769145382,-.02503235093554558,-.02968671709465069,-.019073492339460648,.03349151596135548,-.06596389946117143,-.06234163555717752,-.07562432809243196,-.053585585183758444,-.02877361255805902,.00662180701734881,-.10035769919352369,-.08904646094198457,-.04613980400671794,.07297541439744247,.08725084363158328,.04516809237144165,-.05333664579595656,-.08240943925066489,-.09144443337302081,-.07442562311122422,-.092126329411899,-.03767463605174012,-.005652530403660115,.067513154505641,.09393421046986968,.009289669123771788,.018516434326696123,.03729758179933857,-.021567249747191534,-.03481887723122783,-.02178280374647603,-.02580882232156104,-.03685316311758648,.005007242741758529,-.005486535063339473,.03688895314986719,.02030363893313307,.06234970870159195,.0385172311532573,.06730764599156495,.05861634829822531,-.00421777044282462,.054673040661478024,.039230731169713394,.03139249117871078,.04391943445423645,.043292679240196676,.01880512733348403,.017382645623532596,.05966162401002324,.03369867509664016,.013341888531181467,.08421015245705174,.025430986838139963,.012904413846026745,.06543112206508994,.011197289986359183,.029135622794168346,.06254098788565492,.045382776129875506,-.005346260396196623,-.017266787058448405,.02042017407557469,.013123043389498143,.01525904905961481,-.018730258477720974,.023824284687915143,.052818399981128895,.015447226033022343,-.012489602024893638,.01468373434072245,-.02685260219002731,.028989118420292514,-.004895237991038508,.024941536558213226,.08007482591583316,.013282727442137699,-.03041996091693562,-.00770586692939193,.005761503932864273,-.022997491985162988,-.031813252703541905,-.0074071331247387365,.007468576216473739,.06665166960870672,-.04318959412870925,.008748609431892974,.03560748124179862,.009344912969746919,-.060325944063403136,-.02989706486831599],[-.021246880546086595,-.02220383648791282,.08682720127877484,-.025228269953020035,.04697176265078679,-.03203270556745305,-.018784965671998312,-.004315941436901353,-.0418268952943677,-.06928924256853522,-.008166651625465454,-.017438229004257164,-.024335471310471764,.028654380266214648,.07206649188292012,.016590540091147674,.02463322903508903,.07813955636599351,.056622200409004196,.037502807115330446,.03784022947009699,.032000001430608604,.013106472326739116,.012369223564270927,-.02870590297489497,.005065930160656651,.013853418541047425,.0005595304094045961,.02032257178110093,.07527603584001831,.09191264610795653,.11098583412431406,.07821683872330536,.015546123816145365,-.01174475399733392,.05173799606146151,-.012734123174444889,.016768985632801714,-.04436589860231249,-.09955350853381391,-.050100281868429075,-.0572477447691047,.016222179759918118,.06759965716981267,-.008648050879736989,-.003286883309752117,.008592258882527452,.04676794057539935,.07279382616523587,.04529496705079871,-.08482529510287962,-.14860512013508548,-.051316060883006345,-.12479434422523886,-.08507885670469298,-.0057128248462955805,.04416255206378315,-.001048023139082116,.030855043319812047,.035139310135952784,.07227732775752435,.05391764845275339,-.04467152779953301,-.0826848844602535,-.10599899450799834,-.15447137644238773,-.011133194850090913,.028927718717327938,.0038563782177809536,.01624760202616901,.017415917794260313,-.02140723915263775,.026964006691972034,.02813075759211585,.025157803866096017,.037924085124599397,-.004684964387390508,-.027697413203631536,-.041378992383391267,.008761232888241332,.0052052300046328374,.043900410523183886,.07761021177895132,.023415755123284865,.060860467661889836,.03557434378112907,.07192757763022538,.06407092682092731,.013357966646117945,-.04836563617815281,.02979302149043304,.005225453074711478,.001772380719733067,.043271021300702546,.061871883282456325,.06025004123933597,.005922077559217299,.06727505392941442,.10149603554983715,-.030661903793952457,.0008942860474676784,-.05764531131175226,.03329484629877765,.024005678533927544,.004916086291532833,-.018549226060485483,.028088385775127147,.02338236259357804,.034065125172518744,.07678838837073973,-.057670084152690565,-.03452764926869298,.02176016114763074,-.07233366259122359,-.0005361811817523945,.0295464921598111,.004352814521018584,.00500966267528254,.0456723326635872,.027025414018034634,.04757490956660641],[8460801644550719e-20,-.0005145860366282239,-.0006558334416083833,.00020678855120534164,-.0011087422000772406,17282608213937956e-21,-.0006913929945738893,-.0006775346073245893,7461334647233808e-21,-.0007052658429251291,.00036510757807054156,-.0002261258363614252,.0008373312473602332,-.00038556424752306945,-.00020677490024442052,.00010703864033769633,.00015849441156012833,-.00023178848590595102,-.00023816000343533997,-.000420628080187814,-.0003589245103967076,-.0010410723256383952,-.0007099479937469275,.0007230031202940905,-.000247355607939273,.0004891872672126707,.0002492378465157735,.0006066898040272925,.0014982106812944096,.0005361975164212482,.0005008694101298963,.0008980687784829119,.00023875283911756195,.0001569025840717983,-543153422108561e-19,.0005617340799662848,-.00015464198944174475,.0003080961595964592,.0010477498266872332,.0005403071450221222,.0020027631503172446,.0007369621270176263,.0004183775897850378,.0011534221243659493,-.0014158435817800425,-173851858713929e-19,-.00033269545836868853,.00025908994851942674,-6789517531419209e-20,.0020025402967875014,-.0006012096182389272,-.0006372877274755245,.0008852883436926973,.0005138523171237946,.000800769297987905,-.00021374130033396943,-.0001276378298146058,-.0003229920114812129,-5546376125890873e-20,-.00038413195736432953,.0009809574637124063,.0016769261261450272,-.0002368271084003809,-.0004713132716675089,-.0011833841321572391,.00011652969229286516,-.0006978075917232144,-.0008151621640403311,.0003147153846476706,3297776009406636e-20,-.0007426811784148751,928343749358883e-19,.0016276084011049713,.0005203934741388303,.0003285769128429112,-.0009091443157508853,-.0006627394979500014,-.0004942942568035092,.0008178710324047572,-.0002864681649460618,-.0004777482209132834,-.001128700205033445,-.00014958608778612575,.0006772790983836825,.0018426861751217457,.000421274359649379,-.0011897602501548844,-.0021020944752171283,.0002586250187259949,-.00028164777099942,-6787128829004174e-21,.00010673321891338397,-.0008194673362902514,-.0005065578031113356,-.00045739009384393806,.0012233134687435353,.0012483089084911257,.00023366693745787998,-.0004965382203324757,-.000604310399740543,.0004885631208034064,-.00039402287572039285,-.000302829824259096,-.0004829796844154216,-.00045029888856688155,680651548607275e-19,.0002938081340822067,.000807500675520309,.0010027117298195727,.0012117980796380462,-.00031499882641429153,-.0009661544954750814,-.0001652076714513881,-.000259300834581741,.0007044456759483508,-.0005152497160491251,-49950991088697216e-21,.0002326983548252299,.000981280700583384,.0017427389161336626,.0012748954300746823],[-.09216726473640563,.005672874254759814,-.009374512524727896,-.013062003758843106,.02681075417494043,.049001345358430204,-.021651121797821183,.03700115656960461,.004218312740031363,.0018620748056430826,-.00028650345860718393,.0053573451925248185,-.024952282021024397,-.053963168016106317,.02220135440090492,-.013351422685652972,.012385499720994092,-.018031103648731638,.025521909572096997,.01253732595969557,-.011991546378321899,.045186572016900094,-.00943350838844243,-.004418429309194449,-.013784342121793192,.025926061962200528,-.04105356169652366,-.03889277471178329,-.03989567459908096,.03544146116317792,.023677237357549445,-.04102177731015667,-.0576956088544048,-.01762676919993638,-.020216604797755007,.027628137586160582,-.018841264850454086,-.015264367494595166,-.042662519918908834,-.07663188087932943,-.057528782374830695,-.014904729302692682,-.0668977800017137,-.06532989573225445,-.007650565220560346,-.048586565493310384,.08598179761037544,.023144594932235765,.06950258752501162,.023606740362224744,-.03701131089094889,-.08646362985361913,.004859332031582425,-.04793315203337142,-.06520239439795136,-.008308746609917553,.0036048909369455263,-.014176009427905843,.08652450016441214,.025019184064985066,.18351010232889509,.1773063621666941,.05264594509899273,.04629637404986542,.017268040614808,.09174432677718507,-.011476730811934746,-.003109830521472179,-.044720850821788796,.03519498456881187,.035161502690833665,-.08522566129784649,.05912598081096809,.14804082639627478,.09489389797496472,.10021021442994898,.09479988677758025,.016819487190214488,-.001620802251457232,.005698369852643104,.024660235147196684,-.001744068586085468,-.031929007957278016,-.08234588274111157,-.03663187750709784,-.0006056141390904045,-.008492377648402303,.029092555992398725,.02173362039642967,-.019868686758322113,.004937734271252584,.0354455889830066,.03565950713563679,.05730187910824103,-.038291855034349676,-.06160379000151402,-.062081937237464455,-.043689034974759226,-.019286854706340784,-.015927077135257463,.020688030294743746,.006187498022143166,.007954475633681643,.03821008410301443,.017747129076694818,.018299098668275414,-.07199389072103002,-.04880614394384078,-.04147751454154017,-.07419601483953683,-.04357005031946174,-.024269573468651304,.048012036866646256,-.0022007186161765308,-.012800711217039476,.05287613915145286,.06224964320115732,.02534211937322168,.002870857368936025,-.041475224097980136,-.016770635320925542],[.020791522234705886,-.026685059276677248,.005268388136761268,-.034938985350819116,.02160913529503082,.0727598338409123,.04138866266308179,-.022050570784842675,-.03766921280042098,-.038135589145765356,.05613806948326967,.01870086519715047,.02405327287113124,-.04452154836720787,-.0072802659094019905,.02552180649073373,.05589803239066057,.020086252624459025,.022257708387705265,-.04311318573814257,.025460765149070363,-.0419995861067736,-.022103861342994947,.020436961749637446,-.008910414215047568,-.040754212701411704,-.04498911160980137,.014513662447400134,-.024972880286720952,.041775700269714146,-.020617899446434662,-.027451770104515237,-.0581210200819193,-.01972807133154101,-.06486356953178196,-.06542924601752108,-.034021394098613274,-.0701540698146796,-.04718580146287146,-.06686491365147076,-.066928175305741,-.045242116038150926,-.04152718803585803,.009097191551587447,.06656698762341313,.09217912843511486,.035601037862094155,-.03164618371161126,-.08485439852600936,-.07807191845559307,-.05806388905453814,.02743341651791674,.038430683267361994,.09354518012005526,.020820155765660042,.053867582404908895,.08012680497450528,.128232460666299,.10909482374666421,.12328440515687174,.10908470088869585,.12750021442141796,.08982042044320541,.13206669887005298,.04099900325556686,.05858962262336414,-.028140612810618193,.011014387203399659,.010818445027512502,.057563125740994966,.04345415026084731,.0638052153810197,.039304942349605,.014669342715182604,.03107259575721156,-.06425374207488327,-.058945218947391416,.01193269465678194,-.0881162259818974,-.1313024165264915,-.08377233239698005,-.0579417230864853,-.054054451777421325,-.05288439264323012,-.09093972499912327,-.05418126174023175,-.04856626244904953,.04176168440992527,.05250415894531329,.04064045371279662,-.017347415771619662,-.07671975680311054,-.061854859388876034,-.020823169528688797,-.06226645510778999,-.04770321461094979,-.0402273079486973,.04690122089125488,.05752741262783012,.02543790657840345,.0699565285200473,-.008133729840010097,-.020791993788821496,-.04000189041824075,-.05758450686937977,-.023269358988961084,-.04372684111076177,-.025274229592385768,.04788187134166745,.05511309053827109,.04125970130982366,.030577926161307056,.04016185297326795,.07732591022750637,.049074284090185986,.02071832304983759,.05262692548423558,.05760426683492389,.05105831447460146,.023973320452055122,.10154029156391102],[.03864173999025863,-.005024459154197372,.0046136555572029725,-.006758445896816456,.03142115173410135,.04386382071316666,-.0015664513032071729,-.08058753858786455,.023010888007158094,-.031974497946145916,-.045852604775241584,.007332161957744651,.02453823637079698,.026493986359803483,.012817297004288597,.015872668762235975,.010885319603060616,-.02502180918416584,.03751411496590415,-.04629455457646226,.011215007929641349,-.02865689693597509,-.015741373908333564,.010582364969449747,-.006024534095056391,-.002163846321228083,-.012232405683626778,-.038573436738902116,-.03419677992225159,.021758828506470554,.00407014029546543,.03301899444394859,-.05170384121679726,-.05329742286319397,-.08798696523467905,-.03608851783262798,-.024713800986492014,-.04555846893830806,-.06323440947763162,-.007987584469683166,-.0012689882118882348,.04752499078846824,.014455312192059422,-.018256989781913674,-.02767798871819263,-.07330541991854427,-.06217844683471194,-.05604613854841679,-.06158257439478332,-.013981639384921803,.03648613078494939,-.018426595901044535,.07279675111271128,-.0075590705083293415,-.024644110824231222,.06168186724387318,.06066863697443063,.037713982535211056,.07805493494580304,.14418916995002865,.15559892027908628,.06752163228865085,.019945580585251987,.026658612914922927,-.012069655500885873,.00574258404858074,.08314454812010942,.11628270848199979,.05399715261215071,.07440961182737355,.06702872719283837,-.054231046134796825,.003903035068154397,.06243331293519696,.025820518574058156,-.026726551682383845,-.010193345611774624,.02041599398378499,.06039505199175793,.011092152032282707,-.04696569874087772,-.07052421722415371,-.07256180422826489,-.027650589315538845,.06844993348911974,.03300031824163617,.04173629864404055,.011928446975795447,-.054917381191681824,-.05165380226812591,-.028773541890526888,-.03745261687039528,-.0823400638544093,.012374637017067137,-.005892533181481099,.11104715646061467,.016941481040333578,.03319422535043131,-.00183737049680259,-.09505413307978339,-.05896573649709879,-.04023330668704766,-.04640859258616045,.008307685564098832,.04477541249474294,.06358993235538837,-.010508998580612362,.06609405374482503,-.0027753074050847724,-.010075721966416776,-.050323575669113996,-.006844421670559871,-.004147572812252735,-.0038945396282382776,.02836682825451703,.03208501608286404,.029300197945124618,.003228635961192085,.07138559002076088,.02372642976936252,-.07125066539932244],[.10872537789851011,.014278189525074661,.012273877115053775,-.008139254327333888,.05705310470537752,.042321601806311455,.03332397665498274,-.009469624318396694,.022832248497195895,-.0603082173573287,-.02938835381899139,.04786295879347083,-.010046448412779706,-.018988029533582834,-.03988555209026971,-.04050405538359031,-.014328694386006549,.06688800978376946,.054680567071356045,.0364680270877374,.02742606993050216,-.04115664609138166,-.07108379251603708,-.03885814806782932,-.052404651812680655,-.0374397938738891,-.07214155372367853,-.06483198436193927,-.09337089867002601,.012492784149001596,-.012992603451236887,.01282798497239726,.028495833153019318,-.08896741990212789,-.05914492313221364,-.07360362887442543,.0014228258212915287,-.06136558081649521,-.05466289158280074,-.10167804607960763,-.08634908618382056,-.013058338568626704,-.020967276930948797,-.02496861635421278,-.00867806660644585,-.05092789276026935,-.012321465172884127,-.00979595224133116,-.06038602061828513,-.0735660196992905,-.0989009527104654,-.09504491325304382,-.050810313973777735,-.0206393932988607,.00680088067324316,.15285717060929618,.09754537287272631,.11067705492765795,.1122942786041081,.18427633371321137,.11307184167377732,-.004571622066214404,.0064434015987714695,-.052854132609023295,-.02014616037541482,.003623472946206449,.05573667951123913,.046045942922945615,.022877085053644025,.019701551970110434,-.04450996062494739,.026260060577445368,.0012791409413432393,.11282744913606092,.04595573753980184,-.03675626681806435,.013792875001360963,-.00031411118081339784,-.024157026907081533,-.0076891189431453205,-.018310688556061716,-.03692450276609687,.01587681789027176,-.0007429606529948535,.04435085579041969,.0935497347568171,.03410662005005499,.007466695802994673,-.055729238389459056,-.024914950480349144,-.040394064221819,-.014479423659402343,-.021786228199499567,.034462836766090535,.019018078277086774,.019995937468091644,.0572642476760353,.04080735202882977,-.02838261619198605,.012260696627029324,.036426534866617746,-.022902539374817468,.006834027472864906,-.00954080807350638,.021714345796159974,-.002425244709437491,.026186714013621812,.06273849289505809,.013100065944167471,.02184527152625354,-.0064556273106626955,-.018059624197655194,-.011501119699467793,.011069356592404581,-.0076555726632192645,-.06037328929268344,.018730638535199164,.010878747575572504,.03931333070539912,.05053332226780753,.030800301775522385],[.04080290158618271,.06510370589054523,.01571760146393637,-.042967026067333894,.053812288839959845,.0747830215115568,.05711207351435454,-.0020897181911366594,-.03144415500872153,.03665938914354934,.07957790238680498,-.014494517062943354,.023853876703959682,-.08596023447535846,.016421056516635474,.05309898052839089,.04458731931940648,.07578738303768207,-.020575193628669223,-.052303363133645836,-.002712553846978341,-.025364536060143633,-.07556410915497977,-.03984463586009908,-.03550376583444041,-.0319829168047286,.016275057515532626,-.014982688136025823,.008516287958303783,-.010415191123769537,-.08024510767765138,-.06893386941499541,-.08211726615138473,-.10868042731437648,-.11517402154338535,-.052169980652789334,-.07800261880307047,-.08474304362245977,-.09007941227908206,-.04556070531827033,-.09913781973350742,-.08993111954877482,-.07175672338473282,-.1011983905001102,-.026108924802754015,-.02895558848827974,-.052952747867330424,-.04065101127850694,-.06240367564597241,-.06253086782656903,-.04763968385264847,.021549892035432196,.04201174254152587,-.0014168202056091244,-.06001771015393874,.050238665733522286,.09441329210487574,.14252847594850043,.12070740630935128,.11697697498229397,.09897565303720446,.1284055582162842,.1092645611216749,.10934335033079282,.03726929825860131,.022780470067651784,.04447390084024124,-.006059846752864813,.0061609144853983725,-.006476865881617416,.03487043257495687,.039379809714831654,-.001395754383429603,-.028962960938971525,.004656918959700274,.04372751684079228,-.006941018795027367,.018088182930952126,.008202394752377018,-.009919468949588936,-.06030057619660496,-.04961731590236345,.03203327551047325,-.01701144350548291,-.040658744671612526,-.017714249349095157,-.01721059858888459,.05556975142409678,.06473217242560926,.0142514421392548,-.026792644729731044,-.03761980342159445,-.03545401936679521,-.0033597142606219474,-.0018841722971697202,-.03513935986915321,.001299552487248638,-.020445085521288382,.03742804586573839,.02131329253480936,.0546080359405192,.04453808079351196,-.02550264011509991,-.04507200092397022,.014585725040689751,-.03178054387790277,.006885611917918824,.005480883940431572,.010447966359669152,.03600709327755583,.07297766428425097,.008145153264843608,.018677942155355585,.0022220414820895706,.03813396089414066,-.02225646621983918,.01847332467627509,-.019158933928994693,.05386403637184607,.0041178771402385,.042051744426760795],[-.11959471143292481,.0004690887116434485,-.01780653758387274,.06002898783096526,.010482881406572234,.1134097871181696,.06097200177585707,.009557314062262883,.024171870288714075,.011559219957486627,.0740943226841755,-.001533026352483688,-.042433991686828154,.009388770328004534,.054396766959822755,.0498214705214945,.005916311159527968,.023110497561564927,-.025327700927906302,-.07139186295709547,.002811649103161947,.04063973608827068,.023985187089475772,.0008059303536148248,-.01729410430381438,.019318061091531672,-.0517856314075248,-.06040231096160379,-.05163086528262303,-.026410009167490766,-.025387094238179267,-.08670514848433176,-.031667117402875984,-.03259729996049833,.006077775102272545,-.03085014389500896,-.10889563458102586,-.05926434014284302,-.05802675139101486,-.06555094025913953,-.07638820450625015,-.014694324172739949,-.1161029182457609,-.13336448135124818,-.013871869353886061,-.07135491460970073,-.04629579513747036,-.04634125713368373,-.05980389795115816,-.0556899798471754,-.08875207830049796,-.009276685221718137,-.0107658717547462,-.013689713283032208,-.05895359673813014,.01892677396122769,-.02728217897139536,-.039857478520104385,.012549232916158878,.010688241731306974,.08031916593030144,.15262100299518466,.08696066131931049,.15252525992290902,.06946387313667823,.11198174180776471,.01737147006474421,.015812778630970917,.03280600378610399,.017746821396218554,.07354467313923953,-.03211026037791272,.019566763627964195,.029618292548164962,.0387862970556503,.03262787177258765,.0698167755782568,-.006250820231163465,.05145841556046568,.030408800781210513,.04677747957301087,.04000213429652272,-.02008807639444515,-.01263470418907111,-.045249735132798174,-.03425392551351006,-.021875531092695553,-.04599854942342784,-.02416410768080165,.007563653039730833,-.0009142181668628079,.03570271779785687,.08857497469018605,-.013734861595105412,-.009803321130600257,-.04282565326207903,-.0012702256209832369,.012700494745847814,-.043166253351587705,-.03226823345161638,-.0035432592129699403,.006758047102586359,-.005345386242264896,.023287783646401855,.07429272607294657,.01946652710854537,-.017987962764354493,-.001252405687738014,.022263654018090235,.0012391427069160937,.0013565429618937579,-.004671343840151294,.016578328153419922,.03658420847603991,.001097170617763564,.011356767972489225,.05343021429518496,-.0006844437404776721,-.0384483419844764,-.0005838954999276211,.0032910175381761254],[.008713675026964234,.021184676494079766,.044118373966988256,.040648025991879715,.032447241186740375,-.013324459836625741,-.020142424050336942,-.02588248478753286,-.002484057943328691,-.019010478599687353,-.002112799546736252,.009101832461506542,.03962569379787331,.017970409804111777,.03736015107496688,.019343344984558475,.014756799698268486,-.0010528464090698991,-.025961909366916235,-.010285595270832736,-.011165374267784578,-.0019598758278640237,.0087081620119245,.03449410070636509,.02865225471091399,.040299978182407034,.03337434307105071,.05034954230415309,.006362595668959546,-.0240118392919262,-.04223337286626337,.022057516258499003,.0533764435270162,.020620147730700943,.029540439011999847,.057651788173259826,.06797909193338404,.06264674601786877,.04924017393588989,.02116991924721654,.011453866008363397,.010299220942533334,-.0018357416874219962,.05592957343428269,-.011231564367321699,.0320420657742736,.01571280002325131,-.007003925149084272,-.009101648993736014,.016511365940874906,-.01970491139189258,-.03909233124056194,-.0457710811076922,-.007769161612573537,.04986245855355674,-.06736549253306108,-.07696307063309017,-.040595361000206484,-.030389356872258563,-.09251433756943767,-.05721158869646249,-.0009543629800425196,-.045682047502914935,-.03681886436463739,-.06824350943417826,-.027587536268803375,-.041645167478661045,-.04303078919819505,-.05449772220141379,-.06863844729575456,-.09778610861618825,-.06571331208133178,-.052881969043814835,-.01339699229959858,-.019033794283482786,-.023493218289815446,-.036063450059278426,.027782266928957237,.012906654330914466,-.017337278434917267,-.06448794154411731,-.09983538378171773,-.10289791170276469,-.06466355143155102,-.0641236728999387,.010795364389364459,.024949528393138493,.018119888699965225,.10433442726226234,.10219165136667126,.013336681266255849,-.02360008017939873,-.08988775587348374,-.10446013110840585,-.11164381762372182,-.05155176202653143,.04526691930508824,.06967716608314986,.13697123941472913,.0644828886074587,.09855119911738962,.09360636141971522,.037819160682802944,-.0035166197905182836,-.0028484068050251173,-.03160894316546914,.004681194691095181,.017171967845917853,.10536533016879272,.08251439894034036,.010270426109688261,.04723579496187133,.07902270242935786,.07371130315469251,.040152485755633946,.0776647935813626,.04444283404941494,.014455191975205124,.022399756108926826,.01722469965046314,.0647389641188895],[.08617181382542352,.04327634472227127,.03005718229356319,-.012272805932473568,-.008449791937591843,.03319158499140917,-.03472562226898855,.018176702115917775,-.009712778176689849,.008516618232330835,.030226931221559766,.052416098527926294,.05166883783712091,-.013910386317496911,-.014892754899464261,-.030204392408315697,-.023348595772105338,-.039154056656942125,-.020299148174262385,-.026870214226325,-.021026881302678255,-.04834225284189666,.05021602412231759,.0017508003206529706,.01784781112040023,-.035663337208851044,-.05570136182295937,-.03456550109518051,-.0001449409970588969,-.011843034224678937,-.030725274086672746,.03718111537252371,-.014334667924480585,.026402505410657532,-.02157219826244711,-.05078457903014037,-.006759113645949472,-.057082366222224006,.0016645285356211514,-.004154696072890563,-.028755773827423173,-.03714082137578157,-.05896669006968293,-.016029429438384403,-.0031721930051920033,.002307758545402605,-.048021525210782345,-.09337631184167036,-.055542556473841764,-.11398186442053326,-.027456752012806465,.016614108182758672,.0027741155498583747,-.016348951668857664,-.07214697896586968,.0015395126311125717,-.05268283493477871,-.0603787275161702,-.06826686213483847,-.03677188567276046,.11935191252954988,.10244934755298962,.027542982076475292,-.032070419062542696,-.022385148133489435,.05628982360290191,-.034119337486394785,-.06968689573658336,-.04995580272086168,.029733455414129237,.20068856127367213,.1162085020692212,-.04341025186306002,-.003059378302219598,.0006319591891606677,-.001555344046955287,.06527728549440281,.010466423234828076,-.020040852081297265,.06175562983155491,.12136556526370923,.07824718717009237,-.08072517073390352,-.07507741233797936,.012154159684612222,.036821934539862315,.02472102052087196,.040715988579243925,.021622540244536845,.038658271107198355,.05257881832712866,.08363101810624045,.04788200302645329,-.07515681569436888,-.050687783633637906,-.008838972961667177,.09103482074493136,.07844724401290881,.06227592062517176,.060594909680654375,.01693797817353428,.06408103556895299,-.014547815241575009,.0656581964195679,.018129490859442446,-.08798530089434585,-.026622130825924434,.06088617497349924,.0777507074361337,.06643787459889448,.019421765119352175,.04850472328750237,.07041372195878251,.035827424258235,.08354841732227908,.06002781338799555,-.005432499769252413,-.0020892485624801555,-.03051225054284081,-.00047303040700700464,-.023511765584947494],[-.019836270599180916,-.0017613217539587485,.02098070406146591,.03244497729016334,.03548236071638519,.05146391412276292,.01387059443680283,.012773320795543788,-.005608141014861109,-.011615184428147185,-.044318141985502046,-.060123468169623585,-.01477741680790809,-.0053582542779810755,-.054379500064678565,-.04137798510918636,-.048976925694358256,.07695341809096971,.026914330698442304,-.0014016954910277407,.009746101971697257,.004696377813778199,-.0069130491706136665,-.04062847756349136,.03412890824209289,.011113734772594072,.026923522254639856,-.03490197019912518,-.08357245347477754,-.017956322789516803,-.013806163282359438,-.06239361835505905,-.00414268265889578,-.037637167036336384,-.03772452965858855,-.013774694560670805,-.05770481742039068,.004823649887185999,.07228227823302627,.03216188284683628,-.0657449299254947,-.04363528028110784,.0002605629282635656,-.019142520605292868,-.02840783350587329,-.05792903864912054,-.05076593603511028,.034535717074437706,-.09219249976550069,-.10532839199459904,-.012076014852148213,.04751293083194946,.0020511676860901244,-.026304839763800526,.05901448578643173,-.04121884738294615,-.03790851157360316,-.035253683963737445,-.003764225518756617,.1058253214787373,.15061197856457278,-.044965430671133816,-.038672944035853724,.032859085087083864,.03683642309190256,.0915213342846636,.06793034970435255,.001657465766571567,.011255029837672278,.019714575278699853,-.046029623685046345,-.005181960580967995,.13027259585766382,.07624404176215346,-.06253229991188602,-.07358399113535818,.07717453347506542,.04943265060886841,.03586444426375148,.03571967974989257,.020318474287435453,.02861748003954917,-.18444657518134203,-.027969189014098672,.14692467780203242,.14809587852238354,-.03290596643929547,-.022816759205720398,.08164280224260032,.0733194247466878,.09655155843427247,.057497490294592224,.019593324904571427,-.060101281088941985,-.0552897852606532,.07775252392870703,.0822311883213252,.043012682164453975,-.08499854192911704,.04722674641104155,.11708089871954172,.07395783294658849,.0684819210097608,-.025787797068816443,-.04254783349952723,-.028797349310348233,-.028665140255539324,-.05046502523977903,.00992827272845339,.007479525592792906,.035767022417524885,.013422682869269679,.059916646550554516,-.017252353019081054,.0001402545394057625,-.028232578424891228,-.037232130930961754,.03807283410302556,.017200727451423696,.048123699773181455,.08287494291017442],[.00818892304744609,-.05886162055500953,-.043961481598665794,-.06317703541286583,-.018314195969373462,.034878450378990955,.03530417579745773,.014293668892683664,-.02745691650939293,-.06836762892522105,.001669119251847942,-.04096794591587138,-.03943941310209053,-.021637978943057967,-.03768429294580855,-.017747783335439818,-.04228882458473746,-.001817664232848959,.030934243801926706,.011733255516551085,.02708984163398926,.0017191072696037882,.043276004610731736,-.07253261964783098,-.03022383631361848,.021071961346727626,-.007414749749440064,-.04392522954336239,.020288776715248,-.0345272375860235,30471360021155913e-21,.026067397032741996,.0885404647984061,.01413941347644106,.02276639426056372,-.0018480555055750275,.04267579932875725,.017054471283286493,-.09674613723519468,-.10757348404679792,.07075487390653942,.01575558139579953,.00966924786388477,-.0032289840854645077,-.015101060431773538,.05792600561794836,.05010944609735675,.03438493002343132,.05420170443576617,-.15712629885767235,-.107551002318037,.05421585541694029,.15265730024840482,.0558881196453126,-.09594140127704004,.03328672046334586,.09353086897835676,.14384249052592857,.12025171427727349,.055496873043967186,.03628529629636333,.06683307959286867,.0421613826116124,.04758799556553914,.02186765443229803,-.0564119641379216,.06760319433672685,.03133829045722296,.050713005156545185,.05214804595767879,.018648322758803917,-.05075915769330168,-.044588001217457346,-.039312995512573896,-.059936417610193665,-.055184693439938245,-.019957035127630418,.050192754841022036,-717573958276263e-19,-.03309170204885887,-.03442810497427318,-.03441346579020828,-.023267082967762434,.0319018486063799,.020238538810505934,.004222146677161306,.015602237108089854,.06084709170047344,.04140185934666961,-.0034146015221089565,-.007455996106488949,-.015893641385376203,.05639235196240071,.06335454098347429,.008730447744839546,.013014118991186936,-.0020131002441534374,.045231849909967176,.03537820748051668,.08260029968489999,.03371559917052212,.016512586361955336,.015814071825167364,-.01653699310881645,.02238828804819251,-.012153283754204335,.024539743316687932,.02310850403917898,.006706414172729741,.01196006995554437,.01808564781799793,.022564539714186704,.029240080645026825,.007003142285189473,.04281931207220657,.06364628604735939,.07144491169237732,.02500243037116163,-.02988386458099207,-.044839473616139255,.0048106139958749294],[.00760442586653437,-.031647161439197435,-.06317244100977004,-.07449531381563927,-.018994314341887673,.052826629441971945,.03289022542006834,-.013629701917450165,-.06480780603190414,-.029393773930843553,-.03647121361581636,-.00982217686466173,-.03512116201717283,-.03943473473657854,-.028818473185370876,.03850092276204857,-.004932877519617365,-.027624833158639117,-.06784686644599558,-.0011073069182334881,-.05184142360008933,-.055930573972024514,-.01741185166520046,-.05752746679373305,-.05549930480521064,.028375118140619545,.035910848122856304,-.01496101773521763,.011606597964401194,-.007587669429230753,-.004507535673161027,-.008200297874906939,.013779697793775076,-.050073087994743797,-.04908451276428849,.07006315982706533,.04121129065965178,.04422191240489891,-.09251015654230017,-.01724590043261233,.005461449751680551,.0057317904111747475,.03349276507968521,.008614135027589438,.019265007144101023,.009144157843299215,.05844498925238964,.11212586773198896,.007500400004536165,-.14040933702091665,-.13224491934624966,.046900879586457916,.04311888708201805,.0825796852128937,.0686837735057957,.04131767063077158,.08551469441891645,.023787162317564083,.088925450535203,.13628690428327328,.005469777102713718,-.08654310842652521,.025964600319029363,.10587654052203503,.09445961137566042,.08134630023198908,.04159220432646193,.006681788783911099,.07767439441201977,.005668387634230013,.042096017073306194,.03219130381739435,.030452658585607126,-.02598425675341986,.025271063575447547,.03421166569989925,-.011964155896605516,.03707652769480256,.04508649436861286,.005158775637624485,.02880706384910163,.03859972049308148,.02487551579682267,-.01389164075174086,.021755723908671087,-.0653584518175486,-.06105788760631323,-.024592482102494873,-.007532843708099354,.019986689878947826,.0409091362015699,.04043701509160076,.04003479926373195,.018812605341074366,-.030276192569776476,-.030270565458533134,-.016190643318727164,.006809905422805987,.03791648200060191,-.03831931521841855,.010306777237133882,.015829001844016963,.04080028213047039,.05615449330992818,.04786297945430712,.03428833649096044,.06068149198297738,.003270294373098462,.0013152591778692133,.06095459598839015,-.04079173305503802,.01618341575570305,.019528209635753736,.028893550793992792,-.0012918699135948258,.0346180233945956,.04340594035748458,.029089370346889853,.008826828565163286,.018259597579594153,.07537311546675556],[.027450771793035074,.04126282466496694,-.013144559153806662,.012207909150661903,.009247733333020751,-.012848538408191307,.004563559148272107,.010876267701812489,.02890459475433247,.02639180251198528,.010732731929258464,.015032366451770748,-.029908421422182082,.021411606012816192,-.05753677375191925,-.053416159980357834,-.04886557638257496,-.03557046979039176,-.018461415692559838,-.0029790588112649907,.032112270223907544,.05147761207519731,-.005766248282522986,-.01776658852787523,-.028238377182112806,.023528561546172357,-.04216007246124067,-.04103238959388249,-.06680999261373205,-.039632149520821544,-.022226688774540718,-.004114916018868875,.0323023232427716,-.013890604091560638,-.03427627511840174,-.005150274137865634,-.021066308656931813,.022151630661472133,-.0022992341581987014,-.06276963889688388,-.019723620835675727,-.0576912753104453,-.04237889488319811,.028983236593136813,-.019395597488888486,-.02933154219988647,-.010745732705029043,-.013921448513401852,-.029609437928951193,-.12537702206143342,-.09561718838487063,-.0351292415736329,-.03998248182255221,.00909526418711778,-.02208695574404841,.029136077983963546,-.032593887678401656,-.020183882523267208,.06160204188874492,.15458403910635235,.16957224934392182,-.04042793884543613,-.14425377583803428,-.07164309486545244,-.04225318733320568,-.027875249558229672,.058879183410993005,-.00047065192114704134,-.043920137358857254,.05496654067473021,-.06929662538702983,.11118740085537496,.2366565621922726,.12148462555955851,-.011433917074149466,-.048194932808641386,-.07932763811502898,.0017254253058667443,.03770882496384771,.04218216484319646,.03582981578648879,-.07335789881658973,-.14576211923026078,.04829033207796394,.14879922368454307,.10064792412919202,.063705043016025,-.03069261405644226,.05625560599073562,.10255361685355899,.07860427344813493,.0164658420906807,-.005646379854723214,-.13298053803801668,-.028765330682998365,.05939355800317566,.1402292273171811,.011410410356375363,.016039694083752262,.032382125330787596,.10195998512893362,.061382477156473686,.08241173829298107,-.06366641677064028,-.018779258750025916,-.03836593373368899,.07799341786515777,.037853307835213006,.040996995997873285,.011082725441736859,-.005664492210165403,-.014754708114634627,.018864758145484002,.007526786811695066,.014018215345551104,-.010120746615713067,.019767300172685923,.0399406347657522,.09926052195500677,.052915278088062984,.022179211937403773],[-.09716085296718216,.021642032331918873,.029135209902749426,.0139993150458783,.059316507135864754,.03306747497101331,.008564629143824831,.010286012651575784,-.008381755344500467,.018753974201751927,-.03037545805880196,-.041904429008824615,-.0558622557378194,-.010903003336047129,.06826456724824308,.026035515966818988,-.0012923504068929892,-.0017623356640995083,.005468527639103056,-.02175560359369707,-.04950565304410716,-.06611244762583776,-.02225249148492922,-.008198283451731694,-.03736728147972175,.012774986112044792,-.06295062845893304,-.04504525630414451,.04800146300475822,.030007357346820335,-.0018969086500039145,-.015723154153853357,-.05512006118971773,-.012097061948313372,.0026362460701923537,-.0726328280791894,-.06887260163152192,.017772853215430318,.07233870406821721,.018535361160719493,-.045281275098323914,-.011332122576621917,-.02728019910996744,-.05872320891421001,.02632785363513969,-.010818050423826983,-.030610533234455353,-.028512931740957648,.001248886833917797,-.11197453226805695,-.05526985876053357,.01115586891047237,.008222889298059633,-.03230625526930565,-.01502375948544021,.04938277301919282,.015328141296235664,.03766238389185002,-.03501302001666237,-.029449621040367344,.12073107144262626,.022860361772779912,-.023256473556698243,-.083648467631806,.007400232745203489,.010004461021878228,.09937152299723848,-.02522178479106592,-.096640580498929,.05309425060391121,.15893756445998802,.03338710955086838,-.04808482373966641,-.010053840415886486,.037823846526014906,.03970038890881539,.054256090345082275,-.02401468040990247,-.02904286935058728,.04613851723089085,.16216994825276426,.016089864404032872,-.09119867568644617,-.07636051381777006,.03198808484249929,.036454996777462445,.025464944340111234,.07414740914689233,-.046979415183956125,-.04962938048465308,.07977165176758987,.08775810033301915,.049828916696142006,-.03045459513307306,-.024452096514010858,.0670092926908578,.1175218881400763,.11426518181326391,.07406654115835015,.006233837337725742,-.04336603991211384,-.03995007785611442,-.03540950220623382,-.03586378149854876,.01781322399419219,-.024727256297427454,-.022275869771454817,.07676148074438333,.06204546476925031,.06983755172113384,.0730129233663477,.060190713224507614,-.025405925372675192,.023372682335303596,.030477986314785502,-.0002301213960560905,-.026087148164954402,-.019019953457663552,-.036714807308876246,.05881772896990409,.06838115825489645],[-.011512245145694655,-.033323501539032144,-.077599795617108,.03009201405129128,.03689004514712253,.015052871160868519,.02801689936540768,-.01018960630350095,-.07831770420819847,-.05923312270246665,-.01852728410941332,.05396149673771894,-.026974467838019357,-.01804059271627316,.044307115164341854,.015818943834284213,-.03195364072680727,-.02740130304193715,-.04679050712758277,-.020608188350333664,-.026272324411271628,-.08018665485007556,.08384569877970464,.001406750687297384,-.04985438587843697,-.021416757758446515,.06653706541963607,-.007324471755678448,-.018144551509999312,-.015182424540353442,-.04513066121842325,.029947581486485145,.006448139255753105,.04227492146238811,-.07435899494593805,-.014176533090006271,.0776551603970828,-.010551243188291676,-.12637948483078057,-.03358696420876588,.06281707109344425,.005390931035675776,.025794636422243125,.059721803691538844,-.08299531882510713,.004261708705396279,.10584522112949336,.07136431299074256,-.02642202114572798,-.16100970751240665,-.05472031174610798,.04899944688114179,.07543484083260799,.010535530941215229,-.04801657904860415,-.08033971220391747,.03957669524732978,.03663724520181359,.12098760898076155,.1354854848272127,.051194513568370764,.018225873276029245,.08566132389176084,.1862182987423905,.10338152957413216,.023906079145933318,-.004182293635023815,-.10643206407862182,-.07812495961417412,-.07346890364951922,-.04841986347757688,.015108685112589434,-.03264596890745973,.03623561570072251,.008090462198500112,.11267954130800725,.1027865548572389,.04428157837866404,.010681413475295332,.048922714210986845,.05487352908643979,-.01806460573055431,-.01818927045565731,-.0711252113253118,-.10260837121452346,-.05249003437807549,.024031776304340315,.019694437269126286,.04963674997707483,.032195647589762615,.00832803851633843,.07013895478533659,.06754991223551783,.05743363083039805,.020438461876702188,.0032421342973983297,-.050695230761191784,-.015383897879732399,.020203015057404895,-.015662916885770546,.03170906986223389,.012505528157918055,.02862303507568463,.05946324529661641,.011987063839091858,.029655839160397587,-.0016058379565756595,.03292492753503749,.03188121066730852,.050423216186573444,.015557492045852508,.0213857791925983,.009993275366193259,.01435070815322266,.039479442983270135,.0668515978337389,.040296519398888356,.009952641912258808,-.002355765182344302,.01814873401521766,.05911916384839279],[-.015757148978644712,-.04912944067839002,-.023997668342014205,-.0210026283214945,-.0015357942036982875,.0021065236794876874,-.03710704168977974,-.04235159886869101,-.0611627445913864,-.034051484714528485,-.022720119467757083,-.060739564477761535,-.02675700118495956,.000559340708430802,-.022616038258239973,.0070861976821720955,.013566118550461286,-.002811474898052356,-.03858034309904801,-.014823359019323232,-.03483587955987605,-.026656015152450085,-.019477669860262788,-.012106727392046226,.004248376564546172,.016084907645647312,.0006655237990040933,.0016008277659419479,.020524088921093323,.061832709878829155,.0036079221207767423,-.06986160980656743,-.02783330995788613,-.03256885018622636,.04512434936412876,-.020541851129595723,.006225988447318809,-.01720385416905687,-.06713753737721917,-.02151038888391177,.10815002779082451,.037209771283315,-.006027660384665387,-.016395255789040913,.027666465419402944,.07306900117532941,.05057553109701548,.04256763634461724,-.040728282661866906,-.1802492901591394,-.05180382591629118,.06869895308544485,.10468627376672648,.04693052462252774,-.02434541015974845,.0815189305327734,.13437717506819735,.12767282811582661,.05882841794662001,-.06539741332970703,-.010971808997436964,.015964690557018213,.06431634680478986,.09204764475693863,.07992422057278342,.004562532752512838,-.01828690250044819,.017429694084018413,.07614528286643685,.042835485463588514,.08020698114647468,.03611723597888207,.04737929871444622,-.01987491586658268,.03765754444578156,.026115602677467167,.07158768649462971,-.05763808145514107,-.08380678196623717,-.02045709657509112,-.006681593015641724,-.010481709236786138,.009818881432659549,-.018910890692478463,.027174343530639883,.004818683863866094,.008483116250144855,.046647277306884644,.07489629343021029,-.0027052061320910203,-.052390985898152595,-.03581071091088947,-.010963380484187036,.0364724763095067,.015668137547351885,.03188037418272442,.02832097368194242,.029976561112701736,-.0029437318832178684,.03461995990923712,.08572476724245606,.014661848811874373,.057456266218902825,-.007794973525223414,.05696691881728978,.03917385353058908,-4395098862272975e-20,.03952471230120083,.03381510688328952,-.05314846365079247,.04613527931771671,.034368318225618644,.025850606000479254,.04364205260106227,.02891531608990676,-.004655341235198063,.04069494423398308,.050441914764901605,.02337919079391607,-.004367399642211892,-.06782903161035743]]},numPatches:71,patchSize:[11,11],canvasSize:[114,102]},shapeModel:{eigenVectors:[[-.25918455544134117,-.04931221385289683,-.13803814349503365,-.05083560393983639,.0006852696569457589,-.01914373861615092,.02331891505012547,-.016196086952925716,.0036093752391787967,-.2383321108060326,.020657546002336193,-.01593243482310355,.06426160844370692,-.09063482352077187,.022055884293867813,-.09372567433830441,.055117695896951036,-.05323328805615257,.006257448592811872,-.09449546462666385],[-.015370973540248745,-.27558869894124727,.0430574037878506,-.017591738525834334,-.0958668084685409,.0374588242132479,.028917777439805392,.1301742315782318,.0638686652661228,.09335424109281881,.031861264081329624,.020242117972802134,.2729400100293782,-.13041313331164875,-.0031444285383698803,.06521142793320978,.2379656248587965,-.14726562188674308,.036056872536145354,-.1295200257644685],[-.27438982091500397,-.03985289630911698,-.13450394922360476,-.02978745313734707,-.07952584647957826,-.11664515605739997,.0356655181845351,.002417177334119754,.0710000597303379,-.19400193419982176,.047707150663056336,-.06078210547789405,.07525616484982643,-.08653693334002763,-.01049404960505459,.0038623295139433526,.01908859582979215,-.01083309063241543,.01728997572316661,-.04870906293432157],[-6061111652085234e-20,-.29074417421901644,.06116467954949151,-.040564059065553715,-.09617398819178465,-.006241007870184952,.09842193989700587,.1264476506367019,.05233983113179955,.14548890663706876,.019044522282414742,.11593290854472875,.11303783009345467,-.2265378936630382,-.026028516734775083,.14284328457404893,.10352737588140382,-.03149550723619836,-.04763621268401139,-.031405728625543],[-.2806107959809928,-.028500046273409296,-.1334817649766244,-.04822415807050451,-.11475625312727053,-.1635783651687029,.04863973595270925,.01032325713887658,.0443093902362139,-.1122958426982017,.0568967511916407,-.04627032761195426,-.03739712734754509,-.13317587328341315,-.010863704903627043,.03931236487804128,-.010946095593356596,-.012651374705749084,.01110571327997853,.030546324103711924],[.014069445433529164,-.25865071929613004,.06560840664757342,-.045936250949625834,-.07703247533996727,-.012716551912464895,.12470762874060179,.11891551534656634,-.013669877748084244,.1204323060226194,.011009487547689111,.1901284750613571,-.03216941527475374,-.17265241492952857,-.03662652696603341,.11828907037835129,-.07725348751316306,.04910794244586042,-.08836536086848805,.034692232042363554],[-.2648974171296885,-.016037983258916397,-.1547838541397034,-.054519082640759414,-.11072137606892071,-.13806773721053522,.08315118429370677,-.0008468885185206332,-.06665906894307447,-.014543116847374027,.05271355500831918,.02738844249422287,-.14573813333209454,-.06910965137265711,.005871228217577174,.03865302771592445,.035448688300325895,-.027970894206667783,-.005831637288361039,-.01235042135681498],[.04635411462484155,-.20340754175093081,.06744856466562195,-.041981284856941324,-.01392015609749954,-.049310247697232024,.10476409205774134,.16148555792101416,-.05737728700888999,.06871820875111506,-.055874799238903254,.2998824972496839,-.16587089947669748,-.01890180931989857,-.02182405654729836,.010150208790264993,-.15609860291657318,.1312205105925727,-.13142200190156222,.1313708927136652],[-.2018721706545248,.003452715117513173,-.14526611889720326,-.05454907575651035,-.07767045477100726,-.09969321388067381,.1116264829987473,-.02756432531919592,-.1700000991003668,.05281736505253104,.004648604492927665,.1380118729404875,-.22662371465236356,.025099449481837843,.05739022591046723,-.010585092198184265,.06281338928985852,-.06638416983774345,.029034161785279667,-.11014692197967303],[.059919400550257,-.17456494999571195,.04554664255740933,-.02138218670533986,.056054364424078185,-.05575339412174868,.05094992590649308,.14366157895544562,-.05830434414633804,-.0398816952872674,-.02973351520482626,.24120260128368567,-.15389614651721623,.09933711971671486,-.007910583000185822,-.09141327276839976,-.1710858906254885,.07953591180417638,-.07008005745394817,.10304814751540158],[-.11406660762823512,.007700502018058274,-.09712804940172437,-.048797807796913756,-.03468205936351593,-.034999010561767685,.08692061344032842,-.09583558456306268,-.2089628241300515,.08203998264474265,-.0381569881595742,.17097326940727633,-.22949142171270936,.12076557157672954,.08344543200638366,-.06884953856607519,.10657376324662199,-.11111649307286262,.1435668952327873,-.14730065680490895],[.05054877882186063,-.13771378257629774,-.008012026254444051,-.0015714671798822168,.11898190894868126,-.0700331877660314,.016790814058871895,.1115574984393187,-.08231033246619904,-.17681195482737475,.03178525357769123,.1357465923958473,-.030874986613362576,.1405687146519468,.01192742650959086,-.12276147059314364,-.08972329443847898,.026135494001851646,-.012284577171365987,.04545567550038178],[-.010279976005766538,-.0013953711369666941,-.04250049853613809,-.04068397839702466,-37807469383838166e-21,.035049138884785544,.013909369315673437,-.1642247505591371,-.15344312139650054,.06372047045939228,-.0320687619302093,.09303034298428337,-.10431016285986502,.2154786637052996,.06204547742542088,-.09750049571632768,.08237548830734773,-.15217807555912072,.2118769822487803,-.07883323911955112],[.020506937371916202,-.08079193189657265,-.07617795791826983,.048751387201977775,.1609424729661313,-.08489963313109941,.019595650306679674,.04255396611210199,-.09219934929892451,-.29635110512711466,.0682768595628811,.016316501361075333,.0977532232933907,.07815399608961088,.04334270563979929,-.07537621503411897,.0330226721351103,.059877672085514894,.024112321053863524,-.08830590964285157],[.04097243598407362,-.001296706522741144,-.0020002072259834333,.0014908104373190423,.0030002881861055167,-.002144333613859353,.0005611926446298619,-.1961247620118788,-.0017679409974512839,-.005915857570869501,.0012463328686438402,.024610291061966494,.002200697623134684,.22487906560306467,-.0005842334400694704,-.08201329638998145,.0004263328503266717,.0033161283064071234,.27617149440602085,-.00166085916452835],[-.0008069540390004597,-.06583922060661355,-.10155889748442845,.07569468923297812,.15233719604557805,-.10887679778045856,.028494100773441226,.0038626863414954055,-.08976576835949657,-.30037286375515754,.06328153922936575,-.0004847008310964185,.1117386345766342,-.004429003692766997,-.0296639784498839,.001615255700181062,.02164670424041198,.16837372165287368,-.0054392104719929515,-.08432877525660318],[-.011079460967186748,-.0017868787382064,.03946804648529863,.042572005521116126,.006374859062349948,-.038364866443237666,-.013127007549216979,-.16577295084318866,.14969379516837522,-.07533982737812005,.034732282019907856,.09231573967917625,.10807828706143377,.21223426285676972,-.06029075060996268,-.09445696025894304,-.08101134525593526,.1544177357115276,.21076325569431353,.0752950755142149],[-.02008626226383142,-.08078422113609351,-.07779233223816018,.047111656712928704,.16081617519949246,-.0834537408697344,.020128133010894365,-.0360546459811006,-.09816964501888759,-.29361230607088495,.06696120988449666,-.019966901109739643,.09357022285944591,-.08657782214076969,.04575212336071908,.0791568260887245,.0362405834478404,.05383925327288765,-.03243624026590907,-.09134147399314865],[-.11596849930813256,-.013116985772102267,.09673725558367319,.04869808940028006,.0393400550654498,.0322143250507493,-.08619207218565357,-.10015382155604448,.20555982124599514,-.08893830045220195,.03937893647811963,.1654956838827967,.22809775661613474,.11513705136942748,-.08291108072601325,-.06396243569757676,-.11002395504744786,.11205940383716617,.1439392637120111,.14897623582114547],[-.04601822665438996,-.13730378118266232,-.0118302124843483,-.003491653425577487,.11752403995019094,-.07135695754794781,.020200276481911836,-.1076974779384491,-.09047437531377057,-.17344452956176146,.030258179923130457,-.14237336413481283,-.03988722683747409,-.14521482782108197,.015203825792165698,.12537720862495605,-.08545739226748136,.02174003429599114,.0066221299522591405,.03962048827206743],[-.2040749366376528,-.010323501069181723,.14694685748653932,.05366485379883157,.07981735270651405,.09742062303704255,-.10953377373376602,-.033199598310539855,.16757254284815026,-.054346740346640714,-.005815751362438615,.12840753724004372,.2203883373966672,.021168603923268747,-.057657198208393295,-.0069775024105939165,-.06950115435983634,.06946440186485141,.03177103576623686,.11411900652766432],[-.05192425332549107,-.17429362677494198,.039791494349163466,-.02351346509856849,.05295263470542769,-.059635560339677464,.05530568748498563,-.1424648306435416,-.06495285308494027,-.037771093229790866,-.029527419227873053,-.24644974400170233,-.16270006974558165,-.10024837118797988,-.00564471861258968,.0917591688889069,-.16847994951283402,.07686036784407596,.06888249625022595,.09863121958635232],[-.2665171770402687,.008016410626358876,.15731959607269588,.05282379815939611,.1100874092272398,.13601908508035385,-.0789616341987158,-.007204696550471859,.06434815522256038,.01723760592548853,-.054872736396182065,.015559383693739215,.13909397820541167,-.06831180226316255,-.0067259934445731695,.038223390076617916,-.04156755263603501,.03311598708026606,-.0006523972421318067,.017513549002972584],[-.03588787939011167,-.20388129416118475,.061301672646978556,-.04409540790428212,-.01826899542964904,-.05470840045462301,.10795691158419214,-.16132698157729128,-.05995748040329167,.0680922859328138,-.05375588220836991,-.3007283566909435,-.1714806812073083,.021608331263090086,-.021575953678715676,-.011664293426726147,-.15458176445677577,.1300174016145369,.13154970526426454,.13078272042359684],[-.2809471673004571,.0182936192739738,.13596157055287497,.04637802915516615,.11163412106971948,.16295080001590137,-.04369167593532815,.005632974548848547,-.044813277771594974,.11695075889501491,-.05641913180049743,-.053720719978482434,.03610146135197502,-.12627443909954122,.00941311731233499,.03462426771409535,.007895764848072556,.014575180101932733,.014576471105685423,-.029156635373887185],[-.003009535137276059,-.2595723227230726,.06030170757867236,-.04779944544237455,-.08149124432602632,-.019147559060772947,.12652610020709304,-.1192297740743763,-.011914602642074834,.11591728350468518,.013241249151964583,-.18815914671221168,-.03361697340956006,.17776230094115714,-.037025879925952965,-.11974525580807824,-.07762457883395507,.048571714178185676,.0878595490483556,.03586808461577712],[-.27417464809767067,.02837399128775221,.13680799115243847,.02816715077111818,.07567734158786409,.11630896046960627,-.03176251379749978,-.002563550650307844,-.06888412853826736,.1995800873684675,-.046920279658476186,-.06529980704103003,-.07074696030859111,-.07754993610855317,.009461043423144466,-.0017650943059575458,-.014997421039161352,.00958455976071143,.019152234841120983,.04743469468245429],[.010864613936708935,-.2920879059545706,.05582117822092566,-.04170547769442873,-.0992307222245238,-.010829050067781528,.09974993813394109,-.1264447678074067,.05509485674852167,.13773729035274815,.020908213939107564,-.11344971939308535,.11591336845781641,.22976959221520196,-.026421533223327465,-.14288458971934956,.10419870157452782,-.0318976338136387,.046918481646092865,-.033299284419085695],[-.25837833137347876,.03842271734750845,.13962647397057357,.05010350995339694,-.004459476570611037,.02060382732185786,-.02216219920682656,-.021309114011150192,-.00109175900667345,.2418230933395254,-.019386994764398195,-.01671710914915587,-.05346481049776142,-.08542954356253289,-.022162591507878665,-.09622067935685491,-.045705099076477906,.047393448869087945,.004832863142911571,.08932235673299235],[.02556439875212298,-.2773166425060656,.03758878618750905,-.0195797390850621,-.09576548245147003,.03667599404697252,.029813530107823345,-.12943556489477503,.06396125432450847,.0838975619370342,.032649943180716366,-.01959908368042781,.2752586373450451,.13388072923874367,-.0022735435936609982,-.06147042563186522,.23995133451147066,-.14924747016700576,-.03627529674339438,-.13314032633541523],[-.04110387538479548,.03823985303111828,.08930834019775265,.10751656645645798,-.15823655809172577,-.2081598528653469,-.05677978710202773,.03196536669221645,-.03629240144405743,-.01028392045647775,-.22616361790176892,.0035659176428170783,.061194979549606385,-.0773567862337329,.10905509076128247,-.32122938814240976,-.06243655700403694,.04506086146693501,-.13893160149555642,-.0759468655407079],[-.0005862579062122436,-.028013371862265588,.03392532785287907,.09697569952819911,.12885275561493442,-.1343267701212868,-.054634853688639656,-.18670671387006435,.12024253293549851,-.01677588953702981,-.3734412824810212,.16617216199661805,-.04363814603894477,-.021518964566529398,.08833023328257048,-.09997530579514877,.11085010836922597,-.017708386232239637,-.08291421392497902,-.0077088662798213],[.027140406330796465,.023191258515235343,.06843440692624601,.07189320228161639,-.1453985712201588,-.1679215566043099,-.07078122676014931,.06665710841177164,-.07604474746726586,-.03487985529879173,-.27800383194452666,.06132046890789951,.0722998243821418,-.023704580444342142,-.04401851516889442,-.27110695514654515,-.04647618460067813,.0004386993208563873,-.123130650146417,-.15560608030108736],[.007681218407290452,.0270311651114079,.051859835503390045,.09360701705306718,.2370013670211089,-.11818205744677762,.012899446976310756,-.13978186955176913,.10628086971480236,.053511612608857485,-.1084063259342577,.1445311135541517,-.04694817077103547,-.028787155822266295,-.02749509132660138,.054014240557880865,.0703132234635654,-.07864958771126994,-.03376971937642691,.11645995186870747],[.05971892242857174,.019365231759092102,.03976831352431597,.02942996640231346,-.09950279790345937,-.09519241014805034,-.03738531844838366,.08758953030753784,-.06322399644004985,-.02305565651099658,-.11333588796545234,.07063246094544552,.0405198006900155,-.01614026997873407,-.20118930063482968,-.13465123232579196,-.11306409222256064,-.21054801092291384,-.04369413186139849,-.05304245009937468],[.00416447306798594,.07045158874191228,.05700262590304704,.12331122141071403,.2382081456729918,-.13581472991575944,.032580608751462875,-.09217414575442019,.0275635731779782,.12746487446937488,.12378971431383365,.10985577224508172,-.021825682517284502,-.04045649333814317,-.004116490992907022,.06328487073433522,-.00470040076899775,-.052424157462174416,-.018129540228518343,-.030724004702528798],[.07266891410782408,.016043138606478196,.02627369137494614,.003534210656636574,-.05945256813646573,-.049834770359896835,-.02393006915388285,.10364100685763086,-.062651308587343,-.008958036330543139,.013307479894258992,.06849011938054951,.042476545594048995,-.012886684482588185,-.32344815313001357,-.10205399447154681,-.17376613813501907,-.23316498095342783,-.011128358009024508,.008190171875238664],[.0009469143346480003,.08626234990922373,.056561901106857174,.14777082451223772,.20316466873179587,-.1515545848352224,.024606362028327177,-.059727599838801694,-.08160716262828487,.20453126101362504,.20790338659205185,.06122580649716192,.028168686557436835,-.03613120581327809,.026537321190343684,.0399906464556435,-.04902857860256894,-.014036011010793178,-.009633601304497658,-.23758677297853398],[-.04104891598535556,-.03931321992504865,-.08790327889006884,-.10361478783196754,.16318740146031308,.20270933480404102,.05458451747360399,.0392921211662481,.04099878518619077,.009615397758339965,.21128404722349167,-.002979846663574813,-.06286576766890208,-.07644949154564619,-.10549253270595446,-.31704376863591516,.06675284121607748,-.04572318178956142,-.13555912932484426,.07558443436546933],[.002204260966539804,-.026485960470782596,.03741551896175812,.1011339414049796,.12252229572983372,-.14241885794880885,-.05682817886492918,.18530329432091194,.11872027940742755,-.017167807538024354,-.38205683466253854,-.16618370469188254,-.041194763832225485,.02454818638595231,.09255575874027222,.112546125407831,.1083057171416579,-.015920390263162824,.0883203216797128,-.010693282303843322],[.026816912653847814,-.02210892668910878,-.06633936511099109,-.0681516904475716,.154617702418614,.16313793805226023,.07123425010664407,.07210930252339037,.08017056572858236,.036959816474844275,.2735197634770196,.05558202897521595,-.07409233244552756,-.022552708724486555,.042901765024783274,-.27302351570941347,.049208713355905966,-.003535172477924954,-.12170548706792439,.1600709991585626],[-.008743910323026668,.02792335437328952,.05451421123391881,.0963652077516416,.2310925325092242,-.12470228964547822,.010102445531173702,.13704885861179808,.10320420183042034,.05209672692032528,-.1192686088871901,-.1468335137061078,-.04406497040979575,.029698195291400976,-.029206990301820602,-.04329756553833297,.06842870493243854,-.07857132212072095,.03859177852602421,.11024267705524989],[.059508635688315326,-.01657619560715708,-.037493005500270155,-.02455178663568804,.10880503745780122,.08977090893759092,.038639182155073365,.09115094600018875,.06426027766536825,.028056683600415983,.11812219496600855,.06625213499052668,-.041347760355287144,-.014534786232973301,.20087119446951981,-.13703864218459774,.11279133483747732,.20832054150697926,-.04294640016215,.05179156411057094],[-.006512665389769773,.07115945683137398,.05852429118723038,.12437439455627154,.23410551313326314,-.13945759111788802,.03108330266380885,.08865384373124015,.02505276444943745,.12645821454533035,.11923113656771699,-.1125517207508219,-.020213297081514984,.04106064000192025,-.012035091209235904,-.05793392597535264,-.00914863394622596,-.06067379315200663,.019835929550468437,-.03278871550528047],[.07257527558866439,-.012634132825075228,-.024026201740383193,.002286979709104552,.06740603560152444,.04382868954132683,.02488038272750204,.10591239790125603,.059389455848107335,.017004471070657168,-.005111001655184236,.066026250938385,-.0413344685392531,-.011454031274301169,.3242422249180925,-.10354947723779616,.17170089296042518,.23243149868662624,-.010740406772858133,-.01753875692117097],[-.0038075054296584183,.08682715010851387,.057552559849395196,.1477953887839611,.2006661826103431,-.15339929104950317,.023645037900407406,.055600435751653965,-.08401076117981306,.20401992821861864,.20826613944580338,-.06387511268884934,.029819348392480016,.03661059734615513,.013781028965228558,-.035941276484260015,-.05583256790387166,-.02320595540794813,.010064307647554213,-.23708004052505138],[-.02350400788640455,-.039047800473709746,-.08556729731711162,-.07915031598912795,.12465270020306099,.13891518919190615,.02430069949494681,.06699532030239105,-.036811078599646774,-.005887860882593974,-.09078255097052783,-.004298906321624677,.04349610770088338,.06250842952219735,-.07822608214587805,.04300872852810533,-.006916040217430202,-.0426795060067847,-.01902871870181784,-.015975265866074697],[-.007361286688134161,-.021107032591126607,.039763310309730814,.055625685982699735,-.049656312820928236,.08481039531092055,-.11231670001231263,.12600108757905643,-.023631913679965172,-.05717543121609645,-.005958866787098622,-.12646241348822884,-.03442652732340299,.013453138542856213,.017896987050537695,-.07687119815164876,.010909247964377937,-.022517785800987,.008130263599254891,-.03404578703887694],[.016948514923620445,-.02193513643769434,-.06315236305356264,-.05279979640116144,.10435342424836205,.10824853130712549,.03304146282304354,.08633503164767041,-.015563261507495417,.008772425753935562,-.091029953142718,.005261084458105819,.007412848241161983,.12677166922406993,-.010973650363561953,.12218436711438121,-.032292648360242045,-.041307828155396936,.009700151353233284,-.046119921825401256],[-.006683217294495633,.008082220232451908,.046932304539841756,.08099933041329158,-.021246022388930752,.0772230078941733,-.1208024553957209,.09757247134908283,-.09866207854597452,-.08107191872238576,-.0007506507672586803,-.10367608652818795,-.10332194965606889,.018813730318266546,-.010497200676673153,-.06159564107693752,.18741244184973282,-.10373942661667772,.0019642020598160115,.1929668937522638],[.0011332836074734035,-.011108535310006282,-.04417704056170656,-.026937857839190442,.05820274764460316,.06766037897186397,.01252332721829966,.08695531255754345,.014537206052818295,-.0024289122507333647,-.06724654763980466,.010135633490719997,-.021703799990268176,.05966835832133831,.09005908187706498,.0585044326446686,-.09551491170873837,-.06041298882455105,-.017228627814190295,-.06543809100332816],[.0015010210285302467,.012001351176920534,.02645609812127389,.050506276299144316,-.059043613350488425,.09276344680849649,-.05921568788391411,.05144620669628506,-.03372817088174114,-.013303363349763798,.05235516252490016,-.07296649765221105,-.013674015384355876,.03057299590116571,-.00012694541907415412,-.03655941723503952,-.07723897190816445,.0006016884726439031,.005698030644575629,-.09580803262279512],[.004541065833598431,-.029739632923257285,-.06128540584732448,-.05192852768196183,.0958786937872563,.10776669151268725,.0180832314557093,.11656925567843941,-.018095403188716327,.002861865287773076,-.1116403729402848,-.0016145266116992633,.01850727180389117,.08596299115720772,-.004937104428392894,.10296554953916494,-.034908946306265815,-.03202172274005161,.02646311330010434,-.05860910110803266],[-.0038940101674299864,.01249229063887494,.03515328820035927,.021732063618845297,-.07523650302188709,.11222268661870922,-.1223327365171915,.08959785160117353,-.025863497436002837,-.0013532772920339293,.03745243081759851,-.09517239684761403,-.025294237043152014,.00923367703284448,.04519783139010664,-.06078237797232998,-.10825269327067877,.10079245210813292,-.015704918925440504,-.15393418284118934],[-.0022816888324770947,-.024060777904828332,-.06437509391597251,-.051683675703232124,.08258676188205717,.10799981168598963,.011766005324578267,.13475702007336832,-.022040198973617333,.002726563752619001,-.07830784363037409,-.00853731897183721,.018274693017327637,.14968884350468206,.011604584974515436,.2099331657421755,-.039923368624747504,-.05663441481797257,.061774450547349605,-.10280319608126552],[-.004558178911174991,-.0006619892986475887,.030116361303995344,.052015237018933534,-.05714916632688342,.1083237848802445,-.12176894478021971,.09473318141269152,-.05377710718528791,-.06617351532159423,.02667771816372827,-.09680249186577525,-.07370816370860483,.014542543817590731,.007936215535738556,-.062350724930571956,.0114457464518416,-.02293387196898488,-.004556342956946763,-.014345756963712557],[-.02319593145002526,.03818643372697272,.08706661401447259,.08127918717216773,-.1265112417972823,-.13546806794789074,-.02870430442392218,.0619820960237384,.03585202966740395,.0036320225960270566,.09047752080076472,.0006838622073969101,-.04481791526982879,.06193024001847991,.07887010933066001,.046002165330352646,.007340226580411123,.04175977475887194,-.019334089807545696,.014622330486136953],[.008281044172977283,-.022628164438439315,.03636327736876486,.05246601943026026,-.04470962726073305,.09021438636649573,-.11127276398624342,-.12854130381332382,-.02506301698866893,-.057362925765527095,-.009528792360520776,.1265336119507815,-.03268717851914264,-.01590396394734752,.014802970227304249,.07511812444272832,.010628470124414376,-.024180821376674457,-.00737470629516649,-.034648408127107316],[.017198522016467425,.022236361949753605,.06495134014184437,.0559481848037368,-.10510905763267528,-.10512394373069515,-.03777241447816871,.08242618128564466,.011666390781661908,-.011957815046176372,.09092980368390101,.009339231796450277,-.011475382834925737,.12593257195353708,.010551815031581582,.12451493177521945,.03964693694317058,.03719107313677409,.009615288890691314,.05368219305515059],[.006010689808226317,.007212260510108004,.044409296126462966,.07885753384789938,-.017120649032104904,.08142538874871219,-.11940777277719844,-.10089623131434634,-.09919836781869086,-.0806636356622924,-.004334356670504145,.10338853261811562,-.10294994506346151,-.023790752142643957,-.010921145722281386,.05673688687119308,.18599558835956628,-.10528546614138183,-.0023446205569316245,.19100128644165718],[.0010733023256969559,.01157247180697759,.04518448585917075,.028905643369866726,-.060482443709835215,-.06395536507197441,-.014845222571675594,.08486219454505654,-.015853973269866806,.0019032111181755047,.06925587379065506,.013000816134354817,.021148557038695486,.05841827995851137,-.08999424051007307,.059898583580402356,.09239957033302244,.06038983059651247,-.017439626135533855,.06161492044455385],[-.0015444798414713842,.011554647683167758,.0246961186876711,.049406435936464904,-.05670610296740488,.09535562503030176,-.05867666301843687,-.05483016051785776,-.03312961518654288,-.013388684721706963,.04966674096389603,.07251082419700067,-.014517994556078053,-.032898717753508326,.003419213168915555,.03422746430429616,-.08093995640245351,-.0017775286940463495,-.005015237764972166,-.09831034761316851],[.004690870236999971,.03020845186345836,.06262203409143975,.05274395377859436,-.09876676469073391,-.10326437154591862,-.022886037597294896,.11295095822829268,.017062999846528665,-.0029129309928138786,.11302847979225221,.0021341214358619517,-.019488875651691228,.08553275343853213,.006712932236477075,.10527899609166107,.030619444487241902,.03596557491356489,.027060969805652244,.05250251964991225],[.003712186755640158,.011311610311061645,.03271292538767064,.019670534211132365,-.07140295163253443,.11637895325503753,-.12152584485104628,-.0941182629263941,-.026555943824720034,-.0012395424097627105,.03302756727713687,.0951621634032984,-.024545901145632716,-.01261129372682537,.044968383374253566,.056680991926790526,-.10954327798574533,.09945343910769477,.01465075961056534,-.15612253139789609],[-.002100441933665765,.02401605332867479,.0655109980510541,.05369168618318205,-.08477295490379645,-.10365082949147385,-.016551511206833645,.130922415526226,.019905643125049638,-.005330019590833632,.07929754711756351,-.004719117677498937,-.021162766878001702,.14900015141933146,-.011283098688825861,.21222541347290966,.04034308270171196,.05568747837492439,.061905950329526664,.10215861174289849],[.004644485181139972,-.0016088647336668569,.027558248660570186,.04993986434842837,-.05385300889365655,.11249225413654093,-.12121122997047816,-.09996575029680171,-.05460323250314743,-.066014840536623,.02357367263708664,.09706357800429456,-.07293144109531469,-.020425237513237268,.008386989533717706,.05403629200965224,.009864894946713844,-.025146056897783802,.0021204516891783834,-.01838248933492988],[.0818107717532965,.001342850532277235,.0005203400406290814,.001414972820402536,-55785446345156184e-21,.000504368575784418,.00014499662069079183,.05346142833613532,-.002334073438791689,-.0005467394008475256,.002414002081693494,.050804016409159894,.002071714042112216,-.0430360858064023,-.004182462664722441,-.04841097333184587,-.0026616866809261075,-.002867970446906097,.023711183240833517,-.0007790068244093156],[-.0016112669680105572,.06818214521618825,.026419842982680058,.07184409582355218,-.0028324607335239714,.025608904825977018,.0073620856604533986,-.0010529253262692335,-.11851068329922455,-.027760249058210628,.12256899523055254,-.0010005874743438097,.10518959800104026,.0008475977185642829,-.21236114512593507,.0009534563792407331,-.1351449796063358,-.14561887029600593,-.00046699286059298517,-.039553438859890044],[.09316674009473835,-.014400575595609583,-.02425869037887983,-.036742157033356856,.0007812916713546669,.019454205498741453,-.003986132796036599,-.02099317038141546,-.03874682001104751,.02279867800007934,-.026621044116277828,.0015937490043979945,.056984551915887666,-.12002685484945716,-.024167878123722158,-.005287198025886837,-.06641761215588543,.13427170902105776,.12116397276410566,.017717186022320208],[-.004327659423066666,.1093807727502508,.025032360614155796,-.05333428445452004,-.07635819669351286,.04166704372049216,.12200349265013893,.019618940666931924,-.008727487854061071,-.02790569419575932,-.0020209270918830997,-.03717996801526817,.08575667359148514,-.004389545295775843,.1887947157995749,-.013536420311015865,-.08045855718032341,-.09648059255087808,.008728771566323335,.10538650345322242],[.06892578900488278,-.003899487127647576,-.038483088818842055,-.05342164011320723,.020614388358821466,-.02427508186739339,-.033834645110336244,-.0013678098316814412,-.04089425613344534,-.0036977002778182584,-.022243390064701673,-.009291597515035875,.04702887315485192,-.13509260700221762,.039418674703283973,-.023948367571516027,-.17001516730115412,-.07257805759964331,.1202115539637188,.10088447004350533],[-.0035850918142771512,.09858453421023237,.036484755081029566,-.07837007307759138,-.06073816983991062,.02463105313822122,.11530991223411222,.025280805195852688,.02033204974869221,-.017891370222691924,-.012565485446069457,-.029378799703956352,.05681276685286005,.016354624703901362,.17160493997741857,-.027596329561658473,-.05795267939650016,-.014688921034535446,.0048945221808571505,.09628227526338905],[.08202925731595238,-.0074757163649968785,-.024317219559781427,-.059450697624626736,.015388354923859244,-.01775549687860544,-.03100961369215093,.014232679001682458,-.04599765079227785,.014613540618649851,-.02981328303058905,-.025341296256074276,.057084476163641755,-.1335360551189712,.028972212579385332,-.022874981819277038,-.1503536898184119,-.014709236489244142,.1157338033930018,.08744815886606402],[.0031065122369682264,.0973547081543036,.04880340787837155,-.08965678612911407,-.05398145454172343,.01618876328493523,.10550879640444577,.02837997422497177,.02237895245362667,-.012573185226640944,-.023347021041790376,-.0376424379130271,.0678037855468883,.010191767475728952,.14003184385552006,-.021789923937985227,-.031733332445823145,.00744658475369803,.006239298793380935,.02754136582668306],[.1387392468659556,.0029894476997011136,.0009365583024940642,-.00071956529721012,-.0008872730067093457,.0003708364998388767,.003966322287605985,.011515406413235096,-.001605791484448746,-.0005945420494757615,-.00015462731808354332,-.021428183483375163,.0017941691288204662,-.18742897143429363,.0002805266869912275,-.061963185529603594,.0010059641470246006,-.00058911793994807,.18354627085177028,.001104489680699863],[-.0027324759423598926,.15178677915220828,.047552987208318576,-.03653534359011034,-.04505056634058958,.01882892211436552,.2013867930104727,-.00022679646676340305,-.08153275852221158,-.03018738972066408,-.007851076499202527,.0004220290738161797,.0910974804294968,.0036914223402121347,.014243514709650809,.00122036783099561,.05107701259822219,-.029911984964390393,-.0036149523710262976,.056079566555546495],[.08184332617556463,.011303243144873897,.02621998722875813,.055874374446870795,-.017501931484022883,.018379157328786692,.035139955952998056,.013104185338561095,.046843147349681404,-.015097274885653114,.028870878407626664,-.02383948014238998,-.05437044592999857,-.13383379839837584,-.023436016295804645,-.021999268190288232,.1489875979432729,.014991037574045143,.11539838184369516,-.08629590746440328],[-.006333990417209219,.09698485567029196,.04780807523196347,-.09192811880609435,-.05333367881584192,.015477089583819052,.10420597754290616,-.028918375044037915,.020550448601090406,-.01198802932859984,-.02450280834026132,.0386110555995965,.06999889543942399,-.004925905731832455,.1410640263692507,.022673724386324326,-.03762887307935477,.00686163646982988,-.010791457969181364,.030963263322166375],[.06901350016436368,.007778211413319912,.03988982627596954,.05029440469815698,-.022989956636996347,.02522610009548568,.03834871376275443,-.0023621762657445875,.04166311389117782,.002990363269172845,.021731376833849146,-.008127607032354302,-.04475541031321123,-.1356318045872692,-.032631192325708366,-.022843195367171557,.16760144609996055,.07194340049769612,.11992561030559708,-.09701513799193376],[.0008683710760900936,.09835454139243825,.03494119686036181,-.08041276542085886,-.059879380230085794,.02365612504910848,.11388825761211437,-.025207342945575004,.0187060784928821,-.018023091946400036,-.013431570532555042,.02972187175051971,.05862046259958258,-.01102269478220743,.1730239654713163,.028517891577622866,-.06460205435491403,-.01753527789696872,-.009624034838993666,.10017991728015548],[.09326489113124482,.01869625635332417,.025225522728041395,.0346136360445719,-.003787276042848072,-.017798486629238417,.008786907163398989,-.021749382668845366,.03837312901770805,-.02387977956539547,.026520826150974057,.0030564676199522,-.053563707436167715,-.11976093779742616,.03158289416398284,-.004750103748468837,.06319806482279618,-.13796648876910192,.12072631763615553,-.013553871931192441],[.0006558797448037802,.10872892910029817,.024057766727453193,-.05473964012955705,-.07626821853915426,.04240073723063651,.121751927031986,-.018777124089696604,-.010246368849578542,-.026986359795397864,-.0030675587070682357,.03708838178181385,.08793392671900947,.009112177063499604,.18769670173732864,.013734105437928577,-.08301134398793153,-.0911188485393099,-.013492812125432366,.10600238839912123],[.15198329888645534,.0028006329231055624,.0007460050145685713,.0004787757622169838,-.00028276186426712897,.0004654418259249989,.002781026519075897,.014577335068213435,-.002371356163506356,-7439942739839173e-20,.0004280941663997791,.03233535159521067,.00256609990777094,-.11258044828872535,-.001962926139247034,-.06829911172421169,-.0008520359877165982,-.001085913705477137,.13519669471746937,.0003677338024412063],[-.0029933181650393316,.142199862211446,.03787779876667053,.02430945050160827,-.014357004020670722,.023632430715189428,.14120436296966274,-.0002871012945317622,-.12040368336844545,-.0037775705046386573,.0217361336336362,-.0006368462588466816,.13029163882764647,.00221727718347658,-.09966598058221829,.0013451541931120844,-.0432614353180815,-.05513638649975831,-.002662705212454928,.018671385173615346],[.1316377984929808,-.02362242079673707,-.010985661443978204,-.039968343205424334,.011570505836073249,.03320583415069306,-.05117041651417763,-.014142357469543666,-.04007618486496427,.014047529939951571,-.038612435433181186,-.00613412833585751,.019089531531501298,-.16518066221941546,.03038866293059846,-.0032824916332468497,-.11074112146459174,-.013923765545995706,.1752317496164086,.020527889008506092],[-.01333077899561892,.15174038102342471,.050439117821201064,-.03263380297310173,-.024681537713083592,.04784991773686138,.19726449414187786,.024421895341756646,-.1282627459426929,-.009612237481021415,-.05146435191493259,-.034670744528944086,.12764585703241688,.0036731932047622887,.04396417565977026,-.02446006443748495,.038083140431675586,.0069072900028640674,-.004846549920457799,.03826469474709954],[.13206061186311063,.02957885206904237,.012963173373203693,.03865239807839484,-.012533364143145624,-.03129600149373966,.0588979883832714,-.01509299796252376,.0349947836864507,-.01441511635728865,.036556092321482714,-.0047642170603121895,-.014048695159930489,-.16519719776774375,-.028634015353771358,-.002316835461598903,.11215475975367495,.014184941121037223,.17528669136738098,-.01900530438792368],[.00813722649613957,.1506925794712861,.04996744440171988,-.034182242142128616,-.024206810868850334,.04912028440035322,.19509669177023312,-.023846103652028865,-.1297412721720777,-.009051664333769327,-.0529447995773759,.034885387950180834,.12829851595375544,.002833614167307253,.04512663006332879,.024570343445953734,.033693195647928866,.006353687713148018,-.0020569271343593674,.039043302836162586],[-.003830921402813144,-.006327609729933484,-.05208833386129902,-.18060229644188955,.06684987007277836,-.12575488626154094,-.2125060648853131,-.07344308709175597,-.1667756893552831,.0743293387402597,.013077140393708553,-.06246475397064739,.12874919357305487,.012954480511230384,.02946687211277767,.0018815134527229026,.01668552514963443,-.033447189900894674,-.18253121075591622,.06584857593459205],[.004036372412800673,.005428503148933924,-.04455720353183392,-.17695699954660296,.004967027546319846,-.10595366487499482,-.15416871677359822,.05803935953320686,.23028436557624588,-.006514405507088905,.08659076831413696,-.05809701751850893,-.016970687725788164,.018175711463983675,.14783066559284957,-.07800120844134283,-.0976364125907547,-.2323859461771884,.021669545651174356,.02589071093035987],[.06627486215658047,.010935323985695435,.014806079420386867,-.12123528814039794,.02855589378925754,-.03604759801728741,-.10364050007965218,-.07557919019359305,-.14632862610243588,.04639984248265229,-.037991214935095025,-.05285698609791422,.07759231492265808,-.036722314655055044,-.06038133373732392,.04572031489243648,.040593347514767376,.17850961871979443,-.11243932211559991,.010951767221505329],[.0006491756929023383,.0759259631941593,.0174751696005488,-.19376068891082923,.004082831881670145,-.031841460036281556,-.04457696957399678,.03013922313796854,.14151154571182542,-.021340478372072667,.01056532317754733,-.04908329716021143,-.09052129911057401,.01960795277561427,-.10735829803366925,-.035450005106403344,.003388242110440712,-.0017408685781109632,.013726786778436431,-.05291352498113582],[.10398820287198415,.002555304662503209,.009292547536354792,-.03906854966728291,.0011161779327457165,-.0035912785865321356,-.04117959683150901,-.06286831454172338,-.0659480165385318,.030964888548817092,-.014728513450262418,-.04224147605287418,.06467963549955184,-.07396641148239483,-.027365421654483347,.05259956105348689,.011955557066130695,.12005062922777424,-.03260051882859781,-.005169167432061912],[-.0023092618200368058,.1119484805026983,.0462319687195739,-.1654716293732796,.004611369917522586,-.010780969312844432,.05167944750411169,.011460267729800142,.08980407463741813,-.034390966251272775,-.05120050736637161,-.020256685820207513,-.08342543815233526,.0026742274714927723,-.23595294011547635,-.02352057954532685,.05600997204585149,.07581652952992128,.00872736052896747,-.03305849538314876],[.1120645151564317,.002207972950058474,.0009892874293746061,-.003301014092801275,.00025018449162577777,-.00015106332155457444,.0009168430378309936,-.06327976867129217,.0017042671887136874,-.0003217192216187539,-.0013785209562622491,-.052334921761097,-.0015448840382170492,-.05319162518631509,-.004453665178821296,.059985955751636004,.0014679630382097369,.0015595511447703578,-.0197002306480996,-.0008541977941675365],[-.002207115856359185,.1121080333929546,.050230265803129975,-.16760630973155033,.01270291438164515,-.007670117469892792,.04655196065626718,.0012462979974182488,.08653278243185732,-.016335032202010345,-.0699932820251367,.0010307387266987771,-.07844023240410199,.0010476115406416152,-.22613123252942074,-.0011814261982336107,.07453463109816093,.07918494282784612,.00038799696207817563,-.043371199284965904],[.10399848794160393,.0018546282231649443,-.007464965819594654,.032522836809174546,-.0009337404884179358,.0031639948630730577,.04318253145650282,-.06327080684010107,.06943289386154423,-.032295013728537755,.012701080887017291,-.04141111489720675,-.06791433877421127,-.0740143485754068,.01805359551475349,.05348488926394847,-.009740903093521727,-.11697226908769014,-.03291887573788525,.003863486493002626],[-.0017870457628367537,.1119622803578736,.046562008727237675,-.1668816250712966,.0046517431565028695,-.010914014738721261,.05001793145007153,-.008975951846932813,.08713774128849609,-.03314505952341083,-.05174073450705561,.021904227503264234,-.080813993640496,.00024026050450727578,-.23684746977845314,.021431241345078487,.05643728484132754,.0804847065747428,-.007436952995013346,-.03323639392378238],[.0661979055592968,-.007937272624853435,-.014106515811415555,.11351197925830203,-.028372988239404456,.034765891745263566,.10180491786473986,-.07670730585676623,.1517871415225037,-.04720413741476337,.03837776086783885,-.05088335009753632,-.08109640280587968,-.03746589651915293,.056107295015633704,.047080696866891356,-.040428456400197134,-.1784397328755928,-.1128926164266072,-.013026734771989946],[-.003258233035928045,.07629765986523904,.018044604513067886,-.19838404729853476,.005204048870249069,-.03323613502221157,-.04862322666910318,-.02713993349063563,.13564014175458514,-.01949694361924361,.009061232634766674,.05112646792342076,-.08739591740848146,-.018146812493972552,-.10965254701379751,.03362228484853031,.0049839703200505025,.005289265561349878,-.009288863731996493,-.05244126726523317],[-.00398688200314565,.006536449073362947,.050293508064377906,.17349459134769435,-.0666024529234752,.12148545825215637,.20627090330577347,-.07567142212928443,.17571376211231018,-.0745282007063368,-.009657503295460654,-.06012875363561278,-.12931756777555675,.012228769086885426,-.02362321502366381,.004951337906335101,-.020517001886349622,.02427109716174262,-.18324289428534218,-.06477806900966859],[-.003882400409842432,.005175144910402656,-.04657361868699695,-.18393095427827572,.007595377276311068,-.11082307499956565,-.16241654870757216,-.055102542314522565,.22353901984468466,-.003582649320105733,.08703852818268723,.06051150237257773,-.011888050816356367,-.018671696740185807,.14887627733685901,.07786663511492029,-.09690370708444226,-.23352271053475368,-.014465607580724772,.028463408799233134],[.030970322681001344,.004709220001408376,-.00752873811996651,.16357528456660905,-.05268989220248264,.08960366689471912,.1421894043238982,-.10513747604797508,.14519927390557394,-.05472487049871281,-.029363608692248,-.05083875048941685,-.061890285829241144,.044141490765737125,-.05041751729353696,.025015137007616546,-.01642417821720728,.04495069855118941,-.2067799302490973,-.06840409367255838],[-.006191055463654425,.025490142152652336,-.17773317220354787,-.011649348642623007,-.033779282406239355,-.037805216091529065,-.10672838541759473,-.04282099710655823,.11269092441672976,.0873302537477724,.007396804007710175,.043681348504218676,.017817631930504733,-.025762018942079048,.05361678397374794,.05392914604451754,-.045882436605483475,-.054493601747828906,-.018289999358621918,.05079237093191353],[.07254186100615942,.006476680970671134,-.0262706761700722,.11039354583740993,-.03405178897889095,.04818526069419477,.0689569559645124,-.08882207098078765,.08396519465735015,-.03242574490493973,-.026027916755625602,-.06297561449254958,-.03373409233604548,.05017046793957873,-.007156311206931437,.03637730091892877,-.02778547509114236,.04578837784065434,-.16056788078199066,-.04445387867368258],[-.004647950853861937,.04608721702397084,-.27900795030851655,.09806356958982289,-.06190389803238874,.01566087534901769,-.06471769894113007,-.035866374649349185,.014465297947944376,.1561390285208392,-.05640165983776209,.029190158094928927,.06489892032450216,-.01206560593125634,.018024896454018453,.03261829244098303,.02259129326688718,.09812652322448133,-.011371173195259793,.053107627097234475],[.09234819205867092,.001095209688421191,-.005995412608253823,.002549018553761752,-.0015525730855718725,.0006001014754087189,-.0009001683223913687,-.09689390185615408,-.00043212015089025225,.003109771883908815,-.0013362209789642928,-.06851230987229143,.0017057933812730085,.027410918821544273,-.00020315778991813945,.051832972363327026,.0006291507669350983,.003002394757017706,-.1266719885830745,.0010261238764925802],[-.0018188019527347944,.05560838248428354,-.30441220616984355,.12942434694989627,-.07883063753914603,.03046966505748637,-.04570531552177509,.0019083299193569704,-.021940549726592977,.15789614188725432,-.06784553503059583,.0013493531405928255,.08661027361957228,-.0005398593255334993,-.010315171793919409,-.0010208528098808126,.031944619243145525,.1524441554727779,.0024948107272665665,.052100606489871464],[.07266861782530143,-.0046569824991961615,.015264415714518009,-.10644670145937027,.03158792734815054,-.04753124940971025,-.07145172835947106,-.08734095840116375,-.08333051207559468,.03854854525064836,.023786927187687674,-.06407613482372629,.03626331523079535,.0506066423600407,.007860488621277733,.03506475132981223,.028653455870299018,-.041889155266448416,-.1599956242713681,.04651050844387359],[.0017880236959115089,.04630649504564801,-.27982598588173846,.10233424838085241,-.06319667530903234,.01754601648286184,-.06195234335011684,.03933591373503084,.017760194700190777,.15474118656366273,-.05738276551422044,-.026687867962290814,.06352031811550647,.010080796040363754,.0177291398805273,-.03402534699441634,.021479725887446274,.09985333633117191,.017684686388847928,.05131607924740187],[.03119007723378484,-.0037018982930456636,.0005246879936731259,-.16390712475261301,.05131897860862025,-.09102275382470838,-.14628154898705953,-.10336987404471408,-.14064948860692097,.058121044994734826,.029632085365876047,-.05251927083888396,.062543856649475,.04512163438888853,.05248957028845718,.02287228762484818,.014604828763976164,-.04706151554553802,-.20589940927102812,.07035098752152538],[.004966803486139159,.02565579952003115,-.17789178480673115,-.00519956730659319,-.03582774197123851,-.03424777030513781,-.101046936528418,.046927559098234456,.11832072913574611,.08510774817530592,.0062348810597435385,-.04164570745015953,.015366895686711617,.024003977526008316,.05159002408086995,-.05487229110768958,-.046493554346182915,-.05268141689673708,.026417738211326147,.048059583131722365],[.057822167916677866,.0015818691524278872,-.00869893117747943,-.10253564278062774,.025956947528960845,-.05626831082397639,-.10131954273559655,-.10023331381082408,-.11388888765265529,.05842928132354492,.01554666816913432,-.07109520362281166,.06231399292864441,.03685849229563515,-.001099971488174062,.026105216445068306,.0610973107208305,.07730385821428999,-.18755963663306235,.04738941051008427],[.0013806130436272196,.028279785525396724,-.24779758418898035,.0929470784191686,-.03875795733036789,.0028008391133760783,.01252921060623961,.04469681246793483,.0773765752654037,.0719880124480278,.010778528628600051,-.03104564408236475,.001004354860151908,.0066662232244777365,-.126227958007418,-.045083852480253137,-.04480798046001923,.01777639002060223,.016228237723703562,.056646065257650355],[.08743934914534307,.0008025464988402188,-.005778635533273426,.002713673641497987,-.0009180284094331466,.00011137735951005171,.0006418893691596267,-.10811931560815041,.00033513970260685885,.0014622751318325126,-.00028756414198402813,-.0590235498793274,.0006845008297411569,.025379280968380467,-.003329579572640176,.027241769541909207,2540229805648642e-20,.0016213486083215725,-.13466444154822188,.0019403531333068763],[-.0017221220624478687,.04074864671190292,-.29340552623742644,.13778457530947336,-.046612146936721104,.0056550949769633985,.03259141142574971,.0021294149671227474,.017016446225115087,.0742458322710858,-.014600835771580457,.0011624715696626617,.03475497373100909,-.0004998461231932889,-.1690566987716989,-.0005365279225751658,.0012897810540676788,.08232265885247775,.002652222461444711,.09851985453774051],[.05772296607604434,-.00046713096417426854,-.0010648000347449808,.10611590201326676,-.02746290579936882,.05633495790855013,.10173430596600778,-.10191551293463318,.11684725680985987,-.05554945502709519,-.015110209275042964,-.06981765343099541,-.06222612282575619,.03656742760339118,-.003871084659972098,.027860140717788494,-.06281423660104266,-.07654396777058065,-.18805317015343495,-.0451222319210334],[-.003656279850416984,.028320140678325608,-.24794793875814208,.08883767650612258,-.03770585082581788,.000583112480190611,.008530055578990982,-.04071548189035197,.07283221613113564,.07423282898014855,.011382317260704876,.03382092937882256,.0034571782525573127,-.008112350143875848,-.12617338080416468,.04402100225222013,-.04236753675222968,.020806430133868493,-.008830525963181103,.05846808637309852],[.06632787150069476,.0005024945974418921,.0006878973149434453,.09905282710345863,-.027081197212793062,.04396334728031629,.08598592808404903,-.06440210597098371,.11344648894176523,-.04525508361928721,-.0033627481062759495,-.06552658557509186,-.06567409253607301,-.020837968861429697,.024402999253028874,.015466292580588225,-.04932695227870523,-.09954853296559729,-.11056103199623027,-.05203517590855317],[-.0034584653198352355,.08173047614418248,.04205090325492933,-.20673617233092098,-.01918678129153077,-.01770931263598548,-.06296888043841405,-.020672760790206416,.10430012736186442,.004645338455840272,.002347660324921494,.04000959099000892,-.06097507297495692,.0036578431925638182,-.017462918205026205,.022780444868397098,.07817790357546268,.09943192679096242,-.0024518885244070067,-.1259992869397377],[.09712861511917825,.0021091910624301854,.0011487974317803925,-.003664679796444193,-.00020402199216735107,-.0002950630790080626,.00015780066191907344,-.08265038948831736,.0016065974001583869,-.0001559416216270565,-54727904831485806e-21,-.04847362841141357,-.0013575663381852705,-.03754640277422188,-.0016561616161499832,.02671874200492388,.002634292853563667,.002662667103605044,-.04208773082444077,-.0029947917415798823],[-.0019129526080266935,.10709246327169396,.05832925663349231,-.18607114049263718,-.010359050961291636,-.014981588209040738,.008012200455334498,.0016278032784891297,.08157367823787612,-.00791780919430848,-.002778764921927671,.0009546903739577708,-.06892932831009077,.0007394781550306134,-.08409026105263272,-.0005262268708218481,.13375408026912178,.13519475977153123,.0008289198229369799,-.1520581185386175],[.06641261142097908,.0027160178727324764,.0009683828906125248,-.10711621231805085,.02630471998366163,-.044626555190009395,-.08839863528597892,-.06353817661530803,-.10925171370014186,.04540289816921849,.0034525790352214,-.06705114087980064,.06322228047883854,-.020965836164988375,-.025071674259481383,.014557322724614043,.052366940659376415,.1033864484065217,-.11037875047163209,.04703362395594821],[.0008441353133364647,.08168688069996453,.04204537907842565,-.20267566347704935,-.020238219422379647,-.015964530372102555,-.059534368323843435,.02319255062706158,.10868617885682233,.0028598252732636277,.0022134321387772254,-.03739846647971955,-.06351369305742659,-.0028345153014708558,-.016488512201080392,-.023371761373115647,.07617503760772099,.09543511286131451,.0068033078519712,-.12795045157687654],[.20703888776046808,.004095530643884067,.0009182903060256748,-.00029318224193783675,-.0005512778931648725,-.00022805224437934772,.005199505793018393,-.007065030992639071,-.0025937632986591107,-.0002270212592155073,-.0008617330598756051,.003924056428378101,.002760543692760869,-.18348670413797583,-.00045015275908286324,-.021588694232823304,.0009628137692617791,-.00018547586884016306,.23464452882669662,.0015329766435944019],[-.00407764055750579,.20794724236737283,.046625444523509314,-.014886090234270774,-.02799068731984163,-.011579167501817512,.26400068400072507,.00013914611514436953,-.13169622503382422,-.01152682006741342,-.04375379628168578,-7728447450181717e-20,.14016436409825117,.0036137792018137043,-.02285614076293017,.00042519034051920836,.04888608721075643,-.009417386611017492,-.004621334946735389,.0778356441122841],[.001600149798509044,-.02989104961073433,-.07310001697269129,-.058468287694032256,.1185971519249081,.12934983734389552,.03215753387849516,.08257331512863446,-.04110047379745049,-.005708907546473644,-.11638049064707184,-.0053600186457387336,.009802600608769634,.09941862267941132,-.04900808936932794,.09662671233189384,.019636547733371066,-.04365158147420743,.005168663964690456,.007242884103174727],[-.008465579757951636,-.004679603974788934,.045349170381251615,.07574033840789662,-.03463787498038061,.08218501281379953,-.12096517723818774,.11907027593886906,-.07753296600526823,-.07891922561825053,-.012653839329841899,-.11579889444409854,-.08608102129987368,.014700684484061042,-.002279098380736856,-.07263410764392064,.13958423960770075,-.08018956940322698,.002018906461943132,.12988268130836492],[.01424380662597859,-.014200096866361181,-.0561920099033511,-.04317311663853608,.08096201852776987,.08443086283477232,.022292726265859285,.0819540031923333,.021520036248995907,.023644742127952947,-.06997835909879714,.010578253533974168,.005563782613030148,.10753640013705529,.04781691310140064,.10988794493865349,-.10152366815496501,-.038775585391088246,.009852910151646431,-.1047952022831282],[-.0019267548176591992,.008925388714249954,.038395556537414034,.07266518610541649,-.03531648617748426,.08596592469729245,-.095827634585293,.06700091987027884,-.07935901554697893,-.060241496386490526,.02295970146126563,-.08272383650604256,-.07334652213229416,.03440874237491588,-.038907662769628905,-.04699293027458156,.098012549165149,-.06102876784783787,.0007632173685449481,.10756844632916053],[.005981414137877068,-.019986810144644714,-.05215951689245676,-.044470068674562206,.07664611887065512,.09244398527720714,.004678028369475922,.10415240351429292,.004658130909816939,.0051387821644297,-.0964418805037773,.005970694366832435,-.008166219047882154,.0830683128449826,.04768622499627329,.09727061518699626,-.08253946949545786,-.026822366473815737,.008619654678141742,-.09732450372131647],[-.0021942894961033254,.014672723795261092,.0297720048321981,.03261477208134277,-.07029507502464344,.11259463615333912,-.09926869224353085,.06797666360574203,-.030441862025488736,-.007886017458831291,.043349675685024236,-.08512299915576585,-.02423614615027082,.010447936760906771,.03445782607482162,-.043728626489175956,-.10420367455137278,.05165343287807839,-.0020921056059804294,-.13233775532920924],[-.0042059935392670346,-.036744548164445875,-.07115007295919776,-.05527573034541877,.11733258745742503,.12551113047364854,.026702116872438945,.0980022153245705,-.03205801768570977,-.004738953269227426,-.10681090062656813,.0020600345006132207,.03017343074251409,.08161736537031507,-.06051754893182199,.07649898406150994,.010560607875077087,-.04846780838747249,.005835497187277355,-.010407245460860998],[-.004463156445117728,-.0004529515567529345,.03571250577605914,.033807803564813034,-.07212431629752575,.10250509947932059,-.1226494724455383,.11180724612070779,-.025713763387405553,-.018860328071287888,.019240580467794626,-.11284980000963721,-.03012098172110461,.01674742951533516,.05198355650234256,-.06614701624977856,-.08051248382206573,.055429747589261724,-.009107937018239745,-.11890323290806679],[.001932239579702112,.029683610868556625,.07482894414297415,.06140520838054132,-.11986904124223763,-.12601350788764124,-.0368955781539877,.07782090974878496,.038015754250682834,.0025970500443394723,.11579199621960418,-.0007963013793840591,-.013184423524449153,.09876268783296623,.048880345050464534,.09941173430555872,-.014125215491144956,.0404602802909568,.005085161644416435,-.002123160122042064],[.008396009184281595,-.0058529296934387584,.04243570258783502,.07337942430788835,-.02994127217609336,.08721440581663058,-.11960517297381305,-.12222924768386143,-.07909116380924514,-.07908281184066372,-.017226487294788227,.11592014345432393,-.08562829078670565,-.01860387464425463,-.004207015665351812,.06877312128775884,.14024917911015872,-.0818461564464191,-.0022208560358934135,.13006714598651917],[.014308626336015217,.014540520423140585,.05766025175192101,.04600081499215693,-.08228981366777635,-.0809804948204338,-.02604863437175908,.07925229960760558,-.02462809465625529,-.02599840397250559,.07082812577032044,.01382728639225384,-.008447474071878963,.10609816881106175,-.049311813835476996,.11165306622847265,.10530416416182468,.036342518602119435,.009815217782455157,.10894942298282573],[.0013644133178536335,.008359340915330945,.036153230930321134,.07090890135996192,-.03210123372298971,.08922370910650566,-.09487554923131329,-.07017588552785688,-.07845012595494241,-.059263772307063395,.020186511169956366,.08224316825811924,-.0730705697779436,-.03861628518124848,-.036994707959346715,.04262966971973222,.09393906535445655,-.06250822241194857,-.001150582066176832,.10335873595850939],[.006063175371552404,.02054904645401137,.05329133509804422,.04571978341092672,-.07935453658465302,-.08793890245333298,-.008583087504493167,.101395065582099,-.00585316142030631,-.005445307614197795,.09807397657368588,.009317766933803002,.007205592342012423,.08259250865896775,-.04629247415603381,.09891698970206607,.0783724601169794,.028835410650639128,.008695346513225725,.09203825434459922],[.0019570707435616432,.01387436820763277,.027695145380569608,.030838478735115384,-.0672226348344797,.11614728554614781,-.0990075139474608,-.07202493060305075,-.030234841632456377,-.007677563316653203,.039518676801310174,.08482189219689315,-.024538894693039576,-.013710634372263898,.03630874094086521,.03986470245427673,-.10737284251528514,.05055725035991371,.0017510858493843574,-.1360672636873884],[-.00402699585598165,.03669821828848045,.07250107035469582,.056564040810879776,-.12008147931184913,-.12137767813607811,-.03151071058407556,.09352382549573536,.031020682241923343,.0039926562394971814,.10748566435040698,.006501877535294977,-.03133603981647848,.08089464498434797,.06251746142633369,.07904418680908222,-.013722582803368383,.05061275847617297,.0061895952050397204,.005717381357625699],[.004625305555512988,-.0018994102698154198,.032883289803905605,.03160511405202575,-.06744843517174993,.10736758608785574,-.12150296809183195,-.115579360433701,-.02695610132653348,-.01903229752809108,.015019999618782623,.11268117275248012,-.028909549827634367,-.019948111144142567,.04956037623096271,.06308358623985899,-.08003422524829355,.05347835120052562,.008871102262334667,-.11922080818583679]],numEvalues:20,eigenValues:[448.2615028731629,152.88433766749935,77.0794222341117,38.340488190771154,27.7543501208544,15.293153116152746,13.085890189100295,10.196616391772121,7.236467941170144,6.596453707383955,5.738899938129388,5.622321591085375,4.622729198414605,4.393149515511058,3.9714381417641094,3.5791364382171165,3.4263759023353697,3.078849017302407,2.63957985738361,2.4414195196560233],numPtsPerSample:71,nonRegularizedVectors:[0],meanShape:[[25.011254225136952,34.81517356757155],[24.381567267455893,45.62676320390881],[25.830707280728745,56.164927637057076],[28.675368741312013,66.69573595497496],[33.59842962462659,75.54915577841888],[40.33264054159778,82.56185730354144],[48.35930909116706,87.99983611495458],[57.763839129671,89.7833114774977],[67.09085203787197,87.63091750236714],[74.89717655776496,81.88110715348313],[81.35004130814275,74.60868555761579],[85.92068259987741,65.568286826737],[88.34848937446895,54.93363700084711],[89.38156726745592,44.34658517018312],[88.32666422859364,33.56817361245254],[81.56685632624777,27.444862527091914],[76.61977291820983,25.17298033285374],[69.1535485656504,25.74681125128558],[63.33720223541309,27.34067471461259],[31.524715699235657,28.430444822342793],[36.37850774632676,25.96553392858243],[43.861536613791145,26.244938607124027],[49.73613051896211,27.608548456866743],[35.9824349270655,35.44340608432884],[41.74296700227427,32.491136119230305],[48.056933854020826,35.38320009473131],[41.82789333728334,37.01094114500529],[41.96084875111114,34.61071899652552],[77.38872809802479,34.62790720778304],[71.51641815297683,31.904746609209838],[65.3212222111797,35.04317912976654],[71.60952418697246,36.42439053543194],[71.382163563407,34.031264828125074],[56.645668790714296,33.009120609139984],[50.19418940248494,46.94109805231665],[47.45698830892593,51.77099798102398],[50.07251572822895,55.035267306968535],[57.101339593815,56.14543557571483],[64.08100000856956,54.759369555253215],[66.5659690980221,51.39464571251506],[63.64071423300322,46.67626811819429],[56.82612949694652,42.171866411748],[52.14225130369289,53.25579760946124],[61.942803190976235,53.06277528262285],[45.0908704071806,66.45744111296608],[49.30691311256561,63.53596165337137],[54.022310354591866,62.36005547418881],[57.235786373192525,62.97186161124688],[60.42268062019531,62.23399988308512],[65.1807222181198,63.223326242164035],[69.50852815712136,65.97653420394317],[66.69295291154066,69.86104089266809],[62.79690252546874,72.43043738721082],[57.4387936856146,73.2793930325098],[52.05141252402308,72.64207031431033],[48.057213957229465,70.22807264115391],[51.31282628100382,68.33485734485816],[57.355342381712035,69.04222084961435],[63.36532026743049,68.0974829132731],[63.30266650865377,65.1057867536814],[57.28308296345625,65.37330757122123],[51.257633954541575,65.34301423200844],[56.99738460100593,50.86720524009678],[38.34501696780538,33.379866011204456],[45.43217757469057,33.21308405175762],[45.10297717946054,36.387811845290685],[38.61692847161157,36.562115185290565],[74.94672669442139,32.658993629837994],[67.85849509241058,32.77139668154979],[68.31244453197587,35.93070030253472],[74.80032654357314,35.84948147148668]]},hints:{rightEye:[71.382163563407,34.031264828125074],leftEye:[41.96084875111114,34.61071899652552],nose:[56.99738460100593,50.86720524009678]}},e.exports&&(t=e.exports=r),t.pModel=r})),canRenderToFloatTexture=function(e){var t=!1,r=e,a=r.createTexture();r.bindTexture(r.TEXTURE_2D,a),r.texImage2D(r.TEXTURE_2D,0,r.RGBA,2,2,0,r.RGBA,r.FLOAT,null),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MAG_FILTER,r.NEAREST),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MIN_FILTER,r.NEAREST);var n=r.createFramebuffer();return r.bindFramebuffer(r.FRAMEBUFFER,n),r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,a,0),r.checkFramebufferStatus(r.FRAMEBUFFER)==r.FRAMEBUFFER_COMPLETE&&(t=!0),r.deleteTexture(a),r.deleteFramebuffer(n),r.bindTexture(r.TEXTURE_2D,null),r.bindFramebuffer(r.FRAMEBUFFER,null),t},version="1.1.2",DEFAULT_MODEL=model_pca_20_svm;index.polyfill(),window.Promise||(window.Promise=promise);var clm={tracker:function(e){e||(e={}),void 0===e.constantVelocity&&(e.constantVelocity=!0),void 0===e.searchWindow&&(e.searchWindow=11),void 0===e.useWebGL&&(e.useWebGL=!0),void 0===e.scoreThreshold&&(e.scoreThreshold=.5),void 0===e.stopOnConvergence&&(e.stopOnConvergence=!1),void 0===e.weightPoints&&(e.weightPoints=void 0),void 0===e.sharpenResponse&&(e.sharpenResponse=!1),void 0===e.faceDetection&&(e.faceDetection={});var t,r,a,n,i,o,s,l,u,h,c,f,d,v,p,g,_,m,y,b,x,k,w=!1,C=!1,T=[],S=[],I=[],A=[],R=[],N=[],E=[],F="single",M=["raw"],D=0,O=[10,5,1],L=!0,z=!1;if("undefined"!=typeof Float64Array)var B=new Float64Array(2),P=new Float64Array(2);else B=new Array(2),P=new Array(2);var V,U,W,G,H,j,q,X,K,Q,Y,J,Z,$,ee,te,re=0,ae=document.createElement("canvas"),ne=ae.getContext("2d"),ie=[],oe=0,se=Math.PI/2;this.init=function(S){void 0===S&&(S=DEFAULT_MODEL),t=(d=S).patchModel.numPatches,r=d.patchModel.patchSize[0],p="MOSSE"==(n=d.patchModel.patchType)?r:e.searchWindow,a=d.shapeModel.numEvalues,g=d.patchModel.canvasSize[0],_=d.patchModel.canvasSize[1],c=document.createElement("canvas"),l=c.getContext("2d"),u=c.width=g+(p-1)+r-1,h=c.height=_+(p-1)+r-1,o=numeric1_2_6.rep([2*t,a],0);for(var I=0;I<2*t;I++)for(var A=0;A<a;A++)o[I][A]=d.shapeModel.eigenVectors[I][A];for(I=0;I<t;I++)E[I]=[d.shapeModel.meanShape[I][0],d.shapeModel.meanShape[I][1]];for(j=q=0,G=H=1e6,I=0;I<t;I++)E[I][0]<G&&(G=E[I][0]),E[I][1]<H&&(H=E[I][1]),E[I][0]>j&&(j=E[I][0]),E[I][1]>q&&(q=E[I][1]);for(X=j-G,K=q-H,d.scoring&&(Q=new Float64Array(d.scoring.coef),Y=d.scoring.bias,ae.width=d.scoring.size[0],ae.height=d.scoring.size[1]),s=d.shapeModel.eigenValues,f=d.patchModel.weights,v=d.patchModel.bias,i=numeric1_2_6.rep([a+4,a+4],0),I=0;I<a;I++)i[I+4][I+4]=d.shapeModel.nonRegularizedVectors.indexOf(I)>=0?1e-7:1/s[I];for(I=0;I<a+4;I++)T[I]=0;if("SVM"==n){var N,F=document.createElement("canvas");if(window.WebGLRenderingContext&&((N=F.getContext("webgl")||F.getContext("experimental-webgl"))&&N.getExtension("OES_texture_float")&&canRenderToFloatTexture(N)||(N=null)),N&&e.useWebGL&&void 0!==webglFilter){V=new webglFilter;try{V.init(f,v,t,p+r-1,p+r-1,r,r),"lbp"in f&&(C=!0),"sobel"in f&&(w=!0)}catch(M){console.error(M),alert("There was a problem setting up webGL programs, falling back to slightly slower javascript version. :("),V=void 0,(U=new svmFilter).init(f.raw,v.raw,t,r,p)}}else{if(void 0===svmFilter)throw new Error("Could not initiate filters, please make sure that svmfilter.js or svmfilter_conv_js.js is loaded.");(U=new svmFilter).init(f.raw,v.raw,t,r,p)}}else"MOSSE"==n&&(W=new mosseFilterResponses).init(f,t,r,r);if(b=x="SVM"==n?r+p-1:p,k=b*x,y=p*p,"undefined"!=typeof Float64Array)for(m=new Float64Array(y),I=0;I<t;I++)R[I]=new Float64Array(k);else for(m=new Array(y),I=0;I<t;I++)R[I]=new Array(k);if(e.weightPoints){for(ee=[],I=0;I<t;I++)I in e.weightPoints?(ee[2*I]=e.weightPoints[I],ee[2*I+1]=e.weightPoints[I]):(ee[2*I]=1,ee[2*I+1]=1);ee=numeric1_2_6.diag(ee)}te=new faceDetection(d,e.faceDetection)},this.start=function(e,t){if(void 0===d)return console.log("tracker needs to be initalized before starting to track."),!1;void 0===Z&&(Z=e,$=t),te.init(e),J=requestAnimationFrame(le)};var le=(function(){J=requestAnimationFrame(le);for(var e=(new Date).getTime();(new Date).getTime()-e<16&&this.track(Z,$););}).bind(this);function ue(){L=!0,ie=[],I=[],S=[],A=[];for(var e=0;e<T.length;e++)T[e]=0}this.stop=function(){cancelAnimationFrame(J)},this.track=function(r,c){var f,d,v,g,_;if(emitEvent("clmtrackrBeforeTrack"),L)return z||(z=!0,te.getInitialPosition(c).then((function(e){g=e[1],d=e[2],v=e[3],T[0]=(f=e[0])*Math.cos(g)-1,T[1]=f*Math.sin(g),T[2]=d,T[3]=v,S=de(T,!0),L=!1,z=!1})).catch((function(e){emitEvent("clmtrackrNotFound"),z=!1}))),!1;if(re+=1,e.constantVelocity&&I.length>=2)for(var y=0;y<T.length;y++)T[y]=.1*I[1][y]+.9*(2*I[1][y]-I[0][y]);(g=se-Math.atan((T[0]+1)/T[1]))>se&&(g-=Math.PI),f=T[1]/Math.sin(g),d=T[2],v=T[3],l.save(),l.clearRect(0,0,u,h),l.scale(1/f,1/f),l.rotate(-g),l.translate(-d,-v),l.drawImage(r,0,0,r.width,r.height),l.restore();var w,C,E=de(T,!1);if(Q&&re%10==0&&!ge())return ue(),emitEvent("clmtrackrLost"),!1;for(y=0;y<t;y++){_=E[y][1]-x/2,w=l.getImageData(Math.round(E[y][0]-b/2),Math.round(_),b,x).data,C=R[y];for(var F=0;F<k;F++)C[F]=.3*w[4*F]+.59*w[4*F+1]+.11*w[4*F+2]}if("SVM"==n)if(void 0!==V)N=ce(R);else{if(void 0===U)throw new Error("SVM-filters do not seem to be initiated properly.");N=U.getResponses(R)}else"MOSSE"==n&&(N=W.getResponses(R));if(e.sharpenResponse)for(y=0;y<t;y++)for(F=0;F<N[y].length;F++)N[y][F]=Math.pow(N[y][F],e.sharpenResponse);var M,D=S,G=[];for(y=0;y<O.length;y++){var H,j;for(M=fe(T,o),F=0;F<t;F++){var q=ve(p,S[F],B,m,N,H=D[F][0]-(p-1)*f/2,j=D[F][1]-(p-1)*f/2,F,O[y],f);pe(p,P,B,m,q,H,j,f),G[F]=[P[0]-S[F][0],P[1]-S[F][1]]}for(var X=numeric1_2_6.rep([2*t,1],0),K=0;K<t;K++)X[2*K][0]=G[K][0],X[2*K+1][0]=G[K][1];var Y,J=numeric1_2_6.mul(i,O[y]);Y=numeric1_2_6.dot(numeric1_2_6.transpose(M),e.weightPoints?numeric1_2_6.dot(ee,M):M);for(var Z=numeric1_2_6.rep([a+4,1],0),$=0;$<a+4;$++)Z[$][0]=T[$];var ae,ne=numeric1_2_6.dot(J,Z);ae=numeric1_2_6.dot(numeric1_2_6.transpose(M),e.weightPoints?numeric1_2_6.dot(ee,X):X);var oe,le=numeric1_2_6.add(J,Y),he=numeric1_2_6.sub(ne,ae),_e=numeric1_2_6.dot(numeric1_2_6.inv(le),he),me=S;for(K=0;K<a+4;K++)T[K]-=_e[K];for(K=0;K<a;K++)oe=Math.abs(3*Math.sqrt(s[K])),Math.abs(T[K+4])>oe&&(T[K+4]=T[K+4]>0?oe:-oe);S=de(T,!0);var ye,be,xe=0;for(K=0;K<S.length;K++)xe+=(ye=S[K][0]-me[K][0])*ye+(be=S[K][1]-me[K][1])*be;if(xe<.01)break}return e.constantVelocity&&(I.push(T.slice()),3==I.length&&I.shift()),10==A.length&&A.shift(),A.push(S.slice(0)),emitEvent("clmtrackrIteration"),ie.length>=5&&this.getConvergence()<.5&&(e.stopOnConvergence&&this.stop(),emitEvent("clmtrackrConverged")),S},this.reset=function(){ue(),Z=void 0,$=void 0},this.draw=function(e,t,r){var a;a=void 0===t?T.slice(0):t.slice(0);var n,i=e.getContext("2d");i.fillStyle="rgb(200,200,200)",i.strokeStyle="rgb(130,255,50)",n=void 0===r?d.path.normal:d.path[r];for(var o=0;o<n.length;o++)"number"==typeof n[o]?me(i,n[o],a):_e(i,n[o],a)},this.getScore=function(){return oe},this.calculatePositions=function(e){return de(e,!0)},this.getCurrentPosition=function(){return!L&&S},this.getCurrentParameters=function(){return T},this.getConvergence=function(){if(A.length<10)return 999999;for(var e=0,r=0,a=0,n=0,i=0;i<5;i++)for(var o=0;o<t;o++)e+=A[i][o][0],r+=A[i][o][1];for(e/=5,r/=5,i=5;i<10;i++)for(o=0;o<t;o++)a+=A[i][o][0],n+=A[i][o][1];var s=(a/=5)-e,l=(n/=5)-r;return(s*s+l*l)/A.length},this.setResponseMode=function(e,t){if(void 0!==d)if(void 0!==V)if(["single","blend","cycle"].indexOf(e)<0)console.log('Tried to set an unknown responsemode : "'+e+'". No changes made.');else if(t instanceof Array){for(var r=0;r<t.length;r++)["raw","sobel","lbp"].indexOf(t[r])<0&&console.log('Unknown element in responsemode list : "'+t[r]+'". No changes made.'),"sobel"==t[r]&&0==w&&console.log("The sobel filters have not been initialized! No changes made."),"lbp"==t[r]&&0==C&&console.log("The LBP filters have not been initialized! No changes made.");D=0,F=e,M=t}else console.log("List in setResponseMode must be an array of strings! No changes made.");else console.log('Responsemodes are only allowed when using webGL. In pure JS, only "raw" mode is available.');else console.log("Clmtrackr has not been initialized with a model yet. No changes made.")};var he=function(e,t){return"lbp"==e?V.getLBPResponses(t):"raw"==e?V.getRawResponses(t):"sobel"==e?V.getSobelResponses(t):void 0},ce=function(e){if("single"==F)return he(M[0],e);if("cycle"==F){var r=he(M[D],e);return++D>=M.length&&(D=0),r}for(var a=[],n=0;n<M.length;n++)a[n]=he(M[n],e);var i=[],o=p*p;for(n=0;n<t;n++){r=Array(o);for(var s=0;s<o;s++)r[s]=0;for(var l=0;l<M.length;l++)for(s=0;s<o;s++)r[s]+=a[l][n][s]/M.length;i[n]=r}return i},fe=function(e,r){for(var n,i,o=numeric1_2_6.rep([2*t,a+4],0),s=0;s<t;s++){n=E[s][0],i=E[s][1];for(var l=0;l<a;l++)n+=e[l+4]*r[2*s][l],i+=e[l+4]*r[2*s+1][l];for(o[2*s][0]=n,o[2*s+1][0]=i,n=E[s][1],i=E[s][0],l=0;l<a;l++)n+=e[l+4]*r[2*s+1][l],i+=e[l+4]*r[2*s][l];o[2*s][1]=-n,o[2*s+1][1]=i,o[2*s][2]=1,o[2*s+1][2]=0,o[2*s][3]=0,o[2*s+1][3]=1;for(var u=0;u<a;u++)i=e[0]*r[2*s+1][u]+e[1]*r[2*s][u]+r[2*s+1][u],o[2*s][u+4]=n=e[0]*r[2*s][u]-e[1]*r[2*s+1][u]+r[2*s][u],o[2*s+1][u+4]=i}return o},de=function(e,r){for(var a,n,i,o=e.length,s=[],l=0;l<t;l++){a=E[l][0],n=E[l][1];for(var u=0;u<o-4;u++)a+=d.shapeModel.eigenVectors[2*l][u]*e[u+4],n+=d.shapeModel.eigenVectors[2*l+1][u]*e[u+4];r&&(i=e[0]*n+e[1]*a+e[3],a+=e[0]*a-e[1]*n+e[2],n+=i),s[l]=[a,n]}return s},ve=function(e,t,r,a,n,i,o,s,l,u){for(var h,c,f=0,d=0,v=0;v<e;v++){r[1]=o+v*u;for(var p=0;p<e;p++)r[0]=i+p*u,h=t[0]-r[0],c=t[1]-r[1],a[f]=n[s][f]*Math.exp(-.5*(h*h+c*c)/(l*u)),d+=a[f],f++}return d},pe=function(e,t,r,a,n,i,o,s){var l=0,u=0;t[0]=0,t[1]=0;for(var h=0;h<e;h++){r[1]=o+h*s;for(var c=0;c<e;c++)r[0]=i+c*s,t[0]+=(u=a[l]/n)*r[0],t[1]+=u*r[1],l++}},ge=function(){ne.drawImage(c,Math.round(G+X/4.5),Math.round(H-K/12),Math.round(X-2*X/4.5),Math.round(K-K/12),0,0,20,22);for(var t=ne.getImageData(0,0,20,22),r=new Array(440),a=t.data,n=0,i=0;i<440;i++)r[i]=.3*a[4*i]+.59*a[4*i+1]+.11*a[4*i+2],r[i]=Math.log(r[i]+1),r[i]>n&&(n=r[i]);if(n>0){var o=0;for(i=0;i<440;i++)o+=r[i];o/=440;var s=0;for(i=0;i<440;i++)s+=(r[i]-o)*(r[i]-o);s/=440,s=Math.sqrt(s);var l=0;for(i=0;i<440;i++)r[i]=(r[i]-o)/s,l+=r[i]*Q[i];if(l+=Y,l=1/(1+Math.exp(-l)),5==ie.length&&ie.shift(),ie.push(l),ie.length>4){for(oe=0,i=0;i<5;i++)oe+=ie[i];if((oe/=5)<e.scoreThreshold)return!1}}return!0},_e=function(e,t,r){var n,i,o,s;e.beginPath();for(var l=0;l<t.length;l++){i=E[(n=2*t[l])/2][0],o=E[n/2][1];for(var u=0;u<a;u++)i+=d.shapeModel.eigenVectors[n][u]*r[u+4],o+=d.shapeModel.eigenVectors[n+1][u]*r[u+4];s=r[0]*o+r[1]*i+r[3],i+=r[0]*i-r[1]*o+r[2],o+=s,0==n?e.moveTo(i,o):e.lineTo(i,o)}e.moveTo(0,0),e.closePath(),e.stroke()};function me(e,t,r){var n,i,o,s;i=E[(n=2*t)/2][0],o=E[n/2][1];for(var l=0;l<a;l++)i+=d.shapeModel.eigenVectors[n][l]*r[l+4],o+=d.shapeModel.eigenVectors[n+1][l]*r[l+4];s=r[0]*o+r[1]*i+r[3],i+=r[0]*i-r[1]*o+r[2],o+=s,e.beginPath(),e.arc(i,o,1,0,2*Math.PI,!0),e.closePath(),e.fill()}return!0},version:version};__webpack_exports__.a=clm}).call(this,__webpack_require__("3UD+")(module))},YSVl:function(e,t,r){var a=r("EhIR"),n=r("uDiL"),i=r("pJ6O"),o=r("yuCN"),s=r("euyF"),l=r("ie1u"),u=r("pJ3+");u.alea=a,u.xor128=n,u.xorwow=i,u.xorshift7=o,u.xor4096=s,u.tychei=l,e.exports=u},euyF:function(e,t,r){(function(e){var a;!function(e,n,i){function o(e){var t=this;t.next=function(){var e,r,a=t.w,n=t.X,i=t.i;return t.w=a=a+1640531527|0,r=n[i+34&127],e=n[i=i+1&127],r^=r<<13,e^=e<<17,r=n[i]=(r^=r>>>15)^(e^=e>>>12),t.i=i,r+(a^a>>>16)|0},function(e,t){var r,a,n,i,o,s=[],l=128;for(t===(0|t)?(a=t,t=null):(t+="\0",a=0,l=Math.max(l,t.length)),n=0,i=-32;i<l;++i)t&&(a^=t.charCodeAt((i+32)%t.length)),0===i&&(o=a),a^=a<<10,a^=a>>>15,a^=a<<4,a^=a>>>13,i>=0&&(n=0==(r=s[127&i]^=a+(o=o+1640531527|0))?n+1:0);for(n>=128&&(s[127&(t&&t.length||0)]=-1),n=127,i=512;i>0;--i)a=s[n+34&127],r=s[n=n+1&127],a^=a<<13,r^=r<<17,s[n]=(a^=a>>>15)^(r^=r>>>12);e.w=o,e.X=s,e.i=n}(t,e)}function s(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function l(e,t){null==e&&(e=+new Date);var r=new o(e),a=t&&t.state,n=function(){return(r.next()>>>0)/4294967296};return n.double=function(){do{var e=((r.next()>>>11)+(r.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},n.int32=r.next,n.quick=n,a&&(a.X&&s(a,r),n.state=function(){return s(r,{})}),n}n&&n.exports?n.exports=l:r("B9Yq")&&r("PDX0")?void 0===(a=(function(){return l}).call(t,r,t,n))||(n.exports=a):this.xor4096=l}(0,e,r("B9Yq"))}).call(this,r("YuTi")(e))},ie1u:function(e,t,r){(function(e){var a;!function(e,n,i){function o(e){var t=this,r="";t.next=function(){var e=t.b,r=t.c,a=t.d,n=t.a;return e=e<<25^e>>>7^r,r=r-a|0,a=a<<24^a>>>8^n,n=n-e|0,t.b=e=e<<20^e>>>12^r,t.c=r=r-a|0,t.d=a<<16^r>>>16^n,t.a=n-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):r+=e;for(var a=0;a<r.length+20;a++)t.b^=0|r.charCodeAt(a),t.next()}function s(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function l(e,t){var r=new o(e),a=t&&t.state,n=function(){return(r.next()>>>0)/4294967296};return n.double=function(){do{var e=((r.next()>>>11)+(r.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},n.int32=r.next,n.quick=n,a&&("object"==typeof a&&s(a,r),n.state=function(){return s(r,{})}),n}n&&n.exports?n.exports=l:r("B9Yq")&&r("PDX0")?void 0===(a=(function(){return l}).call(t,r,t,n))||(n.exports=a):this.tychei=l}(0,e,r("B9Yq"))}).call(this,r("YuTi")(e))},"pJ3+":function(e,t,r){var a;!function(n,i){var o,s=this,l=i.pow(256,6),u=i.pow(2,52),h=2*u;function c(e,t,r){var a=[],c=v(function e(t,r){var a,n=[],i=typeof t;if(r&&"object"==i)for(a in t)try{n.push(e(t[a],r-1))}catch(o){}return n.length?n:"string"==i?t:t+"\0"}((t=1==t?{entropy:!0}:t||{}).entropy?[e,p(n)]:null==e?function(){try{var e;return o&&(e=o.randomBytes)?e=e(256):(e=new Uint8Array(256),(s.crypto||s.msCrypto).getRandomValues(e)),p(e)}catch(a){var t=s.navigator,r=t&&t.plugins;return[+new Date,s,r,s.screen,p(n)]}}():e,3),a),g=new f(a),_=function(){for(var e=g.g(6),t=l,r=0;e<u;)e=256*(e+r),t*=256,r=g.g(1);for(;e>=h;)e/=2,t/=2,r>>>=1;return(e+r)/t};return _.int32=function(){return 0|g.g(4)},_.quick=function(){return g.g(4)/4294967296},_.double=_,v(p(g.S),n),(t.pass||r||function(e,t,r,a){return a&&(a.S&&d(a,g),e.state=function(){return d(g,{})}),r?(i.random=e,t):e})(_,c,"global"in t?t.global:this==i,t.state)}function f(e){var t,r=e.length,a=this,n=0,i=a.i=a.j=0,o=a.S=[];for(r||(e=[r++]);n<256;)o[n]=n++;for(n=0;n<256;n++)o[n]=o[i=255&i+e[n%r]+(t=o[n])],o[i]=t;(a.g=function(e){for(var t,r=0,n=a.i,i=a.j,o=a.S;e--;)t=o[n=255&n+1],r=256*r+o[255&(o[n]=o[i=255&i+t])+(o[i]=t)];return a.i=n,a.j=i,r})(256)}function d(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function v(e,t){for(var r,a=e+"",n=0;n<a.length;)t[255&n]=255&(r^=19*t[255&n])+a.charCodeAt(n++);return p(t)}function p(e){return String.fromCharCode.apply(0,e)}if(i.seedrandom=c,v(i.random(),n),e.exports){e.exports=c;try{o=r(6)}catch(g){}}else void 0===(a=(function(){return c}).call(t,r,t,e))||(e.exports=a)}([],Math)},pJ6O:function(e,t,r){(function(e){var a;!function(e,n,i){function o(e){var t=this,r="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:r+=e;for(var a=0;a<r.length+64;a++)t.x^=0|r.charCodeAt(a),a==r.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function s(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function l(e,t){var r=new o(e),a=t&&t.state,n=function(){return(r.next()>>>0)/4294967296};return n.double=function(){do{var e=((r.next()>>>11)+(r.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},n.int32=r.next,n.quick=n,a&&("object"==typeof a&&s(a,r),n.state=function(){return s(r,{})}),n}n&&n.exports?n.exports=l:r("B9Yq")&&r("PDX0")?void 0===(a=(function(){return l}).call(t,r,t,n))||(n.exports=a):this.xorwow=l}(0,e,r("B9Yq"))}).call(this,r("YuTi")(e))},uDiL:function(e,t,r){(function(e){var a;!function(e,n,i){function o(e){var t=this,r="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:r+=e;for(var a=0;a<r.length+64;a++)t.x^=0|r.charCodeAt(a),t.next()}function s(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function l(e,t){var r=new o(e),a=t&&t.state,n=function(){return(r.next()>>>0)/4294967296};return n.double=function(){do{var e=((r.next()>>>11)+(r.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},n.int32=r.next,n.quick=n,a&&("object"==typeof a&&s(a,r),n.state=function(){return s(r,{})}),n}n&&n.exports?n.exports=l:r("B9Yq")&&r("PDX0")?void 0===(a=(function(){return l}).call(t,r,t,n))||(n.exports=a):this.xor128=l}(0,e,r("B9Yq"))}).call(this,r("YuTi")(e))},yuCN:function(e,t,r){(function(e){var a;!function(e,n,i){function o(e){var t=this;t.next=function(){var e,r,a=t.x,n=t.i;return e=a[n],r=(e^=e>>>7)^e<<24,r^=(e=a[n+1&7])^e>>>10,r^=(e=a[n+3&7])^e>>>3,r^=(e=a[n+4&7])^e<<7,e=a[n+7&7],a[n]=r^=(e^=e<<13)^e<<9,t.i=n+1&7,r},function(e,t){var r,a=[];if(t===(0|t))a[0]=t;else for(t=""+t,r=0;r<t.length;++r)a[7&r]=a[7&r]<<15^t.charCodeAt(r)+a[r+1&7]<<13;for(;a.length<8;)a.push(0);for(r=0;r<8&&0===a[r];++r);for(8==r&&(a[7]=-1),e.x=a,e.i=0,r=256;r>0;--r)e.next()}(t,e)}function s(e,t){return t.x=e.x.slice(),t.i=e.i,t}function l(e,t){null==e&&(e=+new Date);var r=new o(e),a=t&&t.state,n=function(){return(r.next()>>>0)/4294967296};return n.double=function(){do{var e=((r.next()>>>11)+(r.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},n.int32=r.next,n.quick=n,a&&(a.x&&s(a,r),n.state=function(){return s(r,{})}),n}n&&n.exports?n.exports=l:r("B9Yq")&&r("PDX0")?void 0===(a=(function(){return l}).call(t,r,t,n))||(n.exports=a):this.xorshift7=l}(0,e,r("B9Yq"))}).call(this,r("YuTi")(e))}}])})();